{
  "pathID": "/internal/extsvc/gitolite",
  "documentation": {
    "identifier": "gitolite",
    "newPage": true,
    "searchKey": "internal/extsvc/gitolite",
    "tags": [
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package gitolite"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/extsvc/gitolite#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/extsvc/gitolite#Repo",
              "documentation": {
                "identifier": "Repo",
                "newPage": false,
                "searchKey": "gitolite.Repo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Repo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Repo struct {\n\t// Name is the name of the repository as it is returned by `ssh git@GITOLITE_HOST info`\n\tName string\n\n\t// URL is the clone URL of the repository.\n\tURL string\n}\n```\n\nRepo is the repository metadata returned by the Gitolite API. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/gitolite#Client",
              "documentation": {
                "identifier": "Client",
                "newPage": false,
                "searchKey": "gitolite.Client",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Client struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Client struct {\n\tHost string\n}\n```\n\nClient is a client for the Gitolite API. \n\nIMPORTANT: in order to authenticate to the Gitolite API, the client must be invoked from a service in an environment that contains a Gitolite-authorized SSH key. As of writing, only gitserver meets this criterion (i.e., only invoke this client from gitserver). \n\nImpl note: To change the above, remove the invocation of the `ssh` binary and replace it with use of the `ssh` package, reading arguments from config. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/gitolite#NewClient",
                    "documentation": {
                      "identifier": "NewClient",
                      "newPage": false,
                      "searchKey": "gitolite.NewClient",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewClient(host string) *Client"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewClient(host string) *Client\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/gitolite#Client.ListRepos",
                    "documentation": {
                      "identifier": "Client.ListRepos",
                      "newPage": false,
                      "searchKey": "gitolite.Client.ListRepos",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) ListRepos(ctx context.Context) ([]*Repo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) ListRepos(ctx context.Context) ([]*Repo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/gitolite#errUnauthorized",
              "documentation": {
                "identifier": "errUnauthorized",
                "newPage": false,
                "searchKey": "gitolite.errUnauthorized",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type errUnauthorized struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype errUnauthorized struct {\n\terror\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/gitolite#errUnauthorized.Unauthorized",
                    "documentation": {
                      "identifier": "errUnauthorized.Unauthorized",
                      "newPage": false,
                      "searchKey": "gitolite.errUnauthorized.Unauthorized",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*errUnauthorized) Unauthorized() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*errUnauthorized) Unauthorized() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/extsvc/gitolite#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/extsvc/gitolite#ExternalRepoSpec",
              "documentation": {
                "identifier": "ExternalRepoSpec",
                "newPage": false,
                "searchKey": "gitolite.ExternalRepoSpec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExternalRepoSpec(repo *Repo, serviceID string) api.ExternalRepoSpec"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExternalRepoSpec(repo *Repo, serviceID string) api.ExternalRepoSpec\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/gitolite#ServiceID",
              "documentation": {
                "identifier": "ServiceID",
                "newPage": false,
                "searchKey": "gitolite.ServiceID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ServiceID(gitoliteHost string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ServiceID(gitoliteHost string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/gitolite#CloneURL",
              "documentation": {
                "identifier": "CloneURL",
                "newPage": false,
                "searchKey": "gitolite.CloneURL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func CloneURL(externalRepoSpec api.ExternalRepoSpec) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CloneURL(externalRepoSpec api.ExternalRepoSpec) string\n```\n\nCloneURL returns the clone URL of the external repository. The external repo spec must be of type \"gitolite\"; otherwise, this will return an empty string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/gitolite#decodeRepos",
              "documentation": {
                "identifier": "decodeRepos",
                "newPage": false,
                "searchKey": "gitolite.decodeRepos",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func decodeRepos(host, gitoliteInfo string) []*Repo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decodeRepos(host, gitoliteInfo string) []*Repo\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/gitolite#maybeUnauthorized",
              "documentation": {
                "identifier": "maybeUnauthorized",
                "newPage": false,
                "searchKey": "gitolite.maybeUnauthorized",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func maybeUnauthorized(err error) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc maybeUnauthorized(err error) error\n```\n\nnewErrUnauthorized will return an errUnauthorized wrapping err if there is permission issue. Otherwise, it return err unchanged This ensures that we implement the unauthorizeder interface from the errcode package \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/gitolite#TestDecodeRepos",
              "documentation": {
                "identifier": "TestDecodeRepos",
                "newPage": false,
                "searchKey": "gitolite.TestDecodeRepos",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecodeRepos(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecodeRepos(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/gitolite#TestMaybeUnauthorized",
              "documentation": {
                "identifier": "TestMaybeUnauthorized",
                "newPage": false,
                "searchKey": "gitolite.TestMaybeUnauthorized",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMaybeUnauthorized(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMaybeUnauthorized(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
