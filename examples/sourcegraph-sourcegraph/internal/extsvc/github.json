{
  "pathID": "/internal/extsvc/github",
  "documentation": {
    "identifier": "github",
    "newPage": true,
    "searchKey": "internal/extsvc/github",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package github"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package github implements a GitHub API client. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/extsvc/github#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/extsvc/github#VisibilityAll",
              "documentation": {
                "identifier": "VisibilityAll",
                "newPage": false,
                "searchKey": "github.VisibilityAll",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const VisibilityAll"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst VisibilityAll Visibility = \"all\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#VisibilityPrivate",
              "documentation": {
                "identifier": "VisibilityPrivate",
                "newPage": false,
                "searchKey": "github.VisibilityPrivate",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const VisibilityPrivate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst VisibilityPrivate Visibility = \"private\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#VisibilityPublic",
              "documentation": {
                "identifier": "VisibilityPublic",
                "newPage": false,
                "searchKey": "github.VisibilityPublic",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const VisibilityPublic"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst VisibilityPublic Visibility = \"public\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#convertToDraftEventFmtstr",
              "documentation": {
                "identifier": "convertToDraftEventFmtstr",
                "newPage": false,
                "searchKey": "github.convertToDraftEventFmtstr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const convertToDraftEventFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst convertToDraftEventFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#createPullRequestCommentMutation",
              "documentation": {
                "identifier": "createPullRequestCommentMutation",
                "newPage": false,
                "searchKey": "github.createPullRequestCommentMutation",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const createPullRequestCommentMutation"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst createPullRequestCommentMutation = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#graphqlErrTypeNotFound",
              "documentation": {
                "identifier": "graphqlErrTypeNotFound",
                "newPage": false,
                "searchKey": "github.graphqlErrTypeNotFound",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const graphqlErrTypeNotFound"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst graphqlErrTypeNotFound = \"NOT_FOUND\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#mergePullRequestMutation",
              "documentation": {
                "identifier": "mergePullRequestMutation",
                "newPage": false,
                "searchKey": "github.mergePullRequestMutation",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const mergePullRequestMutation"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst mergePullRequestMutation = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#prCommonFragments",
              "documentation": {
                "identifier": "prCommonFragments",
                "newPage": false,
                "searchKey": "github.prCommonFragments",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const prCommonFragments"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst prCommonFragments = ...\n```\n\nThis fragment was formatted using the \"prettify\" button in the GitHub API explorer: [https://developer.github.com/v4/explorer/](https://developer.github.com/v4/explorer/) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#pullRequestFragmentsFmtstr",
              "documentation": {
                "identifier": "pullRequestFragmentsFmtstr",
                "newPage": false,
                "searchKey": "github.pullRequestFragmentsFmtstr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const pullRequestFragmentsFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pullRequestFragmentsFmtstr = ...\n```\n\nThis fragment was formatted using the \"prettify\" button in the GitHub API explorer: [https://developer.github.com/v4/explorer/](https://developer.github.com/v4/explorer/) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#timelineItemTypesFmtStr",
              "documentation": {
                "identifier": "timelineItemTypesFmtStr",
                "newPage": false,
                "searchKey": "github.timelineItemTypesFmtStr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const timelineItemTypesFmtStr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst timelineItemTypesFmtStr = ...\n```\n\ntimelineItemTypes contains all the types requested via GraphQL from the timelineItems connection on a pull request. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#timelineItemsFragmentFmtstr",
              "documentation": {
                "identifier": "timelineItemsFragmentFmtstr",
                "newPage": false,
                "searchKey": "github.timelineItemsFragmentFmtstr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const timelineItemsFragmentFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst timelineItemsFragmentFmtstr = ...\n```\n\nThis fragment was formatted using the \"prettify\" button in the GitHub API explorer: [https://developer.github.com/v4/explorer/](https://developer.github.com/v4/explorer/) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#versionCacheResetTime",
              "documentation": {
                "identifier": "versionCacheResetTime",
                "newPage": false,
                "searchKey": "github.versionCacheResetTime",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const versionCacheResetTime"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst versionCacheResetTime = 6 * 60 * time.Minute\n```\n\nversionCacheResetTime stores the time until a version cache is reset. It's set to 6 hours. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/extsvc/github#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/extsvc/github#ErrBatchTooLarge",
              "documentation": {
                "identifier": "ErrBatchTooLarge",
                "newPage": false,
                "searchKey": "github.ErrBatchTooLarge",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrBatchTooLarge"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrBatchTooLarge = errors.New(\"requested batch of GitHub repositories too large\")\n```\n\nErrBatchTooLarge is when the requested batch of GitHub repositories to fetch is too large and goes over the limit of what can be requested in a single GraphQL call \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#ErrIncompleteResults",
              "documentation": {
                "identifier": "ErrIncompleteResults",
                "newPage": false,
                "searchKey": "github.ErrIncompleteResults",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrIncompleteResults"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrIncompleteResults = ...\n```\n\nErrIncompleteResults is returned when the GitHub Search API returns an `incomplete_results: true` field in their response \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#ErrPullRequestAlreadyExists",
              "documentation": {
                "identifier": "ErrPullRequestAlreadyExists",
                "newPage": false,
                "searchKey": "github.ErrPullRequestAlreadyExists",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrPullRequestAlreadyExists"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrPullRequestAlreadyExists = errors.New(\"GitHub pull request already exists\")\n```\n\nErrPullRequestAlreadyExists is thrown when the requested GitHub Pull Request already exists. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#ErrRepoNotFound",
              "documentation": {
                "identifier": "ErrRepoNotFound",
                "newPage": false,
                "searchKey": "github.ErrRepoNotFound",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrRepoNotFound"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrRepoNotFound = errors.New(\"GitHub repository not found\")\n```\n\nErrRepoNotFound is when the requested GitHub repository is not found. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#GetRepositoryMock",
              "documentation": {
                "identifier": "GetRepositoryMock",
                "newPage": false,
                "searchKey": "github.GetRepositoryMock",
                "tags": [
                  "variable",
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var GetRepositoryMock"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar GetRepositoryMock func(ctx context.Context, owner, name string) (*Repository, error)\n```\n\nGetRepositoryMock is set by tests to mock (*Client).GetRepository. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#MockGetAuthenticatedUserEmails",
              "documentation": {
                "identifier": "MockGetAuthenticatedUserEmails",
                "newPage": false,
                "searchKey": "github.MockGetAuthenticatedUserEmails",
                "tags": [
                  "variable",
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var MockGetAuthenticatedUserEmails"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar MockGetAuthenticatedUserEmails func(ctx context.Context) ([]*UserEmail, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#MockGetAuthenticatedUserOAuthScopes",
              "documentation": {
                "identifier": "MockGetAuthenticatedUserOAuthScopes",
                "newPage": false,
                "searchKey": "github.MockGetAuthenticatedUserOAuthScopes",
                "tags": [
                  "variable",
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var MockGetAuthenticatedUserOAuthScopes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar MockGetAuthenticatedUserOAuthScopes func(ctx context.Context) ([]string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#MockGetAuthenticatedUserOrgs",
              "documentation": {
                "identifier": "MockGetAuthenticatedUserOrgs",
                "newPage": false,
                "searchKey": "github.MockGetAuthenticatedUserOrgs",
                "tags": [
                  "variable",
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var MockGetAuthenticatedUserOrgs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar MockGetAuthenticatedUserOrgs func(ctx context.Context) ([]*Org, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#allMatchingSemver",
              "documentation": {
                "identifier": "allMatchingSemver",
                "newPage": false,
                "searchKey": "github.allMatchingSemver",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var allMatchingSemver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar allMatchingSemver = semver.MustParse(\"99.99.99\")\n```\n\nallMatchingSemver is a *semver.Version that will always match for the latest GitHub, which is either the latest GHE or the current deployment on GitHub.com. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#errInternalRateLimitExceeded",
              "documentation": {
                "identifier": "errInternalRateLimitExceeded",
                "newPage": false,
                "searchKey": "github.errInternalRateLimitExceeded",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errInternalRateLimitExceeded"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errInternalRateLimitExceeded = errors.New(\"internal rate limit exceeded\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#ghe220Semver",
              "documentation": {
                "identifier": "ghe220Semver",
                "newPage": false,
                "searchKey": "github.ghe220Semver",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ghe220Semver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ghe220Semver, _ = semver.NewConstraint(\"~2.20.0\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#ghe221PlusOrDotComSemver",
              "documentation": {
                "identifier": "ghe221PlusOrDotComSemver",
                "newPage": false,
                "searchKey": "github.ghe221PlusOrDotComSemver",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ghe221PlusOrDotComSemver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ghe221PlusOrDotComSemver, _ = semver.NewConstraint(\">= 2.21.0\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#ghe300PlusOrDotComSemver",
              "documentation": {
                "identifier": "ghe300PlusOrDotComSemver",
                "newPage": false,
                "searchKey": "github.ghe300PlusOrDotComSemver",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ghe300PlusOrDotComSemver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ghe300PlusOrDotComSemver, _ = semver.NewConstraint(\">= 3.0.0\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#gitHubDisable",
              "documentation": {
                "identifier": "gitHubDisable",
                "newPage": false,
                "searchKey": "github.gitHubDisable",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var gitHubDisable"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar gitHubDisable, _ = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#githubProxyURL",
              "documentation": {
                "identifier": "githubProxyURL",
                "newPage": false,
                "searchKey": "github.githubProxyURL",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var githubProxyURL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar githubProxyURL = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#globalVersionCache",
              "documentation": {
                "identifier": "globalVersionCache",
                "newPage": false,
                "searchKey": "github.globalVersionCache",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var globalVersionCache"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar globalVersionCache = &versionCache{\n\tversions: make(map[string]*semver.Version),\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#reposGitHubCacheCounter",
              "documentation": {
                "identifier": "reposGitHubCacheCounter",
                "newPage": false,
                "searchKey": "github.reposGitHubCacheCounter",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var reposGitHubCacheCounter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar reposGitHubCacheCounter = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#requestCounter",
              "documentation": {
                "identifier": "requestCounter",
                "newPage": false,
                "searchKey": "github.requestCounter",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var requestCounter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar requestCounter = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#updateRegex",
              "documentation": {
                "identifier": "updateRegex",
                "newPage": false,
                "searchKey": "github.updateRegex",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var updateRegex"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar updateRegex = flag.String(\"update\", \"\", \"Update testdata of tests matching the given regex\")\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/extsvc/github#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/extsvc/github#APIError",
              "documentation": {
                "identifier": "APIError",
                "newPage": false,
                "searchKey": "github.APIError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type APIError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype APIError struct {\n\tURL              string\n\tCode             int\n\tMessage          string\n\tDocumentationURL string `json:\"documentation_url\"`\n}\n```\n\nAPIError is an error type returned by Client when the GitHub API responds with an error. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#APIError.AccountSuspended",
                    "documentation": {
                      "identifier": "APIError.AccountSuspended",
                      "newPage": false,
                      "searchKey": "github.APIError.AccountSuspended",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *APIError) AccountSuspended() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *APIError) AccountSuspended() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#APIError.Error",
                    "documentation": {
                      "identifier": "APIError.Error",
                      "newPage": false,
                      "searchKey": "github.APIError.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *APIError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *APIError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#APIError.Unauthorized",
                    "documentation": {
                      "identifier": "APIError.Unauthorized",
                      "newPage": false,
                      "searchKey": "github.APIError.Unauthorized",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *APIError) Unauthorized() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *APIError) Unauthorized() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#Actor",
              "documentation": {
                "identifier": "Actor",
                "newPage": false,
                "searchKey": "github.Actor",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Actor struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Actor struct {\n\tAvatarURL string\n\tLogin     string\n\tURL       string\n}\n```\n\nAn Actor represents an object which can take actions on GitHub. Typically a User or Bot. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#AssignedEvent",
              "documentation": {
                "identifier": "AssignedEvent",
                "newPage": false,
                "searchKey": "github.AssignedEvent",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AssignedEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AssignedEvent struct {\n\tActor     Actor\n\tAssignee  Actor\n\tCreatedAt time.Time\n}\n```\n\nAssignedEvent represents an 'assigned' event on a PullRequest. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#AssignedEvent.Key",
                    "documentation": {
                      "identifier": "AssignedEvent.Key",
                      "newPage": false,
                      "searchKey": "github.AssignedEvent.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e AssignedEvent) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e AssignedEvent) Key() string\n```\n\nKey is a unique key identifying this event in the context of its pull request. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#CheckRun",
              "documentation": {
                "identifier": "CheckRun",
                "newPage": false,
                "searchKey": "github.CheckRun",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CheckRun struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CheckRun struct {\n\tID string\n\t// One of COMPLETED, IN_PROGRESS, QUEUED, REQUESTED\n\tStatus string\n\t// One of ACTION_REQUIRED, CANCELLED, FAILURE, NEUTRAL, SUCCESS, TIMED_OUT\n\tConclusion string\n\t// When the run was received via a webhook\n\tReceivedAt time.Time\n}\n```\n\nCheckRun represents the status of a checkrun \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#CheckRun.Key",
                    "documentation": {
                      "identifier": "CheckRun.Key",
                      "newPage": false,
                      "searchKey": "github.CheckRun.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *CheckRun) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *CheckRun) Key() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#CheckSuite",
              "documentation": {
                "identifier": "CheckSuite",
                "newPage": false,
                "searchKey": "github.CheckSuite",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CheckSuite struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CheckSuite struct {\n\tID string\n\t// One of COMPLETED, IN_PROGRESS, QUEUED, REQUESTED\n\tStatus string\n\t// One of ACTION_REQUIRED, CANCELLED, FAILURE, NEUTRAL, SUCCESS, TIMED_OUT\n\tConclusion string\n\tReceivedAt time.Time\n\t// When the suite was received via a webhook\n\tCheckRuns struct{ Nodes []CheckRun }\n}\n```\n\nCheckSuite represents the status of a checksuite \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#CheckSuite.Key",
                    "documentation": {
                      "identifier": "CheckSuite.Key",
                      "newPage": false,
                      "searchKey": "github.CheckSuite.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *CheckSuite) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *CheckSuite) Key() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#ClosedEvent",
              "documentation": {
                "identifier": "ClosedEvent",
                "newPage": false,
                "searchKey": "github.ClosedEvent",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ClosedEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ClosedEvent struct {\n\tActor     Actor\n\tCreatedAt time.Time\n\tURL       string\n}\n```\n\nClosedEvent represents a 'closed' event on a PullRequest. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#ClosedEvent.Key",
                    "documentation": {
                      "identifier": "ClosedEvent.Key",
                      "newPage": false,
                      "searchKey": "github.ClosedEvent.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ClosedEvent) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ClosedEvent) Key() string\n```\n\nKey is a unique key identifying this event in the context of its pull request. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#Collaborator",
              "documentation": {
                "identifier": "Collaborator",
                "newPage": false,
                "searchKey": "github.Collaborator",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Collaborator struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Collaborator struct {\n\tID         string `json:\"node_id\"` // GraphQL ID\n\tDatabaseID int64  `json:\"id\"`\n}\n```\n\nCollaborator is a collaborator of a repository. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#Commit",
              "documentation": {
                "identifier": "Commit",
                "newPage": false,
                "searchKey": "github.Commit",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Commit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Commit struct {\n\tOID             string\n\tMessage         string\n\tMessageHeadline string\n\tURL             string\n\tCommitter       GitActor\n\tCommittedDate   time.Time\n\tPushedDate      time.Time\n}\n```\n\nA Commit in a Repository. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#CommitStatus",
              "documentation": {
                "identifier": "CommitStatus",
                "newPage": false,
                "searchKey": "github.CommitStatus",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CommitStatus struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CommitStatus struct {\n\tSHA        string\n\tContext    string\n\tState      string\n\tReceivedAt time.Time\n}\n```\n\nCommitStatus represents the state of a commit context received via the StatusEvent webhook \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#CommitStatus.Key",
                    "documentation": {
                      "identifier": "CommitStatus.Key",
                      "newPage": false,
                      "searchKey": "github.CommitStatus.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *CommitStatus) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *CommitStatus) Key() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#CommitWithChecks",
              "documentation": {
                "identifier": "CommitWithChecks",
                "newPage": false,
                "searchKey": "github.CommitWithChecks",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CommitWithChecks struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CommitWithChecks struct {\n\tCommit struct {\n\t\tOID           string\n\t\tCheckSuites   struct{ Nodes []CheckSuite }\n\t\tStatus        Status\n\t\tCommittedDate time.Time\n\t}\n}\n```\n\nCommitWithChecks represents check/build status of a commit. When we load the PR from GitHub we fetch the most recent commit into this type to check build status. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#Context",
              "documentation": {
                "identifier": "Context",
                "newPage": false,
                "searchKey": "github.Context",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Context struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Context struct {\n\tID          string\n\tContext     string\n\tDescription string\n\tState       string\n}\n```\n\nContext represent the individual commit status context \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#ConvertToDraftEvent",
              "documentation": {
                "identifier": "ConvertToDraftEvent",
                "newPage": false,
                "searchKey": "github.ConvertToDraftEvent",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ConvertToDraftEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ConvertToDraftEvent struct {\n\tActor     Actor\n\tCreatedAt time.Time\n}\n```\n\nConvertToDraftEvent represents a 'convert_to_draft' event on a pull request. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#ConvertToDraftEvent.Key",
                    "documentation": {
                      "identifier": "ConvertToDraftEvent.Key",
                      "newPage": false,
                      "searchKey": "github.ConvertToDraftEvent.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ConvertToDraftEvent) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ConvertToDraftEvent) Key() string\n```\n\nKey is a unique key identifying this event in the context of its pull request. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#CreatePullRequestInput",
              "documentation": {
                "identifier": "CreatePullRequestInput",
                "newPage": false,
                "searchKey": "github.CreatePullRequestInput",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CreatePullRequestInput struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CreatePullRequestInput struct {\n\t// The Node ID of the repository.\n\tRepositoryID string `json:\"repositoryId\"`\n\t// The name of the branch you want your changes pulled into. This should be\n\t// an existing branch on the current repository.\n\tBaseRefName string `json:\"baseRefName\"`\n\t// The name of the branch where your changes are implemented.\n\tHeadRefName string `json:\"headRefName\"`\n\t// The title of the pull request.\n\tTitle string `json:\"title\"`\n\t// The body of the pull request (optional).\n\tBody string `json:\"body\"`\n\t// When true the PR will be in draft mode initially.\n\tDraft bool `json:\"draft\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#ErrPullRequestNotFound",
              "documentation": {
                "identifier": "ErrPullRequestNotFound",
                "newPage": false,
                "searchKey": "github.ErrPullRequestNotFound",
                "tags": [
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ErrPullRequestNotFound int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ErrPullRequestNotFound int\n```\n\nErrPullRequestNotFound is when the requested GitHub Pull Request doesn't exist. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#ErrPullRequestNotFound.Error",
                    "documentation": {
                      "identifier": "ErrPullRequestNotFound.Error",
                      "newPage": false,
                      "searchKey": "github.ErrPullRequestNotFound.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ErrPullRequestNotFound) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ErrPullRequestNotFound) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#GitActor",
              "documentation": {
                "identifier": "GitActor",
                "newPage": false,
                "searchKey": "github.GitActor",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitActor struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitActor struct {\n\tAvatarURL string\n\tEmail     string\n\tName      string\n\tUser      *Actor `json:\"User,omitempty\"`\n}\n```\n\nA GitActor represents an actor in a Git commit (ie. an author or committer). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#IssueComment",
              "documentation": {
                "identifier": "IssueComment",
                "newPage": false,
                "searchKey": "github.IssueComment",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IssueComment struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IssueComment struct {\n\tDatabaseID          int64\n\tAuthor              Actor\n\tEditor              *Actor\n\tAuthorAssociation   string\n\tBody                string\n\tURL                 string\n\tCreatedAt           time.Time\n\tUpdatedAt           time.Time\n\tIncludesCreatedEdit bool\n}\n```\n\nIssueComment represents a comment on an PullRequest that isn't a commit or review comment. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#IssueComment.Key",
                    "documentation": {
                      "identifier": "IssueComment.Key",
                      "newPage": false,
                      "searchKey": "github.IssueComment.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e IssueComment) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e IssueComment) Key() string\n```\n\nKey is a unique key identifying this event in the context of its pull request. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#Label",
              "documentation": {
                "identifier": "Label",
                "newPage": false,
                "searchKey": "github.Label",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Label struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Label struct {\n\tID          string\n\tColor       string\n\tDescription string\n\tName        string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#LabelEvent",
              "documentation": {
                "identifier": "LabelEvent",
                "newPage": false,
                "searchKey": "github.LabelEvent",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LabelEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LabelEvent struct {\n\tActor     Actor\n\tLabel     Label\n\tCreatedAt time.Time\n\t// Will be true if we had an \"unlabeled\" event\n\tRemoved bool\n}\n```\n\nLabelEvent represents a label being added or removed from a pull request \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#LabelEvent.Key",
                    "documentation": {
                      "identifier": "LabelEvent.Key",
                      "newPage": false,
                      "searchKey": "github.LabelEvent.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e LabelEvent) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e LabelEvent) Key() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#MergedEvent",
              "documentation": {
                "identifier": "MergedEvent",
                "newPage": false,
                "searchKey": "github.MergedEvent",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MergedEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MergedEvent struct {\n\tActor        Actor\n\tMergeRefName string\n\tURL          string\n\tCommit       Commit\n\tCreatedAt    time.Time\n}\n```\n\nMergedEvent represents a 'merged' event on a given pull request. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#MergedEvent.Key",
                    "documentation": {
                      "identifier": "MergedEvent.Key",
                      "newPage": false,
                      "searchKey": "github.MergedEvent.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e MergedEvent) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e MergedEvent) Key() string\n```\n\nKey is a unique key identifying this event in the context of its pull request. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#Org",
              "documentation": {
                "identifier": "Org",
                "newPage": false,
                "searchKey": "github.Org",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Org struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Org struct {\n\tLogin string `json:\"login,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#PageInfo",
              "documentation": {
                "identifier": "PageInfo",
                "newPage": false,
                "searchKey": "github.PageInfo",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PageInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PageInfo struct {\n\tHasNextPage bool\n\tEndCursor   string\n}\n```\n\nPageInfo contains the paging information based on the Redux conventions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#PullRequest",
              "documentation": {
                "identifier": "PullRequest",
                "newPage": false,
                "searchKey": "github.PullRequest",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PullRequest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PullRequest struct {\n\tRepoWithOwner string `json:\"-\"`\n\tID            string\n\tTitle         string\n\tBody          string\n\tState         string\n\tURL           string\n\tHeadRefOid    string\n\tBaseRefOid    string\n\tHeadRefName   string\n\tBaseRefName   string\n\tNumber        int64\n\tAuthor        Actor\n\tParticipants  []Actor\n\tLabels        struct{ Nodes []Label }\n\tTimelineItems []TimelineItem\n\tCommits       struct{ Nodes []CommitWithChecks }\n\tIsDraft       bool\n\tCreatedAt     time.Time\n\tUpdatedAt     time.Time\n}\n```\n\nPullRequest is a GitHub pull request. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#PullRequestCommit",
              "documentation": {
                "identifier": "PullRequestCommit",
                "newPage": false,
                "searchKey": "github.PullRequestCommit",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PullRequestCommit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PullRequestCommit struct {\n\tCommit Commit\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#PullRequestCommit.Key",
                    "documentation": {
                      "identifier": "PullRequestCommit.Key",
                      "newPage": false,
                      "searchKey": "github.PullRequestCommit.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p PullRequestCommit) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p PullRequestCommit) Key() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#PullRequestReview",
              "documentation": {
                "identifier": "PullRequestReview",
                "newPage": false,
                "searchKey": "github.PullRequestReview",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PullRequestReview struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PullRequestReview struct {\n\tDatabaseID          int64\n\tAuthor              Actor\n\tAuthorAssociation   string\n\tBody                string\n\tState               string\n\tURL                 string\n\tCreatedAt           time.Time\n\tUpdatedAt           time.Time\n\tCommit              Commit\n\tIncludesCreatedEdit bool\n}\n```\n\nPullRequestReview represents a review on a given pull request. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#PullRequestReview.Key",
                    "documentation": {
                      "identifier": "PullRequestReview.Key",
                      "newPage": false,
                      "searchKey": "github.PullRequestReview.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e PullRequestReview) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e PullRequestReview) Key() string\n```\n\nKey is a unique key identifying this event in the context of its pull request. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#PullRequestReviewComment",
              "documentation": {
                "identifier": "PullRequestReviewComment",
                "newPage": false,
                "searchKey": "github.PullRequestReviewComment",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PullRequestReviewComment struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PullRequestReviewComment struct {\n\tDatabaseID          int64\n\tAuthor              Actor\n\tAuthorAssociation   string\n\tEditor              Actor\n\tCommit              Commit\n\tBody                string\n\tState               string\n\tURL                 string\n\tCreatedAt           time.Time\n\tUpdatedAt           time.Time\n\tIncludesCreatedEdit bool\n}\n```\n\nPullRequestReviewComment represents a review comment on a given pull request. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#PullRequestReviewComment.Key",
                    "documentation": {
                      "identifier": "PullRequestReviewComment.Key",
                      "newPage": false,
                      "searchKey": "github.PullRequestReviewComment.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e PullRequestReviewComment) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e PullRequestReviewComment) Key() string\n```\n\nKey is a unique key identifying this event in the context of its pull request. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#PullRequestReviewThread",
              "documentation": {
                "identifier": "PullRequestReviewThread",
                "newPage": false,
                "searchKey": "github.PullRequestReviewThread",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PullRequestReviewThread struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PullRequestReviewThread struct {\n\tComments []*PullRequestReviewComment\n}\n```\n\nPullRequestReviewThread represents a thread of review comments on a given pull request. Since webhooks only send pull request review comment payloads, we normalize each thread we receive via GraphQL, and don't store this event as the metadata of a ChangesetEvent, instead storing each contained comment as a separate ChangesetEvent. That's why this type doesn't have a Key method like the others. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#ReadyForReviewEvent",
              "documentation": {
                "identifier": "ReadyForReviewEvent",
                "newPage": false,
                "searchKey": "github.ReadyForReviewEvent",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ReadyForReviewEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ReadyForReviewEvent struct {\n\tActor     Actor\n\tCreatedAt time.Time\n}\n```\n\nReadyForReviewEvent represents a 'ready_for_review' event on a pull request. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#ReadyForReviewEvent.Key",
                    "documentation": {
                      "identifier": "ReadyForReviewEvent.Key",
                      "newPage": false,
                      "searchKey": "github.ReadyForReviewEvent.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ReadyForReviewEvent) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ReadyForReviewEvent) Key() string\n```\n\nKey is a unique key identifying this event in the context of its pull request. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#RenamedTitleEvent",
              "documentation": {
                "identifier": "RenamedTitleEvent",
                "newPage": false,
                "searchKey": "github.RenamedTitleEvent",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RenamedTitleEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RenamedTitleEvent struct {\n\tActor         Actor\n\tPreviousTitle string\n\tCurrentTitle  string\n\tCreatedAt     time.Time\n}\n```\n\nRenamedTitleEvent represents a 'renamed' event on a given pull request. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#RenamedTitleEvent.Key",
                    "documentation": {
                      "identifier": "RenamedTitleEvent.Key",
                      "newPage": false,
                      "searchKey": "github.RenamedTitleEvent.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e RenamedTitleEvent) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e RenamedTitleEvent) Key() string\n```\n\nKey is a unique key identifying this event in the context of its pull request. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#ReopenedEvent",
              "documentation": {
                "identifier": "ReopenedEvent",
                "newPage": false,
                "searchKey": "github.ReopenedEvent",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ReopenedEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ReopenedEvent struct {\n\tActor     Actor\n\tCreatedAt time.Time\n}\n```\n\nReopenedEvent represents a 'reopened' event on a pull request. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#ReopenedEvent.Key",
                    "documentation": {
                      "identifier": "ReopenedEvent.Key",
                      "newPage": false,
                      "searchKey": "github.ReopenedEvent.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ReopenedEvent) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ReopenedEvent) Key() string\n```\n\nKey is a unique key identifying this event in the context of its pull request. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#Repository",
              "documentation": {
                "identifier": "Repository",
                "newPage": false,
                "searchKey": "github.Repository",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Repository struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Repository struct {\n\tID            string // ID of repository (GitHub GraphQL ID, not GitHub database ID)\n\tDatabaseID    int64  // The integer database id\n\tNameWithOwner string // full name of repository (\"owner/name\")\n\tDescription   string // description of repository\n\tURL           string // the web URL of this repository (\"https://github.com/foo/bar\")\n\tIsPrivate     bool   // whether the repository is private\n\tIsFork        bool   // whether the repository is a fork of another repository\n\tIsArchived    bool   // whether the repository is archived on the code host\n\tIsLocked      bool   `json:\"-\"` // whether the repository is locked on the code host\n\tIsDisabled    bool   `json:\"-\"` // whether the repository is disabled on the code host\n\t// This field will always be blank on repos stored in our database because the value will be different\n\t// depending on which token was used to fetch it\n\tViewerPermission string // ADMIN, WRITE, READ, or empty if unknown. Only the graphql api populates this. https://developer.github.com/v4/enum/repositorypermission/\n\n\t// Metadata retained for ranking\n\tStargazerCount int `json:\",omitempty\"`\n\tForkCount      int `json:\",omitempty\"`\n}\n```\n\nRepository is a GitHub repository. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#convertRestRepo",
                    "documentation": {
                      "identifier": "convertRestRepo",
                      "newPage": false,
                      "searchKey": "github.convertRestRepo",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func convertRestRepo(restRepo restRepository) *Repository"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc convertRestRepo(restRepo restRepository) *Repository\n```\n\nconvertRestRepo converts repo information returned by the rest API to a standard format. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#RepositoryListPage",
              "documentation": {
                "identifier": "RepositoryListPage",
                "newPage": false,
                "searchKey": "github.RepositoryListPage",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepositoryListPage struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepositoryListPage struct {\n\tTotalCount  int\n\tRepos       []*Repository\n\tHasNextPage bool\n}\n```\n\nRepositoryListPage is a page of repositories returned from the GitHub Search API. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#Review",
              "documentation": {
                "identifier": "Review",
                "newPage": false,
                "searchKey": "github.Review",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Review struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Review struct {\n\tBody        string\n\tState       string\n\tURL         string\n\tAuthor      Actor\n\tCommit      Commit\n\tCreatedAt   time.Time\n\tSubmittedAt time.Time\n}\n```\n\nA Review of a PullRequest. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#ReviewDismissedEvent",
              "documentation": {
                "identifier": "ReviewDismissedEvent",
                "newPage": false,
                "searchKey": "github.ReviewDismissedEvent",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ReviewDismissedEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ReviewDismissedEvent struct {\n\tActor            Actor\n\tReview           PullRequestReview\n\tDismissalMessage string\n\tCreatedAt        time.Time\n}\n```\n\nReviewDismissedEvent represents a 'review_dismissed' event on a pull request. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#ReviewDismissedEvent.Key",
                    "documentation": {
                      "identifier": "ReviewDismissedEvent.Key",
                      "newPage": false,
                      "searchKey": "github.ReviewDismissedEvent.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ReviewDismissedEvent) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ReviewDismissedEvent) Key() string\n```\n\nKey is a unique key identifying this event in the context of its pull request. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#ReviewRequestRemovedEvent",
              "documentation": {
                "identifier": "ReviewRequestRemovedEvent",
                "newPage": false,
                "searchKey": "github.ReviewRequestRemovedEvent",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ReviewRequestRemovedEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ReviewRequestRemovedEvent struct {\n\tActor             Actor\n\tRequestedReviewer Actor\n\tRequestedTeam     Team\n\tCreatedAt         time.Time\n}\n```\n\nReviewRequestRemovedEvent represents a 'review_request_removed' event on a pull request. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#ReviewRequestRemovedEvent.Key",
                    "documentation": {
                      "identifier": "ReviewRequestRemovedEvent.Key",
                      "newPage": false,
                      "searchKey": "github.ReviewRequestRemovedEvent.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ReviewRequestRemovedEvent) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ReviewRequestRemovedEvent) Key() string\n```\n\nKey is a unique key identifying this event in the context of its pull request. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#ReviewRequestedEvent",
              "documentation": {
                "identifier": "ReviewRequestedEvent",
                "newPage": false,
                "searchKey": "github.ReviewRequestedEvent",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ReviewRequestedEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ReviewRequestedEvent struct {\n\tActor             Actor\n\tRequestedReviewer Actor\n\tRequestedTeam     Team\n\tCreatedAt         time.Time\n}\n```\n\nReviewRequestedRevent represents a 'review_requested' event on a pull request. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#ReviewRequestedEvent.Key",
                    "documentation": {
                      "identifier": "ReviewRequestedEvent.Key",
                      "newPage": false,
                      "searchKey": "github.ReviewRequestedEvent.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ReviewRequestedEvent) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ReviewRequestedEvent) Key() string\n```\n\nKey is a unique key identifying this event in the context of its pull request. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#ReviewRequestedEvent.ReviewerDeleted",
                    "documentation": {
                      "identifier": "ReviewRequestedEvent.ReviewerDeleted",
                      "newPage": false,
                      "searchKey": "github.ReviewRequestedEvent.ReviewerDeleted",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ReviewRequestedEvent) ReviewerDeleted() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ReviewRequestedEvent) ReviewerDeleted() bool\n```\n\nReviewerDeleted returns true if both RequestedReviewer and RequestedTeam are blank, indicating that one or the other has been deleted. We use it to drop the event. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#Status",
              "documentation": {
                "identifier": "Status",
                "newPage": false,
                "searchKey": "github.Status",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Status struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Status struct {\n\tState    string\n\tContexts []Context\n}\n```\n\nA Status represents a Commit status. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#Team",
              "documentation": {
                "identifier": "Team",
                "newPage": false,
                "searchKey": "github.Team",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Team struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Team struct {\n\tName string\n\tURL  string\n}\n```\n\nA Team represents a team on Github. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TimelineItem",
              "documentation": {
                "identifier": "TimelineItem",
                "newPage": false,
                "searchKey": "github.TimelineItem",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TimelineItem struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TimelineItem struct {\n\tType string\n\tItem interface{}\n}\n```\n\nTimelineItem is a union type of all supported pull request timeline items. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#TimelineItem.UnmarshalJSON",
                    "documentation": {
                      "identifier": "TimelineItem.UnmarshalJSON",
                      "newPage": false,
                      "searchKey": "github.TimelineItem.UnmarshalJSON",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *TimelineItem) UnmarshalJSON(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *TimelineItem) UnmarshalJSON(data []byte) error\n```\n\nUnmarshalJSON knows how to unmarshal a TimelineItem as produced by json.Marshal or as returned by the GitHub GraphQL API. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TimelineItemConnection",
              "documentation": {
                "identifier": "TimelineItemConnection",
                "newPage": false,
                "searchKey": "github.TimelineItemConnection",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TimelineItemConnection struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TimelineItemConnection struct {\n\tPageInfo PageInfo\n\tNodes    []TimelineItem\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#UnassignedEvent",
              "documentation": {
                "identifier": "UnassignedEvent",
                "newPage": false,
                "searchKey": "github.UnassignedEvent",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnassignedEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnassignedEvent struct {\n\tActor     Actor\n\tAssignee  Actor\n\tCreatedAt time.Time\n}\n```\n\nUnassignedEvent represents an 'unassigned' event on a pull request. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#UnassignedEvent.Key",
                    "documentation": {
                      "identifier": "UnassignedEvent.Key",
                      "newPage": false,
                      "searchKey": "github.UnassignedEvent.Key",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e UnassignedEvent) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e UnassignedEvent) Key() string\n```\n\nKey is a unique key identifying this event in the context of its pull request. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#UpdatePullRequestInput",
              "documentation": {
                "identifier": "UpdatePullRequestInput",
                "newPage": false,
                "searchKey": "github.UpdatePullRequestInput",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UpdatePullRequestInput struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UpdatePullRequestInput struct {\n\t// The Node ID of the pull request.\n\tPullRequestID string `json:\"pullRequestId\"`\n\t// The name of the branch you want your changes pulled into. This should be\n\t// an existing branch on the current repository.\n\tBaseRefName string `json:\"baseRefName\"`\n\t// The title of the pull request.\n\tTitle string `json:\"title\"`\n\t// The body of the pull request (optional).\n\tBody string `json:\"body\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#User",
              "documentation": {
                "identifier": "User",
                "newPage": false,
                "searchKey": "github.User",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type User struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype User struct {\n\tLogin  string `json:\"login,omitempty\"`\n\tID     int    `json:\"id,omitempty\"`\n\tNodeID string `json:\"node_id,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#UserEmail",
              "documentation": {
                "identifier": "UserEmail",
                "newPage": false,
                "searchKey": "github.UserEmail",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserEmail struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserEmail struct {\n\tEmail      string `json:\"email,omitempty\"`\n\tPrimary    bool   `json:\"primary,omitempty\"`\n\tVerified   bool   `json:\"verified,omitempty\"`\n\tVisibility string `json:\"visibility,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#V3Client",
              "documentation": {
                "identifier": "V3Client",
                "newPage": false,
                "searchKey": "github.V3Client",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type V3Client struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype V3Client struct {\n\t// apiURL is the base URL of a GitHub API. It must point to the base URL of the GitHub API. This\n\t// is https://api.github.com for GitHub.com and http[s]://[github-enterprise-hostname]/api for\n\t// GitHub Enterprise.\n\tapiURL *url.URL\n\n\t// githubDotCom is true if this client connects to github.com.\n\tgithubDotCom bool\n\n\t// auth is used to authenticate requests. May be empty, in which case the\n\t// default behavior is to make unauthenticated requests.\n\t// 🚨 SECURITY: Should not be changed after client creation to prevent\n\t// unauthorized access to the repository cache. Use `WithAuthenticator` to\n\t// create a new client with a different authenticator instead.\n\tauth auth.Authenticator\n\n\t// httpClient is the HTTP client used to make requests to the GitHub API.\n\thttpClient httpcli.Doer\n\n\t// repoCache is the repository cache associated with the token.\n\trepoCache *rcache.Cache\n\n\t// rateLimitMonitor is the API rate limit monitor.\n\trateLimitMonitor *ratelimit.Monitor\n\n\t// rateLimit is our self imposed rate limiter\n\trateLimit *rate.Limiter\n\n\t// resource specifies which API this client is intended for.\n\t// One of 'rest' or 'search'.\n\tresource string\n}\n```\n\nV3Client is a caching GitHub API client for GitHub's REST API v3. \n\nAll instances use a map of rcache.Cache instances for caching (see the `repoCache` field). These separate instances have consistent naming prefixes so that different instances will share the same Redis cache entries (provided they were computed with the same API URL and access token). The cache keys are agnostic of the http.RoundTripper transport. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#NewV3Client",
                    "documentation": {
                      "identifier": "NewV3Client",
                      "newPage": false,
                      "searchKey": "github.NewV3Client",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewV3Client(apiURL *url.URL, a auth.Authenticator, cli httpcli.Doer) *V3Client"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewV3Client(apiURL *url.URL, a auth.Authenticator, cli httpcli.Doer) *V3Client\n```\n\nNewV3Client creates a new GitHub API client with an optional default authenticator. \n\napiURL must point to the base URL of the GitHub API. See the docstring for V3Client.apiURL. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#NewV3SearchClient",
                    "documentation": {
                      "identifier": "NewV3SearchClient",
                      "newPage": false,
                      "searchKey": "github.NewV3SearchClient",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewV3SearchClient(apiURL *url.URL, a auth.Authenticator, cli httpcli.Doer) *V3Client"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewV3SearchClient(apiURL *url.URL, a auth.Authenticator, cli httpcli.Doer) *V3Client\n```\n\nNewV3SearchClient creates a new GitHub API client intended for use with the search API with an optional default authenticator. \n\napiURL must point to the base URL of the GitHub API. See the docstring for V3Client.apiURL. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#newTestClient",
                    "documentation": {
                      "identifier": "newTestClient",
                      "newPage": false,
                      "searchKey": "github.newTestClient",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newTestClient(t *testing.T, cli httpcli.Doer) *V3Client"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newTestClient(t *testing.T, cli httpcli.Doer) *V3Client\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#newTestClientWithAuthenticator",
                    "documentation": {
                      "identifier": "newTestClientWithAuthenticator",
                      "newPage": false,
                      "searchKey": "github.newTestClientWithAuthenticator",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newTestClientWithAuthenticator(t *testing.T, auth auth.Authenticator, cli httpcli.Doer) *V3Client"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newTestClientWithAuthenticator(t *testing.T, auth auth.Authenticator, cli httpcli.Doer) *V3Client\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#newV3Client",
                    "documentation": {
                      "identifier": "newV3Client",
                      "newPage": false,
                      "searchKey": "github.newV3Client",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newV3Client(apiURL *url.URL, a auth.Authenticator, resource string, cli httpcli.Doer) *V3Client"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newV3Client(apiURL *url.URL, a auth.Authenticator, resource string, cli httpcli.Doer) *V3Client\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#newV3TestClient",
                    "documentation": {
                      "identifier": "newV3TestClient",
                      "newPage": false,
                      "searchKey": "github.newV3TestClient",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newV3TestClient(t testing.TB, name string) (*V3Client, func())"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newV3TestClient(t testing.TB, name string) (*V3Client, func())\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.GetAuthenticatedUser",
                    "documentation": {
                      "identifier": "V3Client.GetAuthenticatedUser",
                      "newPage": false,
                      "searchKey": "github.V3Client.GetAuthenticatedUser",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) GetAuthenticatedUser(ctx context.Context) (*User, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) GetAuthenticatedUser(ctx context.Context) (*User, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.GetAuthenticatedUserEmails",
                    "documentation": {
                      "identifier": "V3Client.GetAuthenticatedUserEmails",
                      "newPage": false,
                      "searchKey": "github.V3Client.GetAuthenticatedUserEmails",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) GetAuthenticatedUserEmails(ctx context.Context) ([]*UserEmail, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) GetAuthenticatedUserEmails(ctx context.Context) ([]*UserEmail, error)\n```\n\nGetAuthenticatedUserEmails returns the first 100 emails associated with the currently authenticated user. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.GetAuthenticatedUserOAuthScopes",
                    "documentation": {
                      "identifier": "V3Client.GetAuthenticatedUserOAuthScopes",
                      "newPage": false,
                      "searchKey": "github.V3Client.GetAuthenticatedUserOAuthScopes",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) GetAuthenticatedUserOAuthScopes(ctx context.Context) ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) GetAuthenticatedUserOAuthScopes(ctx context.Context) ([]string, error)\n```\n\nGetAuthenticatedUserOAuthScopes gets the list of OAuth scopes granted to the currently authenticate user. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.GetAuthenticatedUserOrgs",
                    "documentation": {
                      "identifier": "V3Client.GetAuthenticatedUserOrgs",
                      "newPage": false,
                      "searchKey": "github.V3Client.GetAuthenticatedUserOrgs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) GetAuthenticatedUserOrgs(ctx context.Context) ([]*Org, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) GetAuthenticatedUserOrgs(ctx context.Context) ([]*Org, error)\n```\n\nGetAuthenticatedUserOrgs returns the first 100 organizations associated with the currently authenticated user. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.GetRepository",
                    "documentation": {
                      "identifier": "V3Client.GetRepository",
                      "newPage": false,
                      "searchKey": "github.V3Client.GetRepository",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) GetRepository(ctx context.Context, owner, name string) (*Repository, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) GetRepository(ctx context.Context, owner, name string) (*Repository, error)\n```\n\nGetRepository gets a repository from GitHub by owner and repository name. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.ListAffiliatedRepositories",
                    "documentation": {
                      "identifier": "V3Client.ListAffiliatedRepositories",
                      "newPage": false,
                      "searchKey": "github.V3Client.ListAffiliatedRepositories",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) ListAffiliatedRepositories(ctx context.Context, visibility Visibility, page int) (repos []*Repository,..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) ListAffiliatedRepositories(ctx context.Context, visibility Visibility, page int) (\n\trepos []*Repository,\n\thasNextPage bool,\n\trateLimitCost int,\n\terr error,\n)\n```\n\nListAffiliatedRepositories lists GitHub repositories affiliated with the client token. page is the page of results to return. Pages are 1-indexed (so the first call should be for page 1). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.ListInstallationRepositories",
                    "documentation": {
                      "identifier": "V3Client.ListInstallationRepositories",
                      "newPage": false,
                      "searchKey": "github.V3Client.ListInstallationRepositories",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) ListInstallationRepositories(ctx context.Context) ([]*Repository, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) ListInstallationRepositories(ctx context.Context) ([]*Repository, error)\n```\n\nListInstallationRepositories lists repositories on which the authenticated GitHub App has been installed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.ListOrgRepositories",
                    "documentation": {
                      "identifier": "V3Client.ListOrgRepositories",
                      "newPage": false,
                      "searchKey": "github.V3Client.ListOrgRepositories",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) ListOrgRepositories(ctx context.Context, org string, page int) (repos []*Repository, hasNextPage bool, rateLimitCost int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) ListOrgRepositories(ctx context.Context, org string, page int) (repos []*Repository, hasNextPage bool, rateLimitCost int, err error)\n```\n\nListOrgRepositories lists GitHub repositories from the specified organization. org is the name of the organization. page is the page of results to return. Pages are 1-indexed (so the first call should be for page 1). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.ListPublicRepositories",
                    "documentation": {
                      "identifier": "V3Client.ListPublicRepositories",
                      "newPage": false,
                      "searchKey": "github.V3Client.ListPublicRepositories",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) ListPublicRepositories(ctx context.Context, sinceRepoID int64) ([]*Repository, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) ListPublicRepositories(ctx context.Context, sinceRepoID int64) ([]*Repository, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.ListRepositoriesForSearch",
                    "documentation": {
                      "identifier": "V3Client.ListRepositoriesForSearch",
                      "newPage": false,
                      "searchKey": "github.V3Client.ListRepositoriesForSearch",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) ListRepositoriesForSearch(ctx context.Context, searchString string, page int) (RepositoryListPage, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) ListRepositoriesForSearch(ctx context.Context, searchString string, page int) (RepositoryListPage, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.ListRepositoryCollaborators",
                    "documentation": {
                      "identifier": "V3Client.ListRepositoryCollaborators",
                      "newPage": false,
                      "searchKey": "github.V3Client.ListRepositoryCollaborators",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) ListRepositoryCollaborators(ctx context.Context, owner, repo string, page int) (users []*Collaborator, hasNextPage bool, _ error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) ListRepositoryCollaborators(ctx context.Context, owner, repo string, page int) (users []*Collaborator, hasNextPage bool, _ error)\n```\n\nListRepositoryCollaborators lists all GitHub users that has access to the repository. The page is the page of results to return, and is 1-indexed (so the first call should be for page 1). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.ListTopicsOnRepository",
                    "documentation": {
                      "identifier": "V3Client.ListTopicsOnRepository",
                      "newPage": false,
                      "searchKey": "github.V3Client.ListTopicsOnRepository",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) ListTopicsOnRepository(ctx context.Context, ownerAndName string) ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) ListTopicsOnRepository(ctx context.Context, ownerAndName string) ([]string, error)\n```\n\nListTopicsOnRepository lists topics on the given repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.ListUserRepositories",
                    "documentation": {
                      "identifier": "V3Client.ListUserRepositories",
                      "newPage": false,
                      "searchKey": "github.V3Client.ListUserRepositories",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) ListUserRepositories(ctx context.Context, user string, page int) (repos []*Repository, hasNextPage bool, rateLimitCost int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) ListUserRepositories(ctx context.Context, user string, page int) (repos []*Repository, hasNextPage bool, rateLimitCost int, err error)\n```\n\nListUserRepositories lists GitHub repositories from the specified user. Pages are 1-indexed (so the first call should be for page 1) \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.RateLimitMonitor",
                    "documentation": {
                      "identifier": "V3Client.RateLimitMonitor",
                      "newPage": false,
                      "searchKey": "github.V3Client.RateLimitMonitor",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) RateLimitMonitor() *ratelimit.Monitor"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) RateLimitMonitor() *ratelimit.Monitor\n```\n\nRateLimitMonitor exposes the rate limit monitor. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.WithAuthenticator",
                    "documentation": {
                      "identifier": "V3Client.WithAuthenticator",
                      "newPage": false,
                      "searchKey": "github.V3Client.WithAuthenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) WithAuthenticator(a auth.Authenticator) *V3Client"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) WithAuthenticator(a auth.Authenticator) *V3Client\n```\n\nWithAuthenticator returns a new V3Client that uses the same configuration as the current V3Client, except authenticated as the GitHub user with the given authenticator instance (most likely a token). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.addRepositoriesToCache",
                    "documentation": {
                      "identifier": "V3Client.addRepositoriesToCache",
                      "newPage": false,
                      "searchKey": "github.V3Client.addRepositoriesToCache",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) addRepositoriesToCache(repos []*Repository)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) addRepositoriesToCache(repos []*Repository)\n```\n\naddRepositoriesToCache will cache repositories that exist under relevant cache keys. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.addRepositoryToCache",
                    "documentation": {
                      "identifier": "V3Client.addRepositoryToCache",
                      "newPage": false,
                      "searchKey": "github.V3Client.addRepositoryToCache",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) addRepositoryToCache(keys []string, repo *cachedRepo)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) addRepositoryToCache(keys []string, repo *cachedRepo)\n```\n\naddRepositoryToCache will cache the value for repo. The caller can provide multiple cache keys for the multiple ways that this repository can be retrieved (e.g., both \"owner/name\" and the GraphQL node ID). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.cachedGetRepository",
                    "documentation": {
                      "identifier": "V3Client.cachedGetRepository",
                      "newPage": false,
                      "searchKey": "github.V3Client.cachedGetRepository",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) cachedGetRepository(ctx context.Context, key string, getRepositoryFromAPI func(ctx context.Context) (repo *Repository, keys []string, err error), nocache bool) (*Repository, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) cachedGetRepository(ctx context.Context, key string, getRepositoryFromAPI func(ctx context.Context) (repo *Repository, keys []string, err error), nocache bool) (*Repository, error)\n```\n\ncachedGetRepository caches the getRepositoryFromAPI call. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.get",
                    "documentation": {
                      "identifier": "V3Client.get",
                      "newPage": false,
                      "searchKey": "github.V3Client.get",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) get(ctx context.Context, requestURI string, result interface{}) (http.Header, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) get(ctx context.Context, requestURI string, result interface{}) (http.Header, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.getPublicRepositories",
                    "documentation": {
                      "identifier": "V3Client.getPublicRepositories",
                      "newPage": false,
                      "searchKey": "github.V3Client.getPublicRepositories",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) getPublicRepositories(ctx context.Context, sinceRepoID int64) ([]*Repository, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) getPublicRepositories(ctx context.Context, sinceRepoID int64) ([]*Repository, error)\n```\n\ngetPublicRepositories returns a page of public repositories that were created after the repository identified by sinceRepoID. An empty sinceRepoID returns the first page of results. This is only intended to be called for GitHub Enterprise, so no rate limit information is returned. [https://developer.github.com/v3/repos/#list-all-public-repositories](https://developer.github.com/v3/repos/#list-all-public-repositories) \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.getRepositoryFromAPI",
                    "documentation": {
                      "identifier": "V3Client.getRepositoryFromAPI",
                      "newPage": false,
                      "searchKey": "github.V3Client.getRepositoryFromAPI",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) getRepositoryFromAPI(ctx context.Context, owner, name string) (*Repository, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) getRepositoryFromAPI(ctx context.Context, owner, name string) (*Repository, error)\n```\n\ngetRepositoryFromAPI attempts to fetch a repository from the GitHub API without use of the redis cache. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.getRepositoryFromCache",
                    "documentation": {
                      "identifier": "V3Client.getRepositoryFromCache",
                      "newPage": false,
                      "searchKey": "github.V3Client.getRepositoryFromCache",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) getRepositoryFromCache(ctx context.Context, key string) *cachedRepo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) getRepositoryFromCache(ctx context.Context, key string) *cachedRepo\n```\n\ngetRepositoryFromCache attempts to get a response from the redis cache. It returns nil error for cache-hit condition and non-nil error for cache-miss. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.listRepositories",
                    "documentation": {
                      "identifier": "V3Client.listRepositories",
                      "newPage": false,
                      "searchKey": "github.V3Client.listRepositories",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) listRepositories(ctx context.Context, requestURI string) ([]*Repository, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) listRepositories(ctx context.Context, requestURI string) ([]*Repository, error)\n```\n\nlistRepositories is a generic method that unmarshals the given JSON HTTP endpoint into a []restRepository. It will return an error if it fails. \n\nThis is used to extract repositories from the GitHub API endpoints: - /users/:user/repos - /orgs/:org/repos - /user/repos \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.requestGet",
                    "documentation": {
                      "identifier": "V3Client.requestGet",
                      "newPage": false,
                      "searchKey": "github.V3Client.requestGet",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) requestGet(ctx context.Context, requestURI string, result interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) requestGet(ctx context.Context, requestURI string, result interface{}) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V3Client.requestGetWithHeader",
                    "documentation": {
                      "identifier": "V3Client.requestGetWithHeader",
                      "newPage": false,
                      "searchKey": "github.V3Client.requestGetWithHeader",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V3Client) requestGetWithHeader(ctx context.Context, requestURI string, result interface{}) (http.Header, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V3Client) requestGetWithHeader(ctx context.Context, requestURI string, result interface{}) (http.Header, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#V4Client",
              "documentation": {
                "identifier": "V4Client",
                "newPage": false,
                "searchKey": "github.V4Client",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type V4Client struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype V4Client struct {\n\t// apiURL is the base URL of a GitHub API. It must point to the base URL of the GitHub API. This\n\t// is https://api.github.com for GitHub.com and http[s]://[github-enterprise-hostname]/api for\n\t// GitHub Enterprise.\n\tapiURL *url.URL\n\n\t// githubDotCom is true if this client connects to github.com.\n\tgithubDotCom bool\n\n\t// auth is used to authenticate requests. May be empty, in which case the\n\t// default behavior is to make unauthenticated requests.\n\t// 🚨 SECURITY: Should not be changed after client creation to prevent\n\t// unauthorized access to the repository cache. Use `WithAuthenticator` to\n\t// create a new client with a different authenticator instead.\n\tauth auth.Authenticator\n\n\t// httpClient is the HTTP client used to make requests to the GitHub API.\n\thttpClient httpcli.Doer\n\n\t// rateLimitMonitor is the API rate limit monitor.\n\trateLimitMonitor *ratelimit.Monitor\n\n\t// rateLimit is our self imposed rate limiter.\n\trateLimit *rate.Limiter\n}\n```\n\nV4Client is a GitHub GraphQL API client. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#NewV4Client",
                    "documentation": {
                      "identifier": "NewV4Client",
                      "newPage": false,
                      "searchKey": "github.NewV4Client",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewV4Client(apiURL *url.URL, a auth.Authenticator, cli httpcli.Doer) *V4Client"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewV4Client(apiURL *url.URL, a auth.Authenticator, cli httpcli.Doer) *V4Client\n```\n\nNewV4Client creates a new GitHub GraphQL API client with an optional default authenticator. \n\napiURL must point to the base URL of the GitHub API. See the docstring for V4Client.apiURL. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#newV4Client",
                    "documentation": {
                      "identifier": "newV4Client",
                      "newPage": false,
                      "searchKey": "github.newV4Client",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newV4Client(t testing.TB, name string) (*V4Client, func())"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newV4Client(t testing.TB, name string) (*V4Client, func())\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.ClosePullRequest",
                    "documentation": {
                      "identifier": "V4Client.ClosePullRequest",
                      "newPage": false,
                      "searchKey": "github.V4Client.ClosePullRequest",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) ClosePullRequest(ctx context.Context, pr *PullRequest) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) ClosePullRequest(ctx context.Context, pr *PullRequest) error\n```\n\nClosePullRequest closes the PullRequest on Github. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.CreatePullRequest",
                    "documentation": {
                      "identifier": "V4Client.CreatePullRequest",
                      "newPage": false,
                      "searchKey": "github.V4Client.CreatePullRequest",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) CreatePullRequest(ctx context.Context, in *CreatePullRequestInput) (*PullRequest, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) CreatePullRequest(ctx context.Context, in *CreatePullRequestInput) (*PullRequest, error)\n```\n\nCreatePullRequest creates a PullRequest on Github. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.CreatePullRequestComment",
                    "documentation": {
                      "identifier": "V4Client.CreatePullRequestComment",
                      "newPage": false,
                      "searchKey": "github.V4Client.CreatePullRequestComment",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) CreatePullRequestComment(ctx context.Context, pr *PullRequest, body string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) CreatePullRequestComment(ctx context.Context, pr *PullRequest, body string) error\n```\n\nCreatePullRequestComment creates a comment on the PullRequest on Github. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.GetAuthenticatedUser",
                    "documentation": {
                      "identifier": "V4Client.GetAuthenticatedUser",
                      "newPage": false,
                      "searchKey": "github.V4Client.GetAuthenticatedUser",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) GetAuthenticatedUser(ctx context.Context) (*Actor, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) GetAuthenticatedUser(ctx context.Context) (*Actor, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.GetOpenPullRequestByRefs",
                    "documentation": {
                      "identifier": "V4Client.GetOpenPullRequestByRefs",
                      "newPage": false,
                      "searchKey": "github.V4Client.GetOpenPullRequestByRefs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) GetOpenPullRequestByRefs(ctx context.Context, owner, name, baseRef, headRef string) (*PullRequest, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) GetOpenPullRequestByRefs(ctx context.Context, owner, name, baseRef, headRef string) (*PullRequest, error)\n```\n\nGetOpenPullRequestByRefs fetches the the pull request associated with the supplied refs. GitHub only allows one open PR by ref at a time. If nothing is found an error is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.GetReposByNameWithOwner",
                    "documentation": {
                      "identifier": "V4Client.GetReposByNameWithOwner",
                      "newPage": false,
                      "searchKey": "github.V4Client.GetReposByNameWithOwner",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) GetReposByNameWithOwner(ctx context.Context, namesWithOwners ...string) ([]*Repository, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) GetReposByNameWithOwner(ctx context.Context, namesWithOwners ...string) ([]*Repository, error)\n```\n\nGetReposByNameWithOwner fetches the specified repositories (namesWithOwners) from the GitHub GraphQL API and returns a slice of repositories. If a repository is not found, it will return an error. \n\nThe maximum number of repositories to be fetched is 30. If more namesWithOwners are given, the method returns an error. 30 is not a official limit of the API, but based on the observation that the GitHub GraphQL does not return results when more than 37 aliases are specified in a query. 30 is the conservative step back from 37. \n\nThis method does not cache. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.LoadPullRequest",
                    "documentation": {
                      "identifier": "V4Client.LoadPullRequest",
                      "newPage": false,
                      "searchKey": "github.V4Client.LoadPullRequest",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) LoadPullRequest(ctx context.Context, pr *PullRequest) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) LoadPullRequest(ctx context.Context, pr *PullRequest) error\n```\n\nLoadPullRequest loads a PullRequest from Github. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.MarkPullRequestReadyForReview",
                    "documentation": {
                      "identifier": "V4Client.MarkPullRequestReadyForReview",
                      "newPage": false,
                      "searchKey": "github.V4Client.MarkPullRequestReadyForReview",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) MarkPullRequestReadyForReview(ctx context.Context, pr *PullRequest) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) MarkPullRequestReadyForReview(ctx context.Context, pr *PullRequest) error\n```\n\nMarkPullRequestReadyForReview marks the PullRequest on Github as ready for review. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.MergePullRequest",
                    "documentation": {
                      "identifier": "V4Client.MergePullRequest",
                      "newPage": false,
                      "searchKey": "github.V4Client.MergePullRequest",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) MergePullRequest(ctx context.Context, pr *PullRequest, squash bool) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) MergePullRequest(ctx context.Context, pr *PullRequest, squash bool) error\n```\n\nMergePullRequest tries to merge the PullRequest on Github. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.RateLimitMonitor",
                    "documentation": {
                      "identifier": "V4Client.RateLimitMonitor",
                      "newPage": false,
                      "searchKey": "github.V4Client.RateLimitMonitor",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) RateLimitMonitor() *ratelimit.Monitor"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) RateLimitMonitor() *ratelimit.Monitor\n```\n\nRateLimitMonitor exposes the rate limit monitor. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.ReopenPullRequest",
                    "documentation": {
                      "identifier": "V4Client.ReopenPullRequest",
                      "newPage": false,
                      "searchKey": "github.V4Client.ReopenPullRequest",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) ReopenPullRequest(ctx context.Context, pr *PullRequest) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) ReopenPullRequest(ctx context.Context, pr *PullRequest) error\n```\n\nReopenPullRequest reopens the PullRequest on Github. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.UpdatePullRequest",
                    "documentation": {
                      "identifier": "V4Client.UpdatePullRequest",
                      "newPage": false,
                      "searchKey": "github.V4Client.UpdatePullRequest",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) UpdatePullRequest(ctx context.Context, in *UpdatePullRequestInput) (*PullRequest, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) UpdatePullRequest(ctx context.Context, in *UpdatePullRequestInput) (*PullRequest, error)\n```\n\nUpdatePullRequest creates a PullRequest on Github. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.WithAuthenticator",
                    "documentation": {
                      "identifier": "V4Client.WithAuthenticator",
                      "newPage": false,
                      "searchKey": "github.V4Client.WithAuthenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) WithAuthenticator(a auth.Authenticator) *V4Client"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) WithAuthenticator(a auth.Authenticator) *V4Client\n```\n\nWithAuthenticator returns a new V4Client that uses the same configuration as the current V4Client, except authenticated as the GitHub user with the given authenticator instance (most likely a token). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.buildGetReposBatchQuery",
                    "documentation": {
                      "identifier": "V4Client.buildGetReposBatchQuery",
                      "newPage": false,
                      "searchKey": "github.V4Client.buildGetReposBatchQuery",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) buildGetReposBatchQuery(ctx context.Context, namesWithOwners []string) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) buildGetReposBatchQuery(ctx context.Context, namesWithOwners []string) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.determineGitHubVersion",
                    "documentation": {
                      "identifier": "V4Client.determineGitHubVersion",
                      "newPage": false,
                      "searchKey": "github.V4Client.determineGitHubVersion",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) determineGitHubVersion(ctx context.Context) *semver.Version"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) determineGitHubVersion(ctx context.Context) *semver.Version\n```\n\ndetermineGitHubVersion returns a *semver.Version for the targetted GitHub instance by this client. When an error occurs, we print a warning to the logs but don't fail and return the allMatchingSemver. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.fetchGitHubVersion",
                    "documentation": {
                      "identifier": "V4Client.fetchGitHubVersion",
                      "newPage": false,
                      "searchKey": "github.V4Client.fetchGitHubVersion",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) fetchGitHubVersion(ctx context.Context) *semver.Version"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) fetchGitHubVersion(ctx context.Context) *semver.Version\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.loadRemainingTimelineItems",
                    "documentation": {
                      "identifier": "V4Client.loadRemainingTimelineItems",
                      "newPage": false,
                      "searchKey": "github.V4Client.loadRemainingTimelineItems",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) loadRemainingTimelineItems(ctx context.Context, prID string, pageInfo PageInfo) (items []TimelineItem, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) loadRemainingTimelineItems(ctx context.Context, prID string, pageInfo PageInfo) (items []TimelineItem, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.repositoryFieldsGraphQLFragment",
                    "documentation": {
                      "identifier": "V4Client.repositoryFieldsGraphQLFragment",
                      "newPage": false,
                      "searchKey": "github.V4Client.repositoryFieldsGraphQLFragment",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) repositoryFieldsGraphQLFragment(ctx context.Context) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) repositoryFieldsGraphQLFragment(ctx context.Context) string\n```\n\nrepositoryFieldsGraphQLFragment returns a GraphQL fragment that contains the fields needed to populate the Repository struct. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#V4Client.requestGraphQL",
                    "documentation": {
                      "identifier": "V4Client.requestGraphQL",
                      "newPage": false,
                      "searchKey": "github.V4Client.requestGraphQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *V4Client) requestGraphQL(ctx context.Context, query string, vars map[string]interface{}, result interface{}) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *V4Client) requestGraphQL(ctx context.Context, query string, vars map[string]interface{}, result interface{}) (err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#Visibility",
              "documentation": {
                "identifier": "Visibility",
                "newPage": false,
                "searchKey": "github.Visibility",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Visibility string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Visibility string\n```\n\nVisibility is the visibility filter for listing repositories. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#cachedRepo",
              "documentation": {
                "identifier": "cachedRepo",
                "newPage": false,
                "searchKey": "github.cachedRepo",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type cachedRepo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype cachedRepo struct {\n\tRepository\n\n\t// NotFound indicates that the GitHub API reported that the repository was not found.\n\tNotFound bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#disabledClient",
              "documentation": {
                "identifier": "disabledClient",
                "newPage": false,
                "searchKey": "github.disabledClient",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type disabledClient struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype disabledClient struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#disabledClient.Do",
                    "documentation": {
                      "identifier": "disabledClient.Do",
                      "newPage": false,
                      "searchKey": "github.disabledClient.Do",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t disabledClient) Do(r *http.Request) (*http.Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t disabledClient) Do(r *http.Request) (*http.Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#graphqlErrors",
              "documentation": {
                "identifier": "graphqlErrors",
                "newPage": false,
                "searchKey": "github.graphqlErrors",
                "tags": [
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type graphqlErrors []struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype graphqlErrors []struct {\n\tMessage   string        `json:\"message\"`\n\tType      string        `json:\"type\"`\n\tPath      []interface{} `json:\"path\"`\n\tLocations []struct {\n\t\tLine   int `json:\"line\"`\n\t\tColumn int `json:\"column\"`\n\t} `json:\"locations,omitempty\"`\n}\n```\n\ngraphqlErrors describes the errors in a GraphQL response. It contains at least 1 element when returned by requestGraphQL. See [https://graphql.github.io/graphql-spec/June2018/#sec-Errors](https://graphql.github.io/graphql-spec/June2018/#sec-Errors). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#graphqlErrors.Error",
                    "documentation": {
                      "identifier": "graphqlErrors.Error",
                      "newPage": false,
                      "searchKey": "github.graphqlErrors.Error",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e graphqlErrors) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e graphqlErrors) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#limitDepth",
              "documentation": {
                "identifier": "limitDepth",
                "newPage": false,
                "searchKey": "github.limitDepth",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type limitDepth struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype limitDepth struct {\n\t// The 'first' or 'last' limit\n\tlimit int\n\t// The depth at which it was added\n\tdepth int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#mockHTTPEmptyResponse",
              "documentation": {
                "identifier": "mockHTTPEmptyResponse",
                "newPage": false,
                "searchKey": "github.mockHTTPEmptyResponse",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type mockHTTPEmptyResponse struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mockHTTPEmptyResponse struct {\n\tstatusCode int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#mockHTTPEmptyResponse.Do",
                    "documentation": {
                      "identifier": "mockHTTPEmptyResponse.Do",
                      "newPage": false,
                      "searchKey": "github.mockHTTPEmptyResponse.Do",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s mockHTTPEmptyResponse) Do(req *http.Request) (*http.Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s mockHTTPEmptyResponse) Do(req *http.Request) (*http.Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#mockHTTPResponseBody",
              "documentation": {
                "identifier": "mockHTTPResponseBody",
                "newPage": false,
                "searchKey": "github.mockHTTPResponseBody",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type mockHTTPResponseBody struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mockHTTPResponseBody struct {\n\tcount        int\n\tresponseBody string\n\tstatus       int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/extsvc/github#mockHTTPResponseBody.Do",
                    "documentation": {
                      "identifier": "mockHTTPResponseBody.Do",
                      "newPage": false,
                      "searchKey": "github.mockHTTPResponseBody.Do",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *mockHTTPResponseBody) Do(req *http.Request) (*http.Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *mockHTTPResponseBody) Do(req *http.Request) (*http.Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#restRepository",
              "documentation": {
                "identifier": "restRepository",
                "newPage": false,
                "searchKey": "github.restRepository",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type restRepository struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype restRepository struct {\n\tID          string `json:\"node_id\"` // GraphQL ID\n\tDatabaseID  int64  `json:\"id\"`\n\tFullName    string `json:\"full_name\"` // same as nameWithOwner\n\tDescription string\n\tHTMLURL     string                    `json:\"html_url\"` // web URL\n\tPrivate     bool                      `json:\"private\"`\n\tFork        bool                      `json:\"fork\"`\n\tArchived    bool                      `json:\"archived\"`\n\tLocked      bool                      `json:\"locked\"`\n\tDisabled    bool                      `json:\"disabled\"`\n\tPermissions restRepositoryPermissions `json:\"permissions\"`\n\tStars       int                       `json:\"stargazers_count\"`\n\tForks       int                       `json:\"forks_count\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#restRepositoryPermissions",
              "documentation": {
                "identifier": "restRepositoryPermissions",
                "newPage": false,
                "searchKey": "github.restRepositoryPermissions",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type restRepositoryPermissions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype restRepositoryPermissions struct {\n\tAdmin bool `json:\"admin\"`\n\tPush  bool `json:\"push\"`\n\tPull  bool `json:\"pull\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#restSearchResponse",
              "documentation": {
                "identifier": "restSearchResponse",
                "newPage": false,
                "searchKey": "github.restSearchResponse",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type restSearchResponse struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype restSearchResponse struct {\n\tTotalCount        int              `json:\"total_count\"`\n\tIncompleteResults bool             `json:\"incomplete_results\"`\n\tItems             []restRepository `json:\"items\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#restTopicsResponse",
              "documentation": {
                "identifier": "restTopicsResponse",
                "newPage": false,
                "searchKey": "github.restTopicsResponse",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type restTopicsResponse struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype restTopicsResponse struct {\n\tNames []string `json:\"names\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#versionCache",
              "documentation": {
                "identifier": "versionCache",
                "newPage": false,
                "searchKey": "github.versionCache",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type versionCache struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype versionCache struct {\n\tmu        sync.Mutex\n\tversions  map[string]*semver.Version\n\tlastReset time.Time\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/extsvc/github#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/extsvc/github#APIRoot",
              "documentation": {
                "identifier": "APIRoot",
                "newPage": false,
                "searchKey": "github.APIRoot",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func APIRoot(baseURL *url.URL) (apiURL *url.URL, githubDotCom bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc APIRoot(baseURL *url.URL) (apiURL *url.URL, githubDotCom bool)\n```\n\nAPIRoot returns the root URL of the API using the base URL of the GitHub instance. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#ExternalRepoSpec",
              "documentation": {
                "identifier": "ExternalRepoSpec",
                "newPage": false,
                "searchKey": "github.ExternalRepoSpec",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExternalRepoSpec(repo *Repository, baseURL *url.URL) api.ExternalRepoSpec"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExternalRepoSpec(repo *Repository, baseURL *url.URL) api.ExternalRepoSpec\n```\n\nExternalRepoSpec returns an api.ExternalRepoSpec that refers to the specified GitHub repository. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#GetExternalAccountData",
              "documentation": {
                "identifier": "GetExternalAccountData",
                "newPage": false,
                "searchKey": "github.GetExternalAccountData",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func GetExternalAccountData(data *extsvc.AccountData) (usr *github.User, tok *oauth2.Token, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc GetExternalAccountData(data *extsvc.AccountData) (usr *github.User, tok *oauth2.Token, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#HTTPErrorCode",
              "documentation": {
                "identifier": "HTTPErrorCode",
                "newPage": false,
                "searchKey": "github.HTTPErrorCode",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func HTTPErrorCode(err error) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HTTPErrorCode(err error) int\n```\n\nHTTPErrorCode returns err's HTTP status code, if it is an HTTP error from this package. Otherwise it returns 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#IsNotFound",
              "documentation": {
                "identifier": "IsNotFound",
                "newPage": false,
                "searchKey": "github.IsNotFound",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsNotFound(err error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsNotFound(err error) bool\n```\n\nIsNotFound reports whether err is a GitHub API error of type NOT_FOUND, the equivalent cached response error, or HTTP 404. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#IsNotMergeable",
              "documentation": {
                "identifier": "IsNotMergeable",
                "newPage": false,
                "searchKey": "github.IsNotMergeable",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsNotMergeable(err error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsNotMergeable(err error) bool\n```\n\nIsNotMergeable reports whether err is a GitHub API error reporting that a PR was not in a mergeable state. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#IsRateLimitExceeded",
              "documentation": {
                "identifier": "IsRateLimitExceeded",
                "newPage": false,
                "searchKey": "github.IsRateLimitExceeded",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsRateLimitExceeded(err error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsRateLimitExceeded(err error) bool\n```\n\nIsRateLimitExceeded reports whether err is a GitHub API error reporting that the GitHub API rate limit was exceeded. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#SetExternalAccountData",
              "documentation": {
                "identifier": "SetExternalAccountData",
                "newPage": false,
                "searchKey": "github.SetExternalAccountData",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func SetExternalAccountData(data *extsvc.AccountData, user *github.User, token *oauth2.Token)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SetExternalAccountData(data *extsvc.AccountData, user *github.User, token *oauth2.Token)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#SplitRepositoryNameWithOwner",
              "documentation": {
                "identifier": "SplitRepositoryNameWithOwner",
                "newPage": false,
                "searchKey": "github.SplitRepositoryNameWithOwner",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func SplitRepositoryNameWithOwner(nameWithOwner string) (owner, repo string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SplitRepositoryNameWithOwner(nameWithOwner string) (owner, repo string, err error)\n```\n\nSplitRepositoryNameWithOwner splits a GitHub repository's \"owner/name\" string into \"owner\" and \"name\", with validation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestClient_GetReposByNameWithOwner",
              "documentation": {
                "identifier": "TestClient_GetReposByNameWithOwner",
                "newPage": false,
                "searchKey": "github.TestClient_GetReposByNameWithOwner",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClient_GetReposByNameWithOwner(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClient_GetReposByNameWithOwner(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestClient_GetRepository",
              "documentation": {
                "identifier": "TestClient_GetRepository",
                "newPage": false,
                "searchKey": "github.TestClient_GetRepository",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClient_GetRepository(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClient_GetRepository(t *testing.T)\n```\n\nTestClient_GetRepository tests the behavior of GetRepository. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestClient_GetRepository_nonexistent",
              "documentation": {
                "identifier": "TestClient_GetRepository_nonexistent",
                "newPage": false,
                "searchKey": "github.TestClient_GetRepository_nonexistent",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClient_GetRepository_nonexistent(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClient_GetRepository_nonexistent(t *testing.T)\n```\n\nTestClient_GetRepository_nonexistent tests the behavior of GetRepository when called on a repository that does not exist. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestClient_ListOrgRepositories",
              "documentation": {
                "identifier": "TestClient_ListOrgRepositories",
                "newPage": false,
                "searchKey": "github.TestClient_ListOrgRepositories",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClient_ListOrgRepositories(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClient_ListOrgRepositories(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestClient_ListRepositoriesForSearch",
              "documentation": {
                "identifier": "TestClient_ListRepositoriesForSearch",
                "newPage": false,
                "searchKey": "github.TestClient_ListRepositoriesForSearch",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClient_ListRepositoriesForSearch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClient_ListRepositoriesForSearch(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestClient_ListRepositoriesForSearch_incomplete",
              "documentation": {
                "identifier": "TestClient_ListRepositoriesForSearch_incomplete",
                "newPage": false,
                "searchKey": "github.TestClient_ListRepositoriesForSearch_incomplete",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClient_ListRepositoriesForSearch_incomplete(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClient_ListRepositoriesForSearch_incomplete(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestClient_buildGetRepositoriesBatchQuery",
              "documentation": {
                "identifier": "TestClient_buildGetRepositoriesBatchQuery",
                "newPage": false,
                "searchKey": "github.TestClient_buildGetRepositoriesBatchQuery",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClient_buildGetRepositoriesBatchQuery(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClient_buildGetRepositoriesBatchQuery(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestClosePullRequest",
              "documentation": {
                "identifier": "TestClosePullRequest",
                "newPage": false,
                "searchKey": "github.TestClosePullRequest",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClosePullRequest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClosePullRequest(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestCreatePullRequest",
              "documentation": {
                "identifier": "TestCreatePullRequest",
                "newPage": false,
                "searchKey": "github.TestCreatePullRequest",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCreatePullRequest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCreatePullRequest(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestCreatePullRequestComment",
              "documentation": {
                "identifier": "TestCreatePullRequestComment",
                "newPage": false,
                "searchKey": "github.TestCreatePullRequestComment",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCreatePullRequestComment(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCreatePullRequestComment(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestEstimateGraphQLCost",
              "documentation": {
                "identifier": "TestEstimateGraphQLCost",
                "newPage": false,
                "searchKey": "github.TestEstimateGraphQLCost",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEstimateGraphQLCost(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEstimateGraphQLCost(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestGetAuthenticatedUserOrgs",
              "documentation": {
                "identifier": "TestGetAuthenticatedUserOrgs",
                "newPage": false,
                "searchKey": "github.TestGetAuthenticatedUserOrgs",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetAuthenticatedUserOrgs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetAuthenticatedUserOrgs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestGetAuthenticatedUserV4",
              "documentation": {
                "identifier": "TestGetAuthenticatedUserV4",
                "newPage": false,
                "searchKey": "github.TestGetAuthenticatedUserV4",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetAuthenticatedUserV4(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetAuthenticatedUserV4(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestListAffiliatedRepositories",
              "documentation": {
                "identifier": "TestListAffiliatedRepositories",
                "newPage": false,
                "searchKey": "github.TestListAffiliatedRepositories",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestListAffiliatedRepositories(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestListAffiliatedRepositories(t *testing.T)\n```\n\nNOTE: To update VCR for this test, please use the token of \"sourcegraph-vcr\" for GITHUB_TOKEN, which can be found in 1Password. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestListRepositoryCollaborators",
              "documentation": {
                "identifier": "TestListRepositoryCollaborators",
                "newPage": false,
                "searchKey": "github.TestListRepositoryCollaborators",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestListRepositoryCollaborators(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestListRepositoryCollaborators(t *testing.T)\n```\n\nNOTE: To update VCR for this test, please use the token of \"sourcegraph-vcr\" for GITHUB_TOKEN, which can be found in 1Password. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestLoadPullRequest",
              "documentation": {
                "identifier": "TestLoadPullRequest",
                "newPage": false,
                "searchKey": "github.TestLoadPullRequest",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLoadPullRequest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLoadPullRequest(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestMarkPullRequestReadyForReview",
              "documentation": {
                "identifier": "TestMarkPullRequestReadyForReview",
                "newPage": false,
                "searchKey": "github.TestMarkPullRequestReadyForReview",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarkPullRequestReadyForReview(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarkPullRequestReadyForReview(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestMergePullRequest",
              "documentation": {
                "identifier": "TestMergePullRequest",
                "newPage": false,
                "searchKey": "github.TestMergePullRequest",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMergePullRequest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMergePullRequest(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestNewRepoCache",
              "documentation": {
                "identifier": "TestNewRepoCache",
                "newPage": false,
                "searchKey": "github.TestNewRepoCache",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewRepoCache(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewRepoCache(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestReopenPullRequest",
              "documentation": {
                "identifier": "TestReopenPullRequest",
                "newPage": false,
                "searchKey": "github.TestReopenPullRequest",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReopenPullRequest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReopenPullRequest(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestSplitRepositoryNameWithOwner",
              "documentation": {
                "identifier": "TestSplitRepositoryNameWithOwner",
                "newPage": false,
                "searchKey": "github.TestSplitRepositoryNameWithOwner",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSplitRepositoryNameWithOwner(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSplitRepositoryNameWithOwner(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestUnmarshal",
              "documentation": {
                "identifier": "TestUnmarshal",
                "newPage": false,
                "searchKey": "github.TestUnmarshal",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshal(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestV3Client_WithAuthenticator",
              "documentation": {
                "identifier": "TestV3Client_WithAuthenticator",
                "newPage": false,
                "searchKey": "github.TestV3Client_WithAuthenticator",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestV3Client_WithAuthenticator(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestV3Client_WithAuthenticator(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#TestV4Client_WithAuthenticator",
              "documentation": {
                "identifier": "TestV4Client_WithAuthenticator",
                "newPage": false,
                "searchKey": "github.TestV4Client_WithAuthenticator",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestV4Client_WithAuthenticator(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestV4Client_WithAuthenticator(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#Test_GetAuthenticatedUserOAuthScopes",
              "documentation": {
                "identifier": "Test_GetAuthenticatedUserOAuthScopes",
                "newPage": false,
                "searchKey": "github.Test_GetAuthenticatedUserOAuthScopes",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test_GetAuthenticatedUserOAuthScopes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test_GetAuthenticatedUserOAuthScopes(t *testing.T)\n```\n\nNOTE: To update VCR for this test, please use the token of \"sourcegraph-vcr\" for GITHUB_TOKEN, which can be found in 1Password. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#abbreviateRef",
              "documentation": {
                "identifier": "abbreviateRef",
                "newPage": false,
                "searchKey": "github.abbreviateRef",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func abbreviateRef(ref string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc abbreviateRef(ref string) string\n```\n\nabbreviateRef removes the \"refs/heads/\" prefix from a given ref. If the ref doesn't have the prefix, it returns it unchanged. \n\nCopied from internal/vcs/git to avoid a cyclic import \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#calcDefinitionCost",
              "documentation": {
                "identifier": "calcDefinitionCost",
                "newPage": false,
                "searchKey": "github.calcDefinitionCost",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func calcDefinitionCost(def ast.Node) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc calcDefinitionCost(def ast.Node) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#canonicalizedURL",
              "documentation": {
                "identifier": "canonicalizedURL",
                "newPage": false,
                "searchKey": "github.canonicalizedURL",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func canonicalizedURL(apiURL *url.URL) *url.URL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc canonicalizedURL(apiURL *url.URL) *url.URL\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#convertRestRepoPermissions",
              "documentation": {
                "identifier": "convertRestRepoPermissions",
                "newPage": false,
                "searchKey": "github.convertRestRepoPermissions",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func convertRestRepoPermissions(restRepoPermissions restRepositoryPermissions) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc convertRestRepoPermissions(restRepoPermissions restRepositoryPermissions) string\n```\n\nconvertRestRepoPermissions converts repo information returned by the rest API to a standard format. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#doRequest",
              "documentation": {
                "identifier": "doRequest",
                "newPage": false,
                "searchKey": "github.doRequest",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func doRequest(ctx context.Context, apiURL *url.URL, auth auth.Authenticator, rateLimitMonitor *ratelimit.Monitor, httpClient httpcli.Doer, req *http.Request, result interface{}) (headers http.Header, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc doRequest(ctx context.Context, apiURL *url.URL, auth auth.Authenticator, rateLimitMonitor *ratelimit.Monitor, httpClient httpcli.Doer, req *http.Request, result interface{}) (headers http.Header, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#estimateGraphQLCost",
              "documentation": {
                "identifier": "estimateGraphQLCost",
                "newPage": false,
                "searchKey": "github.estimateGraphQLCost",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func estimateGraphQLCost(query string) (int, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc estimateGraphQLCost(query string) (int, error)\n```\n\nestimateGraphQLCost estimates the cost of the query as described here: [https://developer.github.com/v4/guides/resource-limitations/#calculating-a-rate-limit-score-before-running-the-call](https://developer.github.com/v4/guides/resource-limitations/#calculating-a-rate-limit-score-before-running-the-call) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#filterInPlace",
              "documentation": {
                "identifier": "filterInPlace",
                "newPage": false,
                "searchKey": "github.filterInPlace",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func filterInPlace(limitStack []limitDepth, depth int) []limitDepth"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc filterInPlace(limitStack []limitDepth, depth int) []limitDepth\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#nameWithOwnerCacheKey",
              "documentation": {
                "identifier": "nameWithOwnerCacheKey",
                "newPage": false,
                "searchKey": "github.nameWithOwnerCacheKey",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func nameWithOwnerCacheKey(nameWithOwner string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nameWithOwnerCacheKey(nameWithOwner string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#newRepoCache",
              "documentation": {
                "identifier": "newRepoCache",
                "newPage": false,
                "searchKey": "github.newRepoCache",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newRepoCache(apiURL *url.URL, a auth.Authenticator) *rcache.Cache"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newRepoCache(apiURL *url.URL, a auth.Authenticator) *rcache.Cache\n```\n\nnewRepoCache creates a new cache for GitHub repository metadata. The backing store is Redis. A checksum of the authenticator and API URL are used as a Redis key prefix to prevent collisions with caches for different authentication and API URLs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#nodeIDCacheKey",
              "documentation": {
                "identifier": "nodeIDCacheKey",
                "newPage": false,
                "searchKey": "github.nodeIDCacheKey",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func nodeIDCacheKey(id string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nodeIDCacheKey(id string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#normalizeURL",
              "documentation": {
                "identifier": "normalizeURL",
                "newPage": false,
                "searchKey": "github.normalizeURL",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func normalizeURL(rawURL string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc normalizeURL(rawURL string) string\n```\n\nnormalizeURL will attempt to normalize rawURL. If there is an error parsing it, we'll just return rawURL lower cased. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#ownerNameCacheKey",
              "documentation": {
                "identifier": "ownerNameCacheKey",
                "newPage": false,
                "searchKey": "github.ownerNameCacheKey",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ownerNameCacheKey(owner, name string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ownerNameCacheKey(owner, name string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#pullRequestFragments",
              "documentation": {
                "identifier": "pullRequestFragments",
                "newPage": false,
                "searchKey": "github.pullRequestFragments",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func pullRequestFragments(version *semver.Version) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc pullRequestFragments(version *semver.Version) (string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#repoListsAreEqual",
              "documentation": {
                "identifier": "repoListsAreEqual",
                "newPage": false,
                "searchKey": "github.repoListsAreEqual",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func repoListsAreEqual(a []*Repository, b []*Repository) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc repoListsAreEqual(a []*Repository, b []*Repository) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#stringForRepoList",
              "documentation": {
                "identifier": "stringForRepoList",
                "newPage": false,
                "searchKey": "github.stringForRepoList",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func stringForRepoList(repos []*Repository) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stringForRepoList(repos []*Repository) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#timelineItemTypes",
              "documentation": {
                "identifier": "timelineItemTypes",
                "newPage": false,
                "searchKey": "github.timelineItemTypes",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func timelineItemTypes(version *semver.Version) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc timelineItemTypes(version *semver.Version) (string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#timelineItemsFragment",
              "documentation": {
                "identifier": "timelineItemsFragment",
                "newPage": false,
                "searchKey": "github.timelineItemsFragment",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func timelineItemsFragment(version *semver.Version) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc timelineItemsFragment(version *semver.Version) (string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#unmarshal",
              "documentation": {
                "identifier": "unmarshal",
                "newPage": false,
                "searchKey": "github.unmarshal",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func unmarshal(data []byte, v interface{}) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unmarshal(data []byte, v interface{}) error\n```\n\nunmarshal wraps json.Unmarshal, but includes extra context in the case of json.UnmarshalTypeError \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#update",
              "documentation": {
                "identifier": "update",
                "newPage": false,
                "searchKey": "github.update",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func update(name string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc update(name string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/extsvc/github#urlIsGitHubDotCom",
              "documentation": {
                "identifier": "urlIsGitHubDotCom",
                "newPage": false,
                "searchKey": "github.urlIsGitHubDotCom",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func urlIsGitHubDotCom(apiURL *url.URL) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc urlIsGitHubDotCom(apiURL *url.URL) bool\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
