{
  "pathID": "/internal/lazyregexp",
  "documentation": {
    "identifier": "lazyregexp",
    "newPage": true,
    "searchKey": "internal/lazyregexp",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package lazyregexp"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package lazyregexp is a thin wrapper over regexp, allowing the use of global regexp variables without forcing them to be compiled at init. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/lazyregexp#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/lazyregexp#inTest",
              "documentation": {
                "identifier": "inTest",
                "newPage": false,
                "searchKey": "lazyregexp.inTest",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var inTest"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar inTest = len(os.Args) > 0 && strings.HasSuffix(strings.TrimSuffix(os.Args[0], \".exe\"), \".test\")\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/lazyregexp#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/lazyregexp#Regexp",
              "documentation": {
                "identifier": "Regexp",
                "newPage": false,
                "searchKey": "lazyregexp.Regexp",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Regexp struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Regexp struct {\n\tstr   string\n\tposix bool\n\tonce  sync.Once\n\trx    *regexp.Regexp\n}\n```\n\nRegexp is a wrapper around regexp.Regexp, where the underlying regexp will be compiled the first time it is needed. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#New",
                    "documentation": {
                      "identifier": "New",
                      "newPage": false,
                      "searchKey": "lazyregexp.New",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func New(str string) *Regexp"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc New(str string) *Regexp\n```\n\nNew creates a new lazy regexp, delaying the compiling work until it is first needed. If the code is being run as part of tests, the regexp compiling will happen immediately. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#NewPOSIX",
                    "documentation": {
                      "identifier": "NewPOSIX",
                      "newPage": false,
                      "searchKey": "lazyregexp.NewPOSIX",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewPOSIX(str string) *Regexp"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewPOSIX(str string) *Regexp\n```\n\nNewPOSIX creates a new lazy regexp, delaying the compiling work until it is first needed. If the code is being run as part of tests, the regexp compiling will happen immediately. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#Regexp.FindAllIndex",
                    "documentation": {
                      "identifier": "Regexp.FindAllIndex",
                      "newPage": false,
                      "searchKey": "lazyregexp.Regexp.FindAllIndex",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Regexp) FindAllIndex(b []byte, n int) [][]int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Regexp) FindAllIndex(b []byte, n int) [][]int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#Regexp.FindAllString",
                    "documentation": {
                      "identifier": "Regexp.FindAllString",
                      "newPage": false,
                      "searchKey": "lazyregexp.Regexp.FindAllString",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Regexp) FindAllString(s string, n int) []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Regexp) FindAllString(s string, n int) []string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#Regexp.FindAllStringSubmatch",
                    "documentation": {
                      "identifier": "Regexp.FindAllStringSubmatch",
                      "newPage": false,
                      "searchKey": "lazyregexp.Regexp.FindAllStringSubmatch",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Regexp) FindAllStringSubmatch(s string, n int) [][]string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Regexp) FindAllStringSubmatch(s string, n int) [][]string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#Regexp.FindString",
                    "documentation": {
                      "identifier": "Regexp.FindString",
                      "newPage": false,
                      "searchKey": "lazyregexp.Regexp.FindString",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Regexp) FindString(s string) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Regexp) FindString(s string) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#Regexp.FindStringSubmatch",
                    "documentation": {
                      "identifier": "Regexp.FindStringSubmatch",
                      "newPage": false,
                      "searchKey": "lazyregexp.Regexp.FindStringSubmatch",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Regexp) FindStringSubmatch(s string) []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Regexp) FindStringSubmatch(s string) []string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#Regexp.FindStringSubmatchIndex",
                    "documentation": {
                      "identifier": "Regexp.FindStringSubmatchIndex",
                      "newPage": false,
                      "searchKey": "lazyregexp.Regexp.FindStringSubmatchIndex",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Regexp) FindStringSubmatchIndex(s string) []int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Regexp) FindStringSubmatchIndex(s string) []int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#Regexp.FindSubmatch",
                    "documentation": {
                      "identifier": "Regexp.FindSubmatch",
                      "newPage": false,
                      "searchKey": "lazyregexp.Regexp.FindSubmatch",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Regexp) FindSubmatch(s []byte) [][]byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Regexp) FindSubmatch(s []byte) [][]byte\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#Regexp.Match",
                    "documentation": {
                      "identifier": "Regexp.Match",
                      "newPage": false,
                      "searchKey": "lazyregexp.Regexp.Match",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Regexp) Match(b []byte) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Regexp) Match(b []byte) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#Regexp.MatchString",
                    "documentation": {
                      "identifier": "Regexp.MatchString",
                      "newPage": false,
                      "searchKey": "lazyregexp.Regexp.MatchString",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Regexp) MatchString(s string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Regexp) MatchString(s string) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#Regexp.ReplaceAll",
                    "documentation": {
                      "identifier": "Regexp.ReplaceAll",
                      "newPage": false,
                      "searchKey": "lazyregexp.Regexp.ReplaceAll",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Regexp) ReplaceAll(src, repl []byte) []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Regexp) ReplaceAll(src, repl []byte) []byte\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#Regexp.ReplaceAllLiteralString",
                    "documentation": {
                      "identifier": "Regexp.ReplaceAllLiteralString",
                      "newPage": false,
                      "searchKey": "lazyregexp.Regexp.ReplaceAllLiteralString",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Regexp) ReplaceAllLiteralString(src, repl string) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Regexp) ReplaceAllLiteralString(src, repl string) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#Regexp.ReplaceAllString",
                    "documentation": {
                      "identifier": "Regexp.ReplaceAllString",
                      "newPage": false,
                      "searchKey": "lazyregexp.Regexp.ReplaceAllString",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Regexp) ReplaceAllString(src, repl string) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Regexp) ReplaceAllString(src, repl string) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#Regexp.ReplaceAllStringFunc",
                    "documentation": {
                      "identifier": "Regexp.ReplaceAllStringFunc",
                      "newPage": false,
                      "searchKey": "lazyregexp.Regexp.ReplaceAllStringFunc",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Regexp) ReplaceAllStringFunc(src string, repl func(string) string) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Regexp) ReplaceAllStringFunc(src string, repl func(string) string) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#Regexp.Split",
                    "documentation": {
                      "identifier": "Regexp.Split",
                      "newPage": false,
                      "searchKey": "lazyregexp.Regexp.Split",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Regexp) Split(s string, n int) []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Regexp) Split(s string, n int) []string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#Regexp.SubexpNames",
                    "documentation": {
                      "identifier": "Regexp.SubexpNames",
                      "newPage": false,
                      "searchKey": "lazyregexp.Regexp.SubexpNames",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Regexp) SubexpNames() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Regexp) SubexpNames() []string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#Regexp.build",
                    "documentation": {
                      "identifier": "Regexp.build",
                      "newPage": false,
                      "searchKey": "lazyregexp.Regexp.build",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Regexp) build()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Regexp) build()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/lazyregexp#Regexp.re",
                    "documentation": {
                      "identifier": "Regexp.re",
                      "newPage": false,
                      "searchKey": "lazyregexp.Regexp.re",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Regexp) re() *regexp.Regexp"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Regexp) re() *regexp.Regexp\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
}
