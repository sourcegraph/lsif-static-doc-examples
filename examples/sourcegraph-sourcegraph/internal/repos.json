{
  "pathID": "/internal/repos",
  "documentation": {
    "identifier": "repos",
    "newPage": true,
    "searchKey": "internal/repos",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package repos"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package repos providers workers to monitor code host APIs. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/repos#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/repos#CountTotalUserAddedReposQueryFmtstr",
              "documentation": {
                "identifier": "CountTotalUserAddedReposQueryFmtstr",
                "newPage": false,
                "searchKey": "repos.CountTotalUserAddedReposQueryFmtstr",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const CountTotalUserAddedReposQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst CountTotalUserAddedReposQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#batchReposQueryFmtstr",
              "documentation": {
                "identifier": "batchReposQueryFmtstr",
                "newPage": false,
                "searchKey": "repos.batchReposQueryFmtstr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const batchReposQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst batchReposQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#enqueueSyncJobsQueryFmtstr",
              "documentation": {
                "identifier": "enqueueSyncJobsQueryFmtstr",
                "newPage": false,
                "searchKey": "repos.enqueueSyncJobsQueryFmtstr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const enqueueSyncJobsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst enqueueSyncJobsQueryFmtstr = ...\n```\n\nWe ignore Phabricator repos here as they are currently synced using RunPhabricatorRepositorySyncWorker \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#maxDelay",
              "documentation": {
                "identifier": "maxDelay",
                "newPage": false,
                "searchKey": "repos.maxDelay",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const maxDelay"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst maxDelay = 8 * time.Hour\n```\n\nmaxDelay is the maximum amount of time between scheduled updates for a single repository. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#minDelay",
              "documentation": {
                "identifier": "minDelay",
                "newPage": false,
                "searchKey": "repos.minDelay",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const minDelay"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst minDelay = 45 * time.Second\n```\n\nminDelay is the minimum amount of time between scheduled updates for a single repository. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#notifyChanBuffer",
              "documentation": {
                "identifier": "notifyChanBuffer",
                "newPage": false,
                "searchKey": "repos.notifyChanBuffer",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const notifyChanBuffer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst notifyChanBuffer = 1\n```\n\nnotifyChanBuffer controls the buffer size of notification channels. It is important that this value is 1 so that we can perform lossless non-blocking sends. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#priorityHigh",
              "documentation": {
                "identifier": "priorityHigh",
                "newPage": false,
                "searchKey": "repos.priorityHigh",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const priorityHigh"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst priorityHigh\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#priorityLow",
              "documentation": {
                "identifier": "priorityLow",
                "newPage": false,
                "searchKey": "repos.priorityLow",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const priorityLow"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst priorityLow priority = iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#setClonedReposQueryFmtstr",
              "documentation": {
                "identifier": "setClonedReposQueryFmtstr",
                "newPage": false,
                "searchKey": "repos.setClonedReposQueryFmtstr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const setClonedReposQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst setClonedReposQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#stubBadHTTPRedirectLocation",
              "documentation": {
                "identifier": "stubBadHTTPRedirectLocation",
                "newPage": false,
                "searchKey": "repos.stubBadHTTPRedirectLocation",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const stubBadHTTPRedirectLocation"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst stubBadHTTPRedirectLocation = `https://amazonaws.com/badhttpredirectlocation`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#tagFamily",
              "documentation": {
                "identifier": "tagFamily",
                "newPage": false,
                "searchKey": "repos.tagFamily",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagFamily"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagFamily = \"family\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#tagID",
              "documentation": {
                "identifier": "tagID",
                "newPage": false,
                "searchKey": "repos.tagID",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagID = \"id\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#tagState",
              "documentation": {
                "identifier": "tagState",
                "newPage": false,
                "searchKey": "repos.tagState",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagState"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagState = \"state\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#tagSuccess",
              "documentation": {
                "identifier": "tagSuccess",
                "newPage": false,
                "searchKey": "repos.tagSuccess",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagSuccess"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagSuccess = \"success\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#upsertSourcesFmtstrDeletes",
              "documentation": {
                "identifier": "upsertSourcesFmtstrDeletes",
                "newPage": false,
                "searchKey": "repos.upsertSourcesFmtstrDeletes",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const upsertSourcesFmtstrDeletes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst upsertSourcesFmtstrDeletes = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#upsertSourcesFmtstrPrefix",
              "documentation": {
                "identifier": "upsertSourcesFmtstrPrefix",
                "newPage": false,
                "searchKey": "repos.upsertSourcesFmtstrPrefix",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const upsertSourcesFmtstrPrefix"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst upsertSourcesFmtstrPrefix = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#upsertSourcesFmtstrSuffix",
              "documentation": {
                "identifier": "upsertSourcesFmtstrSuffix",
                "newPage": false,
                "searchKey": "repos.upsertSourcesFmtstrSuffix",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const upsertSourcesFmtstrSuffix"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst upsertSourcesFmtstrSuffix = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/repos#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/repos#MockStatusMessages",
              "documentation": {
                "identifier": "MockStatusMessages",
                "newPage": false,
                "searchKey": "repos.MockStatusMessages",
                "tags": [
                  "variable",
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var MockStatusMessages"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar MockStatusMessages func(context.Context, *types.User) ([]StatusMessage, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#batchDeleteReposQuery",
              "documentation": {
                "identifier": "batchDeleteReposQuery",
                "newPage": false,
                "searchKey": "repos.batchDeleteReposQuery",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var batchDeleteReposQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar batchDeleteReposQuery = ...\n```\n\ndelete is a soft-delete. name is unique and the syncer ensures we respect that constraint. However, the syncer is unaware of soft-deleted repositories. So we update the name to something unique to prevent violating this constraint between active and soft-deleted names. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#batchInsertReposQuery",
              "documentation": {
                "identifier": "batchInsertReposQuery",
                "newPage": false,
                "searchKey": "repos.batchInsertReposQuery",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var batchInsertReposQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar batchInsertReposQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#batchUpdateReposQuery",
              "documentation": {
                "identifier": "batchUpdateReposQuery",
                "newPage": false,
                "searchKey": "repos.batchUpdateReposQuery",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var batchUpdateReposQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar batchUpdateReposQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#configuredLimiter",
              "documentation": {
                "identifier": "configuredLimiter",
                "newPage": false,
                "searchKey": "repos.configuredLimiter",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var configuredLimiter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar configuredLimiter = ...\n```\n\nconfiguredLimiter returns a mutable limiter that is configured with the maximum number of concurrent update requests that repo-updater should send to gitserver. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#defaultTime",
              "documentation": {
                "identifier": "defaultTime",
                "newPage": false,
                "searchKey": "repos.defaultTime",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var defaultTime"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar defaultTime = time.Date(2000, 1, 1, 1, 1, 1, 1, time.UTC)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#githubRatelimitWaitCounter",
              "documentation": {
                "identifier": "githubRatelimitWaitCounter",
                "newPage": false,
                "searchKey": "repos.githubRatelimitWaitCounter",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var githubRatelimitWaitCounter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar githubRatelimitWaitCounter = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#githubRemainingGauge",
              "documentation": {
                "identifier": "githubRemainingGauge",
                "newPage": false,
                "searchKey": "repos.githubRemainingGauge",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var githubRemainingGauge"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar githubRemainingGauge = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#gitlabRatelimitWaitCounter",
              "documentation": {
                "identifier": "gitlabRatelimitWaitCounter",
                "newPage": false,
                "searchKey": "repos.gitlabRatelimitWaitCounter",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var gitlabRatelimitWaitCounter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar gitlabRatelimitWaitCounter = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#gitlabRemainingGauge",
              "documentation": {
                "identifier": "gitlabRemainingGauge",
                "newPage": false,
                "searchKey": "repos.gitlabRemainingGauge",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var gitlabRemainingGauge"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar gitlabRemainingGauge = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#lastSync",
              "documentation": {
                "identifier": "lastSync",
                "newPage": false,
                "searchKey": "repos.lastSync",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var lastSync"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar lastSync = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#listRepoIDsQuery",
              "documentation": {
                "identifier": "listRepoIDsQuery",
                "newPage": false,
                "searchKey": "repos.listRepoIDsQuery",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var listRepoIDsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar listRepoIDsQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#notify",
              "documentation": {
                "identifier": "notify",
                "newPage": false,
                "searchKey": "repos.notify",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var notify"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar notify = func(ch chan struct{}) {\n\tselect {\n\tcase ch <- struct{}{}:\n\tdefault:\n\t}\n}\n```\n\nnotify performs a non-blocking send on the channel. The channel should be buffered. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#phabricatorUpdateTime",
              "documentation": {
                "identifier": "phabricatorUpdateTime",
                "newPage": false,
                "searchKey": "repos.phabricatorUpdateTime",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var phabricatorUpdateTime"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar phabricatorUpdateTime = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#purgeFailed",
              "documentation": {
                "identifier": "purgeFailed",
                "newPage": false,
                "searchKey": "repos.purgeFailed",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var purgeFailed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar purgeFailed = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#purgeSuccess",
              "documentation": {
                "identifier": "purgeSuccess",
                "newPage": false,
                "searchKey": "repos.purgeSuccess",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var purgeSuccess"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar purgeSuccess = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#regOrg",
              "documentation": {
                "identifier": "regOrg",
                "newPage": false,
                "searchKey": "repos.regOrg",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var regOrg"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar regOrg = lazyregexp.New(`^org:([a-zA-Z0-9](?:-?[a-zA-Z0-9]){0,38})$`)\n```\n\nregOrg is a regular expression that matches the pattern `org:<org-name>` `<org-name>` follows the GitHub username convention: - only single hyphens and alphanumeric characters allowed. - cannot begin/end with hyphen. - up to 38 characters. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#requestRepoUpdate",
              "documentation": {
                "identifier": "requestRepoUpdate",
                "newPage": false,
                "searchKey": "repos.requestRepoUpdate",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var requestRepoUpdate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar requestRepoUpdate = ...\n```\n\nrequestRepoUpdate sends a request to gitserver to request an update. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#schedAutoFetch",
              "documentation": {
                "identifier": "schedAutoFetch",
                "newPage": false,
                "searchKey": "repos.schedAutoFetch",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var schedAutoFetch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar schedAutoFetch = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#schedError",
              "documentation": {
                "identifier": "schedError",
                "newPage": false,
                "searchKey": "repos.schedError",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var schedError"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar schedError = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#schedKnownRepos",
              "documentation": {
                "identifier": "schedKnownRepos",
                "newPage": false,
                "searchKey": "repos.schedKnownRepos",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var schedKnownRepos"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar schedKnownRepos = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#schedLoops",
              "documentation": {
                "identifier": "schedLoops",
                "newPage": false,
                "searchKey": "repos.schedLoops",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var schedLoops"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar schedLoops = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#schedManualFetch",
              "documentation": {
                "identifier": "schedManualFetch",
                "newPage": false,
                "searchKey": "repos.schedManualFetch",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var schedManualFetch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar schedManualFetch = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#schedUpdateQueueLength",
              "documentation": {
                "identifier": "schedUpdateQueueLength",
                "newPage": false,
                "searchKey": "repos.schedUpdateQueueLength",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var schedUpdateQueueLength"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar schedUpdateQueueLength = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#schemeOrHostNotEmptyErr",
              "documentation": {
                "identifier": "schemeOrHostNotEmptyErr",
                "newPage": false,
                "searchKey": "repos.schemeOrHostNotEmptyErr",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var schemeOrHostNotEmptyErr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar schemeOrHostNotEmptyErr = errors.New(\"scheme and host should be empty\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#syncDuration",
              "documentation": {
                "identifier": "syncDuration",
                "newPage": false,
                "searchKey": "repos.syncDuration",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var syncDuration"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar syncDuration = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#syncErrors",
              "documentation": {
                "identifier": "syncErrors",
                "newPage": false,
                "searchKey": "repos.syncErrors",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var syncErrors"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar syncErrors = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#syncStarted",
              "documentation": {
                "identifier": "syncStarted",
                "newPage": false,
                "searchKey": "repos.syncStarted",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var syncStarted"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar syncStarted = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#syncedTotal",
              "documentation": {
                "identifier": "syncedTotal",
                "newPage": false,
                "searchKey": "repos.syncedTotal",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var syncedTotal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar syncedTotal = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#timeAfterFunc",
              "documentation": {
                "identifier": "timeAfterFunc",
                "newPage": false,
                "searchKey": "repos.timeAfterFunc",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var timeAfterFunc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar timeAfterFunc = time.AfterFunc\n```\n\nMockable time functions for testing. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#timeNow",
              "documentation": {
                "identifier": "timeNow",
                "newPage": false,
                "searchKey": "repos.timeNow",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var timeNow"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar timeNow = time.Now\n```\n\nMockable time functions for testing. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#updateRegex",
              "documentation": {
                "identifier": "updateRegex",
                "newPage": false,
                "searchKey": "repos.updateRegex",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var updateRegex"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar updateRegex = flag.String(\"update\", \"\", \"Update testdata of tests matching the given regex\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#upsertSourcesQueryFmtstr",
              "documentation": {
                "identifier": "upsertSourcesQueryFmtstr",
                "newPage": false,
                "searchKey": "repos.upsertSourcesQueryFmtstr",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var upsertSourcesQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar upsertSourcesQueryFmtstr = upsertSourcesFmtstrPrefix + upsertSourcesFmtstrSuffix\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#upsertSourcesWithDeletesQueryFmtstr",
              "documentation": {
                "identifier": "upsertSourcesWithDeletesQueryFmtstr",
                "newPage": false,
                "searchKey": "repos.upsertSourcesWithDeletesQueryFmtstr",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var upsertSourcesWithDeletesQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar upsertSourcesWithDeletesQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/repos#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/repos#AWSCodeCommitSource",
              "documentation": {
                "identifier": "AWSCodeCommitSource",
                "newPage": false,
                "searchKey": "repos.AWSCodeCommitSource",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AWSCodeCommitSource struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AWSCodeCommitSource struct {\n\tsvc    *types.ExternalService\n\tconfig *schema.AWSCodeCommitConnection\n\n\tawsPartition string // \"aws\", \"aws-cn\", \"aws-us-gov\"\n\tawsRegion    string\n\tclient       *awscodecommit.Client\n\n\texclude excludeFunc\n}\n```\n\nAn AWSCodeCommitSource yields repositories from a single AWS Code Commit connection configured in Sourcegraph via the external services configuration. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewAWSCodeCommitSource",
                    "documentation": {
                      "identifier": "NewAWSCodeCommitSource",
                      "newPage": false,
                      "searchKey": "repos.NewAWSCodeCommitSource",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewAWSCodeCommitSource(svc *types.ExternalService, cf *httpcli.Factory) (*AWSCodeCommitSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewAWSCodeCommitSource(svc *types.ExternalService, cf *httpcli.Factory) (*AWSCodeCommitSource, error)\n```\n\nNewAWSCodeCommitSource returns a new AWSCodeCommitSource from the given external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#newAWSCodeCommitSource",
                    "documentation": {
                      "identifier": "newAWSCodeCommitSource",
                      "newPage": false,
                      "searchKey": "repos.newAWSCodeCommitSource",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newAWSCodeCommitSource(svc *types.ExternalService, c *schema.AWSCodeCommitConnection, cf *httpcli.Factory) (*AWSCodeCommitSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newAWSCodeCommitSource(svc *types.ExternalService, c *schema.AWSCodeCommitConnection, cf *httpcli.Factory) (*AWSCodeCommitSource, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#AWSCodeCommitSource.ExternalServices",
                    "documentation": {
                      "identifier": "AWSCodeCommitSource.ExternalServices",
                      "newPage": false,
                      "searchKey": "repos.AWSCodeCommitSource.ExternalServices",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AWSCodeCommitSource) ExternalServices() types.ExternalServices"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AWSCodeCommitSource) ExternalServices() types.ExternalServices\n```\n\nExternalServices returns a singleton slice containing the external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#AWSCodeCommitSource.ListRepos",
                    "documentation": {
                      "identifier": "AWSCodeCommitSource.ListRepos",
                      "newPage": false,
                      "searchKey": "repos.AWSCodeCommitSource.ListRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AWSCodeCommitSource) ListRepos(ctx context.Context, results chan SourceResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AWSCodeCommitSource) ListRepos(ctx context.Context, results chan SourceResult)\n```\n\nListRepos returns all AWS Code Commit repositories accessible to all connections configured in Sourcegraph via the external services configuration. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#AWSCodeCommitSource.excludes",
                    "documentation": {
                      "identifier": "AWSCodeCommitSource.excludes",
                      "newPage": false,
                      "searchKey": "repos.AWSCodeCommitSource.excludes",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AWSCodeCommitSource) excludes(r *awscodecommit.Repository) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AWSCodeCommitSource) excludes(r *awscodecommit.Repository) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#AWSCodeCommitSource.listAllRepositories",
                    "documentation": {
                      "identifier": "AWSCodeCommitSource.listAllRepositories",
                      "newPage": false,
                      "searchKey": "repos.AWSCodeCommitSource.listAllRepositories",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AWSCodeCommitSource) listAllRepositories(ctx context.Context, results chan SourceResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AWSCodeCommitSource) listAllRepositories(ctx context.Context, results chan SourceResult)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#AWSCodeCommitSource.makeRepo",
                    "documentation": {
                      "identifier": "AWSCodeCommitSource.makeRepo",
                      "newPage": false,
                      "searchKey": "repos.AWSCodeCommitSource.makeRepo",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AWSCodeCommitSource) makeRepo(r *awscodecommit.Repository) (*types.Repo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AWSCodeCommitSource) makeRepo(r *awscodecommit.Repository) (*types.Repo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#AffiliatedRepositorySource",
              "documentation": {
                "identifier": "AffiliatedRepositorySource",
                "newPage": false,
                "searchKey": "repos.AffiliatedRepositorySource",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AffiliatedRepositorySource interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AffiliatedRepositorySource interface {\n\tAffiliatedRepositories(ctx context.Context) ([]types.CodeHostRepository, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#BitbucketCloudSource",
              "documentation": {
                "identifier": "BitbucketCloudSource",
                "newPage": false,
                "searchKey": "repos.BitbucketCloudSource",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BitbucketCloudSource struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BitbucketCloudSource struct {\n\tsvc     *types.ExternalService\n\tconfig  *schema.BitbucketCloudConnection\n\texclude excludeFunc\n\tclient  *bitbucketcloud.Client\n}\n```\n\nA BitbucketCloudSource yields repositories from a single BitbucketCloud connection configured in Sourcegraph via the external services configuration. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewBitbucketCloudSource",
                    "documentation": {
                      "identifier": "NewBitbucketCloudSource",
                      "newPage": false,
                      "searchKey": "repos.NewBitbucketCloudSource",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewBitbucketCloudSource(svc *types.ExternalService, cf *httpcli.Factory) (*BitbucketCloudSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewBitbucketCloudSource(svc *types.ExternalService, cf *httpcli.Factory) (*BitbucketCloudSource, error)\n```\n\nNewBitbucketCloudSource returns a new BitbucketCloudSource from the given external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#newBitbucketCloudSource",
                    "documentation": {
                      "identifier": "newBitbucketCloudSource",
                      "newPage": false,
                      "searchKey": "repos.newBitbucketCloudSource",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newBitbucketCloudSource(svc *types.ExternalService, c *schema.BitbucketCloudConnection, cf *httpcli.Factory) (*BitbucketCloudSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newBitbucketCloudSource(svc *types.ExternalService, c *schema.BitbucketCloudConnection, cf *httpcli.Factory) (*BitbucketCloudSource, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#BitbucketCloudSource.ExternalServices",
                    "documentation": {
                      "identifier": "BitbucketCloudSource.ExternalServices",
                      "newPage": false,
                      "searchKey": "repos.BitbucketCloudSource.ExternalServices",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketCloudSource) ExternalServices() types.ExternalServices"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketCloudSource) ExternalServices() types.ExternalServices\n```\n\nExternalServices returns a singleton slice containing the external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#BitbucketCloudSource.ListRepos",
                    "documentation": {
                      "identifier": "BitbucketCloudSource.ListRepos",
                      "newPage": false,
                      "searchKey": "repos.BitbucketCloudSource.ListRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketCloudSource) ListRepos(ctx context.Context, results chan SourceResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketCloudSource) ListRepos(ctx context.Context, results chan SourceResult)\n```\n\nListRepos returns all Bitbucket Cloud repositories accessible to all connections configured in Sourcegraph via the external services configuration. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#BitbucketCloudSource.excludes",
                    "documentation": {
                      "identifier": "BitbucketCloudSource.excludes",
                      "newPage": false,
                      "searchKey": "repos.BitbucketCloudSource.excludes",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *BitbucketCloudSource) excludes(r *bitbucketcloud.Repo) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *BitbucketCloudSource) excludes(r *bitbucketcloud.Repo) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#BitbucketCloudSource.listAllRepos",
                    "documentation": {
                      "identifier": "BitbucketCloudSource.listAllRepos",
                      "newPage": false,
                      "searchKey": "repos.BitbucketCloudSource.listAllRepos",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *BitbucketCloudSource) listAllRepos(ctx context.Context, results chan SourceResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *BitbucketCloudSource) listAllRepos(ctx context.Context, results chan SourceResult)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#BitbucketCloudSource.makeRepo",
                    "documentation": {
                      "identifier": "BitbucketCloudSource.makeRepo",
                      "newPage": false,
                      "searchKey": "repos.BitbucketCloudSource.makeRepo",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketCloudSource) makeRepo(r *bitbucketcloud.Repo) *types.Repo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketCloudSource) makeRepo(r *bitbucketcloud.Repo) *types.Repo\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#BitbucketCloudSource.remoteURL",
                    "documentation": {
                      "identifier": "BitbucketCloudSource.remoteURL",
                      "newPage": false,
                      "searchKey": "repos.BitbucketCloudSource.remoteURL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *BitbucketCloudSource) remoteURL(repo *bitbucketcloud.Repo) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *BitbucketCloudSource) remoteURL(repo *bitbucketcloud.Repo) string\n```\n\nremoteURL returns the repository's Git remote URL \n\nnote: this used to contain credentials but that is no longer the case if you need to get an authenticated clone url use repos.CloneURL \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#BitbucketServerSource",
              "documentation": {
                "identifier": "BitbucketServerSource",
                "newPage": false,
                "searchKey": "repos.BitbucketServerSource",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BitbucketServerSource struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BitbucketServerSource struct {\n\tsvc     *types.ExternalService\n\tconfig  *schema.BitbucketServerConnection\n\texclude excludeFunc\n\tclient  *bitbucketserver.Client\n}\n```\n\nA BitbucketServerSource yields repositories from a single BitbucketServer connection configured in Sourcegraph via the external services configuration. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewBitbucketServerSource",
                    "documentation": {
                      "identifier": "NewBitbucketServerSource",
                      "newPage": false,
                      "searchKey": "repos.NewBitbucketServerSource",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewBitbucketServerSource(svc *types.ExternalService, cf *httpcli.Factory) (*BitbucketServerSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewBitbucketServerSource(svc *types.ExternalService, cf *httpcli.Factory) (*BitbucketServerSource, error)\n```\n\nNewBitbucketServerSource returns a new BitbucketServerSource from the given external service. rl is optional \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#newBitbucketServerSource",
                    "documentation": {
                      "identifier": "newBitbucketServerSource",
                      "newPage": false,
                      "searchKey": "repos.newBitbucketServerSource",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newBitbucketServerSource(svc *types.ExternalService, c *schema.BitbucketServerConnection, cf *httpcli.Factory) (*BitbucketServerSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newBitbucketServerSource(svc *types.ExternalService, c *schema.BitbucketServerConnection, cf *httpcli.Factory) (*BitbucketServerSource, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#BitbucketServerSource.AuthenticatedUsername",
                    "documentation": {
                      "identifier": "BitbucketServerSource.AuthenticatedUsername",
                      "newPage": false,
                      "searchKey": "repos.BitbucketServerSource.AuthenticatedUsername",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *BitbucketServerSource) AuthenticatedUsername(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *BitbucketServerSource) AuthenticatedUsername(ctx context.Context) (string, error)\n```\n\nAuthenticatedUsername uses the underlying bitbucketserver.Client to get the username belonging to the credentials associated with the BitbucketServerSource. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#BitbucketServerSource.ExternalServices",
                    "documentation": {
                      "identifier": "BitbucketServerSource.ExternalServices",
                      "newPage": false,
                      "searchKey": "repos.BitbucketServerSource.ExternalServices",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketServerSource) ExternalServices() types.ExternalServices"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketServerSource) ExternalServices() types.ExternalServices\n```\n\nExternalServices returns a singleton slice containing the external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#BitbucketServerSource.ListRepos",
                    "documentation": {
                      "identifier": "BitbucketServerSource.ListRepos",
                      "newPage": false,
                      "searchKey": "repos.BitbucketServerSource.ListRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketServerSource) ListRepos(ctx context.Context, results chan SourceResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketServerSource) ListRepos(ctx context.Context, results chan SourceResult)\n```\n\nListRepos returns all BitbucketServer repositories accessible to all connections configured in Sourcegraph via the external services configuration. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#BitbucketServerSource.ValidateAuthenticator",
                    "documentation": {
                      "identifier": "BitbucketServerSource.ValidateAuthenticator",
                      "newPage": false,
                      "searchKey": "repos.BitbucketServerSource.ValidateAuthenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *BitbucketServerSource) ValidateAuthenticator(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *BitbucketServerSource) ValidateAuthenticator(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#BitbucketServerSource.WithAuthenticator",
                    "documentation": {
                      "identifier": "BitbucketServerSource.WithAuthenticator",
                      "newPage": false,
                      "searchKey": "repos.BitbucketServerSource.WithAuthenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketServerSource) WithAuthenticator(a auth.Authenticator) (Source, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketServerSource) WithAuthenticator(a auth.Authenticator) (Source, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#BitbucketServerSource.excludes",
                    "documentation": {
                      "identifier": "BitbucketServerSource.excludes",
                      "newPage": false,
                      "searchKey": "repos.BitbucketServerSource.excludes",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *BitbucketServerSource) excludes(r *bitbucketserver.Repo) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *BitbucketServerSource) excludes(r *bitbucketserver.Repo) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#BitbucketServerSource.listAllLabeledRepos",
                    "documentation": {
                      "identifier": "BitbucketServerSource.listAllLabeledRepos",
                      "newPage": false,
                      "searchKey": "repos.BitbucketServerSource.listAllLabeledRepos",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *BitbucketServerSource) listAllLabeledRepos(ctx context.Context, label string) (map[int]struct{}, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *BitbucketServerSource) listAllLabeledRepos(ctx context.Context, label string) (map[int]struct{}, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#BitbucketServerSource.listAllRepos",
                    "documentation": {
                      "identifier": "BitbucketServerSource.listAllRepos",
                      "newPage": false,
                      "searchKey": "repos.BitbucketServerSource.listAllRepos",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *BitbucketServerSource) listAllRepos(ctx context.Context, results chan SourceResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *BitbucketServerSource) listAllRepos(ctx context.Context, results chan SourceResult)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#BitbucketServerSource.makeRepo",
                    "documentation": {
                      "identifier": "BitbucketServerSource.makeRepo",
                      "newPage": false,
                      "searchKey": "repos.BitbucketServerSource.makeRepo",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketServerSource) makeRepo(repo *bitbucketserver.Repo, isArchived bool) *types.Repo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketServerSource) makeRepo(repo *bitbucketserver.Repo, isArchived bool) *types.Repo\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#CloningProgress",
              "documentation": {
                "identifier": "CloningProgress",
                "newPage": false,
                "searchKey": "repos.CloningProgress",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CloningProgress struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CloningProgress struct {\n\tMessage string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#Diff",
              "documentation": {
                "identifier": "Diff",
                "newPage": false,
                "searchKey": "repos.Diff",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Diff struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Diff struct {\n\tAdded      types.Repos\n\tDeleted    types.Repos\n\tModified   types.Repos\n\tUnmodified types.Repos\n}\n```\n\nDiff is the difference found by a sync between what is in the store and what is returned from sources. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewDiff",
                    "documentation": {
                      "identifier": "NewDiff",
                      "newPage": false,
                      "searchKey": "repos.NewDiff",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewDiff(sourced, stored []*types.Repo) (diff Diff)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewDiff(sourced, stored []*types.Repo) (diff Diff)\n```\n\nNewDiff returns a diff from the given sourced and stored repos. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#newDiff",
                    "documentation": {
                      "identifier": "newDiff",
                      "newPage": false,
                      "searchKey": "repos.newDiff",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newDiff(svc *types.ExternalService, sourced, stored []*types.Repo) (diff Diff)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newDiff(svc *types.ExternalService, sourced, stored []*types.Repo) (diff Diff)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Diff.Repos",
                    "documentation": {
                      "identifier": "Diff.Repos",
                      "newPage": false,
                      "searchKey": "repos.Diff.Repos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d Diff) Repos() types.Repos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d Diff) Repos() types.Repos\n```\n\nRepos returns all repos in the Diff. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Diff.Sort",
                    "documentation": {
                      "identifier": "Diff.Sort",
                      "newPage": false,
                      "searchKey": "repos.Diff.Sort",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Diff) Sort()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Diff) Sort()\n```\n\nSort sorts all Diff elements by Repo.IDs. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#ErrAccountSuspended",
              "documentation": {
                "identifier": "ErrAccountSuspended",
                "newPage": false,
                "searchKey": "repos.ErrAccountSuspended",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ErrAccountSuspended struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ErrAccountSuspended struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#ErrAccountSuspended.AccountSuspended",
                    "documentation": {
                      "identifier": "ErrAccountSuspended.AccountSuspended",
                      "newPage": false,
                      "searchKey": "repos.ErrAccountSuspended.AccountSuspended",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ErrAccountSuspended) AccountSuspended() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ErrAccountSuspended) AccountSuspended() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#ErrAccountSuspended.Error",
                    "documentation": {
                      "identifier": "ErrAccountSuspended.Error",
                      "newPage": false,
                      "searchKey": "repos.ErrAccountSuspended.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ErrAccountSuspended) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ErrAccountSuspended) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#ErrForbidden",
              "documentation": {
                "identifier": "ErrForbidden",
                "newPage": false,
                "searchKey": "repos.ErrForbidden",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ErrForbidden struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ErrForbidden struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#ErrForbidden.Error",
                    "documentation": {
                      "identifier": "ErrForbidden.Error",
                      "newPage": false,
                      "searchKey": "repos.ErrForbidden.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ErrForbidden) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ErrForbidden) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#ErrForbidden.Forbidden",
                    "documentation": {
                      "identifier": "ErrForbidden.Forbidden",
                      "newPage": false,
                      "searchKey": "repos.ErrForbidden.Forbidden",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ErrForbidden) Forbidden() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ErrForbidden) Forbidden() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#ErrUnauthorized",
              "documentation": {
                "identifier": "ErrUnauthorized",
                "newPage": false,
                "searchKey": "repos.ErrUnauthorized",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ErrUnauthorized struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ErrUnauthorized struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#ErrUnauthorized.Error",
                    "documentation": {
                      "identifier": "ErrUnauthorized.Error",
                      "newPage": false,
                      "searchKey": "repos.ErrUnauthorized.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ErrUnauthorized) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ErrUnauthorized) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#ErrUnauthorized.Unauthorized",
                    "documentation": {
                      "identifier": "ErrUnauthorized.Unauthorized",
                      "newPage": false,
                      "searchKey": "repos.ErrUnauthorized.Unauthorized",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ErrUnauthorized) Unauthorized() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ErrUnauthorized) Unauthorized() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#ExternalServiceSyncError",
              "documentation": {
                "identifier": "ExternalServiceSyncError",
                "newPage": false,
                "searchKey": "repos.ExternalServiceSyncError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExternalServiceSyncError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExternalServiceSyncError struct {\n\tMessage           string\n\tExternalServiceId int64\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#FakeSource",
              "documentation": {
                "identifier": "FakeSource",
                "newPage": false,
                "searchKey": "repos.FakeSource",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FakeSource struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FakeSource struct {\n\tsvc   *types.ExternalService\n\trepos []*types.Repo\n\terr   error\n}\n```\n\nFakeSource is a fake implementation of Source to be used in tests. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewFakeSource",
                    "documentation": {
                      "identifier": "NewFakeSource",
                      "newPage": false,
                      "searchKey": "repos.NewFakeSource",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewFakeSource(svc *types.ExternalService, err error, rs ...*types.Repo) *FakeSource"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewFakeSource(svc *types.ExternalService, err error, rs ...*types.Repo) *FakeSource\n```\n\nNewFakeSource returns an instance of FakeSource with the given urn, error and repos. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#FakeSource.ExternalServices",
                    "documentation": {
                      "identifier": "FakeSource.ExternalServices",
                      "newPage": false,
                      "searchKey": "repos.FakeSource.ExternalServices",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s FakeSource) ExternalServices() types.ExternalServices"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s FakeSource) ExternalServices() types.ExternalServices\n```\n\nExternalServices returns a singleton slice containing the external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#FakeSource.ListRepos",
                    "documentation": {
                      "identifier": "FakeSource.ListRepos",
                      "newPage": false,
                      "searchKey": "repos.FakeSource.ListRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s FakeSource) ListRepos(ctx context.Context, results chan SourceResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s FakeSource) ListRepos(ctx context.Context, results chan SourceResult)\n```\n\nListRepos returns the Repos that FakeSource was instantiated with as well as the error, if any. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#GitLabSource",
              "documentation": {
                "identifier": "GitLabSource",
                "newPage": false,
                "searchKey": "repos.GitLabSource",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitLabSource struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitLabSource struct {\n\tsvc                 *types.ExternalService\n\tconfig              *schema.GitLabConnection\n\texclude             excludeFunc\n\tbaseURL             *url.URL // URL with path /api/v4 (no trailing slash)\n\tnameTransformations reposource.NameTransformations\n\tprovider            *gitlab.ClientProvider\n\tclient              *gitlab.Client\n}\n```\n\nA GitLabSource yields repositories from a single GitLab connection configured in Sourcegraph via the external services configuration. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewGitLabSource",
                    "documentation": {
                      "identifier": "NewGitLabSource",
                      "newPage": false,
                      "searchKey": "repos.NewGitLabSource",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewGitLabSource(svc *types.ExternalService, cf *httpcli.Factory) (*GitLabSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewGitLabSource(svc *types.ExternalService, cf *httpcli.Factory) (*GitLabSource, error)\n```\n\nNewGitLabSource returns a new GitLabSource from the given external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#newGitLabSource",
                    "documentation": {
                      "identifier": "newGitLabSource",
                      "newPage": false,
                      "searchKey": "repos.newGitLabSource",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newGitLabSource(svc *types.ExternalService, c *schema.GitLabConnection, cf *httpcli.Factory) (*GitLabSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newGitLabSource(svc *types.ExternalService, c *schema.GitLabConnection, cf *httpcli.Factory) (*GitLabSource, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GitLabSource.AffiliatedRepositories",
                    "documentation": {
                      "identifier": "GitLabSource.AffiliatedRepositories",
                      "newPage": false,
                      "searchKey": "repos.GitLabSource.AffiliatedRepositories",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitLabSource) AffiliatedRepositories(ctx context.Context) ([]types.CodeHostRepository, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitLabSource) AffiliatedRepositories(ctx context.Context) ([]types.CodeHostRepository, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GitLabSource.ExternalServices",
                    "documentation": {
                      "identifier": "GitLabSource.ExternalServices",
                      "newPage": false,
                      "searchKey": "repos.GitLabSource.ExternalServices",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GitLabSource) ExternalServices() types.ExternalServices"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GitLabSource) ExternalServices() types.ExternalServices\n```\n\nExternalServices returns a singleton slice containing the external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GitLabSource.GetRepo",
                    "documentation": {
                      "identifier": "GitLabSource.GetRepo",
                      "newPage": false,
                      "searchKey": "repos.GitLabSource.GetRepo",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GitLabSource) GetRepo(ctx context.Context, pathWithNamespace string) (*types.Repo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GitLabSource) GetRepo(ctx context.Context, pathWithNamespace string) (*types.Repo, error)\n```\n\nGetRepo returns the GitLab repository with the given pathWithNamespace. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GitLabSource.ListRepos",
                    "documentation": {
                      "identifier": "GitLabSource.ListRepos",
                      "newPage": false,
                      "searchKey": "repos.GitLabSource.ListRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GitLabSource) ListRepos(ctx context.Context, results chan SourceResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GitLabSource) ListRepos(ctx context.Context, results chan SourceResult)\n```\n\nListRepos returns all GitLab repositories accessible to all connections configured in Sourcegraph via the external services configuration. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GitLabSource.ValidateAuthenticator",
                    "documentation": {
                      "identifier": "GitLabSource.ValidateAuthenticator",
                      "newPage": false,
                      "searchKey": "repos.GitLabSource.ValidateAuthenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GitLabSource) ValidateAuthenticator(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GitLabSource) ValidateAuthenticator(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GitLabSource.WithAuthenticator",
                    "documentation": {
                      "identifier": "GitLabSource.WithAuthenticator",
                      "newPage": false,
                      "searchKey": "repos.GitLabSource.WithAuthenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GitLabSource) WithAuthenticator(a auth.Authenticator) (Source, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GitLabSource) WithAuthenticator(a auth.Authenticator) (Source, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GitLabSource.excludes",
                    "documentation": {
                      "identifier": "GitLabSource.excludes",
                      "newPage": false,
                      "searchKey": "repos.GitLabSource.excludes",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitLabSource) excludes(p *gitlab.Project) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitLabSource) excludes(p *gitlab.Project) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GitLabSource.listAllProjects",
                    "documentation": {
                      "identifier": "GitLabSource.listAllProjects",
                      "newPage": false,
                      "searchKey": "repos.GitLabSource.listAllProjects",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitLabSource) listAllProjects(ctx context.Context, results chan SourceResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitLabSource) listAllProjects(ctx context.Context, results chan SourceResult)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GitLabSource.makeRepo",
                    "documentation": {
                      "identifier": "GitLabSource.makeRepo",
                      "newPage": false,
                      "searchKey": "repos.GitLabSource.makeRepo",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GitLabSource) makeRepo(proj *gitlab.Project) *types.Repo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GitLabSource) makeRepo(proj *gitlab.Project) *types.Repo\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GitLabSource.remoteURL",
                    "documentation": {
                      "identifier": "GitLabSource.remoteURL",
                      "newPage": false,
                      "searchKey": "repos.GitLabSource.remoteURL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitLabSource) remoteURL(proj *gitlab.Project) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitLabSource) remoteURL(proj *gitlab.Project) string\n```\n\nremoteURL returns the GitLab projects's Git remote URL \n\nnote: this used to contain credentials but that is no longer the case if you need to get an authenticated clone url use repos.CloneURL \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#GithubSource",
              "documentation": {
                "identifier": "GithubSource",
                "newPage": false,
                "searchKey": "repos.GithubSource",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GithubSource struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GithubSource struct {\n\tsvc             *types.ExternalService\n\tconfig          *schema.GitHubConnection\n\texclude         excludeFunc\n\texcludeArchived bool\n\texcludeForks    bool\n\tgithubDotCom    bool\n\tbaseURL         *url.URL\n\tv3Client        *github.V3Client\n\tv4Client        *github.V4Client\n\t// searchClient is for using the GitHub search API, which has an independent\n\t// rate limit much lower than non-search API requests.\n\tsearchClient *github.V3Client\n\n\t// originalHostname is the hostname of config.Url (differs from client APIURL, whose host is api.github.com\n\t// for an originalHostname of github.com).\n\toriginalHostname string\n}\n```\n\nA GithubSource yields repositories from a single Github connection configured in Sourcegraph via the external services configuration. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewGithubSource",
                    "documentation": {
                      "identifier": "NewGithubSource",
                      "newPage": false,
                      "searchKey": "repos.NewGithubSource",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewGithubSource(svc *types.ExternalService, cf *httpcli.Factory) (*GithubSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewGithubSource(svc *types.ExternalService, cf *httpcli.Factory) (*GithubSource, error)\n```\n\nNewGithubSource returns a new GithubSource from the given external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#newGithubSource",
                    "documentation": {
                      "identifier": "newGithubSource",
                      "newPage": false,
                      "searchKey": "repos.newGithubSource",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newGithubSource(svc *types.ExternalService, c *schema.GitHubConnection, cf *httpcli.Factory) (*GithubSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newGithubSource(svc *types.ExternalService, c *schema.GitHubConnection, cf *httpcli.Factory) (*GithubSource, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.AffiliatedRepositories",
                    "documentation": {
                      "identifier": "GithubSource.AffiliatedRepositories",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.AffiliatedRepositories",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GithubSource) AffiliatedRepositories(ctx context.Context) ([]types.CodeHostRepository, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GithubSource) AffiliatedRepositories(ctx context.Context) ([]types.CodeHostRepository, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.ExternalServices",
                    "documentation": {
                      "identifier": "GithubSource.ExternalServices",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.ExternalServices",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) ExternalServices() types.ExternalServices"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) ExternalServices() types.ExternalServices\n```\n\nExternalServices returns a singleton slice containing the external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.GetRepo",
                    "documentation": {
                      "identifier": "GithubSource.GetRepo",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.GetRepo",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) GetRepo(ctx context.Context, nameWithOwner string) (*types.Repo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) GetRepo(ctx context.Context, nameWithOwner string) (*types.Repo, error)\n```\n\nGetRepo returns the Github repository with the given name and owner (\"org/repo-name\") \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.ListRepos",
                    "documentation": {
                      "identifier": "GithubSource.ListRepos",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.ListRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) ListRepos(ctx context.Context, results chan SourceResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) ListRepos(ctx context.Context, results chan SourceResult)\n```\n\nListRepos returns all Github repositories accessible to all connections configured in Sourcegraph via the external services configuration. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.ValidateAuthenticator",
                    "documentation": {
                      "identifier": "GithubSource.ValidateAuthenticator",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.ValidateAuthenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) ValidateAuthenticator(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) ValidateAuthenticator(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.WithAuthenticator",
                    "documentation": {
                      "identifier": "GithubSource.WithAuthenticator",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.WithAuthenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) WithAuthenticator(a auth.Authenticator) (Source, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) WithAuthenticator(a auth.Authenticator) (Source, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.excludes",
                    "documentation": {
                      "identifier": "GithubSource.excludes",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.excludes",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GithubSource) excludes(r *github.Repository) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GithubSource) excludes(r *github.Repository) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.fetchAllRepositoriesInBatches",
                    "documentation": {
                      "identifier": "GithubSource.fetchAllRepositoriesInBatches",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.fetchAllRepositoriesInBatches",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GithubSource) fetchAllRepositoriesInBatches(ctx context.Context, results chan *githubResult) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GithubSource) fetchAllRepositoriesInBatches(ctx context.Context, results chan *githubResult) error\n```\n\nfetchAllRepositoriesInBatches fetches the repositories configured in config.Repos in batches and adds them to the supplied set \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.getRepository",
                    "documentation": {
                      "identifier": "GithubSource.getRepository",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.getRepository",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GithubSource) getRepository(ctx context.Context, nameWithOwner string) (*github.Repository, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GithubSource) getRepository(ctx context.Context, nameWithOwner string) (*github.Repository, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.listAffiliated",
                    "documentation": {
                      "identifier": "GithubSource.listAffiliated",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.listAffiliated",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GithubSource) listAffiliated(ctx context.Context, results chan *githubResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GithubSource) listAffiliated(ctx context.Context, results chan *githubResult)\n```\n\nlistAffiliated handles the `affiliated` keyword of the `repositoryQuery` config option. It returns the repositories affiliated with the client token by hitting the /user/repos endpoint. \n\nAffiliation is present if the user: (1) owns the repo, (2) is apart of an org that the repo belongs to, or (3) is a collaborator. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.listAllRepositories",
                    "documentation": {
                      "identifier": "GithubSource.listAllRepositories",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.listAllRepositories",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GithubSource) listAllRepositories(ctx context.Context, results chan *githubResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GithubSource) listAllRepositories(ctx context.Context, results chan *githubResult)\n```\n\nlistAllRepositories returns the repositories from the given `orgs`, `repos`, and `repositoryQuery` config options excluding the ones specified by `exclude`. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.listOrg",
                    "documentation": {
                      "identifier": "GithubSource.listOrg",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.listOrg",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GithubSource) listOrg(ctx context.Context, org string, results chan *githubResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GithubSource) listOrg(ctx context.Context, org string, results chan *githubResult)\n```\n\nlistOrg handles the `org` config option. It returns all the repositories belonging to the given organization by hitting the /orgs/:org/repos endpoint. \n\nIt returns an error if the request fails on the first page. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.listPublic",
                    "documentation": {
                      "identifier": "GithubSource.listPublic",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.listPublic",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GithubSource) listPublic(ctx context.Context, results chan *githubResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GithubSource) listPublic(ctx context.Context, results chan *githubResult)\n```\n\nlistPublic handles the `public` keyword of the `repositoryQuery` config option. It returns the public repositories listed on the /repositories endpoint. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.listRepos",
                    "documentation": {
                      "identifier": "GithubSource.listRepos",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.listRepos",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GithubSource) listRepos(ctx context.Context, repos []string, results chan *githubResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GithubSource) listRepos(ctx context.Context, repos []string, results chan *githubResult)\n```\n\nlistRepos returns the valid repositories from the given list of repository names. This is done by hitting the /repos/:owner/:name endpoint for each of the given repository names. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.listRepositoryQuery",
                    "documentation": {
                      "identifier": "GithubSource.listRepositoryQuery",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.listRepositoryQuery",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GithubSource) listRepositoryQuery(ctx context.Context, query string, results chan *githubResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GithubSource) listRepositoryQuery(ctx context.Context, query string, results chan *githubResult)\n```\n\nlistRepositoryQuery handles the `repositoryQuery` config option. The supported keywords to select repositories are: - `public`: public repositories (from endpoint: /repositories) - `affiliated`: repositories affiliated with client token (from endpoint: /user/repos) - `none`: disables `repositoryQuery` Inputs other than these three keywords will be queried using GitHub advanced repository search (endpoint: /search/repositories) \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.listSearch",
                    "documentation": {
                      "identifier": "GithubSource.listSearch",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.listSearch",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GithubSource) listSearch(ctx context.Context, query string, results chan *githubResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GithubSource) listSearch(ctx context.Context, query string, results chan *githubResult)\n```\n\nlistSearch handles the `repositoryQuery` config option when a keyword is not present. It returns the repositories resulting from from GitHub's advanced repository search by hitting the /search/repositories endpoint. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.listUser",
                    "documentation": {
                      "identifier": "GithubSource.listUser",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.listUser",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GithubSource) listUser(ctx context.Context, user string, results chan *githubResult) (fail error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GithubSource) listUser(ctx context.Context, user string, results chan *githubResult) (fail error)\n```\n\nlistUser returns all the repositories belonging to the given user by hitting the /users/:user/repos endpoint. \n\nIt returns an error if the request fails on the first page. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.makeRepo",
                    "documentation": {
                      "identifier": "GithubSource.makeRepo",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.makeRepo",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) makeRepo(r *github.Repository) *types.Repo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) makeRepo(r *github.Repository) *types.Repo\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.paginate",
                    "documentation": {
                      "identifier": "GithubSource.paginate",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.paginate",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GithubSource) paginate(ctx context.Context, results chan *githubResult, pager repositoryPager)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GithubSource) paginate(ctx context.Context, results chan *githubResult, pager repositoryPager)\n```\n\npaginate returns all the repositories from the given repositoryPager. It repeatedly calls `pager` with incrementing page count until it returns false for hasNext. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GithubSource.remoteURL",
                    "documentation": {
                      "identifier": "GithubSource.remoteURL",
                      "newPage": false,
                      "searchKey": "repos.GithubSource.remoteURL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GithubSource) remoteURL(repo *github.Repository) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GithubSource) remoteURL(repo *github.Repository) string\n```\n\nremoteURL returns the repository's Git remote URL \n\nnote: this used to contain credentials but that is no longer the case if you need to get an authenticated clone url use repos.CloneURL \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#GitolitePhabricatorMetadataSyncer",
              "documentation": {
                "identifier": "GitolitePhabricatorMetadataSyncer",
                "newPage": false,
                "searchKey": "repos.GitolitePhabricatorMetadataSyncer",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitolitePhabricatorMetadataSyncer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitolitePhabricatorMetadataSyncer struct {\n\tsem     *semaphore.Weighted // Only one sync at a time, like it was done before.\n\tcounter int64               // Only sync every 10th time, like it was done before.\n\tstore   *Store              // Use to load the external services that yielded a given repo.\n}\n```\n\nGitolitePhabricatorMetadataSyncer creates Phabricator repos (in the phabricator_repo table) for each Gitolite repo provided in it's Sync method. This is to satisfy the contract established by the \"phabricator\" setting in the Gitolite external service configuration. \n\nTODO(tsenart): This is a HUGE hack, but it lives to see another day. Erradicating this technical debt involves lifting the Phabricator integration to a first class citizen, so that it can be treated as source of truth for repos to be mirrored. This would allow using a Phabricator integration that observes another code host, like Gitolite, and provides URIs to those external code hosts that git-server can use as clone URLs, while repo links can still be the built-in Phabricator ones, as is usually expected by customers that rely on code intelligence. With a Phabricator integration similar to all other code hosts, we could remove all of the special code paths for Phabricator everywhere as well as the `phabricator_repo` table. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewGitolitePhabricatorMetadataSyncer",
                    "documentation": {
                      "identifier": "NewGitolitePhabricatorMetadataSyncer",
                      "newPage": false,
                      "searchKey": "repos.NewGitolitePhabricatorMetadataSyncer",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewGitolitePhabricatorMetadataSyncer(s *Store) *GitolitePhabricatorMetadataSyncer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewGitolitePhabricatorMetadataSyncer(s *Store) *GitolitePhabricatorMetadataSyncer\n```\n\nNewGitolitePhabricatorMetadataSyncer returns a GitolitePhabricatorMetadataSyncer with the given parameters. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GitolitePhabricatorMetadataSyncer.Sync",
                    "documentation": {
                      "identifier": "GitolitePhabricatorMetadataSyncer.Sync",
                      "newPage": false,
                      "searchKey": "repos.GitolitePhabricatorMetadataSyncer.Sync",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitolitePhabricatorMetadataSyncer) Sync(ctx context.Context, repos []*types.Repo) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitolitePhabricatorMetadataSyncer) Sync(ctx context.Context, repos []*types.Repo) error\n```\n\nSync creates Phabricator repos for each of the given Gitolite repos. If this is confusing to you, that's because it is. Read the comment on the GitolitePhabricatorMetadataSyncer type. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#GitoliteSource",
              "documentation": {
                "identifier": "GitoliteSource",
                "newPage": false,
                "searchKey": "repos.GitoliteSource",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitoliteSource struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitoliteSource struct {\n\tsvc  *types.ExternalService\n\tconn *schema.GitoliteConnection\n\t// We ask gitserver to talk to gitolite because it holds the ssh keys\n\t// required for authentication.\n\tcli     *gitserver.Client\n\texclude excludeFunc\n}\n```\n\nA GitoliteSource yields repositories from a single Gitolite connection configured in Sourcegraph via the external services configuration. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewGitoliteSource",
                    "documentation": {
                      "identifier": "NewGitoliteSource",
                      "newPage": false,
                      "searchKey": "repos.NewGitoliteSource",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewGitoliteSource(svc *types.ExternalService, cf *httpcli.Factory) (*GitoliteSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewGitoliteSource(svc *types.ExternalService, cf *httpcli.Factory) (*GitoliteSource, error)\n```\n\nNewGitoliteSource returns a new GitoliteSource from the given external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GitoliteSource.ExternalServices",
                    "documentation": {
                      "identifier": "GitoliteSource.ExternalServices",
                      "newPage": false,
                      "searchKey": "repos.GitoliteSource.ExternalServices",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GitoliteSource) ExternalServices() types.ExternalServices"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GitoliteSource) ExternalServices() types.ExternalServices\n```\n\nExternalServices returns a singleton slice containing the external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GitoliteSource.ListRepos",
                    "documentation": {
                      "identifier": "GitoliteSource.ListRepos",
                      "newPage": false,
                      "searchKey": "repos.GitoliteSource.ListRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitoliteSource) ListRepos(ctx context.Context, results chan SourceResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitoliteSource) ListRepos(ctx context.Context, results chan SourceResult)\n```\n\nListRepos returns all Gitolite repositories accessible to all connections configured in Sourcegraph via the external services configuration. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GitoliteSource.excludes",
                    "documentation": {
                      "identifier": "GitoliteSource.excludes",
                      "newPage": false,
                      "searchKey": "repos.GitoliteSource.excludes",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GitoliteSource) excludes(gr *gitolite.Repo, r *types.Repo) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GitoliteSource) excludes(gr *gitolite.Repo, r *types.Repo) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#GitoliteSource.makeRepo",
                    "documentation": {
                      "identifier": "GitoliteSource.makeRepo",
                      "newPage": false,
                      "searchKey": "repos.GitoliteSource.makeRepo",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GitoliteSource) makeRepo(repo *gitolite.Repo) *types.Repo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GitoliteSource) makeRepo(repo *gitolite.Repo) *types.Repo\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#IndexingProgress",
              "documentation": {
                "identifier": "IndexingProgress",
                "newPage": false,
                "searchKey": "repos.IndexingProgress",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexingProgress struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexingProgress struct {\n\tMessage string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#MockExternalServicesLister",
              "documentation": {
                "identifier": "MockExternalServicesLister",
                "newPage": false,
                "searchKey": "repos.MockExternalServicesLister",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockExternalServicesLister struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockExternalServicesLister struct {\n\tlist func(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error)\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#MockExternalServicesLister.List",
                    "documentation": {
                      "identifier": "MockExternalServicesLister.List",
                      "newPage": false,
                      "searchKey": "repos.MockExternalServicesLister.List",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m MockExternalServicesLister) List(ctx context.Context, args database.ExternalServicesListOptions) ([]*types.ExternalService, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m MockExternalServicesLister) List(ctx context.Context, args database.ExternalServicesListOptions) ([]*types.ExternalService, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#MockStore",
              "documentation": {
                "identifier": "MockStore",
                "newPage": false,
                "searchKey": "repos.MockStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockStore struct {\n\tUpsertRepos func(ctx context.Context, repos ...*types.Repo) (err error)\n}\n```\n\nMockStore is used to mock calls to certain DBStore methods. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#OtherSource",
              "documentation": {
                "identifier": "OtherSource",
                "newPage": false,
                "searchKey": "repos.OtherSource",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OtherSource struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OtherSource struct {\n\tsvc    *types.ExternalService\n\tconn   *schema.OtherExternalServiceConnection\n\tclient httpcli.Doer\n}\n```\n\nA OtherSource yields repositories from a single Other connection configured in Sourcegraph via the external services configuration. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewOtherSource",
                    "documentation": {
                      "identifier": "NewOtherSource",
                      "newPage": false,
                      "searchKey": "repos.NewOtherSource",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewOtherSource(svc *types.ExternalService, cf *httpcli.Factory) (*OtherSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewOtherSource(svc *types.ExternalService, cf *httpcli.Factory) (*OtherSource, error)\n```\n\nNewOtherSource returns a new OtherSource from the given external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#OtherSource.ExternalServices",
                    "documentation": {
                      "identifier": "OtherSource.ExternalServices",
                      "newPage": false,
                      "searchKey": "repos.OtherSource.ExternalServices",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s OtherSource) ExternalServices() types.ExternalServices"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s OtherSource) ExternalServices() types.ExternalServices\n```\n\nExternalServices returns a singleton slice containing the external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#OtherSource.ListRepos",
                    "documentation": {
                      "identifier": "OtherSource.ListRepos",
                      "newPage": false,
                      "searchKey": "repos.OtherSource.ListRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s OtherSource) ListRepos(ctx context.Context, results chan SourceResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s OtherSource) ListRepos(ctx context.Context, results chan SourceResult)\n```\n\nListRepos returns all Other repositories accessible to all connections configured in Sourcegraph via the external services configuration. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#OtherSource.cloneURLs",
                    "documentation": {
                      "identifier": "OtherSource.cloneURLs",
                      "newPage": false,
                      "searchKey": "repos.OtherSource.cloneURLs",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s OtherSource) cloneURLs() ([]*url.URL, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s OtherSource) cloneURLs() ([]*url.URL, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#OtherSource.otherRepoFromCloneURL",
                    "documentation": {
                      "identifier": "OtherSource.otherRepoFromCloneURL",
                      "newPage": false,
                      "searchKey": "repos.OtherSource.otherRepoFromCloneURL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s OtherSource) otherRepoFromCloneURL(urn string, u *url.URL) (*types.Repo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s OtherSource) otherRepoFromCloneURL(urn string, u *url.URL) (*types.Repo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#OtherSource.srcExpose",
                    "documentation": {
                      "identifier": "OtherSource.srcExpose",
                      "newPage": false,
                      "searchKey": "repos.OtherSource.srcExpose",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s OtherSource) srcExpose(ctx context.Context) ([]*types.Repo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s OtherSource) srcExpose(ctx context.Context) ([]*types.Repo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#PerforceSource",
              "documentation": {
                "identifier": "PerforceSource",
                "newPage": false,
                "searchKey": "repos.PerforceSource",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PerforceSource struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PerforceSource struct {\n\tsvc    *types.ExternalService\n\tconfig *schema.PerforceConnection\n}\n```\n\nA PerforceSource yields depots from a single Perforce connection configured in Sourcegraph via the external services configuration. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewPerforceSource",
                    "documentation": {
                      "identifier": "NewPerforceSource",
                      "newPage": false,
                      "searchKey": "repos.NewPerforceSource",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewPerforceSource(svc *types.ExternalService) (*PerforceSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewPerforceSource(svc *types.ExternalService) (*PerforceSource, error)\n```\n\nNewPerforceSource returns a new PerforceSource from the given external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#newPerforceSource",
                    "documentation": {
                      "identifier": "newPerforceSource",
                      "newPage": false,
                      "searchKey": "repos.newPerforceSource",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newPerforceSource(svc *types.ExternalService, c *schema.PerforceConnection) (*PerforceSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newPerforceSource(svc *types.ExternalService, c *schema.PerforceConnection) (*PerforceSource, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#PerforceSource.ExternalServices",
                    "documentation": {
                      "identifier": "PerforceSource.ExternalServices",
                      "newPage": false,
                      "searchKey": "repos.PerforceSource.ExternalServices",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s PerforceSource) ExternalServices() types.ExternalServices"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s PerforceSource) ExternalServices() types.ExternalServices\n```\n\nExternalServices returns a singleton slice containing the external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#PerforceSource.ListRepos",
                    "documentation": {
                      "identifier": "PerforceSource.ListRepos",
                      "newPage": false,
                      "searchKey": "repos.PerforceSource.ListRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s PerforceSource) ListRepos(ctx context.Context, results chan SourceResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s PerforceSource) ListRepos(ctx context.Context, results chan SourceResult)\n```\n\nListRepos returns all Perforce depots accessible to all connections configured in Sourcegraph via the external services configuration. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#PerforceSource.makeRepo",
                    "documentation": {
                      "identifier": "PerforceSource.makeRepo",
                      "newPage": false,
                      "searchKey": "repos.PerforceSource.makeRepo",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s PerforceSource) makeRepo(depot string) *types.Repo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s PerforceSource) makeRepo(depot string) *types.Repo\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#PhabricatorSource",
              "documentation": {
                "identifier": "PhabricatorSource",
                "newPage": false,
                "searchKey": "repos.PhabricatorSource",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PhabricatorSource struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PhabricatorSource struct {\n\tsvc  *types.ExternalService\n\tconn *schema.PhabricatorConnection\n\tcf   *httpcli.Factory\n\n\tmu  sync.Mutex\n\tcli *phabricator.Client\n}\n```\n\nA PhabricatorSource yields repositories from a single Phabricator connection configured in Sourcegraph via the external services configuration. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewPhabricatorSource",
                    "documentation": {
                      "identifier": "NewPhabricatorSource",
                      "newPage": false,
                      "searchKey": "repos.NewPhabricatorSource",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewPhabricatorSource(svc *types.ExternalService, cf *httpcli.Factory) (*PhabricatorSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewPhabricatorSource(svc *types.ExternalService, cf *httpcli.Factory) (*PhabricatorSource, error)\n```\n\nNewPhabricatorSource returns a new PhabricatorSource from the given external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#PhabricatorSource.ExternalServices",
                    "documentation": {
                      "identifier": "PhabricatorSource.ExternalServices",
                      "newPage": false,
                      "searchKey": "repos.PhabricatorSource.ExternalServices",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PhabricatorSource) ExternalServices() types.ExternalServices"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PhabricatorSource) ExternalServices() types.ExternalServices\n```\n\nExternalServices returns a singleton slice containing the external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#PhabricatorSource.ListRepos",
                    "documentation": {
                      "identifier": "PhabricatorSource.ListRepos",
                      "newPage": false,
                      "searchKey": "repos.PhabricatorSource.ListRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PhabricatorSource) ListRepos(ctx context.Context, results chan SourceResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PhabricatorSource) ListRepos(ctx context.Context, results chan SourceResult)\n```\n\nListRepos returns all Phabricator repositories accessible to all connections configured in Sourcegraph via the external services configuration. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#PhabricatorSource.client",
                    "documentation": {
                      "identifier": "PhabricatorSource.client",
                      "newPage": false,
                      "searchKey": "repos.PhabricatorSource.client",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PhabricatorSource) client(ctx context.Context) (*phabricator.Client, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PhabricatorSource) client(ctx context.Context) (*phabricator.Client, error)\n```\n\nclient initialises the phabricator.Client if it isn't initialised yet. This is done lazily instead of in NewPhabricatorSource so that we have access to the context.Context passed in via ListRepos. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#PhabricatorSource.makeRepo",
                    "documentation": {
                      "identifier": "PhabricatorSource.makeRepo",
                      "newPage": false,
                      "searchKey": "repos.PhabricatorSource.makeRepo",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PhabricatorSource) makeRepo(repo *phabricator.Repo) (*types.Repo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PhabricatorSource) makeRepo(repo *phabricator.Repo) (*types.Repo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#RateLimitSyncer",
              "documentation": {
                "identifier": "RateLimitSyncer",
                "newPage": false,
                "searchKey": "repos.RateLimitSyncer",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RateLimitSyncer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RateLimitSyncer struct {\n\tregistry      *ratelimit.Registry\n\tserviceLister externalServiceLister\n\t// How many services to fetch in each DB call\n\tlimit int64\n}\n```\n\nRateLimitSyncer syncs rate limits based on external service configuration \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewRateLimitSyncer",
                    "documentation": {
                      "identifier": "NewRateLimitSyncer",
                      "newPage": false,
                      "searchKey": "repos.NewRateLimitSyncer",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewRateLimitSyncer(registry *ratelimit.Registry, serviceLister externalServiceLister) *RateLimitSyncer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewRateLimitSyncer(registry *ratelimit.Registry, serviceLister externalServiceLister) *RateLimitSyncer\n```\n\nNewRateLimitSyncer returns a new syncer \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#RateLimitSyncer.SyncRateLimiters",
                    "documentation": {
                      "identifier": "RateLimitSyncer.SyncRateLimiters",
                      "newPage": false,
                      "searchKey": "repos.RateLimitSyncer.SyncRateLimiters",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RateLimitSyncer) SyncRateLimiters(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RateLimitSyncer) SyncRateLimiters(ctx context.Context) error\n```\n\nSyncRateLimiters syncs all rate limiters using current config. We sync them all as we need to pick the most restrictive configured limit per code host and rate limits can be defined in multiple external services for the same host. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#RunOptions",
              "documentation": {
                "identifier": "RunOptions",
                "newPage": false,
                "searchKey": "repos.RunOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RunOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RunOptions struct {\n\tEnqueueInterval func() time.Duration // Defaults to 1 minute\n\tIsCloud         bool                 // Defaults to false\n\tMinSyncInterval func() time.Duration // Defaults to 1 minute\n\tDequeueInterval time.Duration        // Default to 10 seconds\n}\n```\n\nRunOptions contains options customizing Run behaviour. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#ScopeCache",
              "documentation": {
                "identifier": "ScopeCache",
                "newPage": false,
                "searchKey": "repos.ScopeCache",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ScopeCache interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ScopeCache interface {\n\tGet(string) ([]byte, bool)\n\tSet(string, []byte)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#Source",
              "documentation": {
                "identifier": "Source",
                "newPage": false,
                "searchKey": "repos.Source",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Source interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Source interface {\n\t// ListRepos sends all the repos a source yields over the passed in channel\n\t// as SourceResults\n\tListRepos(context.Context, chan SourceResult)\n\t// ExternalServices returns the ExternalServices for the Source.\n\tExternalServices() types.ExternalServices\n}\n```\n\nA Source yields repositories to be stored and analysed by Sourcegraph. Successive calls to its ListRepos method may yield different results. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewSource",
                    "documentation": {
                      "identifier": "NewSource",
                      "newPage": false,
                      "searchKey": "repos.NewSource",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewSource(svc *types.ExternalService, cf *httpcli.Factory) (Source, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewSource(svc *types.ExternalService, cf *httpcli.Factory) (Source, error)\n```\n\nNewSource returns a repository yielding Source from the given ExternalService configuration. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#SourceError",
              "documentation": {
                "identifier": "SourceError",
                "newPage": false,
                "searchKey": "repos.SourceError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SourceError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SourceError struct {\n\tErr    error\n\tExtSvc *types.ExternalService\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#SourceError.Cause",
                    "documentation": {
                      "identifier": "SourceError.Cause",
                      "newPage": false,
                      "searchKey": "repos.SourceError.Cause",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SourceError) Cause() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SourceError) Cause() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#SourceError.Error",
                    "documentation": {
                      "identifier": "SourceError.Error",
                      "newPage": false,
                      "searchKey": "repos.SourceError.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SourceError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SourceError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#SourceMetrics",
              "documentation": {
                "identifier": "SourceMetrics",
                "newPage": false,
                "searchKey": "repos.SourceMetrics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SourceMetrics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SourceMetrics struct {\n\tListRepos *metrics.OperationMetrics\n}\n```\n\nSourceMetrics encapsulates the Prometheus metrics of a Source. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewSourceMetrics",
                    "documentation": {
                      "identifier": "NewSourceMetrics",
                      "newPage": false,
                      "searchKey": "repos.NewSourceMetrics",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewSourceMetrics() SourceMetrics"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewSourceMetrics() SourceMetrics\n```\n\nNewSourceMetrics returns SourceMetrics that need to be registered in a Prometheus registry. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#SourceMetrics.MustRegister",
                    "documentation": {
                      "identifier": "SourceMetrics.MustRegister",
                      "newPage": false,
                      "searchKey": "repos.SourceMetrics.MustRegister",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sm SourceMetrics) MustRegister(r prometheus.Registerer)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sm SourceMetrics) MustRegister(r prometheus.Registerer)\n```\n\nMustRegister registers all metrics in SourceMetrics in the given prometheus.Registerer. It panics in case of failure. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#SourceResult",
              "documentation": {
                "identifier": "SourceResult",
                "newPage": false,
                "searchKey": "repos.SourceResult",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SourceResult struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SourceResult struct {\n\t// Source points to the Source that produced this result\n\tSource Source\n\t// Repo is the repository that was listed by the Source\n\tRepo *types.Repo\n\t// Err is only set in case the Source ran into an error when listing repositories\n\tErr error\n}\n```\n\nA SourceResult is sent by a Source over a channel for each repository it yields when listing repositories \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#Sourcer",
              "documentation": {
                "identifier": "Sourcer",
                "newPage": false,
                "searchKey": "repos.Sourcer",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Sourcer func(...*github.com/sourcegraph/sourcegraph/internal/types.ExternalService) (github.com/sourcegraph/sourcegraph/internal/repos.Sources, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Sourcer func(...*types.ExternalService) (Sources, error)\n```\n\nA Sourcer converts the given ExternalServices to Sources whose yielded Repos should be synced. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewFakeSourcer",
                    "documentation": {
                      "identifier": "NewFakeSourcer",
                      "newPage": false,
                      "searchKey": "repos.NewFakeSourcer",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewFakeSourcer(err error, srcs ...Source) Sourcer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewFakeSourcer(err error, srcs ...Source) Sourcer\n```\n\nNewFakeSourcer returns a Sourcer which always returns the given error and sources, ignoring the given external services. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#NewSourcer",
                    "documentation": {
                      "identifier": "NewSourcer",
                      "newPage": false,
                      "searchKey": "repos.NewSourcer",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewSourcer(cf *httpcli.Factory, decs ...func(Source) Source) Sourcer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewSourcer(cf *httpcli.Factory, decs ...func(Source) Source) Sourcer\n```\n\nNewSourcer returns a Sourcer that converts the given ExternalServices into Sources that use the provided httpcli.Factory to create the http.Clients needed to contact the respective upstream code host APIs. \n\nDeleted external services are ignored. \n\nThe provided decorator functions will be applied to each Source. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#Sources",
              "documentation": {
                "identifier": "Sources",
                "newPage": false,
                "searchKey": "repos.Sources",
                "tags": [
                  "array",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Sources []repos.Source"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Sources []Source\n```\n\nSources is a list of Sources that implements the Source interface. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#Sources.ExternalServices",
                    "documentation": {
                      "identifier": "Sources.ExternalServices",
                      "newPage": false,
                      "searchKey": "repos.Sources.ExternalServices",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (srcs Sources) ExternalServices() types.ExternalServices"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (srcs Sources) ExternalServices() types.ExternalServices\n```\n\nExternalServices returns the ExternalServices from the given Sources. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Sources.ListRepos",
                    "documentation": {
                      "identifier": "Sources.ListRepos",
                      "newPage": false,
                      "searchKey": "repos.Sources.ListRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (srcs Sources) ListRepos(ctx context.Context, results chan SourceResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (srcs Sources) ListRepos(ctx context.Context, results chan SourceResult)\n```\n\nListRepos lists all the repos of all the sources and returns the aggregate result. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Sources.Sources",
                    "documentation": {
                      "identifier": "Sources.Sources",
                      "newPage": false,
                      "searchKey": "repos.Sources.Sources",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (srcs Sources) Sources() []Source"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (srcs Sources) Sources() []Source\n```\n\nSources returns the underlying Sources. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#StatusMessage",
              "documentation": {
                "identifier": "StatusMessage",
                "newPage": false,
                "searchKey": "repos.StatusMessage",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type StatusMessage struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype StatusMessage struct {\n\tCloning                  *CloningProgress          `json:\"cloning\"`\n\tIndexing                 *IndexingProgress         `json:\"indexing\"`\n\tExternalServiceSyncError *ExternalServiceSyncError `json:\"external_service_sync_error\"`\n\tSyncError                *SyncError                `json:\"sync_error\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#Store",
              "documentation": {
                "identifier": "Store",
                "newPage": false,
                "searchKey": "repos.Store",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Store struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Store struct {\n\t*basestore.Store\n\n\t// Logger used by the store. Defaults to log15.Root().\n\tLog logging.ErrorLogger\n\t// Metrics are sent to Prometheus by default.\n\tMetrics StoreMetrics\n\t// Used for tracing calls to store methods. Uses opentracing.GlobalTracer() by default.\n\tTracer trace.Tracer\n\t// RepoStore is a database.RepoStore using the same database handle.\n\tRepoStore *database.RepoStore\n\t// ExternalServiceStore is a database.ExternalServiceStore using the same database handle.\n\tExternalServiceStore *database.ExternalServiceStore\n\t// Used to mock calls to certain methods.\n\tMocks MockStore\n\n\ttxtrace *trace.Trace\n\ttxctx   context.Context\n}\n```\n\nA Store exposes methods to read and write repos and external services. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewStore",
                    "documentation": {
                      "identifier": "NewStore",
                      "newPage": false,
                      "searchKey": "repos.NewStore",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewStore(db dbutil.DB, txOpts sql.TxOptions) *Store"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewStore(db dbutil.DB, txOpts sql.TxOptions) *Store\n```\n\nNewStore instantiates and returns a new DBStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Store.CountUserAddedRepos",
                    "documentation": {
                      "identifier": "Store.CountUserAddedRepos",
                      "newPage": false,
                      "searchKey": "repos.Store.CountUserAddedRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) CountUserAddedRepos(ctx context.Context) (count uint64, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) CountUserAddedRepos(ctx context.Context) (count uint64, err error)\n```\n\nCountUserAddedRepos counts the total number of repos that have been added by user owned external services. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Store.Done",
                    "documentation": {
                      "identifier": "Store.Done",
                      "newPage": false,
                      "searchKey": "repos.Store.Done",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) Done(err error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) Done(err error) error\n```\n\nDone calls into the inner Store Done method. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Store.EnqueueSingleSyncJob",
                    "documentation": {
                      "identifier": "Store.EnqueueSingleSyncJob",
                      "newPage": false,
                      "searchKey": "repos.Store.EnqueueSingleSyncJob",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) EnqueueSingleSyncJob(ctx context.Context, id int64) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) EnqueueSingleSyncJob(ctx context.Context, id int64) (err error)\n```\n\nEnqueueSingleSyncJob enqueues a single sync job for the given external service if it is not already queued or processing. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Store.EnqueueSyncJobs",
                    "documentation": {
                      "identifier": "Store.EnqueueSyncJobs",
                      "newPage": false,
                      "searchKey": "repos.Store.EnqueueSyncJobs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) EnqueueSyncJobs(ctx context.Context, isCloud bool) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) EnqueueSyncJobs(ctx context.Context, isCloud bool) (err error)\n```\n\nEnqueueSyncJobs enqueues sync jobs for all external services that are due. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Store.ListExternalRepoSpecs",
                    "documentation": {
                      "identifier": "Store.ListExternalRepoSpecs",
                      "newPage": false,
                      "searchKey": "repos.Store.ListExternalRepoSpecs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) ListExternalRepoSpecs(ctx context.Context) (ids map[api.ExternalRepoSpec]struct{}, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) ListExternalRepoSpecs(ctx context.Context) (ids map[api.ExternalRepoSpec]struct{}, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Store.ListSyncJobs",
                    "documentation": {
                      "identifier": "Store.ListSyncJobs",
                      "newPage": false,
                      "searchKey": "repos.Store.ListSyncJobs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) ListSyncJobs(ctx context.Context) ([]SyncJob, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) ListSyncJobs(ctx context.Context) ([]SyncJob, error)\n```\n\nListSyncJobs returns all sync jobs. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Store.SetClonedRepos",
                    "documentation": {
                      "identifier": "Store.SetClonedRepos",
                      "newPage": false,
                      "searchKey": "repos.Store.SetClonedRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) SetClonedRepos(ctx context.Context, repoNames ...string) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) SetClonedRepos(ctx context.Context, repoNames ...string) (err error)\n```\n\nSetClonedRepos updates cloned status for all repositories. All repositories whose name is in repoNames will have their cloned column set to true and every other repository will have it set to false. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Store.Transact",
                    "documentation": {
                      "identifier": "Store.Transact",
                      "newPage": false,
                      "searchKey": "repos.Store.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) Transact(ctx context.Context) (stx *Store, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) Transact(ctx context.Context) (stx *Store, err error)\n```\n\nTransact returns a TxStore whose methods operate within the context of a transaction. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Store.UpsertRepos",
                    "documentation": {
                      "identifier": "Store.UpsertRepos",
                      "newPage": false,
                      "searchKey": "repos.Store.UpsertRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) UpsertRepos(ctx context.Context, repos ...*types.Repo) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) UpsertRepos(ctx context.Context, repos ...*types.Repo) (err error)\n```\n\nUpsertRepos updates or inserts the given repos in the Sourcegraph repository store. The ID field is used to distinguish between Repos that need to be updated and types.Repos that need to be inserted. On inserts, the _ID field of each given Repo is set on inserts. The cloned column is not updated by this function. This method does NOT update sources in the external_services_repo table. Use UpsertSources for that purpose. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Store.UpsertSources",
                    "documentation": {
                      "identifier": "Store.UpsertSources",
                      "newPage": false,
                      "searchKey": "repos.Store.UpsertSources",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) UpsertSources(ctx context.Context, inserts, updates, deletes map[api.RepoID][]types.SourceInfo) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) UpsertSources(ctx context.Context, inserts, updates, deletes map[api.RepoID][]types.SourceInfo) (err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Store.With",
                    "documentation": {
                      "identifier": "Store.With",
                      "newPage": false,
                      "searchKey": "repos.Store.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) With(other basestore.ShareableStore) *Store"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) With(other basestore.ShareableStore) *Store\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Store.list",
                    "documentation": {
                      "identifier": "Store.list",
                      "newPage": false,
                      "searchKey": "repos.Store.list",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) list(ctx context.Context, q *sqlf.Query, scan scanFunc) (last, count int64, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) list(ctx context.Context, q *sqlf.Query, scan scanFunc) (last, count int64, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Store.paginate",
                    "documentation": {
                      "identifier": "Store.paginate",
                      "newPage": false,
                      "searchKey": "repos.Store.paginate",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) paginate(ctx context.Context, limit, perPage int64, cursor int64, q paginatedQuery, scan scanFunc) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) paginate(ctx context.Context, limit, perPage int64, cursor int64, q paginatedQuery, scan scanFunc) (err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Store.trace",
                    "documentation": {
                      "identifier": "Store.trace",
                      "newPage": false,
                      "searchKey": "repos.Store.trace",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) trace(ctx context.Context, family string) (*trace.Trace, context.Context)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) trace(ctx context.Context, family string) (*trace.Trace, context.Context)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#StoreMetrics",
              "documentation": {
                "identifier": "StoreMetrics",
                "newPage": false,
                "searchKey": "repos.StoreMetrics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type StoreMetrics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype StoreMetrics struct {\n\tTransact              *metrics.OperationMetrics\n\tDone                  *metrics.OperationMetrics\n\tUpsertRepos           *metrics.OperationMetrics\n\tUpsertSources         *metrics.OperationMetrics\n\tListExternalRepoSpecs *metrics.OperationMetrics\n\tGetExternalService    *metrics.OperationMetrics\n\tSetClonedRepos        *metrics.OperationMetrics\n\tCountNotClonedRepos   *metrics.OperationMetrics\n\tCountUserAddedRepos   *metrics.OperationMetrics\n\tEnqueueSyncJobs       *metrics.OperationMetrics\n}\n```\n\nStoreMetrics encapsulates the Prometheus metrics of a Store. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewStoreMetrics",
                    "documentation": {
                      "identifier": "NewStoreMetrics",
                      "newPage": false,
                      "searchKey": "repos.NewStoreMetrics",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewStoreMetrics() StoreMetrics"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewStoreMetrics() StoreMetrics\n```\n\nNewStoreMetrics returns StoreMetrics that need to be registered in a Prometheus registry. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#StoreMetrics.MustRegister",
                    "documentation": {
                      "identifier": "StoreMetrics.MustRegister",
                      "newPage": false,
                      "searchKey": "repos.StoreMetrics.MustRegister",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sm StoreMetrics) MustRegister(r prometheus.Registerer)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sm StoreMetrics) MustRegister(r prometheus.Registerer)\n```\n\nMustRegister registers all metrics in StoreMetrics in the given prometheus.Registerer. It panics in case of failure. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#SyncError",
              "documentation": {
                "identifier": "SyncError",
                "newPage": false,
                "searchKey": "repos.SyncError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SyncError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SyncError struct {\n\tMessage string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#SyncJob",
              "documentation": {
                "identifier": "SyncJob",
                "newPage": false,
                "searchKey": "repos.SyncJob",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SyncJob struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SyncJob struct {\n\tID                int\n\tState             string\n\tFailureMessage    sql.NullString\n\tStartedAt         sql.NullTime\n\tFinishedAt        sql.NullTime\n\tProcessAfter      sql.NullTime\n\tNumResets         int\n\tNumFailures       int\n\tExternalServiceID int64\n\tNextSyncAt        sql.NullTime\n}\n```\n\nSyncJob represents an external service that needs to be synced \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#SyncJob.RecordID",
                    "documentation": {
                      "identifier": "SyncJob.RecordID",
                      "newPage": false,
                      "searchKey": "repos.SyncJob.RecordID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SyncJob) RecordID() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SyncJob) RecordID() int\n```\n\nRecordID implements workerutil.Record and indicates the queued item id \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#SyncWorkerOptions",
              "documentation": {
                "identifier": "SyncWorkerOptions",
                "newPage": false,
                "searchKey": "repos.SyncWorkerOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SyncWorkerOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SyncWorkerOptions struct {\n\tNumHandlers            int                   // defaults to 3\n\tWorkerInterval         time.Duration         // defaults to 10s\n\tPrometheusRegisterer   prometheus.Registerer // if non-nil, metrics will be collected\n\tCleanupOldJobs         bool                  // run a background process to cleanup old jobs\n\tCleanupOldJobsInterval time.Duration         // defaults to 1h\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#Syncer",
              "documentation": {
                "identifier": "Syncer",
                "newPage": false,
                "searchKey": "repos.Syncer",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Syncer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Syncer struct {\n\tSourcer Sourcer\n\tWorker  *workerutil.Worker\n\tStore   *Store\n\n\t// Synced is sent a collection of Repos that were synced by Sync (only if Synced is non-nil)\n\tSynced chan Diff\n\n\t// SubsetSynced is sent the result of a single repo sync that were synced by SyncRepo (only if SubsetSynced is non-nil)\n\tSubsetSynced chan Diff\n\n\t// Logger if non-nil is logged to.\n\tLogger log15.Logger\n\n\t// Now is time.Now. Can be set by tests to get deterministic output.\n\tNow func() time.Time\n\n\tRegisterer prometheus.Registerer\n\n\t// UserReposMaxPerUser can be used to override the value read from config.\n\t// If zero, we'll read from config instead.\n\tUserReposMaxPerUser int\n\n\t// UserReposMaxPerSite can be used to override the value read from config.\n\t// If zero, we'll read from config instead.\n\tUserReposMaxPerSite int\n}\n```\n\nA Syncer periodically synchronizes available repositories from all its given Sources with the stored Repositories in Sourcegraph. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#Syncer.Run",
                    "documentation": {
                      "identifier": "Syncer.Run",
                      "newPage": false,
                      "searchKey": "repos.Syncer.Run",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Syncer) Run(ctx context.Context, db *sql.DB, store *Store, opts RunOptions) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Syncer) Run(ctx context.Context, db *sql.DB, store *Store, opts RunOptions) error\n```\n\nRun runs the Sync at the specified interval. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Syncer.SyncExternalService",
                    "documentation": {
                      "identifier": "Syncer.SyncExternalService",
                      "newPage": false,
                      "searchKey": "repos.Syncer.SyncExternalService",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Syncer) SyncExternalService(ctx context.Context, tx *Store, externalServiceID int64, minSyncInterval time.Duration) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Syncer) SyncExternalService(ctx context.Context, tx *Store, externalServiceID int64, minSyncInterval time.Duration) (err error)\n```\n\nSyncExternalService syncs repos using the supplied external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Syncer.SyncRepo",
                    "documentation": {
                      "identifier": "Syncer.SyncRepo",
                      "newPage": false,
                      "searchKey": "repos.Syncer.SyncRepo",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Syncer) SyncRepo(ctx context.Context, store *Store, sourcedRepo *types.Repo) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Syncer) SyncRepo(ctx context.Context, store *Store, sourcedRepo *types.Repo) (err error)\n```\n\nSyncRepo runs the syncer on a single repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Syncer.TriggerExternalServiceSync",
                    "documentation": {
                      "identifier": "Syncer.TriggerExternalServiceSync",
                      "newPage": false,
                      "searchKey": "repos.Syncer.TriggerExternalServiceSync",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Syncer) TriggerExternalServiceSync(ctx context.Context, id int64) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Syncer) TriggerExternalServiceSync(ctx context.Context, id int64) error\n```\n\nTriggerExternalServiceSync will enqueue a sync job for the supplied external service \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Syncer.initialUnmodifiedDiffFromStore",
                    "documentation": {
                      "identifier": "Syncer.initialUnmodifiedDiffFromStore",
                      "newPage": false,
                      "searchKey": "repos.Syncer.initialUnmodifiedDiffFromStore",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Syncer) initialUnmodifiedDiffFromStore(ctx context.Context, store *Store)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Syncer) initialUnmodifiedDiffFromStore(ctx context.Context, store *Store)\n```\n\ninitialUnmodifiedDiffFromStore creates a diff of all repos present in the store and sends it to s.Synced. This is used so that on startup the reader of s.Synced will receive a list of repos. In particular this is so that the git update scheduler can start working straight away on existing repositories. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Syncer.insertIfNew",
                    "documentation": {
                      "identifier": "Syncer.insertIfNew",
                      "newPage": false,
                      "searchKey": "repos.Syncer.insertIfNew",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Syncer) insertIfNew(ctx context.Context, store *Store, publicOnly bool, sourcedRepo *types.Repo) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Syncer) insertIfNew(ctx context.Context, store *Store, publicOnly bool, sourcedRepo *types.Repo) (err error)\n```\n\ninsertIfNew is a specialization of SyncRepo. It will insert sourcedRepo if there are no related repositories, otherwise does nothing. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Syncer.makeNewRepoInserter",
                    "documentation": {
                      "identifier": "Syncer.makeNewRepoInserter",
                      "newPage": false,
                      "searchKey": "repos.Syncer.makeNewRepoInserter",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Syncer) makeNewRepoInserter(ctx context.Context, store *Store, publicOnly bool) (func(*types.Repo) error, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Syncer) makeNewRepoInserter(ctx context.Context, store *Store, publicOnly bool) (func(*types.Repo) error, error)\n```\n\nmakeNewRepoInserter returns a function that will insert repos. If publicOnly is set it will never insert a private repo. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Syncer.observe",
                    "documentation": {
                      "identifier": "Syncer.observe",
                      "newPage": false,
                      "searchKey": "repos.Syncer.observe",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Syncer) observe(ctx context.Context, family, title string) (context.Context, func(*Diff, *error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Syncer) observe(ctx context.Context, family, title string) (context.Context, func(*Diff, *error))\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Syncer.sourceDiff",
                    "documentation": {
                      "identifier": "Syncer.sourceDiff",
                      "newPage": false,
                      "searchKey": "repos.Syncer.sourceDiff",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Syncer) sourceDiff(repoID api.RepoID, diff *sourceDiff, oldSources, newSources map[string]*types.SourceInfo)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Syncer) sourceDiff(repoID api.RepoID, diff *sourceDiff, oldSources, newSources map[string]*types.SourceInfo)\n```\n\nsourceDiff computes the diff between the oldSources and the newSources, and updates the Added, Modified and Deleted in place of `diff`. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Syncer.sourced",
                    "documentation": {
                      "identifier": "Syncer.sourced",
                      "newPage": false,
                      "searchKey": "repos.Syncer.sourced",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Syncer) sourced(ctx context.Context, svc *types.ExternalService, onSourced ...func(*types.Repo) error) ([]*types.Repo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Syncer) sourced(ctx context.Context, svc *types.ExternalService, onSourced ...func(*types.Repo) error) ([]*types.Repo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Syncer.sourcesUpserts",
                    "documentation": {
                      "identifier": "Syncer.sourcesUpserts",
                      "newPage": false,
                      "searchKey": "repos.Syncer.sourcesUpserts",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Syncer) sourcesUpserts(diff *Diff, stored []*types.Repo) *sourceDiff"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Syncer) sourcesUpserts(diff *Diff, stored []*types.Repo) *sourceDiff\n```\n\nsourcesUpserts creates a diff for sources based on the repositoried diff. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Syncer.syncRepo",
                    "documentation": {
                      "identifier": "Syncer.syncRepo",
                      "newPage": false,
                      "searchKey": "repos.Syncer.syncRepo",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Syncer) syncRepo(ctx context.Context, store *Store, insertOnly bool, publicOnly bool, sourcedRepo *types.Repo) (diff Diff, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Syncer) syncRepo(ctx context.Context, store *Store, insertOnly bool, publicOnly bool, sourcedRepo *types.Repo) (diff Diff, err error)\n```\n\nsyncRepo syncs a single repo that has been sourced from a single external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#Syncer.upserts",
                    "documentation": {
                      "identifier": "Syncer.upserts",
                      "newPage": false,
                      "searchKey": "repos.Syncer.upserts",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Syncer) upserts(diff Diff) []*types.Repo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Syncer) upserts(diff Diff) []*types.Repo\n```\n\nupserts returns a slice containing modified or added repos from a Diff. Deleted repos are ignored. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#UnsupportedAuthenticatorError",
              "documentation": {
                "identifier": "UnsupportedAuthenticatorError",
                "newPage": false,
                "searchKey": "repos.UnsupportedAuthenticatorError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnsupportedAuthenticatorError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnsupportedAuthenticatorError struct {\n\thave   string\n\tsource string\n}\n```\n\nUnsupportedAuthenticatorError is returned by WithAuthenticator if the authenticator isn't supported on that code host. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#newUnsupportedAuthenticatorError",
                    "documentation": {
                      "identifier": "newUnsupportedAuthenticatorError",
                      "newPage": false,
                      "searchKey": "repos.newUnsupportedAuthenticatorError",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newUnsupportedAuthenticatorError(source string, a auth.Authenticator) UnsupportedAuthenticatorError"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newUnsupportedAuthenticatorError(source string, a auth.Authenticator) UnsupportedAuthenticatorError\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#UnsupportedAuthenticatorError.Error",
                    "documentation": {
                      "identifier": "UnsupportedAuthenticatorError.Error",
                      "newPage": false,
                      "searchKey": "repos.UnsupportedAuthenticatorError.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e UnsupportedAuthenticatorError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e UnsupportedAuthenticatorError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#UserSource",
              "documentation": {
                "identifier": "UserSource",
                "newPage": false,
                "searchKey": "repos.UserSource",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserSource interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserSource interface {\n\t// WithAuthenticator returns a copy of the original Source configured to use\n\t// the given authenticator, provided that authenticator type is supported by\n\t// the code host.\n\tWithAuthenticator(auth.Authenticator) (Source, error)\n\t// ValidateAuthenticator validates the currently set authenticator is usable.\n\t// Returns an error, when validating the Authenticator yielded an error.\n\tValidateAuthenticator(ctx context.Context) error\n}\n```\n\nA UserSource is a source that can use a custom authenticator (such as one contained in a user credential) to interact with the code host, rather than global credentials. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#configuredRepo",
              "documentation": {
                "identifier": "configuredRepo",
                "newPage": false,
                "searchKey": "repos.configuredRepo",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type configuredRepo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype configuredRepo struct {\n\tID   api.RepoID\n\tName api.RepoName\n}\n```\n\nA configuredRepo represents the configuration data for a given repo from a configuration source, such as information retrieved from GitHub for a given GitHubConnection. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#configuredRepoFromRepo",
                    "documentation": {
                      "identifier": "configuredRepoFromRepo",
                      "newPage": false,
                      "searchKey": "repos.configuredRepoFromRepo",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func configuredRepoFromRepo(r *types.Repo) configuredRepo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc configuredRepoFromRepo(r *types.Repo) configuredRepo\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#excludeBuilder",
              "documentation": {
                "identifier": "excludeBuilder",
                "newPage": false,
                "searchKey": "repos.excludeBuilder",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type excludeBuilder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype excludeBuilder struct {\n\texact    map[string]struct{}\n\tpatterns []*regexp.Regexp\n\n\terr error\n}\n```\n\nexcludeBuilder builds an excludeFunc. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#excludeBuilder.Build",
                    "documentation": {
                      "identifier": "excludeBuilder.Build",
                      "newPage": false,
                      "searchKey": "repos.excludeBuilder.Build",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *excludeBuilder) Build() (excludeFunc, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *excludeBuilder) Build() (excludeFunc, error)\n```\n\nBuild will return an excludeFunc based on the previous calls to Exact and Pattern. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#excludeBuilder.Exact",
                    "documentation": {
                      "identifier": "excludeBuilder.Exact",
                      "newPage": false,
                      "searchKey": "repos.excludeBuilder.Exact",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *excludeBuilder) Exact(name string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *excludeBuilder) Exact(name string)\n```\n\nExact will case-insensitively exclude the string name. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#excludeBuilder.Pattern",
                    "documentation": {
                      "identifier": "excludeBuilder.Pattern",
                      "newPage": false,
                      "searchKey": "repos.excludeBuilder.Pattern",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *excludeBuilder) Pattern(pattern string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *excludeBuilder) Pattern(pattern string)\n```\n\nPattern will exclude strings matching the regex pattern. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#excludeFunc",
              "documentation": {
                "identifier": "excludeFunc",
                "newPage": false,
                "searchKey": "repos.excludeFunc",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type excludeFunc func(string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype excludeFunc func(string) bool\n```\n\nexcludeFunc takes a string and returns true if it should be excluded. In the case of repo sourcing it will take a repository name or ID as input. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#externalServiceLister",
              "documentation": {
                "identifier": "externalServiceLister",
                "newPage": false,
                "searchKey": "repos.externalServiceLister",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type externalServiceLister interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype externalServiceLister interface {\n\tList(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#externalServiceRepo",
              "documentation": {
                "identifier": "externalServiceRepo",
                "newPage": false,
                "searchKey": "repos.externalServiceRepo",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type externalServiceRepo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype externalServiceRepo struct {\n\tExternalServiceID int64  `json:\"external_service_id\"`\n\tRepoID            int64  `json:\"repo_id\"`\n\tCloneURL          string `json:\"clone_url\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#githubResult",
              "documentation": {
                "identifier": "githubResult",
                "newPage": false,
                "searchKey": "repos.githubResult",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type githubResult struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype githubResult struct {\n\terr  error\n\trepo *github.Repository\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#multiSource",
              "documentation": {
                "identifier": "multiSource",
                "newPage": false,
                "searchKey": "repos.multiSource",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type multiSource interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype multiSource interface {\n\tSources() []Source\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#observedSource",
              "documentation": {
                "identifier": "observedSource",
                "newPage": false,
                "searchKey": "repos.observedSource",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type observedSource struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype observedSource struct {\n\tSource\n\tmetrics SourceMetrics\n\tlog     logging.ErrorLogger\n}\n```\n\nAn observedSource wraps another Source with error logging, Prometheus metrics and tracing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#observedSource.ListRepos",
                    "documentation": {
                      "identifier": "observedSource.ListRepos",
                      "newPage": false,
                      "searchKey": "repos.observedSource.ListRepos",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *observedSource) ListRepos(ctx context.Context, results chan SourceResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *observedSource) ListRepos(ctx context.Context, results chan SourceResult)\n```\n\nListRepos calls into the inner Source registers the observed results. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#paginatedQuery",
              "documentation": {
                "identifier": "paginatedQuery",
                "newPage": false,
                "searchKey": "repos.paginatedQuery",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type paginatedQuery func(cursor int64, limit int64) *github.com/keegancsmith/sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype paginatedQuery func(cursor, limit int64) *sqlf.Query\n```\n\na paginatedQuery returns a query with the given pagination parameters \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#priority",
              "documentation": {
                "identifier": "priority",
                "newPage": false,
                "searchKey": "repos.priority",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type priority int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype priority int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#recording",
              "documentation": {
                "identifier": "recording",
                "newPage": false,
                "searchKey": "repos.recording",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type recording struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype recording struct {\n\tnotifications       []chan struct{}\n\ttimeAfterFuncDelays []time.Duration\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#startRecording",
                    "documentation": {
                      "identifier": "startRecording",
                      "newPage": false,
                      "searchKey": "repos.startRecording",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func startRecording() (*recording, func())"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc startRecording() (*recording, func())\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#repoRecord",
              "documentation": {
                "identifier": "repoRecord",
                "newPage": false,
                "searchKey": "repos.repoRecord",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type repoRecord struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repoRecord struct {\n\tID                  api.RepoID      `json:\"id\"`\n\tName                string          `json:\"name\"`\n\tURI                 *string         `json:\"uri,omitempty\"`\n\tDescription         string          `json:\"description\"`\n\tCreatedAt           time.Time       `json:\"created_at\"`\n\tUpdatedAt           *time.Time      `json:\"updated_at,omitempty\"`\n\tDeletedAt           *time.Time      `json:\"deleted_at,omitempty\"`\n\tExternalServiceType *string         `json:\"external_service_type,omitempty\"`\n\tExternalServiceID   *string         `json:\"external_service_id,omitempty\"`\n\tExternalID          *string         `json:\"external_id,omitempty\"`\n\tArchived            bool            `json:\"archived\"`\n\tFork                bool            `json:\"fork\"`\n\tStars               int             `json:\"stars\"`\n\tPrivate             bool            `json:\"private\"`\n\tMetadata            json.RawMessage `json:\"metadata\"`\n\tSources             json.RawMessage `json:\"sources,omitempty\"`\n}\n```\n\nrepoRecord is the json representation of a repository as used in this package Postgres CTEs. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#newRepoRecord",
                    "documentation": {
                      "identifier": "newRepoRecord",
                      "newPage": false,
                      "searchKey": "repos.newRepoRecord",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newRepoRecord(r *types.Repo) (*repoRecord, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newRepoRecord(r *types.Repo) (*repoRecord, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#repoUpdate",
              "documentation": {
                "identifier": "repoUpdate",
                "newPage": false,
                "searchKey": "repos.repoUpdate",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type repoUpdate struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repoUpdate struct {\n\tRepo     configuredRepo\n\tPriority priority\n\tSeq      uint64 // the sequence number of the update\n\tUpdating bool   // whether the repo has been acquired for update\n\tIndex    int    `json:\"-\"` // the index in the heap\n}\n```\n\nrepoUpdate is a repository that has been queued for an update. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#repositoryPager",
              "documentation": {
                "identifier": "repositoryPager",
                "newPage": false,
                "searchKey": "repos.repositoryPager",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type repositoryPager func(page int) (repos []*github.com/sourcegraph/sourcegraph/internal/extsvc/github.Repository, hasNext bool, cost int, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repositoryPager func(page int) (repos []*github.Repository, hasNext bool, cost int, err error)\n```\n\nrepositoryPager is a function that returns repositories on a given `page`. It also returns: - `hasNext` bool: if there is a next page - `cost` int: rate limit cost used to determine recommended wait before next call - `err` error: if something goes wrong \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#scanFunc",
              "documentation": {
                "identifier": "scanFunc",
                "newPage": false,
                "searchKey": "repos.scanFunc",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type scanFunc func(github.com/sourcegraph/sourcegraph/internal/repos.scanner) (last int64, count int64, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype scanFunc func(scanner) (last, count int64, err error)\n```\n\na scanFunc scans one or more rows from a scanner, returning the last id column scanned and the count of scanned rows. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#scanner",
              "documentation": {
                "identifier": "scanner",
                "newPage": false,
                "searchKey": "repos.scanner",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type scanner interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype scanner interface {\n\tScan(dst ...interface{}) error\n}\n```\n\nscanner captures the Scan method of sql.Rows and sql.Row \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#schedule",
              "documentation": {
                "identifier": "schedule",
                "newPage": false,
                "searchKey": "repos.schedule",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type schedule struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype schedule struct {\n\tmu sync.Mutex\n\n\theap  []*scheduledRepoUpdate // min heap of scheduledRepoUpdates based on their due time.\n\tindex map[api.RepoID]*scheduledRepoUpdate\n\n\t// timer sends a value on the wakeup channel when it is time\n\ttimer  *time.Timer\n\twakeup chan struct{}\n}\n```\n\nschedule is the schedule of when repos get enqueued into the updateQueue. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#schedule.Len",
                    "documentation": {
                      "identifier": "schedule.Len",
                      "newPage": false,
                      "searchKey": "repos.schedule.Len",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *schedule) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *schedule) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#schedule.Less",
                    "documentation": {
                      "identifier": "schedule.Less",
                      "newPage": false,
                      "searchKey": "repos.schedule.Less",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *schedule) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *schedule) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#schedule.Pop",
                    "documentation": {
                      "identifier": "schedule.Pop",
                      "newPage": false,
                      "searchKey": "repos.schedule.Pop",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *schedule) Pop() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *schedule) Pop() interface{}\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#schedule.Push",
                    "documentation": {
                      "identifier": "schedule.Push",
                      "newPage": false,
                      "searchKey": "repos.schedule.Push",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *schedule) Push(x interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *schedule) Push(x interface{})\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#schedule.Swap",
                    "documentation": {
                      "identifier": "schedule.Swap",
                      "newPage": false,
                      "searchKey": "repos.schedule.Swap",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *schedule) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *schedule) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#schedule.getCurrentInterval",
                    "documentation": {
                      "identifier": "schedule.getCurrentInterval",
                      "newPage": false,
                      "searchKey": "repos.schedule.getCurrentInterval",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *schedule) getCurrentInterval(repo configuredRepo) (time.Duration, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *schedule) getCurrentInterval(repo configuredRepo) (time.Duration, bool)\n```\n\ngetCurrentInterval gets the current interval for the supplied repo and a bool indicating whether it was found. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#schedule.insertNew",
                    "documentation": {
                      "identifier": "schedule.insertNew",
                      "newPage": false,
                      "searchKey": "repos.schedule.insertNew",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *schedule) insertNew(repos []types.RepoName)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *schedule) insertNew(repos []types.RepoName)\n```\n\ninsertNew will insert repos only if they are not known to the scheduler \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#schedule.remove",
                    "documentation": {
                      "identifier": "schedule.remove",
                      "newPage": false,
                      "searchKey": "repos.schedule.remove",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *schedule) remove(repo configuredRepo) (removed bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *schedule) remove(repo configuredRepo) (removed bool)\n```\n\nremove removes a repo from the schedule. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#schedule.rescheduleTimer",
                    "documentation": {
                      "identifier": "schedule.rescheduleTimer",
                      "newPage": false,
                      "searchKey": "repos.schedule.rescheduleTimer",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *schedule) rescheduleTimer()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *schedule) rescheduleTimer()\n```\n\nrescheduleTimer schedules the scheduler to wakeup at the time that the next repo is due for an update. The caller must hold the lock on s.mu. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#schedule.reset",
                    "documentation": {
                      "identifier": "schedule.reset",
                      "newPage": false,
                      "searchKey": "repos.schedule.reset",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *schedule) reset()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *schedule) reset()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#schedule.setCloned",
                    "documentation": {
                      "identifier": "schedule.setCloned",
                      "newPage": false,
                      "searchKey": "repos.schedule.setCloned",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *schedule) setCloned(names []string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *schedule) setCloned(names []string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#schedule.updateInterval",
                    "documentation": {
                      "identifier": "schedule.updateInterval",
                      "newPage": false,
                      "searchKey": "repos.schedule.updateInterval",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *schedule) updateInterval(repo configuredRepo, interval time.Duration)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *schedule) updateInterval(repo configuredRepo, interval time.Duration)\n```\n\nupdateInterval updates the update interval of a repo in the schedule. It does nothing if the repo is not in the schedule. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#schedule.upsert",
                    "documentation": {
                      "identifier": "schedule.upsert",
                      "newPage": false,
                      "searchKey": "repos.schedule.upsert",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *schedule) upsert(repo configuredRepo) (updated bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *schedule) upsert(repo configuredRepo) (updated bool)\n```\n\nupsert inserts or updates a repo in the schedule. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#scheduledRepoUpdate",
              "documentation": {
                "identifier": "scheduledRepoUpdate",
                "newPage": false,
                "searchKey": "repos.scheduledRepoUpdate",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type scheduledRepoUpdate struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype scheduledRepoUpdate struct {\n\tRepo     configuredRepo // the repo to update\n\tInterval time.Duration  // how regularly the repo is updated\n\tDue      time.Time      // the next time that the repo will be enqueued for a update\n\tIndex    int            `json:\"-\"` // the index in the heap\n}\n```\n\nscheduledRepoUpdate is the update schedule for a single repo. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#schedulerConfig",
              "documentation": {
                "identifier": "schedulerConfig",
                "newPage": false,
                "searchKey": "repos.schedulerConfig",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type schedulerConfig struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype schedulerConfig struct {\n\trunning               bool\n\tautoGitUpdatesEnabled bool\n}\n```\n\nschedulerConfig tracks the active scheduler configuration. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#sourceDiff",
              "documentation": {
                "identifier": "sourceDiff",
                "newPage": false,
                "searchKey": "repos.sourceDiff",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type sourceDiff struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sourceDiff struct {\n\tAdded, Modified, Deleted map[api.RepoID][]types.SourceInfo\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#stubBadHTTPRedirectTransport",
              "documentation": {
                "identifier": "stubBadHTTPRedirectTransport",
                "newPage": false,
                "searchKey": "repos.stubBadHTTPRedirectTransport",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type stubBadHTTPRedirectTransport struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype stubBadHTTPRedirectTransport struct {\n\ttr http.RoundTripper\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#stubBadHTTPRedirectTransport.RoundTrip",
                    "documentation": {
                      "identifier": "stubBadHTTPRedirectTransport.RoundTrip",
                      "newPage": false,
                      "searchKey": "repos.stubBadHTTPRedirectTransport.RoundTrip",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t stubBadHTTPRedirectTransport) RoundTrip(r *http.Request) (*http.Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t stubBadHTTPRedirectTransport) RoundTrip(r *http.Request) (*http.Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#stubBadHTTPRedirectTransport.UnwrappableTransport",
                    "documentation": {
                      "identifier": "stubBadHTTPRedirectTransport.UnwrappableTransport",
                      "newPage": false,
                      "searchKey": "repos.stubBadHTTPRedirectTransport.UnwrappableTransport",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (stubBadHTTPRedirectTransport) UnwrappableTransport()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (stubBadHTTPRedirectTransport) UnwrappableTransport()\n```\n\nUnwrappableTransport signals that this transport can't be wrapped. In particular this means we won't respect global external settings. [https://github.com/sourcegraph/sourcegraph/issues/71](https://github.com/sourcegraph/sourcegraph/issues/71) and [https://github.com/sourcegraph/sourcegraph/issues/7738](https://github.com/sourcegraph/sourcegraph/issues/7738) \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#syncHandler",
              "documentation": {
                "identifier": "syncHandler",
                "newPage": false,
                "searchKey": "repos.syncHandler",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type syncHandler struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype syncHandler struct {\n\tdb              *sql.DB\n\tsyncer          *Syncer\n\tstore           *Store\n\tminSyncInterval func() time.Duration\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#syncHandler.Handle",
                    "documentation": {
                      "identifier": "syncHandler.Handle",
                      "newPage": false,
                      "searchKey": "repos.syncHandler.Handle",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *syncHandler) Handle(ctx context.Context, tx dbworkerstore.Store, record workerutil.Record) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *syncHandler) Handle(ctx context.Context, tx dbworkerstore.Store, record workerutil.Record) (err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#updateQueue",
              "documentation": {
                "identifier": "updateQueue",
                "newPage": false,
                "searchKey": "repos.updateQueue",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type updateQueue struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype updateQueue struct {\n\tmu sync.Mutex\n\n\theap  []*repoUpdate\n\tindex map[api.RepoID]*repoUpdate\n\n\tseq uint64\n\n\t// The queue performs a non-blocking send on this channel\n\t// when a new value is enqueued so that the update loop\n\t// can wake up if it is idle.\n\tnotifyEnqueue chan struct{}\n}\n```\n\nupdateQueue is a priority queue of repos to update. A repo can't have more than one location in the queue. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#updateQueue.Len",
                    "documentation": {
                      "identifier": "updateQueue.Len",
                      "newPage": false,
                      "searchKey": "repos.updateQueue.Len",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *updateQueue) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *updateQueue) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateQueue.Less",
                    "documentation": {
                      "identifier": "updateQueue.Less",
                      "newPage": false,
                      "searchKey": "repos.updateQueue.Less",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *updateQueue) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *updateQueue) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateQueue.Pop",
                    "documentation": {
                      "identifier": "updateQueue.Pop",
                      "newPage": false,
                      "searchKey": "repos.updateQueue.Pop",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *updateQueue) Pop() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *updateQueue) Pop() interface{}\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateQueue.Push",
                    "documentation": {
                      "identifier": "updateQueue.Push",
                      "newPage": false,
                      "searchKey": "repos.updateQueue.Push",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *updateQueue) Push(x interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *updateQueue) Push(x interface{})\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateQueue.Swap",
                    "documentation": {
                      "identifier": "updateQueue.Swap",
                      "newPage": false,
                      "searchKey": "repos.updateQueue.Swap",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *updateQueue) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *updateQueue) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateQueue.acquireNext",
                    "documentation": {
                      "identifier": "updateQueue.acquireNext",
                      "newPage": false,
                      "searchKey": "repos.updateQueue.acquireNext",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *updateQueue) acquireNext() (configuredRepo, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *updateQueue) acquireNext() (configuredRepo, bool)\n```\n\nacquireNext acquires the next repo for update. The acquired repo must be removed from the queue when the update finishes (independent of success or failure). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateQueue.enqueue",
                    "documentation": {
                      "identifier": "updateQueue.enqueue",
                      "newPage": false,
                      "searchKey": "repos.updateQueue.enqueue",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *updateQueue) enqueue(repo configuredRepo, p priority) (updated bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *updateQueue) enqueue(repo configuredRepo, p priority) (updated bool)\n```\n\nenqueue adds the repo to the queue with the given priority. \n\nIf the repo is already in the queue and it isn't yet updating, the repo is updated. \n\nIf the given priority is higher than the one in the queue, the repo's position in the queue is updated accordingly. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateQueue.nextSeq",
                    "documentation": {
                      "identifier": "updateQueue.nextSeq",
                      "newPage": false,
                      "searchKey": "repos.updateQueue.nextSeq",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *updateQueue) nextSeq() uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *updateQueue) nextSeq() uint64\n```\n\nnextSeq increments and returns the next sequence number. The caller must hold the lock on q.mu. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateQueue.remove",
                    "documentation": {
                      "identifier": "updateQueue.remove",
                      "newPage": false,
                      "searchKey": "repos.updateQueue.remove",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *updateQueue) remove(repo configuredRepo, updating bool) (removed bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *updateQueue) remove(repo configuredRepo, updating bool) (removed bool)\n```\n\nremove removes the repo from the queue if the repo.Updating matches the updating argument. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateQueue.reset",
                    "documentation": {
                      "identifier": "updateQueue.reset",
                      "newPage": false,
                      "searchKey": "repos.updateQueue.reset",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *updateQueue) reset()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *updateQueue) reset()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#updateScheduler",
              "documentation": {
                "identifier": "updateScheduler",
                "newPage": false,
                "searchKey": "repos.updateScheduler",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type updateScheduler struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype updateScheduler struct {\n\tupdateQueue *updateQueue\n\tschedule    *schedule\n}\n```\n\nupdateScheduler schedules repo update (or clone) requests to gitserver. \n\nRepository metadata is synced from configured code hosts and added to the scheduler. \n\nUpdates are scheduled based on the time that has elapsed since the last commit divided by a constant factor of 2. For example, if a repo's last commit was 8 hours ago then the next update will be scheduled 4 hours from now. If there are still no new commits, then the next update will be scheduled 6 hours from then. This heuristic is simple to compute and has nice backoff properties. \n\nIf an error occurs when attempting to fetch a repo we perform exponential backoff by doubling the current interval. This ensures that problematic repos don't stay in the front of the schedule clogging up the queue. \n\nWhen it is time for a repo to update, the scheduler inserts the repo into a queue. \n\nA worker continuously dequeues repos and sends updates to gitserver, but its concurrency is limited by the gitMaxConcurrentClones site configuration. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repos#NewUpdateScheduler",
                    "documentation": {
                      "identifier": "NewUpdateScheduler",
                      "newPage": false,
                      "searchKey": "repos.NewUpdateScheduler",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewUpdateScheduler() *updateScheduler"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewUpdateScheduler() *updateScheduler\n```\n\nNewUpdateScheduler returns a new scheduler. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateScheduler.DebugDump",
                    "documentation": {
                      "identifier": "updateScheduler.DebugDump",
                      "newPage": false,
                      "searchKey": "repos.updateScheduler.DebugDump",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *updateScheduler) DebugDump(ctx context.Context, db dbutil.DB) interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *updateScheduler) DebugDump(ctx context.Context, db dbutil.DB) interface{}\n```\n\nDebugDump returns the state of the update scheduler for debugging. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateScheduler.EnsureScheduled",
                    "documentation": {
                      "identifier": "updateScheduler.EnsureScheduled",
                      "newPage": false,
                      "searchKey": "repos.updateScheduler.EnsureScheduled",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *updateScheduler) EnsureScheduled(repos []types.RepoName)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *updateScheduler) EnsureScheduled(repos []types.RepoName)\n```\n\nEnsureScheduled ensures that all repos in repos exist in the scheduler. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateScheduler.ScheduleInfo",
                    "documentation": {
                      "identifier": "updateScheduler.ScheduleInfo",
                      "newPage": false,
                      "searchKey": "repos.updateScheduler.ScheduleInfo",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *updateScheduler) ScheduleInfo(id api.RepoID) *protocol.RepoUpdateSchedulerInfoResult"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *updateScheduler) ScheduleInfo(id api.RepoID) *protocol.RepoUpdateSchedulerInfoResult\n```\n\nScheduleInfo returns the current schedule info for a repo. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateScheduler.SetCloned",
                    "documentation": {
                      "identifier": "updateScheduler.SetCloned",
                      "newPage": false,
                      "searchKey": "repos.updateScheduler.SetCloned",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *updateScheduler) SetCloned(names []string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *updateScheduler) SetCloned(names []string)\n```\n\nSetCloned will ensure only repos in names are treated as cloned. All other repositories in the scheduler will be marked as uncloned. \n\nThis method should be called periodically with the list of all repositories cloned on gitserver. This ensures the scheduler treats uncloned repositories with a higher priority. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateScheduler.UpdateFromDiff",
                    "documentation": {
                      "identifier": "updateScheduler.UpdateFromDiff",
                      "newPage": false,
                      "searchKey": "repos.updateScheduler.UpdateFromDiff",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *updateScheduler) UpdateFromDiff(diff Diff)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *updateScheduler) UpdateFromDiff(diff Diff)\n```\n\nUpdateFromDiff updates the scheduled and queued repos from the given sync diff. \n\nWe upsert all repos that exist to the scheduler. This is so the scheduler can track the repositories and periodically update them. \n\nItems on the update queue will be cloned/fetched as soon as possible. We treat repos differently depending on which part of the diff they are: \n\n```\nDeleted    - remove from scheduler and queue.\nAdded      - new repo, enqueue for asap clone.\nModified   - likely new url or name. May also be a sign of new\n             commits. Enqueue for asap clone (or fetch).\nUnmodified - we likely already have this cloned. Just rely on\n             the scheduler and do not enqueue.\n\n```\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateScheduler.UpdateOnce",
                    "documentation": {
                      "identifier": "updateScheduler.UpdateOnce",
                      "newPage": false,
                      "searchKey": "repos.updateScheduler.UpdateOnce",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *updateScheduler) UpdateOnce(id api.RepoID, name api.RepoName)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *updateScheduler) UpdateOnce(id api.RepoID, name api.RepoName)\n```\n\nUpdateOnce causes a single update of the given repository. It neither adds nor removes the repo from the schedule. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateScheduler.remove",
                    "documentation": {
                      "identifier": "updateScheduler.remove",
                      "newPage": false,
                      "searchKey": "repos.updateScheduler.remove",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *updateScheduler) remove(r *types.Repo)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *updateScheduler) remove(r *types.Repo)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateScheduler.runSchedule",
                    "documentation": {
                      "identifier": "updateScheduler.runSchedule",
                      "newPage": false,
                      "searchKey": "repos.updateScheduler.runSchedule",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *updateScheduler) runSchedule()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *updateScheduler) runSchedule()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateScheduler.runScheduleLoop",
                    "documentation": {
                      "identifier": "updateScheduler.runScheduleLoop",
                      "newPage": false,
                      "searchKey": "repos.updateScheduler.runScheduleLoop",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *updateScheduler) runScheduleLoop(ctx context.Context)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *updateScheduler) runScheduleLoop(ctx context.Context)\n```\n\nrunScheduleLoop starts the loop that schedules updates by enqueuing them into the updateQueue. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateScheduler.runUpdateLoop",
                    "documentation": {
                      "identifier": "updateScheduler.runUpdateLoop",
                      "newPage": false,
                      "searchKey": "repos.updateScheduler.runUpdateLoop",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *updateScheduler) runUpdateLoop(ctx context.Context)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *updateScheduler) runUpdateLoop(ctx context.Context)\n```\n\nrunUpdateLoop sends repo update requests to gitserver. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repos#updateScheduler.upsert",
                    "documentation": {
                      "identifier": "updateScheduler.upsert",
                      "newPage": false,
                      "searchKey": "repos.updateScheduler.upsert",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *updateScheduler) upsert(r *types.Repo, enqueue bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *updateScheduler) upsert(r *types.Repo, enqueue bool)\n```\n\nupsert adds r to the scheduler for periodic updates. If r.ID is already in the scheduler, then the fields are updated (upsert). \n\nIf enqueue is true then r is also enqueued to the update queue for a git fetch/clone soon. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/repos#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/repos#CloneURL",
              "documentation": {
                "identifier": "CloneURL",
                "newPage": false,
                "searchKey": "repos.CloneURL",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func CloneURL(kind, config string, repo *types.Repo) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CloneURL(kind, config string, repo *types.Repo) (string, error)\n```\n\nCloneURL builds a cloneURL for the given repo based on the external service configuration. If authentication information is found in the configuration, it returns an authenticated URL for the selected code host. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#ConfRepoConcurrentExternalServiceSyncers",
              "documentation": {
                "identifier": "ConfRepoConcurrentExternalServiceSyncers",
                "newPage": false,
                "searchKey": "repos.ConfRepoConcurrentExternalServiceSyncers",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ConfRepoConcurrentExternalServiceSyncers() int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ConfRepoConcurrentExternalServiceSyncers() int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#ConfRepoListUpdateInterval",
              "documentation": {
                "identifier": "ConfRepoListUpdateInterval",
                "newPage": false,
                "searchKey": "repos.ConfRepoListUpdateInterval",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ConfRepoListUpdateInterval() time.Duration"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ConfRepoListUpdateInterval() time.Duration\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#FetchStatusMessages",
              "documentation": {
                "identifier": "FetchStatusMessages",
                "newPage": false,
                "searchKey": "repos.FetchStatusMessages",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func FetchStatusMessages(ctx context.Context, db dbutil.DB, u *types.User, cloud bool) ([]StatusMessage, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc FetchStatusMessages(ctx context.Context, db dbutil.DB, u *types.User, cloud bool) ([]StatusMessage, error)\n```\n\nFetchStatusMessages fetches repo related status messages. When fetching external service sync errors we'll fetch any external services owned by the user. In addition, if the user is a site admin we'll also fetch site level external services. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#GrantedScopes",
              "documentation": {
                "identifier": "GrantedScopes",
                "newPage": false,
                "searchKey": "repos.GrantedScopes",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func GrantedScopes(ctx context.Context, cache ScopeCache, svc *types.ExternalService) ([]string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc GrantedScopes(ctx context.Context, cache ScopeCache, svc *types.ExternalService) ([]string, error)\n```\n\nGrantedScopes returns a slice of scopes granted by the service based on the token provided in the config. It makes a request to the code host but responses are cached in Redis based on the token. \n\nCurrently only GitHub and GitLab user added external services are supported, other code hosts will simply return an empty slice \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#MustRegisterMetrics",
              "documentation": {
                "identifier": "MustRegisterMetrics",
                "newPage": false,
                "searchKey": "repos.MustRegisterMetrics",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MustRegisterMetrics(db dbutil.DB, sourcegraphDotCom bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MustRegisterMetrics(db dbutil.DB, sourcegraphDotCom bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#NewSyncWorker",
              "documentation": {
                "identifier": "NewSyncWorker",
                "newPage": false,
                "searchKey": "repos.NewSyncWorker",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewSyncWorker(ctx context.Context, db dbutil.DB, handler dbworker.Handler, opts SyncWorkerOptions) (*workerutil.Worker, *dbworker.Resetter)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewSyncWorker(ctx context.Context, db dbutil.DB, handler dbworker.Handler, opts SyncWorkerOptions) (*workerutil.Worker, *dbworker.Resetter)\n```\n\nNewSyncWorker creates a new external service sync worker. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#ObservedSource",
              "documentation": {
                "identifier": "ObservedSource",
                "newPage": false,
                "searchKey": "repos.ObservedSource",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ObservedSource(l logging.ErrorLogger, m SourceMetrics) func(Source) Source"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ObservedSource(l logging.ErrorLogger, m SourceMetrics) func(Source) Source\n```\n\nObservedSource returns a decorator that wraps a Source with error logging, Prometheus metrics and tracing. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#RunPhabricatorRepositorySyncWorker",
              "documentation": {
                "identifier": "RunPhabricatorRepositorySyncWorker",
                "newPage": false,
                "searchKey": "repos.RunPhabricatorRepositorySyncWorker",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RunPhabricatorRepositorySyncWorker(ctx context.Context, s *Store)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RunPhabricatorRepositorySyncWorker(ctx context.Context, s *Store)\n```\n\nRunPhabricatorRepositorySyncWorker runs the worker that syncs repositories from Phabricator to Sourcegraph \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#RunRepositoryPurgeWorker",
              "documentation": {
                "identifier": "RunRepositoryPurgeWorker",
                "newPage": false,
                "searchKey": "repos.RunRepositoryPurgeWorker",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RunRepositoryPurgeWorker(ctx context.Context)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RunRepositoryPurgeWorker(ctx context.Context)\n```\n\nRunRepositoryPurgeWorker is a worker which deletes repos which are present on gitserver, but not enabled/present in our repos table. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#RunScheduler",
              "documentation": {
                "identifier": "RunScheduler",
                "newPage": false,
                "searchKey": "repos.RunScheduler",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RunScheduler(ctx context.Context, scheduler *updateScheduler)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RunScheduler(ctx context.Context, scheduler *updateScheduler)\n```\n\nRunScheduler runs the worker that schedules git fetches of synced repositories in git-server. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestAWSCodeCloneURLs",
              "documentation": {
                "identifier": "TestAWSCodeCloneURLs",
                "newPage": false,
                "searchKey": "repos.TestAWSCodeCloneURLs",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAWSCodeCloneURLs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAWSCodeCloneURLs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestAWSCodeCommitSource_Exclude",
              "documentation": {
                "identifier": "TestAWSCodeCommitSource_Exclude",
                "newPage": false,
                "searchKey": "repos.TestAWSCodeCommitSource_Exclude",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAWSCodeCommitSource_Exclude(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAWSCodeCommitSource_Exclude(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestBitbucketCloudCloneURLs",
              "documentation": {
                "identifier": "TestBitbucketCloudCloneURLs",
                "newPage": false,
                "searchKey": "repos.TestBitbucketCloudCloneURLs",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBitbucketCloudCloneURLs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBitbucketCloudCloneURLs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestBitbucketCloudSource_Exclude",
              "documentation": {
                "identifier": "TestBitbucketCloudSource_Exclude",
                "newPage": false,
                "searchKey": "repos.TestBitbucketCloudSource_Exclude",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBitbucketCloudSource_Exclude(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBitbucketCloudSource_Exclude(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestBitbucketCloudSource_ListRepos",
              "documentation": {
                "identifier": "TestBitbucketCloudSource_ListRepos",
                "newPage": false,
                "searchKey": "repos.TestBitbucketCloudSource_ListRepos",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBitbucketCloudSource_ListRepos(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBitbucketCloudSource_ListRepos(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestBitbucketCloudSource_makeRepo",
              "documentation": {
                "identifier": "TestBitbucketCloudSource_makeRepo",
                "newPage": false,
                "searchKey": "repos.TestBitbucketCloudSource_makeRepo",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBitbucketCloudSource_makeRepo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBitbucketCloudSource_makeRepo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestBitbucketServerCloneURLs",
              "documentation": {
                "identifier": "TestBitbucketServerCloneURLs",
                "newPage": false,
                "searchKey": "repos.TestBitbucketServerCloneURLs",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBitbucketServerCloneURLs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBitbucketServerCloneURLs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestBitbucketServerSource_Exclude",
              "documentation": {
                "identifier": "TestBitbucketServerSource_Exclude",
                "newPage": false,
                "searchKey": "repos.TestBitbucketServerSource_Exclude",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBitbucketServerSource_Exclude(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBitbucketServerSource_Exclude(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestBitbucketServerSource_MakeRepo",
              "documentation": {
                "identifier": "TestBitbucketServerSource_MakeRepo",
                "newPage": false,
                "searchKey": "repos.TestBitbucketServerSource_MakeRepo",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBitbucketServerSource_MakeRepo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBitbucketServerSource_MakeRepo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestBitbucketServerSource_WithAuthenticator",
              "documentation": {
                "identifier": "TestBitbucketServerSource_WithAuthenticator",
                "newPage": false,
                "searchKey": "repos.TestBitbucketServerSource_WithAuthenticator",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBitbucketServerSource_WithAuthenticator(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBitbucketServerSource_WithAuthenticator(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestExampleRepositoryQuerySplit",
              "documentation": {
                "identifier": "TestExampleRepositoryQuerySplit",
                "newPage": false,
                "searchKey": "repos.TestExampleRepositoryQuerySplit",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExampleRepositoryQuerySplit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExampleRepositoryQuerySplit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestGetCustomInterval",
              "documentation": {
                "identifier": "TestGetCustomInterval",
                "newPage": false,
                "searchKey": "repos.TestGetCustomInterval",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetCustomInterval(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetCustomInterval(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestGitHubCloneURLs",
              "documentation": {
                "identifier": "TestGitHubCloneURLs",
                "newPage": false,
                "searchKey": "repos.TestGitHubCloneURLs",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGitHubCloneURLs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGitHubCloneURLs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestGitLabCloneURLs",
              "documentation": {
                "identifier": "TestGitLabCloneURLs",
                "newPage": false,
                "searchKey": "repos.TestGitLabCloneURLs",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGitLabCloneURLs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGitLabCloneURLs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestGitLabSource_GetRepo",
              "documentation": {
                "identifier": "TestGitLabSource_GetRepo",
                "newPage": false,
                "searchKey": "repos.TestGitLabSource_GetRepo",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGitLabSource_GetRepo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGitLabSource_GetRepo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestGitLabSource_WithAuthenticator",
              "documentation": {
                "identifier": "TestGitLabSource_WithAuthenticator",
                "newPage": false,
                "searchKey": "repos.TestGitLabSource_WithAuthenticator",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGitLabSource_WithAuthenticator(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGitLabSource_WithAuthenticator(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestGitLabSource_makeRepo",
              "documentation": {
                "identifier": "TestGitLabSource_makeRepo",
                "newPage": false,
                "searchKey": "repos.TestGitLabSource_makeRepo",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGitLabSource_makeRepo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGitLabSource_makeRepo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestGithubSource_GetRepo",
              "documentation": {
                "identifier": "TestGithubSource_GetRepo",
                "newPage": false,
                "searchKey": "repos.TestGithubSource_GetRepo",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGithubSource_GetRepo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGithubSource_GetRepo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestGithubSource_ListRepos",
              "documentation": {
                "identifier": "TestGithubSource_ListRepos",
                "newPage": false,
                "searchKey": "repos.TestGithubSource_ListRepos",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGithubSource_ListRepos(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGithubSource_ListRepos(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestGithubSource_WithAuthenticator",
              "documentation": {
                "identifier": "TestGithubSource_WithAuthenticator",
                "newPage": false,
                "searchKey": "repos.TestGithubSource_WithAuthenticator",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGithubSource_WithAuthenticator(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGithubSource_WithAuthenticator(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestGithubSource_excludes_disabledAndLocked",
              "documentation": {
                "identifier": "TestGithubSource_excludes_disabledAndLocked",
                "newPage": false,
                "searchKey": "repos.TestGithubSource_excludes_disabledAndLocked",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGithubSource_excludes_disabledAndLocked(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGithubSource_excludes_disabledAndLocked(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestGithubSource_makeRepo",
              "documentation": {
                "identifier": "TestGithubSource_makeRepo",
                "newPage": false,
                "searchKey": "repos.TestGithubSource_makeRepo",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGithubSource_makeRepo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGithubSource_makeRepo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestGrantedScopes",
              "documentation": {
                "identifier": "TestGrantedScopes",
                "newPage": false,
                "searchKey": "repos.TestGrantedScopes",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGrantedScopes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGrantedScopes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestHashToken",
              "documentation": {
                "identifier": "TestHashToken",
                "newPage": false,
                "searchKey": "repos.TestHashToken",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHashToken(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHashToken(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestIsSaturdayNight",
              "documentation": {
                "identifier": "TestIsSaturdayNight",
                "newPage": false,
                "searchKey": "repos.TestIsSaturdayNight",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIsSaturdayNight(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIsSaturdayNight(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestMain",
              "documentation": {
                "identifier": "TestMain",
                "newPage": false,
                "searchKey": "repos.TestMain",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMain(m *testing.M)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMain(m *testing.M)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestMatchOrg",
              "documentation": {
                "identifier": "TestMatchOrg",
                "newPage": false,
                "searchKey": "repos.TestMatchOrg",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMatchOrg(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMatchOrg(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestNewSourcer",
              "documentation": {
                "identifier": "TestNewSourcer",
                "newPage": false,
                "searchKey": "repos.TestNewSourcer",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewSourcer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewSourcer(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestPerforceCloneURL",
              "documentation": {
                "identifier": "TestPerforceCloneURL",
                "newPage": false,
                "searchKey": "repos.TestPerforceCloneURL",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPerforceCloneURL(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPerforceCloneURL(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestPerforceSource_ListRepos",
              "documentation": {
                "identifier": "TestPerforceSource_ListRepos",
                "newPage": false,
                "searchKey": "repos.TestPerforceSource_ListRepos",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPerforceSource_ListRepos(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPerforceSource_ListRepos(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestPerforceSource_makeRepo",
              "documentation": {
                "identifier": "TestPerforceSource_makeRepo",
                "newPage": false,
                "searchKey": "repos.TestPerforceSource_makeRepo",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPerforceSource_makeRepo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPerforceSource_makeRepo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestPhabricatorCloneURL",
              "documentation": {
                "identifier": "TestPhabricatorCloneURL",
                "newPage": false,
                "searchKey": "repos.TestPhabricatorCloneURL",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPhabricatorCloneURL(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPhabricatorCloneURL(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestPick",
              "documentation": {
                "identifier": "TestPick",
                "newPage": false,
                "searchKey": "repos.TestPick",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPick(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPick(t *testing.T)\n```\n\nOur uses of pick happen from iterating through a map. So we can't guarantee that we test both pick(a, b) and pick(b, a) without writing this specific test. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestProjectQueryToURL",
              "documentation": {
                "identifier": "TestProjectQueryToURL",
                "newPage": false,
                "searchKey": "repos.TestProjectQueryToURL",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestProjectQueryToURL(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestProjectQueryToURL(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestReposNamesSummary",
              "documentation": {
                "identifier": "TestReposNamesSummary",
                "newPage": false,
                "searchKey": "repos.TestReposNamesSummary",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReposNamesSummary(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReposNamesSummary(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestScheduleInsertNew",
              "documentation": {
                "identifier": "TestScheduleInsertNew",
                "newPage": false,
                "searchKey": "repos.TestScheduleInsertNew",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScheduleInsertNew(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScheduleInsertNew(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestSchedule_remove",
              "documentation": {
                "identifier": "TestSchedule_remove",
                "newPage": false,
                "searchKey": "repos.TestSchedule_remove",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSchedule_remove(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSchedule_remove(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestSchedule_updateInterval",
              "documentation": {
                "identifier": "TestSchedule_updateInterval",
                "newPage": false,
                "searchKey": "repos.TestSchedule_updateInterval",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSchedule_updateInterval(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSchedule_updateInterval(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestSchedule_upsert",
              "documentation": {
                "identifier": "TestSchedule_upsert",
                "newPage": false,
                "searchKey": "repos.TestSchedule_upsert",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSchedule_upsert(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSchedule_upsert(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestSetUserinfoBestEffort",
              "documentation": {
                "identifier": "TestSetUserinfoBestEffort",
                "newPage": false,
                "searchKey": "repos.TestSetUserinfoBestEffort",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSetUserinfoBestEffort(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSetUserinfoBestEffort(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestSources_ListRepos",
              "documentation": {
                "identifier": "TestSources_ListRepos",
                "newPage": false,
                "searchKey": "repos.TestSources_ListRepos",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSources_ListRepos(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSources_ListRepos(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestSrcExpose",
              "documentation": {
                "identifier": "TestSrcExpose",
                "newPage": false,
                "searchKey": "repos.TestSrcExpose",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSrcExpose(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSrcExpose(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestStatusMessages",
              "documentation": {
                "identifier": "TestStatusMessages",
                "newPage": false,
                "searchKey": "repos.TestStatusMessages",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStatusMessages(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStatusMessages(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestSyncRateLimiters",
              "documentation": {
                "identifier": "TestSyncRateLimiters",
                "newPage": false,
                "searchKey": "repos.TestSyncRateLimiters",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSyncRateLimiters(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSyncRateLimiters(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestUpdateQueue_acquireNext",
              "documentation": {
                "identifier": "TestUpdateQueue_acquireNext",
                "newPage": false,
                "searchKey": "repos.TestUpdateQueue_acquireNext",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUpdateQueue_acquireNext(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUpdateQueue_acquireNext(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestUpdateQueue_enqueue",
              "documentation": {
                "identifier": "TestUpdateQueue_enqueue",
                "newPage": false,
                "searchKey": "repos.TestUpdateQueue_enqueue",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUpdateQueue_enqueue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUpdateQueue_enqueue(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestUpdateQueue_remove",
              "documentation": {
                "identifier": "TestUpdateQueue_remove",
                "newPage": false,
                "searchKey": "repos.TestUpdateQueue_remove",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUpdateQueue_remove(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUpdateQueue_remove(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestUpdateQueue_setCloned",
              "documentation": {
                "identifier": "TestUpdateQueue_setCloned",
                "newPage": false,
                "searchKey": "repos.TestUpdateQueue_setCloned",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUpdateQueue_setCloned(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUpdateQueue_setCloned(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestUpdateScheduler_runSchedule",
              "documentation": {
                "identifier": "TestUpdateScheduler_runSchedule",
                "newPage": false,
                "searchKey": "repos.TestUpdateScheduler_runSchedule",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUpdateScheduler_runSchedule(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUpdateScheduler_runSchedule(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#TestUpdateScheduler_runUpdateLoop",
              "documentation": {
                "identifier": "TestUpdateScheduler_runUpdateLoop",
                "newPage": false,
                "searchKey": "repos.TestUpdateScheduler_runUpdateLoop",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUpdateScheduler_runUpdateLoop(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUpdateScheduler_runUpdateLoop(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#Test_updateQueue_Less",
              "documentation": {
                "identifier": "Test_updateQueue_Less",
                "newPage": false,
                "searchKey": "repos.Test_updateQueue_Less",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test_updateQueue_Less(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test_updateQueue_Less(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#Test_updateScheduler_UpdateFromDiff",
              "documentation": {
                "identifier": "Test_updateScheduler_UpdateFromDiff",
                "newPage": false,
                "searchKey": "repos.Test_updateScheduler_UpdateFromDiff",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test_updateScheduler_UpdateFromDiff(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test_updateScheduler_UpdateFromDiff(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#awsCodeCloneURL",
              "documentation": {
                "identifier": "awsCodeCloneURL",
                "newPage": false,
                "searchKey": "repos.awsCodeCloneURL",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func awsCodeCloneURL(repo *awscodecommit.Repository, cfg *schema.AWSCodeCommitConnection) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc awsCodeCloneURL(repo *awscodecommit.Repository, cfg *schema.AWSCodeCommitConnection) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#batchReposQuery",
              "documentation": {
                "identifier": "batchReposQuery",
                "newPage": false,
                "searchKey": "repos.batchReposQuery",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func batchReposQuery(fmtstr string, repos []*types.Repo) (_ *sqlf.Query, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc batchReposQuery(fmtstr string, repos []*types.Repo) (_ *sqlf.Query, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#bitbucketCloudCloneURL",
              "documentation": {
                "identifier": "bitbucketCloudCloneURL",
                "newPage": false,
                "searchKey": "repos.bitbucketCloudCloneURL",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func bitbucketCloudCloneURL(repo *bitbucketcloud.Repo, cfg *schema.BitbucketCloudConnection) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc bitbucketCloudCloneURL(repo *bitbucketcloud.Repo, cfg *schema.BitbucketCloudConnection) string\n```\n\nbitbucketCloudCloneURL returns the repository's Git remote URL with the configured Bitbucket Cloud app password inserted in the URL userinfo. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#bitbucketServerCloneURL",
              "documentation": {
                "identifier": "bitbucketServerCloneURL",
                "newPage": false,
                "searchKey": "repos.bitbucketServerCloneURL",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func bitbucketServerCloneURL(repo *bitbucketserver.Repo, cfg *schema.BitbucketServerConnection) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc bitbucketServerCloneURL(repo *bitbucketserver.Repo, cfg *schema.BitbucketServerConnection) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#calcSyncInterval",
              "documentation": {
                "identifier": "calcSyncInterval",
                "newPage": false,
                "searchKey": "repos.calcSyncInterval",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func calcSyncInterval(now time.Time, lastSync time.Time, minSyncInterval time.Duration, diff Diff) time.Duration"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc calcSyncInterval(now time.Time, lastSync time.Time, minSyncInterval time.Duration, diff Diff) time.Duration\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#closeErr",
              "documentation": {
                "identifier": "closeErr",
                "newPage": false,
                "searchKey": "repos.closeErr",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func closeErr(c io.Closer, err *error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc closeErr(c io.Closer, err *error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#composePerforceCloneURL",
              "documentation": {
                "identifier": "composePerforceCloneURL",
                "newPage": false,
                "searchKey": "repos.composePerforceCloneURL",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func composePerforceCloneURL(host, depot string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc composePerforceCloneURL(host, depot string) string\n```\n\ncomposePerforceCloneURL composes a clone URL for a Perforce depot based on given information. e.g. perforce://ssl:111.222.333.444:1666//Sourcegraph/ \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#exampleRepositoryQuerySplit",
              "documentation": {
                "identifier": "exampleRepositoryQuerySplit",
                "newPage": false,
                "searchKey": "repos.exampleRepositoryQuerySplit",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func exampleRepositoryQuerySplit(q string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc exampleRepositoryQuerySplit(q string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#getAWSEnv",
              "documentation": {
                "identifier": "getAWSEnv",
                "newPage": false,
                "searchKey": "repos.getAWSEnv",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getAWSEnv(envVar string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getAWSEnv(envVar string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#getCustomInterval",
              "documentation": {
                "identifier": "getCustomInterval",
                "newPage": false,
                "searchKey": "repos.getCustomInterval",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getCustomInterval(c *conf.Unified, repoName string) time.Duration"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getCustomInterval(c *conf.Unified, repoName string) time.Duration\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#getRepoNoun",
              "documentation": {
                "identifier": "getRepoNoun",
                "newPage": false,
                "searchKey": "repos.getRepoNoun",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getRepoNoun(count int) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getRepoNoun(count int) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#githubCloneURL",
              "documentation": {
                "identifier": "githubCloneURL",
                "newPage": false,
                "searchKey": "repos.githubCloneURL",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func githubCloneURL(repo *github.Repository, cfg *schema.GitHubConnection) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc githubCloneURL(repo *github.Repository, cfg *schema.GitHubConnection) (string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#githubGraphQLFailureMiddleware",
              "documentation": {
                "identifier": "githubGraphQLFailureMiddleware",
                "newPage": false,
                "searchKey": "repos.githubGraphQLFailureMiddleware",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func githubGraphQLFailureMiddleware(cli httpcli.Doer) httpcli.Doer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc githubGraphQLFailureMiddleware(cli httpcli.Doer) httpcli.Doer\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#gitlabCloneURL",
              "documentation": {
                "identifier": "gitlabCloneURL",
                "newPage": false,
                "searchKey": "repos.gitlabCloneURL",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func gitlabCloneURL(repo *gitlab.Project, cfg *schema.GitLabConnection) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc gitlabCloneURL(repo *gitlab.Project, cfg *schema.GitLabConnection) string\n```\n\nauthenticatedRemoteURL returns the GitLab project's Git remote URL with the configured GitLab personal access token inserted in the URL userinfo. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#gitserverRedirectMiddleware",
              "documentation": {
                "identifier": "gitserverRedirectMiddleware",
                "newPage": false,
                "searchKey": "repos.gitserverRedirectMiddleware",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func gitserverRedirectMiddleware(cli httpcli.Doer) httpcli.Doer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc gitserverRedirectMiddleware(cli httpcli.Doer) httpcli.Doer\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#group",
              "documentation": {
                "identifier": "group",
                "newPage": false,
                "searchKey": "repos.group",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func group(srcs []Source) map[string]Sources"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc group(srcs []Source) map[string]Sources\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#hashToken",
              "documentation": {
                "identifier": "hashToken",
                "newPage": false,
                "searchKey": "repos.hashToken",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func hashToken(token string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hashToken(token string) (string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#init.scheduler_test.go",
              "documentation": {
                "identifier": "init.scheduler_test.go",
                "newPage": false,
                "searchKey": "repos.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#isSaturdayNight",
              "documentation": {
                "identifier": "isSaturdayNight",
                "newPage": false,
                "searchKey": "repos.isSaturdayNight",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isSaturdayNight(t time.Time) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isSaturdayNight(t time.Time) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#limitedRedirect",
              "documentation": {
                "identifier": "limitedRedirect",
                "newPage": false,
                "searchKey": "repos.limitedRedirect",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func limitedRedirect(r *http.Request, via []*http.Request) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc limitedRedirect(r *http.Request, via []*http.Request) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#listAll",
              "documentation": {
                "identifier": "listAll",
                "newPage": false,
                "searchKey": "repos.listAll",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func listAll(ctx context.Context, src Source, onSourced ...func(*types.Repo) error) ([]*types.Repo, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc listAll(ctx context.Context, src Source, onSourced ...func(*types.Repo) error) ([]*types.Repo, error)\n```\n\nlistAll calls ListRepos on the given Source and collects the SourceResults the Source sends over a channel into a slice of *types.Repo and a single error \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#marshalJSON",
              "documentation": {
                "identifier": "marshalJSON",
                "newPage": false,
                "searchKey": "repos.marshalJSON",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalJSON(t testing.TB, v interface{}) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalJSON(t testing.TB, v interface{}) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#matchOrg",
              "documentation": {
                "identifier": "matchOrg",
                "newPage": false,
                "searchKey": "repos.matchOrg",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func matchOrg(q string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc matchOrg(q string) string\n```\n\nmatchOrg extracts the org name from the pattern `org:<org-name>` if it exists. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#merge",
              "documentation": {
                "identifier": "merge",
                "newPage": false,
                "searchKey": "repos.merge",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func merge(o, n *types.Repo)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc merge(o, n *types.Repo)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#metadataColumn",
              "documentation": {
                "identifier": "metadataColumn",
                "newPage": false,
                "searchKey": "repos.metadataColumn",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func metadataColumn(metadata interface{}) (msg json.RawMessage, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc metadataColumn(metadata interface{}) (msg json.RawMessage, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#mockTime",
              "documentation": {
                "identifier": "mockTime",
                "newPage": false,
                "searchKey": "repos.mockTime",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func mockTime(t time.Time)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mockTime(t time.Time)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#newClientFactory",
              "documentation": {
                "identifier": "newClientFactory",
                "newPage": false,
                "searchKey": "repos.newClientFactory",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newClientFactory(t testing.TB, name string, mws ...httpcli.Middleware) (*httpcli.Factory, func(testing.TB))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newClientFactory(t testing.TB, name string, mws ...httpcli.Middleware) (*httpcli.Factory, func(testing.TB))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#newRecorder",
              "documentation": {
                "identifier": "newRecorder",
                "newPage": false,
                "searchKey": "repos.newRecorder",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newRecorder(t testing.TB, file string, record bool) *recorder.Recorder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newRecorder(t testing.TB, file string, record bool) *recorder.Recorder\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#newResetterMetrics",
              "documentation": {
                "identifier": "newResetterMetrics",
                "newPage": false,
                "searchKey": "repos.newResetterMetrics",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newResetterMetrics(r prometheus.Registerer) dbworker.ResetterMetrics"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newResetterMetrics(r prometheus.Registerer) dbworker.ResetterMetrics\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#newWorkerMetrics",
              "documentation": {
                "identifier": "newWorkerMetrics",
                "newPage": false,
                "searchKey": "repos.newWorkerMetrics",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newWorkerMetrics(r prometheus.Registerer) workerutil.WorkerMetrics"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newWorkerMetrics(r prometheus.Registerer) workerutil.WorkerMetrics\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#nullStringColumn",
              "documentation": {
                "identifier": "nullStringColumn",
                "newPage": false,
                "searchKey": "repos.nullStringColumn",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func nullStringColumn(s string) *string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nullStringColumn(s string) *string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#nullTimeColumn",
              "documentation": {
                "identifier": "nullTimeColumn",
                "newPage": false,
                "searchKey": "repos.nullTimeColumn",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func nullTimeColumn(t time.Time) *time.Time"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nullTimeColumn(t time.Time) *time.Time\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#otherCloneURL",
              "documentation": {
                "identifier": "otherCloneURL",
                "newPage": false,
                "searchKey": "repos.otherCloneURL",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func otherCloneURL(repo *types.Repo, m *extsvc.OtherRepoMetadata) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc otherCloneURL(repo *types.Repo, m *extsvc.OtherRepoMetadata) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#otherRepoCloneURL",
              "documentation": {
                "identifier": "otherRepoCloneURL",
                "newPage": false,
                "searchKey": "repos.otherRepoCloneURL",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func otherRepoCloneURL(base *url.URL, repo string) (*url.URL, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc otherRepoCloneURL(base *url.URL, repo string) (*url.URL, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#perforceCloneURL",
              "documentation": {
                "identifier": "perforceCloneURL",
                "newPage": false,
                "searchKey": "repos.perforceCloneURL",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func perforceCloneURL(depot *perforce.Depot, cfg *schema.PerforceConnection) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc perforceCloneURL(depot *perforce.Depot, cfg *schema.PerforceConnection) string\n```\n\nperforceCloneURL composes a clone URL for a Perforce depot based on given information. e.g. perforce://admin:password@ssl:111.222.333.444:1666//Sourcegraph/ \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#phabricatorCloneURL",
              "documentation": {
                "identifier": "phabricatorCloneURL",
                "newPage": false,
                "searchKey": "repos.phabricatorCloneURL",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func phabricatorCloneURL(repo *phabricator.Repo, _ *schema.PhabricatorConnection) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc phabricatorCloneURL(repo *phabricator.Repo, _ *schema.PhabricatorConnection) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#pick",
              "documentation": {
                "identifier": "pick",
                "newPage": false,
                "searchKey": "repos.pick",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func pick(a *types.Repo, b *types.Repo) (keep, discard *types.Repo)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc pick(a *types.Repo, b *types.Repo) (keep, discard *types.Repo)\n```\n\npick deterministically chooses between a and b a repo to keep and discard. It is used when resolving conflicts on sourced repositories. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#projectQueryToURL",
              "documentation": {
                "identifier": "projectQueryToURL",
                "newPage": false,
                "searchKey": "repos.projectQueryToURL",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func projectQueryToURL(projectQuery string, perPage int) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc projectQueryToURL(projectQuery string, perPage int) (string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#purge",
              "documentation": {
                "identifier": "purge",
                "newPage": false,
                "searchKey": "repos.purge",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func purge(ctx context.Context, log log15.Logger) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc purge(ctx context.Context, log log15.Logger) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#randSleep",
              "documentation": {
                "identifier": "randSleep",
                "newPage": false,
                "searchKey": "repos.randSleep",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func randSleep(d, jitter time.Duration)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc randSleep(d, jitter time.Duration)\n```\n\nrandSleep will sleep for an expected d duration with a jitter in [-jitter / 2, jitter / 2]. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#resolveNameConflicts",
              "documentation": {
                "identifier": "resolveNameConflicts",
                "newPage": false,
                "searchKey": "repos.resolveNameConflicts",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func resolveNameConflicts(diff *Diff, conflicting types.Repos)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc resolveNameConflicts(diff *Diff, conflicting types.Repos)\n```\n\nWe need to resolve name conflicts by deciding whether to keep the newly added repo or the repo that already exists in the database. If the new repo wins, then the old repo is added to the diff.Deleted slice. If the old repo wins, then the new repo is no longer inserted and is filtered out from the diff.Added slice. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#runJobCleaner",
              "documentation": {
                "identifier": "runJobCleaner",
                "newPage": false,
                "searchKey": "repos.runJobCleaner",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func runJobCleaner(ctx context.Context, db dbutil.DB, interval time.Duration)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runJobCleaner(ctx context.Context, db dbutil.DB, interval time.Duration)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#save",
              "documentation": {
                "identifier": "save",
                "newPage": false,
                "searchKey": "repos.save",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func save(t testing.TB, rec *recorder.Recorder)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc save(t testing.TB, rec *recorder.Recorder)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#scanAll",
              "documentation": {
                "identifier": "scanAll",
                "newPage": false,
                "searchKey": "repos.scanAll",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanAll(rows *sql.Rows, scan scanFunc) (last, count int64, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanAll(rows *sql.Rows, scan scanFunc) (last, count int64, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#scanJobs",
              "documentation": {
                "identifier": "scanJobs",
                "newPage": false,
                "searchKey": "repos.scanJobs",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanJobs(rows *sql.Rows) ([]SyncJob, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanJobs(rows *sql.Rows) ([]SyncJob, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#scanSingleJob",
              "documentation": {
                "identifier": "scanSingleJob",
                "newPage": false,
                "searchKey": "repos.scanSingleJob",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanSingleJob(rows *sql.Rows, err error) (workerutil.Record, bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanSingleJob(rows *sql.Rows, err error) (workerutil.Record, bool, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#setUserinfoBestEffort",
              "documentation": {
                "identifier": "setUserinfoBestEffort",
                "newPage": false,
                "searchKey": "repos.setUserinfoBestEffort",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func setUserinfoBestEffort(rawurl, username, password string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc setUserinfoBestEffort(rawurl, username, password string) string\n```\n\nsetUserinfoBestEffort adds the username and password to rawurl. If user is not set in rawurl, username is used. If password is not set and there is a user, password is used. If anything fails, the original rawurl is returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#setupInitialQueue",
              "documentation": {
                "identifier": "setupInitialQueue",
                "newPage": false,
                "searchKey": "repos.setupInitialQueue",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func setupInitialQueue(s *updateScheduler, initialQueue []*repoUpdate)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc setupInitialQueue(s *updateScheduler, initialQueue []*repoUpdate)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#setupInitialSchedule",
              "documentation": {
                "identifier": "setupInitialSchedule",
                "newPage": false,
                "searchKey": "repos.setupInitialSchedule",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func setupInitialSchedule(s *updateScheduler, initialSchedule []*scheduledRepoUpdate)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc setupInitialSchedule(s *updateScheduler, initialSchedule []*scheduledRepoUpdate)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#sleep",
              "documentation": {
                "identifier": "sleep",
                "newPage": false,
                "searchKey": "repos.sleep",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sleep(ctx context.Context, d time.Duration)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sleep(ctx context.Context, d time.Duration)\n```\n\nsleep is a context aware time.Sleep \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#sourceErrorFormatFunc",
              "documentation": {
                "identifier": "sourceErrorFormatFunc",
                "newPage": false,
                "searchKey": "repos.sourceErrorFormatFunc",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sourceErrorFormatFunc(es []error) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sourceErrorFormatFunc(es []error) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#sourcesColumn",
              "documentation": {
                "identifier": "sourcesColumn",
                "newPage": false,
                "searchKey": "repos.sourcesColumn",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sourcesColumn(repoID api.RepoID, sources map[string]*types.SourceInfo) (json.RawMessage, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sourcesColumn(repoID api.RepoID, sources map[string]*types.SourceInfo) (json.RawMessage, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#timePtr",
              "documentation": {
                "identifier": "timePtr",
                "newPage": false,
                "searchKey": "repos.timePtr",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func timePtr(t time.Time) *time.Time"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc timePtr(t time.Time) *time.Time\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#update",
              "documentation": {
                "identifier": "update",
                "newPage": false,
                "searchKey": "repos.update",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func update(name string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc update(name string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#updatePhabRepos",
              "documentation": {
                "identifier": "updatePhabRepos",
                "newPage": false,
                "searchKey": "repos.updatePhabRepos",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func updatePhabRepos(ctx context.Context, repos []*types.Repo) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc updatePhabRepos(ctx context.Context, repos []*types.Repo) error\n```\n\nupdatePhabRepos ensures that all provided repositories exist in the phabricator_repos table. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#verifyQueue",
              "documentation": {
                "identifier": "verifyQueue",
                "newPage": false,
                "searchKey": "repos.verifyQueue",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func verifyQueue(t *testing.T, s *updateScheduler, expected []*repoUpdate)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc verifyQueue(t *testing.T, s *updateScheduler, expected []*repoUpdate)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#verifyRecording",
              "documentation": {
                "identifier": "verifyRecording",
                "newPage": false,
                "searchKey": "repos.verifyRecording",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func verifyRecording(t *testing.T, s *updateScheduler, timeAfterFuncDelays []time.Duration, expectedNotifications func(s *updateScheduler) []chan struct{}, r *recording)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc verifyRecording(t *testing.T, s *updateScheduler, timeAfterFuncDelays []time.Duration, expectedNotifications func(s *updateScheduler) []chan struct{}, r *recording)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#verifySchedule",
              "documentation": {
                "identifier": "verifySchedule",
                "newPage": false,
                "searchKey": "repos.verifySchedule",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func verifySchedule(t *testing.T, s *updateScheduler, expected []*scheduledRepoUpdate)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc verifySchedule(t *testing.T, s *updateScheduler, expected []*scheduledRepoUpdate)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#verifyScheduleRecording",
              "documentation": {
                "identifier": "verifyScheduleRecording",
                "newPage": false,
                "searchKey": "repos.verifyScheduleRecording",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func verifyScheduleRecording(t *testing.T, s *updateScheduler, timeAfterFuncDelays []time.Duration, wakeupNotifications int, r *recording)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc verifyScheduleRecording(t *testing.T, s *updateScheduler, timeAfterFuncDelays []time.Duration, wakeupNotifications int, r *recording)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repos#wrapWithoutRedirect",
              "documentation": {
                "identifier": "wrapWithoutRedirect",
                "newPage": false,
                "searchKey": "repos.wrapWithoutRedirect",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func wrapWithoutRedirect(c *http.Client)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc wrapWithoutRedirect(c *http.Client)\n```\n\nThe code below is copied from github.com/aws/aws-sdk-go-v2@v0.11.0/aws/client.go so we use the same HTTP client that AWS wants to use, but fits into our HTTP factory pattern. Additionally we change wrapWithoutRedirect to mutate c instead of returning a copy. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
