{
  "pathID": "/internal/conf/conftypes",
  "documentation": {
    "identifier": "conftypes",
    "newPage": true,
    "searchKey": "internal/conf/conftypes",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package conftypes"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/conf/conftypes#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/conf/conftypes#RawUnified",
              "documentation": {
                "identifier": "RawUnified",
                "newPage": false,
                "searchKey": "conftypes.RawUnified",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RawUnified struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RawUnified struct {\n\tSite               string\n\tServiceConnections ServiceConnections\n}\n```\n\nRawUnified is the unparsed variant of conf.Unified. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/conf/conftypes#RawUnified.Equal",
                    "documentation": {
                      "identifier": "RawUnified.Equal",
                      "newPage": false,
                      "searchKey": "conftypes.RawUnified.Equal",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r RawUnified) Equal(other RawUnified) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r RawUnified) Equal(other RawUnified) bool\n```\n\nEqual tells if the two configurations are equal or not. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/conf/conftypes#ServiceConnections",
              "documentation": {
                "identifier": "ServiceConnections",
                "newPage": false,
                "searchKey": "conftypes.ServiceConnections",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ServiceConnections struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ServiceConnections struct {\n\t// GitServers is the addresses of gitserver instances that should be\n\t// talked to.\n\tGitServers []string `json:\"gitServers\"`\n\n\t// PostgresDSN is the PostgreSQL DB data source name.\n\t// eg: \"postgres://sg@pgsql/sourcegraph?sslmode=false\"\n\tPostgresDSN string `json:\"postgresDSN\"`\n\n\t// CodeIntelPostgresDSN is the PostgreSQL DB data source name for the\n\t// code intel database.\n\t// eg: \"postgres://sg@pgsql/sourcegraph_codeintel?sslmode=false\"\n\tCodeIntelPostgresDSN string `json:\"codeIntelPostgresDSN\"`\n\n\t// CodeInsightsTimescaleDSN is the TimescaleDB data source name for the\n\t// code insights database.\n\t// eg: \"postgres://sg@pgsql/sourcegraph_codeintel?sslmode=false\"\n\tCodeInsightsTimescaleDSN string `json:\"codeinsightsTimescaleDSN\"`\n}\n```\n\nServiceConnections represents configuration about how the deployment internally connects to services. These are settings that need to be propagated from the frontend to other services, so that the frontend can be the source of truth for all configuration. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
