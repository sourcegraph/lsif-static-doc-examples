{
  "pathID": "/internal/encryption/testing",
  "documentation": {
    "identifier": "testing",
    "newPage": true,
    "searchKey": "internal/encryption/testing",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package testing"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/encryption/testing#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/encryption/testing#BadKey",
              "documentation": {
                "identifier": "BadKey",
                "newPage": false,
                "searchKey": "testing.BadKey",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BadKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BadKey struct{ Err error }\n```\n\nBadKey is an encryption.Key that always returns an error when any of its methods are invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/encryption/testing#BadKey.Decrypt",
                    "documentation": {
                      "identifier": "BadKey.Decrypt",
                      "newPage": false,
                      "searchKey": "testing.BadKey.Decrypt",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *BadKey) Decrypt(context.Context, []byte) (*encryption.Secret, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *BadKey) Decrypt(context.Context, []byte) (*encryption.Secret, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/encryption/testing#BadKey.Encrypt",
                    "documentation": {
                      "identifier": "BadKey.Encrypt",
                      "newPage": false,
                      "searchKey": "testing.BadKey.Encrypt",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *BadKey) Encrypt(context.Context, []byte) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *BadKey) Encrypt(context.Context, []byte) ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/encryption/testing#BadKey.Version",
                    "documentation": {
                      "identifier": "BadKey.Version",
                      "newPage": false,
                      "searchKey": "testing.BadKey.Version",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *BadKey) Version(context.Context) (encryption.KeyVersion, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *BadKey) Version(context.Context) (encryption.KeyVersion, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/encryption/testing#TestKey",
              "documentation": {
                "identifier": "TestKey",
                "newPage": false,
                "searchKey": "testing.TestKey",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestKey struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestKey struct{}\n```\n\nTestKey is an encryption.Key that just base64 encodes the plaintext, to make sure the data is actually transformed, so as to be unreadable by misconfigured Stores, but doesn't do any encryption. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/encryption/testing#TestKey.Decrypt",
                    "documentation": {
                      "identifier": "TestKey.Decrypt",
                      "newPage": false,
                      "searchKey": "testing.TestKey.Decrypt",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k TestKey) Decrypt(ctx context.Context, ciphertext []byte) (*encryption.Secret, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k TestKey) Decrypt(ctx context.Context, ciphertext []byte) (*encryption.Secret, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/encryption/testing#TestKey.Encrypt",
                    "documentation": {
                      "identifier": "TestKey.Encrypt",
                      "newPage": false,
                      "searchKey": "testing.TestKey.Encrypt",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k TestKey) Encrypt(ctx context.Context, plaintext []byte) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k TestKey) Encrypt(ctx context.Context, plaintext []byte) ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/encryption/testing#TestKey.Version",
                    "documentation": {
                      "identifier": "TestKey.Version",
                      "newPage": false,
                      "searchKey": "testing.TestKey.Version",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k TestKey) Version(ctx context.Context) (encryption.KeyVersion, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k TestKey) Version(ctx context.Context) (encryption.KeyVersion, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/encryption/testing#TransparentKey",
              "documentation": {
                "identifier": "TransparentKey",
                "newPage": false,
                "searchKey": "testing.TransparentKey",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TransparentKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TransparentKey struct{ called int }\n```\n\nTransparentKey is a key that performs no encryption or decryption, but errors if not called within a test. This allows mocking the decrypter when it's only important that it's called, and not what it actually does. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/encryption/testing#NewTransparentKey",
                    "documentation": {
                      "identifier": "NewTransparentKey",
                      "newPage": false,
                      "searchKey": "testing.NewTransparentKey",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewTransparentKey(t *testing.T) *TransparentKey"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewTransparentKey(t *testing.T) *TransparentKey\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/encryption/testing#TransparentKey.Decrypt",
                    "documentation": {
                      "identifier": "TransparentKey.Decrypt",
                      "newPage": false,
                      "searchKey": "testing.TransparentKey.Decrypt",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *TransparentKey) Decrypt(ctx context.Context, ciphertext []byte) (*encryption.Secret, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *TransparentKey) Decrypt(ctx context.Context, ciphertext []byte) (*encryption.Secret, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/encryption/testing#TransparentKey.Encrypt",
                    "documentation": {
                      "identifier": "TransparentKey.Encrypt",
                      "newPage": false,
                      "searchKey": "testing.TransparentKey.Encrypt",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *TransparentKey) Encrypt(ctx context.Context, value []byte) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *TransparentKey) Encrypt(ctx context.Context, value []byte) ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/encryption/testing#TransparentKey.Version",
                    "documentation": {
                      "identifier": "TransparentKey.Version",
                      "newPage": false,
                      "searchKey": "testing.TransparentKey.Version",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *TransparentKey) Version(ctx context.Context) (encryption.KeyVersion, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *TransparentKey) Version(ctx context.Context) (encryption.KeyVersion, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
}
