{
  "pathID": "/internal/encryption/keyring",
  "documentation": {
    "identifier": "keyring",
    "newPage": true,
    "searchKey": "internal/encryption/keyring",
    "tags": [
      "package",
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package keyring"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/encryption/keyring#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/encryption/keyring#defaultRing",
              "documentation": {
                "identifier": "defaultRing",
                "newPage": false,
                "searchKey": "keyring.defaultRing",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var defaultRing"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar defaultRing Ring\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/encryption/keyring#mu",
              "documentation": {
                "identifier": "mu",
                "newPage": false,
                "searchKey": "keyring.mu",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var mu"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mu sync.RWMutex\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/encryption/keyring#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/encryption/keyring#Ring",
              "documentation": {
                "identifier": "Ring",
                "newPage": false,
                "searchKey": "keyring.Ring",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Ring struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Ring struct {\n\tBatchChangesCredentialKey encryption.Key\n\tExternalServiceKey        encryption.Key\n\tUserExternalAccountKey    encryption.Key\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/encryption/keyring#Default",
                    "documentation": {
                      "identifier": "Default",
                      "newPage": false,
                      "searchKey": "keyring.Default",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Default() Ring"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Default() Ring\n```\n\nDefault returns the default keyring, if you can avoid using this from arbitrary points in your code, please do! we would rather inject the individual keys as dependencies when initialised from main(), but if that's impractical it's fine to use this. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/encryption/keyring#NewRing",
                    "documentation": {
                      "identifier": "NewRing",
                      "newPage": false,
                      "searchKey": "keyring.NewRing",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewRing(ctx context.Context, keyConfig *schema.EncryptionKeys) (*Ring, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewRing(ctx context.Context, keyConfig *schema.EncryptionKeys) (*Ring, error)\n```\n\nNewRing creates a keyring.Ring containing all the keys configured in site config \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/encryption/keyring#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/encryption/keyring#Init",
              "documentation": {
                "identifier": "Init",
                "newPage": false,
                "searchKey": "keyring.Init",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Init(ctx context.Context) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Init(ctx context.Context) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/encryption/keyring#MockDefault",
              "documentation": {
                "identifier": "MockDefault",
                "newPage": false,
                "searchKey": "keyring.MockDefault",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MockDefault(r Ring)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MockDefault(r Ring)\n```\n\nMockDefault overrides the default keyring. Note: This function is defined for testing purpose. Use Init to correctly setup a keyring. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/encryption/keyring#NewKey",
              "documentation": {
                "identifier": "NewKey",
                "newPage": false,
                "searchKey": "keyring.NewKey",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewKey(ctx context.Context, k *schema.EncryptionKey, config *schema.EncryptionKeys) (encryption.Key, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewKey(ctx context.Context, k *schema.EncryptionKey, config *schema.EncryptionKeys) (encryption.Key, error)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
