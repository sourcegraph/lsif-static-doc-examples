{
  "pathID": "/internal/cmd/precise-code-intel-tester",
  "documentation": {
    "identifier": "precise-code-intel-tester",
    "newPage": true,
    "searchKey": "internal/cmd/precise-code-intel-tester",
    "tags": [
      "package",
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package main"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/cmd/precise-code-intel-tester#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#repositoryQueryFragment",
              "documentation": {
                "identifier": "repositoryQueryFragment",
                "newPage": false,
                "searchKey": "main.repositoryQueryFragment",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const repositoryQueryFragment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst repositoryQueryFragment = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#uploadQueryFragment",
              "documentation": {
                "identifier": "uploadQueryFragment",
                "newPage": false,
                "searchKey": "main.uploadQueryFragment",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const uploadQueryFragment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst uploadQueryFragment = `\n\tu%d: node(id: \"%s\") {\n\t\t... on LSIFUpload { state }\n\t}\n`\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/cmd/precise-code-intel-tester#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#ErrProcessingFailed",
              "documentation": {
                "identifier": "ErrProcessingFailed",
                "newPage": false,
                "searchKey": "main.ErrProcessingFailed",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrProcessingFailed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrProcessingFailed = errors.New(\"processing failed\")\n```\n\nErrProcessingFailed occurs when an upload enters the ERRORED state. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#checkQueryResult",
              "documentation": {
                "identifier": "checkQueryResult",
                "newPage": false,
                "searchKey": "main.checkQueryResult",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var checkQueryResult"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar checkQueryResult bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#commands",
              "documentation": {
                "identifier": "commands",
                "newPage": false,
                "searchKey": "main.commands",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var commands"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar commands = map[string]func() error{\n\t\"upload\": uploadCommand,\n\t\"query\":  queryCommand,\n}\n```\n\nEntrypoints \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#endpoint",
              "documentation": {
                "identifier": "endpoint",
                "newPage": false,
                "searchKey": "main.endpoint",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var endpoint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar endpoint = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#indexDir",
              "documentation": {
                "identifier": "indexDir",
                "newPage": false,
                "searchKey": "main.indexDir",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var indexDir"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar indexDir string\n```\n\nFlags \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#indexFilenamePattern",
              "documentation": {
                "identifier": "indexFilenamePattern",
                "newPage": false,
                "searchKey": "main.indexFilenamePattern",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var indexFilenamePattern"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar indexFilenamePattern = regexp.MustCompile(`^(.+)\\.\\d+\\.([0-9A-Fa-f]{40})\\.dump$`)\n```\n\nindexFilenamePattern extracts a repo name and rev from the index filename. We assume that the index segment here (the non-captured `.\\d+.`) occupies [0,n) without gaps for each repository. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#numConcurrentRequests",
              "documentation": {
                "identifier": "numConcurrentRequests",
                "newPage": false,
                "searchKey": "main.numConcurrentRequests",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var numConcurrentRequests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar numConcurrentRequests int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#numConcurrentUploads",
              "documentation": {
                "identifier": "numConcurrentUploads",
                "newPage": false,
                "searchKey": "main.numConcurrentUploads",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var numConcurrentUploads"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar numConcurrentUploads int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#queryGenerators",
              "documentation": {
                "identifier": "queryGenerators",
                "newPage": false,
                "searchKey": "main.queryGenerators",
                "tags": [
                  "variable",
                  "array",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var queryGenerators"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar queryGenerators = ...\n```\n\nqueryGenerators is the list of functions that create query test functions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#queryReferencesOfReferences",
              "documentation": {
                "identifier": "queryReferencesOfReferences",
                "newPage": false,
                "searchKey": "main.queryReferencesOfReferences",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var queryReferencesOfReferences"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar queryReferencesOfReferences bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#testCases",
              "documentation": {
                "identifier": "testCases",
                "newPage": false,
                "searchKey": "main.testCases",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var testCases"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testCases = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#token",
              "documentation": {
                "identifier": "token",
                "newPage": false,
                "searchKey": "main.token",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var token"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar token = env.Get(\"SOURCEGRAPH_SUDO_TOKEN\", \"\", \"Access token\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#uploadIDPattern",
              "documentation": {
                "identifier": "uploadIDPattern",
                "newPage": false,
                "searchKey": "main.uploadIDPattern",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var uploadIDPattern"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar uploadIDPattern = regexp.MustCompile(`/settings/code-intelligence/lsif-uploads/([0-9A-Za-z=]+)`)\n```\n\nuploadIDPattern extracts a GraphQL identifier from the output of the `src lsif upload` command. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/cmd/precise-code-intel-tester#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#Commit",
              "documentation": {
                "identifier": "Commit",
                "newPage": false,
                "searchKey": "main.Commit",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Commit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Commit struct {\n\tOid string `json:\"oid\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#Definitions",
              "documentation": {
                "identifier": "Definitions",
                "newPage": false,
                "searchKey": "main.Definitions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Definitions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Definitions struct {\n\tNodes []Node `json:\"nodes\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#Location",
              "documentation": {
                "identifier": "Location",
                "newPage": false,
                "searchKey": "main.Location",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Location struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Location struct {\n\tRepo      string\n\tRev       string\n\tPath      string\n\tLine      int\n\tCharacter int\n}\n```\n\nLocation specifies the first position in a source range. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#Node",
              "documentation": {
                "identifier": "Node",
                "newPage": false,
                "searchKey": "main.Node",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Node struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Node struct {\n\tResource `json:\"resource\"`\n\tRange    `json:\"range\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#PageInfo",
              "documentation": {
                "identifier": "PageInfo",
                "newPage": false,
                "searchKey": "main.PageInfo",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PageInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PageInfo struct {\n\tEndCursor string `json:\"endCursor\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#Position",
              "documentation": {
                "identifier": "Position",
                "newPage": false,
                "searchKey": "main.Position",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Position struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Position struct {\n\tLine      int `json:\"line\"`\n\tCharacter int `json:\"character\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#QueryFunc",
              "documentation": {
                "identifier": "QueryFunc",
                "newPage": false,
                "searchKey": "main.QueryFunc",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueryFunc func(context.Context, github.com/sourcegraph/sourcegraph/internal/cmd/precise-code-intel-tester.Location) ([]github.com/sourcegraph/sourcegraph/internal/cmd/precise-code-intel-tester.Location, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueryFunc func(context.Context, Location) ([]Location, error)\n```\n\nQueryFunc performs a GraphQL query (definition or references) given the source location. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#QueryResponse",
              "documentation": {
                "identifier": "QueryResponse",
                "newPage": false,
                "searchKey": "main.QueryResponse",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueryResponse struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueryResponse struct {\n\tData struct {\n\t\tRepository struct {\n\t\t\tCommit struct {\n\t\t\t\tBlob struct {\n\t\t\t\t\tLSIF struct {\n\t\t\t\t\t\tDefinitions Definitions `json:\"definitions\"`\n\t\t\t\t\t\tReferences  References  `json:\"references\"`\n\t\t\t\t\t} `json:\"lsif\"`\n\t\t\t\t} `json:\"blob\"`\n\t\t\t} `json:\"commit\"`\n\t\t} `json:\"repository\"`\n\t} `json:\"data\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#Range",
              "documentation": {
                "identifier": "Range",
                "newPage": false,
                "searchKey": "main.Range",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Range struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Range struct {\n\tStart Position `json:\"start\"`\n\tEnd   Position `json:\"end\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#References",
              "documentation": {
                "identifier": "References",
                "newPage": false,
                "searchKey": "main.References",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type References struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype References struct {\n\tNodes    []Node   `json:\"nodes\"`\n\tPageInfo PageInfo `json:\"pageInfo\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#Repository",
              "documentation": {
                "identifier": "Repository",
                "newPage": false,
                "searchKey": "main.Repository",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Repository struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Repository struct {\n\tName string `json:\"name\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#Resource",
              "documentation": {
                "identifier": "Resource",
                "newPage": false,
                "searchKey": "main.Resource",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Resource struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Resource struct {\n\tPath       string     `json:\"path\"`\n\tRepository Repository `json:\"repository\"`\n\tCommit     Commit     `json:\"commit\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#Upload",
              "documentation": {
                "identifier": "Upload",
                "newPage": false,
                "searchKey": "main.Upload",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Upload struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Upload struct {\n\tName     string\n\tIndex    int\n\tRev      string\n\tUploadID string\n}\n```\n\nUpload represents a fully uploaded (but possibly unprocessed) LSIF index. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#refreshState",
              "documentation": {
                "identifier": "refreshState",
                "newPage": false,
                "searchKey": "main.refreshState",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type refreshState struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype refreshState struct {\n\tStale bool\n\tErr   error\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/cmd/precise-code-intel-tester#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#commandNameList",
              "documentation": {
                "identifier": "commandNameList",
                "newPage": false,
                "searchKey": "main.commandNameList",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func commandNameList() string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc commandNameList() string\n```\n\ncommandNameList returns a comma-separated list of valid command names. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#compareLocations",
              "documentation": {
                "identifier": "compareLocations",
                "newPage": false,
                "searchKey": "main.compareLocations",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func compareLocations(a, b Location) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc compareLocations(a, b Location) int\n```\n\nCompare returns an integer comparing two locations. The result will be 0 if a == b, -1 if a < b, and +1 if a > b. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#countRevs",
              "documentation": {
                "identifier": "countRevs",
                "newPage": false,
                "searchKey": "main.countRevs",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func countRevs(revsByRepo map[string][]string) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc countRevs(revsByRepo map[string][]string) int\n```\n\ncountRevs returns the total number of revision. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#definitionsFromReferencesQueries",
              "documentation": {
                "identifier": "definitionsFromReferencesQueries",
                "newPage": false,
                "searchKey": "main.definitionsFromReferencesQueries",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func definitionsFromReferencesQueries() []util.ParallelFn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc definitionsFromReferencesQueries() []util.ParallelFn\n```\n\ndefinitionsFromReferencesQueries returns a list of test functions that queries the definitions of all the test cases references. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#main",
              "documentation": {
                "identifier": "main",
                "newPage": false,
                "searchKey": "main.main",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func main()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc main()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#makeProcessedSignals",
              "documentation": {
                "identifier": "makeProcessedSignals",
                "newPage": false,
                "searchKey": "main.makeProcessedSignals",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeProcessedSignals(revsByRepo map[string][]string) map[string]map[string]chan error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeProcessedSignals(revsByRepo map[string][]string) map[string]map[string]chan error\n```\n\nmakeProcessedSignals returns a map of error channels for each revision. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#makeRefreshedSignals",
              "documentation": {
                "identifier": "makeRefreshedSignals",
                "newPage": false,
                "searchKey": "main.makeRefreshedSignals",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeRefreshedSignals(revsByRepo map[string][]string) map[string]chan refreshState"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeRefreshedSignals(revsByRepo map[string][]string) map[string]chan refreshState\n```\n\nrefreshedSignals returns a map of error channels for each repository. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#makeTestQueryFunction",
              "documentation": {
                "identifier": "makeTestQueryFunction",
                "newPage": false,
                "searchKey": "main.makeTestQueryFunction",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeTestQueryFunction(name string, location Location, expectedLocations []Location, f QueryFunc) util.ParallelFn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeTestQueryFunction(name string, location Location, expectedLocations []Location, f QueryFunc) util.ParallelFn\n```\n\nmakeTestQueryFunction constructs a function for RunParallel that invokes the given query function and checks the returned locations against the given expected locations. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#makeTestUploadForRepositoryFunction",
              "documentation": {
                "identifier": "makeTestUploadForRepositoryFunction",
                "newPage": false,
                "searchKey": "main.makeTestUploadForRepositoryFunction",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeTestUploadForRepositoryFunction(name string,..."
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeTestUploadForRepositoryFunction(\n\tname string,\n\trevs []string,\n\tuploaded chan Upload,\n\tprocessedSignals map[string]map[string]chan error,\n\trefreshedSignals map[string]chan refreshState,\n\tlimiter *util.Limiter,\n) util.ParallelFn\n```\n\nmakeTestUploadForRepositoryFunction constructs a function for RunParallel that uploads the index files for the given repo, then blocks until the upload records enter a terminal state. If any upload fails to process, an error is returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#queryCommand",
              "documentation": {
                "identifier": "queryCommand",
                "newPage": false,
                "searchKey": "main.queryCommand",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func queryCommand() error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc queryCommand() error\n```\n\nqueryCommand runs the \"query\" command. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#queryDefinitions",
              "documentation": {
                "identifier": "queryDefinitions",
                "newPage": false,
                "searchKey": "main.queryDefinitions",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func queryDefinitions(ctx context.Context, location Location) (locations []Location, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc queryDefinitions(ctx context.Context, location Location) (locations []Location, err error)\n```\n\nqueryDefinitions returns all of the LSIF definitions for the given location. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#queryReferences",
              "documentation": {
                "identifier": "queryReferences",
                "newPage": false,
                "searchKey": "main.queryReferences",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func queryReferences(ctx context.Context, location Location) (locations []Location, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc queryReferences(ctx context.Context, location Location) (locations []Location, err error)\n```\n\nqueryReferences returns all of the LSIF references for the given location. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#readRevsByRepo",
              "documentation": {
                "identifier": "readRevsByRepo",
                "newPage": false,
                "searchKey": "main.readRevsByRepo",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readRevsByRepo() (map[string][]string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readRevsByRepo() (map[string][]string, error)\n```\n\nreadRevsByRepo returns a list of revisions by repository names for which there is an index file. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#referencesFromDefinitionsQueries",
              "documentation": {
                "identifier": "referencesFromDefinitionsQueries",
                "newPage": false,
                "searchKey": "main.referencesFromDefinitionsQueries",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func referencesFromDefinitionsQueries() []util.ParallelFn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc referencesFromDefinitionsQueries() []util.ParallelFn\n```\n\nreferencesFromDefinitionsQueries returns a list of test functions that queries the references of all the test cases definitions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#referencesFromReferencesQueries",
              "documentation": {
                "identifier": "referencesFromReferencesQueries",
                "newPage": false,
                "searchKey": "main.referencesFromReferencesQueries",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func referencesFromReferencesQueries() []util.ParallelFn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc referencesFromReferencesQueries() []util.ParallelFn\n```\n\nreferencesFromReferencesQueries returns a list of test functions that queries the references of all the test cases references. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#sortLocations",
              "documentation": {
                "identifier": "sortLocations",
                "newPage": false,
                "searchKey": "main.sortLocations",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sortLocations(locations []Location)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sortLocations(locations []Location)\n```\n\nsortLocations sorts a slice of Locations by repo, rev, path, line, then character. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#upload",
              "documentation": {
                "identifier": "upload",
                "newPage": false,
                "searchKey": "main.upload",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func upload(ctx context.Context, name string, index int, rev string, limiter *util.Limiter) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc upload(ctx context.Context, name string, index int, rev string, limiter *util.Limiter) (string, error)\n```\n\nupload invokes the `src lsif upload` command. This requires that src is installed on the current user's $PATH and is relatively up to date. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#uploadCommand",
              "documentation": {
                "identifier": "uploadCommand",
                "newPage": false,
                "searchKey": "main.uploadCommand",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func uploadCommand() error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc uploadCommand() error\n```\n\nuploadCommand runs the \"upload\" command. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#uploadIndexes",
              "documentation": {
                "identifier": "uploadIndexes",
                "newPage": false,
                "searchKey": "main.uploadIndexes",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func uploadIndexes(ctx context.Context) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc uploadIndexes(ctx context.Context) error\n```\n\nuploadIndexes uploads each file in the index directory and blocks until each upload has been successfully processed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#uploadStates",
              "documentation": {
                "identifier": "uploadStates",
                "newPage": false,
                "searchKey": "main.uploadStates",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func uploadStates(ctx context.Context, ids, names []string) (stateByUpload map[string]string, staleCommitGraphByRepo map[string]bool, _ error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc uploadStates(ctx context.Context, ids, names []string) (stateByUpload map[string]string, staleCommitGraphByRepo map[string]bool, _ error)\n```\n\nuploadStates returns a map from upload identifier to its current state. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/cmd/precise-code-intel-tester#watchStateChanges",
              "documentation": {
                "identifier": "watchStateChanges",
                "newPage": false,
                "searchKey": "main.watchStateChanges",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func watchStateChanges(ctx context.Context,..."
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc watchStateChanges(\n\tctx context.Context,\n\tuploaded chan Upload,\n\tprocessedSignals map[string]map[string]chan error,\n\trefreshedSignals map[string]chan refreshState,\n)\n```\n\nwatchStateChanges maintains a list of uploaded but nonterminal upload records. This function polls the API and signals the worker when their upload has been processed. If an upload fails to process, the error will be sent to the worker. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/internal/cmd/precise-code-intel-tester/util"
    }
  ]
}
