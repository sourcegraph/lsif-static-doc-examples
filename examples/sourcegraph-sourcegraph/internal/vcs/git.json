{
  "pathID": "/internal/vcs/git",
  "documentation": {
    "identifier": "git",
    "newPage": true,
    "searchKey": "internal/vcs/git",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package git"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/vcs/git#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/vcs/git#DevNullSHA",
              "documentation": {
                "identifier": "DevNullSHA",
                "newPage": false,
                "searchKey": "git.DevNullSHA",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DevNullSHA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DevNullSHA = \"4b825dc642cb6eb9a060e54bf8d69288fbee4904\"\n```\n\n4b825dc642cb6eb9a060e54bf8d69288fbee4904 is `git hash-object -t tree /dev/null`, which is used as the base when computing the `git diff` of the root commit. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ModeSubmodule",
              "documentation": {
                "identifier": "ModeSubmodule",
                "newPage": false,
                "searchKey": "git.ModeSubmodule",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ModeSubmodule"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ModeSubmodule = 0160000 | os.ModeDevice\n```\n\nModeSubmodule is an os.FileMode mask indicating that the file is a Git submodule. \n\nTo avoid being reported as a regular file mode by (os.FileMode).IsRegular, it sets other bits (os.ModeDevice) beyond the Git \"160000\" commit mode bits. The choice of os.ModeDevice is arbitrary. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ObjectTypeBlob",
              "documentation": {
                "identifier": "ObjectTypeBlob",
                "newPage": false,
                "searchKey": "git.ObjectTypeBlob",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ObjectTypeBlob"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ObjectTypeBlob ObjectType = \"blob\"\n```\n\nStandard Git object types. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ObjectTypeCommit",
              "documentation": {
                "identifier": "ObjectTypeCommit",
                "newPage": false,
                "searchKey": "git.ObjectTypeCommit",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ObjectTypeCommit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ObjectTypeCommit ObjectType = \"commit\"\n```\n\nStandard Git object types. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ObjectTypeTag",
              "documentation": {
                "identifier": "ObjectTypeTag",
                "newPage": false,
                "searchKey": "git.ObjectTypeTag",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ObjectTypeTag"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ObjectTypeTag ObjectType = \"tag\"\n```\n\nStandard Git object types. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ObjectTypeTree",
              "documentation": {
                "identifier": "ObjectTypeTree",
                "newPage": false,
                "searchKey": "git.ObjectTypeTree",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ObjectTypeTree"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ObjectTypeTree ObjectType = \"tree\"\n```\n\nStandard Git object types. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#logFormatWithRefs",
              "documentation": {
                "identifier": "logFormatWithRefs",
                "newPage": false,
                "searchKey": "git.logFormatWithRefs",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const logFormatWithRefs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst logFormatWithRefs = ...\n```\n\ninclude refs (slow on repos with many refs) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#logFormatWithoutRefs",
              "documentation": {
                "identifier": "logFormatWithoutRefs",
                "newPage": false,
                "searchKey": "git.logFormatWithoutRefs",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const logFormatWithoutRefs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst logFormatWithoutRefs = ...\n```\n\ndon't include refs (faster, should be used if refs are not needed) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#partsPerCommit",
              "documentation": {
                "identifier": "partsPerCommit",
                "newPage": false,
                "searchKey": "git.partsPerCommit",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const partsPerCommit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst partsPerCommit = 10 // number of \\x00-separated fields per commit\n\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/vcs/git#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/vcs/git#Mocks",
              "documentation": {
                "identifier": "Mocks",
                "newPage": false,
                "searchKey": "git.Mocks",
                "tags": [
                  "variable",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var Mocks"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Mocks, emptyMocks struct {\n\tGetCommit        func(api.CommitID) (*Commit, error)\n\tExecSafe         func(params []string) (stdout, stderr []byte, exitCode int, err error)\n\tExecReader       func(args []string) (reader io.ReadCloser, err error)\n\tRawLogDiffSearch func(opt RawLogDiffSearchOptions) ([]*LogCommitSearchResult, bool, error)\n\tNewFileReader    func(commit api.CommitID, name string) (io.ReadCloser, error)\n\tReadFile         func(commit api.CommitID, name string) ([]byte, error)\n\tReadDir          func(commit api.CommitID, name string, recurse bool) ([]fs.FileInfo, error)\n\tLsFiles          func(repo api.RepoName, commit api.CommitID) ([]string, error)\n\tResolveRevision  func(spec string, opt ResolveRevisionOptions) (api.CommitID, error)\n\tStat             func(commit api.CommitID, name string) (fs.FileInfo, error)\n\tGetObject        func(objectName string) (OID, ObjectType, error)\n\tCommits          func(repo api.RepoName, opt CommitsOptions) ([]*Commit, error)\n\tMergeBase        func(repo api.RepoName, a, b api.CommitID) (api.CommitID, error)\n} = ...\n```\n\nMocks is used to mock behavior in tests. Tests must call ResetMocks() when finished to ensure its mocks are not (inadvertently) used by subsequent tests. \n\n(The emptyMocks is used by ResetMocks to zero out Mocks without needing to use a named type.) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#NonExistentCommitID",
              "documentation": {
                "identifier": "NonExistentCommitID",
                "newPage": false,
                "searchKey": "git.NonExistentCommitID",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var NonExistentCommitID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar NonExistentCommitID = api.CommitID(strings.Repeat(\"a\", 40))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#Times",
              "documentation": {
                "identifier": "Times",
                "newPage": false,
                "searchKey": "git.Times",
                "tags": [
                  "variable",
                  "array",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var Times"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Times = []string{\n\tAppleTime(\"2006-01-02T15:04:05Z\"),\n\tAppleTime(\"2014-05-06T19:20:21Z\"),\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#emptyMocks",
              "documentation": {
                "identifier": "emptyMocks",
                "newPage": false,
                "searchKey": "git.emptyMocks",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var emptyMocks"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Mocks, emptyMocks struct {\n\tGetCommit        func(api.CommitID) (*Commit, error)\n\tExecSafe         func(params []string) (stdout, stderr []byte, exitCode int, err error)\n\tExecReader       func(args []string) (reader io.ReadCloser, err error)\n\tRawLogDiffSearch func(opt RawLogDiffSearchOptions) ([]*LogCommitSearchResult, bool, error)\n\tNewFileReader    func(commit api.CommitID, name string) (io.ReadCloser, error)\n\tReadFile         func(commit api.CommitID, name string) ([]byte, error)\n\tReadDir          func(commit api.CommitID, name string, recurse bool) ([]fs.FileInfo, error)\n\tLsFiles          func(repo api.RepoName, commit api.CommitID) ([]string, error)\n\tResolveRevision  func(spec string, opt ResolveRevisionOptions) (api.CommitID, error)\n\tStat             func(commit api.CommitID, name string) (fs.FileInfo, error)\n\tGetObject        func(objectName string) (OID, ObjectType, error)\n\tCommits          func(repo api.RepoName, opt CommitsOptions) ([]*Commit, error)\n\tMergeBase        func(repo api.RepoName, a, b api.CommitID) (api.CommitID, error)\n} = ...\n```\n\nMocks is used to mock behavior in tests. Tests must call ResetMocks() when finished to ensure its mocks are not (inadvertently) used by subsequent tests. \n\n(The emptyMocks is used by ResetMocks to zero out Mocks without needing to use a named type.) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#errLogOnelineBatchScannerClosed",
              "documentation": {
                "identifier": "errLogOnelineBatchScannerClosed",
                "newPage": false,
                "searchKey": "git.errLogOnelineBatchScannerClosed",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errLogOnelineBatchScannerClosed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errLogOnelineBatchScannerClosed = errors.New(\"logOnelineBatchScanner closed\")\n```\n\nerrLogOnelineBatchScannerClosed is returned if a read is attempted on a closed logOnelineBatchScanner. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#gitCmdAllowlist",
              "documentation": {
                "identifier": "gitCmdAllowlist",
                "newPage": false,
                "searchKey": "git.gitCmdAllowlist",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var gitCmdAllowlist"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar gitCmdAllowlist = ...\n```\n\ngitCmdAllowlist are commands and arguments that are allowed to execute when calling ExecSafe. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#gitCommonAllowlist",
              "documentation": {
                "identifier": "gitCommonAllowlist",
                "newPage": false,
                "searchKey": "git.gitCommonAllowlist",
                "tags": [
                  "variable",
                  "array",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var gitCommonAllowlist"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar gitCommonAllowlist = ...\n```\n\n`git log`, `git show`, `git diff`, etc., share a large common set of allowed args. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#invalidBranch",
              "documentation": {
                "identifier": "invalidBranch",
                "newPage": false,
                "searchKey": "git.invalidBranch",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var invalidBranch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar invalidBranch = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#logEntryPattern",
              "documentation": {
                "identifier": "logEntryPattern",
                "newPage": false,
                "searchKey": "git.logEntryPattern",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var logEntryPattern"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar logEntryPattern = lazyregexp.New(`^\\s*([0-9]+)\\s+(.*)$`)\n```\n\nlogEntryPattern is the regexp pattern that matches entries in the output of the `git shortlog -sne` command. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#lsTreeRootCache",
              "documentation": {
                "identifier": "lsTreeRootCache",
                "newPage": false,
                "searchKey": "git.lsTreeRootCache",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var lsTreeRootCache"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar lsTreeRootCache = lru.New(5)\n```\n\nlsTreeRootCache caches the result of running `git ls-tree ...` on a repository's root path (because non-root paths are likely to have a lower cache hit rate). It is intended to improve the perceived performance of large monorepos, where the tree for a given repo+commit (usually the repo's latest commit on default branch) will be requested frequently and would take multiple seconds to compute if uncached. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#lsTreeRootCacheMu",
              "documentation": {
                "identifier": "lsTreeRootCacheMu",
                "newPage": false,
                "searchKey": "git.lsTreeRootCacheMu",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var lsTreeRootCacheMu"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar lsTreeRootCacheMu sync.Mutex\n```\n\nlsTreeRootCache caches the result of running `git ls-tree ...` on a repository's root path (because non-root paths are likely to have a lower cache hit rate). It is intended to improve the perceived performance of large monorepos, where the tree for a given repo+commit (usually the repo's latest commit on default branch) will be requested frequently and would take multiple seconds to compute if uncached. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#recordGetCommitQueries",
              "documentation": {
                "identifier": "recordGetCommitQueries",
                "newPage": false,
                "searchKey": "git.recordGetCommitQueries",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var recordGetCommitQueries"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar recordGetCommitQueries = os.Getenv(\"RECORD_GET_COMMIT_QUERIES\") == \"1\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#root",
              "documentation": {
                "identifier": "root",
                "newPage": false,
                "searchKey": "git.root",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var root"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar root string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#runCommitLog",
              "documentation": {
                "identifier": "runCommitLog",
                "newPage": false,
                "searchKey": "git.runCommitLog",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var runCommitLog"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar runCommitLog = ...\n```\n\nrunCommitLog sends the git command to gitserver. It interprets missing revision responses and converts them into RevisionNotFoundError. It is declared as a variable so that we can swap it out in tests \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#validRawLogDiffSearchFormatArgs",
              "documentation": {
                "identifier": "validRawLogDiffSearchFormatArgs",
                "newPage": false,
                "searchKey": "git.validRawLogDiffSearchFormatArgs",
                "tags": [
                  "variable",
                  "array",
                  "array",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var validRawLogDiffSearchFormatArgs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar validRawLogDiffSearchFormatArgs = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/vcs/git#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/vcs/git#BadCommitError",
              "documentation": {
                "identifier": "BadCommitError",
                "newPage": false,
                "searchKey": "git.BadCommitError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BadCommitError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BadCommitError struct {\n\tSpec   string\n\tCommit api.CommitID\n\tRepo   api.RepoName\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#BadCommitError.Error",
                    "documentation": {
                      "identifier": "BadCommitError.Error",
                      "newPage": false,
                      "searchKey": "git.BadCommitError.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e BadCommitError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e BadCommitError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#BehindAhead",
              "documentation": {
                "identifier": "BehindAhead",
                "newPage": false,
                "searchKey": "git.BehindAhead",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BehindAhead struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BehindAhead struct {\n\tBehind uint32 `json:\"Behind,omitempty\"`\n\tAhead  uint32 `json:\"Ahead,omitempty\"`\n}\n```\n\nBehindAhead is a set of behind/ahead counts. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#GetBehindAhead",
                    "documentation": {
                      "identifier": "GetBehindAhead",
                      "newPage": false,
                      "searchKey": "git.GetBehindAhead",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func GetBehindAhead(ctx context.Context, repo api.RepoName, left, right string) (*BehindAhead, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc GetBehindAhead(ctx context.Context, repo api.RepoName, left, right string) (*BehindAhead, error)\n```\n\nGetBehindAhead returns the behind/ahead commit counts information for right vs. left (both Git revspecs). \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#BlameOptions",
              "documentation": {
                "identifier": "BlameOptions",
                "newPage": false,
                "searchKey": "git.BlameOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BlameOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BlameOptions struct {\n\tNewestCommit api.CommitID `json:\",omitempty\" url:\",omitempty\"`\n\tOldestCommit api.CommitID `json:\",omitempty\" url:\",omitempty\"` // or \"\" for the root commit\n\n\tStartLine int `json:\",omitempty\" url:\",omitempty\"` // 1-indexed start byte (or 0 for beginning of file)\n\tEndLine   int `json:\",omitempty\" url:\",omitempty\"` // 1-indexed end byte (or 0 for end of file)\n}\n```\n\nBlameOptions configures a blame. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#Branch",
              "documentation": {
                "identifier": "Branch",
                "newPage": false,
                "searchKey": "git.Branch",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Branch struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Branch struct {\n\t// Name is the name of this branch.\n\tName string `json:\"Name,omitempty\"`\n\t// Head is the commit ID of this branch's head commit.\n\tHead api.CommitID `json:\"Head,omitempty\"`\n\t// Commit optionally contains commit information for this branch's head commit.\n\t// It is populated if IncludeCommit option is set.\n\tCommit *Commit `json:\"Commit,omitempty\"`\n\t// Counts optionally contains the commit counts relative to specified branch.\n\tCounts *BehindAhead `json:\"Counts,omitempty\"`\n}\n```\n\nA Branch is a VCS branch. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#Branches",
              "documentation": {
                "identifier": "Branches",
                "newPage": false,
                "searchKey": "git.Branches",
                "tags": [
                  "array",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Branches []*git.Branch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Branches []*Branch\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#Branches.Len",
                    "documentation": {
                      "identifier": "Branches.Len",
                      "newPage": false,
                      "searchKey": "git.Branches.Len",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Branches) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Branches) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#Branches.Less",
                    "documentation": {
                      "identifier": "Branches.Less",
                      "newPage": false,
                      "searchKey": "git.Branches.Less",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Branches) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Branches) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#Branches.Swap",
                    "documentation": {
                      "identifier": "Branches.Swap",
                      "newPage": false,
                      "searchKey": "git.Branches.Swap",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Branches) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Branches) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#BranchesOptions",
              "documentation": {
                "identifier": "BranchesOptions",
                "newPage": false,
                "searchKey": "git.BranchesOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BranchesOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BranchesOptions struct {\n\t// MergedInto will cause the returned list to be restricted to only\n\t// branches that were merged into this branch name.\n\tMergedInto string `json:\"MergedInto,omitempty\" url:\",omitempty\"`\n\t// IncludeCommit controls whether complete commit information is included.\n\tIncludeCommit bool `json:\"IncludeCommit,omitempty\" url:\",omitempty\"`\n\t// BehindAheadBranch specifies a branch name. If set to something other than blank\n\t// string, then each returned branch will include a behind/ahead commit counts\n\t// information against the specified base branch. If left blank, then branches will\n\t// not include that information and their Counts will be nil.\n\tBehindAheadBranch string `json:\"BehindAheadBranch,omitempty\" url:\",omitempty\"`\n\t// ContainsCommit filters the list of branches to only those that\n\t// contain a specific commit ID (if set).\n\tContainsCommit string `json:\"ContainsCommit,omitempty\" url:\",omitempty\"`\n}\n```\n\nBranchesOptions specifies options for the list of branches returned by (Repository).Branches. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ByAuthorDate",
              "documentation": {
                "identifier": "ByAuthorDate",
                "newPage": false,
                "searchKey": "git.ByAuthorDate",
                "tags": [
                  "array",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ByAuthorDate []*git.Branch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ByAuthorDate []*Branch\n```\n\nByAuthorDate sorts by author date. Requires full commit information to be included. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#ByAuthorDate.Len",
                    "documentation": {
                      "identifier": "ByAuthorDate.Len",
                      "newPage": false,
                      "searchKey": "git.ByAuthorDate.Len",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p ByAuthorDate) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p ByAuthorDate) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#ByAuthorDate.Less",
                    "documentation": {
                      "identifier": "ByAuthorDate.Less",
                      "newPage": false,
                      "searchKey": "git.ByAuthorDate.Less",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p ByAuthorDate) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p ByAuthorDate) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#ByAuthorDate.Swap",
                    "documentation": {
                      "identifier": "ByAuthorDate.Swap",
                      "newPage": false,
                      "searchKey": "git.ByAuthorDate.Swap",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p ByAuthorDate) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p ByAuthorDate) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#Commit",
              "documentation": {
                "identifier": "Commit",
                "newPage": false,
                "searchKey": "git.Commit",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Commit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Commit struct {\n\tID        api.CommitID `json:\"ID,omitempty\"`\n\tAuthor    Signature    `json:\"Author\"`\n\tCommitter *Signature   `json:\"Committer,omitempty\"`\n\tMessage   Message      `json:\"Message,omitempty\"`\n\t// Parents are the commit IDs of this commit's parent commits.\n\tParents []api.CommitID `json:\"Parents,omitempty\"`\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#FindNearestCommit",
                    "documentation": {
                      "identifier": "FindNearestCommit",
                      "newPage": false,
                      "searchKey": "git.FindNearestCommit",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func FindNearestCommit(ctx context.Context, repoName api.RepoName, revSpec string, target time.Time) (*Commit, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc FindNearestCommit(ctx context.Context, repoName api.RepoName, revSpec string, target time.Time) (*Commit, error)\n```\n\nFindNearestCommit finds the commit in the given repository revSpec (e.g. `HEAD` or `mybranch`) whose author date most closely matches the target time. \n\nCan return a commit very far away if no nearby one exists. Can theoretically return nil, nil if no commits at all are found. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#FirstEverCommit",
                    "documentation": {
                      "identifier": "FirstEverCommit",
                      "newPage": false,
                      "searchKey": "git.FirstEverCommit",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func FirstEverCommit(ctx context.Context, repo api.RepoName) (*Commit, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc FirstEverCommit(ctx context.Context, repo api.RepoName) (*Commit, error)\n```\n\nFirstEverCommit returns the first commit ever made to the repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#GetCommit",
                    "documentation": {
                      "identifier": "GetCommit",
                      "newPage": false,
                      "searchKey": "git.GetCommit",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func GetCommit(ctx context.Context, repo api.RepoName, id api.CommitID, opt ResolveRevisionOptions) (*Commit, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc GetCommit(ctx context.Context, repo api.RepoName, id api.CommitID, opt ResolveRevisionOptions) (*Commit, error)\n```\n\nGetCommit returns the commit with the given commit ID, or ErrCommitNotFound if no such commit exists. \n\nThe remoteURLFunc is called to get the Git remote URL if it's not set in repo and if it is needed. The Git remote URL is only required if the gitserver doesn't already contain a clone of the repository or if the commit must be fetched from the remote. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#getCommit",
                    "documentation": {
                      "identifier": "getCommit",
                      "newPage": false,
                      "searchKey": "git.getCommit",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func getCommit(ctx context.Context, repo api.RepoName, id api.CommitID, opt ResolveRevisionOptions) (_ *Commit, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc getCommit(ctx context.Context, repo api.RepoName, id api.CommitID, opt ResolveRevisionOptions) (_ *Commit, err error)\n```\n\ngetCommit returns the commit with the given id. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#parseCommitFromLog",
                    "documentation": {
                      "identifier": "parseCommitFromLog",
                      "newPage": false,
                      "searchKey": "git.parseCommitFromLog",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseCommitFromLog(data []byte) (commit *Commit, refs []string, rest []byte, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseCommitFromLog(data []byte) (commit *Commit, refs []string, rest []byte, err error)\n```\n\nparseCommitFromLog parses the next commit from data and returns the commit and the remaining data. The data arg is a byte array that contains NUL-separated log fields as formatted by logFormatFlag. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#CommitsOptions",
              "documentation": {
                "identifier": "CommitsOptions",
                "newPage": false,
                "searchKey": "git.CommitsOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CommitsOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CommitsOptions struct {\n\tRange string // commit range (revspec, \"A..B\", \"A...B\", etc.)\n\n\tN    uint // limit the number of returned commits to this many (0 means no limit)\n\tSkip uint // skip this many commits at the beginning\n\n\tMessageQuery string // include only commits whose commit message contains this substring\n\n\tAuthor string // include only commits whose author matches this\n\tAfter  string // include only commits after this date\n\tBefore string // include only commits before this date\n\n\tReverse   bool // Whether or not commits should be given in reverse order (optional)\n\tDateOrder bool // Whether or not commits should be sorted by date (optional)\n\n\tPath string // only commits modifying the given path are selected (optional)\n\n\t// When true we opt out of attempting to fetch missing revisions\n\tNoEnsureRevision bool\n}\n```\n\nCommitsOptions specifies options for (Repository).Commits (Repository).CommitCount. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#DiffFileIterator",
              "documentation": {
                "identifier": "DiffFileIterator",
                "newPage": false,
                "searchKey": "git.DiffFileIterator",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DiffFileIterator struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DiffFileIterator struct {\n\trdr  io.ReadCloser\n\tmfdr *diff.MultiFileDiffReader\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#Diff",
                    "documentation": {
                      "identifier": "Diff",
                      "newPage": false,
                      "searchKey": "git.Diff",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Diff(ctx context.Context, opts DiffOptions) (*DiffFileIterator, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Diff(ctx context.Context, opts DiffOptions) (*DiffFileIterator, error)\n```\n\nDiff returns an iterator that can be used to access the diff between two commits on a per-file basis. The iterator must be closed with Close when no longer required. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#DiffFileIterator.Close",
                    "documentation": {
                      "identifier": "DiffFileIterator.Close",
                      "newPage": false,
                      "searchKey": "git.DiffFileIterator.Close",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *DiffFileIterator) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *DiffFileIterator) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#DiffFileIterator.Next",
                    "documentation": {
                      "identifier": "DiffFileIterator.Next",
                      "newPage": false,
                      "searchKey": "git.DiffFileIterator.Next",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *DiffFileIterator) Next() (*diff.FileDiff, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *DiffFileIterator) Next() (*diff.FileDiff, error)\n```\n\nNext returns the next file diff. If no more diffs are available, the diff will be nil and the error will be io.EOF. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#DiffOptions",
              "documentation": {
                "identifier": "DiffOptions",
                "newPage": false,
                "searchKey": "git.DiffOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DiffOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DiffOptions struct {\n\tRepo api.RepoName\n\n\t// These fields must be valid <commit> inputs as defined by gitrevisions(7).\n\tBase string\n\tHead string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#Highlight",
              "documentation": {
                "identifier": "Highlight",
                "newPage": false,
                "searchKey": "git.Highlight",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Highlight struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Highlight struct {\n\tLine      int // the 1-indexed line number\n\tCharacter int // the 1-indexed character on the line\n\tLength    int // the length of the highlight, in characters (on the same line)\n}\n```\n\nHighlight represents a highlighted region in a string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#Hunk",
              "documentation": {
                "identifier": "Hunk",
                "newPage": false,
                "searchKey": "git.Hunk",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Hunk struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Hunk struct {\n\tStartLine int // 1-indexed start line number\n\tEndLine   int // 1-indexed end line number\n\tStartByte int // 0-indexed start byte position (inclusive)\n\tEndByte   int // 0-indexed end byte position (exclusive)\n\tapi.CommitID\n\tAuthor  Signature\n\tMessage string\n}\n```\n\nA Hunk is a contiguous portion of a file associated with a commit. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#LogCommitSearchEvent",
              "documentation": {
                "identifier": "LogCommitSearchEvent",
                "newPage": false,
                "searchKey": "git.LogCommitSearchEvent",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LogCommitSearchEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LogCommitSearchEvent struct {\n\t// Results are new commit results found.\n\tResults []*LogCommitSearchResult\n\n\t// Complete is false when the results may have been parsed from only\n\t// partial output from the underlying git command (because, e.g., it timed\n\t// out during execution and only returned partial output).\n\t//\n\t// Complete defaults to true, but once false will remain false.\n\tComplete bool\n\n\t// Error is non-nil if an error occurred. It will be the last event if\n\t// set.\n\t//\n\t// Note: Results will be empty if Error is set.\n\tError error\n}\n```\n\nLogCommitSearchEvent are emitted by RawLogDiffSearchStream \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#LogCommitSearchResult",
              "documentation": {
                "identifier": "LogCommitSearchResult",
                "newPage": false,
                "searchKey": "git.LogCommitSearchResult",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LogCommitSearchResult struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LogCommitSearchResult struct {\n\tCommit         Commit      // the commit whose diff was matched\n\tDiff           *RawDiff    // the diff, with non-matching/irrelevant portions deleted (respecting diff syntax)\n\tDiffHighlights []Highlight // highlighted query matches in the diff\n\n\t// Refs is the list of ref names of this commit (from `git log --decorate`).\n\tRefs []string\n\n\t// SourceRefs is the list of ref names by which this commit was reached. (See\n\t// `git log --help` documentation on the `--source` flag.)\n\tSourceRefs []string\n\n\t// Incomplete indicates that this result may represent a subset of the actual data.\n\t// This can occur when the underlying command returns early due to an impending\n\t// timeout.\n\tIncomplete bool\n}\n```\n\nLogCommitSearchResult describes a matching diff from (Repository).RawLogDiffSearch. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#Message",
              "documentation": {
                "identifier": "Message",
                "newPage": false,
                "searchKey": "git.Message",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Message string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Message string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#Message.Body",
                    "documentation": {
                      "identifier": "Message.Body",
                      "newPage": false,
                      "searchKey": "git.Message.Body",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m Message) Body() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m Message) Body() string\n```\n\nBody returns the contents of the Git commit message after the subject. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#Message.Subject",
                    "documentation": {
                      "identifier": "Message.Subject",
                      "newPage": false,
                      "searchKey": "git.Message.Subject",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m Message) Subject() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m Message) Subject() string\n```\n\nSubject returns the first line of the commit message \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#OID",
              "documentation": {
                "identifier": "OID",
                "newPage": false,
                "searchKey": "git.OID",
                "tags": [
                  "array",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OID [20]byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OID [20]byte\n```\n\nOID is a Git OID (40-char hex-encoded). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#GetObject",
                    "documentation": {
                      "identifier": "GetObject",
                      "newPage": false,
                      "searchKey": "git.GetObject",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func GetObject(ctx context.Context, repo api.RepoName, objectName string) (oid OID, objectType ObjectType, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc GetObject(ctx context.Context, repo api.RepoName, objectName string) (oid OID, objectType ObjectType, err error)\n```\n\nGetObject looks up a Git object and returns information about it. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#decodeOID",
                    "documentation": {
                      "identifier": "decodeOID",
                      "newPage": false,
                      "searchKey": "git.decodeOID",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func decodeOID(sha string) (OID, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc decodeOID(sha string) (OID, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#OID.String",
                    "documentation": {
                      "identifier": "OID.String",
                      "newPage": false,
                      "searchKey": "git.OID.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (oid OID) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (oid OID) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ObjectInfo",
              "documentation": {
                "identifier": "ObjectInfo",
                "newPage": false,
                "searchKey": "git.ObjectInfo",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ObjectInfo interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ObjectInfo interface {\n\tOID() OID\n}\n```\n\nObjectInfo holds information about a Git object and is returned in (fs.FileInfo).Sys for blobs and trees from Stat/Lstat/ReadDir calls. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ObjectType",
              "documentation": {
                "identifier": "ObjectType",
                "newPage": false,
                "searchKey": "git.ObjectType",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ObjectType string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ObjectType string\n```\n\nObjectType is a valid Git object type (commit, tag, tree, and blob). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#PathOptions",
              "documentation": {
                "identifier": "PathOptions",
                "newPage": false,
                "searchKey": "git.PathOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PathOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PathOptions struct {\n\tIncludePatterns []string // include paths matching all of these patterns\n\tExcludePattern  string   // exclude paths matching any of these patterns\n\tIsRegExp        bool     // whether the pattern is a regexp (if false, treated as exact string)\n\tIsCaseSensitive bool     // whether the pattern should be matched case-sensitively\n}\n```\n\nPathOptions contains common options for commands that can be limited to only certain paths. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#PersonCount",
              "documentation": {
                "identifier": "PersonCount",
                "newPage": false,
                "searchKey": "git.PersonCount",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PersonCount struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PersonCount struct {\n\tName  string\n\tEmail string\n\tCount int32\n}\n```\n\nA PersonCount is a contributor to a repository. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#PersonCount.String",
                    "documentation": {
                      "identifier": "PersonCount.String",
                      "newPage": false,
                      "searchKey": "git.PersonCount.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *PersonCount) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *PersonCount) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#RawDiff",
              "documentation": {
                "identifier": "RawDiff",
                "newPage": false,
                "searchKey": "git.RawDiff",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RawDiff struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RawDiff struct {\n\tRaw string // the raw diff output\n}\n```\n\nA RawDiff represents changes between two commits. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#RawLogDiffSearchOptions",
              "documentation": {
                "identifier": "RawLogDiffSearchOptions",
                "newPage": false,
                "searchKey": "git.RawLogDiffSearchOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RawLogDiffSearchOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RawLogDiffSearchOptions struct {\n\t// Query specifies the search query to find.\n\tQuery TextSearchOptions\n\n\t// MatchChangedOccurrenceCount makes the operation run `git log -S` not `git log -G`.\n\t// See `git log --help` for more information.\n\tMatchChangedOccurrenceCount bool\n\n\t// Diff is whether the diff should be computed and returned.\n\tDiff bool\n\n\t// OnlyMatchingHunks makes the diff only include hunks that match the query. If false,\n\t// all hunks from files that match the query are included.\n\tOnlyMatchingHunks bool\n\n\t// Paths specifies the paths to include/exclude.\n\tPaths PathOptions\n\n\t// FormatArgs is a list of format args that are passed to the `git log` command.\n\t// Because the output is parsed, it is expected to be in a known format. If the\n\t// FormatArgs does not match one of the server's expected values, the operation\n\t// will fail.\n\t//\n\t// If nil, the default format args are used.\n\tFormatArgs []string\n\n\t// RawArgs is a list of non-format args that are passed to the `git log` command.\n\t// It should not contain any \"--\" elements; those should be passed using the Paths\n\t// field.\n\t//\n\t// No arguments that affect the format of the output should be present in this\n\t// slice.\n\tArgs []string\n}\n```\n\nRawLogDiffSearchOptions specifies options to (Repository).RawLogDiffSearch. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#Ref",
              "documentation": {
                "identifier": "Ref",
                "newPage": false,
                "searchKey": "git.Ref",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Ref struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Ref struct {\n\tName     string // the full name of the ref (e.g., \"refs/heads/mybranch\")\n\tCommitID api.CommitID\n}\n```\n\nRef describes a Git ref. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#RefGlob",
              "documentation": {
                "identifier": "RefGlob",
                "newPage": false,
                "searchKey": "git.RefGlob",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RefGlob struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RefGlob struct {\n\t// Include is a glob pattern for including refs interpreted as in `git log --glob`. See the\n\t// git-log(1) manual page for details.\n\tInclude string\n\n\t// Exclude is a glob pattern for excluding refs interpreted as in `git log --exclude`. See the\n\t// git-log(1) manual page for details.\n\tExclude string\n}\n```\n\nRefGlob describes a glob pattern that either includes or excludes refs. Exactly 1 of the fields must be set. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#RefGlobs",
              "documentation": {
                "identifier": "RefGlobs",
                "newPage": false,
                "searchKey": "git.RefGlobs",
                "tags": [
                  "array",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RefGlobs []git.compiledRefGlobPattern"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RefGlobs []compiledRefGlobPattern\n```\n\nRefGlobs is a compiled matcher based on RefGlob patterns. Use CompileRefGlobs to create it. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#CompileRefGlobs",
                    "documentation": {
                      "identifier": "CompileRefGlobs",
                      "newPage": false,
                      "searchKey": "git.CompileRefGlobs",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func CompileRefGlobs(globs []RefGlob) (RefGlobs, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc CompileRefGlobs(globs []RefGlob) (RefGlobs, error)\n```\n\nCompileRefGlobs compiles the ordered ref glob patterns (interpreted as in `git log --glob ... --exclude ...`; see the git-log(1) manual page) into a matcher. If the input patterns are invalid, an error is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#RefGlobs.Match",
                    "documentation": {
                      "identifier": "RefGlobs.Match",
                      "newPage": false,
                      "searchKey": "git.RefGlobs.Match",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (gs RefGlobs) Match(ref string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (gs RefGlobs) Match(ref string) bool\n```\n\nMatch reports whether the named ref matches the ref globs. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ResolveRevisionOptions",
              "documentation": {
                "identifier": "ResolveRevisionOptions",
                "newPage": false,
                "searchKey": "git.ResolveRevisionOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolveRevisionOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolveRevisionOptions struct {\n\tNoEnsureRevision bool // do not try to fetch from remote if revision doesn't exist locally\n}\n```\n\nResolveRevisionOptions configure how we resolve revisions. The zero value should contain appropriate default values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ShortLogOptions",
              "documentation": {
                "identifier": "ShortLogOptions",
                "newPage": false,
                "searchKey": "git.ShortLogOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ShortLogOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ShortLogOptions struct {\n\tRange string // the range for which stats will be fetched\n\tAfter string // the date after which to collect commits\n\tPath  string // compute stats for commits that touch this path\n}\n```\n\nShortLogOptions contains options for (Repository).ShortLog. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#Signature",
              "documentation": {
                "identifier": "Signature",
                "newPage": false,
                "searchKey": "git.Signature",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Signature struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Signature struct {\n\tName  string    `json:\"Name,omitempty\"`\n\tEmail string    `json:\"Email,omitempty\"`\n\tDate  time.Time `json:\"Date\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#Submodule",
              "documentation": {
                "identifier": "Submodule",
                "newPage": false,
                "searchKey": "git.Submodule",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Submodule struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Submodule struct {\n\t// URL is the submodule repository clone URL.\n\tURL string\n\n\t// Path is the path of the submodule relative to the repository root.\n\tPath string\n\n\t// CommitID is the pinned commit ID of the submodule (in the\n\t// submodule repository's commit ID space).\n\tCommitID api.CommitID\n}\n```\n\nSubmodule holds information about a Git submodule and is returned in the FileInfo's Sys field by Stat/Lstat/ReadDir calls. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#Tag",
              "documentation": {
                "identifier": "Tag",
                "newPage": false,
                "searchKey": "git.Tag",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tag struct {\n\tName         string `json:\"Name,omitempty\"`\n\tapi.CommitID `json:\"CommitID,omitempty\"`\n\tCreatorDate  time.Time\n}\n```\n\nA Tag is a VCS tag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#Tags",
              "documentation": {
                "identifier": "Tags",
                "newPage": false,
                "searchKey": "git.Tags",
                "tags": [
                  "array",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tags []*git.Tag"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tags []*Tag\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#Tags.Len",
                    "documentation": {
                      "identifier": "Tags.Len",
                      "newPage": false,
                      "searchKey": "git.Tags.Len",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Tags) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Tags) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#Tags.Less",
                    "documentation": {
                      "identifier": "Tags.Less",
                      "newPage": false,
                      "searchKey": "git.Tags.Less",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Tags) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Tags) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#Tags.Swap",
                    "documentation": {
                      "identifier": "Tags.Swap",
                      "newPage": false,
                      "searchKey": "git.Tags.Swap",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Tags) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Tags) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TextSearchOptions",
              "documentation": {
                "identifier": "TextSearchOptions",
                "newPage": false,
                "searchKey": "git.TextSearchOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TextSearchOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TextSearchOptions struct {\n\tPattern         string // the pattern to look for\n\tIsRegExp        bool   // whether the pattern is a regexp (if false, treated as exact string)\n\tIsCaseSensitive bool   // whether the pattern should be matched case-sensitively\n}\n```\n\nTextSearchOptions contains common options for text search commands. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#blobReader",
              "documentation": {
                "identifier": "blobReader",
                "newPage": false,
                "searchKey": "git.blobReader",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type blobReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype blobReader struct {\n\tctx    context.Context\n\trepo   api.RepoName\n\tcommit api.CommitID\n\tname   string\n\tcmd    *gitserver.Cmd\n\trc     io.ReadCloser\n}\n```\n\nblobReader, which should be created using newBlobReader, is a struct that allows us to get a ReadCloser to a specific named file at a specific commit \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#newBlobReader",
                    "documentation": {
                      "identifier": "newBlobReader",
                      "newPage": false,
                      "searchKey": "git.newBlobReader",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newBlobReader(ctx context.Context, repo api.RepoName, commit api.CommitID, name string) (*blobReader, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newBlobReader(ctx context.Context, repo api.RepoName, commit api.CommitID, name string) (*blobReader, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#blobReader.Close",
                    "documentation": {
                      "identifier": "blobReader.Close",
                      "newPage": false,
                      "searchKey": "git.blobReader.Close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (br *blobReader) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (br *blobReader) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#blobReader.Read",
                    "documentation": {
                      "identifier": "blobReader.Read",
                      "newPage": false,
                      "searchKey": "git.blobReader.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (br *blobReader) Read(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (br *blobReader) Read(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#blobReader.convertError",
                    "documentation": {
                      "identifier": "blobReader.convertError",
                      "newPage": false,
                      "searchKey": "git.blobReader.convertError",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (br *blobReader) convertError(err error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (br *blobReader) convertError(err error) error\n```\n\nconvertError converts an error returned from 'git show' into a more appropriate error type \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#branchFilter",
              "documentation": {
                "identifier": "branchFilter",
                "newPage": false,
                "searchKey": "git.branchFilter",
                "tags": [
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type branchFilter map[string]struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype branchFilter map[string]struct{}\n```\n\nbranchFilter is a filter for branch names. If not empty, only contained branch names are allowed. If empty, all names are allowed. The map should be made so it's not nil. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#branchFilter.add",
                    "documentation": {
                      "identifier": "branchFilter.add",
                      "newPage": false,
                      "searchKey": "git.branchFilter.add",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f branchFilter) add(list []string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f branchFilter) add(list []string)\n```\n\nadd adds a slice of strings to the filter. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#branchFilter.allows",
                    "documentation": {
                      "identifier": "branchFilter.allows",
                      "newPage": false,
                      "searchKey": "git.branchFilter.allows",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f branchFilter) allows(name string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f branchFilter) allows(name string) bool\n```\n\nallows will return true if the current filter set-up validates against the passed string. If there are no filters, all strings pass. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#byteSlices",
              "documentation": {
                "identifier": "byteSlices",
                "newPage": false,
                "searchKey": "git.byteSlices",
                "tags": [
                  "array",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type byteSlices [][]byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype byteSlices [][]byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#byteSlices.Len",
                    "documentation": {
                      "identifier": "byteSlices.Len",
                      "newPage": false,
                      "searchKey": "git.byteSlices.Len",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p byteSlices) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p byteSlices) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#byteSlices.Less",
                    "documentation": {
                      "identifier": "byteSlices.Less",
                      "newPage": false,
                      "searchKey": "git.byteSlices.Less",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p byteSlices) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p byteSlices) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#byteSlices.Swap",
                    "documentation": {
                      "identifier": "byteSlices.Swap",
                      "newPage": false,
                      "searchKey": "git.byteSlices.Swap",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p byteSlices) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p byteSlices) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#closer",
              "documentation": {
                "identifier": "closer",
                "newPage": false,
                "searchKey": "git.closer",
                "tags": [
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type closer bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype closer bool\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#closer.Close",
                    "documentation": {
                      "identifier": "closer.Close",
                      "newPage": false,
                      "searchKey": "git.closer.Close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *closer) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *closer) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/vcs/git#closer.Read",
                    "documentation": {
                      "identifier": "closer.Read",
                      "newPage": false,
                      "searchKey": "git.closer.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *closer) Read(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *closer) Read(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#cmd",
              "documentation": {
                "identifier": "cmd",
                "newPage": false,
                "searchKey": "git.cmd",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type cmd interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype cmd interface {\n\tOutput(context.Context) ([]byte, error)\n\tString() string\n}\n```\n\ncmd is an executable Git command. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#cmdFunc",
              "documentation": {
                "identifier": "cmdFunc",
                "newPage": false,
                "searchKey": "git.cmdFunc",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type cmdFunc func(args []string) github.com/sourcegraph/sourcegraph/internal/vcs/git.cmd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype cmdFunc func(args []string) cmd\n```\n\ncmdFunc is a func that creates a new executable Git command. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#gitserverCmdFunc",
                    "documentation": {
                      "identifier": "gitserverCmdFunc",
                      "newPage": false,
                      "searchKey": "git.gitserverCmdFunc",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func gitserverCmdFunc(repo api.RepoName) cmdFunc"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc gitserverCmdFunc(repo api.RepoName) cmdFunc\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#compiledRefGlobPattern",
              "documentation": {
                "identifier": "compiledRefGlobPattern",
                "newPage": false,
                "searchKey": "git.compiledRefGlobPattern",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type compiledRefGlobPattern struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype compiledRefGlobPattern struct {\n\tpattern glob.Glob\n\tinclude bool // true for include, false for exclude\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#diffHunkLineInfo",
              "documentation": {
                "identifier": "diffHunkLineInfo",
                "newPage": false,
                "searchKey": "git.diffHunkLineInfo",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type diffHunkLineInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype diffHunkLineInfo struct {\n\tadded    bool // line starts with '+'\n\tremoved  bool // line starts with '-'\n\tmatching bool // line matches query (only computed for changed lines)\n\tcontext  bool // include because it's context for a matching changed line\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#diffHunkLineInfo.changed",
                    "documentation": {
                      "identifier": "diffHunkLineInfo.changed",
                      "newPage": false,
                      "searchKey": "git.diffHunkLineInfo.changed",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (info diffHunkLineInfo) changed() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (info diffHunkLineInfo) changed() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#objectInfo",
              "documentation": {
                "identifier": "objectInfo",
                "newPage": false,
                "searchKey": "git.objectInfo",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type objectInfo git.OID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype objectInfo OID\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#objectInfo.OID",
                    "documentation": {
                      "identifier": "objectInfo.OID",
                      "newPage": false,
                      "searchKey": "git.objectInfo.OID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (oid objectInfo) OID() OID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (oid objectInfo) OID() OID\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#onelineCommit",
              "documentation": {
                "identifier": "onelineCommit",
                "newPage": false,
                "searchKey": "git.onelineCommit",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type onelineCommit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype onelineCommit struct {\n\tsha1      string // sha1 commit ID\n\tsourceRef string // `git log --source` source ref\n}\n```\n\nonelineCommit contains (a subset of the) information about a commit returned by `git log --oneline --source`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#refResolveCache",
              "documentation": {
                "identifier": "refResolveCache",
                "newPage": false,
                "searchKey": "git.refResolveCache",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type refResolveCache struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype refResolveCache struct {\n\tmu      sync.Mutex\n\tresults map[string]struct {\n\t\ttarget string\n\t\terr    error\n\t}\n}\n```\n\ncachedRefResolver is a short-lived cache for ref resolutions. Only use it for the lifetime of a single request and for a single repo. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/vcs/git#refResolveCache.resolveHEADSymbolicRef",
                    "documentation": {
                      "identifier": "refResolveCache.resolveHEADSymbolicRef",
                      "newPage": false,
                      "searchKey": "git.refResolveCache.resolveHEADSymbolicRef",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *refResolveCache) resolveHEADSymbolicRef(ctx context.Context, repo api.RepoName) (target string, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *refResolveCache) resolveHEADSymbolicRef(ctx context.Context, repo api.RepoName) (target string, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/vcs/git#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/vcs/git#AbbreviateRef",
              "documentation": {
                "identifier": "AbbreviateRef",
                "newPage": false,
                "searchKey": "git.AbbreviateRef",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func AbbreviateRef(ref string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc AbbreviateRef(ref string) string\n```\n\nAbbreviateRef removes the \"refs/heads/\" prefix from a given ref. If the ref doesn't have the prefix, it returns it unchanged. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#AppleTime",
              "documentation": {
                "identifier": "AppleTime",
                "newPage": false,
                "searchKey": "git.AppleTime",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func AppleTime(t string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc AppleTime(t string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#AsJSON",
              "documentation": {
                "identifier": "AsJSON",
                "newPage": false,
                "searchKey": "git.AsJSON",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func AsJSON(v interface{}) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc AsJSON(v interface{}) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#BlameFile",
              "documentation": {
                "identifier": "BlameFile",
                "newPage": false,
                "searchKey": "git.BlameFile",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BlameFile(ctx context.Context, repo api.RepoName, path string, opt *BlameOptions) ([]*Hunk, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BlameFile(ctx context.Context, repo api.RepoName, path string, opt *BlameOptions) ([]*Hunk, error)\n```\n\nBlameFile returns Git blame information about a file. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#CommitCount",
              "documentation": {
                "identifier": "CommitCount",
                "newPage": false,
                "searchKey": "git.CommitCount",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func CommitCount(ctx context.Context, repo api.RepoName, opt CommitsOptions) (uint, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CommitCount(ctx context.Context, repo api.RepoName, opt CommitsOptions) (uint, error)\n```\n\nCommitCount returns the number of commits that would be returned by Commits. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#Commits",
              "documentation": {
                "identifier": "Commits",
                "newPage": false,
                "searchKey": "git.Commits",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Commits(ctx context.Context, repo api.RepoName, opt CommitsOptions) ([]*Commit, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Commits(ctx context.Context, repo api.RepoName, opt CommitsOptions) ([]*Commit, error)\n```\n\nCommits returns all commits matching the options. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#CommitsEqual",
              "documentation": {
                "identifier": "CommitsEqual",
                "newPage": false,
                "searchKey": "git.CommitsEqual",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func CommitsEqual(a, b *Commit) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CommitsEqual(a, b *Commit) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#CompilePathMatcher",
              "documentation": {
                "identifier": "CompilePathMatcher",
                "newPage": false,
                "searchKey": "git.CompilePathMatcher",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func CompilePathMatcher(options PathOptions) (pathmatch.PathMatcher, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CompilePathMatcher(options PathOptions) (pathmatch.PathMatcher, error)\n```\n\nCompilePathMatcher compiles the path options into a PathMatcher. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ComputeCommitHash",
              "documentation": {
                "identifier": "ComputeCommitHash",
                "newPage": false,
                "searchKey": "git.ComputeCommitHash",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ComputeCommitHash(repoDir string, git bool) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ComputeCommitHash(repoDir string, git bool) string\n```\n\nComputes hash of last commit in a given repo dir On Windows, content of a \"link file\" differs based on the tool that produced it. For example: - Cygwin may create four different link types, see [https://cygwin.com/cygwin-ug-net/using.html#pathnames-symlinks](https://cygwin.com/cygwin-ug-net/using.html#pathnames-symlinks), - MSYS's ln copies target file Such behavior makes impossible precalculation of SHA hashes to be used in TestRepository_FileSystem_Symlinks because for example Git for Windows ([http://git-scm.com](http://git-scm.com)) is not aware of symlinks and computes link file's SHA which may differ from original file content's SHA. As a temporary workaround, we calculating SHA hash by asking git/hg to compute it \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#EnsureRefPrefix",
              "documentation": {
                "identifier": "EnsureRefPrefix",
                "newPage": false,
                "searchKey": "git.EnsureRefPrefix",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func EnsureRefPrefix(ref string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc EnsureRefPrefix(ref string) string\n```\n\nEnsureRefPrefix checks whether the ref is a full ref and contains the \"refs/heads\" prefix (i.e. \"refs/heads/master\") or just an abbreviated ref (i.e. \"master\") and adds the \"refs/heads/\" prefix if the latter is the case. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ExecReader",
              "documentation": {
                "identifier": "ExecReader",
                "newPage": false,
                "searchKey": "git.ExecReader",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExecReader(ctx context.Context, repo api.RepoName, args []string) (io.ReadCloser, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExecReader(ctx context.Context, repo api.RepoName, args []string) (io.ReadCloser, error)\n```\n\nExecReader executes an arbitrary `git` command (`git [args...]`) and returns a reader connected to its stdout. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ExecSafe",
              "documentation": {
                "identifier": "ExecSafe",
                "newPage": false,
                "searchKey": "git.ExecSafe",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExecSafe(ctx context.Context, repo api.RepoName, params []string) (stdout, stderr []byte, exitCode int, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExecSafe(ctx context.Context, repo api.RepoName, params []string) (stdout, stderr []byte, exitCode int, err error)\n```\n\nExecSafe executes a Git subcommand iff it is allowed according to a allowlist. \n\nAn error is only returned when there is a failure unrelated to the actual command being executed. If the executed command exits with a nonzero exit code, err == nil. This is similar to how http.Get returns a nil error for HTTP non-2xx responses. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#GitCommand",
              "documentation": {
                "identifier": "GitCommand",
                "newPage": false,
                "searchKey": "git.GitCommand",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func GitCommand(dir, name string, args ...string) *exec.Cmd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc GitCommand(dir, name string, args ...string) *exec.Cmd\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#HasCommitAfter",
              "documentation": {
                "identifier": "HasCommitAfter",
                "newPage": false,
                "searchKey": "git.HasCommitAfter",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func HasCommitAfter(ctx context.Context, repo api.RepoName, date string, revspec string) (bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HasCommitAfter(ctx context.Context, repo api.RepoName, date string, revspec string) (bool, error)\n```\n\nHasCommitAfter indicates the staleness of a repository. It returns a boolean indicating if a repository contains a commit past a specified date. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#HumanReadableBranchName",
              "documentation": {
                "identifier": "HumanReadableBranchName",
                "newPage": false,
                "searchKey": "git.HumanReadableBranchName",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func HumanReadableBranchName(text string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HumanReadableBranchName(text string) string\n```\n\nHumanReadableBranchName returns a human readable branch name from the given text. It replaces unicode characters with their ASCII equivalent or similar and connects each component with a dash. \n\nExample: \"Change coördination mechanism\" -> \"change-coordination-mechanism\" \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#InitGitRepository",
              "documentation": {
                "identifier": "InitGitRepository",
                "newPage": false,
                "searchKey": "git.InitGitRepository",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func InitGitRepository(t testing.TB, cmds ...string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc InitGitRepository(t testing.TB, cmds ...string) string\n```\n\nInitGitRepository initializes a new Git repository and runs cmds in a new temporary directory (returned as dir). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#IsAbsoluteRevision",
              "documentation": {
                "identifier": "IsAbsoluteRevision",
                "newPage": false,
                "searchKey": "git.IsAbsoluteRevision",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsAbsoluteRevision(s string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsAbsoluteRevision(s string) bool\n```\n\nIsAbsoluteRevision checks if the revision is a git OID SHA string. \n\nNote: This doesn't mean the SHA exists in a repository, nor does it mean it isn't a ref. Git allows 40-char hexadecimal strings to be references. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ListBranches",
              "documentation": {
                "identifier": "ListBranches",
                "newPage": false,
                "searchKey": "git.ListBranches",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ListBranches(ctx context.Context, repo api.RepoName, opt BranchesOptions) ([]*Branch, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ListBranches(ctx context.Context, repo api.RepoName, opt BranchesOptions) ([]*Branch, error)\n```\n\nListBranches returns a list of all branches in the repository. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ListRefs",
              "documentation": {
                "identifier": "ListRefs",
                "newPage": false,
                "searchKey": "git.ListRefs",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ListRefs(ctx context.Context, repo api.RepoName) ([]Ref, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ListRefs(ctx context.Context, repo api.RepoName) ([]Ref, error)\n```\n\nListRefs returns a list of all refs in the repository. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ListTags",
              "documentation": {
                "identifier": "ListTags",
                "newPage": false,
                "searchKey": "git.ListTags",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ListTags(ctx context.Context, repo api.RepoName) ([]*Tag, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ListTags(ctx context.Context, repo api.RepoName) ([]*Tag, error)\n```\n\nListTags returns a list of all tags in the repository. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#LsFiles",
              "documentation": {
                "identifier": "LsFiles",
                "newPage": false,
                "searchKey": "git.LsFiles",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func LsFiles(ctx context.Context, repo api.RepoName, commit api.CommitID) ([]string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc LsFiles(ctx context.Context, repo api.RepoName, commit api.CommitID) ([]string, error)\n```\n\nLsFiles returns the output of `git ls-files` \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#Lstat",
              "documentation": {
                "identifier": "Lstat",
                "newPage": false,
                "searchKey": "git.Lstat",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Lstat(ctx context.Context, repo api.RepoName, commit api.CommitID, path string) (fs.FileInfo, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Lstat(ctx context.Context, repo api.RepoName, commit api.CommitID, path string) (fs.FileInfo, error)\n```\n\nLstat returns a FileInfo describing the named file at commit. If the file is a symbolic link, the returned FileInfo describes the symbolic link.  Lstat makes no attempt to follow the link. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#MakeGitRepository",
              "documentation": {
                "identifier": "MakeGitRepository",
                "newPage": false,
                "searchKey": "git.MakeGitRepository",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MakeGitRepository(t testing.TB, cmds ...string) api.RepoName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MakeGitRepository(t testing.TB, cmds ...string) api.RepoName\n```\n\nMakeGitRepository calls initGitRepository to create a new Git repository and returns a handle to it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#MergeBase",
              "documentation": {
                "identifier": "MergeBase",
                "newPage": false,
                "searchKey": "git.MergeBase",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MergeBase(ctx context.Context, repo api.RepoName, a, b api.CommitID) (api.CommitID, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MergeBase(ctx context.Context, repo api.RepoName, a, b api.CommitID) (api.CommitID, error)\n```\n\nMergeBase returns the merge base commit for the specified commits. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#MustParseTime",
              "documentation": {
                "identifier": "MustParseTime",
                "newPage": false,
                "searchKey": "git.MustParseTime",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MustParseTime(layout, value string) time.Time"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MustParseTime(layout, value string) time.Time\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#NewFileReader",
              "documentation": {
                "identifier": "NewFileReader",
                "newPage": false,
                "searchKey": "git.NewFileReader",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewFileReader(ctx context.Context, repo api.RepoName, commit api.CommitID, name string) (io.ReadCloser, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewFileReader(ctx context.Context, repo api.RepoName, commit api.CommitID, name string) (io.ReadCloser, error)\n```\n\nNewFileReader returns an io.ReadCloser reading from the named file at commit. The caller should always close the reader after use \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#RawLogDiffSearch",
              "documentation": {
                "identifier": "RawLogDiffSearch",
                "newPage": false,
                "searchKey": "git.RawLogDiffSearch",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RawLogDiffSearch(ctx context.Context, repo api.RepoName, opt RawLogDiffSearchOptions) (results []*LogCommitSearchResult, complete bool, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RawLogDiffSearch(ctx context.Context, repo api.RepoName, opt RawLogDiffSearchOptions) (results []*LogCommitSearchResult, complete bool, err error)\n```\n\nRawLogDiffSearch wraps RawLogDiffSearchStream providing a blocking API. See RawLogDiffSearchStream. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#RawLogDiffSearchStream",
              "documentation": {
                "identifier": "RawLogDiffSearchStream",
                "newPage": false,
                "searchKey": "git.RawLogDiffSearchStream",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RawLogDiffSearchStream(ctx context.Context, repo api.RepoName, opt RawLogDiffSearchOptions) <-chan LogCommitSearchEvent"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RawLogDiffSearchStream(ctx context.Context, repo api.RepoName, opt RawLogDiffSearchOptions) <-chan LogCommitSearchEvent\n```\n\nRawLogDiffSearchStream runs a raw `git log` command that is expected to return logs with patches. It returns a subset of the output, including only hunks that actually match the given pattern. \n\nThe returned channel must be read until closed, otherwise you may leak resources. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ReadDir",
              "documentation": {
                "identifier": "ReadDir",
                "newPage": false,
                "searchKey": "git.ReadDir",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ReadDir(ctx context.Context, repo api.RepoName, commit api.CommitID, path string, recurse bool) ([]fs.FileInfo, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ReadDir(ctx context.Context, repo api.RepoName, commit api.CommitID, path string, recurse bool) ([]fs.FileInfo, error)\n```\n\nReadDir reads the contents of the named directory at commit. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ReadFile",
              "documentation": {
                "identifier": "ReadFile",
                "newPage": false,
                "searchKey": "git.ReadFile",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ReadFile(ctx context.Context, repo api.RepoName, commit api.CommitID, name string, maxBytes int64) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ReadFile(ctx context.Context, repo api.RepoName, commit api.CommitID, name string, maxBytes int64) ([]byte, error)\n```\n\nReadFile returns the first maxBytes of the named file at commit. If maxBytes <= 0, the entire file is read. (If you just need to check a file's existence, use Stat, not ReadFile.) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ResetMocks",
              "documentation": {
                "identifier": "ResetMocks",
                "newPage": false,
                "searchKey": "git.ResetMocks",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ResetMocks()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ResetMocks()\n```\n\nResetMocks clears the mock functions set on Mocks (so that subsequent tests don't inadvertently use them). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ResolveRevision",
              "documentation": {
                "identifier": "ResolveRevision",
                "newPage": false,
                "searchKey": "git.ResolveRevision",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ResolveRevision(ctx context.Context, repo api.RepoName, spec string, opt ResolveRevisionOptions) (api.CommitID, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ResolveRevision(ctx context.Context, repo api.RepoName, spec string, opt ResolveRevisionOptions) (api.CommitID, error)\n```\n\nResolveRevision will return the absolute commit for a commit-ish spec. If spec is empty, HEAD is used. \n\nError cases: * Repo does not exist: vcs.RepoNotExistError * Commit does not exist: RevisionNotFoundError * Empty repository: RevisionNotFoundError * Other unexpected errors. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ShortLog",
              "documentation": {
                "identifier": "ShortLog",
                "newPage": false,
                "searchKey": "git.ShortLog",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ShortLog(ctx context.Context, repo api.RepoName, opt ShortLogOptions) ([]*PersonCount, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ShortLog(ctx context.Context, repo api.RepoName, opt ShortLogOptions) ([]*PersonCount, error)\n```\n\nShortLog returns the per-author commit statistics of the repo. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#Stat",
              "documentation": {
                "identifier": "Stat",
                "newPage": false,
                "searchKey": "git.Stat",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Stat(ctx context.Context, repo api.RepoName, commit api.CommitID, path string) (fs.FileInfo, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Stat(ctx context.Context, repo api.RepoName, commit api.CommitID, path string) (fs.FileInfo, error)\n```\n\nStat returns a FileInfo describing the named file at commit. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestDiff",
              "documentation": {
                "identifier": "TestDiff",
                "newPage": false,
                "searchKey": "git.TestDiff",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDiff(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDiff(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestDiffFileIterator",
              "documentation": {
                "identifier": "TestDiffFileIterator",
                "newPage": false,
                "searchKey": "git.TestDiffFileIterator",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDiffFileIterator(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDiffFileIterator(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestExecSafe",
              "documentation": {
                "identifier": "TestExecSafe",
                "newPage": false,
                "searchKey": "git.TestExecSafe",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExecSafe(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExecSafe(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestFilterAndHighlightDiff",
              "documentation": {
                "identifier": "TestFilterAndHighlightDiff",
                "newPage": false,
                "searchKey": "git.TestFilterAndHighlightDiff",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFilterAndHighlightDiff(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFilterAndHighlightDiff(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestGetObject",
              "documentation": {
                "identifier": "TestGetObject",
                "newPage": false,
                "searchKey": "git.TestGetObject",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetObject(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetObject(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestHumanReadableBranchName",
              "documentation": {
                "identifier": "TestHumanReadableBranchName",
                "newPage": false,
                "searchKey": "git.TestHumanReadableBranchName",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHumanReadableBranchName(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHumanReadableBranchName(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestIsAbsoluteRevision",
              "documentation": {
                "identifier": "TestIsAbsoluteRevision",
                "newPage": false,
                "searchKey": "git.TestIsAbsoluteRevision",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIsAbsoluteRevision(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIsAbsoluteRevision(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestLogOnelineBatchScanner_batchclosed",
              "documentation": {
                "identifier": "TestLogOnelineBatchScanner_batchclosed",
                "newPage": false,
                "searchKey": "git.TestLogOnelineBatchScanner_batchclosed",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLogOnelineBatchScanner_batchclosed(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLogOnelineBatchScanner_batchclosed(t *testing.T)\n```\n\nTest we return errLogOnelineBatchScannerClosed is returned. It is very complicated to ensure we cover the code paths we care about. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestLogOnelineBatchScanner_closed",
              "documentation": {
                "identifier": "TestLogOnelineBatchScanner_closed",
                "newPage": false,
                "searchKey": "git.TestLogOnelineBatchScanner_closed",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLogOnelineBatchScanner_closed(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLogOnelineBatchScanner_closed(t *testing.T)\n```\n\nThis test is much simpler since we just set the batchsize to 1 to ensure we only ever test the first attempt to read resultC \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestLogOnelineBatchScanner_debounce",
              "documentation": {
                "identifier": "TestLogOnelineBatchScanner_debounce",
                "newPage": false,
                "searchKey": "git.TestLogOnelineBatchScanner_debounce",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLogOnelineBatchScanner_debounce(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLogOnelineBatchScanner_debounce(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestLogOnelineBatchScanner_empty",
              "documentation": {
                "identifier": "TestLogOnelineBatchScanner_empty",
                "newPage": false,
                "searchKey": "git.TestLogOnelineBatchScanner_empty",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLogOnelineBatchScanner_empty(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLogOnelineBatchScanner_empty(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestLogOnelineBatchScanner_small",
              "documentation": {
                "identifier": "TestLogOnelineBatchScanner_small",
                "newPage": false,
                "searchKey": "git.TestLogOnelineBatchScanner_small",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLogOnelineBatchScanner_small(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLogOnelineBatchScanner_small(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestMain",
              "documentation": {
                "identifier": "TestMain",
                "newPage": false,
                "searchKey": "git.TestMain",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMain(m *testing.M)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMain(m *testing.M)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestMerger_MergeBase",
              "documentation": {
                "identifier": "TestMerger_MergeBase",
                "newPage": false,
                "searchKey": "git.TestMerger_MergeBase",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMerger_MergeBase(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMerger_MergeBase(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestMessage",
              "documentation": {
                "identifier": "TestMessage",
                "newPage": false,
                "searchKey": "git.TestMessage",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMessage(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMessage(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestParseShortLog",
              "documentation": {
                "identifier": "TestParseShortLog",
                "newPage": false,
                "searchKey": "git.TestParseShortLog",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseShortLog(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseShortLog(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRead",
              "documentation": {
                "identifier": "TestRead",
                "newPage": false,
                "searchKey": "git.TestRead",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRead(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRead(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRefGlobs",
              "documentation": {
                "identifier": "TestRefGlobs",
                "newPage": false,
                "searchKey": "git.TestRefGlobs",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRefGlobs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRefGlobs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRegexpToGlobBestEffort",
              "documentation": {
                "identifier": "TestRegexpToGlobBestEffort",
                "newPage": false,
                "searchKey": "git.TestRegexpToGlobBestEffort",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRegexpToGlobBestEffort(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRegexpToGlobBestEffort(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_BlameFile",
              "documentation": {
                "identifier": "TestRepository_BlameFile",
                "newPage": false,
                "searchKey": "git.TestRepository_BlameFile",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_BlameFile(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_BlameFile(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_Branches_BehindAheadCounts",
              "documentation": {
                "identifier": "TestRepository_Branches_BehindAheadCounts",
                "newPage": false,
                "searchKey": "git.TestRepository_Branches_BehindAheadCounts",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_Branches_BehindAheadCounts(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_Branches_BehindAheadCounts(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_Branches_ContainsCommit",
              "documentation": {
                "identifier": "TestRepository_Branches_ContainsCommit",
                "newPage": false,
                "searchKey": "git.TestRepository_Branches_ContainsCommit",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_Branches_ContainsCommit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_Branches_ContainsCommit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_Branches_IncludeCommit",
              "documentation": {
                "identifier": "TestRepository_Branches_IncludeCommit",
                "newPage": false,
                "searchKey": "git.TestRepository_Branches_IncludeCommit",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_Branches_IncludeCommit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_Branches_IncludeCommit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_Branches_MergedInto",
              "documentation": {
                "identifier": "TestRepository_Branches_MergedInto",
                "newPage": false,
                "searchKey": "git.TestRepository_Branches_MergedInto",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_Branches_MergedInto(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_Branches_MergedInto(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_Commits",
              "documentation": {
                "identifier": "TestRepository_Commits",
                "newPage": false,
                "searchKey": "git.TestRepository_Commits",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_Commits(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_Commits(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_Commits_options",
              "documentation": {
                "identifier": "TestRepository_Commits_options",
                "newPage": false,
                "searchKey": "git.TestRepository_Commits_options",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_Commits_options(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_Commits_options(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_Commits_options_path",
              "documentation": {
                "identifier": "TestRepository_Commits_options_path",
                "newPage": false,
                "searchKey": "git.TestRepository_Commits_options_path",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_Commits_options_path(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_Commits_options_path(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_FileSystem",
              "documentation": {
                "identifier": "TestRepository_FileSystem",
                "newPage": false,
                "searchKey": "git.TestRepository_FileSystem",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_FileSystem(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_FileSystem(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_FileSystem_Symlinks",
              "documentation": {
                "identifier": "TestRepository_FileSystem_Symlinks",
                "newPage": false,
                "searchKey": "git.TestRepository_FileSystem_Symlinks",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_FileSystem_Symlinks(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_FileSystem_Symlinks(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_FileSystem_gitSubmodules",
              "documentation": {
                "identifier": "TestRepository_FileSystem_gitSubmodules",
                "newPage": false,
                "searchKey": "git.TestRepository_FileSystem_gitSubmodules",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_FileSystem_gitSubmodules(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_FileSystem_gitSubmodules(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_FileSystem_quoteChars",
              "documentation": {
                "identifier": "TestRepository_FileSystem_quoteChars",
                "newPage": false,
                "searchKey": "git.TestRepository_FileSystem_quoteChars",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_FileSystem_quoteChars(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_FileSystem_quoteChars(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_FindNearestCommit",
              "documentation": {
                "identifier": "TestRepository_FindNearestCommit",
                "newPage": false,
                "searchKey": "git.TestRepository_FindNearestCommit",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_FindNearestCommit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_FindNearestCommit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_FirstEverCommit",
              "documentation": {
                "identifier": "TestRepository_FirstEverCommit",
                "newPage": false,
                "searchKey": "git.TestRepository_FirstEverCommit",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_FirstEverCommit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_FirstEverCommit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_GetCommit",
              "documentation": {
                "identifier": "TestRepository_GetCommit",
                "newPage": false,
                "searchKey": "git.TestRepository_GetCommit",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_GetCommit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_GetCommit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_HasCommitAfter",
              "documentation": {
                "identifier": "TestRepository_HasCommitAfter",
                "newPage": false,
                "searchKey": "git.TestRepository_HasCommitAfter",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_HasCommitAfter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_HasCommitAfter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_ListBranches",
              "documentation": {
                "identifier": "TestRepository_ListBranches",
                "newPage": false,
                "searchKey": "git.TestRepository_ListBranches",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_ListBranches(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_ListBranches(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_ListTags",
              "documentation": {
                "identifier": "TestRepository_ListTags",
                "newPage": false,
                "searchKey": "git.TestRepository_ListTags",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_ListTags(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_ListTags(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_RawLogDiffSearch",
              "documentation": {
                "identifier": "TestRepository_RawLogDiffSearch",
                "newPage": false,
                "searchKey": "git.TestRepository_RawLogDiffSearch",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_RawLogDiffSearch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_RawLogDiffSearch(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_RawLogDiffSearch_empty",
              "documentation": {
                "identifier": "TestRepository_RawLogDiffSearch_empty",
                "newPage": false,
                "searchKey": "git.TestRepository_RawLogDiffSearch_empty",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_RawLogDiffSearch_empty(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_RawLogDiffSearch_empty(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_ResolveBranch",
              "documentation": {
                "identifier": "TestRepository_ResolveBranch",
                "newPage": false,
                "searchKey": "git.TestRepository_ResolveBranch",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_ResolveBranch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_ResolveBranch(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_ResolveBranch_error",
              "documentation": {
                "identifier": "TestRepository_ResolveBranch_error",
                "newPage": false,
                "searchKey": "git.TestRepository_ResolveBranch_error",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_ResolveBranch_error(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_ResolveBranch_error(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_ResolveTag",
              "documentation": {
                "identifier": "TestRepository_ResolveTag",
                "newPage": false,
                "searchKey": "git.TestRepository_ResolveTag",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_ResolveTag(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_ResolveTag(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_ResolveTag_error",
              "documentation": {
                "identifier": "TestRepository_ResolveTag_error",
                "newPage": false,
                "searchKey": "git.TestRepository_ResolveTag_error",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_ResolveTag_error(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_ResolveTag_error(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestRepository_parseTags_WithoutCreatorDate",
              "documentation": {
                "identifier": "TestRepository_parseTags_WithoutCreatorDate",
                "newPage": false,
                "searchKey": "git.TestRepository_parseTags_WithoutCreatorDate",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_parseTags_WithoutCreatorDate(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_parseTags_WithoutCreatorDate(t *testing.T)\n```\n\nSee [https://github.com/sourcegraph/sourcegraph/issues/5453](https://github.com/sourcegraph/sourcegraph/issues/5453) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestSplitHunkMatches",
              "documentation": {
                "identifier": "TestSplitHunkMatches",
                "newPage": false,
                "searchKey": "git.TestSplitHunkMatches",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSplitHunkMatches(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSplitHunkMatches(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestTruncateLongLines",
              "documentation": {
                "identifier": "TestTruncateLongLines",
                "newPage": false,
                "searchKey": "git.TestTruncateLongLines",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTruncateLongLines(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTruncateLongLines(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#TestValidateBranchName",
              "documentation": {
                "identifier": "TestValidateBranchName",
                "newPage": false,
                "searchKey": "git.TestValidateBranchName",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValidateBranchName(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValidateBranchName(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ValidateBranchName",
              "documentation": {
                "identifier": "ValidateBranchName",
                "newPage": false,
                "searchKey": "git.ValidateBranchName",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ValidateBranchName(branch string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ValidateBranchName(branch string) bool\n```\n\nValidateBranchName returns false if the given string is not a valid branch name. It follows the rules here: [https://git-scm.com/docs/git-check-ref-format](https://git-scm.com/docs/git-check-ref-format) NOTE: It does not require a slash as mentioned in point 2. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#blameFileCmd",
              "documentation": {
                "identifier": "blameFileCmd",
                "newPage": false,
                "searchKey": "git.blameFileCmd",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func blameFileCmd(ctx context.Context, command cmdFunc, path string, opt *BlameOptions) ([]*Hunk, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc blameFileCmd(ctx context.Context, command cmdFunc, path string, opt *BlameOptions) ([]*Hunk, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#branches",
              "documentation": {
                "identifier": "branches",
                "newPage": false,
                "searchKey": "git.branches",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func branches(ctx context.Context, repo api.RepoName, args ...string) ([]string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc branches(ctx context.Context, repo api.RepoName, args ...string) ([]string, error)\n```\n\nbranches runs the `git branch` command followed by the given arguments and returns the list of branches if successful. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#checkSpecArgSafety",
              "documentation": {
                "identifier": "checkSpecArgSafety",
                "newPage": false,
                "searchKey": "git.checkSpecArgSafety",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkSpecArgSafety(spec string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkSpecArgSafety(spec string) error\n```\n\ncheckSpecArgSafety returns a non-nil err if spec begins with a \"-\", which could cause it to be interpreted as a git command line argument. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#commitLog",
              "documentation": {
                "identifier": "commitLog",
                "newPage": false,
                "searchKey": "git.commitLog",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func commitLog(ctx context.Context, repo api.RepoName, opt CommitsOptions) (commits []*Commit, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc commitLog(ctx context.Context, repo api.RepoName, opt CommitsOptions) (commits []*Commit, err error)\n```\n\ncommitLog returns a list of commits. \n\nThe caller is responsible for doing checkSpecArgSafety on opt.Head and opt.Base. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#commitLogArgs",
              "documentation": {
                "identifier": "commitLogArgs",
                "newPage": false,
                "searchKey": "git.commitLogArgs",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func commitLogArgs(initialArgs []string, opt CommitsOptions) (args []string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc commitLogArgs(initialArgs []string, opt CommitsOptions) (args []string, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#compilePathMatcher",
              "documentation": {
                "identifier": "compilePathMatcher",
                "newPage": false,
                "searchKey": "git.compilePathMatcher",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func compilePathMatcher(options PathOptions) (pathmatch.PathMatcher, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc compilePathMatcher(options PathOptions) (pathmatch.PathMatcher, error)\n```\n\ncompilePathMatcher compiles the path options into a PathMatcher. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#computeDiffHunkInfo",
              "documentation": {
                "identifier": "computeDiffHunkInfo",
                "newPage": false,
                "searchKey": "git.computeDiffHunkInfo",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func computeDiffHunkInfo(lines [][]byte, query *regexp.Regexp, matchContextLines int) []diffHunkLineInfo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc computeDiffHunkInfo(lines [][]byte, query *regexp.Regexp, matchContextLines int) []diffHunkLineInfo\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#deadlineLabel",
              "documentation": {
                "identifier": "deadlineLabel",
                "newPage": false,
                "searchKey": "git.deadlineLabel",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func deadlineLabel(ctx context.Context) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc deadlineLabel(ctx context.Context) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#diffHunkLineStatus",
              "documentation": {
                "identifier": "diffHunkLineStatus",
                "newPage": false,
                "searchKey": "git.diffHunkLineStatus",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func diffHunkLineStatus(line []byte) (added, removed bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc diffHunkLineStatus(line []byte) (added, removed bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#doLogDiffSearchStream",
              "documentation": {
                "identifier": "doLogDiffSearchStream",
                "newPage": false,
                "searchKey": "git.doLogDiffSearchStream",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func doLogDiffSearchStream(ctx context.Context, repo api.RepoName, opt RawLogDiffSearchOptions, c chan LogCommitSearchEvent) (complete bool, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc doLogDiffSearchStream(ctx context.Context, repo api.RepoName, opt RawLogDiffSearchOptions, c chan LogCommitSearchEvent) (complete bool, err error)\n```\n\ndoLogDiffSearchStream is called by RawLogDiffSearchStream to send events down c. It uses named return values to simplify sending errors down the channel. The return values can be ignored. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#ensureAbsoluteCommit",
              "documentation": {
                "identifier": "ensureAbsoluteCommit",
                "newPage": false,
                "searchKey": "git.ensureAbsoluteCommit",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ensureAbsoluteCommit(commitID api.CommitID) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ensureAbsoluteCommit(commitID api.CommitID) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#filterAndHighlightDiff",
              "documentation": {
                "identifier": "filterAndHighlightDiff",
                "newPage": false,
                "searchKey": "git.filterAndHighlightDiff",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func filterAndHighlightDiff(rawDiff []byte, query *regexp.Regexp, onlyMatchingHunks bool, pathMatcher pathmatch.PathMatcher) (_ []byte, _ []Highlight, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc filterAndHighlightDiff(rawDiff []byte, query *regexp.Regexp, onlyMatchingHunks bool, pathMatcher pathmatch.PathMatcher) (_ []byte, _ []Highlight, err error)\n```\n\nfilterAndHighlightDiff returns the raw diff with query matches highlighted and only hunks that satisfy the query (if onlyMatchingHunks) and path matcher. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#filterAndResolveRefs",
              "documentation": {
                "identifier": "filterAndResolveRefs",
                "newPage": false,
                "searchKey": "git.filterAndResolveRefs",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func filterAndResolveRefs(ctx context.Context, repo api.RepoName, refs []string, cache *refResolveCache) ([]string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc filterAndResolveRefs(ctx context.Context, repo api.RepoName, refs []string, cache *refResolveCache) ([]string, error)\n```\n\nfilterAndResolveRefs replaces \"HEAD\" entries with the names of the ref they refer to, and it omits \"HEAD -> ...\" entries. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#globQuoteMeta",
              "documentation": {
                "identifier": "globQuoteMeta",
                "newPage": false,
                "searchKey": "git.globQuoteMeta",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func globQuoteMeta(s []rune) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc globQuoteMeta(s []rune) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#init.main_test.go",
              "documentation": {
                "identifier": "init.main_test.go",
                "newPage": false,
                "searchKey": "git.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\ndone in init since the go vet analysis \"ctrlflow\" is tripped up if this is done as part of TestMain. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#isAllowedGitArg",
              "documentation": {
                "identifier": "isAllowedGitArg",
                "newPage": false,
                "searchKey": "git.isAllowedGitArg",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isAllowedGitArg(allowedArgs []string, arg string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isAllowedGitArg(allowedArgs []string, arg string) bool\n```\n\nisAllowedGitArg checks if the arg is allowed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#isAllowedGitCmd",
              "documentation": {
                "identifier": "isAllowedGitCmd",
                "newPage": false,
                "searchKey": "git.isAllowedGitCmd",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isAllowedGitCmd(args []string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isAllowedGitCmd(args []string) bool\n```\n\nisAllowedGitCmd checks if the cmd and arguments are allowed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#isBadObjectErr",
              "documentation": {
                "identifier": "isBadObjectErr",
                "newPage": false,
                "searchKey": "git.isBadObjectErr",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isBadObjectErr(output, obj string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isBadObjectErr(output, obj string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#isValidRawLogDiffSearchFormatArgs",
              "documentation": {
                "identifier": "isValidRawLogDiffSearchFormatArgs",
                "newPage": false,
                "searchKey": "git.isValidRawLogDiffSearchFormatArgs",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isValidRawLogDiffSearchFormatArgs(formatArgs []string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isValidRawLogDiffSearchFormatArgs(formatArgs []string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#lenientParseAddress",
              "documentation": {
                "identifier": "lenientParseAddress",
                "newPage": false,
                "searchKey": "git.lenientParseAddress",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func lenientParseAddress(address string) (*mail.Address, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc lenientParseAddress(address string) (*mail.Address, error)\n```\n\nlenientParseAddress is just like mail.ParseAddress, except that it treats the following somewhat-common malformed syntax where a user has misconfigured their email address as their name: \n\n```\nfoo@gmail.com <foo@gmail.com>\n\n```\nAs a valid name, whereas mail.ParseAddress would return an error: \n\n```\nmail: expected single address, got \"<foo@gmail.com>\"\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#logDiffCommonArgs",
              "documentation": {
                "identifier": "logDiffCommonArgs",
                "newPage": false,
                "searchKey": "git.logDiffCommonArgs",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func logDiffCommonArgs(opt RawLogDiffSearchOptions) []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc logDiffCommonArgs(opt RawLogDiffSearchOptions) []string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#logOnelineBatchScanner",
              "documentation": {
                "identifier": "logOnelineBatchScanner",
                "newPage": false,
                "searchKey": "git.logOnelineBatchScanner",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func logOnelineBatchScanner(scan func() (*onelineCommit, error), maxBatchSize int, debounce time.Duration) (next func() ([]*onelineCommit, error), cleanup func())"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc logOnelineBatchScanner(scan func() (*onelineCommit, error), maxBatchSize int, debounce time.Duration) (next func() ([]*onelineCommit, error), cleanup func())\n```\n\nlogOnelineBatchScanner wraps logOnelineScanner to batch up reads. \n\nnext will return at least 1 commit and at most maxBatchSize entries. After debounce time it will return what has been batched so far (or wait until an entry is available). The last response from next will return a non-nil error. \n\ncleanup must be called when done. This function creates a goroutine to batch up calls to scan. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#logOnelineScanner",
              "documentation": {
                "identifier": "logOnelineScanner",
                "newPage": false,
                "searchKey": "git.logOnelineScanner",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func logOnelineScanner(r io.Reader) func() (*onelineCommit, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc logOnelineScanner(r io.Reader) func() (*onelineCommit, error)\n```\n\nlogOnelineScanner parses the commits from the reader of: \n\n```\ngit log --pretty='format:%H %S' -z --source --no-patch\n\n```\nOnce it returns an error the scanner should be disregarded. io.EOF is returned when there is no more data to read. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#lsTree",
              "documentation": {
                "identifier": "lsTree",
                "newPage": false,
                "searchKey": "git.lsTree",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func lsTree(ctx context.Context, repo api.RepoName, commit api.CommitID, path string, recurse bool) ([]fs.FileInfo, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc lsTree(ctx context.Context, repo api.RepoName, commit api.CommitID, path string, recurse bool) ([]fs.FileInfo, error)\n```\n\nlsTree returns ls of tree at path. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#lsTreeUncached",
              "documentation": {
                "identifier": "lsTreeUncached",
                "newPage": false,
                "searchKey": "git.lsTreeUncached",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func lsTreeUncached(ctx context.Context, repo api.RepoName, commit api.CommitID, path string, recurse bool) ([]fs.FileInfo, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc lsTreeUncached(ctx context.Context, repo api.RepoName, commit api.CommitID, path string, recurse bool) ([]fs.FileInfo, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#parseShortLog",
              "documentation": {
                "identifier": "parseShortLog",
                "newPage": false,
                "searchKey": "git.parseShortLog",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseShortLog(out []byte) ([]*PersonCount, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseShortLog(out []byte) ([]*PersonCount, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#parseTags",
              "documentation": {
                "identifier": "parseTags",
                "newPage": false,
                "searchKey": "git.parseTags",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseTags(in []byte) ([]*Tag, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseTags(in []byte) ([]*Tag, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#rawLogSearchCmd",
              "documentation": {
                "identifier": "rawLogSearchCmd",
                "newPage": false,
                "searchKey": "git.rawLogSearchCmd",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func rawLogSearchCmd(ctx context.Context, repo api.RepoName, opt RawLogDiffSearchOptions) (*gitserver.Cmd, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc rawLogSearchCmd(ctx context.Context, repo api.RepoName, opt RawLogDiffSearchOptions) (*gitserver.Cmd, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#rawShowSearch",
              "documentation": {
                "identifier": "rawShowSearch",
                "newPage": false,
                "searchKey": "git.rawShowSearch",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func rawShowSearch(ctx context.Context, repo api.RepoName, opt RawLogDiffSearchOptions, cache *refResolveCache, onelineCommits []*onelineCommit) (results []*LogCommitSearchResult, complete bool, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc rawShowSearch(ctx context.Context, repo api.RepoName, opt RawLogDiffSearchOptions, cache *refResolveCache, onelineCommits []*onelineCommit) (results []*LogCommitSearchResult, complete bool, err error)\n```\n\nrawShowSearch runs git show on each commit in onelineCommits. We need to do this to further filter hunks. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#readFileBytes",
              "documentation": {
                "identifier": "readFileBytes",
                "newPage": false,
                "searchKey": "git.readFileBytes",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readFileBytes(ctx context.Context, repo api.RepoName, commit api.CommitID, name string, maxBytes int64) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readFileBytes(ctx context.Context, repo api.RepoName, commit api.CommitID, name string, maxBytes int64) ([]byte, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#readUntilTimeout",
              "documentation": {
                "identifier": "readUntilTimeout",
                "newPage": false,
                "searchKey": "git.readUntilTimeout",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readUntilTimeout(ctx context.Context, cmd *gitserver.Cmd) ([]byte, bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readUntilTimeout(ctx context.Context, cmd *gitserver.Cmd) ([]byte, bool, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#regexpToGlobBestEffort",
              "documentation": {
                "identifier": "regexpToGlobBestEffort",
                "newPage": false,
                "searchKey": "git.regexpToGlobBestEffort",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func regexpToGlobBestEffort(p string) (glob string, equiv bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc regexpToGlobBestEffort(p string) (glob string, equiv bool)\n```\n\nregexpToGlobBestEffort performs a best-effort conversion of the regexp p to an equivalent glob pattern. The glob matches a superset of what the regexp matches. If equiv is true, then the glob is exactly equivalent to the pattern; otherwise it is a strict superset and post-filtering is necessary. The glob never matches a strict subset of p (that would make it possible to correctly post-filter). \n\n[https://git-scm.com/docs/gitglossary#gitglossary-aiddefpathspecapathspec](https://git-scm.com/docs/gitglossary#gitglossary-aiddefpathspecapathspec) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#runRevParse",
              "documentation": {
                "identifier": "runRevParse",
                "newPage": false,
                "searchKey": "git.runRevParse",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func runRevParse(ctx context.Context, cmd *gitserver.Cmd, spec string) (api.CommitID, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runRevParse(ctx context.Context, cmd *gitserver.Cmd, spec string) (api.CommitID, error)\n```\n\nrunRevParse sends the git rev-parse command to gitserver. It interprets missing revision responses and converts them into RevisionNotFoundError. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#showRef",
              "documentation": {
                "identifier": "showRef",
                "newPage": false,
                "searchKey": "git.showRef",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func showRef(ctx context.Context, repo api.RepoName, args ...string) ([]Ref, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc showRef(ctx context.Context, repo api.RepoName, args ...string) ([]Ref, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#splitHunkMatches",
              "documentation": {
                "identifier": "splitHunkMatches",
                "newPage": false,
                "searchKey": "git.splitHunkMatches",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func splitHunkMatches(hunks []*diff.Hunk, query *regexp.Regexp, matchContextLines, maxLinesPerHunk int) (results []*diff.Hunk)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc splitHunkMatches(hunks []*diff.Hunk, query *regexp.Regexp, matchContextLines, maxLinesPerHunk int) (results []*diff.Hunk)\n```\n\nsplitHunkMatches returns a list of hunks that are a subset of the input hunks, filtered down to only hunks that match the query. Non-matching context lines and non-matching changed lines are eliminated, and the hunk header (start/end lines) are adjusted accordingly. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/vcs/git#truncateLongLines",
              "documentation": {
                "identifier": "truncateLongLines",
                "newPage": false,
                "searchKey": "git.truncateLongLines",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func truncateLongLines(data []byte, maxCharsPerLine int) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc truncateLongLines(data []byte, maxCharsPerLine int) []byte\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
