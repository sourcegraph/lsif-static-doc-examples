{
  "pathID": "/internal/rcache",
  "documentation": {
    "identifier": "rcache",
    "newPage": true,
    "searchKey": "internal/rcache",
    "tags": [
      "package",
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package rcache"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/rcache#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/rcache#DefaultMutexDelay",
              "documentation": {
                "identifier": "DefaultMutexDelay",
                "newPage": false,
                "searchKey": "rcache.DefaultMutexDelay",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DefaultMutexDelay"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DefaultMutexDelay = 512 * time.Millisecond\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/rcache#DefaultMutexExpiry",
              "documentation": {
                "identifier": "DefaultMutexExpiry",
                "newPage": false,
                "searchKey": "rcache.DefaultMutexExpiry",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DefaultMutexExpiry"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DefaultMutexExpiry = time.Minute\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/rcache#DefaultMutexTries",
              "documentation": {
                "identifier": "DefaultMutexTries",
                "newPage": false,
                "searchKey": "rcache.DefaultMutexTries",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DefaultMutexTries"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DefaultMutexTries = 3\n```\n\nWe make it low since we want to give up quickly. Failing to acquire the lock will be unrelated to failing to reach quorum. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/rcache#dataVersion",
              "documentation": {
                "identifier": "dataVersion",
                "newPage": false,
                "searchKey": "rcache.dataVersion",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const dataVersion"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst dataVersion = \"v2\"\n```\n\ndataVersion is used for releases that change type structure for data that may already be cached. Increasing this number will change the key prefix that is used for all hash keys, effectively resetting the cache at the same time the new code is deployed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/rcache#dataVersionToDelete",
              "documentation": {
                "identifier": "dataVersionToDelete",
                "newPage": false,
                "searchKey": "rcache.dataVersionToDelete",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const dataVersionToDelete"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst dataVersionToDelete = \"v1\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/rcache#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/rcache#deleteBatchSize",
              "documentation": {
                "identifier": "deleteBatchSize",
                "newPage": false,
                "searchKey": "rcache.deleteBatchSize",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var deleteBatchSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar deleteBatchSize = 5000\n```\n\nThe number of keys to delete per batch. The maximum number of keys that can be unpacked is determined by the Lua config LUAI_MAXCSTACK which is 8000 by default. See [https://www.lua.org/source/5.1/luaconf.h.html](https://www.lua.org/source/5.1/luaconf.h.html) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/rcache#globalPrefix",
              "documentation": {
                "identifier": "globalPrefix",
                "newPage": false,
                "searchKey": "rcache.globalPrefix",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var globalPrefix"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar globalPrefix = dataVersion\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/rcache#pool",
              "documentation": {
                "identifier": "pool",
                "newPage": false,
                "searchKey": "rcache.pool",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var pool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pool = redispool.Cache\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/rcache#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/rcache#Cache",
              "documentation": {
                "identifier": "Cache",
                "newPage": false,
                "searchKey": "rcache.Cache",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Cache struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Cache struct {\n\tkeyPrefix  string\n\tttlSeconds int\n}\n```\n\nCache implements httpcache.Cache \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/rcache#New",
                    "documentation": {
                      "identifier": "New",
                      "newPage": false,
                      "searchKey": "rcache.New",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func New(keyPrefix string) *Cache"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc New(keyPrefix string) *Cache\n```\n\nNew creates a redis backed Cache \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/rcache#NewWithTTL",
                    "documentation": {
                      "identifier": "NewWithTTL",
                      "newPage": false,
                      "searchKey": "rcache.NewWithTTL",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewWithTTL(keyPrefix string, ttlSeconds int) *Cache"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewWithTTL(keyPrefix string, ttlSeconds int) *Cache\n```\n\nNewWithTTL creates a redis backed Cache which expires values after ttlSeconds. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/rcache#Cache.Delete",
                    "documentation": {
                      "identifier": "Cache.Delete",
                      "newPage": false,
                      "searchKey": "rcache.Cache.Delete",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Cache) Delete(key string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Cache) Delete(key string)\n```\n\nDelete implements httpcache.Cache.Delete \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/rcache#Cache.Get",
                    "documentation": {
                      "identifier": "Cache.Get",
                      "newPage": false,
                      "searchKey": "rcache.Cache.Get",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Cache) Get(key string) ([]byte, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Cache) Get(key string) ([]byte, bool)\n```\n\nGet implements httpcache.Cache.Get \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/rcache#Cache.GetMulti",
                    "documentation": {
                      "identifier": "Cache.GetMulti",
                      "newPage": false,
                      "searchKey": "rcache.Cache.GetMulti",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Cache) GetMulti(keys ...string) [][]byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Cache) GetMulti(keys ...string) [][]byte\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/rcache#Cache.Set",
                    "documentation": {
                      "identifier": "Cache.Set",
                      "newPage": false,
                      "searchKey": "rcache.Cache.Set",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Cache) Set(key string, b []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Cache) Set(key string, b []byte)\n```\n\nSet implements httpcache.Cache.Set \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/rcache#Cache.SetMulti",
                    "documentation": {
                      "identifier": "Cache.SetMulti",
                      "newPage": false,
                      "searchKey": "rcache.Cache.SetMulti",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Cache) SetMulti(keyvals ...[2]string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Cache) SetMulti(keyvals ...[2]string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/rcache#Cache.rkeyPrefix",
                    "documentation": {
                      "identifier": "Cache.rkeyPrefix",
                      "newPage": false,
                      "searchKey": "rcache.Cache.rkeyPrefix",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Cache) rkeyPrefix() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Cache) rkeyPrefix() string\n```\n\nrkeyPrefix generates the actual key prefix we use on redis. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/rcache#MutexOptions",
              "documentation": {
                "identifier": "MutexOptions",
                "newPage": false,
                "searchKey": "rcache.MutexOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MutexOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MutexOptions struct {\n\t// Expiry sets how long a lock should be held. Under normal\n\t// operation it will be extended on an interval of (Expiry / 2)\n\tExpiry time.Duration\n\t// Tries is how many tries we have before we give up acquiring a\n\t// lock.\n\tTries int\n\t// RetryDelay is how long to sleep between attempts to lock\n\tRetryDelay time.Duration\n}\n```\n\nMutexOptions hold options passed to TryAcquireMutex. It is safe to pass zero values in which case defaults will be used instead. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/rcache#TB",
              "documentation": {
                "identifier": "TB",
                "newPage": false,
                "searchKey": "rcache.TB",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TB interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TB interface {\n\tName() string\n\tSkip(args ...interface{})\n\tHelper()\n}\n```\n\nTB is a subset of testing.TB \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/rcache#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/rcache#DeleteOldCacheData",
              "documentation": {
                "identifier": "DeleteOldCacheData",
                "newPage": false,
                "searchKey": "rcache.DeleteOldCacheData",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func DeleteOldCacheData(c redis.Conn) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc DeleteOldCacheData(c redis.Conn) error\n```\n\nDeleteOldCacheData deletes the rcache data in the given Redis instance that's prefixed with dataVersionToDelete \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/rcache#SetupForTest",
              "documentation": {
                "identifier": "SetupForTest",
                "newPage": false,
                "searchKey": "rcache.SetupForTest",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func SetupForTest(t TB)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SetupForTest(t TB)\n```\n\nSetupForTest adjusts the globalPrefix and clears it out. You will have conflicts if you do `t.Parallel()` \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/rcache#TestCache_deleteKeysWithPrefix",
              "documentation": {
                "identifier": "TestCache_deleteKeysWithPrefix",
                "newPage": false,
                "searchKey": "rcache.TestCache_deleteKeysWithPrefix",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCache_deleteKeysWithPrefix(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCache_deleteKeysWithPrefix(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/rcache#TestCache_multi",
              "documentation": {
                "identifier": "TestCache_multi",
                "newPage": false,
                "searchKey": "rcache.TestCache_multi",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCache_multi(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCache_multi(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/rcache#TestCache_namespace",
              "documentation": {
                "identifier": "TestCache_namespace",
                "newPage": false,
                "searchKey": "rcache.TestCache_namespace",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCache_namespace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCache_namespace(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/rcache#TestCache_simple",
              "documentation": {
                "identifier": "TestCache_simple",
                "newPage": false,
                "searchKey": "rcache.TestCache_simple",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCache_simple(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCache_simple(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/rcache#TestTryAcquireMutex",
              "documentation": {
                "identifier": "TestTryAcquireMutex",
                "newPage": false,
                "searchKey": "rcache.TestTryAcquireMutex",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTryAcquireMutex(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTryAcquireMutex(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/rcache#TryAcquireMutex",
              "documentation": {
                "identifier": "TryAcquireMutex",
                "newPage": false,
                "searchKey": "rcache.TryAcquireMutex",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TryAcquireMutex(ctx context.Context, name string, options MutexOptions) (context.Context, func(), bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TryAcquireMutex(ctx context.Context, name string, options MutexOptions) (context.Context, func(), bool)\n```\n\nTryAcquireMutex tries to Lock a distributed mutex. If the mutex is already locked, it will return `ctx, nil, false`. Otherwise it returns `ctx, release, true`. Release must be called to free the lock. The lock has a 1 minute lifetime, but a background routine extends it every 30 seconds. If, on release, we are unable to unlock the mutex it will continue to be locked until it is expired by Redis. The returned context will be cancelled if any of the following occur: * The parent context in cancelled * The release function is called * There is an error extending the lock expiry or the expiry can't be extended because \n\n```\nthey key no longer exists in Redis\n\n```\nA caller can therefore assume that they are the sole holder of the lock as long as the context has not been cancelled. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/rcache#bytes",
              "documentation": {
                "identifier": "bytes",
                "newPage": false,
                "searchKey": "rcache.bytes",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func bytes(s ...string) [][]byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc bytes(s ...string) [][]byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/rcache#deleteKeysWithPrefix",
              "documentation": {
                "identifier": "deleteKeysWithPrefix",
                "newPage": false,
                "searchKey": "rcache.deleteKeysWithPrefix",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func deleteKeysWithPrefix(c redis.Conn, prefix string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc deleteKeysWithPrefix(c redis.Conn, prefix string) error\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
