{
  "pathID": "/internal/repoupdater",
  "documentation": {
    "identifier": "repoupdater",
    "newPage": true,
    "searchKey": "internal/repoupdater",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package repoupdater"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/repoupdater#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/repoupdater#requestMeter",
              "documentation": {
                "identifier": "requestMeter",
                "newPage": false,
                "searchKey": "repoupdater.requestMeter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var requestMeter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar requestMeter = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repoupdater#DefaultClient",
              "documentation": {
                "identifier": "DefaultClient",
                "newPage": false,
                "searchKey": "repoupdater.DefaultClient",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var DefaultClient"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar DefaultClient = ...\n```\n\nDefaultClient is the default Client. Unless overwritten, it is connected to the server specified by the REPO_UPDATER_URL environment variable. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repoupdater#MockRepoLookup",
              "documentation": {
                "identifier": "MockRepoLookup",
                "newPage": false,
                "searchKey": "repoupdater.MockRepoLookup",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var MockRepoLookup"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar MockRepoLookup func(protocol.RepoLookupArgs) (*protocol.RepoLookupResult, error)\n```\n\nMockRepoLookup mocks (*Client).RepoLookup for tests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repoupdater#MockEnqueueRepoUpdate",
              "documentation": {
                "identifier": "MockEnqueueRepoUpdate",
                "newPage": false,
                "searchKey": "repoupdater.MockEnqueueRepoUpdate",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var MockEnqueueRepoUpdate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar MockEnqueueRepoUpdate func(ctx context.Context, repo api.RepoName) (*protocol.RepoUpdateResponse, error) = ...\n```\n\nMockEnqueueRepoUpdate mocks (*Client).EnqueueRepoUpdate for tests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/repoupdater#MockEnqueueChangesetSync",
              "documentation": {
                "identifier": "MockEnqueueChangesetSync",
                "newPage": false,
                "searchKey": "repoupdater.MockEnqueueChangesetSync",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var MockEnqueueChangesetSync"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar MockEnqueueChangesetSync func(ctx context.Context, ids []int64) error\n```\n\nMockEnqueueChangesetSync mocks (*Client).EnqueueChangesetSync for tests. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/repoupdater#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/repoupdater#Client",
              "documentation": {
                "identifier": "Client",
                "newPage": false,
                "searchKey": "repoupdater.Client",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Client struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Client struct {\n\t// URL to repoupdater server.\n\tURL string\n\n\t// HTTP client to use\n\tHTTPClient *http.Client\n}\n```\n\nClient is a repoupdater client. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repoupdater#NewClient",
                    "documentation": {
                      "identifier": "NewClient",
                      "newPage": false,
                      "searchKey": "repoupdater.NewClient",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewClient(serverURL string) *Client"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewClient(serverURL string) *Client\n```\n\nNewClient will initiate a new repoupdater Client with the given serverURL. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repoupdater#Client.RepoUpdateSchedulerInfo",
                    "documentation": {
                      "identifier": "Client.RepoUpdateSchedulerInfo",
                      "newPage": false,
                      "searchKey": "repoupdater.Client.RepoUpdateSchedulerInfo",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) RepoUpdateSchedulerInfo(ctx context.Context, args protocol.RepoUpdateSchedulerInfoArgs) (result *protocol.RepoUpdateSchedulerInfoResult, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) RepoUpdateSchedulerInfo(ctx context.Context, args protocol.RepoUpdateSchedulerInfoArgs) (result *protocol.RepoUpdateSchedulerInfoResult, err error)\n```\n\nRepoUpdateSchedulerInfo returns information about the state of the repo in the update scheduler. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repoupdater#Client.RepoLookup",
                    "documentation": {
                      "identifier": "Client.RepoLookup",
                      "newPage": false,
                      "searchKey": "repoupdater.Client.RepoLookup",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) RepoLookup(ctx context.Context, args protocol.RepoLookupArgs) (result *protocol.RepoLookupResult, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) RepoLookup(ctx context.Context, args protocol.RepoLookupArgs) (result *protocol.RepoLookupResult, err error)\n```\n\nRepoLookup retrieves information about the repository on repoupdater. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repoupdater#Client.EnqueueRepoUpdate",
                    "documentation": {
                      "identifier": "Client.EnqueueRepoUpdate",
                      "newPage": false,
                      "searchKey": "repoupdater.Client.EnqueueRepoUpdate",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) EnqueueRepoUpdate(ctx context.Context, repo api.RepoName) (*protocol.RepoUpdateResponse, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) EnqueueRepoUpdate(ctx context.Context, repo api.RepoName) (*protocol.RepoUpdateResponse, error)\n```\n\nEnqueueRepoUpdate requests that the named repository be updated in the near future. It does not wait for the update. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repoupdater#Client.EnqueueChangesetSync",
                    "documentation": {
                      "identifier": "Client.EnqueueChangesetSync",
                      "newPage": false,
                      "searchKey": "repoupdater.Client.EnqueueChangesetSync",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) EnqueueChangesetSync(ctx context.Context, ids []int64) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) EnqueueChangesetSync(ctx context.Context, ids []int64) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repoupdater#Client.SchedulePermsSync",
                    "documentation": {
                      "identifier": "Client.SchedulePermsSync",
                      "newPage": false,
                      "searchKey": "repoupdater.Client.SchedulePermsSync",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) SchedulePermsSync(ctx context.Context, args protocol.PermsSyncRequest) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) SchedulePermsSync(ctx context.Context, args protocol.PermsSyncRequest) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repoupdater#Client.SyncExternalService",
                    "documentation": {
                      "identifier": "Client.SyncExternalService",
                      "newPage": false,
                      "searchKey": "repoupdater.Client.SyncExternalService",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) SyncExternalService(ctx context.Context, svc api.ExternalService) (*protocol.ExternalServiceSyncResult, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) SyncExternalService(ctx context.Context, svc api.ExternalService) (*protocol.ExternalServiceSyncResult, error)\n```\n\nSyncExternalService requests the given external service to be synced. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repoupdater#Client.RepoExternalServices",
                    "documentation": {
                      "identifier": "Client.RepoExternalServices",
                      "newPage": false,
                      "searchKey": "repoupdater.Client.RepoExternalServices",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) RepoExternalServices(ctx context.Context, id api.RepoID) ([]api.ExternalService, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) RepoExternalServices(ctx context.Context, id api.RepoID) ([]api.ExternalService, error)\n```\n\nRepoExternalServices requests the external services associated with a repository with the given id. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repoupdater#Client.httpPost",
                    "documentation": {
                      "identifier": "Client.httpPost",
                      "newPage": false,
                      "searchKey": "repoupdater.Client.httpPost",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) httpPost(ctx context.Context, method string, payload interface{}) (resp *http.Response, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) httpPost(ctx context.Context, method string, payload interface{}) (resp *http.Response, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repoupdater#Client.do",
                    "documentation": {
                      "identifier": "Client.do",
                      "newPage": false,
                      "searchKey": "repoupdater.Client.do",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) do(ctx context.Context, req *http.Request) (_ *http.Response, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) do(ctx context.Context, req *http.Request) (_ *http.Response, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repoupdater#repoNotFoundError",
              "documentation": {
                "identifier": "repoNotFoundError",
                "newPage": false,
                "searchKey": "repoupdater.repoNotFoundError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repoNotFoundError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repoNotFoundError struct {\n\trepo         string\n\tresponseBody string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repoupdater#repoNotFoundError.NotFound",
                    "documentation": {
                      "identifier": "repoNotFoundError.NotFound",
                      "newPage": false,
                      "searchKey": "repoupdater.repoNotFoundError.NotFound",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (repoNotFoundError) NotFound() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (repoNotFoundError) NotFound() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repoupdater#repoNotFoundError.Error",
                    "documentation": {
                      "identifier": "repoNotFoundError.Error",
                      "newPage": false,
                      "searchKey": "repoupdater.repoNotFoundError.Error",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *repoNotFoundError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *repoNotFoundError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repoupdater#ErrNotFound",
              "documentation": {
                "identifier": "ErrNotFound",
                "newPage": false,
                "searchKey": "repoupdater.ErrNotFound",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ErrNotFound struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ErrNotFound struct {\n\tRepo       api.RepoName\n\tIsNotFound bool\n}\n```\n\nErrNotFound is an error that occurs when a Repo doesn't exist. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repoupdater#ErrNotFound.NotFound",
                    "documentation": {
                      "identifier": "ErrNotFound.NotFound",
                      "newPage": false,
                      "searchKey": "repoupdater.ErrNotFound.NotFound",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ErrNotFound) NotFound() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ErrNotFound) NotFound() bool\n```\n\nNotFound returns true if the repo does Not exist. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repoupdater#ErrNotFound.Error",
                    "documentation": {
                      "identifier": "ErrNotFound.Error",
                      "newPage": false,
                      "searchKey": "repoupdater.ErrNotFound.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ErrNotFound) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ErrNotFound) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repoupdater#ErrUnauthorized",
              "documentation": {
                "identifier": "ErrUnauthorized",
                "newPage": false,
                "searchKey": "repoupdater.ErrUnauthorized",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ErrUnauthorized struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ErrUnauthorized struct {\n\tRepo    api.RepoName\n\tNoAuthz bool\n}\n```\n\nErrUnauthorized is an error that occurs when repo access is unauthorized. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repoupdater#ErrUnauthorized.Unauthorized",
                    "documentation": {
                      "identifier": "ErrUnauthorized.Unauthorized",
                      "newPage": false,
                      "searchKey": "repoupdater.ErrUnauthorized.Unauthorized",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ErrUnauthorized) Unauthorized() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ErrUnauthorized) Unauthorized() bool\n```\n\nUnauthorized returns true if repo access is unauthorized. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repoupdater#ErrUnauthorized.Error",
                    "documentation": {
                      "identifier": "ErrUnauthorized.Error",
                      "newPage": false,
                      "searchKey": "repoupdater.ErrUnauthorized.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ErrUnauthorized) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ErrUnauthorized) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/repoupdater#ErrTemporary",
              "documentation": {
                "identifier": "ErrTemporary",
                "newPage": false,
                "searchKey": "repoupdater.ErrTemporary",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ErrTemporary struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ErrTemporary struct {\n\tRepo        api.RepoName\n\tIsTemporary bool\n}\n```\n\nErrTemporary is an error that can be retried \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/repoupdater#ErrTemporary.Temporary",
                    "documentation": {
                      "identifier": "ErrTemporary.Temporary",
                      "newPage": false,
                      "searchKey": "repoupdater.ErrTemporary.Temporary",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ErrTemporary) Temporary() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ErrTemporary) Temporary() bool\n```\n\nTemporary is when the repository was reported as being temporarily unavailable. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/repoupdater#ErrTemporary.Error",
                    "documentation": {
                      "identifier": "ErrTemporary.Error",
                      "newPage": false,
                      "searchKey": "repoupdater.ErrTemporary.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ErrTemporary) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ErrTemporary) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/repoupdater#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/repoupdater#TestNewClient",
              "documentation": {
                "identifier": "TestNewClient",
                "newPage": false,
                "searchKey": "repoupdater.TestNewClient",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewClient(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewClient(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/internal/repoupdater/protocol"
    }
  ]
}
