{
  "pathID": "/internal/httpserver",
  "documentation": {
    "identifier": "httpserver",
    "newPage": true,
    "searchKey": "internal/httpserver",
    "tags": [
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package httpserver"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/httpserver#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/httpserver#server",
              "documentation": {
                "identifier": "server",
                "newPage": false,
                "searchKey": "httpserver.server",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type server struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype server struct {\n\tserver       *http.Server\n\tmakeListener func() (net.Listener, error)\n\tonce         sync.Once\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/httpserver#server.Start",
                    "documentation": {
                      "identifier": "server.Start",
                      "newPage": false,
                      "searchKey": "httpserver.server.Start",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *server) Start()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *server) Start()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/httpserver#server.Stop",
                    "documentation": {
                      "identifier": "server.Stop",
                      "newPage": false,
                      "searchKey": "httpserver.server.Stop",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *server) Stop()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *server) Stop()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/httpserver#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/httpserver#NewHandler",
              "documentation": {
                "identifier": "NewHandler",
                "newPage": false,
                "searchKey": "httpserver.NewHandler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewHandler(setupRoutes func(router *mux.Router)) http.Handler"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewHandler(setupRoutes func(router *mux.Router)) http.Handler\n```\n\nNewHandler creates an HTTP handler with a default /healthz endpoint. If a function is provided, it will be invoked with a router on which additional routes can be installed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/httpserver#NewListener",
              "documentation": {
                "identifier": "NewListener",
                "newPage": false,
                "searchKey": "httpserver.NewListener",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewListener(addr string) (_ net.Listener, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewListener(addr string) (_ net.Listener, err error)\n```\n\nNewListener returns a TCP listener accepting connections on the given address. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/httpserver#SanitizeAddr",
              "documentation": {
                "identifier": "SanitizeAddr",
                "newPage": false,
                "searchKey": "httpserver.SanitizeAddr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func SanitizeAddr(addr string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SanitizeAddr(addr string) (string, error)\n```\n\nSanitizeAddr replaces the host in the given address with 127.0.0.1 if no host is supplied or if running in insecure dev mode. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/httpserver#New",
              "documentation": {
                "identifier": "New",
                "newPage": false,
                "searchKey": "httpserver.New",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func New(listener net.Listener, httpServer *http.Server) goroutine.BackgroundRoutine"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc New(listener net.Listener, httpServer *http.Server) goroutine.BackgroundRoutine\n```\n\nNew returns a BackgroundRoutine that serves the given server on the given listener. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/httpserver#NewFromAddr",
              "documentation": {
                "identifier": "NewFromAddr",
                "newPage": false,
                "searchKey": "httpserver.NewFromAddr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewFromAddr(addr string, httpServer *http.Server) goroutine.BackgroundRoutine"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewFromAddr(addr string, httpServer *http.Server) goroutine.BackgroundRoutine\n```\n\nNew returns a BackgroundRoutine that serves the given handler on the given address. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
