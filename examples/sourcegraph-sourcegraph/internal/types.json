{
  "pathID": "/internal/types",
  "documentation": {
    "identifier": "types",
    "newPage": true,
    "searchKey": "internal/types",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package types"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package types defines types used by the frontend. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/types#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/types#CloneStatusCloned",
              "documentation": {
                "identifier": "CloneStatusCloned",
                "newPage": false,
                "searchKey": "types.CloneStatusCloned",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const CloneStatusCloned"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst CloneStatusCloned CloneStatus = \"cloned\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#CloneStatusCloning",
              "documentation": {
                "identifier": "CloneStatusCloning",
                "newPage": false,
                "searchKey": "types.CloneStatusCloning",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const CloneStatusCloning"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst CloneStatusCloning CloneStatus = \"cloning\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#CloneStatusNotCloned",
              "documentation": {
                "identifier": "CloneStatusNotCloned",
                "newPage": false,
                "searchKey": "types.CloneStatusNotCloned",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const CloneStatusNotCloned"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst CloneStatusNotCloned CloneStatus = \"not_cloned\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#CloneStatusUnknown",
              "documentation": {
                "identifier": "CloneStatusUnknown",
                "newPage": false,
                "searchKey": "types.CloneStatusUnknown",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const CloneStatusUnknown"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst CloneStatusUnknown CloneStatus = \"\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#DefinitionsAction",
              "documentation": {
                "identifier": "DefinitionsAction",
                "newPage": false,
                "searchKey": "types.DefinitionsAction",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DefinitionsAction"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DefinitionsAction\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#HoverAction",
              "documentation": {
                "identifier": "HoverAction",
                "newPage": false,
                "searchKey": "types.HoverAction",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const HoverAction"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst HoverAction\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#PreciseSource",
              "documentation": {
                "identifier": "PreciseSource",
                "newPage": false,
                "searchKey": "types.PreciseSource",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const PreciseSource"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst PreciseSource\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#RedactedSecret",
              "documentation": {
                "identifier": "RedactedSecret",
                "newPage": false,
                "searchKey": "types.RedactedSecret",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const RedactedSecret"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst RedactedSecret = \"REDACTED\"\n```\n\nRedactedSecret is used as a placeholder for secret fields when reading external service config \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#ReferencesAction",
              "documentation": {
                "identifier": "ReferencesAction",
                "newPage": false,
                "searchKey": "types.ReferencesAction",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReferencesAction"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReferencesAction\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#SearchSource",
              "documentation": {
                "identifier": "SearchSource",
                "newPage": false,
                "searchKey": "types.SearchSource",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SearchSource"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SearchSource\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#UnknownAction",
              "documentation": {
                "identifier": "UnknownAction",
                "newPage": false,
                "searchKey": "types.UnknownAction",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const UnknownAction"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst UnknownAction CodeIntelAction = iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#UnknownSource",
              "documentation": {
                "identifier": "UnknownSource",
                "newPage": false,
                "searchKey": "types.UnknownSource",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const UnknownSource"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst UnknownSource CodeIntelSource = iota\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/types#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/types#Assert",
              "documentation": {
                "identifier": "Assert",
                "newPage": false,
                "searchKey": "types.Assert",
                "tags": [
                  "variable",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var Assert"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Assert = ...\n```\n\nAssert contains assertion functions to be used in tests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#Opt",
              "documentation": {
                "identifier": "Opt",
                "newPage": false,
                "searchKey": "types.Opt",
                "tags": [
                  "variable",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var Opt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Opt = ...\n```\n\nOpt contains functional options to be used in tests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#newValue",
              "documentation": {
                "identifier": "newValue",
                "newPage": false,
                "searchKey": "types.newValue",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var newValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar newValue = \"a different value\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/types#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/types#AggregatedPingStats",
              "documentation": {
                "identifier": "AggregatedPingStats",
                "newPage": false,
                "searchKey": "types.AggregatedPingStats",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AggregatedPingStats struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AggregatedPingStats struct {\n\tName        PingName\n\tTotalCount  int\n\tUniqueCount int\n}\n```\n\nAggregatedPingStats is a generic representation of an aggregated ping statistic \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#BatchChangesCohort",
              "documentation": {
                "identifier": "BatchChangesCohort",
                "newPage": false,
                "searchKey": "types.BatchChangesCohort",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchChangesCohort struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchChangesCohort struct {\n\t// Week is the week of this cohort and is used to group batch changes by\n\t// their creation date.\n\tWeek string\n\n\t// BatchChangesClosed is the number of batch changes that were created in Week and\n\t// are currently closed.\n\tBatchChangesClosed int64\n\n\t// BatchChangesOpen is the number of batch changes that were created in Week and\n\t// are currently open.\n\tBatchChangesOpen int64\n\n\tChangesetsImported        int64\n\tChangesetsUnpublished     int64\n\tChangesetsPublished       int64\n\tChangesetsPublishedOpen   int64\n\tChangesetsPublishedDraft  int64\n\tChangesetsPublishedMerged int64\n\tChangesetsPublishedClosed int64\n}\n```\n\nNOTE: DO NOT alter this struct without making a symmetric change to the updatecheck handler. This struct is marshalled and sent to BigQuery, which requires the input match its schema exactly. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#BatchChangesUsageStatistics",
              "documentation": {
                "identifier": "BatchChangesUsageStatistics",
                "newPage": false,
                "searchKey": "types.BatchChangesUsageStatistics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchChangesUsageStatistics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchChangesUsageStatistics struct {\n\t// ViewBatchChangeApplyPageCount is the number of page views on the apply page\n\t// (\"preview\" page).\n\tViewBatchChangeApplyPageCount int32\n\t// ViewBatchChangeDetailsPageAfterCreateCount is the number of page views on\n\t// the batch changes details page *after creating* the batch change on the apply\n\t// page by clicking \"Apply spec\".\n\tViewBatchChangeDetailsPageAfterCreateCount int32\n\t// ViewBatchChangeDetailsPageAfterUpdateCount is the number of page views on\n\t// the batch changes details page *after updating* a batch change on the apply page\n\t// by clicking \"Apply spec\".\n\tViewBatchChangeDetailsPageAfterUpdateCount int32\n\n\t// BatchChangesCount is the number of batch changes on the instance. This can go\n\t// down when users delete a batch change.\n\tBatchChangesCount int32\n\t// BatchChangesClosedCount is the number of *closed* batch changes on the\n\t// instance. This can go down when users delete a batch change.\n\tBatchChangesClosedCount int32\n\n\t// BatchSpecsCreatedCount is the number of batch change specs that have been\n\t// created by running `src batch [preview|apply]`. This number never\n\t// goes down since it's based on event logs, even if the batch specs\n\t// were not used and cleaned up.\n\tBatchSpecsCreatedCount int32\n\t// ChangesetSpecsCreatedCount is the number of changeset specs that have\n\t// been created by running `src batch [preview|apply]`. This number\n\t// never goes down since it's based on event logs, even if the changeset\n\t// specs were not used and cleaned up.\n\tChangesetSpecsCreatedCount int32\n\n\t// PublishedChangesetsUnpublishedCount is the number of changesets in the\n\t// database that have not been published but belong to a batch change.\n\t// This number *could* go down, since it's not\n\t// based on event logs, but so far (Mar 2021) we never cleaned up\n\t// changesets in the database.\n\tPublishedChangesetsUnpublishedCount int32\n\n\t// PublishedChangesetsCount is the number of changesets published on code hosts\n\t// by batch changes. This number *could* go down, since it's not based on\n\t// event logs, but so far (Mar 2021) we never cleaned up changesets in the\n\t// database.\n\tPublishedChangesetsCount int32\n\t// PublishedChangesetsDiffStatAddedSum is the total sum of lines added by\n\t// changesets published on the code host by batch changes.\n\tPublishedChangesetsDiffStatAddedSum int32\n\t// PublishedChangesetsDiffStatChangedSum is the total sum of lines changed by\n\t// changesets published on the code host by batch changes.\n\tPublishedChangesetsDiffStatChangedSum int32\n\t// PublishedChangesetsDiffStatDeletedSum is the total sum of lines deleted by\n\t// changesets published on the code host by batch changes.\n\tPublishedChangesetsDiffStatDeletedSum int32\n\n\t// PublishedChangesetsMergedCount is the number of changesets published on\n\t// code hosts by batch changes that have also been *merged*.\n\t// This number *could* go down, since it's not based on event logs, but\n\t// so far (Mar 2021) we never cleaned up changesets in the database.\n\tPublishedChangesetsMergedCount int32\n\t// PublishedChangesetsMergedDiffStatAddedSum is the total sum of lines added by\n\t// changesets published on the code host by batch changes and merged.\n\tPublishedChangesetsMergedDiffStatAddedSum int32\n\t// PublishedChangesetsMergedDiffStatChangedSum is the total sum of lines changed by\n\t// changesets published on the code host by batch changes and merged.\n\tPublishedChangesetsMergedDiffStatChangedSum int32\n\t// PublishedChangesetsMergedDiffStatDeletedSum is the total sum of lines deleted by\n\t// changesets published on the code host by batch changes and merged.\n\tPublishedChangesetsMergedDiffStatDeletedSum int32\n\n\t// ImportedChangesetsCount is the total number of changesets that have been\n\t// imported by a batch change to be tracked.\n\t// This number *could* go down, since it's not based on event logs, but\n\t// so far (Mar 2021) we never cleaned up changesets in the database.\n\tImportedChangesetsCount int32\n\t// ManualChangesetsCount is the total number of *merged* changesets that\n\t// have been imported by a batch change to be tracked.\n\t// This number *could* go down, since it's not based on event logs, but\n\t// so far (Mar 2021) we never cleaned up changesets in the database.\n\tImportedChangesetsMergedCount int32\n\n\t// CurrentMonthContributorsCount is the count of unique users that have logged a\n\t// \"contributing\" batch changes event, such as \"BatchChangeCreated\".\n\t//\n\t// See `contributorsEvents` in `GetBatchChangesUsageStatistics` for a full list\n\t// of events.\n\tCurrentMonthContributorsCount int64\n\n\t// CurrentMonthUsersCount is the count of unique users that have logged a\n\t// \"using\" batch changes event, such as \"ViewBatchChangesListPage\" and also \"BatchChangeCreated\".\n\t//\n\t// See `contributorsEvents` in `GetBatchChangesUsageStatistics` for a full\n\t// list of events.\n\tCurrentMonthUsersCount int64\n\n\tBatchChangesCohorts []*BatchChangesCohort\n}\n```\n\nNOTE: DO NOT alter this struct without making a symmetric change to the updatecheck handler. This struct is marshalled and sent to BigQuery, which requires the input match its schema exactly. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#BitbucketServerConnection",
              "documentation": {
                "identifier": "BitbucketServerConnection",
                "newPage": false,
                "searchKey": "types.BitbucketServerConnection",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BitbucketServerConnection struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BitbucketServerConnection struct {\n\t// The unique resource identifier of the external service.\n\tURN string\n\t*schema.BitbucketServerConnection\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#CloneStatus",
              "documentation": {
                "identifier": "CloneStatus",
                "newPage": false,
                "searchKey": "types.CloneStatus",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CloneStatus string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CloneStatus string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/types#ParseCloneStatus",
                    "documentation": {
                      "identifier": "ParseCloneStatus",
                      "newPage": false,
                      "searchKey": "types.ParseCloneStatus",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func ParseCloneStatus(s string) CloneStatus"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc ParseCloneStatus(s string) CloneStatus\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/types#CodeHostRepository",
              "documentation": {
                "identifier": "CodeHostRepository",
                "newPage": false,
                "searchKey": "types.CodeHostRepository",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CodeHostRepository struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CodeHostRepository struct {\n\tName       string\n\tCodeHostID int64\n\tPrivate    bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#CodeInsightsUsageStatistics",
              "documentation": {
                "identifier": "CodeInsightsUsageStatistics",
                "newPage": false,
                "searchKey": "types.CodeInsightsUsageStatistics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CodeInsightsUsageStatistics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CodeInsightsUsageStatistics struct {\n\tWeeklyUsageStatisticsByInsight []*InsightUsageStatistics\n\tWeeklyInsightsPageViews        *int32\n\tWeeklyInsightsUniquePageViews  *int32\n\tWeeklyInsightConfigureClick    *int32\n\tWeeklyInsightAddMoreClick      *int32\n\tWeekStart                      time.Time\n\tWeeklyInsightCreators          *int32\n\tWeeklyFirstTimeInsightCreators *int32\n\tWeeklyAggregatedUsage          []AggregatedPingStats\n\tInsightTimeIntervals           []InsightTimeIntervalPing\n\tInsightOrgVisible              []OrgVisibleInsightPing\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#CodeIntelAction",
              "documentation": {
                "identifier": "CodeIntelAction",
                "newPage": false,
                "searchKey": "types.CodeIntelAction",
                "tags": [
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CodeIntelAction int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CodeIntelAction int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#CodeIntelAggregatedEvent",
              "documentation": {
                "identifier": "CodeIntelAggregatedEvent",
                "newPage": false,
                "searchKey": "types.CodeIntelAggregatedEvent",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CodeIntelAggregatedEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CodeIntelAggregatedEvent struct {\n\tName        string\n\tLanguageID  *string\n\tWeek        time.Time\n\tTotalWeek   int32\n\tUniquesWeek int32\n}\n```\n\nCodeIntelAggregatedEvent represents the total events and unique users within the current week for a single event. The events are split again by language id code intel action (e.g. defintions, references, hovers), and the code intel data source (e.g. precise, search). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#CodeIntelEventSummary",
              "documentation": {
                "identifier": "CodeIntelEventSummary",
                "newPage": false,
                "searchKey": "types.CodeIntelEventSummary",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CodeIntelEventSummary struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CodeIntelEventSummary struct {\n\tAction          CodeIntelAction\n\tSource          CodeIntelSource\n\tLanguageID      string\n\tCrossRepository bool\n\tWAUs            int32\n\tTotalActions    int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#CodeIntelSource",
              "documentation": {
                "identifier": "CodeIntelSource",
                "newPage": false,
                "searchKey": "types.CodeIntelSource",
                "tags": [
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CodeIntelSource int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CodeIntelSource int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#CodeMonitoringUsageStatistics",
              "documentation": {
                "identifier": "CodeMonitoringUsageStatistics",
                "newPage": false,
                "searchKey": "types.CodeMonitoringUsageStatistics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CodeMonitoringUsageStatistics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CodeMonitoringUsageStatistics struct {\n\tCodeMonitoringPageViews                       *int32\n\tCreateCodeMonitorPageViews                    *int32\n\tCreateCodeMonitorPageViewsWithTriggerQuery    *int32\n\tCreateCodeMonitorPageViewsWithoutTriggerQuery *int32\n\tManageCodeMonitorPageViews                    *int32\n\tCodeMonitorEmailLinkClicks                    *int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#Event",
              "documentation": {
                "identifier": "Event",
                "newPage": false,
                "searchKey": "types.Event",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Event struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Event struct {\n\tID              int32\n\tName            string\n\tURL             string\n\tUserID          *int32\n\tAnonymousUserID string\n\tArgument        string\n\tSource          string\n\tVersion         string\n\tTimestamp       time.Time\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#ExtensionUsageStatistics",
              "documentation": {
                "identifier": "ExtensionUsageStatistics",
                "newPage": false,
                "searchKey": "types.ExtensionUsageStatistics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExtensionUsageStatistics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExtensionUsageStatistics struct {\n\t// The count of users that have activated this extension\n\tUserCount *int32\n\t// The average number of activations for users that have\n\t// used this extension at least once\n\tAverageActivations *float64\n\tExtensionID        *string\n}\n```\n\nWeekly statistics for an individual extension \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#ExtensionsUsageStatistics",
              "documentation": {
                "identifier": "ExtensionsUsageStatistics",
                "newPage": false,
                "searchKey": "types.ExtensionsUsageStatistics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExtensionsUsageStatistics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExtensionsUsageStatistics struct {\n\tWeekStart                  time.Time\n\tUsageStatisticsByExtension []*ExtensionUsageStatistics\n\t// Average number of non-default extensions used by users\n\t// that have used at least one non-default extension\n\tAverageNonDefaultExtensions *float64\n\t// The count of users that have activated a non-default extension this week\n\tNonDefaultExtensionUsers *int32\n}\n```\n\nWeekly usage statistics for the extensions platform \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#ExternalService",
              "documentation": {
                "identifier": "ExternalService",
                "newPage": false,
                "searchKey": "types.ExternalService",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExternalService struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExternalService struct {\n\tID              int64\n\tKind            string\n\tDisplayName     string\n\tConfig          string\n\tCreatedAt       time.Time\n\tUpdatedAt       time.Time\n\tDeletedAt       time.Time\n\tLastSyncAt      time.Time\n\tNextSyncAt      time.Time\n\tNamespaceUserID int32\n\tUnrestricted    bool // Whether access to repositories belong to this external service is unrestricted.\n\tCloudDefault    bool // Whether this external service is our default public service on Cloud\n}\n```\n\nExternalService is a connection to an external service. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/types#ExternalService.Apply",
                    "documentation": {
                      "identifier": "ExternalService.Apply",
                      "newPage": false,
                      "searchKey": "types.ExternalService.Apply",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalService) Apply(opts ...func(*ExternalService))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalService) Apply(opts ...func(*ExternalService))\n```\n\nApply applies the given functional options to the ExternalService. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#ExternalService.Clone",
                    "documentation": {
                      "identifier": "ExternalService.Clone",
                      "newPage": false,
                      "searchKey": "types.ExternalService.Clone",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalService) Clone() *ExternalService"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalService) Clone() *ExternalService\n```\n\nClone returns a clone of the given external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#ExternalService.Configuration",
                    "documentation": {
                      "identifier": "ExternalService.Configuration",
                      "newPage": false,
                      "searchKey": "types.ExternalService.Configuration",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalService) Configuration() (cfg interface{}, _ error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalService) Configuration() (cfg interface{}, _ error)\n```\n\nConfiguration returns the external service config. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#ExternalService.IsDeleted",
                    "documentation": {
                      "identifier": "ExternalService.IsDeleted",
                      "newPage": false,
                      "searchKey": "types.ExternalService.IsDeleted",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalService) IsDeleted() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalService) IsDeleted() bool\n```\n\nIsDeleted returns true if the external service is deleted. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#ExternalService.RedactConfigSecrets",
                    "documentation": {
                      "identifier": "ExternalService.RedactConfigSecrets",
                      "newPage": false,
                      "searchKey": "types.ExternalService.RedactConfigSecrets",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalService) RedactConfigSecrets() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalService) RedactConfigSecrets() error\n```\n\nRedactConfigSecrets replaces any secret fields in the Config field with RedactedSecret, be sure to call UnRedactExternalServiceConfig before writing back to the database, otherwise validation will throw errors. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#ExternalService.URN",
                    "documentation": {
                      "identifier": "ExternalService.URN",
                      "newPage": false,
                      "searchKey": "types.ExternalService.URN",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalService) URN() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalService) URN() string\n```\n\nURN returns a unique resource identifier of this external service, used as the key in a repo's Sources map as well as the SourceInfo ID. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#ExternalService.UnredactConfig",
                    "documentation": {
                      "identifier": "ExternalService.UnredactConfig",
                      "newPage": false,
                      "searchKey": "types.ExternalService.UnredactConfig",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalService) UnredactConfig(old *ExternalService) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalService) UnredactConfig(old *ExternalService) error\n```\n\nUnredactConfig will replace redacted fields with their undredacted form from the 'old' ExternalService. You should call this when accepting updated config from a user that may have been previously redacted, and pass in the unredacted form directly from the DB as the 'old' parameter \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#ExternalService.Update",
                    "documentation": {
                      "identifier": "ExternalService.Update",
                      "newPage": false,
                      "searchKey": "types.ExternalService.Update",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalService) Update(n *ExternalService) (modified bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalService) Update(n *ExternalService) (modified bool)\n```\n\nUpdate updates ExternalService e with the fields from the given newer ExternalService n, returning true if modified. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#ExternalService.With",
                    "documentation": {
                      "identifier": "ExternalService.With",
                      "newPage": false,
                      "searchKey": "types.ExternalService.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalService) With(opts ...func(*ExternalService)) *ExternalService"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalService) With(opts ...func(*ExternalService)) *ExternalService\n```\n\nWith returns a clone of the given repo with the given functional options applied. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/types#ExternalServiceSyncJob",
              "documentation": {
                "identifier": "ExternalServiceSyncJob",
                "newPage": false,
                "searchKey": "types.ExternalServiceSyncJob",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExternalServiceSyncJob struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExternalServiceSyncJob struct {\n\tID                int64\n\tState             string\n\tFailureMessage    string\n\tStartedAt         time.Time\n\tFinishedAt        time.Time\n\tProcessAfter      time.Time\n\tNumResets         int\n\tExternalServiceID int64\n\tNumFailures       int\n}\n```\n\nExternalServiceSyncJob represents an sync job for an external service \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#ExternalServices",
              "documentation": {
                "identifier": "ExternalServices",
                "newPage": false,
                "searchKey": "types.ExternalServices",
                "tags": [
                  "array",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExternalServices []*types.ExternalService"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExternalServices []*ExternalService\n```\n\nExternalServices is an utility type with convenience methods for operating on lists of ExternalServices. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/types#GenerateExternalServices",
                    "documentation": {
                      "identifier": "GenerateExternalServices",
                      "newPage": false,
                      "searchKey": "types.GenerateExternalServices",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func GenerateExternalServices(n int, base ...*ExternalService) ExternalServices"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc GenerateExternalServices(n int, base ...*ExternalService) ExternalServices\n```\n\nGenerateExternalServices takes a list of base external services and generates n ones with different names. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#MakeExternalServices",
                    "documentation": {
                      "identifier": "MakeExternalServices",
                      "newPage": false,
                      "searchKey": "types.MakeExternalServices",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func MakeExternalServices() ExternalServices"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc MakeExternalServices() ExternalServices\n```\n\nMakeExternalServices creates one configured external service per kind and returns the list. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#ExternalServices.Apply",
                    "documentation": {
                      "identifier": "ExternalServices.Apply",
                      "newPage": false,
                      "searchKey": "types.ExternalServices.Apply",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (es ExternalServices) Apply(opts ...func(*ExternalService))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (es ExternalServices) Apply(opts ...func(*ExternalService))\n```\n\nApply applies the given functional options to the ExternalService. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#ExternalServices.Clone",
                    "documentation": {
                      "identifier": "ExternalServices.Clone",
                      "newPage": false,
                      "searchKey": "types.ExternalServices.Clone",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (es ExternalServices) Clone() ExternalServices"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (es ExternalServices) Clone() ExternalServices\n```\n\nClone returns a clone of the given external services. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#ExternalServices.DisplayNames",
                    "documentation": {
                      "identifier": "ExternalServices.DisplayNames",
                      "newPage": false,
                      "searchKey": "types.ExternalServices.DisplayNames",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (es ExternalServices) DisplayNames() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (es ExternalServices) DisplayNames() []string\n```\n\nDisplayNames returns the list of display names from all ExternalServices. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#ExternalServices.IDs",
                    "documentation": {
                      "identifier": "ExternalServices.IDs",
                      "newPage": false,
                      "searchKey": "types.ExternalServices.IDs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (es ExternalServices) IDs() []int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (es ExternalServices) IDs() []int64\n```\n\nIDs returns the list of ids from all ExternalServices. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#ExternalServices.Kinds",
                    "documentation": {
                      "identifier": "ExternalServices.Kinds",
                      "newPage": false,
                      "searchKey": "types.ExternalServices.Kinds",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (es ExternalServices) Kinds() (kinds []string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (es ExternalServices) Kinds() (kinds []string)\n```\n\nKinds returns the unique set of Kinds in the given external services list. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#ExternalServices.Len",
                    "documentation": {
                      "identifier": "ExternalServices.Len",
                      "newPage": false,
                      "searchKey": "types.ExternalServices.Len",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (es ExternalServices) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (es ExternalServices) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#ExternalServices.Less",
                    "documentation": {
                      "identifier": "ExternalServices.Less",
                      "newPage": false,
                      "searchKey": "types.ExternalServices.Less",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (es ExternalServices) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (es ExternalServices) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#ExternalServices.Swap",
                    "documentation": {
                      "identifier": "ExternalServices.Swap",
                      "newPage": false,
                      "searchKey": "types.ExternalServices.Swap",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (es ExternalServices) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (es ExternalServices) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#ExternalServices.URNs",
                    "documentation": {
                      "identifier": "ExternalServices.URNs",
                      "newPage": false,
                      "searchKey": "types.ExternalServices.URNs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (es ExternalServices) URNs() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (es ExternalServices) URNs() []string\n```\n\nURNs returns the list of URNs from all ExternalServices. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#ExternalServices.With",
                    "documentation": {
                      "identifier": "ExternalServices.With",
                      "newPage": false,
                      "searchKey": "types.ExternalServices.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (es ExternalServices) With(opts ...func(*ExternalService)) ExternalServices"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (es ExternalServices) With(opts ...func(*ExternalService)) ExternalServices\n```\n\nWith returns a clone of the given external services with the given functional options applied. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/types#ExternalServicesAssertion",
              "documentation": {
                "identifier": "ExternalServicesAssertion",
                "newPage": false,
                "searchKey": "types.ExternalServicesAssertion",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExternalServicesAssertion func(testing.TB, github.com/sourcegraph/sourcegraph/internal/types.ExternalServices)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExternalServicesAssertion func(testing.TB, ExternalServices)\n```\n\nAn ExternalServicesAssertion performs an assertion on the given ExternalServices. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#GitHubConnection",
              "documentation": {
                "identifier": "GitHubConnection",
                "newPage": false,
                "searchKey": "types.GitHubConnection",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitHubConnection struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitHubConnection struct {\n\t// The unique resource identifier of the external service.\n\tURN string\n\t*schema.GitHubConnection\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#GitLabConnection",
              "documentation": {
                "identifier": "GitLabConnection",
                "newPage": false,
                "searchKey": "types.GitLabConnection",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitLabConnection struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitLabConnection struct {\n\t// The unique resource identifier of the external service.\n\tURN string\n\t*schema.GitLabConnection\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#GitserverRepo",
              "documentation": {
                "identifier": "GitserverRepo",
                "newPage": false,
                "searchKey": "types.GitserverRepo",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverRepo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverRepo struct {\n\tRepoID api.RepoID\n\t// Usually represented by a gitserver hostname\n\tShardID     string\n\tCloneStatus CloneStatus\n\t// The last external service used to sync or clone this repo\n\tLastExternalService int64\n\t// The last error that occurred or empty if the last action was successful\n\tLastError string\n\tUpdatedAt time.Time\n}\n```\n\nGitserverRepo  represents the data gitserver knows about a repo \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#GlobalState",
              "documentation": {
                "identifier": "GlobalState",
                "newPage": false,
                "searchKey": "types.GlobalState",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GlobalState struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GlobalState struct {\n\tSiteID      string\n\tInitialized bool // whether the initial site admin account has been created\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#GrowthStatistics",
              "documentation": {
                "identifier": "GrowthStatistics",
                "newPage": false,
                "searchKey": "types.GrowthStatistics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GrowthStatistics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GrowthStatistics struct {\n\tDeletedUsers     int32\n\tCreatedUsers     int32\n\tResurrectedUsers int32\n\tChurnedUsers     int32\n\tRetainedUsers    int32\n}\n```\n\nGrowthStatistics represents the total users that were created, deleted, resurrected, churned and retained over the current month. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#HomepagePanels",
              "documentation": {
                "identifier": "HomepagePanels",
                "newPage": false,
                "searchKey": "types.HomepagePanels",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type HomepagePanels struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype HomepagePanels struct {\n\tRecentFilesClickedPercentage           *float64\n\tRecentSearchClickedPercentage          *float64\n\tRecentRepositoriesClickedPercentage    *float64\n\tSavedSearchesClickedPercentage         *float64\n\tNewSavedSearchesClickedPercentage      *float64\n\tTotalPanelViews                        *float64\n\tUsersFilesClickedPercentage            *float64\n\tUsersSearchClickedPercentage           *float64\n\tUsersRepositoriesClickedPercentage     *float64\n\tUsersSavedSearchesClickedPercentage    *float64\n\tUsersNewSavedSearchesClickedPercentage *float64\n\tPercentUsersShown                      *float64\n}\n```\n\nPanel homepage represents interaction data on the enterprise homepage panels. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#InsightTimeIntervalPing",
              "documentation": {
                "identifier": "InsightTimeIntervalPing",
                "newPage": false,
                "searchKey": "types.InsightTimeIntervalPing",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InsightTimeIntervalPing struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InsightTimeIntervalPing struct {\n\tIntervalDays int\n\tTotalCount   int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#InsightUsageStatistics",
              "documentation": {
                "identifier": "InsightUsageStatistics",
                "newPage": false,
                "searchKey": "types.InsightUsageStatistics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InsightUsageStatistics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InsightUsageStatistics struct {\n\tInsightType      *string\n\tAdditions        *int32\n\tEdits            *int32\n\tRemovals         *int32\n\tHovers           *int32\n\tUICustomizations *int32\n\tDataPointClicks  *int32\n}\n```\n\nUsage statistics for a type of code insight \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#NewCodeIntelUsageStatistics",
              "documentation": {
                "identifier": "NewCodeIntelUsageStatistics",
                "newPage": false,
                "searchKey": "types.NewCodeIntelUsageStatistics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NewCodeIntelUsageStatistics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NewCodeIntelUsageStatistics struct {\n\tStartOfWeek                         time.Time\n\tWAUs                                *int32\n\tPreciseWAUs                         *int32\n\tSearchBasedWAUs                     *int32\n\tCrossRepositoryWAUs                 *int32\n\tPreciseCrossRepositoryWAUs          *int32\n\tSearchBasedCrossRepositoryWAUs      *int32\n\tEventSummaries                      []CodeIntelEventSummary\n\tNumRepositoriesWithUploadRecords    *int32\n\tNumRepositoriesWithoutUploadRecords *int32\n}\n```\n\nNewCodeIntelUsageStatistics is the type used within the updatecheck handler. This is sent from private instances to the cloud frontends, where it is further massaged and inserted into a BigQuery. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#OldCodeIntelEventCategoryStatistics",
              "documentation": {
                "identifier": "OldCodeIntelEventCategoryStatistics",
                "newPage": false,
                "searchKey": "types.OldCodeIntelEventCategoryStatistics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OldCodeIntelEventCategoryStatistics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OldCodeIntelEventCategoryStatistics struct {\n\tLSIF   *OldCodeIntelEventStatistics\n\tSearch *OldCodeIntelEventStatistics\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#OldCodeIntelEventStatistics",
              "documentation": {
                "identifier": "OldCodeIntelEventStatistics",
                "newPage": false,
                "searchKey": "types.OldCodeIntelEventStatistics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OldCodeIntelEventStatistics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OldCodeIntelEventStatistics struct {\n\tUsersCount  int32\n\tEventsCount *int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#OldCodeIntelUsagePeriod",
              "documentation": {
                "identifier": "OldCodeIntelUsagePeriod",
                "newPage": false,
                "searchKey": "types.OldCodeIntelUsagePeriod",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OldCodeIntelUsagePeriod struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OldCodeIntelUsagePeriod struct {\n\tStartTime   time.Time\n\tHover       *OldCodeIntelEventCategoryStatistics\n\tDefinitions *OldCodeIntelEventCategoryStatistics\n\tReferences  *OldCodeIntelEventCategoryStatistics\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#OldCodeIntelUsageStatistics",
              "documentation": {
                "identifier": "OldCodeIntelUsageStatistics",
                "newPage": false,
                "searchKey": "types.OldCodeIntelUsageStatistics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OldCodeIntelUsageStatistics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OldCodeIntelUsageStatistics struct {\n\tWeekly []*OldCodeIntelUsagePeriod\n}\n```\n\nOldCodeIntelUsageStatistics is an old version the code intelligence usage statics we can receive from a pre-3.22 Sourcegraph instance. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#Org",
              "documentation": {
                "identifier": "Org",
                "newPage": false,
                "searchKey": "types.Org",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Org struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Org struct {\n\tID          int32\n\tName        string\n\tDisplayName *string\n\tCreatedAt   time.Time\n\tUpdatedAt   time.Time\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#OrgMembership",
              "documentation": {
                "identifier": "OrgMembership",
                "newPage": false,
                "searchKey": "types.OrgMembership",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OrgMembership struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OrgMembership struct {\n\tID        int32\n\tOrgID     int32\n\tUserID    int32\n\tCreatedAt time.Time\n\tUpdatedAt time.Time\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#OrgVisibleInsightPing",
              "documentation": {
                "identifier": "OrgVisibleInsightPing",
                "newPage": false,
                "searchKey": "types.OrgVisibleInsightPing",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OrgVisibleInsightPing struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OrgVisibleInsightPing struct {\n\tType       string\n\tTotalCount int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#PerforceConnection",
              "documentation": {
                "identifier": "PerforceConnection",
                "newPage": false,
                "searchKey": "types.PerforceConnection",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PerforceConnection struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PerforceConnection struct {\n\t// The unique resource identifier of the external service.\n\tURN string\n\t*schema.PerforceConnection\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#PhabricatorRepo",
              "documentation": {
                "identifier": "PhabricatorRepo",
                "newPage": false,
                "searchKey": "types.PhabricatorRepo",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PhabricatorRepo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PhabricatorRepo struct {\n\tID       int32\n\tName     api.RepoName\n\tURL      string\n\tCallsign string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#PingName",
              "documentation": {
                "identifier": "PingName",
                "newPage": false,
                "searchKey": "types.PingName",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PingName string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PingName string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#Repo",
              "documentation": {
                "identifier": "Repo",
                "newPage": false,
                "searchKey": "types.Repo",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Repo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Repo struct {\n\t// ID is the unique numeric ID for this repository.\n\tID api.RepoID\n\t// Name is the name for this repository (e.g., \"github.com/user/repo\"). It\n\t// is the same as URI, unless the user configures a non-default\n\t// repositoryPathPattern.\n\t//\n\t// Previously, this was called RepoURI.\n\tName api.RepoName\n\t// URI is the full name for this repository (e.g.,\n\t// \"github.com/user/repo\"). See the documentation for the Name field.\n\tURI string\n\t// Description is a brief description of the repository.\n\tDescription string\n\t// Fork is whether this repository is a fork of another repository.\n\tFork bool\n\t// Archived is whether the repository has been archived.\n\tArchived bool\n\t// Stars is the star count the repository has in the code host.\n\tStars int `json:\",omitempty\"`\n\t// Private is whether the repository is private.\n\tPrivate bool\n\t// CreatedAt is when this repository was created on Sourcegraph.\n\tCreatedAt time.Time\n\t// UpdatedAt is when this repository's metadata was last updated on Sourcegraph.\n\tUpdatedAt time.Time\n\t// DeletedAt is when this repository was soft-deleted from Sourcegraph.\n\tDeletedAt time.Time\n\t// ExternalRepo identifies this repository by its ID on the external service where it resides (and the external\n\t// service itself).\n\tExternalRepo api.ExternalRepoSpec\n\t// Sources identifies all the repo sources this Repo belongs to.\n\t// The key is a URN created by extsvc.URN\n\tSources map[string]*SourceInfo\n\t// Metadata contains the raw source code host JSON metadata.\n\tMetadata interface{}\n}\n```\n\nRepo represents a source code repository. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/types#MakeAWSCodeCommitRepo",
                    "documentation": {
                      "identifier": "MakeAWSCodeCommitRepo",
                      "newPage": false,
                      "searchKey": "types.MakeAWSCodeCommitRepo",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func MakeAWSCodeCommitRepo(services ...*ExternalService) *Repo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc MakeAWSCodeCommitRepo(services ...*ExternalService) *Repo\n```\n\nMakeAWSCodeCommitRepo returns a configured AWS Code Commit repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#MakeBitbucketServerRepo",
                    "documentation": {
                      "identifier": "MakeBitbucketServerRepo",
                      "newPage": false,
                      "searchKey": "types.MakeBitbucketServerRepo",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func MakeBitbucketServerRepo(services ...*ExternalService) *Repo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc MakeBitbucketServerRepo(services ...*ExternalService) *Repo\n```\n\nMakeBitbucketServerRepo returns a configured Bitbucket Server repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#MakeGithubRepo",
                    "documentation": {
                      "identifier": "MakeGithubRepo",
                      "newPage": false,
                      "searchKey": "types.MakeGithubRepo",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func MakeGithubRepo(services ...*ExternalService) *Repo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc MakeGithubRepo(services ...*ExternalService) *Repo\n```\n\nMakeGithubRepo returns a configured Github repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#MakeGitlabRepo",
                    "documentation": {
                      "identifier": "MakeGitlabRepo",
                      "newPage": false,
                      "searchKey": "types.MakeGitlabRepo",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func MakeGitlabRepo(services ...*ExternalService) *Repo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc MakeGitlabRepo(services ...*ExternalService) *Repo\n```\n\nMakeGitlabRepo returns a configured Gitlab repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#MakeGitoliteRepo",
                    "documentation": {
                      "identifier": "MakeGitoliteRepo",
                      "newPage": false,
                      "searchKey": "types.MakeGitoliteRepo",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func MakeGitoliteRepo(services ...*ExternalService) *Repo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc MakeGitoliteRepo(services ...*ExternalService) *Repo\n```\n\nMakeGitoliteRepo returns a configured Gitolite repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#MakeOtherRepo",
                    "documentation": {
                      "identifier": "MakeOtherRepo",
                      "newPage": false,
                      "searchKey": "types.MakeOtherRepo",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func MakeOtherRepo(services ...*ExternalService) *Repo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc MakeOtherRepo(services ...*ExternalService) *Repo\n```\n\nMakeOtherRepo returns a configured repository from a custom host. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#MakeRepo",
                    "documentation": {
                      "identifier": "MakeRepo",
                      "newPage": false,
                      "searchKey": "types.MakeRepo",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func MakeRepo(name, serviceID, serviceType string, services ...*ExternalService) *Repo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc MakeRepo(name, serviceID, serviceType string, services ...*ExternalService) *Repo\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repo.Apply",
                    "documentation": {
                      "identifier": "Repo.Apply",
                      "newPage": false,
                      "searchKey": "types.Repo.Apply",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Repo) Apply(opts ...func(*Repo))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Repo) Apply(opts ...func(*Repo))\n```\n\nApply applies the given functional options to the Repo. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repo.Clone",
                    "documentation": {
                      "identifier": "Repo.Clone",
                      "newPage": false,
                      "searchKey": "types.Repo.Clone",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Repo) Clone() *Repo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Repo) Clone() *Repo\n```\n\nClone returns a clone of the given repo. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repo.CloneURLs",
                    "documentation": {
                      "identifier": "Repo.CloneURLs",
                      "newPage": false,
                      "searchKey": "types.Repo.CloneURLs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Repo) CloneURLs() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Repo) CloneURLs() []string\n```\n\nCloneURLs returns all the clone URLs this repo is clonable from. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repo.ExternalServiceIDs",
                    "documentation": {
                      "identifier": "Repo.ExternalServiceIDs",
                      "newPage": false,
                      "searchKey": "types.Repo.ExternalServiceIDs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Repo) ExternalServiceIDs() []int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Repo) ExternalServiceIDs() []int64\n```\n\nExternalServiceIDs returns the IDs of the external services this repo belongs to. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repo.IsDeleted",
                    "documentation": {
                      "identifier": "Repo.IsDeleted",
                      "newPage": false,
                      "searchKey": "types.Repo.IsDeleted",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Repo) IsDeleted() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Repo) IsDeleted() bool\n```\n\nIsDeleted returns true if the repo is deleted. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repo.Less",
                    "documentation": {
                      "identifier": "Repo.Less",
                      "newPage": false,
                      "searchKey": "types.Repo.Less",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Repo) Less(s *Repo) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Repo) Less(s *Repo) bool\n```\n\nLess compares Repos by the important fields (fields with constraints in our DB). Additionally it will compare on Sources to give a deterministic order on repos returned from a sourcer. \n\nNewDiff relies on Less to deterministically decide on the order to merge repositories, as well as which repository to keep on conflicts. \n\nContext on using other fields such as timestamps to order/resolve conflicts: We only want to rely on values that have constraints in our database. Timestamps have the following downsides: \n\n```\n- We need to assume the upstream codehost has reasonable values for them\n- Not all codehosts set them to relevant values (eg gitolite or other)\n- They could change often for codehosts that do set them.\n\n```\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repo.String",
                    "documentation": {
                      "identifier": "Repo.String",
                      "newPage": false,
                      "searchKey": "types.Repo.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Repo) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Repo) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repo.Update",
                    "documentation": {
                      "identifier": "Repo.Update",
                      "newPage": false,
                      "searchKey": "types.Repo.Update",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Repo) Update(n *Repo) (modified bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Repo) Update(n *Repo) (modified bool)\n```\n\nUpdate updates Repo r with the fields from the given newer Repo n, returning true if modified. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repo.With",
                    "documentation": {
                      "identifier": "Repo.With",
                      "newPage": false,
                      "searchKey": "types.Repo.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Repo) With(opts ...func(*Repo)) *Repo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Repo) With(opts ...func(*Repo)) *Repo\n```\n\nWith returns a clone of the given repo with the given functional options applied. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/types#RepoGitserverStatus",
              "documentation": {
                "identifier": "RepoGitserverStatus",
                "newPage": false,
                "searchKey": "types.RepoGitserverStatus",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepoGitserverStatus struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepoGitserverStatus struct {\n\t// ID is the unique numeric ID for this repository.\n\tID api.RepoID\n\t// Name is the name for this repository (e.g., \"github.com/user/repo\").\n\tName api.RepoName\n\n\t// GitserverRepo data if it exists\n\t*GitserverRepo\n}\n```\n\nRepoGitserverStatus includes basic repo data along with the current gitserver status for the repo, which may be unknown. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#RepoName",
              "documentation": {
                "identifier": "RepoName",
                "newPage": false,
                "searchKey": "types.RepoName",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepoName struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepoName struct {\n\tID   api.RepoID\n\tName api.RepoName\n}\n```\n\nRepoName represents a source code repository name and its ID. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/types#RepoName.ToRepo",
                    "documentation": {
                      "identifier": "RepoName.ToRepo",
                      "newPage": false,
                      "searchKey": "types.RepoName.ToRepo",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepoName) ToRepo() *Repo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepoName) ToRepo() *Repo\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/types#RepoNames",
              "documentation": {
                "identifier": "RepoNames",
                "newPage": false,
                "searchKey": "types.RepoNames",
                "tags": [
                  "array",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepoNames []types.RepoName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepoNames []RepoName\n```\n\nRepoNames is an utility type with convenience methods for operating on lists of repo names \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/types#RepoNames.Len",
                    "documentation": {
                      "identifier": "RepoNames.Len",
                      "newPage": false,
                      "searchKey": "types.RepoNames.Len",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs RepoNames) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs RepoNames) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#RepoNames.Less",
                    "documentation": {
                      "identifier": "RepoNames.Less",
                      "newPage": false,
                      "searchKey": "types.RepoNames.Less",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs RepoNames) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs RepoNames) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#RepoNames.Swap",
                    "documentation": {
                      "identifier": "RepoNames.Swap",
                      "newPage": false,
                      "searchKey": "types.RepoNames.Swap",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs RepoNames) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs RepoNames) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/types#Repos",
              "documentation": {
                "identifier": "Repos",
                "newPage": false,
                "searchKey": "types.Repos",
                "tags": [
                  "array",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Repos []*types.Repo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Repos []*Repo\n```\n\nRepos is an utility type with convenience methods for operating on lists of Repos. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/types#GenerateRepos",
                    "documentation": {
                      "identifier": "GenerateRepos",
                      "newPage": false,
                      "searchKey": "types.GenerateRepos",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func GenerateRepos(n int, base ...*Repo) Repos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc GenerateRepos(n int, base ...*Repo) Repos\n```\n\nGenerateRepos takes a list of base repos and generates n ones with different names. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repos.Apply",
                    "documentation": {
                      "identifier": "Repos.Apply",
                      "newPage": false,
                      "searchKey": "types.Repos.Apply",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs Repos) Apply(opts ...func(*Repo))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs Repos) Apply(opts ...func(*Repo))\n```\n\nApply applies the given functional options to the Repo. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repos.Clone",
                    "documentation": {
                      "identifier": "Repos.Clone",
                      "newPage": false,
                      "searchKey": "types.Repos.Clone",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs Repos) Clone() Repos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs Repos) Clone() Repos\n```\n\nClone returns a clone of Repos. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repos.Concat",
                    "documentation": {
                      "identifier": "Repos.Concat",
                      "newPage": false,
                      "searchKey": "types.Repos.Concat",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs *Repos) Concat(others ...Repos)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs *Repos) Concat(others ...Repos)\n```\n\nConcat adds the given Repos to the end of rs. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repos.ExternalRepos",
                    "documentation": {
                      "identifier": "Repos.ExternalRepos",
                      "newPage": false,
                      "searchKey": "types.Repos.ExternalRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs Repos) ExternalRepos() []api.ExternalRepoSpec"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs Repos) ExternalRepos() []api.ExternalRepoSpec\n```\n\nExternalRepos returns the list of set ExternalRepoSpecs from all Repos. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repos.Filter",
                    "documentation": {
                      "identifier": "Repos.Filter",
                      "newPage": false,
                      "searchKey": "types.Repos.Filter",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs Repos) Filter(pred func(*Repo) bool) (fs Repos)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs Repos) Filter(pred func(*Repo) bool) (fs Repos)\n```\n\nFilter returns all the Repos that match the given predicate. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repos.IDs",
                    "documentation": {
                      "identifier": "Repos.IDs",
                      "newPage": false,
                      "searchKey": "types.Repos.IDs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs Repos) IDs() []api.RepoID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs Repos) IDs() []api.RepoID\n```\n\nIDs returns the list of ids from all Repos. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repos.Kinds",
                    "documentation": {
                      "identifier": "Repos.Kinds",
                      "newPage": false,
                      "searchKey": "types.Repos.Kinds",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs Repos) Kinds() (kinds []string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs Repos) Kinds() (kinds []string)\n```\n\nKinds returns the unique set of kinds from all Repos. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repos.Len",
                    "documentation": {
                      "identifier": "Repos.Len",
                      "newPage": false,
                      "searchKey": "types.Repos.Len",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs Repos) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs Repos) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repos.Less",
                    "documentation": {
                      "identifier": "Repos.Less",
                      "newPage": false,
                      "searchKey": "types.Repos.Less",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs Repos) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs Repos) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repos.Names",
                    "documentation": {
                      "identifier": "Repos.Names",
                      "newPage": false,
                      "searchKey": "types.Repos.Names",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs Repos) Names() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs Repos) Names() []string\n```\n\nNames returns the list of names from all Repos. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repos.NamesSummary",
                    "documentation": {
                      "identifier": "Repos.NamesSummary",
                      "newPage": false,
                      "searchKey": "types.Repos.NamesSummary",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs Repos) NamesSummary() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs Repos) NamesSummary() string\n```\n\nNamesSummary caps the number of repos to 20 when composing a space-separated list string. Used in logging statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repos.Sources",
                    "documentation": {
                      "identifier": "Repos.Sources",
                      "newPage": false,
                      "searchKey": "types.Repos.Sources",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs Repos) Sources() map[api.RepoID][]SourceInfo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs Repos) Sources() map[api.RepoID][]SourceInfo\n```\n\nSources returns a map of all the sources per repo id. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repos.Swap",
                    "documentation": {
                      "identifier": "Repos.Swap",
                      "newPage": false,
                      "searchKey": "types.Repos.Swap",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs Repos) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs Repos) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/types#Repos.With",
                    "documentation": {
                      "identifier": "Repos.With",
                      "newPage": false,
                      "searchKey": "types.Repos.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs Repos) With(opts ...func(*Repo)) Repos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs Repos) With(opts ...func(*Repo)) Repos\n```\n\nWith returns a clone of the given repos with the given functional options applied. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/types#ReposAssertion",
              "documentation": {
                "identifier": "ReposAssertion",
                "newPage": false,
                "searchKey": "types.ReposAssertion",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ReposAssertion func(testing.TB, github.com/sourcegraph/sourcegraph/internal/types.Repos)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ReposAssertion func(testing.TB, Repos)\n```\n\nA ReposAssertion performs an assertion on the given Repos. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#RetentionStats",
              "documentation": {
                "identifier": "RetentionStats",
                "newPage": false,
                "searchKey": "types.RetentionStats",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RetentionStats struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RetentionStats struct {\n\tWeekly []*WeeklyRetentionStats\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#SavedSearch",
              "documentation": {
                "identifier": "SavedSearch",
                "newPage": false,
                "searchKey": "types.SavedSearch",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SavedSearch struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SavedSearch struct {\n\tID              int32 // the globally unique DB ID\n\tDescription     string\n\tQuery           string  // the literal search query to be ran\n\tNotify          bool    // whether or not to notify the owner(s) of this saved search via email\n\tNotifySlack     bool    // whether or not to notify the owner(s) of this saved search via Slack\n\tUserID          *int32  // if non-nil, the owner is this user. UserID/OrgID are mutually exclusive.\n\tOrgID           *int32  // if non-nil, the owner is this organization. UserID/OrgID are mutually exclusive.\n\tSlackWebhookURL *string // if non-nil && NotifySlack == true, indicates that this Slack webhook URL should be used instead of the owners default Slack webhook.\n}\n```\n\nSavedSearch represents a saved search \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#SavedSearches",
              "documentation": {
                "identifier": "SavedSearches",
                "newPage": false,
                "searchKey": "types.SavedSearches",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SavedSearches struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SavedSearches struct {\n\tTotalSavedSearches   int32\n\tUniqueUsers          int32\n\tNotificationsSent    int32\n\tNotificationsClicked int32\n\tUniqueUserPageViews  int32\n\tOrgSavedSearches     int32\n}\n```\n\nSavedSearches represents the total number of saved searches, users using saved searches, and usage of saved searches. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#SearchAggregatedEvent",
              "documentation": {
                "identifier": "SearchAggregatedEvent",
                "newPage": false,
                "searchKey": "types.SearchAggregatedEvent",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchAggregatedEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchAggregatedEvent struct {\n\tName           string\n\tMonth          time.Time\n\tWeek           time.Time\n\tDay            time.Time\n\tTotalMonth     int32\n\tTotalWeek      int32\n\tTotalDay       int32\n\tUniquesMonth   int32\n\tUniquesWeek    int32\n\tUniquesDay     int32\n\tLatenciesMonth []float64\n\tLatenciesWeek  []float64\n\tLatenciesDay   []float64\n}\n```\n\nSearchAggregatedEvent represents the total events, unique users, and latencies over the current month, week, and day for a single search event. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#SearchContext",
              "documentation": {
                "identifier": "SearchContext",
                "newPage": false,
                "searchKey": "types.SearchContext",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchContext struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchContext struct {\n\tID int64\n\t// Name contains the non-prefixed part of the search context spec.\n\t// The name is a substring of the spec and it should NOT be used as the spec itself.\n\t// The spec contains additional information (such as the @ prefix and the context namespace)\n\t// that helps differentiate between different search contexts.\n\t// Example mappings from context spec to context name:\n\t// global -> global, @user -> user, @org -> org,\n\t// @user/ctx1 -> ctx1, @org/ctx2 -> ctx2.\n\tName        string\n\tDescription string\n\t// Public property controls the visibility of the search context. Public search context is available to\n\t// any user on the instance. If a public search context contains private repositories, those are filtered out\n\t// for unauthorized users. Private search contexts are only available to their owners. Private user search context\n\t// is available only to the user, private org search context is available only to the members of the org, and private\n\t// instance-level search contexts is available only to site-admins.\n\tPublic          bool\n\tNamespaceUserID int32 // if non-zero, the owner is this user. NamespaceUserID/NamespaceOrgID are mutually exclusive.\n\tNamespaceOrgID  int32 // if non-zero, the owner is this organization. NamespaceUserID/NamespaceOrgID are mutually exclusive.\n\tUpdatedAt       time.Time\n\n\t// NamespaceUserName is the name of the user if NamespaceUserID is present.\n\tNamespaceUserName string\n\t// NamespaceUserName is the name of the org if NamespaceOrgID is present.\n\tNamespaceOrgName string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#SearchContextRepositoryRevisions",
              "documentation": {
                "identifier": "SearchContextRepositoryRevisions",
                "newPage": false,
                "searchKey": "types.SearchContextRepositoryRevisions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchContextRepositoryRevisions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchContextRepositoryRevisions struct {\n\tRepo      RepoName\n\tRevisions []string\n}\n```\n\nSearchContextRepositoryRevisions is a simple wrapper for a repository and its revisions contained in a search context. It is made compatible with search.RepositoryRevisions, so it can be easily converted when needed. We could use search.RepositoryRevisions directly instead, but it introduces an import cycle with `internal/vcs/git` package when used in `internal/database/search_contexts.go`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#SearchCountStatistics",
              "documentation": {
                "identifier": "SearchCountStatistics",
                "newPage": false,
                "searchKey": "types.SearchCountStatistics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchCountStatistics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchCountStatistics struct {\n\tUserCount   *int32\n\tEventsCount *int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#SearchEventLatencies",
              "documentation": {
                "identifier": "SearchEventLatencies",
                "newPage": false,
                "searchKey": "types.SearchEventLatencies",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchEventLatencies struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchEventLatencies struct {\n\tP50 float64\n\tP90 float64\n\tP99 float64\n}\n```\n\nNOTE: DO NOT alter this struct without making a symmetric change to the updatecheck handler. This struct is marshalled and sent to BigQuery, which requires the input match its schema exactly. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#SearchEventStatistics",
              "documentation": {
                "identifier": "SearchEventStatistics",
                "newPage": false,
                "searchKey": "types.SearchEventStatistics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchEventStatistics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchEventStatistics struct {\n\tUserCount      *int32\n\tEventsCount    *int32\n\tEventLatencies *SearchEventLatencies\n}\n```\n\nNOTE: DO NOT alter this struct without making a symmetric change to the updatecheck handler. This struct is marshalled and sent to BigQuery, which requires the input match its schema exactly. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#SearchModeUsageStatistics",
              "documentation": {
                "identifier": "SearchModeUsageStatistics",
                "newPage": false,
                "searchKey": "types.SearchModeUsageStatistics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchModeUsageStatistics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchModeUsageStatistics struct {\n\tInteractive *SearchCountStatistics\n\tPlainText   *SearchCountStatistics\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#SearchOnboarding",
              "documentation": {
                "identifier": "SearchOnboarding",
                "newPage": false,
                "searchKey": "types.SearchOnboarding",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchOnboarding struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchOnboarding struct {\n\tTotalOnboardingTourViews   *int32\n\tViewedLangStep             *int32\n\tViewedFilterRepoStep       *int32\n\tViewedAddQueryTermStep     *int32\n\tViewedSubmitSearchStep     *int32\n\tViewedSearchReferenceStep  *int32\n\tCloseOnboardingTourClicked *int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#SearchUsagePeriod",
              "documentation": {
                "identifier": "SearchUsagePeriod",
                "newPage": false,
                "searchKey": "types.SearchUsagePeriod",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchUsagePeriod struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchUsagePeriod struct {\n\tStartTime  time.Time\n\tTotalUsers int32\n\n\t// Counts and latency statistics for different kinds of searches.\n\tLiteral    *SearchEventStatistics\n\tRegexp     *SearchEventStatistics\n\tCommit     *SearchEventStatistics\n\tDiff       *SearchEventStatistics\n\tFile       *SearchEventStatistics\n\tStructural *SearchEventStatistics\n\tSymbol     *SearchEventStatistics\n\n\t// Counts of search query attributes. Ref: RFC 384.\n\tOperatorOr              *SearchCountStatistics\n\tOperatorAnd             *SearchCountStatistics\n\tOperatorNot             *SearchCountStatistics\n\tSelectRepo              *SearchCountStatistics\n\tSelectFile              *SearchCountStatistics\n\tSelectContent           *SearchCountStatistics\n\tSelectSymbol            *SearchCountStatistics\n\tSelectCommitDiffAdded   *SearchCountStatistics\n\tSelectCommitDiffRemoved *SearchCountStatistics\n\tRepoContains            *SearchCountStatistics\n\tRepoContainsFile        *SearchCountStatistics\n\tRepoContainsContent     *SearchCountStatistics\n\tRepoContainsCommitAfter *SearchCountStatistics\n\tCountAll                *SearchCountStatistics\n\tNonGlobalContext        *SearchCountStatistics\n\tOnlyPatterns            *SearchCountStatistics\n\tOnlyPatternsThreeOrMore *SearchCountStatistics\n\n\t// DEPRECATED. Counts statistics for fields.\n\tAfter              *SearchCountStatistics\n\tArchived           *SearchCountStatistics\n\tAuthor             *SearchCountStatistics\n\tBefore             *SearchCountStatistics\n\tCase               *SearchCountStatistics\n\tCommitter          *SearchCountStatistics\n\tContent            *SearchCountStatistics\n\tCount              *SearchCountStatistics\n\tFork               *SearchCountStatistics\n\tIndex              *SearchCountStatistics\n\tLang               *SearchCountStatistics\n\tMessage            *SearchCountStatistics\n\tPatternType        *SearchCountStatistics\n\tRepo               *SearchEventStatistics\n\tRepohascommitafter *SearchCountStatistics\n\tRepohasfile        *SearchCountStatistics\n\tRepogroup          *SearchCountStatistics\n\tTimeout            *SearchCountStatistics\n\tType               *SearchCountStatistics\n\n\t// DEPRECATED. Search modes statistics refers to removed functionality.\n\tSearchModes *SearchModeUsageStatistics\n}\n```\n\nNOTE: DO NOT alter this struct without making a symmetric change to the updatecheck handler. This struct is marshalled and sent to BigQuery, which requires the input match its schema exactly. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#SearchUsageStatistics",
              "documentation": {
                "identifier": "SearchUsageStatistics",
                "newPage": false,
                "searchKey": "types.SearchUsageStatistics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchUsageStatistics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchUsageStatistics struct {\n\tDaily   []*SearchUsagePeriod\n\tWeekly  []*SearchUsagePeriod\n\tMonthly []*SearchUsagePeriod\n}\n```\n\nNOTE: DO NOT alter this struct without making a symmetric change to the updatecheck handler. This struct is marshalled and sent to BigQuery, which requires the input match its schema exactly. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#Secret",
              "documentation": {
                "identifier": "Secret",
                "newPage": false,
                "searchKey": "types.Secret",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Secret struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Secret struct {\n\tID int32\n\n\t// The table containing an object whose token is being encrypted.\n\tSourceType sql.NullString\n\n\t// The ID of the object in the SourceType table.\n\tSourceID sql.NullInt32\n\n\t// KeyName represents a unique key for the case where we're storing key-value pairs.\n\tKeyName sql.NullString\n\n\t// Value contains the encrypted string\n\tValue string\n}\n```\n\nSecret represents the secrets table \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#SiteActivityPeriod",
              "documentation": {
                "identifier": "SiteActivityPeriod",
                "newPage": false,
                "searchKey": "types.SiteActivityPeriod",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SiteActivityPeriod struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SiteActivityPeriod struct {\n\tStartTime            time.Time\n\tUserCount            int32\n\tRegisteredUserCount  int32\n\tAnonymousUserCount   int32\n\tIntegrationUserCount int32\n}\n```\n\nNOTE: DO NOT alter this struct without making a symmetric change to the updatecheck handler. This struct is marshalled and sent to BigQuery, which requires the input match its schema exactly. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#SiteUsageStatistics",
              "documentation": {
                "identifier": "SiteUsageStatistics",
                "newPage": false,
                "searchKey": "types.SiteUsageStatistics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SiteUsageStatistics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SiteUsageStatistics struct {\n\tDAUs []*SiteActivityPeriod\n\tWAUs []*SiteActivityPeriod\n\tMAUs []*SiteActivityPeriod\n}\n```\n\nNOTE: DO NOT alter this struct without making a symmetric change to the updatecheck handler. This struct is marshalled and sent to BigQuery, which requires the input match its schema exactly. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#SiteUsageSummary",
              "documentation": {
                "identifier": "SiteUsageSummary",
                "newPage": false,
                "searchKey": "types.SiteUsageSummary",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SiteUsageSummary struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SiteUsageSummary struct {\n\tMonth                   time.Time\n\tWeek                    time.Time\n\tDay                     time.Time\n\tUniquesMonth            int32\n\tUniquesWeek             int32\n\tUniquesDay              int32\n\tRegisteredUniquesMonth  int32\n\tRegisteredUniquesWeek   int32\n\tRegisteredUniquesDay    int32\n\tIntegrationUniquesMonth int32\n\tIntegrationUniquesWeek  int32\n\tIntegrationUniquesDay   int32\n\tManageUniquesMonth      int32\n\tCodeUniquesMonth        int32\n\tVerifyUniquesMonth      int32\n\tMonitorUniquesMonth     int32\n\tManageUniquesWeek       int32\n\tCodeUniquesWeek         int32\n\tVerifyUniquesWeek       int32\n\tMonitorUniquesWeek      int32\n}\n```\n\nSiteUsageSummary is an alternate view of SiteUsageStatistics which is calculated in the database layer. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#SourceInfo",
              "documentation": {
                "identifier": "SourceInfo",
                "newPage": false,
                "searchKey": "types.SourceInfo",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SourceInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SourceInfo struct {\n\tID       string\n\tCloneURL string\n}\n```\n\nA SourceInfo represents a source a Repo belongs to (such as an external service). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/types#SourceInfo.ExternalServiceID",
                    "documentation": {
                      "identifier": "SourceInfo.ExternalServiceID",
                      "newPage": false,
                      "searchKey": "types.SourceInfo.ExternalServiceID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i SourceInfo) ExternalServiceID() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i SourceInfo) ExternalServiceID() int64\n```\n\nExternalServiceID returns the ID of the external service this SourceInfo refers to. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/types#SurveyResponse",
              "documentation": {
                "identifier": "SurveyResponse",
                "newPage": false,
                "searchKey": "types.SurveyResponse",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SurveyResponse struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SurveyResponse struct {\n\tID        int32\n\tUserID    *int32\n\tEmail     *string\n\tScore     int32\n\tReason    *string\n\tBetter    *string\n\tCreatedAt time.Time\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#User",
              "documentation": {
                "identifier": "User",
                "newPage": false,
                "searchKey": "types.User",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type User struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype User struct {\n\tID                    int32\n\tUsername              string\n\tDisplayName           string\n\tAvatarURL             string\n\tCreatedAt             time.Time\n\tUpdatedAt             time.Time\n\tSiteAdmin             bool\n\tBuiltinAuth           bool\n\tTags                  []string\n\tInvalidatedSessionsAt time.Time\n}\n```\n\nUser represents a registered user. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#UserDates",
              "documentation": {
                "identifier": "UserDates",
                "newPage": false,
                "searchKey": "types.UserDates",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserDates struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserDates struct {\n\tUserID    int32\n\tCreatedAt time.Time\n\tDeletedAt time.Time\n}\n```\n\nUserDates captures the created and deleted dates of a single user. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#UserUsageCounts",
              "documentation": {
                "identifier": "UserUsageCounts",
                "newPage": false,
                "searchKey": "types.UserUsageCounts",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserUsageCounts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserUsageCounts struct {\n\tDate           time.Time\n\tUserID         uint32\n\tSearchCount    int32\n\tCodeIntelCount int32\n}\n```\n\nUserUsageCounts captures the usage numbers of a user in a single day. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#UserUsageStatistics",
              "documentation": {
                "identifier": "UserUsageStatistics",
                "newPage": false,
                "searchKey": "types.UserUsageStatistics",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserUsageStatistics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserUsageStatistics struct {\n\tUserID                      int32\n\tPageViews                   int32\n\tSearchQueries               int32\n\tCodeIntelligenceActions     int32\n\tFindReferencesActions       int32\n\tLastActiveTime              *time.Time\n\tLastCodeHostIntegrationTime *time.Time\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#WeeklyRetentionStats",
              "documentation": {
                "identifier": "WeeklyRetentionStats",
                "newPage": false,
                "searchKey": "types.WeeklyRetentionStats",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type WeeklyRetentionStats struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype WeeklyRetentionStats struct {\n\tWeekStart  time.Time\n\tCohortSize *int32\n\tWeek0      *float64\n\tWeek1      *float64\n\tWeek2      *float64\n\tWeek3      *float64\n\tWeek4      *float64\n\tWeek5      *float64\n\tWeek6      *float64\n\tWeek7      *float64\n\tWeek8      *float64\n\tWeek9      *float64\n\tWeek10     *float64\n\tWeek11     *float64\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#jsonStringField",
              "documentation": {
                "identifier": "jsonStringField",
                "newPage": false,
                "searchKey": "types.jsonStringField",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type jsonStringField struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype jsonStringField struct {\n\tpath string\n\tptr  *string\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/types#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/types#ExternalServicesToMap",
              "documentation": {
                "identifier": "ExternalServicesToMap",
                "newPage": false,
                "searchKey": "types.ExternalServicesToMap",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExternalServicesToMap(es ExternalServices) map[string]*ExternalService"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExternalServicesToMap(es ExternalServices) map[string]*ExternalService\n```\n\nExternalServicesToMap is a helper function that returns a map whose key is the external service kind. If two external services have the same kind, only the last one will be stored in the map. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#TestRoundTripRedactExternalServiceConfig",
              "documentation": {
                "identifier": "TestRoundTripRedactExternalServiceConfig",
                "newPage": false,
                "searchKey": "types.TestRoundTripRedactExternalServiceConfig",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRoundTripRedactExternalServiceConfig(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRoundTripRedactExternalServiceConfig(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#redactField",
              "documentation": {
                "identifier": "redactField",
                "newPage": false,
                "searchKey": "types.redactField",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func redactField(buf string, fields ...string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc redactField(buf string, fields ...string) (string, error)\n```\n\nredactField will unmarshal the passed JSON string into the passed value, and then replace the pointer fields you pass with RedactedSecret, see RedactExternalServiceConfig for usage examples. who needs generics anyway? \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#sortedSliceLess",
              "documentation": {
                "identifier": "sortedSliceLess",
                "newPage": false,
                "searchKey": "types.sortedSliceLess",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sortedSliceLess(a, b []string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sortedSliceLess(a, b []string) bool\n```\n\nsortedSliceLess returns true if a < b \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#sourcesKeys",
              "documentation": {
                "identifier": "sourcesKeys",
                "newPage": false,
                "searchKey": "types.sourcesKeys",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sourcesKeys(m map[string]*SourceInfo) []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sourcesKeys(m map[string]*SourceInfo) []string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#unmarshalConfig",
              "documentation": {
                "identifier": "unmarshalConfig",
                "newPage": false,
                "searchKey": "types.unmarshalConfig",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func unmarshalConfig(buf string, v interface{}) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unmarshalConfig(buf string, v interface{}) error\n```\n\nconfig may contain comments, normalize with jsonc before unmarshaling with jsoniter \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#unredactField",
              "documentation": {
                "identifier": "unredactField",
                "newPage": false,
                "searchKey": "types.unredactField",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func unredactField(old, new string, cfg interface{}, fields ...jsonStringField) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unredactField(old, new string, cfg interface{}, fields ...jsonStringField) (string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/types#zeroFields",
              "documentation": {
                "identifier": "zeroFields",
                "newPage": false,
                "searchKey": "types.zeroFields",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func zeroFields(s interface{}) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc zeroFields(s interface{}) error\n```\n\nzeroFields zeroes the fields of a struct \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
