{
  "pathID": "/internal/randstring",
  "documentation": {
    "identifier": "randstring",
    "newPage": true,
    "searchKey": "internal/randstring",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package randstring"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package randstring generates random strings. \n\nExample usage: \n\n```\ns := randstring.NewLen(4) // s is now \"apHC\"\n\n```\nA standard string created by NewLen consists of Latin upper and lowercase letters, and numbers (from the set of 62 allowed characters). \n\nFunctions read from crypto/rand random source, and panic if they fail to read from it. \n\nThis package is adapted (simplified) from Dmitry Chestnykh's uniuri package. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/randstring#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/randstring#stdChars",
              "documentation": {
                "identifier": "stdChars",
                "newPage": false,
                "searchKey": "randstring.stdChars",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var stdChars"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar stdChars = []byte(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\")\n```\n\nstdChars is a set of standard characters allowed in the string. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/randstring#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/randstring#NewLen",
              "documentation": {
                "identifier": "NewLen",
                "newPage": false,
                "searchKey": "randstring.NewLen",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewLen(length int) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewLen(length int) string\n```\n\nNewLen returns a new random string of the provided length, consisting of standard characters. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/randstring#NewLenChars",
              "documentation": {
                "identifier": "NewLenChars",
                "newPage": false,
                "searchKey": "randstring.NewLenChars",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewLenChars(length int, chars []byte) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewLenChars(length int, chars []byte) string\n```\n\nNewLenChars returns a new random string of the provided length, consisting of the provided byte slice of allowed characters (maximum 256). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/randstring#validateChars",
              "documentation": {
                "identifier": "validateChars",
                "newPage": false,
                "searchKey": "randstring.validateChars",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func validateChars(t *testing.T, u string, chars []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc validateChars(t *testing.T, u string, chars []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/randstring#TestNew_unique",
              "documentation": {
                "identifier": "TestNew_unique",
                "newPage": false,
                "searchKey": "randstring.TestNew_unique",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNew_unique(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNew_unique(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/randstring#TestNewLen",
              "documentation": {
                "identifier": "TestNewLen",
                "newPage": false,
                "searchKey": "randstring.TestNewLen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewLen(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewLen(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/randstring#TestNewLenChars",
              "documentation": {
                "identifier": "TestNewLenChars",
                "newPage": false,
                "searchKey": "randstring.TestNewLenChars",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewLenChars(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewLenChars(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/randstring#TestNewLenCharsMaxLength",
              "documentation": {
                "identifier": "TestNewLenCharsMaxLength",
                "newPage": false,
                "searchKey": "randstring.TestNewLenCharsMaxLength",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewLenCharsMaxLength(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewLenCharsMaxLength(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
