{
  "pathID": "/internal/database",
  "documentation": {
    "identifier": "database",
    "newPage": true,
    "searchKey": "internal/database",
    "tags": [
      "package",
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package database"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package database contains PostgreSQL DB-backed stores. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/database#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/database#AuthenticatorTypeBasicAuth",
              "documentation": {
                "identifier": "AuthenticatorTypeBasicAuth",
                "newPage": false,
                "searchKey": "database.AuthenticatorTypeBasicAuth",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AuthenticatorTypeBasicAuth"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AuthenticatorTypeBasicAuth AuthenticatorType = \"BasicAuth\"\n```\n\nDefine credential type strings that we'll use when encoding credentials. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#AuthenticatorTypeBasicAuthWithSSH",
              "documentation": {
                "identifier": "AuthenticatorTypeBasicAuthWithSSH",
                "newPage": false,
                "searchKey": "database.AuthenticatorTypeBasicAuthWithSSH",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AuthenticatorTypeBasicAuthWithSSH"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AuthenticatorTypeBasicAuthWithSSH AuthenticatorType = \"BasicAuthWithSSH\"\n```\n\nDefine credential type strings that we'll use when encoding credentials. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#AuthenticatorTypeBitbucketServerSudoableOAuthClient",
              "documentation": {
                "identifier": "AuthenticatorTypeBitbucketServerSudoableOAuthClient",
                "newPage": false,
                "searchKey": "database.AuthenticatorTypeBitbucketServerSudoableOAuthClient",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AuthenticatorTypeBitbucketServerSudoableOAuthClient"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AuthenticatorTypeBitbucketServerSudoableOAuthClient AuthenticatorType = ...\n```\n\nDefine credential type strings that we'll use when encoding credentials. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#AuthenticatorTypeGitLabSudoableToken",
              "documentation": {
                "identifier": "AuthenticatorTypeGitLabSudoableToken",
                "newPage": false,
                "searchKey": "database.AuthenticatorTypeGitLabSudoableToken",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AuthenticatorTypeGitLabSudoableToken"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AuthenticatorTypeGitLabSudoableToken AuthenticatorType = \"GitLabSudoableToken\"\n```\n\nDefine credential type strings that we'll use when encoding credentials. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#AuthenticatorTypeOAuthBearerToken",
              "documentation": {
                "identifier": "AuthenticatorTypeOAuthBearerToken",
                "newPage": false,
                "searchKey": "database.AuthenticatorTypeOAuthBearerToken",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AuthenticatorTypeOAuthBearerToken"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AuthenticatorTypeOAuthBearerToken AuthenticatorType = \"OAuthBearerToken\"\n```\n\nDefine credential type strings that we'll use when encoding credentials. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#AuthenticatorTypeOAuthBearerTokenWithSSH",
              "documentation": {
                "identifier": "AuthenticatorTypeOAuthBearerTokenWithSSH",
                "newPage": false,
                "searchKey": "database.AuthenticatorTypeOAuthBearerTokenWithSSH",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AuthenticatorTypeOAuthBearerTokenWithSSH"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AuthenticatorTypeOAuthBearerTokenWithSSH AuthenticatorType = \"OAuthBearerTokenWithSSH\"\n```\n\nDefine credential type strings that we'll use when encoding credentials. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#AuthenticatorTypeOAuthClient",
              "documentation": {
                "identifier": "AuthenticatorTypeOAuthClient",
                "newPage": false,
                "searchKey": "database.AuthenticatorTypeOAuthClient",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AuthenticatorTypeOAuthClient"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AuthenticatorTypeOAuthClient AuthenticatorType = \"OAuthClient\"\n```\n\nDefine credential type strings that we'll use when encoding credentials. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#Daily",
              "documentation": {
                "identifier": "Daily",
                "newPage": false,
                "searchKey": "database.Daily",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Daily"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Daily PeriodType = \"daily\"\n```\n\nDaily is used to get a count of events or unique users within a day. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#Monthly",
              "documentation": {
                "identifier": "Monthly",
                "newPage": false,
                "searchKey": "database.Monthly",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Monthly"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Monthly PeriodType = \"monthly\"\n```\n\nMonthly is used to get a count of events or unique users within a month. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#RepoListCreatedAt",
              "documentation": {
                "identifier": "RepoListCreatedAt",
                "newPage": false,
                "searchKey": "database.RepoListCreatedAt",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const RepoListCreatedAt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst RepoListCreatedAt RepoListColumn = \"created_at\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#RepoListID",
              "documentation": {
                "identifier": "RepoListID",
                "newPage": false,
                "searchKey": "database.RepoListID",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const RepoListID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst RepoListID RepoListColumn = \"id\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#RepoListName",
              "documentation": {
                "identifier": "RepoListName",
                "newPage": false,
                "searchKey": "database.RepoListName",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const RepoListName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst RepoListName RepoListColumn = \"name\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#RepoListStars",
              "documentation": {
                "identifier": "RepoListStars",
                "newPage": false,
                "searchKey": "database.RepoListStars",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const RepoListStars"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst RepoListStars RepoListColumn = \"stars\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#SearchContextsOrderByID",
              "documentation": {
                "identifier": "SearchContextsOrderByID",
                "newPage": false,
                "searchKey": "database.SearchContextsOrderByID",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SearchContextsOrderByID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SearchContextsOrderByID SearchContextsOrderByOption = iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#SearchContextsOrderBySpec",
              "documentation": {
                "identifier": "SearchContextsOrderBySpec",
                "newPage": false,
                "searchKey": "database.SearchContextsOrderBySpec",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SearchContextsOrderBySpec"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SearchContextsOrderBySpec\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#SearchContextsOrderByUpdatedAt",
              "documentation": {
                "identifier": "SearchContextsOrderByUpdatedAt",
                "newPage": false,
                "searchKey": "database.SearchContextsOrderByUpdatedAt",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SearchContextsOrderByUpdatedAt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SearchContextsOrderByUpdatedAt\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TagAllowUserExternalServicePrivate",
              "documentation": {
                "identifier": "TagAllowUserExternalServicePrivate",
                "newPage": false,
                "searchKey": "database.TagAllowUserExternalServicePrivate",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagAllowUserExternalServicePrivate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagAllowUserExternalServicePrivate = \"AllowUserExternalServicePrivate\"\n```\n\nTagAllowUserExternalServicePrivate if set on a user, allows them to add private code through external services they own. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TagAllowUserExternalServicePublic",
              "documentation": {
                "identifier": "TagAllowUserExternalServicePublic",
                "newPage": false,
                "searchKey": "database.TagAllowUserExternalServicePublic",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagAllowUserExternalServicePublic"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagAllowUserExternalServicePublic = \"AllowUserExternalServicePublic\"\n```\n\nTagAllowUserExternalServicePublic if set on a user, allows them to add public code through external services they own. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#UserCredentialDomainBatches",
              "documentation": {
                "identifier": "UserCredentialDomainBatches",
                "newPage": false,
                "searchKey": "database.UserCredentialDomainBatches",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const UserCredentialDomainBatches"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst UserCredentialDomainBatches = \"batches\"\n```\n\nValid domain values for user credentials. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#UserCredentialPlaceholderEncryptionKeyID",
              "documentation": {
                "identifier": "UserCredentialPlaceholderEncryptionKeyID",
                "newPage": false,
                "searchKey": "database.UserCredentialPlaceholderEncryptionKeyID",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const UserCredentialPlaceholderEncryptionKeyID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst UserCredentialPlaceholderEncryptionKeyID = \"previously-migrated\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#Weekly",
              "documentation": {
                "identifier": "Weekly",
                "newPage": false,
                "searchKey": "database.Weekly",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Weekly"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Weekly PeriodType = \"weekly\"\n```\n\nWeekly is used to get a count of events or unique users within a week. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#aggregatedUserIDQueryFragment",
              "documentation": {
                "identifier": "aggregatedUserIDQueryFragment",
                "newPage": false,
                "searchKey": "database.aggregatedUserIDQueryFragment",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const aggregatedUserIDQueryFragment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst aggregatedUserIDQueryFragment = ...\n```\n\naggregatedUserIDQueryFragment is a query fragment that can be used to canonicalize the values of the user_id and anonymous_user_id fields (assumed in scope) int a unified value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#countSearchContextsFmtStr",
              "documentation": {
                "identifier": "countSearchContextsFmtStr",
                "newPage": false,
                "searchKey": "database.countSearchContextsFmtStr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const countSearchContextsFmtStr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst countSearchContextsFmtStr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#deleteReposQuery",
              "documentation": {
                "identifier": "deleteReposQuery",
                "newPage": false,
                "searchKey": "database.deleteReposQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const deleteReposQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst deleteReposQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#deleteSearchContextFmtStr",
              "documentation": {
                "identifier": "deleteSearchContextFmtStr",
                "newPage": false,
                "searchKey": "database.deleteSearchContextFmtStr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const deleteSearchContextFmtStr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst deleteSearchContextFmtStr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#errorCodeEmailExists",
              "documentation": {
                "identifier": "errorCodeEmailExists",
                "newPage": false,
                "searchKey": "database.errorCodeEmailExists",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const errorCodeEmailExists"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst errorCodeEmailExists = \"err_email_exists\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#errorCodeUsernameExists",
              "documentation": {
                "identifier": "errorCodeUsernameExists",
                "newPage": false,
                "searchKey": "database.errorCodeUsernameExists",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const errorCodeUsernameExists"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst errorCodeUsernameExists = \"err_username_exists\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#getSourcesByRepoQueryStr",
              "documentation": {
                "identifier": "getSourcesByRepoQueryStr",
                "newPage": false,
                "searchKey": "database.getSourcesByRepoQueryStr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const getSourcesByRepoQueryStr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst getSourcesByRepoQueryStr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#insertSearchContextFmtStr",
              "documentation": {
                "identifier": "insertSearchContextFmtStr",
                "newPage": false,
                "searchKey": "database.insertSearchContextFmtStr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const insertSearchContextFmtStr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst insertSearchContextFmtStr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#integrationSource",
              "documentation": {
                "identifier": "integrationSource",
                "newPage": false,
                "searchKey": "database.integrationSource",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const integrationSource"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst integrationSource = \"CODEHOSTINTEGRATION\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#listDatesQuery",
              "documentation": {
                "identifier": "listDatesQuery",
                "newPage": false,
                "searchKey": "database.listDatesQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const listDatesQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst listDatesQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#listDefaultReposQuery",
              "documentation": {
                "identifier": "listDefaultReposQuery",
                "newPage": false,
                "searchKey": "database.listDefaultReposQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const listDefaultReposQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst listDefaultReposQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#listReposQueryFmtstr",
              "documentation": {
                "identifier": "listReposQueryFmtstr",
                "newPage": false,
                "searchKey": "database.listReposQueryFmtstr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const listReposQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst listReposQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#listSearchContextsFmtStr",
              "documentation": {
                "identifier": "listSearchContextsFmtStr",
                "newPage": false,
                "searchKey": "database.listSearchContextsFmtStr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const listSearchContextsFmtStr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst listSearchContextsFmtStr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#maxPasswordRunes",
              "documentation": {
                "identifier": "maxPasswordRunes",
                "newPage": false,
                "searchKey": "database.maxPasswordRunes",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const maxPasswordRunes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst maxPasswordRunes = 256\n```\n\nmaxPasswordRunes is the maximum number of UTF-8 runes that a password can contain. This safety limit is to protect us from a DDOS attack caused by hashing very large passwords on Sourcegraph.com. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#searchContextsPermissionsConditionFmtStr",
              "documentation": {
                "identifier": "searchContextsPermissionsConditionFmtStr",
                "newPage": false,
                "searchKey": "database.searchContextsPermissionsConditionFmtStr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const searchContextsPermissionsConditionFmtStr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst searchContextsPermissionsConditionFmtStr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#updateSearchContextFmtStr",
              "documentation": {
                "identifier": "updateSearchContextFmtStr",
                "newPage": false,
                "searchKey": "database.updateSearchContextFmtStr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const updateSearchContextFmtStr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst updateSearchContextFmtStr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#upsertExternalServicesQueryFmtstr",
              "documentation": {
                "identifier": "upsertExternalServicesQueryFmtstr",
                "newPage": false,
                "searchKey": "database.upsertExternalServicesQueryFmtstr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const upsertExternalServicesQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst upsertExternalServicesQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#upsertExternalServicesQueryValueFmtstr",
              "documentation": {
                "identifier": "upsertExternalServicesQueryValueFmtstr",
                "newPage": false,
                "searchKey": "database.upsertExternalServicesQueryValueFmtstr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const upsertExternalServicesQueryValueFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst upsertExternalServicesQueryValueFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#upsertSQL",
              "documentation": {
                "identifier": "upsertSQL",
                "newPage": false,
                "searchKey": "database.upsertSQL",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const upsertSQL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst upsertSQL = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#userCredentialsCreateQueryFmtstr",
              "documentation": {
                "identifier": "userCredentialsCreateQueryFmtstr",
                "newPage": false,
                "searchKey": "database.userCredentialsCreateQueryFmtstr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const userCredentialsCreateQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst userCredentialsCreateQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#userCredentialsGetByScopeQueryFmtstr",
              "documentation": {
                "identifier": "userCredentialsGetByScopeQueryFmtstr",
                "newPage": false,
                "searchKey": "database.userCredentialsGetByScopeQueryFmtstr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const userCredentialsGetByScopeQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst userCredentialsGetByScopeQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#userCredentialsListQueryFmtstr",
              "documentation": {
                "identifier": "userCredentialsListQueryFmtstr",
                "newPage": false,
                "searchKey": "database.userCredentialsListQueryFmtstr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const userCredentialsListQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst userCredentialsListQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#userCredentialsUpdateQueryFmtstr",
              "documentation": {
                "identifier": "userCredentialsUpdateQueryFmtstr",
                "newPage": false,
                "searchKey": "database.userCredentialsUpdateQueryFmtstr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const userCredentialsUpdateQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst userCredentialsUpdateQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#userIDQueryFragment",
              "documentation": {
                "identifier": "userIDQueryFragment",
                "newPage": false,
                "searchKey": "database.userIDQueryFragment",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const userIDQueryFragment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst userIDQueryFragment = ...\n```\n\nuserIDQueryFragment is a query fragment that can be used to return the anonymous user ID when the user ID is not set (i.e. 0). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#userPublicReposQuery",
              "documentation": {
                "identifier": "userPublicReposQuery",
                "newPage": false,
                "searchKey": "database.userPublicReposQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const userPublicReposQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst userPublicReposQuery = `\nSELECT repo_id as id FROM user_public_repos WHERE user_id = %d\n`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#userReposQuery",
              "documentation": {
                "identifier": "userReposQuery",
                "newPage": false,
                "searchKey": "database.userReposQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const userReposQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst userReposQuery = `\nSELECT repo_id as id FROM external_service_repos WHERE user_id = %d\n`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#usersUsageCountsQuery",
              "documentation": {
                "identifier": "usersUsageCountsQuery",
                "newPage": false,
                "searchKey": "database.usersUsageCountsQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const usersUsageCountsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst usersUsageCountsQuery = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/database#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/database#AfterCreateUser",
              "documentation": {
                "identifier": "AfterCreateUser",
                "newPage": false,
                "searchKey": "database.AfterCreateUser",
                "tags": [
                  "variable",
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var AfterCreateUser"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar AfterCreateUser func(ctx context.Context, db dbutil.DB, user *types.User) error\n```\n\nUser hooks \n\nAfterCreateUser (if set) is a hook called after creating a new user in the DB by any means (e.g., both directly via Users.Create or via ExternalAccounts.CreateUserAndSave). Whatever this hook mutates in database should be reflected on the `user` argument as well. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#BeforeCreateExternalService",
              "documentation": {
                "identifier": "BeforeCreateExternalService",
                "newPage": false,
                "searchKey": "database.BeforeCreateExternalService",
                "tags": [
                  "variable",
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var BeforeCreateExternalService"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar BeforeCreateExternalService func(context.Context, dbutil.DB) error\n```\n\nBeforeCreateExternalService (if set) is invoked as a hook prior to creating a new external service in the database. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#BeforeCreateUser",
              "documentation": {
                "identifier": "BeforeCreateUser",
                "newPage": false,
                "searchKey": "database.BeforeCreateUser",
                "tags": [
                  "variable",
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var BeforeCreateUser"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar BeforeCreateUser func(ctx context.Context, db dbutil.DB) error\n```\n\nUser hooks \n\nBeforeCreateUser (if set) is a hook called before creating a new user in the DB by any means (e.g., both directly via Users.Create or via ExternalAccounts.CreateUserAndSave). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#BeforeSetUserIsSiteAdmin",
              "documentation": {
                "identifier": "BeforeSetUserIsSiteAdmin",
                "newPage": false,
                "searchKey": "database.BeforeSetUserIsSiteAdmin",
                "tags": [
                  "variable",
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var BeforeSetUserIsSiteAdmin"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar BeforeSetUserIsSiteAdmin func(isSiteAdmin bool) error\n```\n\nUser hooks \n\nBeforeSetUserIsSiteAdmin (if set) is a hook called before promoting/revoking a user to be a site admin. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ErrAccessTokenNotFound",
              "documentation": {
                "identifier": "ErrAccessTokenNotFound",
                "newPage": false,
                "searchKey": "database.ErrAccessTokenNotFound",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrAccessTokenNotFound"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrAccessTokenNotFound = errors.New(\"access token not found\")\n```\n\nErrAccessTokenNotFound occurs when a database operation expects a specific access token to exist but it does not exist. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ErrInvalidColumnState",
              "documentation": {
                "identifier": "ErrInvalidColumnState",
                "newPage": false,
                "searchKey": "database.ErrInvalidColumnState",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrInvalidColumnState"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrInvalidColumnState = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ErrNamespaceMultipleIDs",
              "documentation": {
                "identifier": "ErrNamespaceMultipleIDs",
                "newPage": false,
                "searchKey": "database.ErrNamespaceMultipleIDs",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrNamespaceMultipleIDs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrNamespaceMultipleIDs = errors.New(\"multiple namespace IDs provided\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ErrNamespaceNoID",
              "documentation": {
                "identifier": "ErrNamespaceNoID",
                "newPage": false,
                "searchKey": "database.ErrNamespaceNoID",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrNamespaceNoID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrNamespaceNoID = errors.New(\"no namespace ID provided\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ErrNamespaceNotFound",
              "documentation": {
                "identifier": "ErrNamespaceNotFound",
                "newPage": false,
                "searchKey": "database.ErrNamespaceNotFound",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrNamespaceNotFound"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrNamespaceNotFound = errors.New(\"namespace not found\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ErrNoCurrentUser",
              "documentation": {
                "identifier": "ErrNoCurrentUser",
                "newPage": false,
                "searchKey": "database.ErrNoCurrentUser",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrNoCurrentUser"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrNoCurrentUser = errors.New(\"no current user\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ErrPasswordResetRateLimit",
              "documentation": {
                "identifier": "ErrPasswordResetRateLimit",
                "newPage": false,
                "searchKey": "database.ErrPasswordResetRateLimit",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrPasswordResetRateLimit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrPasswordResetRateLimit = errors.New(\"password reset rate limit reached\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ErrSearchContextNotFound",
              "documentation": {
                "identifier": "ErrSearchContextNotFound",
                "newPage": false,
                "searchKey": "database.ErrSearchContextNotFound",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrSearchContextNotFound"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrSearchContextNotFound = errors.New(\"search context not found\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ExternalServiceKinds",
              "documentation": {
                "identifier": "ExternalServiceKinds",
                "newPage": false,
                "searchKey": "database.ExternalServiceKinds",
                "tags": [
                  "variable",
                  "object"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ExternalServiceKinds"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ExternalServiceKinds = ...\n```\n\nExternalServiceKinds contains a map of all supported kinds of external services. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#GlobalAuthz",
              "documentation": {
                "identifier": "GlobalAuthz",
                "newPage": false,
                "searchKey": "database.GlobalAuthz",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var GlobalAuthz"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar GlobalAuthz AuthzStore = &authzStore{}\n```\n\nGlobal reference to database stores using the global dbconn.Global connection handle. Deprecated: Use store constructors instead. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#GlobalExternalAccounts",
              "documentation": {
                "identifier": "GlobalExternalAccounts",
                "newPage": false,
                "searchKey": "database.GlobalExternalAccounts",
                "tags": [
                  "variable",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var GlobalExternalAccounts"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar GlobalExternalAccounts = &UserExternalAccountsStore{}\n```\n\nGlobal reference to database stores using the global dbconn.Global connection handle. Deprecated: Use store constructors instead. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#GlobalExternalServices",
              "documentation": {
                "identifier": "GlobalExternalServices",
                "newPage": false,
                "searchKey": "database.GlobalExternalServices",
                "tags": [
                  "variable",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var GlobalExternalServices"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar GlobalExternalServices = &ExternalServiceStore{}\n```\n\nGlobal reference to database stores using the global dbconn.Global connection handle. Deprecated: Use store constructors instead. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#GlobalRepos",
              "documentation": {
                "identifier": "GlobalRepos",
                "newPage": false,
                "searchKey": "database.GlobalRepos",
                "tags": [
                  "variable",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var GlobalRepos"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar GlobalRepos = &RepoStore{}\n```\n\nGlobal reference to database stores using the global dbconn.Global connection handle. Deprecated: Use store constructors instead. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#GlobalUserEmails",
              "documentation": {
                "identifier": "GlobalUserEmails",
                "newPage": false,
                "searchKey": "database.GlobalUserEmails",
                "tags": [
                  "variable",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var GlobalUserEmails"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar GlobalUserEmails = &UserEmailsStore{}\n```\n\nGlobal reference to database stores using the global dbconn.Global connection handle. Deprecated: Use store constructors instead. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#GlobalUsers",
              "documentation": {
                "identifier": "GlobalUsers",
                "newPage": false,
                "searchKey": "database.GlobalUsers",
                "tags": [
                  "variable",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var GlobalUsers"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar GlobalUsers = &UserStore{}\n```\n\nGlobal reference to database stores using the global dbconn.Global connection handle. Deprecated: Use store constructors instead. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockCannotCreateUserEmailExistsErr",
              "documentation": {
                "identifier": "MockCannotCreateUserEmailExistsErr",
                "newPage": false,
                "searchKey": "database.MockCannotCreateUserEmailExistsErr",
                "tags": [
                  "variable",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var MockCannotCreateUserEmailExistsErr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar MockCannotCreateUserEmailExistsErr = errCannotCreateUser{errorCodeEmailExists}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockCannotCreateUserUsernameExistsErr",
              "documentation": {
                "identifier": "MockCannotCreateUserUsernameExistsErr",
                "newPage": false,
                "searchKey": "database.MockCannotCreateUserUsernameExistsErr",
                "tags": [
                  "variable",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var MockCannotCreateUserUsernameExistsErr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar MockCannotCreateUserUsernameExistsErr = errCannotCreateUser{errorCodeUsernameExists}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockUserEmailNotFoundErr",
              "documentation": {
                "identifier": "MockUserEmailNotFoundErr",
                "newPage": false,
                "searchKey": "database.MockUserEmailNotFoundErr",
                "tags": [
                  "variable",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var MockUserEmailNotFoundErr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar MockUserEmailNotFoundErr = userEmailNotFoundError{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockUserNotFoundErr",
              "documentation": {
                "identifier": "MockUserNotFoundErr",
                "newPage": false,
                "searchKey": "database.MockUserNotFoundErr",
                "tags": [
                  "variable",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var MockUserNotFoundErr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar MockUserNotFoundErr = userNotFoundErr{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#Mocks",
              "documentation": {
                "identifier": "Mocks",
                "newPage": false,
                "searchKey": "database.Mocks",
                "tags": [
                  "variable",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var Mocks"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Mocks MockStores\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#aggregatedCodeIntelEventsQuery",
              "documentation": {
                "identifier": "aggregatedCodeIntelEventsQuery",
                "newPage": false,
                "searchKey": "database.aggregatedCodeIntelEventsQuery",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var aggregatedCodeIntelEventsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar aggregatedCodeIntelEventsQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#aggregatedSearchLatencyEventsQuery",
              "documentation": {
                "identifier": "aggregatedSearchLatencyEventsQuery",
                "newPage": false,
                "searchKey": "database.aggregatedSearchLatencyEventsQuery",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var aggregatedSearchLatencyEventsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar aggregatedSearchLatencyEventsQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#aggregatedSearchUsageEventsQuery",
              "documentation": {
                "identifier": "aggregatedSearchUsageEventsQuery",
                "newPage": false,
                "searchKey": "database.aggregatedSearchUsageEventsQuery",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var aggregatedSearchUsageEventsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar aggregatedSearchUsageEventsQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#codeIntelWeeklyUsersQuery",
              "documentation": {
                "identifier": "codeIntelWeeklyUsersQuery",
                "newPage": false,
                "searchKey": "database.codeIntelWeeklyUsersQuery",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var codeIntelWeeklyUsersQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar codeIntelWeeklyUsersQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#codeIntelligenceRepositoryCountsQuery",
              "documentation": {
                "identifier": "codeIntelligenceRepositoryCountsQuery",
                "newPage": false,
                "searchKey": "database.codeIntelligenceRepositoryCountsQuery",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var codeIntelligenceRepositoryCountsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar codeIntelligenceRepositoryCountsQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#errOrgNameAlreadyExists",
              "documentation": {
                "identifier": "errOrgNameAlreadyExists",
                "newPage": false,
                "searchKey": "database.errOrgNameAlreadyExists",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errOrgNameAlreadyExists"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errOrgNameAlreadyExists = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#errPermissionsUserMappingConflict",
              "documentation": {
                "identifier": "errPermissionsUserMappingConflict",
                "newPage": false,
                "searchKey": "database.errPermissionsUserMappingConflict",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errPermissionsUserMappingConflict"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errPermissionsUserMappingConflict = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#getAllRevisionsForRepoFmtStr",
              "documentation": {
                "identifier": "getAllRevisionsForRepoFmtStr",
                "newPage": false,
                "searchKey": "database.getAllRevisionsForRepoFmtStr",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var getAllRevisionsForRepoFmtStr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar getAllRevisionsForRepoFmtStr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#getSearchContextRepositoryRevisionsFmtStr",
              "documentation": {
                "identifier": "getSearchContextRepositoryRevisionsFmtStr",
                "newPage": false,
                "searchKey": "database.getSearchContextRepositoryRevisionsFmtStr",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var getSearchContextRepositoryRevisionsFmtStr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar getSearchContextRepositoryRevisionsFmtStr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#insertReposQuery",
              "documentation": {
                "identifier": "insertReposQuery",
                "newPage": false,
                "searchKey": "database.insertReposQuery",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var insertReposQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar insertReposQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#intervalByPeriodType",
              "documentation": {
                "identifier": "intervalByPeriodType",
                "newPage": false,
                "searchKey": "database.intervalByPeriodType",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var intervalByPeriodType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar intervalByPeriodType = ...\n```\n\nintervalByPeriodType is a map of generate_series step values by period type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#namespaceQueryFmtstr",
              "documentation": {
                "identifier": "namespaceQueryFmtstr",
                "newPage": false,
                "searchKey": "database.namespaceQueryFmtstr",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var namespaceQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar namespaceQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#passwordResetRateLimit",
              "documentation": {
                "identifier": "passwordResetRateLimit",
                "newPage": false,
                "searchKey": "database.passwordResetRateLimit",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var passwordResetRateLimit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar passwordResetRateLimit = \"1 minute\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#periodByPeriodType",
              "documentation": {
                "identifier": "periodByPeriodType",
                "newPage": false,
                "searchKey": "database.periodByPeriodType",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var periodByPeriodType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar periodByPeriodType = ...\n```\n\nperiodByPeriodType is a map of SQL fragments that produce a timestamp bucket by period type. This assumes the existence of a  field named `timestamp` in the enclosing query. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#repoColumns",
              "documentation": {
                "identifier": "repoColumns",
                "newPage": false,
                "searchKey": "database.repoColumns",
                "tags": [
                  "variable",
                  "array",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var repoColumns"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar repoColumns = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#searchLatencyEventNames",
              "documentation": {
                "identifier": "searchLatencyEventNames",
                "newPage": false,
                "searchKey": "database.searchLatencyEventNames",
                "tags": [
                  "variable",
                  "array",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var searchLatencyEventNames"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar searchLatencyEventNames = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#siteUsageQuery",
              "documentation": {
                "identifier": "siteUsageQuery",
                "newPage": false,
                "searchKey": "database.siteUsageQuery",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var siteUsageQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar siteUsageQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#userCredentialsColumns",
              "documentation": {
                "identifier": "userCredentialsColumns",
                "newPage": false,
                "searchKey": "database.userCredentialsColumns",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var userCredentialsColumns"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar userCredentialsColumns = ...\n```\n\nuserCredentialsColumns are the columns that must be selected by user_credentials queries in order to use scanUserCredential(). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#usernamesForTests",
              "documentation": {
                "identifier": "usernamesForTests",
                "newPage": false,
                "searchKey": "database.usernamesForTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var usernamesForTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar usernamesForTests = ...\n```\n\nusernamesForTests is a list of test cases containing valid and invalid usernames and org names. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/database#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/database#AccessToken",
              "documentation": {
                "identifier": "AccessToken",
                "newPage": false,
                "searchKey": "database.AccessToken",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AccessToken struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AccessToken struct {\n\tID            int64\n\tSubjectUserID int32 // the user whose privileges the access token grants\n\tScopes        []string\n\tNote          string\n\tCreatorUserID int32\n\tCreatedAt     time.Time\n\tLastUsedAt    *time.Time\n}\n```\n\nAccessToken describes an access token. The actual token (that a caller must supply to authenticate) is not stored and is not present in this struct. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#AccessTokenStore",
              "documentation": {
                "identifier": "AccessTokenStore",
                "newPage": false,
                "searchKey": "database.AccessTokenStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AccessTokenStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AccessTokenStore struct {\n\t*basestore.Store\n}\n```\n\nAccessTokenStore implements autocert.Cache \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#AccessTokens",
                    "documentation": {
                      "identifier": "AccessTokens",
                      "newPage": false,
                      "searchKey": "database.AccessTokens",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func AccessTokens(db dbutil.DB) *AccessTokenStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc AccessTokens(db dbutil.DB) *AccessTokenStore\n```\n\nAccessTokens instantiates and returns a new AccessTokenStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#AccessTokensWith",
                    "documentation": {
                      "identifier": "AccessTokensWith",
                      "newPage": false,
                      "searchKey": "database.AccessTokensWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func AccessTokensWith(other basestore.ShareableStore) *AccessTokenStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc AccessTokensWith(other basestore.ShareableStore) *AccessTokenStore\n```\n\nAccessTokensWith instantiates and returns a new AccessTokenStore using the other store handle. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#AccessTokenStore.Count",
                    "documentation": {
                      "identifier": "AccessTokenStore.Count",
                      "newPage": false,
                      "searchKey": "database.AccessTokenStore.Count",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AccessTokenStore) Count(ctx context.Context, opt AccessTokensListOptions) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AccessTokenStore) Count(ctx context.Context, opt AccessTokensListOptions) (int, error)\n```\n\nCount counts all access tokens that satisfy the options (ignoring limit and offset). \n\n🚨 SECURITY: The caller must ensure that the actor is permitted to count the tokens. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#AccessTokenStore.Create",
                    "documentation": {
                      "identifier": "AccessTokenStore.Create",
                      "newPage": false,
                      "searchKey": "database.AccessTokenStore.Create",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AccessTokenStore) Create(ctx context.Context, subjectUserID int32, scopes []string, note string, creatorUserID int32) (id int64, token string, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AccessTokenStore) Create(ctx context.Context, subjectUserID int32, scopes []string, note string, creatorUserID int32) (id int64, token string, err error)\n```\n\nCreate creates an access token for the specified user. The secret token value itself is returned. The caller is responsible for presenting this value to the end user; Sourcegraph does not retain it (only a hash of it). \n\nThe secret token value is a long random string; it is what API clients must provide to authenticate their requests. We store the SHA-256 hash of the secret token value in the database. This lets us verify a token's validity (in the (*accessTokens).Lookup method) quickly, while still ensuring that an attacker who obtains the access_tokens DB table would not be able to impersonate a token holder. We don't use bcrypt because the original secret is a randomly generated string (not a password), so it's implausible for an attacker to brute-force the input space; also bcrypt is slow and would add noticeable latency to each request that supplied a token. \n\n🚨 SECURITY: The caller must ensure that the actor is permitted to create tokens for the specified user (i.e., that the actor is either the user or a site admin). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#AccessTokenStore.DeleteByID",
                    "documentation": {
                      "identifier": "AccessTokenStore.DeleteByID",
                      "newPage": false,
                      "searchKey": "database.AccessTokenStore.DeleteByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AccessTokenStore) DeleteByID(ctx context.Context, id int64, subjectUserID int32) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AccessTokenStore) DeleteByID(ctx context.Context, id int64, subjectUserID int32) error\n```\n\nDeleteByID deletes an access token given its ID and associated subject user. \n\n🚨 SECURITY: The caller must ensure that the actor is permitted to delete the token. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#AccessTokenStore.DeleteByToken",
                    "documentation": {
                      "identifier": "AccessTokenStore.DeleteByToken",
                      "newPage": false,
                      "searchKey": "database.AccessTokenStore.DeleteByToken",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AccessTokenStore) DeleteByToken(ctx context.Context, tokenHexEncoded string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AccessTokenStore) DeleteByToken(ctx context.Context, tokenHexEncoded string) error\n```\n\nDeleteByToken deletes an access token given the secret token value itself (i.e., the same value that an API client would use to authenticate). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#AccessTokenStore.GetByID",
                    "documentation": {
                      "identifier": "AccessTokenStore.GetByID",
                      "newPage": false,
                      "searchKey": "database.AccessTokenStore.GetByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AccessTokenStore) GetByID(ctx context.Context, id int64) (*AccessToken, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AccessTokenStore) GetByID(ctx context.Context, id int64) (*AccessToken, error)\n```\n\nGetByID retrieves the access token (if any) given its ID. \n\n🚨 SECURITY: The caller must ensure that the actor is permitted to view this access token. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#AccessTokenStore.GetByToken",
                    "documentation": {
                      "identifier": "AccessTokenStore.GetByToken",
                      "newPage": false,
                      "searchKey": "database.AccessTokenStore.GetByToken",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AccessTokenStore) GetByToken(ctx context.Context, tokenHexEncoded string) (*AccessToken, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AccessTokenStore) GetByToken(ctx context.Context, tokenHexEncoded string) (*AccessToken, error)\n```\n\nGetByToken retrieves the access token (if any) given its hex encoded string. \n\n🚨 SECURITY: The caller must ensure that the actor is permitted to view this access token. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#AccessTokenStore.List",
                    "documentation": {
                      "identifier": "AccessTokenStore.List",
                      "newPage": false,
                      "searchKey": "database.AccessTokenStore.List",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AccessTokenStore) List(ctx context.Context, opt AccessTokensListOptions) ([]*AccessToken, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AccessTokenStore) List(ctx context.Context, opt AccessTokensListOptions) ([]*AccessToken, error)\n```\n\nList lists all access tokens that satisfy the options. \n\n🚨 SECURITY: The caller must ensure that the actor is permitted to list with the specified options. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#AccessTokenStore.Lookup",
                    "documentation": {
                      "identifier": "AccessTokenStore.Lookup",
                      "newPage": false,
                      "searchKey": "database.AccessTokenStore.Lookup",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AccessTokenStore) Lookup(ctx context.Context, tokenHexEncoded, requiredScope string) (subjectUserID int32, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AccessTokenStore) Lookup(ctx context.Context, tokenHexEncoded, requiredScope string) (subjectUserID int32, err error)\n```\n\nLookup looks up the access token. If it's valid and contains the required scope, it returns the subject's user ID. Otherwise ErrAccessTokenNotFound is returned. \n\nCalling Lookup also updates the access token's last-used-at date. \n\n🚨 SECURITY: This returns a user ID if and only if the tokenHexEncoded corresponds to a valid, non-deleted access token. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#AccessTokenStore.Transact",
                    "documentation": {
                      "identifier": "AccessTokenStore.Transact",
                      "newPage": false,
                      "searchKey": "database.AccessTokenStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AccessTokenStore) Transact(ctx context.Context) (*AccessTokenStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AccessTokenStore) Transact(ctx context.Context) (*AccessTokenStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#AccessTokenStore.With",
                    "documentation": {
                      "identifier": "AccessTokenStore.With",
                      "newPage": false,
                      "searchKey": "database.AccessTokenStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AccessTokenStore) With(other basestore.ShareableStore) *AccessTokenStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AccessTokenStore) With(other basestore.ShareableStore) *AccessTokenStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#AccessTokenStore.delete",
                    "documentation": {
                      "identifier": "AccessTokenStore.delete",
                      "newPage": false,
                      "searchKey": "database.AccessTokenStore.delete",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AccessTokenStore) delete(ctx context.Context, cond *sqlf.Query) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AccessTokenStore) delete(ctx context.Context, cond *sqlf.Query) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#AccessTokenStore.get",
                    "documentation": {
                      "identifier": "AccessTokenStore.get",
                      "newPage": false,
                      "searchKey": "database.AccessTokenStore.get",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AccessTokenStore) get(ctx context.Context, conds []*sqlf.Query) (*AccessToken, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AccessTokenStore) get(ctx context.Context, conds []*sqlf.Query) (*AccessToken, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#AccessTokenStore.list",
                    "documentation": {
                      "identifier": "AccessTokenStore.list",
                      "newPage": false,
                      "searchKey": "database.AccessTokenStore.list",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AccessTokenStore) list(ctx context.Context, conds []*sqlf.Query, limitOffset *LimitOffset) ([]*AccessToken, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AccessTokenStore) list(ctx context.Context, conds []*sqlf.Query, limitOffset *LimitOffset) ([]*AccessToken, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#AccessTokensListOptions",
              "documentation": {
                "identifier": "AccessTokensListOptions",
                "newPage": false,
                "searchKey": "database.AccessTokensListOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AccessTokensListOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AccessTokensListOptions struct {\n\tSubjectUserID  int32 // only list access tokens with this user as the subject\n\tLastUsedAfter  *time.Time\n\tLastUsedBefore *time.Time\n\t*LimitOffset\n}\n```\n\nAccessTokensListOptions contains options for listing access tokens. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#AccessTokensListOptions.sqlConditions",
                    "documentation": {
                      "identifier": "AccessTokensListOptions.sqlConditions",
                      "newPage": false,
                      "searchKey": "database.AccessTokensListOptions.sqlConditions",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o AccessTokensListOptions) sqlConditions() []*sqlf.Query"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o AccessTokensListOptions) sqlConditions() []*sqlf.Query\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#AuthenticatorType",
              "documentation": {
                "identifier": "AuthenticatorType",
                "newPage": false,
                "searchKey": "database.AuthenticatorType",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AuthenticatorType string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AuthenticatorType string\n```\n\nAuthenticatorType defines all possible types of authenticators stored in the database. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#AuthorizedReposArgs",
              "documentation": {
                "identifier": "AuthorizedReposArgs",
                "newPage": false,
                "searchKey": "database.AuthorizedReposArgs",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AuthorizedReposArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AuthorizedReposArgs struct {\n\t// The candidate list of repositories to be verified.\n\tRepos []*types.Repo\n\t// The user whose authorization to access the repos is being checked.\n\tUserID int32\n\t// The permission level to be verified.\n\tPerm authz.Perms\n\t// The type of permissions to be verified.\n\tType authz.PermType\n}\n```\n\nAuthorizedReposArgs contains required arguments to verify if a user is authorized to access some or all of the repositories from the candidate list with the given level and type of permissions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#AuthzStore",
              "documentation": {
                "identifier": "AuthzStore",
                "newPage": false,
                "searchKey": "database.AuthzStore",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AuthzStore interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AuthzStore interface {\n\t// GrantPendingPermissions grants pending permissions for a user. It is a no-op in the OSS version.\n\tGrantPendingPermissions(ctx context.Context, args *GrantPendingPermissionsArgs) error\n\t// AuthorizedRepos checks if a user is authorized to access repositories in the candidate list.\n\t// The returned list must be a list of repositories that are authorized to the given user.\n\t// It is a no-op in the OSS version.\n\tAuthorizedRepos(ctx context.Context, args *AuthorizedReposArgs) ([]*types.Repo, error)\n\t// RevokeUserPermissions deletes both effective and pending permissions that could be related to a user.\n\t// It is a no-op in the OSS version.\n\tRevokeUserPermissions(ctx context.Context, args *RevokeUserPermissionsArgs) error\n}\n```\n\nAuthzStore contains methods for manipulating user permissions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#CountUniqueUsersOptions",
              "documentation": {
                "identifier": "CountUniqueUsersOptions",
                "newPage": false,
                "searchKey": "database.CountUniqueUsersOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CountUniqueUsersOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CountUniqueUsersOptions struct {\n\t// If true, only include registered users. Otherwise, include all users.\n\tRegisteredOnly bool\n\t// If true, only include code host integration users. Otherwise, include all users.\n\tIntegrationOnly bool\n\t// If set, adds additional restrictions on the event types.\n\tEventFilters *EventFilterOptions\n}\n```\n\nCountUniqueUsersOptions provides options for counting unique users. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ErrOrgMemberNotFound",
              "documentation": {
                "identifier": "ErrOrgMemberNotFound",
                "newPage": false,
                "searchKey": "database.ErrOrgMemberNotFound",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ErrOrgMemberNotFound struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ErrOrgMemberNotFound struct {\n\targs []interface{}\n}\n```\n\nErrOrgMemberNotFound is the error that is returned when a user is not in an org. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#ErrOrgMemberNotFound.Error",
                    "documentation": {
                      "identifier": "ErrOrgMemberNotFound.Error",
                      "newPage": false,
                      "searchKey": "database.ErrOrgMemberNotFound.Error",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err *ErrOrgMemberNotFound) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err *ErrOrgMemberNotFound) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ErrOrgMemberNotFound.NotFound",
                    "documentation": {
                      "identifier": "ErrOrgMemberNotFound.NotFound",
                      "newPage": false,
                      "searchKey": "database.ErrOrgMemberNotFound.NotFound",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ErrOrgMemberNotFound) NotFound() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ErrOrgMemberNotFound) NotFound() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#Event",
              "documentation": {
                "identifier": "Event",
                "newPage": false,
                "searchKey": "database.Event",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Event struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Event struct {\n\tName            string\n\tURL             string\n\tUserID          uint32\n\tAnonymousUserID string\n\tArgument        json.RawMessage\n\tSource          string\n\tTimestamp       time.Time\n\tFeatureFlags    featureflag.FlagSet\n\tCohortID        *string // date in YYYY-MM-DD format\n}\n```\n\nEvent contains information needed for logging an event. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#makeTestEvent",
                    "documentation": {
                      "identifier": "makeTestEvent",
                      "newPage": false,
                      "searchKey": "database.makeTestEvent",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makeTestEvent(e *Event) *Event"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makeTestEvent(e *Event) *Event\n```\n\nmakeTestEvent sets the required (uninteresting) fields that are required on insertion due to database constraints. This method will also add some sub-day jitter to the timestamp. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#EventArgumentMatch",
              "documentation": {
                "identifier": "EventArgumentMatch",
                "newPage": false,
                "searchKey": "database.EventArgumentMatch",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EventArgumentMatch struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EventArgumentMatch struct {\n\t// The name of the JSON key to match against.\n\tArgumentName string\n\t// The actual value passed to the JSON key to match.\n\tArgumentValue string\n}\n```\n\nEventArgumentMatch provides the options for matching an event with a specific JSON value passed as an argument. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#EventFilterOptions",
              "documentation": {
                "identifier": "EventFilterOptions",
                "newPage": false,
                "searchKey": "database.EventFilterOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EventFilterOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EventFilterOptions struct {\n\t// If set, only include events with a given prefix.\n\tByEventNamePrefix string\n\t// If set, only include events with the given name.\n\tByEventName string\n\t// If not empty, only include events that matche a list of given event names\n\tByEventNames []string\n\t// Must be used with ByEventName\n\t//\n\t// If set, only include events that match a specified condition.\n\tByEventNameWithCondition *sqlf.Query\n}\n```\n\nEventFilterOptions provides options for filtering events. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#EventLogStore",
              "documentation": {
                "identifier": "EventLogStore",
                "newPage": false,
                "searchKey": "database.EventLogStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EventLogStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EventLogStore struct {\n\t*basestore.Store\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#EventLogs",
                    "documentation": {
                      "identifier": "EventLogs",
                      "newPage": false,
                      "searchKey": "database.EventLogs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func EventLogs(db dbutil.DB) *EventLogStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc EventLogs(db dbutil.DB) *EventLogStore\n```\n\nEventLogs instantiates and returns a new EventLogStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogsWith",
                    "documentation": {
                      "identifier": "EventLogsWith",
                      "newPage": false,
                      "searchKey": "database.EventLogsWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func EventLogsWith(other basestore.ShareableStore) *EventLogStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc EventLogsWith(other basestore.ShareableStore) *EventLogStore\n```\n\nNewEventLogStoreWithDB instantiates and returns a new EventLogStore using the other store handle. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.AggregatedCodeIntelEvents",
                    "documentation": {
                      "identifier": "EventLogStore.AggregatedCodeIntelEvents",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.AggregatedCodeIntelEvents",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) AggregatedCodeIntelEvents(ctx context.Context) ([]types.CodeIntelAggregatedEvent, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) AggregatedCodeIntelEvents(ctx context.Context) ([]types.CodeIntelAggregatedEvent, error)\n```\n\nAggregatedCodeIntelEvents calculates CodeIntelAggregatedEvent for each every unique event type related to code intel. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.AggregatedSearchEvents",
                    "documentation": {
                      "identifier": "EventLogStore.AggregatedSearchEvents",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.AggregatedSearchEvents",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) AggregatedSearchEvents(ctx context.Context, now time.Time) ([]types.SearchAggregatedEvent, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) AggregatedSearchEvents(ctx context.Context, now time.Time) ([]types.SearchAggregatedEvent, error)\n```\n\nAggregatedSearchEvents calculates SearchAggregatedEvent for each every unique event type related to search. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.CodeIntelligenceCrossRepositoryWAUs",
                    "documentation": {
                      "identifier": "EventLogStore.CodeIntelligenceCrossRepositoryWAUs",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.CodeIntelligenceCrossRepositoryWAUs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) CodeIntelligenceCrossRepositoryWAUs(ctx context.Context) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) CodeIntelligenceCrossRepositoryWAUs(ctx context.Context) (int, error)\n```\n\nCodeIntelligenceCrossRepositoryWAUs returns the WAU (current week) with any (precise or search-based) cross-repository code intelligence event. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.CodeIntelligencePreciseCrossRepositoryWAUs",
                    "documentation": {
                      "identifier": "EventLogStore.CodeIntelligencePreciseCrossRepositoryWAUs",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.CodeIntelligencePreciseCrossRepositoryWAUs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) CodeIntelligencePreciseCrossRepositoryWAUs(ctx context.Context) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) CodeIntelligencePreciseCrossRepositoryWAUs(ctx context.Context) (int, error)\n```\n\nCodeIntelligencePreciseCrossRepositoryWAUs returns the WAU (current week) with precise-based cross-repository code intelligence events. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.CodeIntelligencePreciseWAUs",
                    "documentation": {
                      "identifier": "EventLogStore.CodeIntelligencePreciseWAUs",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.CodeIntelligencePreciseWAUs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) CodeIntelligencePreciseWAUs(ctx context.Context) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) CodeIntelligencePreciseWAUs(ctx context.Context) (int, error)\n```\n\nCodeIntelligencePreciseWAUs returns the WAU (current week) with precise-based code intelligence events. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.CodeIntelligenceRepositoryCounts",
                    "documentation": {
                      "identifier": "EventLogStore.CodeIntelligenceRepositoryCounts",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.CodeIntelligenceRepositoryCounts",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) CodeIntelligenceRepositoryCounts(ctx context.Context) (withUploads int, withoutUploads int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) CodeIntelligenceRepositoryCounts(ctx context.Context) (withUploads int, withoutUploads int, err error)\n```\n\nCodeIntelligenceRepositoryCounts returns the number of repositories with and without an associated and up-to-date code intelligence upload. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.CodeIntelligenceSearchBasedCrossRepositoryWAUs",
                    "documentation": {
                      "identifier": "EventLogStore.CodeIntelligenceSearchBasedCrossRepositoryWAUs",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.CodeIntelligenceSearchBasedCrossRepositoryWAUs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) CodeIntelligenceSearchBasedCrossRepositoryWAUs(ctx context.Context) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) CodeIntelligenceSearchBasedCrossRepositoryWAUs(ctx context.Context) (int, error)\n```\n\nCodeIntelligenceSearchBasedCrossRepositoryWAUs returns the WAU (current week) with searched-base cross-repository code intelligence events. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.CodeIntelligenceSearchBasedWAUs",
                    "documentation": {
                      "identifier": "EventLogStore.CodeIntelligenceSearchBasedWAUs",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.CodeIntelligenceSearchBasedWAUs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) CodeIntelligenceSearchBasedWAUs(ctx context.Context) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) CodeIntelligenceSearchBasedWAUs(ctx context.Context) (int, error)\n```\n\nCodeIntelligenceSearchBasedWAUs returns the WAU (current week) with searched-base code intelligence events. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.CodeIntelligenceWAUs",
                    "documentation": {
                      "identifier": "EventLogStore.CodeIntelligenceWAUs",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.CodeIntelligenceWAUs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) CodeIntelligenceWAUs(ctx context.Context) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) CodeIntelligenceWAUs(ctx context.Context) (int, error)\n```\n\nCodeIntelligenceWAUs returns the WAU (current week) with any (precise or search-based) code intelligence event. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.CountByUserID",
                    "documentation": {
                      "identifier": "EventLogStore.CountByUserID",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.CountByUserID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) CountByUserID(ctx context.Context, userID int32) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) CountByUserID(ctx context.Context, userID int32) (int, error)\n```\n\nCountByUserID gets a count of events logged by a given user. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.CountByUserIDAndEventName",
                    "documentation": {
                      "identifier": "EventLogStore.CountByUserIDAndEventName",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.CountByUserIDAndEventName",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) CountByUserIDAndEventName(ctx context.Context, userID int32, name string) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) CountByUserIDAndEventName(ctx context.Context, userID int32, name string) (int, error)\n```\n\nCountByUserIDAndEventName gets a count of events logged by a given user and with a given event name. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.CountByUserIDAndEventNamePrefix",
                    "documentation": {
                      "identifier": "EventLogStore.CountByUserIDAndEventNamePrefix",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.CountByUserIDAndEventNamePrefix",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) CountByUserIDAndEventNamePrefix(ctx context.Context, userID int32, namePrefix string) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) CountByUserIDAndEventNamePrefix(ctx context.Context, userID int32, namePrefix string) (int, error)\n```\n\nCountByUserIDAndEventNamePrefix gets a count of events logged by a given user and with a given event name prefix. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.CountByUserIDAndEventNames",
                    "documentation": {
                      "identifier": "EventLogStore.CountByUserIDAndEventNames",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.CountByUserIDAndEventNames",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) CountByUserIDAndEventNames(ctx context.Context, userID int32, names []string) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) CountByUserIDAndEventNames(ctx context.Context, userID int32, names []string) (int, error)\n```\n\nCountByUserIDAndEventNames gets a count of events logged by a given user that match a list of given event names. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.CountUniqueUsersAll",
                    "documentation": {
                      "identifier": "EventLogStore.CountUniqueUsersAll",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.CountUniqueUsersAll",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) CountUniqueUsersAll(ctx context.Context, startDate, endDate time.Time) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) CountUniqueUsersAll(ctx context.Context, startDate, endDate time.Time) (int, error)\n```\n\nCountUniqueUsersAll provides a count of unique active users in a given time span. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.CountUniqueUsersByEventName",
                    "documentation": {
                      "identifier": "EventLogStore.CountUniqueUsersByEventName",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.CountUniqueUsersByEventName",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) CountUniqueUsersByEventName(ctx context.Context, startDate, endDate time.Time, name string) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) CountUniqueUsersByEventName(ctx context.Context, startDate, endDate time.Time, name string) (int, error)\n```\n\nCountUniqueUsersByEventName provides a count of unique active users in a given time span that logged a given event. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.CountUniqueUsersByEventNamePrefix",
                    "documentation": {
                      "identifier": "EventLogStore.CountUniqueUsersByEventNamePrefix",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.CountUniqueUsersByEventNamePrefix",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) CountUniqueUsersByEventNamePrefix(ctx context.Context, startDate, endDate time.Time, namePrefix string) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) CountUniqueUsersByEventNamePrefix(ctx context.Context, startDate, endDate time.Time, namePrefix string) (int, error)\n```\n\nCountUniqueUsersByEventNamePrefix provides a count of unique active users in a given time span that logged an event with a given prefix. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.CountUniqueUsersByEventNames",
                    "documentation": {
                      "identifier": "EventLogStore.CountUniqueUsersByEventNames",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.CountUniqueUsersByEventNames",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) CountUniqueUsersByEventNames(ctx context.Context, startDate, endDate time.Time, names []string) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) CountUniqueUsersByEventNames(ctx context.Context, startDate, endDate time.Time, names []string) (int, error)\n```\n\nCountUniqueUsersByEventNames provides a count of unique active users in a given time span that logged any event that matches a list of given event names \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.CountUniqueUsersPerPeriod",
                    "documentation": {
                      "identifier": "EventLogStore.CountUniqueUsersPerPeriod",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.CountUniqueUsersPerPeriod",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) CountUniqueUsersPerPeriod(ctx context.Context, periodType PeriodType, now time.Time, periods int, opt *CountUniqueUsersOptions) ([]UsageValue, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) CountUniqueUsersPerPeriod(ctx context.Context, periodType PeriodType, now time.Time, periods int, opt *CountUniqueUsersOptions) ([]UsageValue, error)\n```\n\nCountUniqueUsersPerPeriod provides a count of unique active users in a given time span, broken up into periods of a given type. The value of `now` should be the current time in UTC. Returns an array of length `periods`, with one entry for each period in the time span. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.Insert",
                    "documentation": {
                      "identifier": "EventLogStore.Insert",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.Insert",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) Insert(ctx context.Context, e *Event) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) Insert(ctx context.Context, e *Event) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.LatestPing",
                    "documentation": {
                      "identifier": "EventLogStore.LatestPing",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.LatestPing",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) LatestPing(ctx context.Context) (*types.Event, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) LatestPing(ctx context.Context) (*types.Event, error)\n```\n\nLatestPing returns the most recently recorded ping event. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.ListAll",
                    "documentation": {
                      "identifier": "EventLogStore.ListAll",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.ListAll",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) ListAll(ctx context.Context, opt EventLogsListOptions) ([]*types.Event, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) ListAll(ctx context.Context, opt EventLogsListOptions) ([]*types.Event, error)\n```\n\nListAll gets all event logs in descending order of timestamp. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.ListUniqueUsersAll",
                    "documentation": {
                      "identifier": "EventLogStore.ListUniqueUsersAll",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.ListUniqueUsersAll",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) ListUniqueUsersAll(ctx context.Context, startDate, endDate time.Time) ([]int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) ListUniqueUsersAll(ctx context.Context, startDate, endDate time.Time) ([]int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.MaxTimestampByUserID",
                    "documentation": {
                      "identifier": "EventLogStore.MaxTimestampByUserID",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.MaxTimestampByUserID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) MaxTimestampByUserID(ctx context.Context, userID int32) (*time.Time, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) MaxTimestampByUserID(ctx context.Context, userID int32) (*time.Time, error)\n```\n\nMaxTimestampByUserID gets the max timestamp among event logs for a given user. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.MaxTimestampByUserIDAndSource",
                    "documentation": {
                      "identifier": "EventLogStore.MaxTimestampByUserIDAndSource",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.MaxTimestampByUserIDAndSource",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) MaxTimestampByUserIDAndSource(ctx context.Context, userID int32, source string) (*time.Time, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) MaxTimestampByUserIDAndSource(ctx context.Context, userID int32, source string) (*time.Time, error)\n```\n\nMaxTimestampByUserIDAndSource gets the max timestamp among event logs for a given user and event source. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.SiteUsage",
                    "documentation": {
                      "identifier": "EventLogStore.SiteUsage",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.SiteUsage",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) SiteUsage(ctx context.Context) (types.SiteUsageSummary, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) SiteUsage(ctx context.Context) (types.SiteUsageSummary, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.Transact",
                    "documentation": {
                      "identifier": "EventLogStore.Transact",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) Transact(ctx context.Context) (*EventLogStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) Transact(ctx context.Context) (*EventLogStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.UsersUsageCounts",
                    "documentation": {
                      "identifier": "EventLogStore.UsersUsageCounts",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.UsersUsageCounts",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) UsersUsageCounts(ctx context.Context) (counts []types.UserUsageCounts, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) UsersUsageCounts(ctx context.Context) (counts []types.UserUsageCounts, err error)\n```\n\nUsersUsageCounts returns a list of UserUsageCounts for all active users that produced 'SearchResultsQueried' and any '%codeintel%' events in the event_logs table. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.With",
                    "documentation": {
                      "identifier": "EventLogStore.With",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) With(other basestore.ShareableStore) *EventLogStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) With(other basestore.ShareableStore) *EventLogStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.aggregatedCodeIntelEvents",
                    "documentation": {
                      "identifier": "EventLogStore.aggregatedCodeIntelEvents",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.aggregatedCodeIntelEvents",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) aggregatedCodeIntelEvents(ctx context.Context, now time.Time) (events []types.CodeIntelAggregatedEvent, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) aggregatedCodeIntelEvents(ctx context.Context, now time.Time) (events []types.CodeIntelAggregatedEvent, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.aggregatedSearchEvents",
                    "documentation": {
                      "identifier": "EventLogStore.aggregatedSearchEvents",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.aggregatedSearchEvents",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) aggregatedSearchEvents(ctx context.Context, queryString string, now time.Time) (events []types.SearchAggregatedEvent, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) aggregatedSearchEvents(ctx context.Context, queryString string, now time.Time) (events []types.SearchAggregatedEvent, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.codeIntelligenceWeeklyUsersCount",
                    "documentation": {
                      "identifier": "EventLogStore.codeIntelligenceWeeklyUsersCount",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.codeIntelligenceWeeklyUsersCount",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) codeIntelligenceWeeklyUsersCount(ctx context.Context, eventNames []string, now time.Time) (wau int, _ error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) codeIntelligenceWeeklyUsersCount(ctx context.Context, eventNames []string, now time.Time) (wau int, _ error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.countBySQL",
                    "documentation": {
                      "identifier": "EventLogStore.countBySQL",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.countBySQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) countBySQL(ctx context.Context, querySuffix *sqlf.Query) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) countBySQL(ctx context.Context, querySuffix *sqlf.Query) (int, error)\n```\n\ncountBySQL gets a count of event logs. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.countPerPeriodBySQL",
                    "documentation": {
                      "identifier": "EventLogStore.countPerPeriodBySQL",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.countPerPeriodBySQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) countPerPeriodBySQL(ctx context.Context, countExpr, interval, period *sqlf.Query, startDate, endDate time.Time, conds []*sqlf.Query) ([]UsageValue, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) countPerPeriodBySQL(ctx context.Context, countExpr, interval, period *sqlf.Query, startDate, endDate time.Time, conds []*sqlf.Query) ([]UsageValue, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.countUniqueUsersBySQL",
                    "documentation": {
                      "identifier": "EventLogStore.countUniqueUsersBySQL",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.countUniqueUsersBySQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) countUniqueUsersBySQL(ctx context.Context, startDate, endDate time.Time, querySuffix *sqlf.Query) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) countUniqueUsersBySQL(ctx context.Context, startDate, endDate time.Time, querySuffix *sqlf.Query) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.countUniqueUsersPerPeriodBySQL",
                    "documentation": {
                      "identifier": "EventLogStore.countUniqueUsersPerPeriodBySQL",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.countUniqueUsersPerPeriodBySQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) countUniqueUsersPerPeriodBySQL(ctx context.Context, interval, period *sqlf.Query, startDate, endDate time.Time, conds []*sqlf.Query) ([]UsageValue, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) countUniqueUsersPerPeriodBySQL(ctx context.Context, interval, period *sqlf.Query, startDate, endDate time.Time, conds []*sqlf.Query) ([]UsageValue, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.getBySQL",
                    "documentation": {
                      "identifier": "EventLogStore.getBySQL",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.getBySQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) getBySQL(ctx context.Context, querySuffix *sqlf.Query) ([]*types.Event, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) getBySQL(ctx context.Context, querySuffix *sqlf.Query) ([]*types.Event, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.maxTimestampBySQL",
                    "documentation": {
                      "identifier": "EventLogStore.maxTimestampBySQL",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.maxTimestampBySQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) maxTimestampBySQL(ctx context.Context, querySuffix *sqlf.Query) (*time.Time, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) maxTimestampBySQL(ctx context.Context, querySuffix *sqlf.Query) (*time.Time, error)\n```\n\nmaxTimestampBySQL gets the max timestamp among event logs. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#EventLogStore.siteUsage",
                    "documentation": {
                      "identifier": "EventLogStore.siteUsage",
                      "newPage": false,
                      "searchKey": "database.EventLogStore.siteUsage",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *EventLogStore) siteUsage(ctx context.Context, now time.Time) (summary types.SiteUsageSummary, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *EventLogStore) siteUsage(ctx context.Context, now time.Time) (summary types.SiteUsageSummary, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#EventLogsListOptions",
              "documentation": {
                "identifier": "EventLogsListOptions",
                "newPage": false,
                "searchKey": "database.EventLogsListOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EventLogsListOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EventLogsListOptions struct {\n\t// UserID specifies the user whose events should be included.\n\tUserID int32\n\n\t*LimitOffset\n\n\tEventName *string\n}\n```\n\nEventLogsListOptions specifies the options for listing event logs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ExternalAccountsListOptions",
              "documentation": {
                "identifier": "ExternalAccountsListOptions",
                "newPage": false,
                "searchKey": "database.ExternalAccountsListOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExternalAccountsListOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExternalAccountsListOptions struct {\n\tUserID                           int32\n\tServiceType, ServiceID, ClientID string\n\tAccountID                        int64\n\tExcludeExpired                   bool\n\t*LimitOffset\n}\n```\n\nExternalAccountsListOptions specifies the options for listing user external accounts. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ExternalAccountsMigrator",
              "documentation": {
                "identifier": "ExternalAccountsMigrator",
                "newPage": false,
                "searchKey": "database.ExternalAccountsMigrator",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExternalAccountsMigrator struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExternalAccountsMigrator struct {\n\tstore        *basestore.Store\n\tBatchSize    int\n\tAllowDecrypt bool\n}\n```\n\nExternalAccountsMigrator is a background job that encrypts external accounts data on startup. It periodically waits until a keyring is configured to determine how many services it must migrate. Scheduling and progress report is delegated to the out of band migration package. The migration is non destructive and can be reverted. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#NewExternalAccountsMigrator",
                    "documentation": {
                      "identifier": "NewExternalAccountsMigrator",
                      "newPage": false,
                      "searchKey": "database.NewExternalAccountsMigrator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewExternalAccountsMigrator(store *basestore.Store) *ExternalAccountsMigrator"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewExternalAccountsMigrator(store *basestore.Store) *ExternalAccountsMigrator\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#NewExternalAccountsMigratorWithDB",
                    "documentation": {
                      "identifier": "NewExternalAccountsMigratorWithDB",
                      "newPage": false,
                      "searchKey": "database.NewExternalAccountsMigratorWithDB",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewExternalAccountsMigratorWithDB(db dbutil.DB) *ExternalAccountsMigrator"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewExternalAccountsMigratorWithDB(db dbutil.DB) *ExternalAccountsMigrator\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalAccountsMigrator.Down",
                    "documentation": {
                      "identifier": "ExternalAccountsMigrator.Down",
                      "newPage": false,
                      "searchKey": "database.ExternalAccountsMigrator.Down",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *ExternalAccountsMigrator) Down(ctx context.Context) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *ExternalAccountsMigrator) Down(ctx context.Context) (err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalAccountsMigrator.ID",
                    "documentation": {
                      "identifier": "ExternalAccountsMigrator.ID",
                      "newPage": false,
                      "searchKey": "database.ExternalAccountsMigrator.ID",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *ExternalAccountsMigrator) ID() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *ExternalAccountsMigrator) ID() int\n```\n\nID of the migration row in the out_of_band_migrations table. This ID was defined arbitrarily in this migration file: frontend/1528395809_external_account_migration.up.sql \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalAccountsMigrator.Progress",
                    "documentation": {
                      "identifier": "ExternalAccountsMigrator.Progress",
                      "newPage": false,
                      "searchKey": "database.ExternalAccountsMigrator.Progress",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *ExternalAccountsMigrator) Progress(ctx context.Context) (float64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *ExternalAccountsMigrator) Progress(ctx context.Context) (float64, error)\n```\n\nProgress returns a value from 0 to 1 representing the percentage of configuration already migrated. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalAccountsMigrator.Up",
                    "documentation": {
                      "identifier": "ExternalAccountsMigrator.Up",
                      "newPage": false,
                      "searchKey": "database.ExternalAccountsMigrator.Up",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *ExternalAccountsMigrator) Up(ctx context.Context) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *ExternalAccountsMigrator) Up(ctx context.Context) (err error)\n```\n\nUp loads BatchSize external accounts, locks them, and encrypts their config using the key returned by keyring.Default(). If there is no ring, it will periodically try again until the key is setup in the config. Up ensures the configuration can be decrypted with the same key before overwitting it. The key id is stored alongside the encrypted configuration. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ExternalServiceConfigMigrator",
              "documentation": {
                "identifier": "ExternalServiceConfigMigrator",
                "newPage": false,
                "searchKey": "database.ExternalServiceConfigMigrator",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExternalServiceConfigMigrator struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExternalServiceConfigMigrator struct {\n\tstore        *basestore.Store\n\tBatchSize    int\n\tAllowDecrypt bool\n}\n```\n\nExternalServiceConfigMigrator is a background job that encrypts external services config on startup. It periodically waits until a keyring is configured to determine how many services it must migrate. Scheduling and progress report is deleguated to the out of band migration package. The migration is non destructive and can be reverted. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#NewExternalServiceConfigMigrator",
                    "documentation": {
                      "identifier": "NewExternalServiceConfigMigrator",
                      "newPage": false,
                      "searchKey": "database.NewExternalServiceConfigMigrator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewExternalServiceConfigMigrator(store *basestore.Store) *ExternalServiceConfigMigrator"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewExternalServiceConfigMigrator(store *basestore.Store) *ExternalServiceConfigMigrator\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#NewExternalServiceConfigMigratorWithDB",
                    "documentation": {
                      "identifier": "NewExternalServiceConfigMigratorWithDB",
                      "newPage": false,
                      "searchKey": "database.NewExternalServiceConfigMigratorWithDB",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewExternalServiceConfigMigratorWithDB(db dbutil.DB) *ExternalServiceConfigMigrator"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewExternalServiceConfigMigratorWithDB(db dbutil.DB) *ExternalServiceConfigMigrator\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceConfigMigrator.Down",
                    "documentation": {
                      "identifier": "ExternalServiceConfigMigrator.Down",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceConfigMigrator.Down",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *ExternalServiceConfigMigrator) Down(ctx context.Context) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *ExternalServiceConfigMigrator) Down(ctx context.Context) (err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceConfigMigrator.ID",
                    "documentation": {
                      "identifier": "ExternalServiceConfigMigrator.ID",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceConfigMigrator.ID",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *ExternalServiceConfigMigrator) ID() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *ExternalServiceConfigMigrator) ID() int\n```\n\nID of the migration row in in the out_of_band_migrations table. This ID was defined arbitrarily in this migration file: frontend/1528395802_external_service_config_migration.up.sql. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceConfigMigrator.Progress",
                    "documentation": {
                      "identifier": "ExternalServiceConfigMigrator.Progress",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceConfigMigrator.Progress",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *ExternalServiceConfigMigrator) Progress(ctx context.Context) (float64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *ExternalServiceConfigMigrator) Progress(ctx context.Context) (float64, error)\n```\n\nProgress returns a value from 0 to 1 representing the percentage of configuration already migrated. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceConfigMigrator.Up",
                    "documentation": {
                      "identifier": "ExternalServiceConfigMigrator.Up",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceConfigMigrator.Up",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *ExternalServiceConfigMigrator) Up(ctx context.Context) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *ExternalServiceConfigMigrator) Up(ctx context.Context) (err error)\n```\n\nUp loads BatchSize external services, locks them, and encrypts their config using the key returned by keyring.Default(). If there is no ring, it will periodically try again until the key is setup in the config. Up ensures the configuration can be decrypted with the same key before overwitting it. The key id is stored alongside the encrypted configuration. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceConfigMigrator.listConfigsForUpdate",
                    "documentation": {
                      "identifier": "ExternalServiceConfigMigrator.listConfigsForUpdate",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceConfigMigrator.listConfigsForUpdate",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *ExternalServiceConfigMigrator) listConfigsForUpdate(ctx context.Context, tx *basestore.Store, encrypted bool) ([]*types.ExternalService, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *ExternalServiceConfigMigrator) listConfigsForUpdate(ctx context.Context, tx *basestore.Store, encrypted bool) ([]*types.ExternalService, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ExternalServiceKind",
              "documentation": {
                "identifier": "ExternalServiceKind",
                "newPage": false,
                "searchKey": "database.ExternalServiceKind",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExternalServiceKind struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExternalServiceKind struct {\n\t// True if the external service can host repositories.\n\tCodeHost bool\n\n\tJSONSchema string // JSON Schema for the external service's configuration\n}\n```\n\nExternalServiceKind describes a kind of external service. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ExternalServiceStore",
              "documentation": {
                "identifier": "ExternalServiceStore",
                "newPage": false,
                "searchKey": "database.ExternalServiceStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExternalServiceStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExternalServiceStore struct {\n\t*basestore.Store\n\n\tGitHubValidators          []func(*schema.GitHubConnection) error\n\tGitLabValidators          []func(*schema.GitLabConnection, []schema.AuthProviders) error\n\tBitbucketServerValidators []func(*schema.BitbucketServerConnection) error\n\tPerforceValidators        []func(*schema.PerforceConnection) error\n\n\tkey encryption.Key\n\n\tmu sync.Mutex\n}\n```\n\nAn ExternalServiceStore stores external services and their configuration. Before updating or creating a new external service, validation is performed. The enterprise code registers additional validators at run-time and sets the global instance in stores.go \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServices",
                    "documentation": {
                      "identifier": "ExternalServices",
                      "newPage": false,
                      "searchKey": "database.ExternalServices",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func ExternalServices(db dbutil.DB) *ExternalServiceStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc ExternalServices(db dbutil.DB) *ExternalServiceStore\n```\n\nExternalServices instantiates and returns a new ExternalServicesStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServicesWith",
                    "documentation": {
                      "identifier": "ExternalServicesWith",
                      "newPage": false,
                      "searchKey": "database.ExternalServicesWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func ExternalServicesWith(other basestore.ShareableStore) *ExternalServiceStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc ExternalServicesWith(other basestore.ShareableStore) *ExternalServiceStore\n```\n\nExternalServicesWith instantiates and returns a new ExternalServicesStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.Count",
                    "documentation": {
                      "identifier": "ExternalServiceStore.Count",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.Count",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) Count(ctx context.Context, opt ExternalServicesListOptions) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) Count(ctx context.Context, opt ExternalServicesListOptions) (int, error)\n```\n\nCount counts all external services that satisfy the options (ignoring limit and offset). \n\n🚨 SECURITY: The caller must ensure that the actor is a site admin or owner of the external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.Create",
                    "documentation": {
                      "identifier": "ExternalServiceStore.Create",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.Create",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) Create(ctx context.Context, confGet func() *conf.Unified, es *types.ExternalService) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) Create(ctx context.Context, confGet func() *conf.Unified, es *types.ExternalService) error\n```\n\nCreate creates an external service. \n\nSince this method is used before the configuration server has started (search for \"EXTSVC_CONFIG_FILE\") you must pass the conf.Get function in so that an alternative can be used when the configuration server has not started, otherwise a panic would occur once pkg/conf's deadlock detector determines a deadlock occurred. \n\n🚨 SECURITY: The caller must ensure that the actor is a site admin or owner of the external service. Otherwise, `es.NamespaceUserID` must be specified (i.e. non-nil) for a user-added external service. \n\n🚨 SECURITY: The value of `es.Unrestricted` is disregarded and will always be recalculated based on whether \"authorization\" field is presented in `es.Config`. For Sourcegraph Cloud, the `es.Unrestricted` will always be false (i.e. enforce permissions). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.Delete",
                    "documentation": {
                      "identifier": "ExternalServiceStore.Delete",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.Delete",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) Delete(ctx context.Context, id int64) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) Delete(ctx context.Context, id int64) (err error)\n```\n\nDelete deletes an external service. \n\n🚨 SECURITY: The caller must ensure that the actor is a site admin or owner of the external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.DistinctKinds",
                    "documentation": {
                      "identifier": "ExternalServiceStore.DistinctKinds",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.DistinctKinds",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) DistinctKinds(ctx context.Context) ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) DistinctKinds(ctx context.Context) ([]string, error)\n```\n\nDistinctKinds returns the distinct list of external services kinds that are stored in the database. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.Done",
                    "documentation": {
                      "identifier": "ExternalServiceStore.Done",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.Done",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) Done(err error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) Done(err error) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.GetAffiliatedSyncErrors",
                    "documentation": {
                      "identifier": "ExternalServiceStore.GetAffiliatedSyncErrors",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.GetAffiliatedSyncErrors",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) GetAffiliatedSyncErrors(ctx context.Context, u *types.User) (map[int64]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) GetAffiliatedSyncErrors(ctx context.Context, u *types.User) (map[int64]string, error)\n```\n\nGetAffiliatedSyncErrors returns the most recent sync failure message for each external service affiliated with the supplied user. If the latest run did not have an error, the string will be empty. We fetch external services owned by the supplied user and if they are a site admin we additionally return site level external services. We exclude cloud_default repos as they are never synced. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.GetByID",
                    "documentation": {
                      "identifier": "ExternalServiceStore.GetByID",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.GetByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) GetByID(ctx context.Context, id int64) (*types.ExternalService, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) GetByID(ctx context.Context, id int64) (*types.ExternalService, error)\n```\n\nGetByID returns the external service for id. \n\n🚨 SECURITY: The caller must ensure that the actor is a site admin or owner of the external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.GetLastSyncError",
                    "documentation": {
                      "identifier": "ExternalServiceStore.GetLastSyncError",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.GetLastSyncError",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) GetLastSyncError(ctx context.Context, id int64) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) GetLastSyncError(ctx context.Context, id int64) (string, error)\n```\n\nGetLastSyncError returns the error associated with the latest sync of the supplied external service. \n\n🚨 SECURITY: The caller must ensure that the actor is a site admin or owner of the external service \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.GetSyncJobs",
                    "documentation": {
                      "identifier": "ExternalServiceStore.GetSyncJobs",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.GetSyncJobs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) GetSyncJobs(ctx context.Context) ([]*types.ExternalServiceSyncJob, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) GetSyncJobs(ctx context.Context) ([]*types.ExternalServiceSyncJob, error)\n```\n\nGetSyncJobs gets all sync jobs \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.List",
                    "documentation": {
                      "identifier": "ExternalServiceStore.List",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.List",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) List(ctx context.Context, opt ExternalServicesListOptions) ([]*types.ExternalService, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) List(ctx context.Context, opt ExternalServicesListOptions) ([]*types.ExternalService, error)\n```\n\nList returns external services under given namespace. If no namespace is given, it returns all external services. \n\n🚨 SECURITY: The caller must ensure one of the following: \n\n```\n- The actor is a site admin\n- The opt.NamespaceUserID is same as authenticated user ID (i.e. actor.UID)\n\n```\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.RepoCount",
                    "documentation": {
                      "identifier": "ExternalServiceStore.RepoCount",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.RepoCount",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) RepoCount(ctx context.Context, id int64) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) RepoCount(ctx context.Context, id int64) (int32, error)\n```\n\nRepoCount returns the number of repos synced by the external service with the given id. \n\n🚨 SECURITY: The caller must ensure that the actor is a site admin or owner of the external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.SyncDue",
                    "documentation": {
                      "identifier": "ExternalServiceStore.SyncDue",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.SyncDue",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) SyncDue(ctx context.Context, intIDs []int64, d time.Duration) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) SyncDue(ctx context.Context, intIDs []int64, d time.Duration) (bool, error)\n```\n\nSyncDue returns true if any of the supplied external services are due to sync now or within given duration from now. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.Transact",
                    "documentation": {
                      "identifier": "ExternalServiceStore.Transact",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) Transact(ctx context.Context) (*ExternalServiceStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) Transact(ctx context.Context) (*ExternalServiceStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.Update",
                    "documentation": {
                      "identifier": "ExternalServiceStore.Update",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.Update",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) Update(ctx context.Context, ps []schema.AuthProviders, id int64, update *ExternalServiceUpdate) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) Update(ctx context.Context, ps []schema.AuthProviders, id int64, update *ExternalServiceUpdate) (err error)\n```\n\nUpdate updates an external service. \n\n🚨 SECURITY: The caller must ensure that the actor is a site admin, or has the legitimate access to the external service (i.e. the owner). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.Upsert",
                    "documentation": {
                      "identifier": "ExternalServiceStore.Upsert",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.Upsert",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) Upsert(ctx context.Context, svcs ...*types.ExternalService) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) Upsert(ctx context.Context, svcs ...*types.ExternalService) (err error)\n```\n\nUpsert updates or inserts the given ExternalServices. \n\nNOTE: Deletion of an external service via Upsert is not allowed. Use Delete() instead. \n\n🚨 SECURITY: The value of `es.Unrestricted` is disregarded and will always be recalculated based on whether \"authorization\" field is presented in `es.Config`. For Sourcegraph Cloud, the `es.Unrestricted` will always be false (i.e. enforce permissions). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.ValidateConfig",
                    "documentation": {
                      "identifier": "ExternalServiceStore.ValidateConfig",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.ValidateConfig",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) ValidateConfig(ctx context.Context, opt ValidateExternalServiceConfigOptions) (normalized []byte, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) ValidateConfig(ctx context.Context, opt ValidateExternalServiceConfigOptions) (normalized []byte, err error)\n```\n\nValidateConfig validates the given external service configuration, and returns a normalized version of the configuration (i.e. valid JSON without comments). A positive opt.ID indicates we are updating an existing service, adding a new one otherwise. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.With",
                    "documentation": {
                      "identifier": "ExternalServiceStore.With",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) With(other basestore.ShareableStore) *ExternalServiceStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) With(other basestore.ShareableStore) *ExternalServiceStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.WithEncryptionKey",
                    "documentation": {
                      "identifier": "ExternalServiceStore.WithEncryptionKey",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.WithEncryptionKey",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) WithEncryptionKey(key encryption.Key) *ExternalServiceStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) WithEncryptionKey(key encryption.Key) *ExternalServiceStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.copy",
                    "documentation": {
                      "identifier": "ExternalServiceStore.copy",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.copy",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) copy() *ExternalServiceStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) copy() *ExternalServiceStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.ensureStore",
                    "documentation": {
                      "identifier": "ExternalServiceStore.ensureStore",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.ensureStore",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) ensureStore()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) ensureStore()\n```\n\nensureStore instantiates a basestore.Store if necessary, using the dbconn.Global handle. This function ensures access to dbconn happens after the rest of the code or tests have initialized it. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.list",
                    "documentation": {
                      "identifier": "ExternalServiceStore.list",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.list",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) list(ctx context.Context, opt ExternalServicesListOptions) ([]*types.ExternalService, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) list(ctx context.Context, opt ExternalServicesListOptions) ([]*types.ExternalService, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.maybeDecryptConfig",
                    "documentation": {
                      "identifier": "ExternalServiceStore.maybeDecryptConfig",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.maybeDecryptConfig",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) maybeDecryptConfig(ctx context.Context, config string, keyID string) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) maybeDecryptConfig(ctx context.Context, config string, keyID string) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.maybeEncryptConfig",
                    "documentation": {
                      "identifier": "ExternalServiceStore.maybeEncryptConfig",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.maybeEncryptConfig",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) maybeEncryptConfig(ctx context.Context, config string) (string, string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) maybeEncryptConfig(ctx context.Context, config string) (string, string, error)\n```\n\nmaybeEncryptConfig encrypts and returns externals service config if an encryption.Key is configured \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.upsertExternalServicesQuery",
                    "documentation": {
                      "identifier": "ExternalServiceStore.upsertExternalServicesQuery",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.upsertExternalServicesQuery",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) upsertExternalServicesQuery(ctx context.Context, svcs []*types.ExternalService) (*sqlf.Query, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) upsertExternalServicesQuery(ctx context.Context, svcs []*types.ExternalService) (*sqlf.Query, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.validateBitbucketCloudConnection",
                    "documentation": {
                      "identifier": "ExternalServiceStore.validateBitbucketCloudConnection",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.validateBitbucketCloudConnection",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) validateBitbucketCloudConnection(ctx context.Context, id int64, c *schema.BitbucketCloudConnection) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) validateBitbucketCloudConnection(ctx context.Context, id int64, c *schema.BitbucketCloudConnection) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.validateBitbucketServerConnection",
                    "documentation": {
                      "identifier": "ExternalServiceStore.validateBitbucketServerConnection",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.validateBitbucketServerConnection",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) validateBitbucketServerConnection(ctx context.Context, id int64, c *schema.BitbucketServerConnection) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) validateBitbucketServerConnection(ctx context.Context, id int64, c *schema.BitbucketServerConnection) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.validateDuplicateRateLimits",
                    "documentation": {
                      "identifier": "ExternalServiceStore.validateDuplicateRateLimits",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.validateDuplicateRateLimits",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) validateDuplicateRateLimits(ctx context.Context, id int64, kind string, parsedConfig interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) validateDuplicateRateLimits(ctx context.Context, id int64, kind string, parsedConfig interface{}) error\n```\n\nvalidateDuplicateRateLimits returns an error if given config has duplicated non-default rate limit with another external service for the same code host. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.validateGitHubConnection",
                    "documentation": {
                      "identifier": "ExternalServiceStore.validateGitHubConnection",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.validateGitHubConnection",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) validateGitHubConnection(ctx context.Context, id int64, c *schema.GitHubConnection) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) validateGitHubConnection(ctx context.Context, id int64, c *schema.GitHubConnection) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.validateGitLabConnection",
                    "documentation": {
                      "identifier": "ExternalServiceStore.validateGitLabConnection",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.validateGitLabConnection",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) validateGitLabConnection(ctx context.Context, id int64, c *schema.GitLabConnection, ps []schema.AuthProviders) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) validateGitLabConnection(ctx context.Context, id int64, c *schema.GitLabConnection, ps []schema.AuthProviders) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.validatePerforceConnection",
                    "documentation": {
                      "identifier": "ExternalServiceStore.validatePerforceConnection",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.validatePerforceConnection",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) validatePerforceConnection(ctx context.Context, id int64, c *schema.PerforceConnection) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) validatePerforceConnection(ctx context.Context, id int64, c *schema.PerforceConnection) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServiceStore.validateSingleKindPerUser",
                    "documentation": {
                      "identifier": "ExternalServiceStore.validateSingleKindPerUser",
                      "newPage": false,
                      "searchKey": "database.ExternalServiceStore.validateSingleKindPerUser",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ExternalServiceStore) validateSingleKindPerUser(ctx context.Context, id int64, kind string, userID int32) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ExternalServiceStore) validateSingleKindPerUser(ctx context.Context, id int64, kind string, userID int32) error\n```\n\nvalidateSingleKindPerUser returns an error if the user attempts to add more than one external service of the same kind. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ExternalServiceUpdate",
              "documentation": {
                "identifier": "ExternalServiceUpdate",
                "newPage": false,
                "searchKey": "database.ExternalServiceUpdate",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExternalServiceUpdate struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExternalServiceUpdate struct {\n\tDisplayName  *string\n\tConfig       *string\n\tCloudDefault *bool\n}\n```\n\nExternalServiceUpdate contains optional fields to update. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ExternalServicesListOptions",
              "documentation": {
                "identifier": "ExternalServicesListOptions",
                "newPage": false,
                "searchKey": "database.ExternalServicesListOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExternalServicesListOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExternalServicesListOptions struct {\n\t// When specified, only include external services with the given IDs.\n\tIDs []int64\n\t// When true, only include external services not under any namespace (i.e. owned\n\t// by all site admins), and value of NamespaceUserID is ignored.\n\tNoNamespace bool\n\t// When specified, only include external services under given user namespace.\n\tNamespaceUserID int32\n\t// When specified, only include external services with given list of kinds.\n\tKinds []string\n\t// When specified, only include external services with ID below this number\n\t// (because we're sorting results by ID in descending order).\n\tAfterID int64\n\t// Possible values are ASC or DESC. Defaults to DESC.\n\tOrderByDirection string\n\t// When true, will only return services that have the cloud_default flag set to\n\t// true.\n\tOnlyCloudDefault bool\n\n\t*LimitOffset\n}\n```\n\nExternalServicesListOptions contains options for listing external services. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#ExternalServicesListOptions.sqlConditions",
                    "documentation": {
                      "identifier": "ExternalServicesListOptions.sqlConditions",
                      "newPage": false,
                      "searchKey": "database.ExternalServicesListOptions.sqlConditions",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o ExternalServicesListOptions) sqlConditions() []*sqlf.Query"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o ExternalServicesListOptions) sqlConditions() []*sqlf.Query\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#FeatureFlagStore",
              "documentation": {
                "identifier": "FeatureFlagStore",
                "newPage": false,
                "searchKey": "database.FeatureFlagStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FeatureFlagStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FeatureFlagStore struct {\n\t*basestore.Store\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlags",
                    "documentation": {
                      "identifier": "FeatureFlags",
                      "newPage": false,
                      "searchKey": "database.FeatureFlags",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func FeatureFlags(db dbutil.DB) *FeatureFlagStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc FeatureFlags(db dbutil.DB) *FeatureFlagStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagsWith",
                    "documentation": {
                      "identifier": "FeatureFlagsWith",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagsWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func FeatureFlagsWith(other basestore.ShareableStore) *FeatureFlagStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc FeatureFlagsWith(other basestore.ShareableStore) *FeatureFlagStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagStore.CreateBool",
                    "documentation": {
                      "identifier": "FeatureFlagStore.CreateBool",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagStore.CreateBool",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagStore) CreateBool(ctx context.Context, name string, value bool) (*ff.FeatureFlag, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagStore) CreateBool(ctx context.Context, name string, value bool) (*ff.FeatureFlag, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagStore.CreateFeatureFlag",
                    "documentation": {
                      "identifier": "FeatureFlagStore.CreateFeatureFlag",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagStore.CreateFeatureFlag",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagStore) CreateFeatureFlag(ctx context.Context, flag *ff.FeatureFlag) (*ff.FeatureFlag, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagStore) CreateFeatureFlag(ctx context.Context, flag *ff.FeatureFlag) (*ff.FeatureFlag, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagStore.CreateOverride",
                    "documentation": {
                      "identifier": "FeatureFlagStore.CreateOverride",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagStore.CreateOverride",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagStore) CreateOverride(ctx context.Context, override *ff.Override) (*ff.Override, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagStore) CreateOverride(ctx context.Context, override *ff.Override) (*ff.Override, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagStore.CreateRollout",
                    "documentation": {
                      "identifier": "FeatureFlagStore.CreateRollout",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagStore.CreateRollout",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagStore) CreateRollout(ctx context.Context, name string, rollout int32) (*ff.FeatureFlag, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagStore) CreateRollout(ctx context.Context, name string, rollout int32) (*ff.FeatureFlag, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagStore.DeleteFeatureFlag",
                    "documentation": {
                      "identifier": "FeatureFlagStore.DeleteFeatureFlag",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagStore.DeleteFeatureFlag",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagStore) DeleteFeatureFlag(ctx context.Context, name string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagStore) DeleteFeatureFlag(ctx context.Context, name string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagStore.DeleteOverride",
                    "documentation": {
                      "identifier": "FeatureFlagStore.DeleteOverride",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagStore.DeleteOverride",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagStore) DeleteOverride(ctx context.Context, orgID, userID *int32, flagName string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagStore) DeleteOverride(ctx context.Context, orgID, userID *int32, flagName string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagStore.GetAnonymousUserFlags",
                    "documentation": {
                      "identifier": "FeatureFlagStore.GetAnonymousUserFlags",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagStore.GetAnonymousUserFlags",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagStore) GetAnonymousUserFlags(ctx context.Context, anonymousUID string) (map[string]bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagStore) GetAnonymousUserFlags(ctx context.Context, anonymousUID string) (map[string]bool, error)\n```\n\nGetAnonymousUserFlags returns the calculated values for feature flags for the given anonymousUID \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagStore.GetFeatureFlag",
                    "documentation": {
                      "identifier": "FeatureFlagStore.GetFeatureFlag",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagStore.GetFeatureFlag",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagStore) GetFeatureFlag(ctx context.Context, flagName string) (*ff.FeatureFlag, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagStore) GetFeatureFlag(ctx context.Context, flagName string) (*ff.FeatureFlag, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagStore.GetFeatureFlags",
                    "documentation": {
                      "identifier": "FeatureFlagStore.GetFeatureFlags",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagStore.GetFeatureFlags",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagStore) GetFeatureFlags(ctx context.Context) ([]*ff.FeatureFlag, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagStore) GetFeatureFlags(ctx context.Context) ([]*ff.FeatureFlag, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagStore.GetGlobalFeatureFlags",
                    "documentation": {
                      "identifier": "FeatureFlagStore.GetGlobalFeatureFlags",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagStore.GetGlobalFeatureFlags",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagStore) GetGlobalFeatureFlags(ctx context.Context) (map[string]bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagStore) GetGlobalFeatureFlags(ctx context.Context) (map[string]bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagStore.GetOrgOverridesForUser",
                    "documentation": {
                      "identifier": "FeatureFlagStore.GetOrgOverridesForUser",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagStore.GetOrgOverridesForUser",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagStore) GetOrgOverridesForUser(ctx context.Context, userID int32) ([]*ff.Override, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagStore) GetOrgOverridesForUser(ctx context.Context, userID int32) ([]*ff.Override, error)\n```\n\nGetOrgOverridesForUser lists the feature flag overrides for all orgs the given user belongs to. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagStore.GetOverridesForFlag",
                    "documentation": {
                      "identifier": "FeatureFlagStore.GetOverridesForFlag",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagStore.GetOverridesForFlag",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagStore) GetOverridesForFlag(ctx context.Context, flagName string) ([]*ff.Override, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagStore) GetOverridesForFlag(ctx context.Context, flagName string) ([]*ff.Override, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagStore.GetUserFlags",
                    "documentation": {
                      "identifier": "FeatureFlagStore.GetUserFlags",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagStore.GetUserFlags",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagStore) GetUserFlags(ctx context.Context, userID int32) (map[string]bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagStore) GetUserFlags(ctx context.Context, userID int32) (map[string]bool, error)\n```\n\nGetUserFlags returns the calculated values for feature flags for the given userID. This should be the primary entrypoint for getting the user flags since it handles retrieving all the flags, the org overrides, and the user overrides, and merges them in priority order. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagStore.GetUserOverrides",
                    "documentation": {
                      "identifier": "FeatureFlagStore.GetUserOverrides",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagStore.GetUserOverrides",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagStore) GetUserOverrides(ctx context.Context, userID int32) ([]*ff.Override, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagStore) GetUserOverrides(ctx context.Context, userID int32) ([]*ff.Override, error)\n```\n\nGetUserOverrides lists the overrides that have been specifically set for the given userID. NOTE: this does not return any overrides for the user orgs. Those are returned separately by ListOrgOverridesForUser so they can be mered in proper priority order. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagStore.Transact",
                    "documentation": {
                      "identifier": "FeatureFlagStore.Transact",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagStore) Transact(ctx context.Context) (*FeatureFlagStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagStore) Transact(ctx context.Context) (*FeatureFlagStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagStore.UpdateFeatureFlag",
                    "documentation": {
                      "identifier": "FeatureFlagStore.UpdateFeatureFlag",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagStore.UpdateFeatureFlag",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagStore) UpdateFeatureFlag(ctx context.Context, flag *ff.FeatureFlag) (*ff.FeatureFlag, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagStore) UpdateFeatureFlag(ctx context.Context, flag *ff.FeatureFlag) (*ff.FeatureFlag, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagStore.UpdateOverride",
                    "documentation": {
                      "identifier": "FeatureFlagStore.UpdateOverride",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagStore.UpdateOverride",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagStore) UpdateOverride(ctx context.Context, orgID, userID *int32, flagName string, newValue bool) (*ff.Override, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagStore) UpdateOverride(ctx context.Context, orgID, userID *int32, flagName string, newValue bool) (*ff.Override, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#FeatureFlagStore.With",
                    "documentation": {
                      "identifier": "FeatureFlagStore.With",
                      "newPage": false,
                      "searchKey": "database.FeatureFlagStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagStore) With(other basestore.ShareableStore) *FeatureFlagStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagStore) With(other basestore.ShareableStore) *FeatureFlagStore\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#GetSearchContextOptions",
              "documentation": {
                "identifier": "GetSearchContextOptions",
                "newPage": false,
                "searchKey": "database.GetSearchContextOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GetSearchContextOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GetSearchContextOptions struct {\n\tName            string\n\tNamespaceUserID int32\n\tNamespaceOrgID  int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#GitserverRepoStore",
              "documentation": {
                "identifier": "GitserverRepoStore",
                "newPage": false,
                "searchKey": "database.GitserverRepoStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverRepoStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverRepoStore struct {\n\t*basestore.Store\n}\n```\n\nGitserverReposStore is responsible for data stored in the gitserver_repos table. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#GitserverRepos",
                    "documentation": {
                      "identifier": "GitserverRepos",
                      "newPage": false,
                      "searchKey": "database.GitserverRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func GitserverRepos(db dbutil.DB) *GitserverRepoStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc GitserverRepos(db dbutil.DB) *GitserverRepoStore\n```\n\nGitserverRepos instantiates and returns a new GitserverRepoStore. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#NewGitserverReposWith",
                    "documentation": {
                      "identifier": "NewGitserverReposWith",
                      "newPage": false,
                      "searchKey": "database.NewGitserverReposWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewGitserverReposWith(other basestore.ShareableStore) *GitserverRepoStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewGitserverReposWith(other basestore.ShareableStore) *GitserverRepoStore\n```\n\nNewGitserverReposWith instantiates and returns a new GitserverRepoStore using the other store handle. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#GitserverRepoStore.GetByID",
                    "documentation": {
                      "identifier": "GitserverRepoStore.GetByID",
                      "newPage": false,
                      "searchKey": "database.GitserverRepoStore.GetByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitserverRepoStore) GetByID(ctx context.Context, id api.RepoID) (*types.GitserverRepo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitserverRepoStore) GetByID(ctx context.Context, id api.RepoID) (*types.GitserverRepo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#GitserverRepoStore.IterateRepoGitserverStatus",
                    "documentation": {
                      "identifier": "GitserverRepoStore.IterateRepoGitserverStatus",
                      "newPage": false,
                      "searchKey": "database.GitserverRepoStore.IterateRepoGitserverStatus",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitserverRepoStore) IterateRepoGitserverStatus(ctx context.Context, repoFn func(repo types.RepoGitserverStatus) error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitserverRepoStore) IterateRepoGitserverStatus(ctx context.Context, repoFn func(repo types.RepoGitserverStatus) error) error\n```\n\nIterateRepoGitserverStatus iterates over the status of all repos by joining our repo and gitserver_repos table. It is possible for us not to have a corresponding row in gitserver_repos yet. repoFn will be called once for each row. If it returns an error we'll abort iteration. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#GitserverRepoStore.SetCloneStatus",
                    "documentation": {
                      "identifier": "GitserverRepoStore.SetCloneStatus",
                      "newPage": false,
                      "searchKey": "database.GitserverRepoStore.SetCloneStatus",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitserverRepoStore) SetCloneStatus(ctx context.Context, id api.RepoID, status types.CloneStatus, shardID string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitserverRepoStore) SetCloneStatus(ctx context.Context, id api.RepoID, status types.CloneStatus, shardID string) error\n```\n\nSetCloneStatus will attempt to update ONLY the clone status of a GitServerRepo. If a matching row does not yet exist a new one will be created. If the status value hasn't changed, the row will not be updated. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#GitserverRepoStore.SetLastError",
                    "documentation": {
                      "identifier": "GitserverRepoStore.SetLastError",
                      "newPage": false,
                      "searchKey": "database.GitserverRepoStore.SetLastError",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitserverRepoStore) SetLastError(ctx context.Context, id api.RepoID, error, shardID string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitserverRepoStore) SetLastError(ctx context.Context, id api.RepoID, error, shardID string) error\n```\n\nSetLastError will attempt to update ONLY the last error of a GitServerRepo. If a matching row does not yet exist a new one will be created. If the error value hasn't changed, the row will not be updated. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#GitserverRepoStore.Transact",
                    "documentation": {
                      "identifier": "GitserverRepoStore.Transact",
                      "newPage": false,
                      "searchKey": "database.GitserverRepoStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitserverRepoStore) Transact(ctx context.Context) (*GitserverRepoStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitserverRepoStore) Transact(ctx context.Context) (*GitserverRepoStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#GitserverRepoStore.Upsert",
                    "documentation": {
                      "identifier": "GitserverRepoStore.Upsert",
                      "newPage": false,
                      "searchKey": "database.GitserverRepoStore.Upsert",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitserverRepoStore) Upsert(ctx context.Context, repos ...*types.GitserverRepo) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitserverRepoStore) Upsert(ctx context.Context, repos ...*types.GitserverRepo) error\n```\n\nUpsert adds a row representing the GitServer status of a repo \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#GitserverRepoStore.With",
                    "documentation": {
                      "identifier": "GitserverRepoStore.With",
                      "newPage": false,
                      "searchKey": "database.GitserverRepoStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitserverRepoStore) With(other basestore.ShareableStore) *GitserverRepoStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitserverRepoStore) With(other basestore.ShareableStore) *GitserverRepoStore\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#GrantPendingPermissionsArgs",
              "documentation": {
                "identifier": "GrantPendingPermissionsArgs",
                "newPage": false,
                "searchKey": "database.GrantPendingPermissionsArgs",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GrantPendingPermissionsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GrantPendingPermissionsArgs struct {\n\t// The user ID that will be used to bind pending permissions.\n\tUserID int32\n\t// The permission level to be granted.\n\tPerm authz.Perms\n\t// The type of permissions to be granted.\n\tType authz.PermType\n}\n```\n\nGrantPendingPermissionsArgs contains required arguments to grant pending permissions for a user by username or verified email address(es) according to the site configuration. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#InsertRepoOp",
              "documentation": {
                "identifier": "InsertRepoOp",
                "newPage": false,
                "searchKey": "database.InsertRepoOp",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InsertRepoOp struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InsertRepoOp struct {\n\tName         api.RepoName\n\tDescription  string\n\tFork         bool\n\tArchived     bool\n\tCloned       bool\n\tPrivate      bool\n\tExternalRepo api.ExternalRepoSpec\n}\n```\n\nInsertRepoOp represents an operation to insert a repository. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#LimitOffset",
              "documentation": {
                "identifier": "LimitOffset",
                "newPage": false,
                "searchKey": "database.LimitOffset",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LimitOffset struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LimitOffset struct {\n\tLimit  int // SQL LIMIT count\n\tOffset int // SQL OFFSET count\n}\n```\n\nLimitOffset specifies SQL LIMIT and OFFSET counts. A pointer to it is typically embedded in other options structs that need to perform SQL queries with LIMIT and OFFSET. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#LimitOffset.SQL",
                    "documentation": {
                      "identifier": "LimitOffset.SQL",
                      "newPage": false,
                      "searchKey": "database.LimitOffset.SQL",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *LimitOffset) SQL() *sqlf.Query"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *LimitOffset) SQL() *sqlf.Query\n```\n\nSQL returns the SQL query fragment (\"LIMIT %d OFFSET %d\") for use in SQL queries. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ListDefaultReposOptions",
              "documentation": {
                "identifier": "ListDefaultReposOptions",
                "newPage": false,
                "searchKey": "database.ListDefaultReposOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListDefaultReposOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListDefaultReposOptions struct {\n\t// If true, will only include uncloned default repos\n\tOnlyUncloned bool\n\t// If true, we include user added private repos\n\tIncludePrivate bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ListSearchContextsOptions",
              "documentation": {
                "identifier": "ListSearchContextsOptions",
                "newPage": false,
                "searchKey": "database.ListSearchContextsOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListSearchContextsOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListSearchContextsOptions struct {\n\t// Name is used for partial matching of search contexts by name (case-insensitvely).\n\tName string\n\t// NamespaceName is used for partial matching of search context namespaces (user or org) by name (case-insensitvely).\n\tNamespaceName string\n\t// NamespaceUserIDs matches search contexts by user namespace. If multiple IDs are specified, then a union of all matching results is returned.\n\tNamespaceUserIDs []int32\n\t// NamespaceOrgIDs matches search contexts by org. If multiple IDs are specified, then a union of all matching results is returned.\n\tNamespaceOrgIDs []int32\n\t// NoNamespace matches search contexts without a namespace (\"instance-level contexts\").\n\tNoNamespace bool\n\t// OrderBy specifies the ordering option for search contexts. Search contexts are ordered using SearchContextsOrderByID by default.\n\t// SearchContextsOrderBySpec option sorts contexts by coallesced namespace names first\n\t// (user name and org name) and then by context name. SearchContextsOrderByUpdatedAt option sorts\n\t// search contexts by their last update time (updated_at).\n\tOrderBy SearchContextsOrderByOption\n\t// OrderByDescending specifies the sort direction for the OrderBy option.\n\tOrderByDescending bool\n}\n```\n\nListSearchContextsOptions specifies the options for listing search contexts. It produces a union of all search contexts that match NamespaceUserIDs, or NamespaceOrgIDs, or NoNamespace. If none of those are specified, it produces all available search contexts. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ListSearchContextsPageOptions",
              "documentation": {
                "identifier": "ListSearchContextsPageOptions",
                "newPage": false,
                "searchKey": "database.ListSearchContextsPageOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListSearchContextsPageOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListSearchContextsPageOptions struct {\n\tFirst int32\n\tAfter int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockAccessTokens",
              "documentation": {
                "identifier": "MockAccessTokens",
                "newPage": false,
                "searchKey": "database.MockAccessTokens",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockAccessTokens struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockAccessTokens struct {\n\tCreate     func(subjectUserID int32, scopes []string, note string, creatorUserID int32) (id int64, token string, err error)\n\tDeleteByID func(id int64, subjectUserID int32) error\n\tLookup     func(tokenHexEncoded, requiredScope string) (subjectUserID int32, err error)\n\tGetByID    func(id int64) (*AccessToken, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockAuthz",
              "documentation": {
                "identifier": "MockAuthz",
                "newPage": false,
                "searchKey": "database.MockAuthz",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockAuthz struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockAuthz struct {\n\tGrantPendingPermissions func(ctx context.Context, args *GrantPendingPermissionsArgs) error\n\tAuthorizedRepos         func(ctx context.Context, args *AuthorizedReposArgs) ([]*types.Repo, error)\n\tRevokeUserPermissions   func(ctx context.Context, args *RevokeUserPermissionsArgs) error\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockEventLogs",
              "documentation": {
                "identifier": "MockEventLogs",
                "newPage": false,
                "searchKey": "database.MockEventLogs",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockEventLogs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockEventLogs struct {\n\tLatestPing func(ctx context.Context) (*types.Event, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockExternalAccounts",
              "documentation": {
                "identifier": "MockExternalAccounts",
                "newPage": false,
                "searchKey": "database.MockExternalAccounts",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockExternalAccounts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockExternalAccounts struct {\n\tGet                  func(id int32) (*extsvc.Account, error)\n\tLookupUserAndSave    func(extsvc.AccountSpec, extsvc.AccountData) (userID int32, err error)\n\tAssociateUserAndSave func(userID int32, spec extsvc.AccountSpec, data extsvc.AccountData) error\n\tCreateUserAndSave    func(NewUser, extsvc.AccountSpec, extsvc.AccountData) (createdUserID int32, err error)\n\tDelete               func(id int32) error\n\tList                 func(ExternalAccountsListOptions) ([]*extsvc.Account, error)\n\tCount                func(ExternalAccountsListOptions) (int, error)\n\tTouchExpired         func(ctx context.Context, id int32) error\n\tTouchLastValid       func(ctx context.Context, id int32) error\n}\n```\n\nMockExternalAccounts mocks the Stores.ExternalAccounts DB store. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockExternalServices",
              "documentation": {
                "identifier": "MockExternalServices",
                "newPage": false,
                "searchKey": "database.MockExternalServices",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockExternalServices struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockExternalServices struct {\n\tCreate           func(ctx context.Context, confGet func() *conf.Unified, externalService *types.ExternalService) error\n\tDelete           func(ctx context.Context, id int64) error\n\tGetByID          func(id int64) (*types.ExternalService, error)\n\tGetLastSyncError func(id int64) (string, error)\n\tListSyncErrors   func(ctx context.Context) (map[int64]string, error)\n\tList             func(opt ExternalServicesListOptions) ([]*types.ExternalService, error)\n\tUpdate           func(ctx context.Context, ps []schema.AuthProviders, id int64, update *ExternalServiceUpdate) error\n\tCount            func(ctx context.Context, opt ExternalServicesListOptions) (int, error)\n\tUpsert           func(ctx context.Context, services ...*types.ExternalService) error\n\tTransact         func(ctx context.Context) (*ExternalServiceStore, error)\n\tDone             func(error) error\n}\n```\n\nMockExternalServices mocks the external services store. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockNamespaces",
              "documentation": {
                "identifier": "MockNamespaces",
                "newPage": false,
                "searchKey": "database.MockNamespaces",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockNamespaces struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockNamespaces struct {\n\tGetByID   func(ctx context.Context, orgID, userID int32) (*Namespace, error)\n\tGetByName func(ctx context.Context, name string) (*Namespace, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockOrgInvitations",
              "documentation": {
                "identifier": "MockOrgInvitations",
                "newPage": false,
                "searchKey": "database.MockOrgInvitations",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockOrgInvitations struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockOrgInvitations struct {\n\tCreate  func(orgID, senderUserID, recipientUserID int32) (*OrgInvitation, error)\n\tGetByID func(id int64) (*OrgInvitation, error)\n\tRevoke  func(id int64) error\n}\n```\n\nMockOrgInvitations mocks the org invitations store. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockOrgMembers",
              "documentation": {
                "identifier": "MockOrgMembers",
                "newPage": false,
                "searchKey": "database.MockOrgMembers",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockOrgMembers struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockOrgMembers struct {\n\tGetByOrgIDAndUserID func(ctx context.Context, orgID, userID int32) (*types.OrgMembership, error)\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#MockOrgMembers.MockGetByOrgIDAndUserID_Return",
                    "documentation": {
                      "identifier": "MockOrgMembers.MockGetByOrgIDAndUserID_Return",
                      "newPage": false,
                      "searchKey": "database.MockOrgMembers.MockGetByOrgIDAndUserID_Return",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *MockOrgMembers) MockGetByOrgIDAndUserID_Return(t *testing.T, returns *types.OrgMembership, returnsErr error) (called *bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *MockOrgMembers) MockGetByOrgIDAndUserID_Return(t *testing.T, returns *types.OrgMembership, returnsErr error) (called *bool)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockOrgs",
              "documentation": {
                "identifier": "MockOrgs",
                "newPage": false,
                "searchKey": "database.MockOrgs",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockOrgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockOrgs struct {\n\tGetByID   func(ctx context.Context, id int32) (*types.Org, error)\n\tGetByName func(ctx context.Context, name string) (*types.Org, error)\n\tCount     func(ctx context.Context, opt OrgsListOptions) (int, error)\n\tList      func(ctx context.Context, opt *OrgsListOptions) ([]*types.Org, error)\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#MockOrgs.MockGetByID_Return",
                    "documentation": {
                      "identifier": "MockOrgs.MockGetByID_Return",
                      "newPage": false,
                      "searchKey": "database.MockOrgs.MockGetByID_Return",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *MockOrgs) MockGetByID_Return(t *testing.T, returns *types.Org, returnsErr error) (called *bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *MockOrgs) MockGetByID_Return(t *testing.T, returns *types.Org, returnsErr error) (called *bool)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockPhabricator",
              "documentation": {
                "identifier": "MockPhabricator",
                "newPage": false,
                "searchKey": "database.MockPhabricator",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockPhabricator struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockPhabricator struct {\n\tGetByName func(repo api.RepoName) (*types.PhabricatorRepo, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockRepos",
              "documentation": {
                "identifier": "MockRepos",
                "newPage": false,
                "searchKey": "database.MockRepos",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockRepos struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockRepos struct {\n\tGet           func(ctx context.Context, repo api.RepoID) (*types.Repo, error)\n\tGetByName     func(ctx context.Context, repo api.RepoName) (*types.Repo, error)\n\tGetByIDs      func(ctx context.Context, ids ...api.RepoID) ([]*types.Repo, error)\n\tList          func(v0 context.Context, v1 ReposListOptions) ([]*types.Repo, error)\n\tListRepoNames func(v0 context.Context, v1 ReposListOptions) ([]types.RepoName, error)\n\tCreate        func(ctx context.Context, repos ...*types.Repo) (err error)\n\tCount         func(ctx context.Context, opt ReposListOptions) (int, error)\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#MockRepos.MockGet",
                    "documentation": {
                      "identifier": "MockRepos.MockGet",
                      "newPage": false,
                      "searchKey": "database.MockRepos.MockGet",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *MockRepos) MockGet(t *testing.T, wantRepo api.RepoID) (called *bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *MockRepos) MockGet(t *testing.T, wantRepo api.RepoID) (called *bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#MockRepos.MockGetByName",
                    "documentation": {
                      "identifier": "MockRepos.MockGetByName",
                      "newPage": false,
                      "searchKey": "database.MockRepos.MockGetByName",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *MockRepos) MockGetByName(t testing.TB, want api.RepoName, repo api.RepoID) (called *bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *MockRepos) MockGetByName(t testing.TB, want api.RepoName, repo api.RepoID) (called *bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#MockRepos.MockGet_Return",
                    "documentation": {
                      "identifier": "MockRepos.MockGet_Return",
                      "newPage": false,
                      "searchKey": "database.MockRepos.MockGet_Return",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *MockRepos) MockGet_Return(t *testing.T, returns *types.Repo) (called *bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *MockRepos) MockGet_Return(t *testing.T, returns *types.Repo) (called *bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#MockRepos.MockList",
                    "documentation": {
                      "identifier": "MockRepos.MockList",
                      "newPage": false,
                      "searchKey": "database.MockRepos.MockList",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *MockRepos) MockList(t testing.TB, wantRepos ...api.RepoName) (called *bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *MockRepos) MockList(t testing.TB, wantRepos ...api.RepoName) (called *bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#MockRepos.MockListRepoNames",
                    "documentation": {
                      "identifier": "MockRepos.MockListRepoNames",
                      "newPage": false,
                      "searchKey": "database.MockRepos.MockListRepoNames",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *MockRepos) MockListRepoNames(t testing.TB, wantRepos ...api.RepoName) (called *bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *MockRepos) MockListRepoNames(t testing.TB, wantRepos ...api.RepoName) (called *bool)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockSavedSearches",
              "documentation": {
                "identifier": "MockSavedSearches",
                "newPage": false,
                "searchKey": "database.MockSavedSearches",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockSavedSearches struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockSavedSearches struct {\n\tListAll                   func(ctx context.Context) ([]api.SavedQuerySpecAndConfig, error)\n\tListSavedSearchesByUserID func(ctx context.Context, userID int32) ([]*types.SavedSearch, error)\n\tCreate                    func(ctx context.Context, newSavedSearch *types.SavedSearch) (*types.SavedSearch, error)\n\tUpdate                    func(ctx context.Context, savedSearch *types.SavedSearch) (*types.SavedSearch, error)\n\tDelete                    func(ctx context.Context, id int32) error\n\tGetByID                   func(ctx context.Context, id int32) (*api.SavedQuerySpecAndConfig, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockSearchContexts",
              "documentation": {
                "identifier": "MockSearchContexts",
                "newPage": false,
                "searchKey": "database.MockSearchContexts",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockSearchContexts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockSearchContexts struct {\n\tGetSearchContext                    func(ctx context.Context, opts GetSearchContextOptions) (*types.SearchContext, error)\n\tGetSearchContextRepositoryRevisions func(ctx context.Context, searchContextID int64) ([]*types.SearchContextRepositoryRevisions, error)\n\tListSearchContexts                  func(ctx context.Context, pageOpts ListSearchContextsPageOptions, opts ListSearchContextsOptions) ([]*types.SearchContext, error)\n\tCountSearchContexts                 func(ctx context.Context, opts ListSearchContextsOptions) (int32, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockSettings",
              "documentation": {
                "identifier": "MockSettings",
                "newPage": false,
                "searchKey": "database.MockSettings",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockSettings struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockSettings struct {\n\tGetLatest        func(ctx context.Context, subject api.SettingsSubject) (*api.Settings, error)\n\tCreateIfUpToDate func(ctx context.Context, subject api.SettingsSubject, lastID, authorUserID *int32, contents string) (latestSetting *api.Settings, err error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockStores",
              "documentation": {
                "identifier": "MockStores",
                "newPage": false,
                "searchKey": "database.MockStores",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockStores struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockStores struct {\n\tAccessTokens MockAccessTokens\n\n\tRepos           MockRepos\n\tNamespaces      MockNamespaces\n\tOrgs            MockOrgs\n\tOrgMembers      MockOrgMembers\n\tSavedSearches   MockSavedSearches\n\tSettings        MockSettings\n\tUsers           MockUsers\n\tUserCredentials MockUserCredentials\n\tUserEmails      MockUserEmails\n\tUserPublicRepos MockUserPublicRepos\n\tSearchContexts  MockSearchContexts\n\n\tPhabricator MockPhabricator\n\n\tExternalAccounts MockExternalAccounts\n\n\tOrgInvitations MockOrgInvitations\n\n\tExternalServices MockExternalServices\n\n\tAuthz MockAuthz\n\n\tEventLogs MockEventLogs\n}\n```\n\nMockStores has a field for each store interface with the concrete mock type (to obviate the need for tedious type assertions in test code). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockUserCredentials",
              "documentation": {
                "identifier": "MockUserCredentials",
                "newPage": false,
                "searchKey": "database.MockUserCredentials",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockUserCredentials struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockUserCredentials struct {\n\tCreate     func(context.Context, UserCredentialScope, auth.Authenticator) (*UserCredential, error)\n\tUpdate     func(ctx context.Context, credential *UserCredential) error\n\tDelete     func(context.Context, int64) error\n\tGetByID    func(context.Context, int64) (*UserCredential, error)\n\tGetByScope func(context.Context, UserCredentialScope) (*UserCredential, error)\n\tList       func(context.Context, UserCredentialsListOpts) ([]*UserCredential, int, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockUserEmails",
              "documentation": {
                "identifier": "MockUserEmails",
                "newPage": false,
                "searchKey": "database.MockUserEmails",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockUserEmails struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockUserEmails struct {\n\tGetPrimaryEmail                func(ctx context.Context, id int32) (email string, verified bool, err error)\n\tGet                            func(userID int32, email string) (emailCanonicalCase string, verified bool, err error)\n\tSetVerified                    func(ctx context.Context, userID int32, email string, verified bool) error\n\tSetLastVerification            func(ctx context.Context, userID int32, email, code string) error\n\tGetLatestVerificationSentEmail func(ctx context.Context, email string) (*UserEmail, error)\n\tGetVerifiedEmails              func(ctx context.Context, emails ...string) ([]*UserEmail, error)\n\tListByUser                     func(ctx context.Context, opt UserEmailsListOptions) ([]*UserEmail, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockUserPublicRepos",
              "documentation": {
                "identifier": "MockUserPublicRepos",
                "newPage": false,
                "searchKey": "database.MockUserPublicRepos",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockUserPublicRepos struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockUserPublicRepos struct {\n\tListByUser func(ctx context.Context, userID int32) ([]UserPublicRepo, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockUsers",
              "documentation": {
                "identifier": "MockUsers",
                "newPage": false,
                "searchKey": "database.MockUsers",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockUsers struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockUsers struct {\n\tCreate                       func(ctx context.Context, info NewUser) (newUser *types.User, err error)\n\tUpdate                       func(userID int32, update UserUpdate) error\n\tDelete                       func(ctx context.Context, id int32) error\n\tHardDelete                   func(ctx context.Context, id int32) error\n\tSetIsSiteAdmin               func(id int32, isSiteAdmin bool) error\n\tCheckAndDecrementInviteQuota func(ctx context.Context, userID int32) (bool, error)\n\tGetByID                      func(ctx context.Context, id int32) (*types.User, error)\n\tGetByUsername                func(ctx context.Context, username string) (*types.User, error)\n\tGetByUsernames               func(ctx context.Context, usernames ...string) ([]*types.User, error)\n\tGetByCurrentAuthUser         func(ctx context.Context) (*types.User, error)\n\tGetByVerifiedEmail           func(ctx context.Context, email string) (*types.User, error)\n\tCount                        func(ctx context.Context, opt *UsersListOptions) (int, error)\n\tList                         func(ctx context.Context, opt *UsersListOptions) ([]*types.User, error)\n\tInvalidateSessionsByID       func(ctx context.Context, id int32) error\n\tHasTag                       func(ctx context.Context, userID int32, tag string) (bool, error)\n\tTags                         func(ctx context.Context, userID int32) (map[string]bool, error)\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#MockUsers.MockGetByID_Return",
                    "documentation": {
                      "identifier": "MockUsers.MockGetByID_Return",
                      "newPage": false,
                      "searchKey": "database.MockUsers.MockGetByID_Return",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *MockUsers) MockGetByID_Return(t *testing.T, returns *types.User, returnsErr error) (called *bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *MockUsers) MockGetByID_Return(t *testing.T, returns *types.User, returnsErr error) (called *bool)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#Namespace",
              "documentation": {
                "identifier": "Namespace",
                "newPage": false,
                "searchKey": "database.Namespace",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Namespace struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Namespace struct {\n\t// Name is the canonical-case name of the namespace (which is unique among all namespace\n\t// types). For a user, this is the username. For an organization, this is the organization name.\n\tName string\n\n\tUser, Organization int32 // exactly 1 is non-zero\n}\n```\n\nA Namespace is a username or an organization name. No user may have a username that is equal to an organization name, and vice versa. This property means that a username or organization name serves as a namespace for other objects that are owned by the user or organization, such as batch changes and extensions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#NamespaceStore",
              "documentation": {
                "identifier": "NamespaceStore",
                "newPage": false,
                "searchKey": "database.NamespaceStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NamespaceStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NamespaceStore struct {\n\t*basestore.Store\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#Namespaces",
                    "documentation": {
                      "identifier": "Namespaces",
                      "newPage": false,
                      "searchKey": "database.Namespaces",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Namespaces(db dbutil.DB) *NamespaceStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Namespaces(db dbutil.DB) *NamespaceStore\n```\n\nNamespaces instantiates and returns a new NamespaceStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#NamespacesWith",
                    "documentation": {
                      "identifier": "NamespacesWith",
                      "newPage": false,
                      "searchKey": "database.NamespacesWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NamespacesWith(other basestore.ShareableStore) *NamespaceStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NamespacesWith(other basestore.ShareableStore) *NamespaceStore\n```\n\nNewNamespaceStoreWithDB instantiates and returns a new NamespaceStore using the other store handle. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#NamespaceStore.GetByID",
                    "documentation": {
                      "identifier": "NamespaceStore.GetByID",
                      "newPage": false,
                      "searchKey": "database.NamespaceStore.GetByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *NamespaceStore) GetByID(ctx context.Context,..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *NamespaceStore) GetByID(\n\tctx context.Context,\n\torgID, userID int32,\n) (*Namespace, error)\n```\n\nGetByID looks up the namespace by an ID. \n\nOne of orgID and userID must be 0: whichever ID is non-zero will be used to look up the namespace. If both are given, ErrNamespaceMultipleIDs is returned; if neither are given, ErrNamespaceNoID is returned. \n\nIf no namespace is found, ErrNamespaceNotFound is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#NamespaceStore.GetByName",
                    "documentation": {
                      "identifier": "NamespaceStore.GetByName",
                      "newPage": false,
                      "searchKey": "database.NamespaceStore.GetByName",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *NamespaceStore) GetByName(ctx context.Context,..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *NamespaceStore) GetByName(\n\tctx context.Context,\n\tname string,\n) (*Namespace, error)\n```\n\nGetByName looks up the namespace by a name. The name is matched case-insensitively against all namespaces, which is the set of usernames and organization names. \n\nIf no namespace is found, ErrNamespaceNotFound is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#NamespaceStore.Transact",
                    "documentation": {
                      "identifier": "NamespaceStore.Transact",
                      "newPage": false,
                      "searchKey": "database.NamespaceStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *NamespaceStore) Transact(ctx context.Context) (*NamespaceStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *NamespaceStore) Transact(ctx context.Context) (*NamespaceStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#NamespaceStore.With",
                    "documentation": {
                      "identifier": "NamespaceStore.With",
                      "newPage": false,
                      "searchKey": "database.NamespaceStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *NamespaceStore) With(other basestore.ShareableStore) *NamespaceStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *NamespaceStore) With(other basestore.ShareableStore) *NamespaceStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#NamespaceStore.getNamespace",
                    "documentation": {
                      "identifier": "NamespaceStore.getNamespace",
                      "newPage": false,
                      "searchKey": "database.NamespaceStore.getNamespace",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *NamespaceStore) getNamespace(ctx context.Context, n *Namespace, preds []*sqlf.Query) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *NamespaceStore) getNamespace(ctx context.Context, n *Namespace, preds []*sqlf.Query) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#NewUser",
              "documentation": {
                "identifier": "NewUser",
                "newPage": false,
                "searchKey": "database.NewUser",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NewUser struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NewUser struct {\n\tEmail       string\n\tUsername    string\n\tDisplayName string\n\tPassword    string\n\tAvatarURL   string // the new user's avatar URL, if known\n\n\t// EmailVerificationCode, if given, causes the new user's email address to be unverified until\n\t// they perform the email verification process and provied this code.\n\tEmailVerificationCode string `json:\"-\"` // forbid this field being set by JSON, just in case\n\n\t// EmailIsVerified is whether the email address should be considered already verified.\n\t//\n\t// 🚨 SECURITY: Only site admins are allowed to create users whose email addresses are initially\n\t// verified (i.e., with EmailVerificationCode == \"\").\n\tEmailIsVerified bool `json:\"-\"` // forbid this field being set by JSON, just in case\n\n\t// FailIfNotInitialUser causes the (users).Create call to return an error and not create the\n\t// user if at least one of the following is true: (1) the site has already been initialized or\n\t// (2) any other user account already exists.\n\tFailIfNotInitialUser bool `json:\"-\"` // forbid this field being set by JSON, just in case\n\n\t// EnforcePasswordLength is whether should enforce minimum and maximum password length requirement.\n\t// Users created by non-builtin auth providers do not have a password thus no need to check.\n\tEnforcePasswordLength bool `json:\"-\"` // forbid this field being set by JSON, just in case\n}\n```\n\nNewUser describes a new to-be-created user. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#NullAuthenticator",
              "documentation": {
                "identifier": "NullAuthenticator",
                "newPage": false,
                "searchKey": "database.NullAuthenticator",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NullAuthenticator struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NullAuthenticator struct{ A *auth.Authenticator }\n```\n\nNullAuthenticator represents an authenticator that may be null. It implements the sql.Scanner interface so it can be used as a scan destination, similar to sql.NullString. When the scanned value is null, the authenticator will be nil. It handles marshalling and unmarshalling the authenticator from and to JSON. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#NullAuthenticator.Scan",
                    "documentation": {
                      "identifier": "NullAuthenticator.Scan",
                      "newPage": false,
                      "searchKey": "database.NullAuthenticator.Scan",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *NullAuthenticator) Scan(value interface{}) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *NullAuthenticator) Scan(value interface{}) (err error)\n```\n\nScan implements the Scanner interface. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#NullAuthenticator.Value",
                    "documentation": {
                      "identifier": "NullAuthenticator.Value",
                      "newPage": false,
                      "searchKey": "database.NullAuthenticator.Value",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n NullAuthenticator) Value() (driver.Value, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n NullAuthenticator) Value() (driver.Value, error)\n```\n\nValue implements the driver Valuer interface. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#OrgInvitation",
              "documentation": {
                "identifier": "OrgInvitation",
                "newPage": false,
                "searchKey": "database.OrgInvitation",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OrgInvitation struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OrgInvitation struct {\n\tID              int64\n\tOrgID           int32\n\tSenderUserID    int32 // the sender of the invitation\n\tRecipientUserID int32 // the recipient of the invitation\n\tCreatedAt       time.Time\n\tNotifiedAt      *time.Time\n\tRespondedAt     *time.Time\n\tResponseType    *bool // accepted (true), rejected (false), no response (nil)\n\tRevokedAt       *time.Time\n}\n```\n\nAn OrgInvitation is an invitation for a user to join an organization as a member. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#OrgInvitation.Pending",
                    "documentation": {
                      "identifier": "OrgInvitation.Pending",
                      "newPage": false,
                      "searchKey": "database.OrgInvitation.Pending",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (oi *OrgInvitation) Pending() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (oi *OrgInvitation) Pending() bool\n```\n\nPending reports whether the invitation is pending (i.e., can be responded to by the recipient because it has not been revoked or responded to yet). \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#OrgInvitationNotFoundError",
              "documentation": {
                "identifier": "OrgInvitationNotFoundError",
                "newPage": false,
                "searchKey": "database.OrgInvitationNotFoundError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OrgInvitationNotFoundError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OrgInvitationNotFoundError struct {\n\targs []interface{}\n}\n```\n\nOrgInvitationNotFoundError occurs when an org invitation is not found. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#OrgInvitationNotFoundError.Error",
                    "documentation": {
                      "identifier": "OrgInvitationNotFoundError.Error",
                      "newPage": false,
                      "searchKey": "database.OrgInvitationNotFoundError.Error",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err OrgInvitationNotFoundError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err OrgInvitationNotFoundError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgInvitationNotFoundError.NotFound",
                    "documentation": {
                      "identifier": "OrgInvitationNotFoundError.NotFound",
                      "newPage": false,
                      "searchKey": "database.OrgInvitationNotFoundError.NotFound",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err OrgInvitationNotFoundError) NotFound() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err OrgInvitationNotFoundError) NotFound() bool\n```\n\nNotFound implements errcode.NotFounder. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#OrgInvitationStore",
              "documentation": {
                "identifier": "OrgInvitationStore",
                "newPage": false,
                "searchKey": "database.OrgInvitationStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OrgInvitationStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OrgInvitationStore struct {\n\t*basestore.Store\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#OrgInvitations",
                    "documentation": {
                      "identifier": "OrgInvitations",
                      "newPage": false,
                      "searchKey": "database.OrgInvitations",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func OrgInvitations(db dbutil.DB) *OrgInvitationStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc OrgInvitations(db dbutil.DB) *OrgInvitationStore\n```\n\nOrgInvitations instantiates and returns a new OrgInvitationStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgInvitationsWith",
                    "documentation": {
                      "identifier": "OrgInvitationsWith",
                      "newPage": false,
                      "searchKey": "database.OrgInvitationsWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func OrgInvitationsWith(other basestore.ShareableStore) *OrgInvitationStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc OrgInvitationsWith(other basestore.ShareableStore) *OrgInvitationStore\n```\n\nNewOrgInvitationStoreWithDB instantiates and returns a new OrgInvitationStore using the other store handle. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgInvitationStore.Count",
                    "documentation": {
                      "identifier": "OrgInvitationStore.Count",
                      "newPage": false,
                      "searchKey": "database.OrgInvitationStore.Count",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *OrgInvitationStore) Count(ctx context.Context, opt OrgInvitationsListOptions) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *OrgInvitationStore) Count(ctx context.Context, opt OrgInvitationsListOptions) (int, error)\n```\n\nCount counts all org invitations that satisfy the options (ignoring limit and offset). \n\n🚨 SECURITY: The caller must ensure that the actor is permitted to count the invitations. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgInvitationStore.Create",
                    "documentation": {
                      "identifier": "OrgInvitationStore.Create",
                      "newPage": false,
                      "searchKey": "database.OrgInvitationStore.Create",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *OrgInvitationStore) Create(ctx context.Context, orgID, senderUserID, recipientUserID int32) (*OrgInvitation, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *OrgInvitationStore) Create(ctx context.Context, orgID, senderUserID, recipientUserID int32) (*OrgInvitation, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgInvitationStore.GetByID",
                    "documentation": {
                      "identifier": "OrgInvitationStore.GetByID",
                      "newPage": false,
                      "searchKey": "database.OrgInvitationStore.GetByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *OrgInvitationStore) GetByID(ctx context.Context, id int64) (*OrgInvitation, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *OrgInvitationStore) GetByID(ctx context.Context, id int64) (*OrgInvitation, error)\n```\n\nGetByID retrieves the org invitation (if any) given its ID. \n\n🚨 SECURITY: The caller must ensure that the actor is permitted to view this org invitation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgInvitationStore.GetPending",
                    "documentation": {
                      "identifier": "OrgInvitationStore.GetPending",
                      "newPage": false,
                      "searchKey": "database.OrgInvitationStore.GetPending",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *OrgInvitationStore) GetPending(ctx context.Context, orgID, recipientUserID int32) (*OrgInvitation, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *OrgInvitationStore) GetPending(ctx context.Context, orgID, recipientUserID int32) (*OrgInvitation, error)\n```\n\nGetPending retrieves the pending invitation (if any) for the recipient to join the org. At most one invitation may be pending for an (org,recipient). \n\n🚨 SECURITY: The caller must ensure that the actor is permitted to view this org invitation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgInvitationStore.List",
                    "documentation": {
                      "identifier": "OrgInvitationStore.List",
                      "newPage": false,
                      "searchKey": "database.OrgInvitationStore.List",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *OrgInvitationStore) List(ctx context.Context, opt OrgInvitationsListOptions) ([]*OrgInvitation, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *OrgInvitationStore) List(ctx context.Context, opt OrgInvitationsListOptions) ([]*OrgInvitation, error)\n```\n\nList lists all access tokens that satisfy the options. \n\n🚨 SECURITY: The caller must ensure that the actor is permitted to list with the specified options. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgInvitationStore.Respond",
                    "documentation": {
                      "identifier": "OrgInvitationStore.Respond",
                      "newPage": false,
                      "searchKey": "database.OrgInvitationStore.Respond",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *OrgInvitationStore) Respond(ctx context.Context, id int64, recipientUserID int32, accept bool) (orgID int32, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *OrgInvitationStore) Respond(ctx context.Context, id int64, recipientUserID int32, accept bool) (orgID int32, err error)\n```\n\nRespond sets the recipient's response to the org invitation and returns the organization's ID to which the recipient was invited. If the recipient user ID given is incorrect, an OrgInvitationNotFoundError error is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgInvitationStore.Revoke",
                    "documentation": {
                      "identifier": "OrgInvitationStore.Revoke",
                      "newPage": false,
                      "searchKey": "database.OrgInvitationStore.Revoke",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *OrgInvitationStore) Revoke(ctx context.Context, id int64) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *OrgInvitationStore) Revoke(ctx context.Context, id int64) error\n```\n\nRevoke marks an org invitation as revoked. The recipient is forbidden from responding to it after it has been revoked. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgInvitationStore.Transact",
                    "documentation": {
                      "identifier": "OrgInvitationStore.Transact",
                      "newPage": false,
                      "searchKey": "database.OrgInvitationStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *OrgInvitationStore) Transact(ctx context.Context) (*OrgInvitationStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *OrgInvitationStore) Transact(ctx context.Context) (*OrgInvitationStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgInvitationStore.UpdateEmailSentTimestamp",
                    "documentation": {
                      "identifier": "OrgInvitationStore.UpdateEmailSentTimestamp",
                      "newPage": false,
                      "searchKey": "database.OrgInvitationStore.UpdateEmailSentTimestamp",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *OrgInvitationStore) UpdateEmailSentTimestamp(ctx context.Context, id int64) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *OrgInvitationStore) UpdateEmailSentTimestamp(ctx context.Context, id int64) error\n```\n\nUpdateEmailSentTimestamp updates the email-sent timestam[ for the org invitation to the current time. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgInvitationStore.With",
                    "documentation": {
                      "identifier": "OrgInvitationStore.With",
                      "newPage": false,
                      "searchKey": "database.OrgInvitationStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *OrgInvitationStore) With(other basestore.ShareableStore) *OrgInvitationStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *OrgInvitationStore) With(other basestore.ShareableStore) *OrgInvitationStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgInvitationStore.list",
                    "documentation": {
                      "identifier": "OrgInvitationStore.list",
                      "newPage": false,
                      "searchKey": "database.OrgInvitationStore.list",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *OrgInvitationStore) list(ctx context.Context, conds []*sqlf.Query, limitOffset *LimitOffset) ([]*OrgInvitation, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *OrgInvitationStore) list(ctx context.Context, conds []*sqlf.Query, limitOffset *LimitOffset) ([]*OrgInvitation, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#OrgInvitationsListOptions",
              "documentation": {
                "identifier": "OrgInvitationsListOptions",
                "newPage": false,
                "searchKey": "database.OrgInvitationsListOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OrgInvitationsListOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OrgInvitationsListOptions struct {\n\tOrgID           int32 // only list org invitations for this org\n\tRecipientUserID int32 // only list org invitations with this user as the recipient\n\t*LimitOffset\n}\n```\n\nOrgInvitationsListOptions contains options for listing org invitations. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#OrgInvitationsListOptions.sqlConditions",
                    "documentation": {
                      "identifier": "OrgInvitationsListOptions.sqlConditions",
                      "newPage": false,
                      "searchKey": "database.OrgInvitationsListOptions.sqlConditions",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o OrgInvitationsListOptions) sqlConditions() []*sqlf.Query"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o OrgInvitationsListOptions) sqlConditions() []*sqlf.Query\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#OrgMemberStore",
              "documentation": {
                "identifier": "OrgMemberStore",
                "newPage": false,
                "searchKey": "database.OrgMemberStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OrgMemberStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OrgMemberStore struct {\n\t*basestore.Store\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#OrgMembers",
                    "documentation": {
                      "identifier": "OrgMembers",
                      "newPage": false,
                      "searchKey": "database.OrgMembers",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func OrgMembers(db dbutil.DB) *OrgMemberStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc OrgMembers(db dbutil.DB) *OrgMemberStore\n```\n\nOrgMembers instantiates and returns a new OrgMemberStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgMembersWith",
                    "documentation": {
                      "identifier": "OrgMembersWith",
                      "newPage": false,
                      "searchKey": "database.OrgMembersWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func OrgMembersWith(other basestore.ShareableStore) *OrgMemberStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc OrgMembersWith(other basestore.ShareableStore) *OrgMemberStore\n```\n\nNewOrgMemberStoreWithDB instantiates and returns a new OrgMemberStore using the other store handle. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgMemberStore.Create",
                    "documentation": {
                      "identifier": "OrgMemberStore.Create",
                      "newPage": false,
                      "searchKey": "database.OrgMemberStore.Create",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *OrgMemberStore) Create(ctx context.Context, orgID, userID int32) (*types.OrgMembership, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *OrgMemberStore) Create(ctx context.Context, orgID, userID int32) (*types.OrgMembership, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgMemberStore.CreateMembershipInOrgsForAllUsers",
                    "documentation": {
                      "identifier": "OrgMemberStore.CreateMembershipInOrgsForAllUsers",
                      "newPage": false,
                      "searchKey": "database.OrgMemberStore.CreateMembershipInOrgsForAllUsers",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *OrgMemberStore) CreateMembershipInOrgsForAllUsers(ctx context.Context, orgNames []string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *OrgMemberStore) CreateMembershipInOrgsForAllUsers(ctx context.Context, orgNames []string) error\n```\n\nCreateMembershipInOrgsForAllUsers causes *ALL* users to become members of every org in the orgNames list. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgMemberStore.GetByOrgID",
                    "documentation": {
                      "identifier": "OrgMemberStore.GetByOrgID",
                      "newPage": false,
                      "searchKey": "database.OrgMemberStore.GetByOrgID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *OrgMemberStore) GetByOrgID(ctx context.Context, orgID int32) ([]*types.OrgMembership, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *OrgMemberStore) GetByOrgID(ctx context.Context, orgID int32) ([]*types.OrgMembership, error)\n```\n\nGetByOrgID returns a list of all members of a given organization. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgMemberStore.GetByOrgIDAndUserID",
                    "documentation": {
                      "identifier": "OrgMemberStore.GetByOrgIDAndUserID",
                      "newPage": false,
                      "searchKey": "database.OrgMemberStore.GetByOrgIDAndUserID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *OrgMemberStore) GetByOrgIDAndUserID(ctx context.Context, orgID, userID int32) (*types.OrgMembership, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *OrgMemberStore) GetByOrgIDAndUserID(ctx context.Context, orgID, userID int32) (*types.OrgMembership, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgMemberStore.GetByUserID",
                    "documentation": {
                      "identifier": "OrgMemberStore.GetByUserID",
                      "newPage": false,
                      "searchKey": "database.OrgMemberStore.GetByUserID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *OrgMemberStore) GetByUserID(ctx context.Context, userID int32) ([]*types.OrgMembership, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *OrgMemberStore) GetByUserID(ctx context.Context, userID int32) ([]*types.OrgMembership, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgMemberStore.Remove",
                    "documentation": {
                      "identifier": "OrgMemberStore.Remove",
                      "newPage": false,
                      "searchKey": "database.OrgMemberStore.Remove",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *OrgMemberStore) Remove(ctx context.Context, orgID, userID int32) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *OrgMemberStore) Remove(ctx context.Context, orgID, userID int32) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgMemberStore.Transact",
                    "documentation": {
                      "identifier": "OrgMemberStore.Transact",
                      "newPage": false,
                      "searchKey": "database.OrgMemberStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *OrgMemberStore) Transact(ctx context.Context) (*OrgMemberStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *OrgMemberStore) Transact(ctx context.Context) (*OrgMemberStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgMemberStore.With",
                    "documentation": {
                      "identifier": "OrgMemberStore.With",
                      "newPage": false,
                      "searchKey": "database.OrgMemberStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *OrgMemberStore) With(other basestore.ShareableStore) *OrgMemberStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *OrgMemberStore) With(other basestore.ShareableStore) *OrgMemberStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgMemberStore.getBySQL",
                    "documentation": {
                      "identifier": "OrgMemberStore.getBySQL",
                      "newPage": false,
                      "searchKey": "database.OrgMemberStore.getBySQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *OrgMemberStore) getBySQL(ctx context.Context, query string, args ...interface{}) ([]*types.OrgMembership, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *OrgMemberStore) getBySQL(ctx context.Context, query string, args ...interface{}) ([]*types.OrgMembership, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgMemberStore.getOneBySQL",
                    "documentation": {
                      "identifier": "OrgMemberStore.getOneBySQL",
                      "newPage": false,
                      "searchKey": "database.OrgMemberStore.getOneBySQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *OrgMemberStore) getOneBySQL(ctx context.Context, query string, args ...interface{}) (*types.OrgMembership, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *OrgMemberStore) getOneBySQL(ctx context.Context, query string, args ...interface{}) (*types.OrgMembership, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#OrgNotFoundError",
              "documentation": {
                "identifier": "OrgNotFoundError",
                "newPage": false,
                "searchKey": "database.OrgNotFoundError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OrgNotFoundError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OrgNotFoundError struct {\n\tMessage string\n}\n```\n\nOrgNotFoundError occurs when an organization is not found. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#OrgNotFoundError.Error",
                    "documentation": {
                      "identifier": "OrgNotFoundError.Error",
                      "newPage": false,
                      "searchKey": "database.OrgNotFoundError.Error",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *OrgNotFoundError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *OrgNotFoundError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgNotFoundError.NotFound",
                    "documentation": {
                      "identifier": "OrgNotFoundError.NotFound",
                      "newPage": false,
                      "searchKey": "database.OrgNotFoundError.NotFound",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *OrgNotFoundError) NotFound() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *OrgNotFoundError) NotFound() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#OrgStore",
              "documentation": {
                "identifier": "OrgStore",
                "newPage": false,
                "searchKey": "database.OrgStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OrgStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OrgStore struct {\n\t*basestore.Store\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#Orgs",
                    "documentation": {
                      "identifier": "Orgs",
                      "newPage": false,
                      "searchKey": "database.Orgs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Orgs(db dbutil.DB) *OrgStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Orgs(db dbutil.DB) *OrgStore\n```\n\nOrgs instantiates and returns a new OrgStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgsWith",
                    "documentation": {
                      "identifier": "OrgsWith",
                      "newPage": false,
                      "searchKey": "database.OrgsWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func OrgsWith(other basestore.ShareableStore) *OrgStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc OrgsWith(other basestore.ShareableStore) *OrgStore\n```\n\nNewOrgStoreWithDB instantiates and returns a new OrgStore using the other store handle. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgStore.Count",
                    "documentation": {
                      "identifier": "OrgStore.Count",
                      "newPage": false,
                      "searchKey": "database.OrgStore.Count",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgStore) Count(ctx context.Context, opt OrgsListOptions) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgStore) Count(ctx context.Context, opt OrgsListOptions) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgStore.Create",
                    "documentation": {
                      "identifier": "OrgStore.Create",
                      "newPage": false,
                      "searchKey": "database.OrgStore.Create",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgStore) Create(ctx context.Context, name string, displayName *string) (newOrg *types.Org, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgStore) Create(ctx context.Context, name string, displayName *string) (newOrg *types.Org, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgStore.Delete",
                    "documentation": {
                      "identifier": "OrgStore.Delete",
                      "newPage": false,
                      "searchKey": "database.OrgStore.Delete",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgStore) Delete(ctx context.Context, id int32) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgStore) Delete(ctx context.Context, id int32) (err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgStore.GetByID",
                    "documentation": {
                      "identifier": "OrgStore.GetByID",
                      "newPage": false,
                      "searchKey": "database.OrgStore.GetByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgStore) GetByID(ctx context.Context, orgID int32) (*types.Org, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgStore) GetByID(ctx context.Context, orgID int32) (*types.Org, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgStore.GetByName",
                    "documentation": {
                      "identifier": "OrgStore.GetByName",
                      "newPage": false,
                      "searchKey": "database.OrgStore.GetByName",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgStore) GetByName(ctx context.Context, name string) (*types.Org, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgStore) GetByName(ctx context.Context, name string) (*types.Org, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgStore.GetByUserID",
                    "documentation": {
                      "identifier": "OrgStore.GetByUserID",
                      "newPage": false,
                      "searchKey": "database.OrgStore.GetByUserID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgStore) GetByUserID(ctx context.Context, userID int32) ([]*types.Org, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgStore) GetByUserID(ctx context.Context, userID int32) ([]*types.Org, error)\n```\n\nGetByUserID returns a list of all organizations for the user. An empty slice is returned if the user is not authenticated or is not a member of any org. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgStore.List",
                    "documentation": {
                      "identifier": "OrgStore.List",
                      "newPage": false,
                      "searchKey": "database.OrgStore.List",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgStore) List(ctx context.Context, opt *OrgsListOptions) ([]*types.Org, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgStore) List(ctx context.Context, opt *OrgsListOptions) ([]*types.Org, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgStore.Transact",
                    "documentation": {
                      "identifier": "OrgStore.Transact",
                      "newPage": false,
                      "searchKey": "database.OrgStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgStore) Transact(ctx context.Context) (*OrgStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgStore) Transact(ctx context.Context) (*OrgStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgStore.Update",
                    "documentation": {
                      "identifier": "OrgStore.Update",
                      "newPage": false,
                      "searchKey": "database.OrgStore.Update",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgStore) Update(ctx context.Context, id int32, displayName *string) (*types.Org, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgStore) Update(ctx context.Context, id int32, displayName *string) (*types.Org, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgStore.With",
                    "documentation": {
                      "identifier": "OrgStore.With",
                      "newPage": false,
                      "searchKey": "database.OrgStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgStore) With(other basestore.ShareableStore) *OrgStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgStore) With(other basestore.ShareableStore) *OrgStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgStore.getBySQL",
                    "documentation": {
                      "identifier": "OrgStore.getBySQL",
                      "newPage": false,
                      "searchKey": "database.OrgStore.getBySQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgStore) getBySQL(ctx context.Context, query string, args ...interface{}) ([]*types.Org, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgStore) getBySQL(ctx context.Context, query string, args ...interface{}) ([]*types.Org, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#OrgStore.listSQL",
                    "documentation": {
                      "identifier": "OrgStore.listSQL",
                      "newPage": false,
                      "searchKey": "database.OrgStore.listSQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*OrgStore) listSQL(opt OrgsListOptions) *sqlf.Query"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*OrgStore) listSQL(opt OrgsListOptions) *sqlf.Query\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#OrgsListOptions",
              "documentation": {
                "identifier": "OrgsListOptions",
                "newPage": false,
                "searchKey": "database.OrgsListOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OrgsListOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OrgsListOptions struct {\n\t// Query specifies a search query for organizations.\n\tQuery string\n\n\t*LimitOffset\n}\n```\n\nOrgsListOptions specifies the options for listing organizations. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#PercentileValue",
              "documentation": {
                "identifier": "PercentileValue",
                "newPage": false,
                "searchKey": "database.PercentileValue",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PercentileValue struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PercentileValue struct {\n\tStart  time.Time\n\tValues []float64\n}\n```\n\nPercentileValue is a slice of Nth percentile values calculated from a field of events in a time period starting on a given date. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#PeriodType",
              "documentation": {
                "identifier": "PeriodType",
                "newPage": false,
                "searchKey": "database.PeriodType",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PeriodType string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PeriodType string\n```\n\nPeriodType is the type of period in which to count events and unique users. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#PhabricatorStore",
              "documentation": {
                "identifier": "PhabricatorStore",
                "newPage": false,
                "searchKey": "database.PhabricatorStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PhabricatorStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PhabricatorStore struct {\n\t*basestore.Store\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#Phabricator",
                    "documentation": {
                      "identifier": "Phabricator",
                      "newPage": false,
                      "searchKey": "database.Phabricator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Phabricator(db dbutil.DB) *PhabricatorStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Phabricator(db dbutil.DB) *PhabricatorStore\n```\n\nPhabricator instantiates and returns a new PhabricatorStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#PhabricatorWith",
                    "documentation": {
                      "identifier": "PhabricatorWith",
                      "newPage": false,
                      "searchKey": "database.PhabricatorWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func PhabricatorWith(other basestore.ShareableStore) *PhabricatorStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc PhabricatorWith(other basestore.ShareableStore) *PhabricatorStore\n```\n\nNewPhabricatorStoreWithDB instantiates and returns a new PhabricatorStore using the other store handle. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#PhabricatorStore.Create",
                    "documentation": {
                      "identifier": "PhabricatorStore.Create",
                      "newPage": false,
                      "searchKey": "database.PhabricatorStore.Create",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *PhabricatorStore) Create(ctx context.Context, callsign string, name api.RepoName, phabURL string) (*types.PhabricatorRepo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *PhabricatorStore) Create(ctx context.Context, callsign string, name api.RepoName, phabURL string) (*types.PhabricatorRepo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#PhabricatorStore.CreateIfNotExists",
                    "documentation": {
                      "identifier": "PhabricatorStore.CreateIfNotExists",
                      "newPage": false,
                      "searchKey": "database.PhabricatorStore.CreateIfNotExists",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *PhabricatorStore) CreateIfNotExists(ctx context.Context, callsign string, name api.RepoName, phabURL string) (*types.PhabricatorRepo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *PhabricatorStore) CreateIfNotExists(ctx context.Context, callsign string, name api.RepoName, phabURL string) (*types.PhabricatorRepo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#PhabricatorStore.CreateOrUpdate",
                    "documentation": {
                      "identifier": "PhabricatorStore.CreateOrUpdate",
                      "newPage": false,
                      "searchKey": "database.PhabricatorStore.CreateOrUpdate",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *PhabricatorStore) CreateOrUpdate(ctx context.Context, callsign string, name api.RepoName, phabURL string) (*types.PhabricatorRepo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *PhabricatorStore) CreateOrUpdate(ctx context.Context, callsign string, name api.RepoName, phabURL string) (*types.PhabricatorRepo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#PhabricatorStore.GetByName",
                    "documentation": {
                      "identifier": "PhabricatorStore.GetByName",
                      "newPage": false,
                      "searchKey": "database.PhabricatorStore.GetByName",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *PhabricatorStore) GetByName(ctx context.Context, name api.RepoName) (*types.PhabricatorRepo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *PhabricatorStore) GetByName(ctx context.Context, name api.RepoName) (*types.PhabricatorRepo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#PhabricatorStore.Transact",
                    "documentation": {
                      "identifier": "PhabricatorStore.Transact",
                      "newPage": false,
                      "searchKey": "database.PhabricatorStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PhabricatorStore) Transact(ctx context.Context) (*PhabricatorStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PhabricatorStore) Transact(ctx context.Context) (*PhabricatorStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#PhabricatorStore.With",
                    "documentation": {
                      "identifier": "PhabricatorStore.With",
                      "newPage": false,
                      "searchKey": "database.PhabricatorStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PhabricatorStore) With(other basestore.ShareableStore) *PhabricatorStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PhabricatorStore) With(other basestore.ShareableStore) *PhabricatorStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#PhabricatorStore.getBySQL",
                    "documentation": {
                      "identifier": "PhabricatorStore.getBySQL",
                      "newPage": false,
                      "searchKey": "database.PhabricatorStore.getBySQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *PhabricatorStore) getBySQL(ctx context.Context, query string, args ...interface{}) ([]*types.PhabricatorRepo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *PhabricatorStore) getBySQL(ctx context.Context, query string, args ...interface{}) ([]*types.PhabricatorRepo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#PhabricatorStore.getOneBySQL",
                    "documentation": {
                      "identifier": "PhabricatorStore.getOneBySQL",
                      "newPage": false,
                      "searchKey": "database.PhabricatorStore.getOneBySQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *PhabricatorStore) getOneBySQL(ctx context.Context, query string, args ...interface{}) (*types.PhabricatorRepo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *PhabricatorStore) getOneBySQL(ctx context.Context, query string, args ...interface{}) (*types.PhabricatorRepo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#QueryRunnerStateStore",
              "documentation": {
                "identifier": "QueryRunnerStateStore",
                "newPage": false,
                "searchKey": "database.QueryRunnerStateStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueryRunnerStateStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueryRunnerStateStore struct {\n\t*basestore.Store\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#QueryRunnerState",
                    "documentation": {
                      "identifier": "QueryRunnerState",
                      "newPage": false,
                      "searchKey": "database.QueryRunnerState",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func QueryRunnerState(db dbutil.DB) *QueryRunnerStateStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc QueryRunnerState(db dbutil.DB) *QueryRunnerStateStore\n```\n\nQueryRunnerState instantiates and returns a new QueryRunnerStateStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#QueryRunnerStateWith",
                    "documentation": {
                      "identifier": "QueryRunnerStateWith",
                      "newPage": false,
                      "searchKey": "database.QueryRunnerStateWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func QueryRunnerStateWith(other basestore.ShareableStore) *QueryRunnerStateStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc QueryRunnerStateWith(other basestore.ShareableStore) *QueryRunnerStateStore\n```\n\nNewQueryRunnerStateStoreWithDB instantiates and returns a new QueryRunnerStateStore using the other store handle. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#QueryRunnerStateStore.Delete",
                    "documentation": {
                      "identifier": "QueryRunnerStateStore.Delete",
                      "newPage": false,
                      "searchKey": "database.QueryRunnerStateStore.Delete",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *QueryRunnerStateStore) Delete(ctx context.Context, query string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *QueryRunnerStateStore) Delete(ctx context.Context, query string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#QueryRunnerStateStore.Get",
                    "documentation": {
                      "identifier": "QueryRunnerStateStore.Get",
                      "newPage": false,
                      "searchKey": "database.QueryRunnerStateStore.Get",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *QueryRunnerStateStore) Get(ctx context.Context, query string) (*SavedQueryInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *QueryRunnerStateStore) Get(ctx context.Context, query string) (*SavedQueryInfo, error)\n```\n\nGet gets the saved query information for the given query. nil is returned if there is no existing saved query info. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#QueryRunnerStateStore.Set",
                    "documentation": {
                      "identifier": "QueryRunnerStateStore.Set",
                      "newPage": false,
                      "searchKey": "database.QueryRunnerStateStore.Set",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *QueryRunnerStateStore) Set(ctx context.Context, info *SavedQueryInfo) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *QueryRunnerStateStore) Set(ctx context.Context, info *SavedQueryInfo) error\n```\n\nSet sets the saved query information for the given info.Query. \n\nIt is not safe to call concurrently for the same info.Query, as it uses a poor man's upsert implementation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#QueryRunnerStateStore.Transact",
                    "documentation": {
                      "identifier": "QueryRunnerStateStore.Transact",
                      "newPage": false,
                      "searchKey": "database.QueryRunnerStateStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *QueryRunnerStateStore) Transact(ctx context.Context) (*QueryRunnerStateStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *QueryRunnerStateStore) Transact(ctx context.Context) (*QueryRunnerStateStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#QueryRunnerStateStore.With",
                    "documentation": {
                      "identifier": "QueryRunnerStateStore.With",
                      "newPage": false,
                      "searchKey": "database.QueryRunnerStateStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *QueryRunnerStateStore) With(other basestore.ShareableStore) *QueryRunnerStateStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *QueryRunnerStateStore) With(other basestore.ShareableStore) *QueryRunnerStateStore\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#RepoListColumn",
              "documentation": {
                "identifier": "RepoListColumn",
                "newPage": false,
                "searchKey": "database.RepoListColumn",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepoListColumn string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepoListColumn string\n```\n\nRepoListColumn is a column by which repositories can be sorted. These correspond to columns in the database. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#RepoListOrderBy",
              "documentation": {
                "identifier": "RepoListOrderBy",
                "newPage": false,
                "searchKey": "database.RepoListOrderBy",
                "tags": [
                  "array",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepoListOrderBy []database.RepoListSort"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepoListOrderBy []RepoListSort\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#RepoListOrderBy.SQL",
                    "documentation": {
                      "identifier": "RepoListOrderBy.SQL",
                      "newPage": false,
                      "searchKey": "database.RepoListOrderBy.SQL",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r RepoListOrderBy) SQL() *sqlf.Query"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r RepoListOrderBy) SQL() *sqlf.Query\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#RepoListSort",
              "documentation": {
                "identifier": "RepoListSort",
                "newPage": false,
                "searchKey": "database.RepoListSort",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepoListSort struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepoListSort struct {\n\tField      RepoListColumn\n\tDescending bool\n\tNulls      string\n}\n```\n\nRepoListSort is a field by which to sort and the direction of the sorting. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#RepoListSort.SQL",
                    "documentation": {
                      "identifier": "RepoListSort.SQL",
                      "newPage": false,
                      "searchKey": "database.RepoListSort.SQL",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r RepoListSort) SQL() *sqlf.Query"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r RepoListSort) SQL() *sqlf.Query\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#RepoNotFoundErr",
              "documentation": {
                "identifier": "RepoNotFoundErr",
                "newPage": false,
                "searchKey": "database.RepoNotFoundErr",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepoNotFoundErr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepoNotFoundErr struct {\n\tID   api.RepoID\n\tName api.RepoName\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#RepoNotFoundErr.Error",
                    "documentation": {
                      "identifier": "RepoNotFoundErr.Error",
                      "newPage": false,
                      "searchKey": "database.RepoNotFoundErr.Error",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *RepoNotFoundErr) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *RepoNotFoundErr) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoNotFoundErr.NotFound",
                    "documentation": {
                      "identifier": "RepoNotFoundErr.NotFound",
                      "newPage": false,
                      "searchKey": "database.RepoNotFoundErr.NotFound",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *RepoNotFoundErr) NotFound() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *RepoNotFoundErr) NotFound() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#RepoStore",
              "documentation": {
                "identifier": "RepoStore",
                "newPage": false,
                "searchKey": "database.RepoStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepoStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepoStore struct {\n\t*basestore.Store\n\n\tonce sync.Once\n}\n```\n\nRepoStore handles access to the repo table \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#Repos",
                    "documentation": {
                      "identifier": "Repos",
                      "newPage": false,
                      "searchKey": "database.Repos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Repos(db dbutil.DB) *RepoStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Repos(db dbutil.DB) *RepoStore\n```\n\nRepos instantiates and returns a new RepoStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ReposWith",
                    "documentation": {
                      "identifier": "ReposWith",
                      "newPage": false,
                      "searchKey": "database.ReposWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func ReposWith(other basestore.ShareableStore) *RepoStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc ReposWith(other basestore.ShareableStore) *RepoStore\n```\n\nReposWith instantiates and returns a new RepoStore using the other store handle. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.Count",
                    "documentation": {
                      "identifier": "RepoStore.Count",
                      "newPage": false,
                      "searchKey": "database.RepoStore.Count",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) Count(ctx context.Context, opt ReposListOptions) (ct int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) Count(ctx context.Context, opt ReposListOptions) (ct int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.Create",
                    "documentation": {
                      "identifier": "RepoStore.Create",
                      "newPage": false,
                      "searchKey": "database.RepoStore.Create",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) Create(ctx context.Context, repos ...*types.Repo) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) Create(ctx context.Context, repos ...*types.Repo) (err error)\n```\n\nCreate inserts repos and their sources, respectively in the repo and external_service_repos table. Associated external services must already exist. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.Delete",
                    "documentation": {
                      "identifier": "RepoStore.Delete",
                      "newPage": false,
                      "searchKey": "database.RepoStore.Delete",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) Delete(ctx context.Context, ids ...api.RepoID) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) Delete(ctx context.Context, ids ...api.RepoID) error\n```\n\nDelete deletes repos associated with the given ids and their associated sources. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.ExternalServices",
                    "documentation": {
                      "identifier": "RepoStore.ExternalServices",
                      "newPage": false,
                      "searchKey": "database.RepoStore.ExternalServices",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) ExternalServices(ctx context.Context, repoID api.RepoID) ([]*types.ExternalService, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) ExternalServices(ctx context.Context, repoID api.RepoID) ([]*types.ExternalService, error)\n```\n\nExternalServices lists the external services which include references to the given repo. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.Get",
                    "documentation": {
                      "identifier": "RepoStore.Get",
                      "newPage": false,
                      "searchKey": "database.RepoStore.Get",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) Get(ctx context.Context, id api.RepoID) (_ *types.Repo, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) Get(ctx context.Context, id api.RepoID) (_ *types.Repo, err error)\n```\n\nGet returns metadata for the request repository ID. It fetches data only from the database and NOT from any external sources. If the caller is concerned the copy of the data in the database might be stale, the caller is responsible for fetching data from any external services. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.GetByIDs",
                    "documentation": {
                      "identifier": "RepoStore.GetByIDs",
                      "newPage": false,
                      "searchKey": "database.RepoStore.GetByIDs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) GetByIDs(ctx context.Context, ids ...api.RepoID) (_ []*types.Repo, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) GetByIDs(ctx context.Context, ids ...api.RepoID) (_ []*types.Repo, err error)\n```\n\nGetByIDs returns a list of repositories by given IDs. The number of results list could be less than the candidate list due to no repository is associated with some IDs. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.GetByName",
                    "documentation": {
                      "identifier": "RepoStore.GetByName",
                      "newPage": false,
                      "searchKey": "database.RepoStore.GetByName",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) GetByName(ctx context.Context, nameOrURI api.RepoName) (_ *types.Repo, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) GetByName(ctx context.Context, nameOrURI api.RepoName) (_ *types.Repo, err error)\n```\n\nGetByName returns the repository with the given nameOrUri from the database, or an error. If we have a match on name and uri, we prefer the match on name. \n\nName is the name for this repository (e.g., \"github.com/user/repo\"). It is the same as URI, unless the user configures a non-default repositoryPathPattern. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.GetReposSetByIDs",
                    "documentation": {
                      "identifier": "RepoStore.GetReposSetByIDs",
                      "newPage": false,
                      "searchKey": "database.RepoStore.GetReposSetByIDs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) GetReposSetByIDs(ctx context.Context, ids ...api.RepoID) (map[api.RepoID]*types.Repo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) GetReposSetByIDs(ctx context.Context, ids ...api.RepoID) (map[api.RepoID]*types.Repo, error)\n```\n\nGetReposSetByIDs returns a map of repositories with the given IDs, indexed by their IDs. The number of results entries could be less than the candidate list due to no repository is associated with some IDs. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.List",
                    "documentation": {
                      "identifier": "RepoStore.List",
                      "newPage": false,
                      "searchKey": "database.RepoStore.List",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) List(ctx context.Context, opt ReposListOptions) (results []*types.Repo, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) List(ctx context.Context, opt ReposListOptions) (results []*types.Repo, err error)\n```\n\nList lists repositories in the Sourcegraph repository \n\nThis will not return any repositories from external services that are not present in the Sourcegraph repository. The result list is unsorted and has a fixed maximum limit of 1000 items. Matching is done with fuzzy matching, i.e. \"query\" will match any repo name that matches the regexp `q.*u.*e.*r.*y` \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.ListDefaultRepos",
                    "documentation": {
                      "identifier": "RepoStore.ListDefaultRepos",
                      "newPage": false,
                      "searchKey": "database.RepoStore.ListDefaultRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) ListDefaultRepos(ctx context.Context, opts ListDefaultReposOptions) (results []types.RepoName, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) ListDefaultRepos(ctx context.Context, opts ListDefaultReposOptions) (results []types.RepoName, err error)\n```\n\nListDefaultRepos returns a list of default repos. Default repos are a union of repos in our default_repos table and repos owned by users. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.ListEnabledNames",
                    "documentation": {
                      "identifier": "RepoStore.ListEnabledNames",
                      "newPage": false,
                      "searchKey": "database.RepoStore.ListEnabledNames",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) ListEnabledNames(ctx context.Context) ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) ListEnabledNames(ctx context.Context) ([]string, error)\n```\n\nListEnabledNames returns a list of all enabled repo names. This is commonly requested information by other services (repo-updater and indexed-search). We special case just returning enabled names so that we read much less data into memory. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.ListRepoNames",
                    "documentation": {
                      "identifier": "RepoStore.ListRepoNames",
                      "newPage": false,
                      "searchKey": "database.RepoStore.ListRepoNames",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) ListRepoNames(ctx context.Context, opt ReposListOptions) (results []types.RepoName, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) ListRepoNames(ctx context.Context, opt ReposListOptions) (results []types.RepoName, err error)\n```\n\nListRepoNames returns a list of repositories names and ids. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.Transact",
                    "documentation": {
                      "identifier": "RepoStore.Transact",
                      "newPage": false,
                      "searchKey": "database.RepoStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) Transact(ctx context.Context) (*RepoStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) Transact(ctx context.Context) (*RepoStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.Upsert",
                    "documentation": {
                      "identifier": "RepoStore.Upsert",
                      "newPage": false,
                      "searchKey": "database.RepoStore.Upsert",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) Upsert(ctx context.Context, op InsertRepoOp) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) Upsert(ctx context.Context, op InsertRepoOp) error\n```\n\nUpsert updates the repository if it already exists (keyed on name) and inserts it if it does not. \n\nUpsert exists for testing purposes only. Repository mutations are managed by repo-updater. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.With",
                    "documentation": {
                      "identifier": "RepoStore.With",
                      "newPage": false,
                      "searchKey": "database.RepoStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) With(other basestore.ShareableStore) *RepoStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) With(other basestore.ShareableStore) *RepoStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.ensureStore",
                    "documentation": {
                      "identifier": "RepoStore.ensureStore",
                      "newPage": false,
                      "searchKey": "database.RepoStore.ensureStore",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) ensureStore()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) ensureStore()\n```\n\nensureStore instantiates a basestore.Store if necessary, using the dbconn.Global handle. This function ensures access to dbconn happens after the rest of the code or tests have initialized it. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.list",
                    "documentation": {
                      "identifier": "RepoStore.list",
                      "newPage": false,
                      "searchKey": "database.RepoStore.list",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) list(ctx context.Context, tr *trace.Trace, opt ReposListOptions, scanRepo func(rows *sql.Rows) error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) list(ctx context.Context, tr *trace.Trace, opt ReposListOptions, scanRepo func(rows *sql.Rows) error) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.listRepos",
                    "documentation": {
                      "identifier": "RepoStore.listRepos",
                      "newPage": false,
                      "searchKey": "database.RepoStore.listRepos",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) listRepos(ctx context.Context, tr *trace.Trace, opt ReposListOptions) (rs []*types.Repo, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) listRepos(ctx context.Context, tr *trace.Trace, opt ReposListOptions) (rs []*types.Repo, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#RepoStore.listSQL",
                    "documentation": {
                      "identifier": "RepoStore.listSQL",
                      "newPage": false,
                      "searchKey": "database.RepoStore.listSQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RepoStore) listSQL(ctx context.Context, opt ReposListOptions) (*sqlf.Query, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RepoStore) listSQL(ctx context.Context, opt ReposListOptions) (*sqlf.Query, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ReposListOptions",
              "documentation": {
                "identifier": "ReposListOptions",
                "newPage": false,
                "searchKey": "database.ReposListOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ReposListOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ReposListOptions struct {\n\t// What to select of each row.\n\tSelect []string\n\n\t// Query specifies a search query for repositories. If specified, then the Sort and\n\t// Direction options are ignored\n\tQuery string\n\n\t// IncludePatterns is a list of regular expressions, all of which must match all\n\t// repositories returned in the list.\n\tIncludePatterns []string\n\n\t// ExcludePattern is a regular expression that must not match any repository\n\t// returned in the list.\n\tExcludePattern string\n\n\t// Names is a list of repository names used to limit the results to that\n\t// set of repositories.\n\t// Note: This is currently used for version contexts. In future iterations,\n\t// version contexts may have their own table\n\t// and this may be replaced by the version context name.\n\tNames []string\n\n\t// URIs selects any repos in the given set of URIs (i.e. uri column)\n\tURIs []string\n\n\t// IDs of repos to list. When zero-valued, this is omitted from the predicate set.\n\tIDs []api.RepoID\n\n\t// UserID, if non zero, will limit the set of results to repositories added by the user\n\t// through external services. Mutually exclusive with the ExternalServiceIDs option.\n\tUserID int32\n\n\t// SearchContextID, if non zero, will limit the set of results to repositories listed in\n\t// the search context.\n\tSearchContextID int64\n\n\t// ServiceTypes of repos to list. When zero-valued, this is omitted from the predicate set.\n\tServiceTypes []string\n\n\t// ExternalServiceIDs, if non empty, will only return repos added by the given external services.\n\t// The id is that of the external_services table NOT the external_service_id in the repo table\n\t// Mutually exclusive with the UserID option.\n\tExternalServiceIDs []int64\n\n\t// ExternalRepos of repos to list. When zero-valued, this is omitted from the predicate set.\n\tExternalRepos []api.ExternalRepoSpec\n\n\t// ExternalRepoIncludePrefixes is the list of specs to include repos using\n\t// prefix matching. When zero-valued, this is omitted from the predicate set.\n\tExternalRepoIncludePrefixes []api.ExternalRepoSpec\n\n\t// ExternalRepoExcludePrefixes is the list of specs to exclude repos using\n\t// prefix matching. When zero-valued, this is omitted from the predicate set.\n\tExternalRepoExcludePrefixes []api.ExternalRepoSpec\n\n\t// PatternQuery is an expression tree of patterns to query. The atoms of\n\t// the query are strings which are regular expression patterns.\n\tPatternQuery query.Q\n\n\t// NoForks excludes forks from the list.\n\tNoForks bool\n\n\t// OnlyForks excludes non-forks from the lhist.\n\tOnlyForks bool\n\n\t// NoArchived excludes archived repositories from the list.\n\tNoArchived bool\n\n\t// OnlyArchived excludes non-archived repositories from the list.\n\tOnlyArchived bool\n\n\t// NoCloned excludes cloned repositories from the list.\n\tNoCloned bool\n\n\t// OnlyCloned excludes non-cloned repositories from the list.\n\tOnlyCloned bool\n\n\t// NoPrivate excludes private repositories from the list.\n\tNoPrivate bool\n\n\t// OnlyPrivate excludes non-private repositories from the list.\n\tOnlyPrivate bool\n\n\t// Index when set will only include repositories which should be indexed\n\t// if true. If false it will exclude repositories which should be\n\t// indexed. An example use case of this is for indexed search only\n\t// indexing a subset of repositories.\n\tIndex *bool\n\n\t// List of fields by which to order the return repositories.\n\tOrderBy RepoListOrderBy\n\n\t// CursorColumn contains the relevant column for cursor-based pagination (e.g. \"name\")\n\tCursorColumn string\n\n\t// CursorValue contains the relevant value for cursor-based pagination (e.g. \"Zaphod\").\n\tCursorValue string\n\n\t// CursorDirection contains the comparison for cursor-based pagination, all possible values are: next, prev.\n\tCursorDirection string\n\n\t// UseOr decides between ANDing or ORing the predicates together.\n\tUseOr bool\n\n\t// IncludeUserPublicRepos will include repos from the user_public_repos table if this field is true, and the user_id\n\t// is non-zero. Note that these are not repos owned by this user, just ones they are interested in.\n\tIncludeUserPublicRepos bool\n\n\t// FailedFetch, if true, will filter to only repos that failed to clone or fetch\n\t// when last attempted. Specifically, this means that they have a non-null\n\t// last_error value in the gitserver_repos table.\n\tFailedFetch bool\n\n\t*LimitOffset\n}\n```\n\nReposListOptions specifies the options for listing repositories. \n\nQuery and IncludePatterns/ExcludePatterns may not be used together. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#RevokeUserPermissionsArgs",
              "documentation": {
                "identifier": "RevokeUserPermissionsArgs",
                "newPage": false,
                "searchKey": "database.RevokeUserPermissionsArgs",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RevokeUserPermissionsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RevokeUserPermissionsArgs struct {\n\t// The user ID that will be used to revoke effective permissions.\n\tUserID int32\n\t// The list of external accounts related to the user. This is list because a user could have\n\t// multiple external accounts, including ones from code hosts and/or Sourcegraph authz provider.\n\tAccounts []*extsvc.Accounts\n}\n```\n\nRevokeUserPermissionsArgs contains required arguments to revoke user permissions, it includes all possible leads to grant or authorize access for a user. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#SavedQueryInfo",
              "documentation": {
                "identifier": "SavedQueryInfo",
                "newPage": false,
                "searchKey": "database.SavedQueryInfo",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SavedQueryInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SavedQueryInfo struct {\n\tQuery        string\n\tLastExecuted time.Time\n\tLatestResult time.Time\n\tExecDuration time.Duration\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#SavedSearchStore",
              "documentation": {
                "identifier": "SavedSearchStore",
                "newPage": false,
                "searchKey": "database.SavedSearchStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SavedSearchStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SavedSearchStore struct {\n\t*basestore.Store\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#SavedSearches",
                    "documentation": {
                      "identifier": "SavedSearches",
                      "newPage": false,
                      "searchKey": "database.SavedSearches",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func SavedSearches(db dbutil.DB) *SavedSearchStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc SavedSearches(db dbutil.DB) *SavedSearchStore\n```\n\nSavedSearches instantiates and returns a new SavedSearchStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SavedSearchesWith",
                    "documentation": {
                      "identifier": "SavedSearchesWith",
                      "newPage": false,
                      "searchKey": "database.SavedSearchesWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func SavedSearchesWith(other basestore.ShareableStore) *SavedSearchStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc SavedSearchesWith(other basestore.ShareableStore) *SavedSearchStore\n```\n\nNewSavedSearchStoreWithDB instantiates and returns a new SavedSearchStore using the other store handle. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SavedSearchStore.Create",
                    "documentation": {
                      "identifier": "SavedSearchStore.Create",
                      "newPage": false,
                      "searchKey": "database.SavedSearchStore.Create",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SavedSearchStore) Create(ctx context.Context, newSavedSearch *types.SavedSearch) (savedQuery *types.SavedSearch, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SavedSearchStore) Create(ctx context.Context, newSavedSearch *types.SavedSearch) (savedQuery *types.SavedSearch, err error)\n```\n\nCreate creates a new saved search with the specified parameters. The ID field must be zero, or an error will be returned. \n\n🚨 SECURITY: This method does NOT verify the user's identity or that the user is an admin. It is the callers responsibility to ensure the user has proper permissions to create the saved search. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SavedSearchStore.Delete",
                    "documentation": {
                      "identifier": "SavedSearchStore.Delete",
                      "newPage": false,
                      "searchKey": "database.SavedSearchStore.Delete",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SavedSearchStore) Delete(ctx context.Context, id int32) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SavedSearchStore) Delete(ctx context.Context, id int32) (err error)\n```\n\nDelete hard-deletes an existing saved search. \n\n🚨 SECURITY: This method does NOT verify the user's identity or that the user is an admin. It is the callers responsibility to ensure the user has proper permissions to perform the delete. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SavedSearchStore.GetByID",
                    "documentation": {
                      "identifier": "SavedSearchStore.GetByID",
                      "newPage": false,
                      "searchKey": "database.SavedSearchStore.GetByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SavedSearchStore) GetByID(ctx context.Context, id int32) (*api.SavedQuerySpecAndConfig, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SavedSearchStore) GetByID(ctx context.Context, id int32) (*api.SavedQuerySpecAndConfig, error)\n```\n\nGetByID returns the saved search with the given ID. \n\n🚨 SECURITY: This method does NOT verify the user's identity or that the user is an admin. It is the callers responsibility to ensure this response only makes it to users with proper permissions to access the saved search. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SavedSearchStore.IsEmpty",
                    "documentation": {
                      "identifier": "SavedSearchStore.IsEmpty",
                      "newPage": false,
                      "searchKey": "database.SavedSearchStore.IsEmpty",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SavedSearchStore) IsEmpty(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SavedSearchStore) IsEmpty(ctx context.Context) (bool, error)\n```\n\nIsEmpty tells if there are no saved searches (at all) on this Sourcegraph instance. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SavedSearchStore.ListAll",
                    "documentation": {
                      "identifier": "SavedSearchStore.ListAll",
                      "newPage": false,
                      "searchKey": "database.SavedSearchStore.ListAll",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SavedSearchStore) ListAll(ctx context.Context) (savedSearches []api.SavedQuerySpecAndConfig, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SavedSearchStore) ListAll(ctx context.Context) (savedSearches []api.SavedQuerySpecAndConfig, err error)\n```\n\nListAll lists all the saved searches on an instance. \n\n🚨 SECURITY: This method does NOT verify the user's identity or that the user is an admin. It is the callers responsibility to ensure that only users with the proper permissions can access the returned saved searches. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SavedSearchStore.ListSavedSearchesByOrgID",
                    "documentation": {
                      "identifier": "SavedSearchStore.ListSavedSearchesByOrgID",
                      "newPage": false,
                      "searchKey": "database.SavedSearchStore.ListSavedSearchesByOrgID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SavedSearchStore) ListSavedSearchesByOrgID(ctx context.Context, orgID int32) ([]*types.SavedSearch, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SavedSearchStore) ListSavedSearchesByOrgID(ctx context.Context, orgID int32) ([]*types.SavedSearch, error)\n```\n\nListSavedSearchesByUserID lists all the saved searches associated with an organization. \n\n🚨 SECURITY: This method does NOT verify the user's identity or that the user is an admin. It is the callers responsibility to ensure only admins or members of the specified organization can access the returned saved searches. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SavedSearchStore.ListSavedSearchesByUserID",
                    "documentation": {
                      "identifier": "SavedSearchStore.ListSavedSearchesByUserID",
                      "newPage": false,
                      "searchKey": "database.SavedSearchStore.ListSavedSearchesByUserID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SavedSearchStore) ListSavedSearchesByUserID(ctx context.Context, userID int32) ([]*types.SavedSearch, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SavedSearchStore) ListSavedSearchesByUserID(ctx context.Context, userID int32) ([]*types.SavedSearch, error)\n```\n\nListSavedSearchesByUserID lists all the saved searches associated with a user, including saved searches in organizations the user is a member of. \n\n🚨 SECURITY: This method does NOT verify the user's identity or that the user is an admin. It is the callers responsibility to ensure that only the specified user or users with proper permissions can access the returned saved searches. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SavedSearchStore.Transact",
                    "documentation": {
                      "identifier": "SavedSearchStore.Transact",
                      "newPage": false,
                      "searchKey": "database.SavedSearchStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SavedSearchStore) Transact(ctx context.Context) (*SavedSearchStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SavedSearchStore) Transact(ctx context.Context) (*SavedSearchStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SavedSearchStore.Update",
                    "documentation": {
                      "identifier": "SavedSearchStore.Update",
                      "newPage": false,
                      "searchKey": "database.SavedSearchStore.Update",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SavedSearchStore) Update(ctx context.Context, savedSearch *types.SavedSearch) (savedQuery *types.SavedSearch, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SavedSearchStore) Update(ctx context.Context, savedSearch *types.SavedSearch) (savedQuery *types.SavedSearch, err error)\n```\n\nUpdate updates an existing saved search. \n\n🚨 SECURITY: This method does NOT verify the user's identity or that the user is an admin. It is the callers responsibility to ensure the user has proper permissions to perform the update. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SavedSearchStore.With",
                    "documentation": {
                      "identifier": "SavedSearchStore.With",
                      "newPage": false,
                      "searchKey": "database.SavedSearchStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SavedSearchStore) With(other basestore.ShareableStore) *SavedSearchStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SavedSearchStore) With(other basestore.ShareableStore) *SavedSearchStore\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#SearchContextsOrderByOption",
              "documentation": {
                "identifier": "SearchContextsOrderByOption",
                "newPage": false,
                "searchKey": "database.SearchContextsOrderByOption",
                "tags": [
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchContextsOrderByOption uint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchContextsOrderByOption uint8\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#SearchContextsStore",
              "documentation": {
                "identifier": "SearchContextsStore",
                "newPage": false,
                "searchKey": "database.SearchContextsStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchContextsStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchContextsStore struct {\n\t*basestore.Store\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#SearchContexts",
                    "documentation": {
                      "identifier": "SearchContexts",
                      "newPage": false,
                      "searchKey": "database.SearchContexts",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func SearchContexts(db dbutil.DB) *SearchContextsStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc SearchContexts(db dbutil.DB) *SearchContextsStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SearchContextsStore.CountSearchContexts",
                    "documentation": {
                      "identifier": "SearchContextsStore.CountSearchContexts",
                      "newPage": false,
                      "searchKey": "database.SearchContextsStore.CountSearchContexts",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SearchContextsStore) CountSearchContexts(ctx context.Context, opts ListSearchContextsOptions) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SearchContextsStore) CountSearchContexts(ctx context.Context, opts ListSearchContextsOptions) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SearchContextsStore.CreateSearchContextWithRepositoryRevisions",
                    "documentation": {
                      "identifier": "SearchContextsStore.CreateSearchContextWithRepositoryRevisions",
                      "newPage": false,
                      "searchKey": "database.SearchContextsStore.CreateSearchContextWithRepositoryRevisions",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SearchContextsStore) CreateSearchContextWithRepositoryRevisions(ctx context.Context, searchContext *types.SearchContext, repositoryRevisions []*types.SearchContextRepositoryRevisions) (createdSearchContext *types.SearchContext, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SearchContextsStore) CreateSearchContextWithRepositoryRevisions(ctx context.Context, searchContext *types.SearchContext, repositoryRevisions []*types.SearchContextRepositoryRevisions) (createdSearchContext *types.SearchContext, err error)\n```\n\n🚨 SECURITY: The caller must ensure that the actor is a site admin or has permission to create the search context. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SearchContextsStore.DeleteSearchContext",
                    "documentation": {
                      "identifier": "SearchContextsStore.DeleteSearchContext",
                      "newPage": false,
                      "searchKey": "database.SearchContextsStore.DeleteSearchContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SearchContextsStore) DeleteSearchContext(ctx context.Context, searchContextID int64) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SearchContextsStore) DeleteSearchContext(ctx context.Context, searchContextID int64) error\n```\n\n🚨 SECURITY: The caller must ensure that the actor is a site admin or has permission to delete the search context. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SearchContextsStore.GetAllRevisionsForRepo",
                    "documentation": {
                      "identifier": "SearchContextsStore.GetAllRevisionsForRepo",
                      "newPage": false,
                      "searchKey": "database.SearchContextsStore.GetAllRevisionsForRepo",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SearchContextsStore) GetAllRevisionsForRepo(ctx context.Context, repoID int32) ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SearchContextsStore) GetAllRevisionsForRepo(ctx context.Context, repoID int32) ([]string, error)\n```\n\nGetAllRevisionsForRepo returns the list of revisions that are used in search contexts for a given repo ID. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SearchContextsStore.GetSearchContext",
                    "documentation": {
                      "identifier": "SearchContextsStore.GetSearchContext",
                      "newPage": false,
                      "searchKey": "database.SearchContextsStore.GetSearchContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SearchContextsStore) GetSearchContext(ctx context.Context, opts GetSearchContextOptions) (*types.SearchContext, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SearchContextsStore) GetSearchContext(ctx context.Context, opts GetSearchContextOptions) (*types.SearchContext, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SearchContextsStore.GetSearchContextRepositoryRevisions",
                    "documentation": {
                      "identifier": "SearchContextsStore.GetSearchContextRepositoryRevisions",
                      "newPage": false,
                      "searchKey": "database.SearchContextsStore.GetSearchContextRepositoryRevisions",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SearchContextsStore) GetSearchContextRepositoryRevisions(ctx context.Context, searchContextID int64) ([]*types.SearchContextRepositoryRevisions, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SearchContextsStore) GetSearchContextRepositoryRevisions(ctx context.Context, searchContextID int64) ([]*types.SearchContextRepositoryRevisions, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SearchContextsStore.ListSearchContexts",
                    "documentation": {
                      "identifier": "SearchContextsStore.ListSearchContexts",
                      "newPage": false,
                      "searchKey": "database.SearchContextsStore.ListSearchContexts",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SearchContextsStore) ListSearchContexts(ctx context.Context, pageOpts ListSearchContextsPageOptions, opts ListSearchContextsOptions) ([]*types.SearchContext, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SearchContextsStore) ListSearchContexts(ctx context.Context, pageOpts ListSearchContextsPageOptions, opts ListSearchContextsOptions) ([]*types.SearchContext, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SearchContextsStore.SetSearchContextRepositoryRevisions",
                    "documentation": {
                      "identifier": "SearchContextsStore.SetSearchContextRepositoryRevisions",
                      "newPage": false,
                      "searchKey": "database.SearchContextsStore.SetSearchContextRepositoryRevisions",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SearchContextsStore) SetSearchContextRepositoryRevisions(ctx context.Context, searchContextID int64, repositoryRevisions []*types.SearchContextRepositoryRevisions) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SearchContextsStore) SetSearchContextRepositoryRevisions(ctx context.Context, searchContextID int64, repositoryRevisions []*types.SearchContextRepositoryRevisions) (err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SearchContextsStore.Transact",
                    "documentation": {
                      "identifier": "SearchContextsStore.Transact",
                      "newPage": false,
                      "searchKey": "database.SearchContextsStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SearchContextsStore) Transact(ctx context.Context) (*SearchContextsStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SearchContextsStore) Transact(ctx context.Context) (*SearchContextsStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SearchContextsStore.UpdateSearchContextWithRepositoryRevisions",
                    "documentation": {
                      "identifier": "SearchContextsStore.UpdateSearchContextWithRepositoryRevisions",
                      "newPage": false,
                      "searchKey": "database.SearchContextsStore.UpdateSearchContextWithRepositoryRevisions",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SearchContextsStore) UpdateSearchContextWithRepositoryRevisions(ctx context.Context, searchContext *types.SearchContext, repositoryRevisions []*types.SearchContextRepositoryRevisions) (_ *types.SearchContext, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SearchContextsStore) UpdateSearchContextWithRepositoryRevisions(ctx context.Context, searchContext *types.SearchContext, repositoryRevisions []*types.SearchContextRepositoryRevisions) (_ *types.SearchContext, err error)\n```\n\n🚨 SECURITY: The caller must ensure that the actor is a site admin or has permission to update the search context. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SearchContextsStore.createSearchContext",
                    "documentation": {
                      "identifier": "SearchContextsStore.createSearchContext",
                      "newPage": false,
                      "searchKey": "database.SearchContextsStore.createSearchContext",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SearchContextsStore) createSearchContext(ctx context.Context, searchContext *types.SearchContext) (*types.SearchContext, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SearchContextsStore) createSearchContext(ctx context.Context, searchContext *types.SearchContext) (*types.SearchContext, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SearchContextsStore.listSearchContexts",
                    "documentation": {
                      "identifier": "SearchContextsStore.listSearchContexts",
                      "newPage": false,
                      "searchKey": "database.SearchContextsStore.listSearchContexts",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SearchContextsStore) listSearchContexts(ctx context.Context, cond *sqlf.Query, orderBy *sqlf.Query, limit int32, offset int32) ([]*types.SearchContext, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SearchContextsStore) listSearchContexts(ctx context.Context, cond *sqlf.Query, orderBy *sqlf.Query, limit int32, offset int32) ([]*types.SearchContext, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SearchContextsStore.updateSearchContext",
                    "documentation": {
                      "identifier": "SearchContextsStore.updateSearchContext",
                      "newPage": false,
                      "searchKey": "database.SearchContextsStore.updateSearchContext",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SearchContextsStore) updateSearchContext(ctx context.Context, searchContext *types.SearchContext) (*types.SearchContext, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SearchContextsStore) updateSearchContext(ctx context.Context, searchContext *types.SearchContext) (*types.SearchContext, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#SecurityEvent",
              "documentation": {
                "identifier": "SecurityEvent",
                "newPage": false,
                "searchKey": "database.SecurityEvent",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SecurityEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SecurityEvent struct {\n\tName            string\n\tURL             string\n\tUserID          uint32\n\tAnonymousUserID string\n\tArgument        json.RawMessage\n\tSource          string\n\tTimestamp       time.Time\n}\n```\n\nSecurityEvent contains information needed for logging a security-relevant event. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#SecurityEventLogStore",
              "documentation": {
                "identifier": "SecurityEventLogStore",
                "newPage": false,
                "searchKey": "database.SecurityEventLogStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SecurityEventLogStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SecurityEventLogStore struct {\n\t*basestore.Store\n}\n```\n\nA SecurityEventLogStore provides persistence for security events. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#SecurityEventLogs",
                    "documentation": {
                      "identifier": "SecurityEventLogs",
                      "newPage": false,
                      "searchKey": "database.SecurityEventLogs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func SecurityEventLogs(db dbutil.DB) *SecurityEventLogStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc SecurityEventLogs(db dbutil.DB) *SecurityEventLogStore\n```\n\nSecurityEventLogs instantiates and returns a new SecurityEventLogStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SecurityEventLogStore.Insert",
                    "documentation": {
                      "identifier": "SecurityEventLogStore.Insert",
                      "newPage": false,
                      "searchKey": "database.SecurityEventLogStore.Insert",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SecurityEventLogStore) Insert(ctx context.Context, e *SecurityEvent) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SecurityEventLogStore) Insert(ctx context.Context, e *SecurityEvent) error\n```\n\nInsert adds a new security event to the store. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#SettingStore",
              "documentation": {
                "identifier": "SettingStore",
                "newPage": false,
                "searchKey": "database.SettingStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SettingStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SettingStore struct {\n\t*basestore.Store\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#Settings",
                    "documentation": {
                      "identifier": "Settings",
                      "newPage": false,
                      "searchKey": "database.Settings",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Settings(db dbutil.DB) *SettingStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Settings(db dbutil.DB) *SettingStore\n```\n\nSettings instantiates and returns a new SettingStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SettingsWith",
                    "documentation": {
                      "identifier": "SettingsWith",
                      "newPage": false,
                      "searchKey": "database.SettingsWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func SettingsWith(other basestore.ShareableStore) *SettingStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc SettingsWith(other basestore.ShareableStore) *SettingStore\n```\n\nNewSettingStoreWithDB instantiates and returns a new SettingStore using the other store handle. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SettingStore.CreateIfUpToDate",
                    "documentation": {
                      "identifier": "SettingStore.CreateIfUpToDate",
                      "newPage": false,
                      "searchKey": "database.SettingStore.CreateIfUpToDate",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *SettingStore) CreateIfUpToDate(ctx context.Context, subject api.SettingsSubject, lastID *int32, authorUserID *int32, contents string) (latestSetting *api.Settings, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *SettingStore) CreateIfUpToDate(ctx context.Context, subject api.SettingsSubject, lastID *int32, authorUserID *int32, contents string) (latestSetting *api.Settings, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SettingStore.GetLastestSchemaSettings",
                    "documentation": {
                      "identifier": "SettingStore.GetLastestSchemaSettings",
                      "newPage": false,
                      "searchKey": "database.SettingStore.GetLastestSchemaSettings",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *SettingStore) GetLastestSchemaSettings(ctx context.Context, subject api.SettingsSubject) (*schema.Settings, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *SettingStore) GetLastestSchemaSettings(ctx context.Context, subject api.SettingsSubject) (*schema.Settings, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SettingStore.GetLatest",
                    "documentation": {
                      "identifier": "SettingStore.GetLatest",
                      "newPage": false,
                      "searchKey": "database.SettingStore.GetLatest",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *SettingStore) GetLatest(ctx context.Context, subject api.SettingsSubject) (*api.Settings, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *SettingStore) GetLatest(ctx context.Context, subject api.SettingsSubject) (*api.Settings, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SettingStore.ListAll",
                    "documentation": {
                      "identifier": "SettingStore.ListAll",
                      "newPage": false,
                      "searchKey": "database.SettingStore.ListAll",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *SettingStore) ListAll(ctx context.Context, impreciseSubstring string) (_ []*api.Settings, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *SettingStore) ListAll(ctx context.Context, impreciseSubstring string) (_ []*api.Settings, err error)\n```\n\nListAll lists ALL settings (across all users, orgs, etc). \n\nIf impreciseSubstring is given, only settings whose raw JSONC string contains the substring are returned. This is only intended for use by migration code that needs to update settings, where limiting to matching settings can significantly narrow the amount of work necessary. For example, a migration to rename a settings property `foo` to `bar` would narrow the search space by only processing settings that contain the string `foo` (which will yield false positives, but that's acceptable because the migration shouldn't modify those results anyway). \n\n🚨 SECURITY: This method does NOT verify the user is an admin. The caller is responsible for ensuring this or that the response never makes it to a user. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SettingStore.Transact",
                    "documentation": {
                      "identifier": "SettingStore.Transact",
                      "newPage": false,
                      "searchKey": "database.SettingStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SettingStore) Transact(ctx context.Context) (*SettingStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SettingStore) Transact(ctx context.Context) (*SettingStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SettingStore.With",
                    "documentation": {
                      "identifier": "SettingStore.With",
                      "newPage": false,
                      "searchKey": "database.SettingStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SettingStore) With(other basestore.ShareableStore) *SettingStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SettingStore) With(other basestore.ShareableStore) *SettingStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SettingStore.getLatest",
                    "documentation": {
                      "identifier": "SettingStore.getLatest",
                      "newPage": false,
                      "searchKey": "database.SettingStore.getLatest",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *SettingStore) getLatest(ctx context.Context, subject api.SettingsSubject) (*api.Settings, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *SettingStore) getLatest(ctx context.Context, subject api.SettingsSubject) (*api.Settings, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SettingStore.parseQueryRows",
                    "documentation": {
                      "identifier": "SettingStore.parseQueryRows",
                      "newPage": false,
                      "searchKey": "database.SettingStore.parseQueryRows",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *SettingStore) parseQueryRows(ctx context.Context, rows *sql.Rows) ([]*api.Settings, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *SettingStore) parseQueryRows(ctx context.Context, rows *sql.Rows) ([]*api.Settings, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#SurveyResponseListOptions",
              "documentation": {
                "identifier": "SurveyResponseListOptions",
                "newPage": false,
                "searchKey": "database.SurveyResponseListOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SurveyResponseListOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SurveyResponseListOptions struct {\n\t*LimitOffset\n}\n```\n\nSurveyResponseListOptions specifies the options for listing survey responses. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#SurveyResponseStore",
              "documentation": {
                "identifier": "SurveyResponseStore",
                "newPage": false,
                "searchKey": "database.SurveyResponseStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SurveyResponseStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SurveyResponseStore struct {\n\t*basestore.Store\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#SurveyResponses",
                    "documentation": {
                      "identifier": "SurveyResponses",
                      "newPage": false,
                      "searchKey": "database.SurveyResponses",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func SurveyResponses(db dbutil.DB) *SurveyResponseStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc SurveyResponses(db dbutil.DB) *SurveyResponseStore\n```\n\nSurveyResponses instantiates and returns a new SurveyResponseStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SurveyResponsesWith",
                    "documentation": {
                      "identifier": "SurveyResponsesWith",
                      "newPage": false,
                      "searchKey": "database.SurveyResponsesWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func SurveyResponsesWith(other basestore.ShareableStore) *SurveyResponseStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc SurveyResponsesWith(other basestore.ShareableStore) *SurveyResponseStore\n```\n\nNewSurveyResponseStoreWithDB instantiates and returns a new SurveyResponseStore using the other store handle. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SurveyResponseStore.Count",
                    "documentation": {
                      "identifier": "SurveyResponseStore.Count",
                      "newPage": false,
                      "searchKey": "database.SurveyResponseStore.Count",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SurveyResponseStore) Count(ctx context.Context) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SurveyResponseStore) Count(ctx context.Context) (int, error)\n```\n\nCount returns the count of all survey responses. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SurveyResponseStore.Create",
                    "documentation": {
                      "identifier": "SurveyResponseStore.Create",
                      "newPage": false,
                      "searchKey": "database.SurveyResponseStore.Create",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SurveyResponseStore) Create(ctx context.Context, userID *int32, email *string, score int, reason *string, better *string) (id int64, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SurveyResponseStore) Create(ctx context.Context, userID *int32, email *string, score int, reason *string, better *string) (id int64, err error)\n```\n\nCreate creates a survey response. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SurveyResponseStore.GetAll",
                    "documentation": {
                      "identifier": "SurveyResponseStore.GetAll",
                      "newPage": false,
                      "searchKey": "database.SurveyResponseStore.GetAll",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SurveyResponseStore) GetAll(ctx context.Context) ([]*types.SurveyResponse, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SurveyResponseStore) GetAll(ctx context.Context) ([]*types.SurveyResponse, error)\n```\n\nGetAll gets all survey responses. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SurveyResponseStore.GetByUserID",
                    "documentation": {
                      "identifier": "SurveyResponseStore.GetByUserID",
                      "newPage": false,
                      "searchKey": "database.SurveyResponseStore.GetByUserID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SurveyResponseStore) GetByUserID(ctx context.Context, userID int32) ([]*types.SurveyResponse, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SurveyResponseStore) GetByUserID(ctx context.Context, userID int32) ([]*types.SurveyResponse, error)\n```\n\nGetByUserID gets all survey responses by a given user. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SurveyResponseStore.Last30DaysAverageScore",
                    "documentation": {
                      "identifier": "SurveyResponseStore.Last30DaysAverageScore",
                      "newPage": false,
                      "searchKey": "database.SurveyResponseStore.Last30DaysAverageScore",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SurveyResponseStore) Last30DaysAverageScore(ctx context.Context) (float64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SurveyResponseStore) Last30DaysAverageScore(ctx context.Context) (float64, error)\n```\n\nLast30DaysAverageScore returns the average score for all surveys submitted in the last 30 days. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SurveyResponseStore.Last30DaysCount",
                    "documentation": {
                      "identifier": "SurveyResponseStore.Last30DaysCount",
                      "newPage": false,
                      "searchKey": "database.SurveyResponseStore.Last30DaysCount",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SurveyResponseStore) Last30DaysCount(ctx context.Context) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SurveyResponseStore) Last30DaysCount(ctx context.Context) (int, error)\n```\n\nLast30Count returns the count of surveys submitted in the last 30 days. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SurveyResponseStore.Last30DaysNetPromoterScore",
                    "documentation": {
                      "identifier": "SurveyResponseStore.Last30DaysNetPromoterScore",
                      "newPage": false,
                      "searchKey": "database.SurveyResponseStore.Last30DaysNetPromoterScore",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SurveyResponseStore) Last30DaysNetPromoterScore(ctx context.Context) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SurveyResponseStore) Last30DaysNetPromoterScore(ctx context.Context) (int, error)\n```\n\nLast30DaysNPS returns the net promoter score for all surveys submitted in the last 30 days. This is calculated as 100*((% of responses that are >= 9) - (% of responses that are <= 6)) \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SurveyResponseStore.Transact",
                    "documentation": {
                      "identifier": "SurveyResponseStore.Transact",
                      "newPage": false,
                      "searchKey": "database.SurveyResponseStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SurveyResponseStore) Transact(ctx context.Context) (*SurveyResponseStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SurveyResponseStore) Transact(ctx context.Context) (*SurveyResponseStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SurveyResponseStore.With",
                    "documentation": {
                      "identifier": "SurveyResponseStore.With",
                      "newPage": false,
                      "searchKey": "database.SurveyResponseStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SurveyResponseStore) With(other basestore.ShareableStore) *SurveyResponseStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SurveyResponseStore) With(other basestore.ShareableStore) *SurveyResponseStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#SurveyResponseStore.getBySQL",
                    "documentation": {
                      "identifier": "SurveyResponseStore.getBySQL",
                      "newPage": false,
                      "searchKey": "database.SurveyResponseStore.getBySQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SurveyResponseStore) getBySQL(ctx context.Context, query string, args ...interface{}) ([]*types.SurveyResponse, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SurveyResponseStore) getBySQL(ctx context.Context, query string, args ...interface{}) ([]*types.SurveyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#UsageValue",
              "documentation": {
                "identifier": "UsageValue",
                "newPage": false,
                "searchKey": "database.UsageValue",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UsageValue struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UsageValue struct {\n\tStart time.Time\n\tCount int\n}\n```\n\nUsageValue is a single count of usage for a time period starting on a given date. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#UserCredential",
              "documentation": {
                "identifier": "UserCredential",
                "newPage": false,
                "searchKey": "database.UserCredential",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserCredential struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserCredential struct {\n\tID                  int64\n\tDomain              string\n\tUserID              int32\n\tExternalServiceType string\n\tExternalServiceID   string\n\tEncryptedCredential []byte\n\tEncryptionKeyID     string\n\tCreatedAt           time.Time\n\tUpdatedAt           time.Time\n\n\t// TODO(batch-change-credential-encryption): On or after Sourcegraph 3.30,\n\t// we should remove the credential and SSHMigrationApplied fields.\n\tSSHMigrationApplied bool\n\n\tkey encryption.Key\n}\n```\n\nUserCredential represents a row in the `user_credentials` table. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#UserCredential.Authenticator",
                    "documentation": {
                      "identifier": "UserCredential.Authenticator",
                      "newPage": false,
                      "searchKey": "database.UserCredential.Authenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (uc *UserCredential) Authenticator(ctx context.Context) (auth.Authenticator, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (uc *UserCredential) Authenticator(ctx context.Context) (auth.Authenticator, error)\n```\n\nAuthenticator decrypts and creates the authenticator associated with the user credential. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserCredential.SetAuthenticator",
                    "documentation": {
                      "identifier": "UserCredential.SetAuthenticator",
                      "newPage": false,
                      "searchKey": "database.UserCredential.SetAuthenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (uc *UserCredential) SetAuthenticator(ctx context.Context, a auth.Authenticator) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (uc *UserCredential) SetAuthenticator(ctx context.Context, a auth.Authenticator) error\n```\n\nSetAuthenticator encrypts and sets the authenticator within the user credential. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#UserCredentialNotFoundErr",
              "documentation": {
                "identifier": "UserCredentialNotFoundErr",
                "newPage": false,
                "searchKey": "database.UserCredentialNotFoundErr",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserCredentialNotFoundErr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserCredentialNotFoundErr struct{ args []interface{} }\n```\n\nUserCredentialNotFoundErr is returned when a credential cannot be found from its ID or scope. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#UserCredentialNotFoundErr.Error",
                    "documentation": {
                      "identifier": "UserCredentialNotFoundErr.Error",
                      "newPage": false,
                      "searchKey": "database.UserCredentialNotFoundErr.Error",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err UserCredentialNotFoundErr) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err UserCredentialNotFoundErr) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserCredentialNotFoundErr.NotFound",
                    "documentation": {
                      "identifier": "UserCredentialNotFoundErr.NotFound",
                      "newPage": false,
                      "searchKey": "database.UserCredentialNotFoundErr.NotFound",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (UserCredentialNotFoundErr) NotFound() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (UserCredentialNotFoundErr) NotFound() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#UserCredentialScope",
              "documentation": {
                "identifier": "UserCredentialScope",
                "newPage": false,
                "searchKey": "database.UserCredentialScope",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserCredentialScope struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserCredentialScope struct {\n\tDomain              string\n\tUserID              int32\n\tExternalServiceType string\n\tExternalServiceID   string\n}\n```\n\nUserCredentialScope represents the unique scope for a credential. Only one credential may exist within a scope. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#UserCredentialsListOpts",
              "documentation": {
                "identifier": "UserCredentialsListOpts",
                "newPage": false,
                "searchKey": "database.UserCredentialsListOpts",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserCredentialsListOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserCredentialsListOpts struct {\n\t*LimitOffset\n\tScope     UserCredentialScope\n\tForUpdate bool\n\n\t// TODO(batch-change-credential-encryption): this should be removed once the\n\t// OOB SSH migration is removed.\n\tSSHMigrationApplied *bool\n\n\t// TODO(batch-change-credential-encryption): this should be removed once the\n\t// OOB user credential migration is removed.\n\tRequiresMigration bool\n\n\t// TODO(batch-change-credential-encryption): this should be removed once the\n\t// OOB user credential migration is removed.\n\tOnlyEncrypted bool\n}\n```\n\nUserCredentialsListOpts provide the options when listing credentials. At least one field in Scope must be set. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#UserCredentialsListOpts.sql",
                    "documentation": {
                      "identifier": "UserCredentialsListOpts.sql",
                      "newPage": false,
                      "searchKey": "database.UserCredentialsListOpts.sql",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (opts *UserCredentialsListOpts) sql() *sqlf.Query"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (opts *UserCredentialsListOpts) sql() *sqlf.Query\n```\n\nsql overrides LimitOffset.SQL() to give a LIMIT clause with one extra value so we can populate the next cursor. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#UserCredentialsStore",
              "documentation": {
                "identifier": "UserCredentialsStore",
                "newPage": false,
                "searchKey": "database.UserCredentialsStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserCredentialsStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserCredentialsStore struct {\n\t*basestore.Store\n\tkey encryption.Key\n}\n```\n\nUserCredentialsStore provides access to the `user_credentials` table. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#UserCredentials",
                    "documentation": {
                      "identifier": "UserCredentials",
                      "newPage": false,
                      "searchKey": "database.UserCredentials",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func UserCredentials(db dbutil.DB, key encryption.Key) *UserCredentialsStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc UserCredentials(db dbutil.DB, key encryption.Key) *UserCredentialsStore\n```\n\nUserCredentials instantiates and returns a new UserCredentialsStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserCredentialsWith",
                    "documentation": {
                      "identifier": "UserCredentialsWith",
                      "newPage": false,
                      "searchKey": "database.UserCredentialsWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func UserCredentialsWith(other basestore.ShareableStore, key encryption.Key) *UserCredentialsStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc UserCredentialsWith(other basestore.ShareableStore, key encryption.Key) *UserCredentialsStore\n```\n\nUserCredentialsWith instantiates and returns a new UserCredentialsStore using the other store handle. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserCredentialsStore.Create",
                    "documentation": {
                      "identifier": "UserCredentialsStore.Create",
                      "newPage": false,
                      "searchKey": "database.UserCredentialsStore.Create",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserCredentialsStore) Create(ctx context.Context, scope UserCredentialScope, credential auth.Authenticator) (*UserCredential, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserCredentialsStore) Create(ctx context.Context, scope UserCredentialScope, credential auth.Authenticator) (*UserCredential, error)\n```\n\nCreate creates a new user credential based on the given scope and authenticator. If the scope already has a credential, an error will be returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserCredentialsStore.Delete",
                    "documentation": {
                      "identifier": "UserCredentialsStore.Delete",
                      "newPage": false,
                      "searchKey": "database.UserCredentialsStore.Delete",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserCredentialsStore) Delete(ctx context.Context, id int64) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserCredentialsStore) Delete(ctx context.Context, id int64) error\n```\n\nDelete deletes the given user credential. Note that there is no concept of a soft delete with user credentials: once deleted, the relevant records are _gone_, so that we don't hold any sensitive data unexpectedly. 💀 \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserCredentialsStore.GetByID",
                    "documentation": {
                      "identifier": "UserCredentialsStore.GetByID",
                      "newPage": false,
                      "searchKey": "database.UserCredentialsStore.GetByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserCredentialsStore) GetByID(ctx context.Context, id int64) (*UserCredential, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserCredentialsStore) GetByID(ctx context.Context, id int64) (*UserCredential, error)\n```\n\nGetByID returns the user credential matching the given ID, or UserCredentialNotFoundErr if no such credential exists. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserCredentialsStore.GetByScope",
                    "documentation": {
                      "identifier": "UserCredentialsStore.GetByScope",
                      "newPage": false,
                      "searchKey": "database.UserCredentialsStore.GetByScope",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserCredentialsStore) GetByScope(ctx context.Context, scope UserCredentialScope) (*UserCredential, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserCredentialsStore) GetByScope(ctx context.Context, scope UserCredentialScope) (*UserCredential, error)\n```\n\nGetByScope returns the user credential matching the given scope, or UserCredentialNotFoundErr if no such credential exists. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserCredentialsStore.List",
                    "documentation": {
                      "identifier": "UserCredentialsStore.List",
                      "newPage": false,
                      "searchKey": "database.UserCredentialsStore.List",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserCredentialsStore) List(ctx context.Context, opts UserCredentialsListOpts) ([]*UserCredential, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserCredentialsStore) List(ctx context.Context, opts UserCredentialsListOpts) ([]*UserCredential, int, error)\n```\n\nList returns all user credentials matching the given options. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserCredentialsStore.Transact",
                    "documentation": {
                      "identifier": "UserCredentialsStore.Transact",
                      "newPage": false,
                      "searchKey": "database.UserCredentialsStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserCredentialsStore) Transact(ctx context.Context) (*UserCredentialsStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserCredentialsStore) Transact(ctx context.Context) (*UserCredentialsStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserCredentialsStore.Update",
                    "documentation": {
                      "identifier": "UserCredentialsStore.Update",
                      "newPage": false,
                      "searchKey": "database.UserCredentialsStore.Update",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserCredentialsStore) Update(ctx context.Context, credential *UserCredential) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserCredentialsStore) Update(ctx context.Context, credential *UserCredential) error\n```\n\nUpdate updates a user credential in the database. If the credential cannot be found, an error is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserCredentialsStore.With",
                    "documentation": {
                      "identifier": "UserCredentialsStore.With",
                      "newPage": false,
                      "searchKey": "database.UserCredentialsStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserCredentialsStore) With(other basestore.ShareableStore) *UserCredentialsStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserCredentialsStore) With(other basestore.ShareableStore) *UserCredentialsStore\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#UserEmail",
              "documentation": {
                "identifier": "UserEmail",
                "newPage": false,
                "searchKey": "database.UserEmail",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserEmail struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserEmail struct {\n\tUserID                 int32\n\tEmail                  string\n\tCreatedAt              time.Time\n\tVerificationCode       *string\n\tVerifiedAt             *time.Time\n\tLastVerificationSentAt *time.Time\n\tPrimary                bool\n}\n```\n\nUserEmail represents a row in the `user_emails` table. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#UserEmail.NeedsVerificationCoolDown",
                    "documentation": {
                      "identifier": "UserEmail.NeedsVerificationCoolDown",
                      "newPage": false,
                      "searchKey": "database.UserEmail.NeedsVerificationCoolDown",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (email *UserEmail) NeedsVerificationCoolDown() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (email *UserEmail) NeedsVerificationCoolDown() bool\n```\n\nNeedsVerificationCoolDown returns true if the verification cooled down time is behind current time. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#UserEmailsListOptions",
              "documentation": {
                "identifier": "UserEmailsListOptions",
                "newPage": false,
                "searchKey": "database.UserEmailsListOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserEmailsListOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserEmailsListOptions struct {\n\t// UserID specifies the id of the user for listing emails.\n\tUserID int32\n\t// OnlyVerified excludes unverified emails from the list.\n\tOnlyVerified bool\n}\n```\n\nUserEmailsListOptions specifies the options for listing user emails. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#UserEmailsStore",
              "documentation": {
                "identifier": "UserEmailsStore",
                "newPage": false,
                "searchKey": "database.UserEmailsStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserEmailsStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserEmailsStore struct {\n\t*basestore.Store\n\n\tonce sync.Once\n}\n```\n\nUserEmailsStore provides access to the `user_emails` table. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#UserEmails",
                    "documentation": {
                      "identifier": "UserEmails",
                      "newPage": false,
                      "searchKey": "database.UserEmails",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func UserEmails(db dbutil.DB) *UserEmailsStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc UserEmails(db dbutil.DB) *UserEmailsStore\n```\n\nUserEmails instantiates and returns a new UserEmailsStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserEmailsWith",
                    "documentation": {
                      "identifier": "UserEmailsWith",
                      "newPage": false,
                      "searchKey": "database.UserEmailsWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func UserEmailsWith(other basestore.ShareableStore) *UserEmailsStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc UserEmailsWith(other basestore.ShareableStore) *UserEmailsStore\n```\n\nUserEmailsWith instantiates and returns a new UserEmailsStore using the other store handle. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserEmailsStore.Add",
                    "documentation": {
                      "identifier": "UserEmailsStore.Add",
                      "newPage": false,
                      "searchKey": "database.UserEmailsStore.Add",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserEmailsStore) Add(ctx context.Context, userID int32, email string, verificationCode *string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserEmailsStore) Add(ctx context.Context, userID int32, email string, verificationCode *string) error\n```\n\nAdd adds new user email. When added, it is always unverified. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserEmailsStore.Get",
                    "documentation": {
                      "identifier": "UserEmailsStore.Get",
                      "newPage": false,
                      "searchKey": "database.UserEmailsStore.Get",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserEmailsStore) Get(ctx context.Context, userID int32, email string) (emailCanonicalCase string, verified bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserEmailsStore) Get(ctx context.Context, userID int32, email string) (emailCanonicalCase string, verified bool, err error)\n```\n\nGet gets information about the user's associated email address. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserEmailsStore.GetInitialSiteAdminEmail",
                    "documentation": {
                      "identifier": "UserEmailsStore.GetInitialSiteAdminEmail",
                      "newPage": false,
                      "searchKey": "database.UserEmailsStore.GetInitialSiteAdminEmail",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserEmailsStore) GetInitialSiteAdminEmail(ctx context.Context) (email string, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserEmailsStore) GetInitialSiteAdminEmail(ctx context.Context) (email string, err error)\n```\n\nGetInitialSiteAdminEmail returns a best guess of the email of the initial Sourcegraph installer/site admin. Because the initial site admin's email isn't marked, this returns the email of the active site admin with the lowest user ID. \n\nIf the site has not yet been initialized, returns an empty string. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserEmailsStore.GetLatestVerificationSentEmail",
                    "documentation": {
                      "identifier": "UserEmailsStore.GetLatestVerificationSentEmail",
                      "newPage": false,
                      "searchKey": "database.UserEmailsStore.GetLatestVerificationSentEmail",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserEmailsStore) GetLatestVerificationSentEmail(ctx context.Context, email string) (*UserEmail, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserEmailsStore) GetLatestVerificationSentEmail(ctx context.Context, email string) (*UserEmail, error)\n```\n\nGetLatestVerificationSentEmail returns the email with the lastest time of \"last_verification_sent_at\" column, it excludes rows with \"last_verification_sent_at IS NULL\". \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserEmailsStore.GetPrimaryEmail",
                    "documentation": {
                      "identifier": "UserEmailsStore.GetPrimaryEmail",
                      "newPage": false,
                      "searchKey": "database.UserEmailsStore.GetPrimaryEmail",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserEmailsStore) GetPrimaryEmail(ctx context.Context, id int32) (email string, verified bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserEmailsStore) GetPrimaryEmail(ctx context.Context, id int32) (email string, verified bool, err error)\n```\n\nGetPrimaryEmail gets the oldest email associated with the user, preferring a verified email to an unverified email. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserEmailsStore.GetVerifiedEmails",
                    "documentation": {
                      "identifier": "UserEmailsStore.GetVerifiedEmails",
                      "newPage": false,
                      "searchKey": "database.UserEmailsStore.GetVerifiedEmails",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserEmailsStore) GetVerifiedEmails(ctx context.Context, emails ...string) ([]*UserEmail, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserEmailsStore) GetVerifiedEmails(ctx context.Context, emails ...string) ([]*UserEmail, error)\n```\n\nGetVerifiedEmails returns a list of verified emails from the candidate list. Some emails are excluded from the results list because of unverified or simply don't exist. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserEmailsStore.ListByUser",
                    "documentation": {
                      "identifier": "UserEmailsStore.ListByUser",
                      "newPage": false,
                      "searchKey": "database.UserEmailsStore.ListByUser",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserEmailsStore) ListByUser(ctx context.Context, opt UserEmailsListOptions) ([]*UserEmail, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserEmailsStore) ListByUser(ctx context.Context, opt UserEmailsListOptions) ([]*UserEmail, error)\n```\n\nListByUser returns a list of emails that are associated to the given user. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserEmailsStore.Remove",
                    "documentation": {
                      "identifier": "UserEmailsStore.Remove",
                      "newPage": false,
                      "searchKey": "database.UserEmailsStore.Remove",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserEmailsStore) Remove(ctx context.Context, userID int32, email string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserEmailsStore) Remove(ctx context.Context, userID int32, email string) error\n```\n\nRemove removes a user email. It returns an error if there is no such email associated with the user or the email is the user's primary address \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserEmailsStore.SetLastVerification",
                    "documentation": {
                      "identifier": "UserEmailsStore.SetLastVerification",
                      "newPage": false,
                      "searchKey": "database.UserEmailsStore.SetLastVerification",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserEmailsStore) SetLastVerification(ctx context.Context, userID int32, email, code string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserEmailsStore) SetLastVerification(ctx context.Context, userID int32, email, code string) error\n```\n\nSetLastVerification sets the \"last_verification_sent_at\" column to now() and updates the verification code for given email of the user. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserEmailsStore.SetPrimaryEmail",
                    "documentation": {
                      "identifier": "UserEmailsStore.SetPrimaryEmail",
                      "newPage": false,
                      "searchKey": "database.UserEmailsStore.SetPrimaryEmail",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserEmailsStore) SetPrimaryEmail(ctx context.Context, userID int32, email string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserEmailsStore) SetPrimaryEmail(ctx context.Context, userID int32, email string) error\n```\n\nSetPrimaryEmail sets the primary email for a user. The address must be verified. All other addresses for the user will be set as not primary. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserEmailsStore.SetVerified",
                    "documentation": {
                      "identifier": "UserEmailsStore.SetVerified",
                      "newPage": false,
                      "searchKey": "database.UserEmailsStore.SetVerified",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserEmailsStore) SetVerified(ctx context.Context, userID int32, email string, verified bool) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserEmailsStore) SetVerified(ctx context.Context, userID int32, email string, verified bool) error\n```\n\nSetVerified bypasses the normal email verification code process and manually sets the verified status for an email. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserEmailsStore.Transact",
                    "documentation": {
                      "identifier": "UserEmailsStore.Transact",
                      "newPage": false,
                      "searchKey": "database.UserEmailsStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserEmailsStore) Transact(ctx context.Context) (*UserEmailsStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserEmailsStore) Transact(ctx context.Context) (*UserEmailsStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserEmailsStore.Verify",
                    "documentation": {
                      "identifier": "UserEmailsStore.Verify",
                      "newPage": false,
                      "searchKey": "database.UserEmailsStore.Verify",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserEmailsStore) Verify(ctx context.Context, userID int32, email, code string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserEmailsStore) Verify(ctx context.Context, userID int32, email, code string) (bool, error)\n```\n\nVerify verifies the user's email address given the email verification code. If the code is not correct (not the one originally used when creating the user or adding the user email), then it returns false. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserEmailsStore.With",
                    "documentation": {
                      "identifier": "UserEmailsStore.With",
                      "newPage": false,
                      "searchKey": "database.UserEmailsStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserEmailsStore) With(other basestore.ShareableStore) *UserEmailsStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserEmailsStore) With(other basestore.ShareableStore) *UserEmailsStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserEmailsStore.ensureStore",
                    "documentation": {
                      "identifier": "UserEmailsStore.ensureStore",
                      "newPage": false,
                      "searchKey": "database.UserEmailsStore.ensureStore",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserEmailsStore) ensureStore()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserEmailsStore) ensureStore()\n```\n\nensureStore instantiates a basestore.Store if necessary, using the dbconn.Global handle. This function ensures access to dbconn happens after the rest of the code or tests have initialized it. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserEmailsStore.getBySQL",
                    "documentation": {
                      "identifier": "UserEmailsStore.getBySQL",
                      "newPage": false,
                      "searchKey": "database.UserEmailsStore.getBySQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserEmailsStore) getBySQL(ctx context.Context, query string, args ...interface{}) ([]*UserEmail, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserEmailsStore) getBySQL(ctx context.Context, query string, args ...interface{}) ([]*UserEmail, error)\n```\n\ngetBySQL returns user emails matching the SQL query, if any exist. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#UserExternalAccountsStore",
              "documentation": {
                "identifier": "UserExternalAccountsStore",
                "newPage": false,
                "searchKey": "database.UserExternalAccountsStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserExternalAccountsStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserExternalAccountsStore struct {\n\t*basestore.Store\n\tonce sync.Once\n\n\tkey encryption.Key\n}\n```\n\nUserExternalAccountsStore provides access to the `user_external_accounts` table. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#ExternalAccounts",
                    "documentation": {
                      "identifier": "ExternalAccounts",
                      "newPage": false,
                      "searchKey": "database.ExternalAccounts",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func ExternalAccounts(db dbutil.DB) *UserExternalAccountsStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc ExternalAccounts(db dbutil.DB) *UserExternalAccountsStore\n```\n\nExternalAccounts instantiates and returns a new UserExternalAccountsStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#ExternalAccountsWith",
                    "documentation": {
                      "identifier": "ExternalAccountsWith",
                      "newPage": false,
                      "searchKey": "database.ExternalAccountsWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func ExternalAccountsWith(other basestore.ShareableStore) *UserExternalAccountsStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc ExternalAccountsWith(other basestore.ShareableStore) *UserExternalAccountsStore\n```\n\nExternalAccountsWith instantiates and returns a new UserExternalAccountsStore using the other store handle. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserExternalAccountsStore.AssociateUserAndSave",
                    "documentation": {
                      "identifier": "UserExternalAccountsStore.AssociateUserAndSave",
                      "newPage": false,
                      "searchKey": "database.UserExternalAccountsStore.AssociateUserAndSave",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserExternalAccountsStore) AssociateUserAndSave(ctx context.Context, userID int32, spec extsvc.AccountSpec, data extsvc.AccountData) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserExternalAccountsStore) AssociateUserAndSave(ctx context.Context, userID int32, spec extsvc.AccountSpec, data extsvc.AccountData) (err error)\n```\n\nAssociateUserAndSave is used for linking a new, additional external account with an existing Sourcegraph account. \n\nIt creates a user external account and associates it with the specified user. If the external account already exists and is associated with: \n\n- the same user: it updates the data and returns a nil error; or - a different user: it performs no update and returns a non-nil error \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserExternalAccountsStore.Count",
                    "documentation": {
                      "identifier": "UserExternalAccountsStore.Count",
                      "newPage": false,
                      "searchKey": "database.UserExternalAccountsStore.Count",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserExternalAccountsStore) Count(ctx context.Context, opt ExternalAccountsListOptions) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserExternalAccountsStore) Count(ctx context.Context, opt ExternalAccountsListOptions) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserExternalAccountsStore.CreateUserAndSave",
                    "documentation": {
                      "identifier": "UserExternalAccountsStore.CreateUserAndSave",
                      "newPage": false,
                      "searchKey": "database.UserExternalAccountsStore.CreateUserAndSave",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserExternalAccountsStore) CreateUserAndSave(ctx context.Context, newUser NewUser, spec extsvc.AccountSpec, data extsvc.AccountData) (createdUserID int32, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserExternalAccountsStore) CreateUserAndSave(ctx context.Context, newUser NewUser, spec extsvc.AccountSpec, data extsvc.AccountData) (createdUserID int32, err error)\n```\n\nCreateUserAndSave is used to create a new Sourcegraph user account from an external account (e.g., \"signup from SAML\"). \n\nIt creates a new user and associates it with the specified external account. If the user to create already exists, it returns an error. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserExternalAccountsStore.Delete",
                    "documentation": {
                      "identifier": "UserExternalAccountsStore.Delete",
                      "newPage": false,
                      "searchKey": "database.UserExternalAccountsStore.Delete",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserExternalAccountsStore) Delete(ctx context.Context, id int32) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserExternalAccountsStore) Delete(ctx context.Context, id int32) error\n```\n\nDelete deletes a user external account. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserExternalAccountsStore.Get",
                    "documentation": {
                      "identifier": "UserExternalAccountsStore.Get",
                      "newPage": false,
                      "searchKey": "database.UserExternalAccountsStore.Get",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserExternalAccountsStore) Get(ctx context.Context, id int32) (*extsvc.Account, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserExternalAccountsStore) Get(ctx context.Context, id int32) (*extsvc.Account, error)\n```\n\nGet gets information about the user external account. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserExternalAccountsStore.List",
                    "documentation": {
                      "identifier": "UserExternalAccountsStore.List",
                      "newPage": false,
                      "searchKey": "database.UserExternalAccountsStore.List",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserExternalAccountsStore) List(ctx context.Context, opt ExternalAccountsListOptions) (acct []*extsvc.Account, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserExternalAccountsStore) List(ctx context.Context, opt ExternalAccountsListOptions) (acct []*extsvc.Account, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserExternalAccountsStore.LookupUserAndSave",
                    "documentation": {
                      "identifier": "UserExternalAccountsStore.LookupUserAndSave",
                      "newPage": false,
                      "searchKey": "database.UserExternalAccountsStore.LookupUserAndSave",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserExternalAccountsStore) LookupUserAndSave(ctx context.Context, spec extsvc.AccountSpec, data extsvc.AccountData) (userID int32, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserExternalAccountsStore) LookupUserAndSave(ctx context.Context, spec extsvc.AccountSpec, data extsvc.AccountData) (userID int32, err error)\n```\n\nLookupUserAndSave is used for authenticating a user (when both their Sourcegraph account and the association with the external account already exist). \n\nIt looks up the existing user associated with the external account's extsvc.AccountSpec. If found, it updates the account's data and returns the user. It NEVER creates a user; you must call CreateUserAndSave for that. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserExternalAccountsStore.TouchExpired",
                    "documentation": {
                      "identifier": "UserExternalAccountsStore.TouchExpired",
                      "newPage": false,
                      "searchKey": "database.UserExternalAccountsStore.TouchExpired",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserExternalAccountsStore) TouchExpired(ctx context.Context, id int32) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserExternalAccountsStore) TouchExpired(ctx context.Context, id int32) error\n```\n\nTouchExpired sets the given user external account to be expired now. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserExternalAccountsStore.TouchLastValid",
                    "documentation": {
                      "identifier": "UserExternalAccountsStore.TouchLastValid",
                      "newPage": false,
                      "searchKey": "database.UserExternalAccountsStore.TouchLastValid",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserExternalAccountsStore) TouchLastValid(ctx context.Context, id int32) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserExternalAccountsStore) TouchLastValid(ctx context.Context, id int32) error\n```\n\nTouchLastValid sets last valid time of the given user external account to be now. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserExternalAccountsStore.Transact",
                    "documentation": {
                      "identifier": "UserExternalAccountsStore.Transact",
                      "newPage": false,
                      "searchKey": "database.UserExternalAccountsStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserExternalAccountsStore) Transact(ctx context.Context) (*UserExternalAccountsStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserExternalAccountsStore) Transact(ctx context.Context) (*UserExternalAccountsStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserExternalAccountsStore.With",
                    "documentation": {
                      "identifier": "UserExternalAccountsStore.With",
                      "newPage": false,
                      "searchKey": "database.UserExternalAccountsStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserExternalAccountsStore) With(other basestore.ShareableStore) *UserExternalAccountsStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserExternalAccountsStore) With(other basestore.ShareableStore) *UserExternalAccountsStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserExternalAccountsStore.WithEncryptionKey",
                    "documentation": {
                      "identifier": "UserExternalAccountsStore.WithEncryptionKey",
                      "newPage": false,
                      "searchKey": "database.UserExternalAccountsStore.WithEncryptionKey",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserExternalAccountsStore) WithEncryptionKey(key encryption.Key) *UserExternalAccountsStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserExternalAccountsStore) WithEncryptionKey(key encryption.Key) *UserExternalAccountsStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserExternalAccountsStore.ensureStore",
                    "documentation": {
                      "identifier": "UserExternalAccountsStore.ensureStore",
                      "newPage": false,
                      "searchKey": "database.UserExternalAccountsStore.ensureStore",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserExternalAccountsStore) ensureStore()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserExternalAccountsStore) ensureStore()\n```\n\nensureStore instantiates a basestore.Store if necessary, using the dbconn.Global handle. This function ensures access to dbconn happens after the rest of the code or tests have initialized it. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserExternalAccountsStore.getBySQL",
                    "documentation": {
                      "identifier": "UserExternalAccountsStore.getBySQL",
                      "newPage": false,
                      "searchKey": "database.UserExternalAccountsStore.getBySQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserExternalAccountsStore) getBySQL(ctx context.Context, querySuffix *sqlf.Query) (*extsvc.Account, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserExternalAccountsStore) getBySQL(ctx context.Context, querySuffix *sqlf.Query) (*extsvc.Account, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserExternalAccountsStore.getEncryptionKey",
                    "documentation": {
                      "identifier": "UserExternalAccountsStore.getEncryptionKey",
                      "newPage": false,
                      "searchKey": "database.UserExternalAccountsStore.getEncryptionKey",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserExternalAccountsStore) getEncryptionKey() encryption.Key"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserExternalAccountsStore) getEncryptionKey() encryption.Key\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserExternalAccountsStore.insert",
                    "documentation": {
                      "identifier": "UserExternalAccountsStore.insert",
                      "newPage": false,
                      "searchKey": "database.UserExternalAccountsStore.insert",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserExternalAccountsStore) insert(ctx context.Context, userID int32, spec extsvc.AccountSpec, data extsvc.AccountData) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserExternalAccountsStore) insert(ctx context.Context, userID int32, spec extsvc.AccountSpec, data extsvc.AccountData) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserExternalAccountsStore.listBySQL",
                    "documentation": {
                      "identifier": "UserExternalAccountsStore.listBySQL",
                      "newPage": false,
                      "searchKey": "database.UserExternalAccountsStore.listBySQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserExternalAccountsStore) listBySQL(ctx context.Context, querySuffix *sqlf.Query) ([]*extsvc.Account, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserExternalAccountsStore) listBySQL(ctx context.Context, querySuffix *sqlf.Query) ([]*extsvc.Account, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserExternalAccountsStore.listSQL",
                    "documentation": {
                      "identifier": "UserExternalAccountsStore.listSQL",
                      "newPage": false,
                      "searchKey": "database.UserExternalAccountsStore.listSQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserExternalAccountsStore) listSQL(opt ExternalAccountsListOptions) (conds []*sqlf.Query)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserExternalAccountsStore) listSQL(opt ExternalAccountsListOptions) (conds []*sqlf.Query)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#UserPublicRepo",
              "documentation": {
                "identifier": "UserPublicRepo",
                "newPage": false,
                "searchKey": "database.UserPublicRepo",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserPublicRepo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserPublicRepo struct {\n\tUserID  int32\n\tRepoURI string\n\tRepoID  api.RepoID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#UserPublicRepoStore",
              "documentation": {
                "identifier": "UserPublicRepoStore",
                "newPage": false,
                "searchKey": "database.UserPublicRepoStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserPublicRepoStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserPublicRepoStore struct {\n\tstore *basestore.Store\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#UserPublicRepos",
                    "documentation": {
                      "identifier": "UserPublicRepos",
                      "newPage": false,
                      "searchKey": "database.UserPublicRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func UserPublicRepos(db dbutil.DB) *UserPublicRepoStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc UserPublicRepos(db dbutil.DB) *UserPublicRepoStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserPublicReposWithStore",
                    "documentation": {
                      "identifier": "UserPublicReposWithStore",
                      "newPage": false,
                      "searchKey": "database.UserPublicReposWithStore",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func UserPublicReposWithStore(store *basestore.Store) *UserPublicRepoStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc UserPublicReposWithStore(store *basestore.Store) *UserPublicRepoStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserPublicRepoStore.ListByUser",
                    "documentation": {
                      "identifier": "UserPublicRepoStore.ListByUser",
                      "newPage": false,
                      "searchKey": "database.UserPublicRepoStore.ListByUser",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserPublicRepoStore) ListByUser(ctx context.Context, userID int32) ([]UserPublicRepo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserPublicRepoStore) ListByUser(ctx context.Context, userID int32) ([]UserPublicRepo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserPublicRepoStore.SetUserRepo",
                    "documentation": {
                      "identifier": "UserPublicRepoStore.SetUserRepo",
                      "newPage": false,
                      "searchKey": "database.UserPublicRepoStore.SetUserRepo",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserPublicRepoStore) SetUserRepo(ctx context.Context, upr UserPublicRepo) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserPublicRepoStore) SetUserRepo(ctx context.Context, upr UserPublicRepo) error\n```\n\nSetUserRepo stores a UserPublicRepo record, if a record already exists for the same user_id & repo_id combo, the repo_uri is updated \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserPublicRepoStore.SetUserRepos",
                    "documentation": {
                      "identifier": "UserPublicRepoStore.SetUserRepos",
                      "newPage": false,
                      "searchKey": "database.UserPublicRepoStore.SetUserRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *UserPublicRepoStore) SetUserRepos(ctx context.Context, userID int32, repos []UserPublicRepo) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *UserPublicRepoStore) SetUserRepos(ctx context.Context, userID int32, repos []UserPublicRepo) (err error)\n```\n\nSetUserRepos replaces all the repos in user_public_repos for the passed user ID \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#UserStore",
              "documentation": {
                "identifier": "UserStore",
                "newPage": false,
                "searchKey": "database.UserStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserStore struct {\n\t*basestore.Store\n\n\tonce sync.Once\n}\n```\n\nUserStore provides access to the `users` table. \n\nFor a detailed overview of the schema, see schema.md. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#Users",
                    "documentation": {
                      "identifier": "Users",
                      "newPage": false,
                      "searchKey": "database.Users",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Users(db dbutil.DB) *UserStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Users(db dbutil.DB) *UserStore\n```\n\nUsers instantiates and returns a new RepoStore with prepared statements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UsersWith",
                    "documentation": {
                      "identifier": "UsersWith",
                      "newPage": false,
                      "searchKey": "database.UsersWith",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func UsersWith(other basestore.ShareableStore) *UserStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc UsersWith(other basestore.ShareableStore) *UserStore\n```\n\nUsersWith instantiates and returns a new RepoStore using the other store handle. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.CheckAndDecrementInviteQuota",
                    "documentation": {
                      "identifier": "UserStore.CheckAndDecrementInviteQuota",
                      "newPage": false,
                      "searchKey": "database.UserStore.CheckAndDecrementInviteQuota",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) CheckAndDecrementInviteQuota(ctx context.Context, userID int32) (ok bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) CheckAndDecrementInviteQuota(ctx context.Context, userID int32) (ok bool, err error)\n```\n\nCheckAndDecrementInviteQuota should be called before the user (identified by userID) is allowed to invite any other user. If ok is false, then the user is not allowed to invite any other user (either because they've invited too many users, or some other error occurred). If the user has quota remaining, their quota is decremented and ok is true. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.Count",
                    "documentation": {
                      "identifier": "UserStore.Count",
                      "newPage": false,
                      "searchKey": "database.UserStore.Count",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) Count(ctx context.Context, opt *UsersListOptions) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) Count(ctx context.Context, opt *UsersListOptions) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.Create",
                    "documentation": {
                      "identifier": "UserStore.Create",
                      "newPage": false,
                      "searchKey": "database.UserStore.Create",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) Create(ctx context.Context, info NewUser) (newUser *types.User, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) Create(ctx context.Context, info NewUser) (newUser *types.User, err error)\n```\n\nCreate creates a new user in the database. \n\nIf a password is given, then unauthenticated users can sign into the account using the username/email and password. If no password is given, a non-builtin auth provider must be used to sign into the account. \n\n### hdr-CREATION_OF_SITE_ADMINSCREATION OF SITE ADMINS\nThe new user is made to be a site admin if the following are both true: (1) this user would be the first and only user on the server, and (2) the site has not yet been initialized. Otherwise, the user is created as a normal (non-site-admin) user. After the call, the site is marked as having been initialized (so that no subsequent (users).Create calls will yield a site admin). This is used to create the initial site admin user during site initialization. \n\nIt's implemented as part of the (users).Create call instead of relying on the caller to do it in order to avoid a race condition where multiple initial site admins could be created or zero site admins could be created. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.CreatePassword",
                    "documentation": {
                      "identifier": "UserStore.CreatePassword",
                      "newPage": false,
                      "searchKey": "database.UserStore.CreatePassword",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) CreatePassword(ctx context.Context, id int32, password string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) CreatePassword(ctx context.Context, id int32, password string) error\n```\n\nCreatePassword creates a user's password iff don't have a password and they don't have any valid login connections. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.CurrentUserAllowedExternalServices",
                    "documentation": {
                      "identifier": "UserStore.CurrentUserAllowedExternalServices",
                      "newPage": false,
                      "searchKey": "database.UserStore.CurrentUserAllowedExternalServices",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) CurrentUserAllowedExternalServices(ctx context.Context) (conf.ExternalServiceMode, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) CurrentUserAllowedExternalServices(ctx context.Context) (conf.ExternalServiceMode, error)\n```\n\nCurrentUserAllowedExternalServices returns whether the current user is allowed to add public or private code. This may override the site level value read by conf.ExternalServiceUserMode. \n\nIt is added in the database package as putting it in the conf package led to many cyclic imports. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.Delete",
                    "documentation": {
                      "identifier": "UserStore.Delete",
                      "newPage": false,
                      "searchKey": "database.UserStore.Delete",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) Delete(ctx context.Context, id int32) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) Delete(ctx context.Context, id int32) (err error)\n```\n\nDelete performs a soft-delete of the user and all resources associated with this user. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.DeletePasswordResetCode",
                    "documentation": {
                      "identifier": "UserStore.DeletePasswordResetCode",
                      "newPage": false,
                      "searchKey": "database.UserStore.DeletePasswordResetCode",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) DeletePasswordResetCode(ctx context.Context, id int32) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) DeletePasswordResetCode(ctx context.Context, id int32) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.GetByCurrentAuthUser",
                    "documentation": {
                      "identifier": "UserStore.GetByCurrentAuthUser",
                      "newPage": false,
                      "searchKey": "database.UserStore.GetByCurrentAuthUser",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) GetByCurrentAuthUser(ctx context.Context) (*types.User, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) GetByCurrentAuthUser(ctx context.Context) (*types.User, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.GetByID",
                    "documentation": {
                      "identifier": "UserStore.GetByID",
                      "newPage": false,
                      "searchKey": "database.UserStore.GetByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) GetByID(ctx context.Context, id int32) (*types.User, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) GetByID(ctx context.Context, id int32) (*types.User, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.GetByUsername",
                    "documentation": {
                      "identifier": "UserStore.GetByUsername",
                      "newPage": false,
                      "searchKey": "database.UserStore.GetByUsername",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) GetByUsername(ctx context.Context, username string) (*types.User, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) GetByUsername(ctx context.Context, username string) (*types.User, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.GetByUsernames",
                    "documentation": {
                      "identifier": "UserStore.GetByUsernames",
                      "newPage": false,
                      "searchKey": "database.UserStore.GetByUsernames",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) GetByUsernames(ctx context.Context, usernames ...string) ([]*types.User, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) GetByUsernames(ctx context.Context, usernames ...string) ([]*types.User, error)\n```\n\nGetByUsernames returns a list of users by given usernames. The number of results list could be less than the candidate list due to no user is associated with some usernames. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.GetByVerifiedEmail",
                    "documentation": {
                      "identifier": "UserStore.GetByVerifiedEmail",
                      "newPage": false,
                      "searchKey": "database.UserStore.GetByVerifiedEmail",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) GetByVerifiedEmail(ctx context.Context, email string) (*types.User, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) GetByVerifiedEmail(ctx context.Context, email string) (*types.User, error)\n```\n\nGetByVerifiedEmail returns the user (if any) with the specified verified email address. If a user has a matching *unverified* email address, they will not be returned by this method. At most one user may have any given verified email address. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.HardDelete",
                    "documentation": {
                      "identifier": "UserStore.HardDelete",
                      "newPage": false,
                      "searchKey": "database.UserStore.HardDelete",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) HardDelete(ctx context.Context, id int32) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) HardDelete(ctx context.Context, id int32) (err error)\n```\n\nHardDelete removes the user and all resources associated with this user. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.HasTag",
                    "documentation": {
                      "identifier": "UserStore.HasTag",
                      "newPage": false,
                      "searchKey": "database.UserStore.HasTag",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) HasTag(ctx context.Context, userID int32, tag string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) HasTag(ctx context.Context, userID int32, tag string) (bool, error)\n```\n\nHasTag reports whether the context actor has the given tag. If not, it returns false and a nil error. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.InvalidateSessionsByID",
                    "documentation": {
                      "identifier": "UserStore.InvalidateSessionsByID",
                      "newPage": false,
                      "searchKey": "database.UserStore.InvalidateSessionsByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) InvalidateSessionsByID(ctx context.Context, id int32) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) InvalidateSessionsByID(ctx context.Context, id int32) (err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.IsPassword",
                    "documentation": {
                      "identifier": "UserStore.IsPassword",
                      "newPage": false,
                      "searchKey": "database.UserStore.IsPassword",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) IsPassword(ctx context.Context, id int32, password string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) IsPassword(ctx context.Context, id int32, password string) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.List",
                    "documentation": {
                      "identifier": "UserStore.List",
                      "newPage": false,
                      "searchKey": "database.UserStore.List",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) List(ctx context.Context, opt *UsersListOptions) (_ []*types.User, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) List(ctx context.Context, opt *UsersListOptions) (_ []*types.User, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.ListDates",
                    "documentation": {
                      "identifier": "UserStore.ListDates",
                      "newPage": false,
                      "searchKey": "database.UserStore.ListDates",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) ListDates(ctx context.Context) (dates []types.UserDates, _ error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) ListDates(ctx context.Context) (dates []types.UserDates, _ error)\n```\n\nListDates lists all user's created and deleted dates, used by usage stats. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.RandomizePasswordAndClearPasswordResetRateLimit",
                    "documentation": {
                      "identifier": "UserStore.RandomizePasswordAndClearPasswordResetRateLimit",
                      "newPage": false,
                      "searchKey": "database.UserStore.RandomizePasswordAndClearPasswordResetRateLimit",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) RandomizePasswordAndClearPasswordResetRateLimit(ctx context.Context, id int32) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) RandomizePasswordAndClearPasswordResetRateLimit(ctx context.Context, id int32) error\n```\n\nRandomizePasswordAndClearPasswordResetRateLimit overwrites a user's password with a hard-to-guess random password and clears the password reset rate limit. It is intended to be used by site admins, who can subsequently generate a new password reset code for the user (in case the user has locked themselves out, or in case the site admin wants to initiate a password reset). \n\nA randomized password is used (instead of an empty password) to avoid bugs where an empty password is considered to be no password. The random password is expected to be irretrievable. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.RenewPasswordResetCode",
                    "documentation": {
                      "identifier": "UserStore.RenewPasswordResetCode",
                      "newPage": false,
                      "searchKey": "database.UserStore.RenewPasswordResetCode",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) RenewPasswordResetCode(ctx context.Context, id int32) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) RenewPasswordResetCode(ctx context.Context, id int32) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.SetIsSiteAdmin",
                    "documentation": {
                      "identifier": "UserStore.SetIsSiteAdmin",
                      "newPage": false,
                      "searchKey": "database.UserStore.SetIsSiteAdmin",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) SetIsSiteAdmin(ctx context.Context, id int32, isSiteAdmin bool) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) SetIsSiteAdmin(ctx context.Context, id int32, isSiteAdmin bool) error\n```\n\nSetIsSiteAdmin sets the the user with given ID to be or not to be the site admin. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.SetPassword",
                    "documentation": {
                      "identifier": "UserStore.SetPassword",
                      "newPage": false,
                      "searchKey": "database.UserStore.SetPassword",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) SetPassword(ctx context.Context, id int32, resetCode, newPassword string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) SetPassword(ctx context.Context, id int32, resetCode, newPassword string) (bool, error)\n```\n\nSetPassword sets the user's password given a new password and a password reset code \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.SetTag",
                    "documentation": {
                      "identifier": "UserStore.SetTag",
                      "newPage": false,
                      "searchKey": "database.UserStore.SetTag",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) SetTag(ctx context.Context, userID int32, tag string, present bool) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) SetTag(ctx context.Context, userID int32, tag string, present bool) error\n```\n\nSetTag adds (present=true) or removes (present=false) a tag from the given user's set of tags. An error occurs if the user does not exist. Adding a duplicate tag or removing a nonexistent tag is not an error. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.Tags",
                    "documentation": {
                      "identifier": "UserStore.Tags",
                      "newPage": false,
                      "searchKey": "database.UserStore.Tags",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) Tags(ctx context.Context, userID int32) (map[string]bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) Tags(ctx context.Context, userID int32) (map[string]bool, error)\n```\n\nTags returns a map with all the tags currently belonging to the user. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.Transact",
                    "documentation": {
                      "identifier": "UserStore.Transact",
                      "newPage": false,
                      "searchKey": "database.UserStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) Transact(ctx context.Context) (*UserStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) Transact(ctx context.Context) (*UserStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.Update",
                    "documentation": {
                      "identifier": "UserStore.Update",
                      "newPage": false,
                      "searchKey": "database.UserStore.Update",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) Update(ctx context.Context, id int32, update UserUpdate) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) Update(ctx context.Context, id int32, update UserUpdate) (err error)\n```\n\nUpdate updates a user's profile information. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.UpdatePassword",
                    "documentation": {
                      "identifier": "UserStore.UpdatePassword",
                      "newPage": false,
                      "searchKey": "database.UserStore.UpdatePassword",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) UpdatePassword(ctx context.Context, id int32, oldPassword, newPassword string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) UpdatePassword(ctx context.Context, id int32, oldPassword, newPassword string) error\n```\n\nUpdatePassword updates a user's password given the current password. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.UserAllowedExternalServices",
                    "documentation": {
                      "identifier": "UserStore.UserAllowedExternalServices",
                      "newPage": false,
                      "searchKey": "database.UserStore.UserAllowedExternalServices",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) UserAllowedExternalServices(ctx context.Context, userID int32) (conf.ExternalServiceMode, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) UserAllowedExternalServices(ctx context.Context, userID int32) (conf.ExternalServiceMode, error)\n```\n\nUserAllowedExternalServices returns whether the supplied user is allowed to add public or private code. This may override the site level value read by conf.ExternalServiceUserMode. \n\nIt is added in the database package as putting it in the conf package led to many cyclic imports. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.With",
                    "documentation": {
                      "identifier": "UserStore.With",
                      "newPage": false,
                      "searchKey": "database.UserStore.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) With(other basestore.ShareableStore) *UserStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) With(other basestore.ShareableStore) *UserStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.create",
                    "documentation": {
                      "identifier": "UserStore.create",
                      "newPage": false,
                      "searchKey": "database.UserStore.create",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) create(ctx context.Context, info NewUser) (newUser *types.User, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) create(ctx context.Context, info NewUser) (newUser *types.User, err error)\n```\n\ncreate is like Create, except it is expected to be run from within a transaction. It must execute in a transaction because the post-user-creation hooks must run atomically with the user creation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.ensureStore",
                    "documentation": {
                      "identifier": "UserStore.ensureStore",
                      "newPage": false,
                      "searchKey": "database.UserStore.ensureStore",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) ensureStore()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) ensureStore()\n```\n\nensureStore instantiates a basestore.Store if necessary, using the dbconn.Global handle. This function ensures access to dbconn happens after the rest of the code or tests have initialized it. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.getBySQL",
                    "documentation": {
                      "identifier": "UserStore.getBySQL",
                      "newPage": false,
                      "searchKey": "database.UserStore.getBySQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) getBySQL(ctx context.Context, query *sqlf.Query) ([]*types.User, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) getBySQL(ctx context.Context, query *sqlf.Query) ([]*types.User, error)\n```\n\ngetBySQL returns users matching the SQL query, if any exist. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.getOneBySQL",
                    "documentation": {
                      "identifier": "UserStore.getOneBySQL",
                      "newPage": false,
                      "searchKey": "database.UserStore.getOneBySQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *UserStore) getOneBySQL(ctx context.Context, q *sqlf.Query) (*types.User, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *UserStore) getOneBySQL(ctx context.Context, q *sqlf.Query) (*types.User, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#UserStore.listSQL",
                    "documentation": {
                      "identifier": "UserStore.listSQL",
                      "newPage": false,
                      "searchKey": "database.UserStore.listSQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*UserStore) listSQL(opt UsersListOptions) (conds []*sqlf.Query)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*UserStore) listSQL(opt UsersListOptions) (conds []*sqlf.Query)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#UserUpdate",
              "documentation": {
                "identifier": "UserUpdate",
                "newPage": false,
                "searchKey": "database.UserUpdate",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserUpdate struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserUpdate struct {\n\tUsername string // update the Username to this value (if non-zero)\n\n\t// For the following fields:\n\t//\n\t// - If nil, the value in the DB is unchanged.\n\t// - If pointer to \"\" (empty string), the value in the DB is set to null.\n\t// - If pointer to a non-empty string, the value in the DB is set to the string.\n\tDisplayName, AvatarURL *string\n}\n```\n\nUserUpdate describes user fields to update. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#UsersListOptions",
              "documentation": {
                "identifier": "UsersListOptions",
                "newPage": false,
                "searchKey": "database.UsersListOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UsersListOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UsersListOptions struct {\n\t// Query specifies a search query for users.\n\tQuery string\n\t// UserIDs specifies a list of user IDs to include.\n\tUserIDs []int32\n\n\tTag string // only include users with this tag\n\n\t*LimitOffset\n}\n```\n\nUsersListOptions specifies the options for listing users. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#ValidateExternalServiceConfigOptions",
              "documentation": {
                "identifier": "ValidateExternalServiceConfigOptions",
                "newPage": false,
                "searchKey": "database.ValidateExternalServiceConfigOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ValidateExternalServiceConfigOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ValidateExternalServiceConfigOptions struct {\n\t// The ID of the external service, 0 is a valid value for not-yet-created external service.\n\tExternalServiceID int64\n\t// The kind of external service.\n\tKind string\n\t// The actual config of the external service.\n\tConfig string\n\t// The list of authN providers configured on the instance.\n\tAuthProviders []schema.AuthProviders\n\t// If non zero, indicates the user that owns the external service.\n\tNamespaceUserID int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#authzStore",
              "documentation": {
                "identifier": "authzStore",
                "newPage": false,
                "searchKey": "database.authzStore",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type authzStore struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype authzStore struct{}\n```\n\nauthzStore is a no-op placeholder for the OSS version. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#authzStore.AuthorizedRepos",
                    "documentation": {
                      "identifier": "authzStore.AuthorizedRepos",
                      "newPage": false,
                      "searchKey": "database.authzStore.AuthorizedRepos",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*authzStore) AuthorizedRepos(ctx context.Context, args *AuthorizedReposArgs) ([]*types.Repo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*authzStore) AuthorizedRepos(ctx context.Context, args *AuthorizedReposArgs) ([]*types.Repo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#authzStore.GrantPendingPermissions",
                    "documentation": {
                      "identifier": "authzStore.GrantPendingPermissions",
                      "newPage": false,
                      "searchKey": "database.authzStore.GrantPendingPermissions",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*authzStore) GrantPendingPermissions(ctx context.Context, args *GrantPendingPermissionsArgs) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*authzStore) GrantPendingPermissions(ctx context.Context, args *GrantPendingPermissionsArgs) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#authzStore.RevokeUserPermissions",
                    "documentation": {
                      "identifier": "authzStore.RevokeUserPermissions",
                      "newPage": false,
                      "searchKey": "database.authzStore.RevokeUserPermissions",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*authzStore) RevokeUserPermissions(ctx context.Context, args *RevokeUserPermissionsArgs) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*authzStore) RevokeUserPermissions(ctx context.Context, args *RevokeUserPermissionsArgs) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#badAuthenticator",
              "documentation": {
                "identifier": "badAuthenticator",
                "newPage": false,
                "searchKey": "database.badAuthenticator",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type badAuthenticator struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype badAuthenticator struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#badAuthenticator.Authenticate",
                    "documentation": {
                      "identifier": "badAuthenticator.Authenticate",
                      "newPage": false,
                      "searchKey": "database.badAuthenticator.Authenticate",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*badAuthenticator) Authenticate(*http.Request) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*badAuthenticator) Authenticate(*http.Request) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#badAuthenticator.Hash",
                    "documentation": {
                      "identifier": "badAuthenticator.Hash",
                      "newPage": false,
                      "searchKey": "database.badAuthenticator.Hash",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*badAuthenticator) Hash() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*badAuthenticator) Hash() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#errCannotCreateUser",
              "documentation": {
                "identifier": "errCannotCreateUser",
                "newPage": false,
                "searchKey": "database.errCannotCreateUser",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type errCannotCreateUser struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype errCannotCreateUser struct {\n\tcode string\n}\n```\n\nerrCannotCreateUser is the error that is returned when a user cannot be added to the DB due to a constraint. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#errCannotCreateUser.Code",
                    "documentation": {
                      "identifier": "errCannotCreateUser.Code",
                      "newPage": false,
                      "searchKey": "database.errCannotCreateUser.Code",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err errCannotCreateUser) Code() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err errCannotCreateUser) Code() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#errCannotCreateUser.Error",
                    "documentation": {
                      "identifier": "errCannotCreateUser.Error",
                      "newPage": false,
                      "searchKey": "database.errCannotCreateUser.Error",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err errCannotCreateUser) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err errCannotCreateUser) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#errPhabricatorRepoNotFound",
              "documentation": {
                "identifier": "errPhabricatorRepoNotFound",
                "newPage": false,
                "searchKey": "database.errPhabricatorRepoNotFound",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type errPhabricatorRepoNotFound struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype errPhabricatorRepoNotFound struct {\n\targs []interface{}\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#errPhabricatorRepoNotFound.Error",
                    "documentation": {
                      "identifier": "errPhabricatorRepoNotFound.Error",
                      "newPage": false,
                      "searchKey": "database.errPhabricatorRepoNotFound.Error",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err errPhabricatorRepoNotFound) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err errPhabricatorRepoNotFound) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#errPhabricatorRepoNotFound.NotFound",
                    "documentation": {
                      "identifier": "errPhabricatorRepoNotFound.NotFound",
                      "newPage": false,
                      "searchKey": "database.errPhabricatorRepoNotFound.NotFound",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err errPhabricatorRepoNotFound) NotFound() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err errPhabricatorRepoNotFound) NotFound() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#externalServiceNotFoundError",
              "documentation": {
                "identifier": "externalServiceNotFoundError",
                "newPage": false,
                "searchKey": "database.externalServiceNotFoundError",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type externalServiceNotFoundError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype externalServiceNotFoundError struct {\n\tid int64\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#externalServiceNotFoundError.Error",
                    "documentation": {
                      "identifier": "externalServiceNotFoundError.Error",
                      "newPage": false,
                      "searchKey": "database.externalServiceNotFoundError.Error",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e externalServiceNotFoundError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e externalServiceNotFoundError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#externalServiceNotFoundError.NotFound",
                    "documentation": {
                      "identifier": "externalServiceNotFoundError.NotFound",
                      "newPage": false,
                      "searchKey": "database.externalServiceNotFoundError.NotFound",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e externalServiceNotFoundError) NotFound() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e externalServiceNotFoundError) NotFound() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#externalServiceRepo",
              "documentation": {
                "identifier": "externalServiceRepo",
                "newPage": false,
                "searchKey": "database.externalServiceRepo",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type externalServiceRepo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype externalServiceRepo struct {\n\tExternalServiceID int64  `json:\"external_service_id\"`\n\tRepoID            int64  `json:\"repo_id\"`\n\tCloneURL          string `json:\"clone_url\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#fakeProvider",
              "documentation": {
                "identifier": "fakeProvider",
                "newPage": false,
                "searchKey": "database.fakeProvider",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type fakeProvider struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fakeProvider struct {\n\tcodeHost *extsvc.CodeHost\n\textAcct  *extsvc.Account\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#fakeProvider.FetchAccount",
                    "documentation": {
                      "identifier": "fakeProvider.FetchAccount",
                      "newPage": false,
                      "searchKey": "database.fakeProvider.FetchAccount",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *fakeProvider) FetchAccount(context.Context, *types.User, []*extsvc.Account, []string) (mine *extsvc.Account, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *fakeProvider) FetchAccount(context.Context, *types.User, []*extsvc.Account, []string) (mine *extsvc.Account, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#fakeProvider.FetchRepoPerms",
                    "documentation": {
                      "identifier": "fakeProvider.FetchRepoPerms",
                      "newPage": false,
                      "searchKey": "database.fakeProvider.FetchRepoPerms",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *fakeProvider) FetchRepoPerms(context.Context, *extsvc.Repository) ([]extsvc.AccountID, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *fakeProvider) FetchRepoPerms(context.Context, *extsvc.Repository) ([]extsvc.AccountID, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#fakeProvider.FetchUserPerms",
                    "documentation": {
                      "identifier": "fakeProvider.FetchUserPerms",
                      "newPage": false,
                      "searchKey": "database.fakeProvider.FetchUserPerms",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *fakeProvider) FetchUserPerms(context.Context, *extsvc.Account) (*authz.ExternalUserPermissions, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *fakeProvider) FetchUserPerms(context.Context, *extsvc.Account) (*authz.ExternalUserPermissions, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#fakeProvider.ServiceID",
                    "documentation": {
                      "identifier": "fakeProvider.ServiceID",
                      "newPage": false,
                      "searchKey": "database.fakeProvider.ServiceID",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *fakeProvider) ServiceID() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *fakeProvider) ServiceID() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#fakeProvider.ServiceType",
                    "documentation": {
                      "identifier": "fakeProvider.ServiceType",
                      "newPage": false,
                      "searchKey": "database.fakeProvider.ServiceType",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *fakeProvider) ServiceType() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *fakeProvider) ServiceType() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#fakeProvider.URN",
                    "documentation": {
                      "identifier": "fakeProvider.URN",
                      "newPage": false,
                      "searchKey": "database.fakeProvider.URN",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *fakeProvider) URN() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *fakeProvider) URN() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#fakeProvider.Validate",
                    "documentation": {
                      "identifier": "fakeProvider.Validate",
                      "newPage": false,
                      "searchKey": "database.fakeProvider.Validate",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *fakeProvider) Validate() (problems []string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *fakeProvider) Validate() (problems []string)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#invalidAuth",
              "documentation": {
                "identifier": "invalidAuth",
                "newPage": false,
                "searchKey": "database.invalidAuth",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type invalidAuth struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype invalidAuth struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#invalidAuth.Authenticate",
                    "documentation": {
                      "identifier": "invalidAuth.Authenticate",
                      "newPage": false,
                      "searchKey": "database.invalidAuth.Authenticate",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*invalidAuth) Authenticate(_ *http.Request) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*invalidAuth) Authenticate(_ *http.Request) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#invalidAuth.Hash",
                    "documentation": {
                      "identifier": "invalidAuth.Hash",
                      "newPage": false,
                      "searchKey": "database.invalidAuth.Hash",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*invalidAuth) Hash() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*invalidAuth) Hash() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#invalidKey",
              "documentation": {
                "identifier": "invalidKey",
                "newPage": false,
                "searchKey": "database.invalidKey",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type invalidKey struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype invalidKey struct{}\n```\n\ninvalidKey is an encryption.Key that just base64 encodes the plaintext, but silently fails to decrypt the secret. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#invalidKey.Decrypt",
                    "documentation": {
                      "identifier": "invalidKey.Decrypt",
                      "newPage": false,
                      "searchKey": "database.invalidKey.Decrypt",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k invalidKey) Decrypt(ctx context.Context, ciphertext []byte) (*encryption.Secret, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k invalidKey) Decrypt(ctx context.Context, ciphertext []byte) (*encryption.Secret, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#invalidKey.Encrypt",
                    "documentation": {
                      "identifier": "invalidKey.Encrypt",
                      "newPage": false,
                      "searchKey": "database.invalidKey.Encrypt",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k invalidKey) Encrypt(ctx context.Context, plaintext []byte) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k invalidKey) Encrypt(ctx context.Context, plaintext []byte) ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#invalidKey.Version",
                    "documentation": {
                      "identifier": "invalidKey.Version",
                      "newPage": false,
                      "searchKey": "database.invalidKey.Version",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k invalidKey) Version(ctx context.Context) (encryption.KeyVersion, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k invalidKey) Version(ctx context.Context) (encryption.KeyVersion, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#mockEncrypter",
              "documentation": {
                "identifier": "mockEncrypter",
                "newPage": false,
                "searchKey": "database.mockEncrypter",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type mockEncrypter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mockEncrypter struct {\n\tcalled int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#mockEncrypter.Encrypt",
                    "documentation": {
                      "identifier": "mockEncrypter.Encrypt",
                      "newPage": false,
                      "searchKey": "database.mockEncrypter.Encrypt",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (me *mockEncrypter) Encrypt(ctx context.Context, value []byte) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (me *mockEncrypter) Encrypt(ctx context.Context, value []byte) ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#repoRecord",
              "documentation": {
                "identifier": "repoRecord",
                "newPage": false,
                "searchKey": "database.repoRecord",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type repoRecord struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repoRecord struct {\n\tID                  api.RepoID      `json:\"id\"`\n\tName                string          `json:\"name\"`\n\tURI                 *string         `json:\"uri,omitempty\"`\n\tDescription         string          `json:\"description\"`\n\tCreatedAt           time.Time       `json:\"created_at\"`\n\tUpdatedAt           *time.Time      `json:\"updated_at,omitempty\"`\n\tDeletedAt           *time.Time      `json:\"deleted_at,omitempty\"`\n\tExternalServiceType *string         `json:\"external_service_type,omitempty\"`\n\tExternalServiceID   *string         `json:\"external_service_id,omitempty\"`\n\tExternalID          *string         `json:\"external_id,omitempty\"`\n\tArchived            bool            `json:\"archived\"`\n\tFork                bool            `json:\"fork\"`\n\tStars               int             `json:\"stars\"`\n\tPrivate             bool            `json:\"private\"`\n\tMetadata            json.RawMessage `json:\"metadata\"`\n\tSources             json.RawMessage `json:\"sources,omitempty\"`\n}\n```\n\nrepoRecord is the json representation of a repository as used in this package Postgres CTEs. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#newRepoRecord",
                    "documentation": {
                      "identifier": "newRepoRecord",
                      "newPage": false,
                      "searchKey": "database.newRepoRecord",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newRepoRecord(r *types.Repo) (*repoRecord, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newRepoRecord(r *types.Repo) (*repoRecord, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#rowScanner",
              "documentation": {
                "identifier": "rowScanner",
                "newPage": false,
                "searchKey": "database.rowScanner",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type rowScanner interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype rowScanner interface {\n\tScan(...interface{}) error\n}\n```\n\nrowScanner is an interface that can scan from either a sql.Row or sql.Rows \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#userEmailNotFoundError",
              "documentation": {
                "identifier": "userEmailNotFoundError",
                "newPage": false,
                "searchKey": "database.userEmailNotFoundError",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type userEmailNotFoundError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype userEmailNotFoundError struct {\n\targs []interface{}\n}\n```\n\nuserEmailNotFoundError is the error that is returned when a user email is not found. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#userEmailNotFoundError.Error",
                    "documentation": {
                      "identifier": "userEmailNotFoundError.Error",
                      "newPage": false,
                      "searchKey": "database.userEmailNotFoundError.Error",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err userEmailNotFoundError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err userEmailNotFoundError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#userEmailNotFoundError.NotFound",
                    "documentation": {
                      "identifier": "userEmailNotFoundError.NotFound",
                      "newPage": false,
                      "searchKey": "database.userEmailNotFoundError.NotFound",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err userEmailNotFoundError) NotFound() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err userEmailNotFoundError) NotFound() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#userExternalAccountNotFoundError",
              "documentation": {
                "identifier": "userExternalAccountNotFoundError",
                "newPage": false,
                "searchKey": "database.userExternalAccountNotFoundError",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type userExternalAccountNotFoundError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype userExternalAccountNotFoundError struct {\n\targs []interface{}\n}\n```\n\nuserExternalAccountNotFoundError is the error that is returned when a user external account is not found. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#userExternalAccountNotFoundError.Error",
                    "documentation": {
                      "identifier": "userExternalAccountNotFoundError.Error",
                      "newPage": false,
                      "searchKey": "database.userExternalAccountNotFoundError.Error",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err userExternalAccountNotFoundError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err userExternalAccountNotFoundError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#userExternalAccountNotFoundError.NotFound",
                    "documentation": {
                      "identifier": "userExternalAccountNotFoundError.NotFound",
                      "newPage": false,
                      "searchKey": "database.userExternalAccountNotFoundError.NotFound",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err userExternalAccountNotFoundError) NotFound() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err userExternalAccountNotFoundError) NotFound() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/database#userNotFoundErr",
              "documentation": {
                "identifier": "userNotFoundErr",
                "newPage": false,
                "searchKey": "database.userNotFoundErr",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type userNotFoundErr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype userNotFoundErr struct {\n\targs []interface{}\n}\n```\n\nuserNotFoundErr is the error that is returned when a user is not found. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/database#userNotFoundErr.Error",
                    "documentation": {
                      "identifier": "userNotFoundErr.Error",
                      "newPage": false,
                      "searchKey": "database.userNotFoundErr.Error",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err userNotFoundErr) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err userNotFoundErr) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/database#userNotFoundErr.NotFound",
                    "documentation": {
                      "identifier": "userNotFoundErr.NotFound",
                      "newPage": false,
                      "searchKey": "database.userNotFoundErr.NotFound",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err userNotFoundErr) NotFound() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err userNotFoundErr) NotFound() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/database#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/database#AuthzQueryConds",
              "documentation": {
                "identifier": "AuthzQueryConds",
                "newPage": false,
                "searchKey": "database.AuthzQueryConds",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func AuthzQueryConds(ctx context.Context, db dbutil.DB) (*sqlf.Query, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc AuthzQueryConds(ctx context.Context, db dbutil.DB) (*sqlf.Query, error)\n```\n\nAuthzQueryConds returns a query clause for enforcing repository permissions. It uses `repo` as the table name to filter out repository IDs and should be used as an AND condition in a complete SQL query. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#CheckPasswordLength",
              "documentation": {
                "identifier": "CheckPasswordLength",
                "newPage": false,
                "searchKey": "database.CheckPasswordLength",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func CheckPasswordLength(pw string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CheckPasswordLength(pw string) error\n```\n\nCheckPasswordLength returns an error if the length of the password is not in the required range. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#EncryptAuthenticator",
              "documentation": {
                "identifier": "EncryptAuthenticator",
                "newPage": false,
                "searchKey": "database.EncryptAuthenticator",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func EncryptAuthenticator(ctx context.Context, enc encryption.Encrypter, a auth.Authenticator) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc EncryptAuthenticator(ctx context.Context, enc encryption.Encrypter, a auth.Authenticator) ([]byte, error)\n```\n\nEncryptAuthenticator encodes _and_ encrypts an Authenticator into a byte slice. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#IsEmailExists",
              "documentation": {
                "identifier": "IsEmailExists",
                "newPage": false,
                "searchKey": "database.IsEmailExists",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsEmailExists(err error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsEmailExists(err error) bool\n```\n\nIsEmailExists reports whether err is an error indicating that the intended email exists. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#IsRepoNotFoundErr",
              "documentation": {
                "identifier": "IsRepoNotFoundErr",
                "newPage": false,
                "searchKey": "database.IsRepoNotFoundErr",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsRepoNotFoundErr(err error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsRepoNotFoundErr(err error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#IsUsernameExists",
              "documentation": {
                "identifier": "IsUsernameExists",
                "newPage": false,
                "searchKey": "database.IsUsernameExists",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsUsernameExists(err error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsUsernameExists(err error) bool\n```\n\nIsUsernameExists reports whether err is an error indicating that the intended username exists. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MaybeDecrypt",
              "documentation": {
                "identifier": "MaybeDecrypt",
                "newPage": false,
                "searchKey": "database.MaybeDecrypt",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MaybeDecrypt(ctx context.Context, key encryption.Key, data, keyIdent string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MaybeDecrypt(ctx context.Context, key encryption.Key, data, keyIdent string) (string, error)\n```\n\nMaybeDecrypt decrypts data with the given key if keyIdent is not empty. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MaybeEncrypt",
              "documentation": {
                "identifier": "MaybeEncrypt",
                "newPage": false,
                "searchKey": "database.MaybeEncrypt",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MaybeEncrypt(ctx context.Context, key encryption.Key, data string) (maybeEncryptedData, keyID string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MaybeEncrypt(ctx context.Context, key encryption.Key, data string) (maybeEncryptedData, keyID string, err error)\n```\n\nMaybeEncrypt encrypts data with the given key returns the id of the key. If the key is nil, it returns the data unchanged. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockEmailExistsErr",
              "documentation": {
                "identifier": "MockEmailExistsErr",
                "newPage": false,
                "searchKey": "database.MockEmailExistsErr",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MockEmailExistsErr() error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MockEmailExistsErr() error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#MockUsernameExistsErr",
              "documentation": {
                "identifier": "MockUsernameExistsErr",
                "newPage": false,
                "searchKey": "database.MockUsernameExistsErr",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MockUsernameExistsErr() error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MockUsernameExistsErr() error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#NewUserNotFoundError",
              "documentation": {
                "identifier": "NewUserNotFoundError",
                "newPage": false,
                "searchKey": "database.NewUserNotFoundError",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewUserNotFoundError(userID int32) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewUserNotFoundError(userID int32) error\n```\n\nNewUserNotFoundError returns a new error indicating that the user with the given user ID was not found. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestAccessTokens_Create",
              "documentation": {
                "identifier": "TestAccessTokens_Create",
                "newPage": false,
                "searchKey": "database.TestAccessTokens_Create",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAccessTokens_Create(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAccessTokens_Create(t *testing.T)\n```\n\n🚨 SECURITY: This tests the routine that creates access tokens and returns the token secret value to the user. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestAccessTokens_List",
              "documentation": {
                "identifier": "TestAccessTokens_List",
                "newPage": false,
                "searchKey": "database.TestAccessTokens_List",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAccessTokens_List(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAccessTokens_List(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestAccessTokens_Lookup",
              "documentation": {
                "identifier": "TestAccessTokens_Lookup",
                "newPage": false,
                "searchKey": "database.TestAccessTokens_Lookup",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAccessTokens_Lookup(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAccessTokens_Lookup(t *testing.T)\n```\n\n🚨 SECURITY: This tests the routine that verifies access tokens, which the security of the entire system depends on. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestAccessTokens_Lookup_deletedUser",
              "documentation": {
                "identifier": "TestAccessTokens_Lookup_deletedUser",
                "newPage": false,
                "searchKey": "database.TestAccessTokens_Lookup_deletedUser",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAccessTokens_Lookup_deletedUser(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAccessTokens_Lookup_deletedUser(t *testing.T)\n```\n\n🚨 SECURITY: This tests that deleting the subject or creator user of an access token invalidates the token, and that no new access tokens may be created for deleted users. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestAuthzQueryConds",
              "documentation": {
                "identifier": "TestAuthzQueryConds",
                "newPage": false,
                "searchKey": "database.TestAuthzQueryConds",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAuthzQueryConds(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAuthzQueryConds(t *testing.T)\n```\n\n🚨 SECURITY: Tests are necessary to ensure security. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestCountRepoCount",
              "documentation": {
                "identifier": "TestCountRepoCount",
                "newPage": false,
                "searchKey": "database.TestCountRepoCount",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCountRepoCount(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCountRepoCount(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestCreateIfUpToDate",
              "documentation": {
                "identifier": "TestCreateIfUpToDate",
                "newPage": false,
                "searchKey": "database.TestCreateIfUpToDate",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCreateIfUpToDate(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCreateIfUpToDate(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestEncryptAuthenticator",
              "documentation": {
                "identifier": "TestEncryptAuthenticator",
                "newPage": false,
                "searchKey": "database.TestEncryptAuthenticator",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncryptAuthenticator(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncryptAuthenticator(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestErrorsInterface",
              "documentation": {
                "identifier": "TestErrorsInterface",
                "newPage": false,
                "searchKey": "database.TestErrorsInterface",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestErrorsInterface(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestErrorsInterface(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestEventLogs_AggregatedCodeIntelEvents",
              "documentation": {
                "identifier": "TestEventLogs_AggregatedCodeIntelEvents",
                "newPage": false,
                "searchKey": "database.TestEventLogs_AggregatedCodeIntelEvents",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEventLogs_AggregatedCodeIntelEvents(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEventLogs_AggregatedCodeIntelEvents(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestEventLogs_AggregatedSearchEvents",
              "documentation": {
                "identifier": "TestEventLogs_AggregatedSearchEvents",
                "newPage": false,
                "searchKey": "database.TestEventLogs_AggregatedSearchEvents",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEventLogs_AggregatedSearchEvents(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEventLogs_AggregatedSearchEvents(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestEventLogs_AggregatedSparseCodeIntelEvents",
              "documentation": {
                "identifier": "TestEventLogs_AggregatedSparseCodeIntelEvents",
                "newPage": false,
                "searchKey": "database.TestEventLogs_AggregatedSparseCodeIntelEvents",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEventLogs_AggregatedSparseCodeIntelEvents(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEventLogs_AggregatedSparseCodeIntelEvents(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestEventLogs_AggregatedSparseSearchEvents",
              "documentation": {
                "identifier": "TestEventLogs_AggregatedSparseSearchEvents",
                "newPage": false,
                "searchKey": "database.TestEventLogs_AggregatedSparseSearchEvents",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEventLogs_AggregatedSparseSearchEvents(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEventLogs_AggregatedSparseSearchEvents(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestEventLogs_CountUniqueUsersPerPeriod",
              "documentation": {
                "identifier": "TestEventLogs_CountUniqueUsersPerPeriod",
                "newPage": false,
                "searchKey": "database.TestEventLogs_CountUniqueUsersPerPeriod",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEventLogs_CountUniqueUsersPerPeriod(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEventLogs_CountUniqueUsersPerPeriod(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestEventLogs_LatestPing",
              "documentation": {
                "identifier": "TestEventLogs_LatestPing",
                "newPage": false,
                "searchKey": "database.TestEventLogs_LatestPing",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEventLogs_LatestPing(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEventLogs_LatestPing(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestEventLogs_ListAll",
              "documentation": {
                "identifier": "TestEventLogs_ListAll",
                "newPage": false,
                "searchKey": "database.TestEventLogs_ListAll",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEventLogs_ListAll(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEventLogs_ListAll(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestEventLogs_SiteUsage",
              "documentation": {
                "identifier": "TestEventLogs_SiteUsage",
                "newPage": false,
                "searchKey": "database.TestEventLogs_SiteUsage",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEventLogs_SiteUsage(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEventLogs_SiteUsage(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestEventLogs_TestCodeIntelligenceRepositoryCounts",
              "documentation": {
                "identifier": "TestEventLogs_TestCodeIntelligenceRepositoryCounts",
                "newPage": false,
                "searchKey": "database.TestEventLogs_TestCodeIntelligenceRepositoryCounts",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEventLogs_TestCodeIntelligenceRepositoryCounts(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEventLogs_TestCodeIntelligenceRepositoryCounts(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestEventLogs_UsersUsageCounts",
              "documentation": {
                "identifier": "TestEventLogs_UsersUsageCounts",
                "newPage": false,
                "searchKey": "database.TestEventLogs_UsersUsageCounts",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEventLogs_UsersUsageCounts(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEventLogs_UsersUsageCounts(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestEventLogs_ValidInfo",
              "documentation": {
                "identifier": "TestEventLogs_ValidInfo",
                "newPage": false,
                "searchKey": "database.TestEventLogs_ValidInfo",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEventLogs_ValidInfo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEventLogs_ValidInfo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestEventLogs_codeIntelligenceWeeklyUsersCount",
              "documentation": {
                "identifier": "TestEventLogs_codeIntelligenceWeeklyUsersCount",
                "newPage": false,
                "searchKey": "database.TestEventLogs_codeIntelligenceWeeklyUsersCount",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEventLogs_codeIntelligenceWeeklyUsersCount(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEventLogs_codeIntelligenceWeeklyUsersCount(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalAccountsMigrator",
              "documentation": {
                "identifier": "TestExternalAccountsMigrator",
                "newPage": false,
                "searchKey": "database.TestExternalAccountsMigrator",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalAccountsMigrator(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalAccountsMigrator(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalAccounts_AssociateUserAndSave",
              "documentation": {
                "identifier": "TestExternalAccounts_AssociateUserAndSave",
                "newPage": false,
                "searchKey": "database.TestExternalAccounts_AssociateUserAndSave",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalAccounts_AssociateUserAndSave(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalAccounts_AssociateUserAndSave(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalAccounts_CreateUserAndSave",
              "documentation": {
                "identifier": "TestExternalAccounts_CreateUserAndSave",
                "newPage": false,
                "searchKey": "database.TestExternalAccounts_CreateUserAndSave",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalAccounts_CreateUserAndSave(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalAccounts_CreateUserAndSave(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalAccounts_CreateUserAndSave_NilData",
              "documentation": {
                "identifier": "TestExternalAccounts_CreateUserAndSave_NilData",
                "newPage": false,
                "searchKey": "database.TestExternalAccounts_CreateUserAndSave_NilData",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalAccounts_CreateUserAndSave_NilData(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalAccounts_CreateUserAndSave_NilData(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalAccounts_Encryption",
              "documentation": {
                "identifier": "TestExternalAccounts_Encryption",
                "newPage": false,
                "searchKey": "database.TestExternalAccounts_Encryption",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalAccounts_Encryption(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalAccounts_Encryption(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalAccounts_List",
              "documentation": {
                "identifier": "TestExternalAccounts_List",
                "newPage": false,
                "searchKey": "database.TestExternalAccounts_List",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalAccounts_List(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalAccounts_List(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalAccounts_LookupUserAndSave",
              "documentation": {
                "identifier": "TestExternalAccounts_LookupUserAndSave",
                "newPage": false,
                "searchKey": "database.TestExternalAccounts_LookupUserAndSave",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalAccounts_LookupUserAndSave(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalAccounts_LookupUserAndSave(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalAccounts_expiredAt",
              "documentation": {
                "identifier": "TestExternalAccounts_expiredAt",
                "newPage": false,
                "searchKey": "database.TestExternalAccounts_expiredAt",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalAccounts_expiredAt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalAccounts_expiredAt(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalServiceConfigMigrator",
              "documentation": {
                "identifier": "TestExternalServiceConfigMigrator",
                "newPage": false,
                "searchKey": "database.TestExternalServiceConfigMigrator",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalServiceConfigMigrator(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalServiceConfigMigrator(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalServiceStore_GetExternalServiceSyncJobs",
              "documentation": {
                "identifier": "TestExternalServiceStore_GetExternalServiceSyncJobs",
                "newPage": false,
                "searchKey": "database.TestExternalServiceStore_GetExternalServiceSyncJobs",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalServiceStore_GetExternalServiceSyncJobs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalServiceStore_GetExternalServiceSyncJobs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalServiceStore_SyncDue",
              "documentation": {
                "identifier": "TestExternalServiceStore_SyncDue",
                "newPage": false,
                "searchKey": "database.TestExternalServiceStore_SyncDue",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalServiceStore_SyncDue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalServiceStore_SyncDue(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalServicesListOptions_sqlConditions",
              "documentation": {
                "identifier": "TestExternalServicesListOptions_sqlConditions",
                "newPage": false,
                "searchKey": "database.TestExternalServicesListOptions_sqlConditions",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalServicesListOptions_sqlConditions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalServicesListOptions_sqlConditions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalServicesStore_Count",
              "documentation": {
                "identifier": "TestExternalServicesStore_Count",
                "newPage": false,
                "searchKey": "database.TestExternalServicesStore_Count",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalServicesStore_Count(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalServicesStore_Count(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalServicesStore_Create",
              "documentation": {
                "identifier": "TestExternalServicesStore_Create",
                "newPage": false,
                "searchKey": "database.TestExternalServicesStore_Create",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalServicesStore_Create(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalServicesStore_Create(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalServicesStore_CreateWithTierEnforcement",
              "documentation": {
                "identifier": "TestExternalServicesStore_CreateWithTierEnforcement",
                "newPage": false,
                "searchKey": "database.TestExternalServicesStore_CreateWithTierEnforcement",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalServicesStore_CreateWithTierEnforcement(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalServicesStore_CreateWithTierEnforcement(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalServicesStore_Delete",
              "documentation": {
                "identifier": "TestExternalServicesStore_Delete",
                "newPage": false,
                "searchKey": "database.TestExternalServicesStore_Delete",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalServicesStore_Delete(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalServicesStore_Delete(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalServicesStore_DistinctKinds",
              "documentation": {
                "identifier": "TestExternalServicesStore_DistinctKinds",
                "newPage": false,
                "searchKey": "database.TestExternalServicesStore_DistinctKinds",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalServicesStore_DistinctKinds(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalServicesStore_DistinctKinds(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalServicesStore_GetByID",
              "documentation": {
                "identifier": "TestExternalServicesStore_GetByID",
                "newPage": false,
                "searchKey": "database.TestExternalServicesStore_GetByID",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalServicesStore_GetByID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalServicesStore_GetByID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalServicesStore_GetByID_Encrypted",
              "documentation": {
                "identifier": "TestExternalServicesStore_GetByID_Encrypted",
                "newPage": false,
                "searchKey": "database.TestExternalServicesStore_GetByID_Encrypted",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalServicesStore_GetByID_Encrypted(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalServicesStore_GetByID_Encrypted(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalServicesStore_List",
              "documentation": {
                "identifier": "TestExternalServicesStore_List",
                "newPage": false,
                "searchKey": "database.TestExternalServicesStore_List",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalServicesStore_List(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalServicesStore_List(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalServicesStore_OneCloudDefaultPerKind",
              "documentation": {
                "identifier": "TestExternalServicesStore_OneCloudDefaultPerKind",
                "newPage": false,
                "searchKey": "database.TestExternalServicesStore_OneCloudDefaultPerKind",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalServicesStore_OneCloudDefaultPerKind(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalServicesStore_OneCloudDefaultPerKind(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalServicesStore_Update",
              "documentation": {
                "identifier": "TestExternalServicesStore_Update",
                "newPage": false,
                "searchKey": "database.TestExternalServicesStore_Update",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalServicesStore_Update(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalServicesStore_Update(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalServicesStore_Upsert",
              "documentation": {
                "identifier": "TestExternalServicesStore_Upsert",
                "newPage": false,
                "searchKey": "database.TestExternalServicesStore_Upsert",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalServicesStore_Upsert(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalServicesStore_Upsert(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestExternalServicesStore_ValidateConfig",
              "documentation": {
                "identifier": "TestExternalServicesStore_ValidateConfig",
                "newPage": false,
                "searchKey": "database.TestExternalServicesStore_ValidateConfig",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalServicesStore_ValidateConfig(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalServicesStore_ValidateConfig(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestFeatureFlagStore",
              "documentation": {
                "identifier": "TestFeatureFlagStore",
                "newPage": false,
                "searchKey": "database.TestFeatureFlagStore",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFeatureFlagStore(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFeatureFlagStore(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestGetAffiliatedSyncErrors",
              "documentation": {
                "identifier": "TestGetAffiliatedSyncErrors",
                "newPage": false,
                "searchKey": "database.TestGetAffiliatedSyncErrors",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetAffiliatedSyncErrors(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetAffiliatedSyncErrors(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestGetLastSyncError",
              "documentation": {
                "identifier": "TestGetLastSyncError",
                "newPage": false,
                "searchKey": "database.TestGetLastSyncError",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetLastSyncError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetLastSyncError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestGetLatestSchemaSettings",
              "documentation": {
                "identifier": "TestGetLatestSchemaSettings",
                "newPage": false,
                "searchKey": "database.TestGetLatestSchemaSettings",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetLatestSchemaSettings(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetLatestSchemaSettings(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestGitserverRepoUpsert",
              "documentation": {
                "identifier": "TestGitserverRepoUpsert",
                "newPage": false,
                "searchKey": "database.TestGitserverRepoUpsert",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGitserverRepoUpsert(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGitserverRepoUpsert(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestGitserverRepoUpsertNullShard",
              "documentation": {
                "identifier": "TestGitserverRepoUpsertNullShard",
                "newPage": false,
                "searchKey": "database.TestGitserverRepoUpsertNullShard",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGitserverRepoUpsertNullShard(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGitserverRepoUpsertNullShard(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestGitserverReposGetByID",
              "documentation": {
                "identifier": "TestGitserverReposGetByID",
                "newPage": false,
                "searchKey": "database.TestGitserverReposGetByID",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGitserverReposGetByID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGitserverReposGetByID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestIterateRepoGitserverStatus",
              "documentation": {
                "identifier": "TestIterateRepoGitserverStatus",
                "newPage": false,
                "searchKey": "database.TestIterateRepoGitserverStatus",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIterateRepoGitserverStatus(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIterateRepoGitserverStatus(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestListDefaultReposUncloned",
              "documentation": {
                "identifier": "TestListDefaultReposUncloned",
                "newPage": false,
                "searchKey": "database.TestListDefaultReposUncloned",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestListDefaultReposUncloned(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestListDefaultReposUncloned(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestListSavedSearchesByUserID",
              "documentation": {
                "identifier": "TestListSavedSearchesByUserID",
                "newPage": false,
                "searchKey": "database.TestListSavedSearchesByUserID",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestListSavedSearchesByUserID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestListSavedSearchesByUserID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestMain",
              "documentation": {
                "identifier": "TestMain",
                "newPage": false,
                "searchKey": "database.TestMain",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMain(m *testing.M)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMain(m *testing.M)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestNamespaces",
              "documentation": {
                "identifier": "TestNamespaces",
                "newPage": false,
                "searchKey": "database.TestNamespaces",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNamespaces(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNamespaces(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestOrgInvitations",
              "documentation": {
                "identifier": "TestOrgInvitations",
                "newPage": false,
                "searchKey": "database.TestOrgInvitations",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOrgInvitations(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOrgInvitations(t *testing.T)\n```\n\n🚨 SECURITY: This tests the routine that creates org invitations and returns the invitation secret value to the user. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestOrgMembers_CreateMembershipInOrgsForAllUsers",
              "documentation": {
                "identifier": "TestOrgMembers_CreateMembershipInOrgsForAllUsers",
                "newPage": false,
                "searchKey": "database.TestOrgMembers_CreateMembershipInOrgsForAllUsers",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOrgMembers_CreateMembershipInOrgsForAllUsers(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOrgMembers_CreateMembershipInOrgsForAllUsers(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestOrgs_Count",
              "documentation": {
                "identifier": "TestOrgs_Count",
                "newPage": false,
                "searchKey": "database.TestOrgs_Count",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOrgs_Count(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOrgs_Count(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestOrgs_Delete",
              "documentation": {
                "identifier": "TestOrgs_Delete",
                "newPage": false,
                "searchKey": "database.TestOrgs_Delete",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOrgs_Delete(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOrgs_Delete(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestOrgs_ValidNames",
              "documentation": {
                "identifier": "TestOrgs_ValidNames",
                "newPage": false,
                "searchKey": "database.TestOrgs_ValidNames",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOrgs_ValidNames(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOrgs_ValidNames(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestParseIncludePattern",
              "documentation": {
                "identifier": "TestParseIncludePattern",
                "newPage": false,
                "searchKey": "database.TestParseIncludePattern",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseIncludePattern(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseIncludePattern(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestPassword",
              "documentation": {
                "identifier": "TestPassword",
                "newPage": false,
                "searchKey": "database.TestPassword",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPassword(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPassword(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_Count",
              "documentation": {
                "identifier": "TestRepos_Count",
                "newPage": false,
                "searchKey": "database.TestRepos_Count",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_Count(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_Count(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_Create",
              "documentation": {
                "identifier": "TestRepos_Create",
                "newPage": false,
                "searchKey": "database.TestRepos_Create",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_Create(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_Create(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_Delete",
              "documentation": {
                "identifier": "TestRepos_Delete",
                "newPage": false,
                "searchKey": "database.TestRepos_Delete",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_Delete(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_Delete(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_Get",
              "documentation": {
                "identifier": "TestRepos_Get",
                "newPage": false,
                "searchKey": "database.TestRepos_Get",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_Get(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_Get(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_GetByIDs",
              "documentation": {
                "identifier": "TestRepos_GetByIDs",
                "newPage": false,
                "searchKey": "database.TestRepos_GetByIDs",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_GetByIDs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_GetByIDs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_List",
              "documentation": {
                "identifier": "TestRepos_List",
                "newPage": false,
                "searchKey": "database.TestRepos_List",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_List(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_List(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_ListRepoNames",
              "documentation": {
                "identifier": "TestRepos_ListRepoNames",
                "newPage": false,
                "searchKey": "database.TestRepos_ListRepoNames",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_ListRepoNames(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_ListRepoNames(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_ListRepoNames_UserIDAndExternalServiceIDsMutuallyExclusive",
              "documentation": {
                "identifier": "TestRepos_ListRepoNames_UserIDAndExternalServiceIDsMutuallyExclusive",
                "newPage": false,
                "searchKey": "database.TestRepos_ListRepoNames_UserIDAndExternalServiceIDsMutuallyExclusive",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_ListRepoNames_UserIDAndExternalServiceIDsMutuallyExclusive(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_ListRepoNames_UserIDAndExternalServiceIDsMutuallyExclusive(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_ListRepoNames_cloned",
              "documentation": {
                "identifier": "TestRepos_ListRepoNames_cloned",
                "newPage": false,
                "searchKey": "database.TestRepos_ListRepoNames_cloned",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_ListRepoNames_cloned(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_ListRepoNames_cloned(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_ListRepoNames_correctFiltering",
              "documentation": {
                "identifier": "TestRepos_ListRepoNames_correctFiltering",
                "newPage": false,
                "searchKey": "database.TestRepos_ListRepoNames_correctFiltering",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_ListRepoNames_correctFiltering(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_ListRepoNames_correctFiltering(t *testing.T)\n```\n\nTestRepos_ListRepoNames_query tests the behavior of Repos.ListRepoNames when called with a query. Test batch 1 (correct filtering) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_ListRepoNames_externalRepoPrefixes",
              "documentation": {
                "identifier": "TestRepos_ListRepoNames_externalRepoPrefixes",
                "newPage": false,
                "searchKey": "database.TestRepos_ListRepoNames_externalRepoPrefixes",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_ListRepoNames_externalRepoPrefixes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_ListRepoNames_externalRepoPrefixes(t *testing.T)\n```\n\nThis function tests for both individual uses of ExternalRepoIncludePrefixes, ExternalRepoExcludePrefixes as well as combination of these two options. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_ListRepoNames_externalServiceID",
              "documentation": {
                "identifier": "TestRepos_ListRepoNames_externalServiceID",
                "newPage": false,
                "searchKey": "database.TestRepos_ListRepoNames_externalServiceID",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_ListRepoNames_externalServiceID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_ListRepoNames_externalServiceID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_ListRepoNames_fork",
              "documentation": {
                "identifier": "TestRepos_ListRepoNames_fork",
                "newPage": false,
                "searchKey": "database.TestRepos_ListRepoNames_fork",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_ListRepoNames_fork(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_ListRepoNames_fork(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_ListRepoNames_ids",
              "documentation": {
                "identifier": "TestRepos_ListRepoNames_ids",
                "newPage": false,
                "searchKey": "database.TestRepos_ListRepoNames_ids",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_ListRepoNames_ids(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_ListRepoNames_ids(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_ListRepoNames_pagination",
              "documentation": {
                "identifier": "TestRepos_ListRepoNames_pagination",
                "newPage": false,
                "searchKey": "database.TestRepos_ListRepoNames_pagination",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_ListRepoNames_pagination(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_ListRepoNames_pagination(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_ListRepoNames_patterns",
              "documentation": {
                "identifier": "TestRepos_ListRepoNames_patterns",
                "newPage": false,
                "searchKey": "database.TestRepos_ListRepoNames_patterns",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_ListRepoNames_patterns(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_ListRepoNames_patterns(t *testing.T)\n```\n\nTestRepos_ListRepoNames_patterns tests the behavior of Repos.List when called with IncludePatterns and ExcludePattern. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_ListRepoNames_query2",
              "documentation": {
                "identifier": "TestRepos_ListRepoNames_query2",
                "newPage": false,
                "searchKey": "database.TestRepos_ListRepoNames_query2",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_ListRepoNames_query2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_ListRepoNames_query2(t *testing.T)\n```\n\nTest batch 2 (correct ranking) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_ListRepoNames_queryAndPatternsMutuallyExclusive",
              "documentation": {
                "identifier": "TestRepos_ListRepoNames_queryAndPatternsMutuallyExclusive",
                "newPage": false,
                "searchKey": "database.TestRepos_ListRepoNames_queryAndPatternsMutuallyExclusive",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_ListRepoNames_queryAndPatternsMutuallyExclusive(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_ListRepoNames_queryAndPatternsMutuallyExclusive(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_ListRepoNames_queryPattern",
              "documentation": {
                "identifier": "TestRepos_ListRepoNames_queryPattern",
                "newPage": false,
                "searchKey": "database.TestRepos_ListRepoNames_queryPattern",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_ListRepoNames_queryPattern(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_ListRepoNames_queryPattern(t *testing.T)\n```\n\nTestRepos_ListRepoNames_patterns tests the behavior of Repos.List when called with a QueryPattern. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_ListRepoNames_serviceTypes",
              "documentation": {
                "identifier": "TestRepos_ListRepoNames_serviceTypes",
                "newPage": false,
                "searchKey": "database.TestRepos_ListRepoNames_serviceTypes",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_ListRepoNames_serviceTypes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_ListRepoNames_serviceTypes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_ListRepoNames_sort",
              "documentation": {
                "identifier": "TestRepos_ListRepoNames_sort",
                "newPage": false,
                "searchKey": "database.TestRepos_ListRepoNames_sort",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_ListRepoNames_sort(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_ListRepoNames_sort(t *testing.T)\n```\n\nTest sort \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_ListRepoNames_useOr",
              "documentation": {
                "identifier": "TestRepos_ListRepoNames_useOr",
                "newPage": false,
                "searchKey": "database.TestRepos_ListRepoNames_useOr",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_ListRepoNames_useOr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_ListRepoNames_useOr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_ListRepoNames_userID",
              "documentation": {
                "identifier": "TestRepos_ListRepoNames_userID",
                "newPage": false,
                "searchKey": "database.TestRepos_ListRepoNames_userID",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_ListRepoNames_userID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_ListRepoNames_userID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_ListRepos_UserPublicRepos",
              "documentation": {
                "identifier": "TestRepos_ListRepos_UserPublicRepos",
                "newPage": false,
                "searchKey": "database.TestRepos_ListRepos_UserPublicRepos",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_ListRepos_UserPublicRepos(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_ListRepos_UserPublicRepos(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_List_FailedSync",
              "documentation": {
                "identifier": "TestRepos_List_FailedSync",
                "newPage": false,
                "searchKey": "database.TestRepos_List_FailedSync",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_List_FailedSync(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_List_FailedSync(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_List_cloned",
              "documentation": {
                "identifier": "TestRepos_List_cloned",
                "newPage": false,
                "searchKey": "database.TestRepos_List_cloned",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_List_cloned(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_List_cloned(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_List_correct_ranking",
              "documentation": {
                "identifier": "TestRepos_List_correct_ranking",
                "newPage": false,
                "searchKey": "database.TestRepos_List_correct_ranking",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_List_correct_ranking(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_List_correct_ranking(t *testing.T)\n```\n\nTest batch 2 (correct ranking) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_List_externalServiceID",
              "documentation": {
                "identifier": "TestRepos_List_externalServiceID",
                "newPage": false,
                "searchKey": "database.TestRepos_List_externalServiceID",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_List_externalServiceID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_List_externalServiceID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_List_fork",
              "documentation": {
                "identifier": "TestRepos_List_fork",
                "newPage": false,
                "searchKey": "database.TestRepos_List_fork",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_List_fork(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_List_fork(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_List_ids",
              "documentation": {
                "identifier": "TestRepos_List_ids",
                "newPage": false,
                "searchKey": "database.TestRepos_List_ids",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_List_ids(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_List_ids(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_List_pagination",
              "documentation": {
                "identifier": "TestRepos_List_pagination",
                "newPage": false,
                "searchKey": "database.TestRepos_List_pagination",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_List_pagination(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_List_pagination(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_List_patterns",
              "documentation": {
                "identifier": "TestRepos_List_patterns",
                "newPage": false,
                "searchKey": "database.TestRepos_List_patterns",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_List_patterns(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_List_patterns(t *testing.T)\n```\n\nTestRepos_List_patterns tests the behavior of Repos.List when called with IncludePatterns and ExcludePattern. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_List_query1",
              "documentation": {
                "identifier": "TestRepos_List_query1",
                "newPage": false,
                "searchKey": "database.TestRepos_List_query1",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_List_query1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_List_query1(t *testing.T)\n```\n\nTestRepos_List_query tests the behavior of Repos.List when called with a query. Test batch 1 (correct filtering) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_List_queryAndPatternsMutuallyExclusive",
              "documentation": {
                "identifier": "TestRepos_List_queryAndPatternsMutuallyExclusive",
                "newPage": false,
                "searchKey": "database.TestRepos_List_queryAndPatternsMutuallyExclusive",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_List_queryAndPatternsMutuallyExclusive(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_List_queryAndPatternsMutuallyExclusive(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_List_queryPattern",
              "documentation": {
                "identifier": "TestRepos_List_queryPattern",
                "newPage": false,
                "searchKey": "database.TestRepos_List_queryPattern",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_List_queryPattern(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_List_queryPattern(t *testing.T)\n```\n\nTestRepos_List_patterns tests the behavior of Repos.List when called with a QueryPattern. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_List_serviceTypes",
              "documentation": {
                "identifier": "TestRepos_List_serviceTypes",
                "newPage": false,
                "searchKey": "database.TestRepos_List_serviceTypes",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_List_serviceTypes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_List_serviceTypes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_List_sort",
              "documentation": {
                "identifier": "TestRepos_List_sort",
                "newPage": false,
                "searchKey": "database.TestRepos_List_sort",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_List_sort(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_List_sort(t *testing.T)\n```\n\nTest sort \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_List_useOr",
              "documentation": {
                "identifier": "TestRepos_List_useOr",
                "newPage": false,
                "searchKey": "database.TestRepos_List_useOr",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_List_useOr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_List_useOr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_RepoExternalServices",
              "documentation": {
                "identifier": "TestRepos_RepoExternalServices",
                "newPage": false,
                "searchKey": "database.TestRepos_RepoExternalServices",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_RepoExternalServices(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_RepoExternalServices(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_Upsert",
              "documentation": {
                "identifier": "TestRepos_Upsert",
                "newPage": false,
                "searchKey": "database.TestRepos_Upsert",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_Upsert(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_Upsert(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_UpsertForkAndArchivedFields",
              "documentation": {
                "identifier": "TestRepos_UpsertForkAndArchivedFields",
                "newPage": false,
                "searchKey": "database.TestRepos_UpsertForkAndArchivedFields",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_UpsertForkAndArchivedFields(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_UpsertForkAndArchivedFields(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_createRepo",
              "documentation": {
                "identifier": "TestRepos_createRepo",
                "newPage": false,
                "searchKey": "database.TestRepos_createRepo",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_createRepo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_createRepo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_createRepo_dupe",
              "documentation": {
                "identifier": "TestRepos_createRepo_dupe",
                "newPage": false,
                "searchKey": "database.TestRepos_createRepo_dupe",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_createRepo_dupe(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_createRepo_dupe(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_getReposBySQL_checkPermissions",
              "documentation": {
                "identifier": "TestRepos_getReposBySQL_checkPermissions",
                "newPage": false,
                "searchKey": "database.TestRepos_getReposBySQL_checkPermissions",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_getReposBySQL_checkPermissions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_getReposBySQL_checkPermissions(t *testing.T)\n```\n\n🚨 SECURITY: Tests are necessary to ensure security. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_getReposBySQL_permissionsUserMapping",
              "documentation": {
                "identifier": "TestRepos_getReposBySQL_permissionsUserMapping",
                "newPage": false,
                "searchKey": "database.TestRepos_getReposBySQL_permissionsUserMapping",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_getReposBySQL_permissionsUserMapping(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_getReposBySQL_permissionsUserMapping(t *testing.T)\n```\n\n🚨 SECURITY: Tests are necessary to ensure security. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestRepos_nonSiteAdminCanViewOwnPrivateCode",
              "documentation": {
                "identifier": "TestRepos_nonSiteAdminCanViewOwnPrivateCode",
                "newPage": false,
                "searchKey": "database.TestRepos_nonSiteAdminCanViewOwnPrivateCode",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepos_nonSiteAdminCanViewOwnPrivateCode(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepos_nonSiteAdminCanViewOwnPrivateCode(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSanitizeToUTF8",
              "documentation": {
                "identifier": "TestSanitizeToUTF8",
                "newPage": false,
                "searchKey": "database.TestSanitizeToUTF8",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSanitizeToUTF8(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSanitizeToUTF8(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSavedSearchesCreate",
              "documentation": {
                "identifier": "TestSavedSearchesCreate",
                "newPage": false,
                "searchKey": "database.TestSavedSearchesCreate",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSavedSearchesCreate(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSavedSearchesCreate(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSavedSearchesDelete",
              "documentation": {
                "identifier": "TestSavedSearchesDelete",
                "newPage": false,
                "searchKey": "database.TestSavedSearchesDelete",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSavedSearchesDelete(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSavedSearchesDelete(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSavedSearchesGetByID",
              "documentation": {
                "identifier": "TestSavedSearchesGetByID",
                "newPage": false,
                "searchKey": "database.TestSavedSearchesGetByID",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSavedSearchesGetByID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSavedSearchesGetByID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSavedSearchesGetByUserID",
              "documentation": {
                "identifier": "TestSavedSearchesGetByUserID",
                "newPage": false,
                "searchKey": "database.TestSavedSearchesGetByUserID",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSavedSearchesGetByUserID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSavedSearchesGetByUserID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSavedSearchesIsEmpty",
              "documentation": {
                "identifier": "TestSavedSearchesIsEmpty",
                "newPage": false,
                "searchKey": "database.TestSavedSearchesIsEmpty",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSavedSearchesIsEmpty(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSavedSearchesIsEmpty(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSavedSearchesUpdate",
              "documentation": {
                "identifier": "TestSavedSearchesUpdate",
                "newPage": false,
                "searchKey": "database.TestSavedSearchesUpdate",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSavedSearchesUpdate(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSavedSearchesUpdate(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSearchContexts_CaseInsensitiveNames",
              "documentation": {
                "identifier": "TestSearchContexts_CaseInsensitiveNames",
                "newPage": false,
                "searchKey": "database.TestSearchContexts_CaseInsensitiveNames",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchContexts_CaseInsensitiveNames(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchContexts_CaseInsensitiveNames(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSearchContexts_CreateAndSetRepositoryRevisions",
              "documentation": {
                "identifier": "TestSearchContexts_CreateAndSetRepositoryRevisions",
                "newPage": false,
                "searchKey": "database.TestSearchContexts_CreateAndSetRepositoryRevisions",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchContexts_CreateAndSetRepositoryRevisions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchContexts_CreateAndSetRepositoryRevisions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSearchContexts_Delete",
              "documentation": {
                "identifier": "TestSearchContexts_Delete",
                "newPage": false,
                "searchKey": "database.TestSearchContexts_Delete",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchContexts_Delete(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchContexts_Delete(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSearchContexts_Get",
              "documentation": {
                "identifier": "TestSearchContexts_Get",
                "newPage": false,
                "searchKey": "database.TestSearchContexts_Get",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchContexts_Get(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchContexts_Get(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSearchContexts_List",
              "documentation": {
                "identifier": "TestSearchContexts_List",
                "newPage": false,
                "searchKey": "database.TestSearchContexts_List",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchContexts_List(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchContexts_List(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSearchContexts_OrderBy",
              "documentation": {
                "identifier": "TestSearchContexts_OrderBy",
                "newPage": false,
                "searchKey": "database.TestSearchContexts_OrderBy",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchContexts_OrderBy(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchContexts_OrderBy(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSearchContexts_PaginationAndCount",
              "documentation": {
                "identifier": "TestSearchContexts_PaginationAndCount",
                "newPage": false,
                "searchKey": "database.TestSearchContexts_PaginationAndCount",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchContexts_PaginationAndCount(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchContexts_PaginationAndCount(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSearchContexts_Permissions",
              "documentation": {
                "identifier": "TestSearchContexts_Permissions",
                "newPage": false,
                "searchKey": "database.TestSearchContexts_Permissions",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchContexts_Permissions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchContexts_Permissions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSearchContexts_Update",
              "documentation": {
                "identifier": "TestSearchContexts_Update",
                "newPage": false,
                "searchKey": "database.TestSearchContexts_Update",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchContexts_Update(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchContexts_Update(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSecurityEventLogs_ValidInfo",
              "documentation": {
                "identifier": "TestSecurityEventLogs_ValidInfo",
                "newPage": false,
                "searchKey": "database.TestSecurityEventLogs_ValidInfo",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSecurityEventLogs_ValidInfo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSecurityEventLogs_ValidInfo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSetCloneStatus",
              "documentation": {
                "identifier": "TestSetCloneStatus",
                "newPage": false,
                "searchKey": "database.TestSetCloneStatus",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSetCloneStatus(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSetCloneStatus(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSetLastError",
              "documentation": {
                "identifier": "TestSetLastError",
                "newPage": false,
                "searchKey": "database.TestSetLastError",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSetLastError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSetLastError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSettings_ListAll",
              "documentation": {
                "identifier": "TestSettings_ListAll",
                "newPage": false,
                "searchKey": "database.TestSettings_ListAll",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSettings_ListAll(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSettings_ListAll(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestSurveyResponses_Create_Count",
              "documentation": {
                "identifier": "TestSurveyResponses_Create_Count",
                "newPage": false,
                "searchKey": "database.TestSurveyResponses_Create_Count",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSurveyResponses_Create_Count(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSurveyResponses_Create_Count(t *testing.T)\n```\n\nTestSurveyResponses_Create_Count tests creation and counting of database survey responses \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUpsertAuthorizationToExternalService",
              "documentation": {
                "identifier": "TestUpsertAuthorizationToExternalService",
                "newPage": false,
                "searchKey": "database.TestUpsertAuthorizationToExternalService",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUpsertAuthorizationToExternalService(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUpsertAuthorizationToExternalService(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserCredentialNotFoundErr",
              "documentation": {
                "identifier": "TestUserCredentialNotFoundErr",
                "newPage": false,
                "searchKey": "database.TestUserCredentialNotFoundErr",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserCredentialNotFoundErr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserCredentialNotFoundErr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserCredential_Authenticator",
              "documentation": {
                "identifier": "TestUserCredential_Authenticator",
                "newPage": false,
                "searchKey": "database.TestUserCredential_Authenticator",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserCredential_Authenticator(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserCredential_Authenticator(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserCredential_SetAuthenticator",
              "documentation": {
                "identifier": "TestUserCredential_SetAuthenticator",
                "newPage": false,
                "searchKey": "database.TestUserCredential_SetAuthenticator",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserCredential_SetAuthenticator(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserCredential_SetAuthenticator(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserCredentials_CreateUpdate",
              "documentation": {
                "identifier": "TestUserCredentials_CreateUpdate",
                "newPage": false,
                "searchKey": "database.TestUserCredentials_CreateUpdate",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserCredentials_CreateUpdate(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserCredentials_CreateUpdate(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserCredentials_Delete",
              "documentation": {
                "identifier": "TestUserCredentials_Delete",
                "newPage": false,
                "searchKey": "database.TestUserCredentials_Delete",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserCredentials_Delete(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserCredentials_Delete(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserCredentials_GetByID",
              "documentation": {
                "identifier": "TestUserCredentials_GetByID",
                "newPage": false,
                "searchKey": "database.TestUserCredentials_GetByID",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserCredentials_GetByID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserCredentials_GetByID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserCredentials_GetByScope",
              "documentation": {
                "identifier": "TestUserCredentials_GetByScope",
                "newPage": false,
                "searchKey": "database.TestUserCredentials_GetByScope",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserCredentials_GetByScope(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserCredentials_GetByScope(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserCredentials_Invalid",
              "documentation": {
                "identifier": "TestUserCredentials_Invalid",
                "newPage": false,
                "searchKey": "database.TestUserCredentials_Invalid",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserCredentials_Invalid(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserCredentials_Invalid(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserCredentials_List",
              "documentation": {
                "identifier": "TestUserCredentials_List",
                "newPage": false,
                "searchKey": "database.TestUserCredentials_List",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserCredentials_List(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserCredentials_List(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserEmail_NeedsVerificationCoolDown",
              "documentation": {
                "identifier": "TestUserEmail_NeedsVerificationCoolDown",
                "newPage": false,
                "searchKey": "database.TestUserEmail_NeedsVerificationCoolDown",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserEmail_NeedsVerificationCoolDown(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserEmail_NeedsVerificationCoolDown(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserEmails_Add_Remove",
              "documentation": {
                "identifier": "TestUserEmails_Add_Remove",
                "newPage": false,
                "searchKey": "database.TestUserEmails_Add_Remove",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserEmails_Add_Remove(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserEmails_Add_Remove(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserEmails_Get",
              "documentation": {
                "identifier": "TestUserEmails_Get",
                "newPage": false,
                "searchKey": "database.TestUserEmails_Get",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserEmails_Get(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserEmails_Get(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserEmails_GetLatestVerificationSentEmail",
              "documentation": {
                "identifier": "TestUserEmails_GetLatestVerificationSentEmail",
                "newPage": false,
                "searchKey": "database.TestUserEmails_GetLatestVerificationSentEmail",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserEmails_GetLatestVerificationSentEmail(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserEmails_GetLatestVerificationSentEmail(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserEmails_GetPrimary",
              "documentation": {
                "identifier": "TestUserEmails_GetPrimary",
                "newPage": false,
                "searchKey": "database.TestUserEmails_GetPrimary",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserEmails_GetPrimary(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserEmails_GetPrimary(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserEmails_GetVerifiedEmails",
              "documentation": {
                "identifier": "TestUserEmails_GetVerifiedEmails",
                "newPage": false,
                "searchKey": "database.TestUserEmails_GetVerifiedEmails",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserEmails_GetVerifiedEmails(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserEmails_GetVerifiedEmails(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserEmails_ListByUser",
              "documentation": {
                "identifier": "TestUserEmails_ListByUser",
                "newPage": false,
                "searchKey": "database.TestUserEmails_ListByUser",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserEmails_ListByUser(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserEmails_ListByUser(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserEmails_SetLastVerificationSentAt",
              "documentation": {
                "identifier": "TestUserEmails_SetLastVerificationSentAt",
                "newPage": false,
                "searchKey": "database.TestUserEmails_SetLastVerificationSentAt",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserEmails_SetLastVerificationSentAt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserEmails_SetLastVerificationSentAt(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserEmails_SetPrimary",
              "documentation": {
                "identifier": "TestUserEmails_SetPrimary",
                "newPage": false,
                "searchKey": "database.TestUserEmails_SetPrimary",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserEmails_SetPrimary(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserEmails_SetPrimary(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserEmails_SetVerified",
              "documentation": {
                "identifier": "TestUserEmails_SetVerified",
                "newPage": false,
                "searchKey": "database.TestUserEmails_SetVerified",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserEmails_SetVerified(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserEmails_SetVerified(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserPublicRepos_Set",
              "documentation": {
                "identifier": "TestUserPublicRepos_Set",
                "newPage": false,
                "searchKey": "database.TestUserPublicRepos_Set",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserPublicRepos_Set(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserPublicRepos_Set(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUserPublicRepos_SetUserRepos",
              "documentation": {
                "identifier": "TestUserPublicRepos_SetUserRepos",
                "newPage": false,
                "searchKey": "database.TestUserPublicRepos_SetUserRepos",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserPublicRepos_SetUserRepos(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserPublicRepos_SetUserRepos(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUsers_BuiltinAuth",
              "documentation": {
                "identifier": "TestUsers_BuiltinAuth",
                "newPage": false,
                "searchKey": "database.TestUsers_BuiltinAuth",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers_BuiltinAuth(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers_BuiltinAuth(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUsers_BuiltinAuthPasswordResetRateLimit",
              "documentation": {
                "identifier": "TestUsers_BuiltinAuthPasswordResetRateLimit",
                "newPage": false,
                "searchKey": "database.TestUsers_BuiltinAuthPasswordResetRateLimit",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers_BuiltinAuthPasswordResetRateLimit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers_BuiltinAuthPasswordResetRateLimit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUsers_BuiltinAuth_VerifiedEmail",
              "documentation": {
                "identifier": "TestUsers_BuiltinAuth_VerifiedEmail",
                "newPage": false,
                "searchKey": "database.TestUsers_BuiltinAuth_VerifiedEmail",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers_BuiltinAuth_VerifiedEmail(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers_BuiltinAuth_VerifiedEmail(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUsers_CheckAndDecrementInviteQuota",
              "documentation": {
                "identifier": "TestUsers_CheckAndDecrementInviteQuota",
                "newPage": false,
                "searchKey": "database.TestUsers_CheckAndDecrementInviteQuota",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers_CheckAndDecrementInviteQuota(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers_CheckAndDecrementInviteQuota(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUsers_CreatePassword",
              "documentation": {
                "identifier": "TestUsers_CreatePassword",
                "newPage": false,
                "searchKey": "database.TestUsers_CreatePassword",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers_CreatePassword(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers_CreatePassword(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUsers_Create_SiteAdmin",
              "documentation": {
                "identifier": "TestUsers_Create_SiteAdmin",
                "newPage": false,
                "searchKey": "database.TestUsers_Create_SiteAdmin",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers_Create_SiteAdmin(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers_Create_SiteAdmin(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUsers_Create_checkPasswordLength",
              "documentation": {
                "identifier": "TestUsers_Create_checkPasswordLength",
                "newPage": false,
                "searchKey": "database.TestUsers_Create_checkPasswordLength",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers_Create_checkPasswordLength(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers_Create_checkPasswordLength(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUsers_Delete",
              "documentation": {
                "identifier": "TestUsers_Delete",
                "newPage": false,
                "searchKey": "database.TestUsers_Delete",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers_Delete(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers_Delete(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUsers_GetByUsernames",
              "documentation": {
                "identifier": "TestUsers_GetByUsernames",
                "newPage": false,
                "searchKey": "database.TestUsers_GetByUsernames",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers_GetByUsernames(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers_GetByUsernames(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUsers_GetByVerifiedEmail",
              "documentation": {
                "identifier": "TestUsers_GetByVerifiedEmail",
                "newPage": false,
                "searchKey": "database.TestUsers_GetByVerifiedEmail",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers_GetByVerifiedEmail(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers_GetByVerifiedEmail(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUsers_HasTag",
              "documentation": {
                "identifier": "TestUsers_HasTag",
                "newPage": false,
                "searchKey": "database.TestUsers_HasTag",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers_HasTag(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers_HasTag(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUsers_InvalidateSessions",
              "documentation": {
                "identifier": "TestUsers_InvalidateSessions",
                "newPage": false,
                "searchKey": "database.TestUsers_InvalidateSessions",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers_InvalidateSessions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers_InvalidateSessions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUsers_ListCount",
              "documentation": {
                "identifier": "TestUsers_ListCount",
                "newPage": false,
                "searchKey": "database.TestUsers_ListCount",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers_ListCount(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers_ListCount(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUsers_PasswordResetExpiry",
              "documentation": {
                "identifier": "TestUsers_PasswordResetExpiry",
                "newPage": false,
                "searchKey": "database.TestUsers_PasswordResetExpiry",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers_PasswordResetExpiry(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers_PasswordResetExpiry(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUsers_SetTag",
              "documentation": {
                "identifier": "TestUsers_SetTag",
                "newPage": false,
                "searchKey": "database.TestUsers_SetTag",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers_SetTag(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers_SetTag(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUsers_Update",
              "documentation": {
                "identifier": "TestUsers_Update",
                "newPage": false,
                "searchKey": "database.TestUsers_Update",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers_Update(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers_Update(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUsers_UpdatePassword",
              "documentation": {
                "identifier": "TestUsers_UpdatePassword",
                "newPage": false,
                "searchKey": "database.TestUsers_UpdatePassword",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers_UpdatePassword(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers_UpdatePassword(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#TestUsers_ValidUsernames",
              "documentation": {
                "identifier": "TestUsers_ValidUsernames",
                "newPage": false,
                "searchKey": "database.TestUsers_ValidUsernames",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers_ValidUsernames(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers_ValidUsernames(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#UnmarshalAuthenticator",
              "documentation": {
                "identifier": "UnmarshalAuthenticator",
                "newPage": false,
                "searchKey": "database.UnmarshalAuthenticator",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func UnmarshalAuthenticator(raw string) (auth.Authenticator, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc UnmarshalAuthenticator(raw string) (auth.Authenticator, error)\n```\n\nUnmarshalAuthenticator decodes a JSON string into an Authenticator. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#allMatchingStrings",
              "documentation": {
                "identifier": "allMatchingStrings",
                "newPage": false,
                "searchKey": "database.allMatchingStrings",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func allMatchingStrings(re *regexpsyntax.Regexp, last bool) (exact, contains, prefix, suffix []string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc allMatchingStrings(re *regexpsyntax.Regexp, last bool) (exact, contains, prefix, suffix []string, err error)\n```\n\nallMatchingStrings returns a complete list of the strings that re matches, if it's possible to determine the list. The \"last\" argument indicates if this is the last part of the original regexp. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#asJSON",
              "documentation": {
                "identifier": "asJSON",
                "newPage": false,
                "searchKey": "database.asJSON",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func asJSON(t *testing.T, v interface{}) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc asJSON(t *testing.T, v interface{}) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#assertJSONEqual",
              "documentation": {
                "identifier": "assertJSONEqual",
                "newPage": false,
                "searchKey": "database.assertJSONEqual",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func assertJSONEqual(t *testing.T, want, got interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc assertJSONEqual(t *testing.T, want, got interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#assertUsageValue",
              "documentation": {
                "identifier": "assertUsageValue",
                "newPage": false,
                "searchKey": "database.assertUsageValue",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func assertUsageValue(t *testing.T, v UsageValue, start time.Time, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc assertUsageValue(t *testing.T, v UsageValue, start time.Time, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#authzQuery",
              "documentation": {
                "identifier": "authzQuery",
                "newPage": false,
                "searchKey": "database.authzQuery",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func authzQuery(bypassAuthz, usePermissionsUserMapping bool, authenticatedUserID int32, perms authz.Perms) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc authzQuery(bypassAuthz, usePermissionsUserMapping bool, authenticatedUserID int32, perms authz.Perms) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#boolptr",
              "documentation": {
                "identifier": "boolptr",
                "newPage": false,
                "searchKey": "database.boolptr",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func boolptr(b bool) *bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc boolptr(b bool) *bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#calcEndDate",
              "documentation": {
                "identifier": "calcEndDate",
                "newPage": false,
                "searchKey": "database.calcEndDate",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func calcEndDate(startDate time.Time, periodType PeriodType, periods int) (time.Time, bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc calcEndDate(startDate time.Time, periodType PeriodType, periods int) (time.Time, bool)\n```\n\ncalcEndDate calculates the the ending date of a number of periods given the period type. Returns a second false value if the period type is illegal. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#calcStartDate",
              "documentation": {
                "identifier": "calcStartDate",
                "newPage": false,
                "searchKey": "database.calcStartDate",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func calcStartDate(now time.Time, periodType PeriodType, periods int) (time.Time, bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc calcStartDate(now time.Time, periodType PeriodType, periods int) (time.Time, bool)\n```\n\ncalcStartDate calculates the the starting date of a number of periods given the period type. from the current time supplied as `now`. Returns a second false value if the period type is illegal. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#cleanup",
              "documentation": {
                "identifier": "cleanup",
                "newPage": false,
                "searchKey": "database.cleanup",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func cleanup(t *testing.T, db *sql.DB) func()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc cleanup(t *testing.T, db *sql.DB) func()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#createRepo",
              "documentation": {
                "identifier": "createRepo",
                "newPage": false,
                "searchKey": "database.createRepo",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func createRepo(ctx context.Context, t *testing.T, db *sql.DB, repo *types.Repo)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc createRepo(ctx context.Context, t *testing.T, db *sql.DB, repo *types.Repo)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#createSearchContexts",
              "documentation": {
                "identifier": "createSearchContexts",
                "newPage": false,
                "searchKey": "database.createSearchContexts",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func createSearchContexts(ctx context.Context, store *SearchContextsStore, searchContexts []*types.SearchContext) ([]*types.SearchContext, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc createSearchContexts(ctx context.Context, store *SearchContextsStore, searchContexts []*types.SearchContext) ([]*types.SearchContext, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#createUserCredentialAuths",
              "documentation": {
                "identifier": "createUserCredentialAuths",
                "newPage": false,
                "searchKey": "database.createUserCredentialAuths",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func createUserCredentialAuths(t *testing.T) map[string]auth.Authenticator"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc createUserCredentialAuths(t *testing.T) map[string]auth.Authenticator\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#errorContains",
              "documentation": {
                "identifier": "errorContains",
                "newPage": false,
                "searchKey": "database.errorContains",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func errorContains(s string) require.ErrorAssertionFunc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc errorContains(s string) require.ErrorAssertionFunc\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#functionName",
              "documentation": {
                "identifier": "functionName",
                "newPage": false,
                "searchKey": "database.functionName",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func functionName(i interface{}) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc functionName(i interface{}) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#getNamespaceQuery",
              "documentation": {
                "identifier": "getNamespaceQuery",
                "newPage": false,
                "searchKey": "database.getNamespaceQuery",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getNamespaceQuery(preds []*sqlf.Query) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getNamespaceQuery(preds []*sqlf.Query) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#getSearchContextNames",
              "documentation": {
                "identifier": "getSearchContextNames",
                "newPage": false,
                "searchKey": "database.getSearchContextNames",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getSearchContextNames(s []*types.SearchContext) []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getSearchContextNames(s []*types.SearchContext) []string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#getSearchContextNamespaceQueryConditions",
              "documentation": {
                "identifier": "getSearchContextNamespaceQueryConditions",
                "newPage": false,
                "searchKey": "database.getSearchContextNamespaceQueryConditions",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getSearchContextNamespaceQueryConditions(namespaceUserID, namespaceOrgID int32) ([]*sqlf.Query, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getSearchContextNamespaceQueryConditions(namespaceUserID, namespaceOrgID int32) ([]*sqlf.Query, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#getSearchContextOrderByClause",
              "documentation": {
                "identifier": "getSearchContextOrderByClause",
                "newPage": false,
                "searchKey": "database.getSearchContextOrderByClause",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getSearchContextOrderByClause(orderBy SearchContextsOrderByOption, descending bool) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getSearchContextOrderByClause(orderBy SearchContextsOrderByOption, descending bool) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#getSearchContextsQueryConditions",
              "documentation": {
                "identifier": "getSearchContextsQueryConditions",
                "newPage": false,
                "searchKey": "database.getSearchContextsQueryConditions",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getSearchContextsQueryConditions(opts ListSearchContextsOptions) ([]*sqlf.Query, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getSearchContextsQueryConditions(opts ListSearchContextsOptions) ([]*sqlf.Query, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#hasNoID",
              "documentation": {
                "identifier": "hasNoID",
                "newPage": false,
                "searchKey": "database.hasNoID",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func hasNoID(r *types.Repo) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hasNoID(r *types.Repo) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#hashPassword",
              "documentation": {
                "identifier": "hashPassword",
                "newPage": false,
                "searchKey": "database.hashPassword",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func hashPassword(password string) (sql.NullString, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hashPassword(password string) (sql.NullString, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#idsToQueries",
              "documentation": {
                "identifier": "idsToQueries",
                "newPage": false,
                "searchKey": "database.idsToQueries",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func idsToQueries(ids []int32) []*sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc idsToQueries(ids []int32) []*sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#init.db_test.go",
              "documentation": {
                "identifier": "init.db_test.go",
                "newPage": false,
                "searchKey": "database.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#init.main_test.go",
              "documentation": {
                "identifier": "init.main_test.go",
                "newPage": false,
                "searchKey": "database.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#initUserAndRepo",
              "documentation": {
                "identifier": "initUserAndRepo",
                "newPage": false,
                "searchKey": "database.initUserAndRepo",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func initUserAndRepo(t *testing.T, ctx context.Context, db dbutil.DB) (*types.User, *types.Repo)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc initUserAndRepo(t *testing.T, ctx context.Context, db dbutil.DB) (*types.User, *types.Repo)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#isInternalActor",
              "documentation": {
                "identifier": "isInternalActor",
                "newPage": false,
                "searchKey": "database.isInternalActor",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isInternalActor(ctx context.Context) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isInternalActor(ctx context.Context) bool\n```\n\nisInternalActor returns true if the actor represents an internal agent (i.e., non-user-bound request that originates from within Sourcegraph itself). \n\n🚨 SECURITY: internal requests bypass authz provider permissions checks, so correctness is important here. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#isUserEmailPrimary",
              "documentation": {
                "identifier": "isUserEmailPrimary",
                "newPage": false,
                "searchKey": "database.isUserEmailPrimary",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isUserEmailPrimary(ctx context.Context, db dbutil.DB, userID int32, email string) (bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isUserEmailPrimary(ctx context.Context, db dbutil.DB, userID int32, email string) (bool, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#isUserEmailVerified",
              "documentation": {
                "identifier": "isUserEmailVerified",
                "newPage": false,
                "searchKey": "database.isUserEmailVerified",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isUserEmailVerified(ctx context.Context, db dbutil.DB, userID int32, email string) (bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isUserEmailVerified(ctx context.Context, db dbutil.DB, userID int32, email string) (bool, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#jsonEqual",
              "documentation": {
                "identifier": "jsonEqual",
                "newPage": false,
                "searchKey": "database.jsonEqual",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func jsonEqual(t *testing.T, a, b interface{}) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc jsonEqual(t *testing.T, a, b interface{}) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#keyID",
              "documentation": {
                "identifier": "keyID",
                "newPage": false,
                "searchKey": "database.keyID",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func keyID(ctx context.Context, key encryption.Key) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc keyID(ctx context.Context, key encryption.Key) (string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#makeDateTruncExpression",
              "documentation": {
                "identifier": "makeDateTruncExpression",
                "newPage": false,
                "searchKey": "database.makeDateTruncExpression",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeDateTruncExpression(unit, expr string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeDateTruncExpression(unit, expr string) string\n```\n\nmakeDateTruncExpression returns an expresson that converts the given SQL expression into the start of the containing date container specified by the unit parameter (e.g. day, week, month, or). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#marshalAuthenticator",
              "documentation": {
                "identifier": "marshalAuthenticator",
                "newPage": false,
                "searchKey": "database.marshalAuthenticator",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalAuthenticator(a auth.Authenticator) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalAuthenticator(a auth.Authenticator) (string, error)\n```\n\nmarshalAuthenticator encodes an Authenticator into a JSON string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#metadataColumn",
              "documentation": {
                "identifier": "metadataColumn",
                "newPage": false,
                "searchKey": "database.metadataColumn",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func metadataColumn(metadata interface{}) (msg json.RawMessage, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc metadataColumn(metadata interface{}) (msg json.RawMessage, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#minimalColumns",
              "documentation": {
                "identifier": "minimalColumns",
                "newPage": false,
                "searchKey": "database.minimalColumns",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func minimalColumns(columns []string) []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc minimalColumns(columns []string) []string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#mustCreate",
              "documentation": {
                "identifier": "mustCreate",
                "newPage": false,
                "searchKey": "database.mustCreate",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func mustCreate(ctx context.Context, t *testing.T, db *sql.DB, repo *types.Repo, cloneStatus types.CloneStatus) []*types.Repo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mustCreate(ctx context.Context, t *testing.T, db *sql.DB, repo *types.Repo, cloneStatus types.CloneStatus) []*types.Repo\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#normalizeUserEmails",
              "documentation": {
                "identifier": "normalizeUserEmails",
                "newPage": false,
                "searchKey": "database.normalizeUserEmails",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func normalizeUserEmails(userEmails []*UserEmail)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc normalizeUserEmails(userEmails []*UserEmail)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#normalizeUsers",
              "documentation": {
                "identifier": "normalizeUsers",
                "newPage": false,
                "searchKey": "database.normalizeUsers",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func normalizeUsers(users []*types.User) []*types.User"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc normalizeUsers(users []*types.User) []*types.User\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#nullInt32Column",
              "documentation": {
                "identifier": "nullInt32Column",
                "newPage": false,
                "searchKey": "database.nullInt32Column",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func nullInt32Column(n int32) *int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nullInt32Column(n int32) *int32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#nullStringColumn",
              "documentation": {
                "identifier": "nullStringColumn",
                "newPage": false,
                "searchKey": "database.nullStringColumn",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func nullStringColumn(s string) *string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nullStringColumn(s string) *string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#nullTimeColumn",
              "documentation": {
                "identifier": "nullTimeColumn",
                "newPage": false,
                "searchKey": "database.nullTimeColumn",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func nullTimeColumn(t time.Time) *time.Time"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nullTimeColumn(t time.Time) *time.Time\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#orgsForAllUsersToJoin",
              "documentation": {
                "identifier": "orgsForAllUsersToJoin",
                "newPage": false,
                "searchKey": "database.orgsForAllUsersToJoin",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func orgsForAllUsersToJoin(userOrgMap map[string][]string) ([]string, []error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc orgsForAllUsersToJoin(userOrgMap map[string][]string) ([]string, []error)\n```\n\norgsForAllUsersToJoin returns the list of org names that all users should be joined to. The second return value is a list of errors encountered while generating this list. Note that even if errors are returned, the first return value is still valid. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#parseCursorConds",
              "documentation": {
                "identifier": "parseCursorConds",
                "newPage": false,
                "searchKey": "database.parseCursorConds",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseCursorConds(opt ReposListOptions) (conds []*sqlf.Query, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseCursorConds(opt ReposListOptions) (conds []*sqlf.Query, err error)\n```\n\nparseCursorConds checks whether the query is using cursor-based pagination, and if so performs the necessary transformations for it to be successful. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#parseIncludePattern",
              "documentation": {
                "identifier": "parseIncludePattern",
                "newPage": false,
                "searchKey": "database.parseIncludePattern",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseIncludePattern(pattern string) (exact, like []string, regexp string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseIncludePattern(pattern string) (exact, like []string, regexp string, err error)\n```\n\nparseIncludePattern either (1) parses the pattern into a list of exact possible string values and LIKE patterns if such a list can be determined from the pattern, and (2) returns the original regexp if those patterns are not equivalent to the regexp. \n\nIt allows Repos.List to optimize for the common case where a pattern like `(^github.com/foo/bar$)|(^github.com/baz/qux$)` is provided. In that case, it's faster to query for \"WHERE name IN (...)\" the two possible exact values (because it can use an index) instead of using a \"WHERE name ~*\" regexp condition (which generally can't use an index). \n\nThis optimization is necessary for good performance when there are many repos in the database. With this optimization, specifying a \"repogroup:\" in the query will be fast (even if there are many repos) because the query can be constrained efficiently to only the repos in the group. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#parsePattern",
              "documentation": {
                "identifier": "parsePattern",
                "newPage": false,
                "searchKey": "database.parsePattern",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parsePattern(p string) ([]*sqlf.Query, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parsePattern(p string) ([]*sqlf.Query, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#queriesToString",
              "documentation": {
                "identifier": "queriesToString",
                "newPage": false,
                "searchKey": "database.queriesToString",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func queriesToString(qs []*sqlf.Query) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc queriesToString(qs []*sqlf.Query) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#rawMessagePtr",
              "documentation": {
                "identifier": "rawMessagePtr",
                "newPage": false,
                "searchKey": "database.rawMessagePtr",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func rawMessagePtr(s string) *json.RawMessage"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc rawMessagePtr(s string) *json.RawMessage\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#repoNames",
              "documentation": {
                "identifier": "repoNames",
                "newPage": false,
                "searchKey": "database.repoNames",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func repoNames(repos []*types.Repo) []api.RepoName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc repoNames(repos []*types.Repo) []api.RepoName\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#repoNamesFromRepos",
              "documentation": {
                "identifier": "repoNamesFromRepos",
                "newPage": false,
                "searchKey": "database.repoNamesFromRepos",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func repoNamesFromRepos(repos []*types.Repo) []types.RepoName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc repoNamesFromRepos(repos []*types.Repo) []types.RepoName\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#reposFromRepoNames",
              "documentation": {
                "identifier": "reposFromRepoNames",
                "newPage": false,
                "searchKey": "database.reposFromRepoNames",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func reposFromRepoNames(names []types.RepoName) []*types.Repo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc reposFromRepoNames(names []types.RepoName) []*types.Repo\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#reverseSearchContextsSlice",
              "documentation": {
                "identifier": "reverseSearchContextsSlice",
                "newPage": false,
                "searchKey": "database.reverseSearchContextsSlice",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func reverseSearchContextsSlice(s []*types.SearchContext) []*types.SearchContext"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc reverseSearchContextsSlice(s []*types.SearchContext) []*types.SearchContext\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#sanitizeToUTF8",
              "documentation": {
                "identifier": "sanitizeToUTF8",
                "newPage": false,
                "searchKey": "database.sanitizeToUTF8",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sanitizeToUTF8(s string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sanitizeToUTF8(s string) string\n```\n\nsanitizeToUTF8 will remove any null character terminated string. The null character can be represented in one of the following ways in Go: \n\nHex: \\x00 Unicode: \\u0000 Octal digits: \\000 \n\nUsing any of them to replace the null character has the same effect. See this playground example: [https://play.golang.org/p/8SKPmalJRRW](https://play.golang.org/p/8SKPmalJRRW) \n\nSee this for a detailed answer: [https://stackoverflow.com/a/38008565/1773961](https://stackoverflow.com/a/38008565/1773961) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#scanFeatureFlag",
              "documentation": {
                "identifier": "scanFeatureFlag",
                "newPage": false,
                "searchKey": "database.scanFeatureFlag",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanFeatureFlag(scanner rowScanner) (*ff.FeatureFlag, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanFeatureFlag(scanner rowScanner) (*ff.FeatureFlag, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#scanFeatureFlagOverride",
              "documentation": {
                "identifier": "scanFeatureFlagOverride",
                "newPage": false,
                "searchKey": "database.scanFeatureFlagOverride",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanFeatureFlagOverride(scanner rowScanner) (*ff.Override, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanFeatureFlagOverride(scanner rowScanner) (*ff.Override, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#scanFeatureFlagOverrides",
              "documentation": {
                "identifier": "scanFeatureFlagOverrides",
                "newPage": false,
                "searchKey": "database.scanFeatureFlagOverrides",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanFeatureFlagOverrides(rows *sql.Rows) ([]*ff.Override, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanFeatureFlagOverrides(rows *sql.Rows) ([]*ff.Override, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#scanRepo",
              "documentation": {
                "identifier": "scanRepo",
                "newPage": false,
                "searchKey": "database.scanRepo",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanRepo(rows *sql.Rows, r *types.Repo) (err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanRepo(rows *sql.Rows, r *types.Repo) (err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#scanSearchContexts",
              "documentation": {
                "identifier": "scanSearchContexts",
                "newPage": false,
                "searchKey": "database.scanSearchContexts",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanSearchContexts(rows *sql.Rows) ([]*types.SearchContext, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanSearchContexts(rows *sql.Rows) ([]*types.SearchContext, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#scanSingleSearchContext",
              "documentation": {
                "identifier": "scanSingleSearchContext",
                "newPage": false,
                "searchKey": "database.scanSingleSearchContext",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanSingleSearchContext(rows *sql.Rows) (*types.SearchContext, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanSingleSearchContext(rows *sql.Rows) (*types.SearchContext, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#scanUserCredential",
              "documentation": {
                "identifier": "scanUserCredential",
                "newPage": false,
                "searchKey": "database.scanUserCredential",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanUserCredential(cred *UserCredential, s interface {..."
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanUserCredential(cred *UserCredential, s interface {\n\tScan(...interface{}) error\n}) error\n```\n\nscanUserCredential scans a credential from the given scanner into the given credential. \n\ns is inspired by the BatchChange scanner type, but also matches sql.Row, which is generally used directly in this module. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#searchContextsPermissionsCondition",
              "documentation": {
                "identifier": "searchContextsPermissionsCondition",
                "newPage": false,
                "searchKey": "database.searchContextsPermissionsCondition",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func searchContextsPermissionsCondition(ctx context.Context, db dbutil.DB) (*sqlf.Query, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc searchContextsPermissionsCondition(ctx context.Context, db dbutil.DB) (*sqlf.Query, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#setUpUserCredentialTest",
              "documentation": {
                "identifier": "setUpUserCredentialTest",
                "newPage": false,
                "searchKey": "database.setUpUserCredentialTest",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func setUpUserCredentialTest(t *testing.T, db *sql.DB) (context.Context, encryption.Key, *types.User)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc setUpUserCredentialTest(t *testing.T, db *sql.DB) (context.Context, encryption.Key, *types.User)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#simplifyExternalAccount",
              "documentation": {
                "identifier": "simplifyExternalAccount",
                "newPage": false,
                "searchKey": "database.simplifyExternalAccount",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func simplifyExternalAccount(account *extsvc.Account)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc simplifyExternalAccount(account *extsvc.Account)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#sortedRepoNames",
              "documentation": {
                "identifier": "sortedRepoNames",
                "newPage": false,
                "searchKey": "database.sortedRepoNames",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sortedRepoNames(repos []*types.Repo) []api.RepoName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sortedRepoNames(repos []*types.Repo) []api.RepoName\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#sourcesColumn",
              "documentation": {
                "identifier": "sourcesColumn",
                "newPage": false,
                "searchKey": "database.sourcesColumn",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sourcesColumn(repoID api.RepoID, sources map[string]*types.SourceInfo) (json.RawMessage, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sourcesColumn(repoID api.RepoID, sources map[string]*types.SourceInfo) (json.RawMessage, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#strptr",
              "documentation": {
                "identifier": "strptr",
                "newPage": false,
                "searchKey": "database.strptr",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func strptr(s string) *string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc strptr(s string) *string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#testAnonymousUserFlags",
              "documentation": {
                "identifier": "testAnonymousUserFlags",
                "newPage": false,
                "searchKey": "database.testAnonymousUserFlags",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testAnonymousUserFlags(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testAnonymousUserFlags(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#testListFeatureFlags",
              "documentation": {
                "identifier": "testListFeatureFlags",
                "newPage": false,
                "searchKey": "database.testListFeatureFlags",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testListFeatureFlags(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testListFeatureFlags(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#testListOrgOverrides",
              "documentation": {
                "identifier": "testListOrgOverrides",
                "newPage": false,
                "searchKey": "database.testListOrgOverrides",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testListOrgOverrides(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testListOrgOverrides(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#testListUserOverrides",
              "documentation": {
                "identifier": "testListUserOverrides",
                "newPage": false,
                "searchKey": "database.testListUserOverrides",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testListUserOverrides(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testListUserOverrides(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#testNewFeatureFlagRoundtrip",
              "documentation": {
                "identifier": "testNewFeatureFlagRoundtrip",
                "newPage": false,
                "searchKey": "database.testNewFeatureFlagRoundtrip",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testNewFeatureFlagRoundtrip(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testNewFeatureFlagRoundtrip(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#testNewOverrideRoundtrip",
              "documentation": {
                "identifier": "testNewOverrideRoundtrip",
                "newPage": false,
                "searchKey": "database.testNewOverrideRoundtrip",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testNewOverrideRoundtrip(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testNewOverrideRoundtrip(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#testUserFlags",
              "documentation": {
                "identifier": "testUserFlags",
                "newPage": false,
                "searchKey": "database.testUserFlags",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testUserFlags(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testUserFlags(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#testUserlessFeatureFlags",
              "documentation": {
                "identifier": "testUserlessFeatureFlags",
                "newPage": false,
                "searchKey": "database.testUserlessFeatureFlags",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testUserlessFeatureFlags(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testUserlessFeatureFlags(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#thirtyDaysAgo",
              "documentation": {
                "identifier": "thirtyDaysAgo",
                "newPage": false,
                "searchKey": "database.thirtyDaysAgo",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func thirtyDaysAgo() string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc thirtyDaysAgo() string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#toSHA256Bytes",
              "documentation": {
                "identifier": "toSHA256Bytes",
                "newPage": false,
                "searchKey": "database.toSHA256Bytes",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func toSHA256Bytes(input []byte) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc toSHA256Bytes(input []byte) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#upsertAuthorizationToExternalService",
              "documentation": {
                "identifier": "upsertAuthorizationToExternalService",
                "newPage": false,
                "searchKey": "database.upsertAuthorizationToExternalService",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func upsertAuthorizationToExternalService(kind, config string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc upsertAuthorizationToExternalService(kind, config string) (string, error)\n```\n\nupsertAuthorizationToExternalService adds \"authorization\" field to the external service config when not yet present for GitHub and GitLab. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#validPassword",
              "documentation": {
                "identifier": "validPassword",
                "newPage": false,
                "searchKey": "database.validPassword",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func validPassword(hash, password string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc validPassword(hash, password string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/database#validateOtherExternalServiceConnection",
              "documentation": {
                "identifier": "validateOtherExternalServiceConnection",
                "newPage": false,
                "searchKey": "database.validateOtherExternalServiceConnection",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func validateOtherExternalServiceConnection(c *schema.OtherExternalServiceConnection) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc validateOtherExternalServiceConnection(c *schema.OtherExternalServiceConnection) error\n```\n\nNeither our JSON schema library nor the Monaco editor we use supports object dependencies well, so we must validate here that repo items match the uri-reference format when url is set, instead of uri when it isn't. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/internal/database/basestore"
    },
    {
      "pathID": "/internal/database/batch"
    },
    {
      "pathID": "/internal/database/dbcache"
    },
    {
      "pathID": "/internal/database/dbconn"
    },
    {
      "pathID": "/internal/database/dbtest"
    },
    {
      "pathID": "/internal/database/dbtesting"
    },
    {
      "pathID": "/internal/database/dbutil"
    },
    {
      "pathID": "/internal/database/globalstatedb"
    },
    {
      "pathID": "/internal/database/locker"
    },
    {
      "pathID": "/internal/database/query"
    },
    {
      "pathID": "/internal/database/query_test"
    },
    {
      "pathID": "/internal/database/schemadoc"
    }
  ]
}
