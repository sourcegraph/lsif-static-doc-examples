{
  "pathID": "/internal/env",
  "documentation": {
    "identifier": "env",
    "newPage": true,
    "searchKey": "internal/env",
    "tags": [
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package env"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/env#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/env#env",
              "documentation": {
                "identifier": "env",
                "newPage": false,
                "searchKey": "env.env",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var env"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar env []envflag\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#environ",
              "documentation": {
                "identifier": "environ",
                "newPage": false,
                "searchKey": "env.environ",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var environ"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar environ map[string]string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#locked",
              "documentation": {
                "identifier": "locked",
                "newPage": false,
                "searchKey": "env.locked",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var locked"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar locked = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#MyName",
              "documentation": {
                "identifier": "MyName",
                "newPage": false,
                "searchKey": "env.MyName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var MyName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar MyName, envVarName = findName()\n```\n\nMyName represents the name of the current process. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#envVarName",
              "documentation": {
                "identifier": "envVarName",
                "newPage": false,
                "searchKey": "env.envVarName",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var envVarName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar MyName, envVarName = findName()\n```\n\nMyName represents the name of the current process. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#LogLevel",
              "documentation": {
                "identifier": "LogLevel",
                "newPage": false,
                "searchKey": "env.LogLevel",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var LogLevel"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar LogLevel = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#LogFormat",
              "documentation": {
                "identifier": "LogFormat",
                "newPage": false,
                "searchKey": "env.LogFormat",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var LogFormat"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar LogFormat = Get(\"SRC_LOG_FORMAT\", \"logfmt\", \"log format (logfmt, condensed, json)\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#InsecureDev",
              "documentation": {
                "identifier": "InsecureDev",
                "newPage": false,
                "searchKey": "env.InsecureDev",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var InsecureDev"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar InsecureDev, _ = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#DebugOut",
              "documentation": {
                "identifier": "DebugOut",
                "newPage": false,
                "searchKey": "env.DebugOut",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var DebugOut"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar DebugOut io.Writer\n```\n\nDebugOut is os.Stderr if LogLevel includes dbug \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#InfoOut",
              "documentation": {
                "identifier": "InfoOut",
                "newPage": false,
                "searchKey": "env.InfoOut",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var InfoOut"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar InfoOut io.Writer\n```\n\nInfoOut is os.Stderr if LogLevel includes info \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#WarnOut",
              "documentation": {
                "identifier": "WarnOut",
                "newPage": false,
                "searchKey": "env.WarnOut",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var WarnOut"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar WarnOut io.Writer\n```\n\nWarnOut is os.Stderr if LogLevel includes warn \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#ErrorOut",
              "documentation": {
                "identifier": "ErrorOut",
                "newPage": false,
                "searchKey": "env.ErrorOut",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrorOut"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrorOut io.Writer\n```\n\nErrorOut is os.Stderr if LogLevel includes error \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#CritOut",
              "documentation": {
                "identifier": "CritOut",
                "newPage": false,
                "searchKey": "env.CritOut",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var CritOut"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar CritOut io.Writer\n```\n\nCritOut is os.Stderr if LogLevel includes crit \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/env#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/env#Config",
              "documentation": {
                "identifier": "Config",
                "newPage": false,
                "searchKey": "env.Config",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Config interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Config interface {\n\t// Load is called prior to env.Lock an application startup. This method should\n\t// read the values from the environment and store errors to be reported later.\n\tLoad()\n\n\t// Validate performs non-trivial validation and returns any resulting errors.\n\t// This method should also return errors that occurred while reading values from\n\t// the environment in Load. This method is called after the environment has been\n\t// locked, so all environment variable reads must happen in Load.\n\tValidate() error\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#BaseConfig",
              "documentation": {
                "identifier": "BaseConfig",
                "newPage": false,
                "searchKey": "env.BaseConfig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BaseConfig struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BaseConfig struct {\n\terrs []error\n\n\t// getter is used to mock the environment in tests\n\tgetter GetterFunc\n}\n```\n\nBaseConfig is a base struct for configuration objects. The following is a minimal example of declaring, loading, and validating configuration from the environment. \n\n```\ntype Config struct {\n    env.BaseConfig\n\n    Name   string\n    Weight int\n    Age    time.Duration\n}\n\nfunc (c *Config) Load() {\n    c.Name = c.Get(\"SRC_NAME\", \"test\", \"The service's name (wat).\")\n    c.Weight = c.GetInt(\"SRC_WEIGHT\", \"1m\", \"The service's weight (wat).\")\n    c.Age = c.GetInterval(\"SRC_AGE\", \"10s\", \"The service's age (wat).\")\n}\n\nfunc applicationInit() {\n    config := &Config{}\n    config.Load()\n\n    env.Lock()\n    env.HandleHelpFlag()\n\n    if err := config.Validate(); err != nil{\n        // handle me\n    }\n}\n\n```\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/env#BaseConfig.Validate",
                    "documentation": {
                      "identifier": "BaseConfig.Validate",
                      "newPage": false,
                      "searchKey": "env.BaseConfig.Validate",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *BaseConfig) Validate() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *BaseConfig) Validate() error\n```\n\nValidate returns any errors constructed from a Get* method after the values have been loaded from the environment. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/env#BaseConfig.Get",
                    "documentation": {
                      "identifier": "BaseConfig.Get",
                      "newPage": false,
                      "searchKey": "env.BaseConfig.Get",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *BaseConfig) Get(name, defaultValue, description string) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *BaseConfig) Get(name, defaultValue, description string) string\n```\n\nGet returns the value with the given name. If no value was supplied in the environment, the given default is used in its place. If no value is available, an error is added to the validation errors list. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/env#BaseConfig.GetOptional",
                    "documentation": {
                      "identifier": "BaseConfig.GetOptional",
                      "newPage": false,
                      "searchKey": "env.BaseConfig.GetOptional",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *BaseConfig) GetOptional(name, description string) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *BaseConfig) GetOptional(name, description string) string\n```\n\nGetOptional returns the value with the given name. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/env#BaseConfig.GetInt",
                    "documentation": {
                      "identifier": "BaseConfig.GetInt",
                      "newPage": false,
                      "searchKey": "env.BaseConfig.GetInt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *BaseConfig) GetInt(name, defaultValue, description string) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *BaseConfig) GetInt(name, defaultValue, description string) int\n```\n\nGetInt returns the value with the given name interpreted as an integer. If no value was supplied in the environment, the given default is used in its place. If no value is available, or if the given value or default cannot be converted to an integer, an error is added to the validation errors list. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/env#BaseConfig.GetPercent",
                    "documentation": {
                      "identifier": "BaseConfig.GetPercent",
                      "newPage": false,
                      "searchKey": "env.BaseConfig.GetPercent",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *BaseConfig) GetPercent(name, defaultValue, description string) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *BaseConfig) GetPercent(name, defaultValue, description string) int\n```\n\nGetPercent returns the value with the given name interpreted as an integer between 0 and 100. If no value was supplied in the environment, the given default is used in its place. If no value is available, if the given value or default cannot be converted to an integer, or if the value is out of the expected range, an error is added to the validation errors list. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/env#BaseConfig.GetInterval",
                    "documentation": {
                      "identifier": "BaseConfig.GetInterval",
                      "newPage": false,
                      "searchKey": "env.BaseConfig.GetInterval",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *BaseConfig) GetInterval(name, defaultValue, description string) time.Duration"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *BaseConfig) GetInterval(name, defaultValue, description string) time.Duration\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/env#BaseConfig.GetBool",
                    "documentation": {
                      "identifier": "BaseConfig.GetBool",
                      "newPage": false,
                      "searchKey": "env.BaseConfig.GetBool",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *BaseConfig) GetBool(name, defaultValue, description string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *BaseConfig) GetBool(name, defaultValue, description string) bool\n```\n\nGetBool returns the value with the given name interpreted as a boolean. If no value was supplied in the environment, the given default is used in its place. If no value is available, or if the given value or default cannot be converted to a boolean, an error is added to the validation errors list. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/env#BaseConfig.AddError",
                    "documentation": {
                      "identifier": "BaseConfig.AddError",
                      "newPage": false,
                      "searchKey": "env.BaseConfig.AddError",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *BaseConfig) AddError(err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *BaseConfig) AddError(err error)\n```\n\nAddError adds a validation error to the configuration object. This should be called from within the Load method of a decorated configuration object to have any effect. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/env#BaseConfig.get",
                    "documentation": {
                      "identifier": "BaseConfig.get",
                      "newPage": false,
                      "searchKey": "env.BaseConfig.get",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *BaseConfig) get(name, defaultValue, description string) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *BaseConfig) get(name, defaultValue, description string) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/env#BaseConfig.SetMockGetter",
                    "documentation": {
                      "identifier": "BaseConfig.SetMockGetter",
                      "newPage": false,
                      "searchKey": "env.BaseConfig.SetMockGetter",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *BaseConfig) SetMockGetter(getter GetterFunc)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *BaseConfig) SetMockGetter(getter GetterFunc)\n```\n\nSetMockGetter sets mock to use in place of this packge's Get function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/env#GetterFunc",
              "documentation": {
                "identifier": "GetterFunc",
                "newPage": false,
                "searchKey": "env.GetterFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type GetterFunc func(name string, defaultValue string, description string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GetterFunc func(name, defaultValue, description string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#envflag",
              "documentation": {
                "identifier": "envflag",
                "newPage": false,
                "searchKey": "env.envflag",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type envflag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype envflag struct {\n\tname        string\n\tdescription string\n\tvalue       string\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/env#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/env#findName",
              "documentation": {
                "identifier": "findName",
                "newPage": false,
                "searchKey": "env.findName",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func findName() (string, string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc findName() (string, string)\n```\n\nfindName returns the name of the current process, that being the part of argv[0] after the last slash if any, and also the lowercase letters from that, suitable for use as a likely key for lookups in things like shell environment variables which can't contain hyphens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#Ensure",
              "documentation": {
                "identifier": "Ensure",
                "newPage": false,
                "searchKey": "env.Ensure",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Ensure(name, defaultValue, description string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Ensure(name, defaultValue, description string) string\n```\n\nEnsure behaves like Get except that it sets the environment variable if it doesn't exist. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#init.env.go",
              "documentation": {
                "identifier": "init.env.go",
                "newPage": false,
                "searchKey": "env.init",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#Get",
              "documentation": {
                "identifier": "Get",
                "newPage": false,
                "searchKey": "env.Get",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Get(name, defaultValue, description string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Get(name, defaultValue, description string) string\n```\n\nGet returns the value of the given environment variable. It also registers the description for PrintHelp. Calling Get with the same name twice causes a panic. Get should only be called on package initialization. Calls at a later point will cause a panic if Lock was called before. \n\nThis should be used for only *internal* environment values. User-visible configuration should be added to the Config struct in the github.com/sourcegraph/sourcegraph/config package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#MustGetDuration",
              "documentation": {
                "identifier": "MustGetDuration",
                "newPage": false,
                "searchKey": "env.MustGetDuration",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func MustGetDuration(name string, defaultValue time.Duration, description string) time.Duration"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MustGetDuration(name string, defaultValue time.Duration, description string) time.Duration\n```\n\nMustGetDuration is similar to Get but ensures that the value is a valid time.Duration. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#MustGetInt",
              "documentation": {
                "identifier": "MustGetInt",
                "newPage": false,
                "searchKey": "env.MustGetInt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func MustGetInt(name string, defaultValue int, description string) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MustGetInt(name string, defaultValue int, description string) int\n```\n\nMustGetInt is similar to Get but ensures that the value is a valid int. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#environMap",
              "documentation": {
                "identifier": "environMap",
                "newPage": false,
                "searchKey": "env.environMap",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func environMap(environ []string) map[string]string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc environMap(environ []string) map[string]string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#Lock",
              "documentation": {
                "identifier": "Lock",
                "newPage": false,
                "searchKey": "env.Lock",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Lock()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Lock()\n```\n\nLock makes later calls to Get fail with a panic. Call this at the beginning of the main function. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#PrintHelp",
              "documentation": {
                "identifier": "PrintHelp",
                "newPage": false,
                "searchKey": "env.PrintHelp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func PrintHelp()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc PrintHelp()\n```\n\nPrintHelp prints a list of all registered environment variables and their descriptions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#HandleHelpFlag",
              "documentation": {
                "identifier": "HandleHelpFlag",
                "newPage": false,
                "searchKey": "env.HandleHelpFlag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func HandleHelpFlag()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HandleHelpFlag()\n```\n\nHandleHelpFlag looks at the first CLI argument. If it is \"help\", \"-h\" or \"--help\", then it calls PrintHelp and exits. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#TestEnvironMap",
              "documentation": {
                "identifier": "TestEnvironMap",
                "newPage": false,
                "searchKey": "env.TestEnvironMap",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEnvironMap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEnvironMap(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/env#TestLock",
              "documentation": {
                "identifier": "TestLock",
                "newPage": false,
                "searchKey": "env.TestLock",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLock(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
