{
  "pathID": "/docker-images/prometheus/cmd/prom-wrapper",
  "documentation": {
    "identifier": "prom-wrapper",
    "newPage": true,
    "searchKey": "docker-images/prometheus/cmd/prom-wrapper",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package main"
  },
  "detail": {
    "kind": "markdown",
    "value": "Command prom-wrapper provides a wrapper command for Prometheus that also handles Sourcegraph configuration changes and making changes to Prometheus. \n\nSee [https://docs.sourcegraph.com/dev/background-information/observability/prometheus](https://docs.sourcegraph.com/dev/background-information/observability/prometheus) \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/docker-images/prometheus/cmd/prom-wrapper#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#alertmanagerPathPrefix",
              "documentation": {
                "identifier": "alertmanagerPathPrefix",
                "newPage": false,
                "searchKey": "main.alertmanagerPathPrefix",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const alertmanagerPathPrefix"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst alertmanagerPathPrefix = \"alertmanager\"\n```\n\nPrefix to serve alertmanager on. If you change this, make sure you update prometheus.yml as well \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#alertmanagerNoopReceiver",
              "documentation": {
                "identifier": "alertmanagerNoopReceiver",
                "newPage": false,
                "searchKey": "main.alertmanagerNoopReceiver",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const alertmanagerNoopReceiver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst alertmanagerNoopReceiver = \"src-noop-receiver\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#alertmanagerWarningReceiver",
              "documentation": {
                "identifier": "alertmanagerWarningReceiver",
                "newPage": false,
                "searchKey": "main.alertmanagerWarningReceiver",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const alertmanagerWarningReceiver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst alertmanagerWarningReceiver = \"src-warning-receiver\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#alertmanagerCriticalReceiver",
              "documentation": {
                "identifier": "alertmanagerCriticalReceiver",
                "newPage": false,
                "searchKey": "main.alertmanagerCriticalReceiver",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const alertmanagerCriticalReceiver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst alertmanagerCriticalReceiver = \"src-critical-receiver\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#colorWarning",
              "documentation": {
                "identifier": "colorWarning",
                "newPage": false,
                "searchKey": "main.colorWarning",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const colorWarning"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst colorWarning = \"#FFFF00\" // yellow\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#colorCritical",
              "documentation": {
                "identifier": "colorCritical",
                "newPage": false,
                "searchKey": "main.colorCritical",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const colorCritical"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst colorCritical = \"#FF0000\" // red\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#colorGood",
              "documentation": {
                "identifier": "colorGood",
                "newPage": false,
                "searchKey": "main.colorGood",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const colorGood"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst colorGood = \"#00FF00\" // green\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#docsURL",
              "documentation": {
                "identifier": "docsURL",
                "newPage": false,
                "searchKey": "main.docsURL",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const docsURL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst docsURL = \"https://docs.sourcegraph.com\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#alertSolutionsPagePath",
              "documentation": {
                "identifier": "alertSolutionsPagePath",
                "newPage": false,
                "searchKey": "main.alertSolutionsPagePath",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const alertSolutionsPagePath"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst alertSolutionsPagePath = \"admin/observability/alert_solutions\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#matcherRegexPrefix",
              "documentation": {
                "identifier": "matcherRegexPrefix",
                "newPage": false,
                "searchKey": "main.matcherRegexPrefix",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const matcherRegexPrefix"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst matcherRegexPrefix = \"^(\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#matcherRegexSuffix",
              "documentation": {
                "identifier": "matcherRegexSuffix",
                "newPage": false,
                "searchKey": "main.matcherRegexSuffix",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const matcherRegexSuffix"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst matcherRegexSuffix = \")$\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/docker-images/prometheus/cmd/prom-wrapper#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#noConfig",
              "documentation": {
                "identifier": "noConfig",
                "newPage": false,
                "searchKey": "main.noConfig",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var noConfig"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar noConfig = os.Getenv(\"DISABLE_SOURCEGRAPH_CONFIG\")\n```\n\nprom-wrapper configuration options \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#noAlertmanager",
              "documentation": {
                "identifier": "noAlertmanager",
                "newPage": false,
                "searchKey": "main.noAlertmanager",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var noAlertmanager"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar noAlertmanager = os.Getenv(\"DISABLE_ALERTMANAGER\")\n```\n\nprom-wrapper configuration options \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#exportPort",
              "documentation": {
                "identifier": "exportPort",
                "newPage": false,
                "searchKey": "main.exportPort",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var exportPort"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar exportPort = ...\n```\n\nprom-wrapper configuration options \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#prometheusPort",
              "documentation": {
                "identifier": "prometheusPort",
                "newPage": false,
                "searchKey": "main.prometheusPort",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var prometheusPort"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar prometheusPort = env.Get(\"PROMETHEUS_INTERNAL_PORT\", \"9092\", \"internal Prometheus port\")\n```\n\nprom-wrapper configuration options \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#alertmanagerPort",
              "documentation": {
                "identifier": "alertmanagerPort",
                "newPage": false,
                "searchKey": "main.alertmanagerPort",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var alertmanagerPort"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar alertmanagerPort = env.Get(\"ALERTMANAGER_INTERNAL_PORT\", \"9093\", \"internal Alertmanager port\")\n```\n\nprom-wrapper configuration options \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#alertmanagerConfigPath",
              "documentation": {
                "identifier": "alertmanagerConfigPath",
                "newPage": false,
                "searchKey": "main.alertmanagerConfigPath",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var alertmanagerConfigPath"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar alertmanagerConfigPath = ...\n```\n\nprom-wrapper configuration options \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#alertmanagerEnableCluster",
              "documentation": {
                "identifier": "alertmanagerEnableCluster",
                "newPage": false,
                "searchKey": "main.alertmanagerEnableCluster",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var alertmanagerEnableCluster"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar alertmanagerEnableCluster = ...\n```\n\nprom-wrapper configuration options \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#opsGenieAPIKey",
              "documentation": {
                "identifier": "opsGenieAPIKey",
                "newPage": false,
                "searchKey": "main.opsGenieAPIKey",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var opsGenieAPIKey"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar opsGenieAPIKey = os.Getenv(\"OPSGENIE_API_KEY\")\n```\n\nprom-wrapper configuration options \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#commonLabels",
              "documentation": {
                "identifier": "commonLabels",
                "newPage": false,
                "searchKey": "main.commonLabels",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var commonLabels"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar commonLabels = []string{\"alertname\", \"level\", \"service_name\", \"name\", \"owner\", \"description\"}\n```\n\ncommonLabels defines the set of labels we group alerts by, such that each alert falls in a unique group. These labels are available in Alertmanager templates as fields of `.CommonLabels`. \n\nNote that `alertname` is provided as a fallback grouping only - combinations of the other labels should be unique for alerts provided by the Sourcegraph generator. \n\nWhen changing this, make sure to update the webhook body documentation in /doc/admin/observability/alerting.md \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#observableDocAnchorTemplate",
              "documentation": {
                "identifier": "observableDocAnchorTemplate",
                "newPage": false,
                "searchKey": "main.observableDocAnchorTemplate",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var observableDocAnchorTemplate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar observableDocAnchorTemplate = ...\n```\n\nStatic alertmanager templates. Templating reference: [https://prometheus.io/docs/alerting/latest/notifications](https://prometheus.io/docs/alerting/latest/notifications) \n\nAll `.CommonLabels` labels used in these templates should be included in `route.GroupByStr` in order for them to be available. \n\nobservableDocAnchorTemplate must match anchors generated in `monitoring/monitoring/documentation.go`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#alertSolutionsURLTemplate",
              "documentation": {
                "identifier": "alertSolutionsURLTemplate",
                "newPage": false,
                "searchKey": "main.alertSolutionsURLTemplate",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var alertSolutionsURLTemplate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar alertSolutionsURLTemplate = ...\n```\n\nStatic alertmanager templates. Templating reference: [https://prometheus.io/docs/alerting/latest/notifications](https://prometheus.io/docs/alerting/latest/notifications) \n\nAll `.CommonLabels` labels used in these templates should be included in `route.GroupByStr` in order for them to be available. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#firingTitleTemplate",
              "documentation": {
                "identifier": "firingTitleTemplate",
                "newPage": false,
                "searchKey": "main.firingTitleTemplate",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var firingTitleTemplate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar firingTitleTemplate = \"[{{ .CommonLabels.level | toUpper }}] {{ .CommonLabels.description }}\"\n```\n\nStatic alertmanager templates. Templating reference: [https://prometheus.io/docs/alerting/latest/notifications](https://prometheus.io/docs/alerting/latest/notifications) \n\nAll `.CommonLabels` labels used in these templates should be included in `route.GroupByStr` in order for them to be available. \n\nTitle templates \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#resolvedTitleTemplate",
              "documentation": {
                "identifier": "resolvedTitleTemplate",
                "newPage": false,
                "searchKey": "main.resolvedTitleTemplate",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var resolvedTitleTemplate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar resolvedTitleTemplate = \"[RESOLVED] {{ .CommonLabels.description }}\"\n```\n\nStatic alertmanager templates. Templating reference: [https://prometheus.io/docs/alerting/latest/notifications](https://prometheus.io/docs/alerting/latest/notifications) \n\nAll `.CommonLabels` labels used in these templates should be included in `route.GroupByStr` in order for them to be available. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#notificationTitleTemplate",
              "documentation": {
                "identifier": "notificationTitleTemplate",
                "newPage": false,
                "searchKey": "main.notificationTitleTemplate",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var notificationTitleTemplate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar notificationTitleTemplate = ...\n```\n\nStatic alertmanager templates. Templating reference: [https://prometheus.io/docs/alerting/latest/notifications](https://prometheus.io/docs/alerting/latest/notifications) \n\nAll `.CommonLabels` labels used in these templates should be included in `route.GroupByStr` in order for them to be available. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/docker-images/prometheus/cmd/prom-wrapper#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#ChangeContext",
              "documentation": {
                "identifier": "ChangeContext",
                "newPage": false,
                "searchKey": "main.ChangeContext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangeContext struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangeContext struct {\n\tAMConfig *amconfig.Config // refer to https://prometheus.io/docs/alerting/latest/configuration/\n\tAMClient *amclient.Alertmanager\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#ChangeResult",
              "documentation": {
                "identifier": "ChangeResult",
                "newPage": false,
                "searchKey": "main.ChangeResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangeResult struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangeResult struct {\n\tProblems conf.Problems\n}\n```\n\nChangeResult indicates output from a Change \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/docker-images/prometheus/cmd/prom-wrapper#changeReceivers",
                    "documentation": {
                      "identifier": "changeReceivers",
                      "newPage": false,
                      "searchKey": "main.changeReceivers",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func changeReceivers(ctx context.Context, log log15.Logger, change ChangeContext, newConfig *subscribedSiteConfig) (result ChangeResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc changeReceivers(ctx context.Context, log log15.Logger, change ChangeContext, newConfig *subscribedSiteConfig) (result ChangeResult)\n```\n\nchangeReceivers applies `observability.alerts` as Alertmanager receivers. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/docker-images/prometheus/cmd/prom-wrapper#changeSMTP",
                    "documentation": {
                      "identifier": "changeSMTP",
                      "newPage": false,
                      "searchKey": "main.changeSMTP",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func changeSMTP(ctx context.Context, log log15.Logger, change ChangeContext, newConfig *subscribedSiteConfig) (result ChangeResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc changeSMTP(ctx context.Context, log log15.Logger, change ChangeContext, newConfig *subscribedSiteConfig) (result ChangeResult)\n```\n\nchangeSMTP applies SMTP server configuration. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/docker-images/prometheus/cmd/prom-wrapper#changeSilences",
                    "documentation": {
                      "identifier": "changeSilences",
                      "newPage": false,
                      "searchKey": "main.changeSilences",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func changeSilences(ctx context.Context, log log15.Logger, change ChangeContext, newConfig *subscribedSiteConfig) (result ChangeResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc changeSilences(ctx context.Context, log log15.Logger, change ChangeContext, newConfig *subscribedSiteConfig) (result ChangeResult)\n```\n\nchangeSilences syncs Alertmanager silences with silences configured in observability.silenceAlerts \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#Change",
              "documentation": {
                "identifier": "Change",
                "newPage": false,
                "searchKey": "main.Change",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Change func(ctx context.Context, log github.com/inconshreveable/log15.Logger, change github.com/sourcegraph/sourcegraph/docker-images/prometheus/cmd/prom-wrapper.ChangeContext, newConfig *github.com/sourcegraph/sourcegraph/docker-images/prometheus/cmd/prom-wrapper.subscribedSiteConfig) (result github.com/sourcegraph/sourcegraph/docker-images/prometheus/cmd/prom-wrapper.ChangeResult)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Change func(ctx context.Context, log log15.Logger, change ChangeContext, newConfig *subscribedSiteConfig) (result ChangeResult)\n```\n\nChange implements a change to configuration \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#siteEmailConfig",
              "documentation": {
                "identifier": "siteEmailConfig",
                "newPage": false,
                "searchKey": "main.siteEmailConfig",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type siteEmailConfig struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype siteEmailConfig struct {\n\tSMTP    *schema.SMTPServerConfig\n\tAddress string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#subscribedSiteConfig",
              "documentation": {
                "identifier": "subscribedSiteConfig",
                "newPage": false,
                "searchKey": "main.subscribedSiteConfig",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type subscribedSiteConfig struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype subscribedSiteConfig struct {\n\tAlerts    []*schema.ObservabilityAlerts\n\talertsSum [32]byte\n\n\tEmail    *siteEmailConfig\n\temailSum [32]byte\n\n\tSilencedAlerts    []string\n\tsilencedAlertsSum [32]byte\n\n\tExternalURL string\n}\n```\n\nsubscribedSiteConfig contains fields from SiteConfiguration relevant to the siteConfigSubscriber. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/docker-images/prometheus/cmd/prom-wrapper#newSubscribedSiteConfig",
                    "documentation": {
                      "identifier": "newSubscribedSiteConfig",
                      "newPage": false,
                      "searchKey": "main.newSubscribedSiteConfig",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newSubscribedSiteConfig(config schema.SiteConfiguration) *subscribedSiteConfig"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newSubscribedSiteConfig(config schema.SiteConfiguration) *subscribedSiteConfig\n```\n\nnewSubscribedSiteConfig creates a subscribedSiteConfig with sha256 sums calculated. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/docker-images/prometheus/cmd/prom-wrapper#subscribedSiteConfig.Diff",
                    "documentation": {
                      "identifier": "subscribedSiteConfig.Diff",
                      "newPage": false,
                      "searchKey": "main.subscribedSiteConfig.Diff",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *subscribedSiteConfig) Diff(other *subscribedSiteConfig) []siteConfigDiff"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *subscribedSiteConfig) Diff(other *subscribedSiteConfig) []siteConfigDiff\n```\n\nDiff returns a set of changes to apply. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#siteConfigDiff",
              "documentation": {
                "identifier": "siteConfigDiff",
                "newPage": false,
                "searchKey": "main.siteConfigDiff",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type siteConfigDiff struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype siteConfigDiff struct {\n\tType   string\n\tchange Change\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#SiteConfigSubscriber",
              "documentation": {
                "identifier": "SiteConfigSubscriber",
                "newPage": false,
                "searchKey": "main.SiteConfigSubscriber",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SiteConfigSubscriber struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SiteConfigSubscriber struct {\n\tlog          log15.Logger\n\talertmanager *amclient.Alertmanager\n\n\tmux      sync.RWMutex\n\tconfig   *subscribedSiteConfig\n\tproblems conf.Problems // exported by handler\n}\n```\n\nSiteConfigSubscriber is a sidecar service that subscribes to Sourcegraph site configuration and applies relevant (subscribedSiteConfig) changes to Grafana. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/docker-images/prometheus/cmd/prom-wrapper#NewSiteConfigSubscriber",
                    "documentation": {
                      "identifier": "NewSiteConfigSubscriber",
                      "newPage": false,
                      "searchKey": "main.NewSiteConfigSubscriber",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewSiteConfigSubscriber(logger log15.Logger, alertmanager *amclient.Alertmanager) *SiteConfigSubscriber"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewSiteConfigSubscriber(logger log15.Logger, alertmanager *amclient.Alertmanager) *SiteConfigSubscriber\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/docker-images/prometheus/cmd/prom-wrapper#SiteConfigSubscriber.Handler",
                    "documentation": {
                      "identifier": "SiteConfigSubscriber.Handler",
                      "newPage": false,
                      "searchKey": "main.SiteConfigSubscriber.Handler",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *SiteConfigSubscriber) Handler() http.Handler"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *SiteConfigSubscriber) Handler() http.Handler\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/docker-images/prometheus/cmd/prom-wrapper#SiteConfigSubscriber.Subscribe",
                    "documentation": {
                      "identifier": "SiteConfigSubscriber.Subscribe",
                      "newPage": false,
                      "searchKey": "main.SiteConfigSubscriber.Subscribe",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *SiteConfigSubscriber) Subscribe(ctx context.Context)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *SiteConfigSubscriber) Subscribe(ctx context.Context)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/docker-images/prometheus/cmd/prom-wrapper#SiteConfigSubscriber.execDiffs",
                    "documentation": {
                      "identifier": "SiteConfigSubscriber.execDiffs",
                      "newPage": false,
                      "searchKey": "main.SiteConfigSubscriber.execDiffs",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *SiteConfigSubscriber) execDiffs(ctx context.Context, newConfig *subscribedSiteConfig, diffs []siteConfigDiff)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *SiteConfigSubscriber) execDiffs(ctx context.Context, newConfig *subscribedSiteConfig, diffs []siteConfigDiff)\n```\n\nexecDiffs updates grafanaAlertsSubscriber state and writes it to disk. It never returns an error, instead all errors are reported as problems \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#AlertsStatusReporter",
              "documentation": {
                "identifier": "AlertsStatusReporter",
                "newPage": false,
                "searchKey": "main.AlertsStatusReporter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type AlertsStatusReporter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AlertsStatusReporter struct {\n\tlog          log15.Logger\n\talertmanager *amclient.Alertmanager\n\tprometheus   prometheus.API\n}\n```\n\nAlertsStatusReporter summarizes alert activity from Alertmanager \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/docker-images/prometheus/cmd/prom-wrapper#NewAlertsStatusReporter",
                    "documentation": {
                      "identifier": "NewAlertsStatusReporter",
                      "newPage": false,
                      "searchKey": "main.NewAlertsStatusReporter",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewAlertsStatusReporter(logger log15.Logger, alertmanager *amclient.Alertmanager, prom prometheus.API) *AlertsStatusReporter"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewAlertsStatusReporter(logger log15.Logger, alertmanager *amclient.Alertmanager, prom prometheus.API) *AlertsStatusReporter\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/docker-images/prometheus/cmd/prom-wrapper#AlertsStatusReporter.Handler",
                    "documentation": {
                      "identifier": "AlertsStatusReporter.Handler",
                      "newPage": false,
                      "searchKey": "main.AlertsStatusReporter.Handler",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AlertsStatusReporter) Handler() http.Handler"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AlertsStatusReporter) Handler() http.Handler\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/docker-images/prometheus/cmd/prom-wrapper#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#waitForAlertmanager",
              "documentation": {
                "identifier": "waitForAlertmanager",
                "newPage": false,
                "searchKey": "main.waitForAlertmanager",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func waitForAlertmanager(ctx context.Context, alertmanager *amclient.Alertmanager) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc waitForAlertmanager(ctx context.Context, alertmanager *amclient.Alertmanager) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#reloadAlertmanager",
              "documentation": {
                "identifier": "reloadAlertmanager",
                "newPage": false,
                "searchKey": "main.reloadAlertmanager",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func reloadAlertmanager(ctx context.Context) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc reloadAlertmanager(ctx context.Context) error\n```\n\nreloadAlertmanager triggers a realod of the Alertmanager configuration file, because package alertmanager/api/v2 does not have a wrapper for reload See [https://prometheus.io/docs/alerting/latest/management_api/#reload](https://prometheus.io/docs/alerting/latest/management_api/#reload) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#renderConfiguration",
              "documentation": {
                "identifier": "renderConfiguration",
                "newPage": false,
                "searchKey": "main.renderConfiguration",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func renderConfiguration(cfg *amconfig.Config) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc renderConfiguration(cfg *amconfig.Config) ([]byte, error)\n```\n\nrenderConfiguration marshals the given Alertmanager configuration to a format accepted by Alertmanager, and also validates that it will be accepted by Alertmanager. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#applyConfiguration",
              "documentation": {
                "identifier": "applyConfiguration",
                "newPage": false,
                "searchKey": "main.applyConfiguration",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func applyConfiguration(ctx context.Context, cfg *amconfig.Config) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc applyConfiguration(ctx context.Context, cfg *amconfig.Config) error\n```\n\napplyConfiguration writes validates and writes the given Alertmanager configuration to disk, and triggers a reload. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#duration",
              "documentation": {
                "identifier": "duration",
                "newPage": false,
                "searchKey": "main.duration",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func duration(dur time.Duration) *model.Duration"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc duration(dur time.Duration) *model.Duration\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#runCmd",
              "documentation": {
                "identifier": "runCmd",
                "newPage": false,
                "searchKey": "main.runCmd",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func runCmd(log log15.Logger, errs chan<- error, cmd *exec.Cmd)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runCmd(log log15.Logger, errs chan<- error, cmd *exec.Cmd)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#NewPrometheusCmd",
              "documentation": {
                "identifier": "NewPrometheusCmd",
                "newPage": false,
                "searchKey": "main.NewPrometheusCmd",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewPrometheusCmd(promArgs []string, promPort string) *exec.Cmd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewPrometheusCmd(promArgs []string, promPort string) *exec.Cmd\n```\n\nNewPrometheusCmd instantiates a new command to run Prometheus. Parameter promArgs replicates \"$@\" \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#NewAlertmanagerCmd",
              "documentation": {
                "identifier": "NewAlertmanagerCmd",
                "newPage": false,
                "searchKey": "main.NewAlertmanagerCmd",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewAlertmanagerCmd(configPath string) *exec.Cmd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewAlertmanagerCmd(configPath string) *exec.Cmd\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#main",
              "documentation": {
                "identifier": "main",
                "newPage": false,
                "searchKey": "main.main",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func main()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc main()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#alertSolutionsURL",
              "documentation": {
                "identifier": "alertSolutionsURL",
                "newPage": false,
                "searchKey": "main.alertSolutionsURL",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func alertSolutionsURL() string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc alertSolutionsURL() string\n```\n\nalertSolutionsURL generates a link to the alert solutions page that embeds the appropriate version if it is available and it is a semantic version. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#newRoutesAndReceivers",
              "documentation": {
                "identifier": "newRoutesAndReceivers",
                "newPage": false,
                "searchKey": "main.newRoutesAndReceivers",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newRoutesAndReceivers(newAlerts []*schema.ObservabilityAlerts, externalURL string, newProblem func(error)) ([]*amconfig.Receiver, []*amconfig.Route)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newRoutesAndReceivers(newAlerts []*schema.ObservabilityAlerts, externalURL string, newProblem func(error)) ([]*amconfig.Receiver, []*amconfig.Route)\n```\n\nnewRoutesAndReceivers converts the given alerts from Sourcegraph site configuration into Alertmanager receivers and routes with the following strategy: \n\n* Each alert level has a receiver, which has configuration for all channels for that level. * Each alert level and owner combination has a receiver and route, which has configuration for all channels for that filter. * Additional routes can route alerts based on `alerts.on`, but all alerts still fall through to the per-level receivers. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#newRootRoute",
              "documentation": {
                "identifier": "newRootRoute",
                "newPage": false,
                "searchKey": "main.newRootRoute",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newRootRoute(routes []*amconfig.Route) *amconfig.Route"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newRootRoute(routes []*amconfig.Route) *amconfig.Route\n```\n\nnewRootRoute generates a base Route required by Alertmanager to wrap all routes \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#stringP",
              "documentation": {
                "identifier": "stringP",
                "newPage": false,
                "searchKey": "main.stringP",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func stringP(v string) *string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stringP(v string) *string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#boolP",
              "documentation": {
                "identifier": "boolP",
                "newPage": false,
                "searchKey": "main.boolP",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func boolP(v bool) *bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc boolP(v bool) *bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#newMatchersFromSilence",
              "documentation": {
                "identifier": "newMatchersFromSilence",
                "newPage": false,
                "searchKey": "main.newMatchersFromSilence",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newMatchersFromSilence(silence string) models.Matchers"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newMatchersFromSilence(silence string) models.Matchers\n```\n\nnewMatchersFromSilence creates Alertmanager alert matchers from a configured silence \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#newSilenceFromMatchers",
              "documentation": {
                "identifier": "newSilenceFromMatchers",
                "newPage": false,
                "searchKey": "main.newSilenceFromMatchers",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newSilenceFromMatchers(matchers models.Matchers) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newSilenceFromMatchers(matchers models.Matchers) string\n```\n\nnewSilenceFromMatchers returns the silenced alert from Alertmanager alert matchers \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#init.siteconfig.go",
              "documentation": {
                "identifier": "init.siteconfig.go",
                "newPage": false,
                "searchKey": "main.init",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#TestAlertSolutionsURL",
              "documentation": {
                "identifier": "TestAlertSolutionsURL",
                "newPage": false,
                "searchKey": "main.TestAlertSolutionsURL",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAlertSolutionsURL(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAlertSolutionsURL(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#TestNewRoutesAndReceivers",
              "documentation": {
                "identifier": "TestNewRoutesAndReceivers",
                "newPage": false,
                "searchKey": "main.TestNewRoutesAndReceivers",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewRoutesAndReceivers(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewRoutesAndReceivers(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#TestMatchersAndSilences",
              "documentation": {
                "identifier": "TestMatchersAndSilences",
                "newPage": false,
                "searchKey": "main.TestMatchersAndSilences",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMatchersAndSilences(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMatchersAndSilences(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/docker-images/prometheus/cmd/prom-wrapper#TestAlertsStatusReporterHistory",
              "documentation": {
                "identifier": "TestAlertsStatusReporterHistory",
                "newPage": false,
                "searchKey": "main.TestAlertsStatusReporterHistory",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAlertsStatusReporterHistory(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAlertsStatusReporterHistory(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/docker-images/prometheus/cmd/prom-wrapper/mocks"
    }
  ]
}
