{
  "pathID": "/cmd/frontend/graphqlbackend",
  "documentation": {
    "identifier": "graphqlbackend",
    "newPage": true,
    "searchKey": "cmd/frontend/graphqlbackend",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package graphqlbackend"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package graphqlbackend implements the GraphQL API. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/cmd/frontend/graphqlbackend#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#singletonDefaultSettingsGQLID",
              "documentation": {
                "identifier": "singletonDefaultSettingsGQLID",
                "newPage": false,
                "searchKey": "graphqlbackend.singletonDefaultSettingsGQLID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const singletonDefaultSettingsGQLID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst singletonDefaultSettingsGQLID = \"DefaultSettings\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#externalServiceIDKind",
              "documentation": {
                "identifier": "externalServiceIDKind",
                "newPage": false,
                "searchKey": "graphqlbackend.externalServiceIDKind",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const externalServiceIDKind"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst externalServiceIDKind = \"ExternalService\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitObjectTypeCommit",
              "documentation": {
                "identifier": "gitObjectTypeCommit",
                "newPage": false,
                "searchKey": "graphqlbackend.gitObjectTypeCommit",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const gitObjectTypeCommit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gitObjectTypeCommit gitObjectType = \"GIT_COMMIT\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitObjectTypeTag",
              "documentation": {
                "identifier": "gitObjectTypeTag",
                "newPage": false,
                "searchKey": "graphqlbackend.gitObjectTypeTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const gitObjectTypeTag"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gitObjectTypeTag gitObjectType = \"GIT_TAG\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitObjectTypeTree",
              "documentation": {
                "identifier": "gitObjectTypeTree",
                "newPage": false,
                "searchKey": "graphqlbackend.gitObjectTypeTree",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const gitObjectTypeTree"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gitObjectTypeTree gitObjectType = \"GIT_TREE\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitObjectTypeBlob",
              "documentation": {
                "identifier": "gitObjectTypeBlob",
                "newPage": false,
                "searchKey": "graphqlbackend.gitObjectTypeBlob",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const gitObjectTypeBlob"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gitObjectTypeBlob gitObjectType = \"GIT_BLOB\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitObjectTypeUnknown",
              "documentation": {
                "identifier": "gitObjectTypeUnknown",
                "newPage": false,
                "searchKey": "graphqlbackend.gitObjectTypeUnknown",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const gitObjectTypeUnknown"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gitObjectTypeUnknown gitObjectType = \"GIT_UNKNOWN\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitRefTypeBranch",
              "documentation": {
                "identifier": "gitRefTypeBranch",
                "newPage": false,
                "searchKey": "graphqlbackend.gitRefTypeBranch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const gitRefTypeBranch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gitRefTypeBranch = \"GIT_BRANCH\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitRefTypeTag",
              "documentation": {
                "identifier": "gitRefTypeTag",
                "newPage": false,
                "searchKey": "graphqlbackend.gitRefTypeTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const gitRefTypeTag"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gitRefTypeTag = \"GIT_TAG\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitRefTypeOther",
              "documentation": {
                "identifier": "gitRefTypeOther",
                "newPage": false,
                "searchKey": "graphqlbackend.gitRefTypeOther",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const gitRefTypeOther"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gitRefTypeOther = \"GIT_REF_OTHER\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitRefOrderAuthoredOrCommittedAt",
              "documentation": {
                "identifier": "gitRefOrderAuthoredOrCommittedAt",
                "newPage": false,
                "searchKey": "graphqlbackend.gitRefOrderAuthoredOrCommittedAt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const gitRefOrderAuthoredOrCommittedAt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gitRefOrderAuthoredOrCommittedAt = \"AUTHORED_OR_COMMITTED_AT\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#costEstimateVersion",
              "documentation": {
                "identifier": "costEstimateVersion",
                "newPage": false,
                "searchKey": "graphqlbackend.costEstimateVersion",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const costEstimateVersion"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst costEstimateVersion = 2\n```\n\nIncluded in tracing so that we can differentiate different costs as we tweak the algorithm \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repositoryCursorKind",
              "documentation": {
                "identifier": "repositoryCursorKind",
                "newPage": false,
                "searchKey": "graphqlbackend.repositoryCursorKind",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const repositoryCursorKind"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst repositoryCursorKind = \"RepositoryCursor\"\n```\n\nThis constant defines the cursor prefix, which disambiguates a repository cursor from other types of cursors in the system. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#defaultMaxSearchResults",
              "documentation": {
                "identifier": "defaultMaxSearchResults",
                "newPage": false,
                "searchKey": "graphqlbackend.defaultMaxSearchResults",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const defaultMaxSearchResults"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst defaultMaxSearchResults = 30\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#defaultMaxSearchResultsStreaming",
              "documentation": {
                "identifier": "defaultMaxSearchResultsStreaming",
                "newPage": false,
                "searchKey": "graphqlbackend.defaultMaxSearchResultsStreaming",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const defaultMaxSearchResultsStreaming"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst defaultMaxSearchResultsStreaming = 500\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#maxSearchResultsPerPaginatedRequest",
              "documentation": {
                "identifier": "maxSearchResultsPerPaginatedRequest",
                "newPage": false,
                "searchKey": "graphqlbackend.maxSearchResultsPerPaginatedRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const maxSearchResultsPerPaginatedRequest"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst maxSearchResultsPerPaginatedRequest = 5000\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchContextCursorKind",
              "documentation": {
                "identifier": "searchContextCursorKind",
                "newPage": false,
                "searchKey": "graphqlbackend.searchContextCursorKind",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const searchContextCursorKind"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst searchContextCursorKind = \"SearchContextCursor\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchContextsOrderByUpdatedAt",
              "documentation": {
                "identifier": "searchContextsOrderByUpdatedAt",
                "newPage": false,
                "searchKey": "graphqlbackend.searchContextsOrderByUpdatedAt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const searchContextsOrderByUpdatedAt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst searchContextsOrderByUpdatedAt searchContextsOrderBy = \"SEARCH_CONTEXT_UPDATED_AT\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchContextsOrderBySpec",
              "documentation": {
                "identifier": "searchContextsOrderBySpec",
                "newPage": false,
                "searchKey": "graphqlbackend.searchContextsOrderBySpec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const searchContextsOrderBySpec"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst searchContextsOrderBySpec searchContextsOrderBy = \"SEARCH_CONTEXT_SPEC\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchCursorKind",
              "documentation": {
                "identifier": "searchCursorKind",
                "newPage": false,
                "searchKey": "graphqlbackend.searchCursorKind",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const searchCursorKind"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst searchCursorKind = \"SearchCursor\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#maxSearchSuggestions",
              "documentation": {
                "identifier": "maxSearchSuggestions",
                "newPage": false,
                "searchKey": "graphqlbackend.maxSearchSuggestions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const maxSearchSuggestions"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst maxSearchSuggestions = 100\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#maxUserPublicRepos",
              "documentation": {
                "identifier": "maxUserPublicRepos",
                "newPage": false,
                "searchKey": "graphqlbackend.maxUserPublicRepos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const maxUserPublicRepos"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst maxUserPublicRepos = 100\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#singletonSiteGQLID",
              "documentation": {
                "identifier": "singletonSiteGQLID",
                "newPage": false,
                "searchKey": "graphqlbackend.singletonSiteGQLID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const singletonSiteGQLID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst singletonSiteGQLID = \"site\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#AlertTypeInfo",
              "documentation": {
                "identifier": "AlertTypeInfo",
                "newPage": false,
                "searchKey": "graphqlbackend.AlertTypeInfo",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AlertTypeInfo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AlertTypeInfo = \"INFO\"\n```\n\nConstants for the GraphQL enum AlertType. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#AlertTypeWarning",
              "documentation": {
                "identifier": "AlertTypeWarning",
                "newPage": false,
                "searchKey": "graphqlbackend.AlertTypeWarning",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AlertTypeWarning"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AlertTypeWarning = \"WARNING\"\n```\n\nConstants for the GraphQL enum AlertType. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#AlertTypeError",
              "documentation": {
                "identifier": "AlertTypeError",
                "newPage": false,
                "searchKey": "graphqlbackend.AlertTypeError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AlertTypeError"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AlertTypeError = \"ERROR\"\n```\n\nConstants for the GraphQL enum AlertType. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#testDiffFiles",
              "documentation": {
                "identifier": "testDiffFiles",
                "newPage": false,
                "searchKey": "graphqlbackend.testDiffFiles",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const testDiffFiles"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst testDiffFiles = 3\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#testDiff",
              "documentation": {
                "identifier": "testDiff",
                "newPage": false,
                "searchKey": "graphqlbackend.testDiff",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const testDiff"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst testDiff = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#testCopyDiff",
              "documentation": {
                "identifier": "testCopyDiff",
                "newPage": false,
                "searchKey": "graphqlbackend.testCopyDiff",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const testCopyDiff"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst testCopyDiff = ...\n```\n\nThis is unparseable by go-diff. Once it isn't anymore, the test should fail, reminding us of the TODO comment in repository_comparison to reenable it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#testDiffFirstHunk",
              "documentation": {
                "identifier": "testDiffFirstHunk",
                "newPage": false,
                "searchKey": "graphqlbackend.testDiffFirstHunk",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const testDiffFirstHunk"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst testDiffFirstHunk = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#exampleCommitSHA1",
              "documentation": {
                "identifier": "exampleCommitSHA1",
                "newPage": false,
                "searchKey": "graphqlbackend.exampleCommitSHA1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const exampleCommitSHA1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst exampleCommitSHA1 = \"1234567890123456789012345678901234567890\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/cmd/frontend/graphqlbackend#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#cf",
              "documentation": {
                "identifier": "cf",
                "newPage": false,
                "searchKey": "graphqlbackend.cf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var cf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar cf = httpcli.NewExternalHTTPClientFactory()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#builtinExtensions",
              "documentation": {
                "identifier": "builtinExtensions",
                "newPage": false,
                "searchKey": "graphqlbackend.builtinExtensions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var builtinExtensions"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar builtinExtensions = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ErrExtensionsDisabled",
              "documentation": {
                "identifier": "ErrExtensionsDisabled",
                "newPage": false,
                "searchKey": "graphqlbackend.ErrExtensionsDisabled",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrExtensionsDisabled"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrExtensionsDisabled = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ExtensionRegistry",
              "documentation": {
                "identifier": "ExtensionRegistry",
                "newPage": false,
                "searchKey": "graphqlbackend.ExtensionRegistry",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ExtensionRegistry"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ExtensionRegistry func(db dbutil.DB) ExtensionRegistryResolver\n```\n\nExtensionRegistry is the implementation of the GraphQL types ExtensionRegistry and ExtensionRegistryMutation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#NodeToRegistryExtension",
              "documentation": {
                "identifier": "NodeToRegistryExtension",
                "newPage": false,
                "searchKey": "graphqlbackend.NodeToRegistryExtension",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var NodeToRegistryExtension"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar NodeToRegistryExtension func(interface{}) (RegistryExtension, bool)\n```\n\nNodeToRegistryExtension is called to convert GraphQL node values to values of type RegistryExtension. It is assigned at init time. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RegistryExtensionByID",
              "documentation": {
                "identifier": "RegistryExtensionByID",
                "newPage": false,
                "searchKey": "graphqlbackend.RegistryExtensionByID",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var RegistryExtensionByID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar RegistryExtensionByID func(context.Context, dbutil.DB, graphql.ID) (RegistryExtension, error)\n```\n\nRegistryExtensionByID is called to look up values of GraphQL type RegistryExtension. It is assigned at init time. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#scopeCache",
              "documentation": {
                "identifier": "scopeCache",
                "newPage": false,
                "searchKey": "graphqlbackend.scopeCache",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var scopeCache"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scopeCache = rcache.New(\"extsvc_token_scope\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#extsvcConfigAllowEdits",
              "documentation": {
                "identifier": "extsvcConfigAllowEdits",
                "newPage": false,
                "searchKey": "graphqlbackend.extsvcConfigAllowEdits",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var extsvcConfigAllowEdits"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar extsvcConfigAllowEdits, _ = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#errNoAccessExternalService",
              "documentation": {
                "identifier": "errNoAccessExternalService",
                "newPage": false,
                "searchKey": "graphqlbackend.errNoAccessExternalService",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errNoAccessExternalService"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errNoAccessExternalService = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#metricLabels",
              "documentation": {
                "identifier": "metricLabels",
                "newPage": false,
                "searchKey": "graphqlbackend.metricLabels",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var metricLabels"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar metricLabels = []string{\"origin\"}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#codeIntelRequests",
              "documentation": {
                "identifier": "codeIntelRequests",
                "newPage": false,
                "searchKey": "graphqlbackend.codeIntelRequests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var codeIntelRequests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar codeIntelRequests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#graphqlFieldHistogram",
              "documentation": {
                "identifier": "graphqlFieldHistogram",
                "newPage": false,
                "searchKey": "graphqlbackend.graphqlFieldHistogram",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var graphqlFieldHistogram"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar graphqlFieldHistogram = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#codeIntelSearchHistogram",
              "documentation": {
                "identifier": "codeIntelSearchHistogram",
                "newPage": false,
                "searchKey": "graphqlbackend.codeIntelSearchHistogram",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var codeIntelSearchHistogram"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar codeIntelSearchHistogram = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#allowedPrometheusFieldNames",
              "documentation": {
                "identifier": "allowedPrometheusFieldNames",
                "newPage": false,
                "searchKey": "graphqlbackend.allowedPrometheusFieldNames",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var allowedPrometheusFieldNames"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar allowedPrometheusFieldNames = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#blocklistedPrometheusTypeNames",
              "documentation": {
                "identifier": "blocklistedPrometheusTypeNames",
                "newPage": false,
                "searchKey": "graphqlbackend.blocklistedPrometheusTypeNames",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var blocklistedPrometheusTypeNames"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar blocklistedPrometheusTypeNames = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#EnterpriseResolvers",
              "documentation": {
                "identifier": "EnterpriseResolvers",
                "newPage": false,
                "searchKey": "graphqlbackend.EnterpriseResolvers",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var EnterpriseResolvers"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar EnterpriseResolvers = ...\n```\n\nEnterpriseResolvers holds the instances of resolvers which are enabled only in enterprise mode. These resolver instances are nil when running as OSS. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#testMetricWarning",
              "documentation": {
                "identifier": "testMetricWarning",
                "newPage": false,
                "searchKey": "graphqlbackend.testMetricWarning",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var testMetricWarning"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testMetricWarning = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#testMetricCritical",
              "documentation": {
                "identifier": "testMetricCritical",
                "newPage": false,
                "searchKey": "graphqlbackend.testMetricCritical",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var testMetricCritical"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testMetricCritical = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#emailTemplates",
              "documentation": {
                "identifier": "emailTemplates",
                "newPage": false,
                "searchKey": "graphqlbackend.emailTemplates",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var emailTemplates"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar emailTemplates = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#GetConfiguredProductLicenseInfo",
              "documentation": {
                "identifier": "GetConfiguredProductLicenseInfo",
                "newPage": false,
                "searchKey": "graphqlbackend.GetConfiguredProductLicenseInfo",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var GetConfiguredProductLicenseInfo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar GetConfiguredProductLicenseInfo = func() (*ProductLicenseInfo, error) {\n\treturn nil, nil\n}\n```\n\nGetConfiguredProductLicenseInfo is called to obtain the product subscription info when creating the GraphQL resolver for the GraphQL type ProductLicenseInfo. \n\nExactly 1 of its return values must be non-nil. \n\nIt is overridden in non-OSS builds to return information about the actual product subscription in use. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#GetProductNameWithBrand",
              "documentation": {
                "identifier": "GetProductNameWithBrand",
                "newPage": false,
                "searchKey": "graphqlbackend.GetProductNameWithBrand",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var GetProductNameWithBrand"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar GetProductNameWithBrand = ...\n```\n\nGetProductNameWithBrand is called to obtain the full product name (e.g., \"Sourcegraph OSS\") from a product license. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ActualUserCount",
              "documentation": {
                "identifier": "ActualUserCount",
                "newPage": false,
                "searchKey": "graphqlbackend.ActualUserCount",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ActualUserCount"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ActualUserCount = func(ctx context.Context) (int32, error) {\n\treturn 0, nil\n}\n```\n\nActualUserCount is called to obtain the actual maximum number of user accounts that have been active on this Sourcegraph instance for the current license. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ActualUserCountDate",
              "documentation": {
                "identifier": "ActualUserCountDate",
                "newPage": false,
                "searchKey": "graphqlbackend.ActualUserCountDate",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ActualUserCountDate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ActualUserCountDate = func(ctx context.Context) (string, error) {\n\treturn \"\", nil\n}\n```\n\nActualUserCountDate is called to obtain the timestamp when the actual maximum number of user accounts that have been active on this Sourcegraph instance for the current license was reached. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#NoLicenseMaximumAllowedUserCount",
              "documentation": {
                "identifier": "NoLicenseMaximumAllowedUserCount",
                "newPage": false,
                "searchKey": "graphqlbackend.NoLicenseMaximumAllowedUserCount",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var NoLicenseMaximumAllowedUserCount"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar NoLicenseMaximumAllowedUserCount *int32\n```\n\nNoLicenseMaximumAllowedUserCount is the maximum allowed user count when there is no license, or nil if there is no limit. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#NoLicenseWarningUserCount",
              "documentation": {
                "identifier": "NoLicenseWarningUserCount",
                "newPage": false,
                "searchKey": "graphqlbackend.NoLicenseWarningUserCount",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var NoLicenseWarningUserCount"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar NoLicenseWarningUserCount *int32\n```\n\nNoLicenseWarningUserCount is the user count at which point a warning is shown to all users when there is no license, or nil if there is no limit. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#quantityParams",
              "documentation": {
                "identifier": "quantityParams",
                "newPage": false,
                "searchKey": "graphqlbackend.quantityParams",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var quantityParams"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar quantityParams = map[string]struct{}{\n\t\"first\": {},\n\t\"last\":  {},\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#nonSCPURLRegex",
              "documentation": {
                "identifier": "nonSCPURLRegex",
                "newPage": false,
                "searchKey": "graphqlbackend.nonSCPURLRegex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var nonSCPURLRegex"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nonSCPURLRegex = lazyregexp.New(`^(git\\+)?(https?|ssh|rsync|file|git|perforce)://`)\n```\n\nTODO(flying-robot): this regex and the majority of the removeUserInfo function can be extracted to a common location in a subsequent change. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#patternType",
              "documentation": {
                "identifier": "patternType",
                "newPage": false,
                "searchKey": "graphqlbackend.patternType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var patternType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar patternType = lazyregexp.New(`(?i)\\bpatternType:(literal|regexp|structural)\\b`)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#errMissingPatternType",
              "documentation": {
                "identifier": "errMissingPatternType",
                "newPage": false,
                "searchKey": "graphqlbackend.errMissingPatternType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errMissingPatternType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errMissingPatternType = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#mainSchema",
              "documentation": {
                "identifier": "mainSchema",
                "newPage": false,
                "searchKey": "graphqlbackend.mainSchema",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var mainSchema"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mainSchema string\n```\n\nmainSchema is the main raw graqhql schema. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#batchesSchema",
              "documentation": {
                "identifier": "batchesSchema",
                "newPage": false,
                "searchKey": "graphqlbackend.batchesSchema",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var batchesSchema"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar batchesSchema string\n```\n\nbatchesSchema is the Batch Changes raw graqhql schema. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#codeIntelSchema",
              "documentation": {
                "identifier": "codeIntelSchema",
                "newPage": false,
                "searchKey": "graphqlbackend.codeIntelSchema",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var codeIntelSchema"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar codeIntelSchema string\n```\n\ncodeIntelSchema is the Code Intel raw graqhql schema. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#dotcomSchema",
              "documentation": {
                "identifier": "dotcomSchema",
                "newPage": false,
                "searchKey": "graphqlbackend.dotcomSchema",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var dotcomSchema"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dotcomSchema string\n```\n\ndotcomSchema is the Dotcom schema extension raw graqhql schema. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#licenseSchema",
              "documentation": {
                "identifier": "licenseSchema",
                "newPage": false,
                "searchKey": "graphqlbackend.licenseSchema",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var licenseSchema"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar licenseSchema string\n```\n\nlicenseSchema is the Licensing raw graqhql schema. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#codeMonitorsSchema",
              "documentation": {
                "identifier": "codeMonitorsSchema",
                "newPage": false,
                "searchKey": "graphqlbackend.codeMonitorsSchema",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var codeMonitorsSchema"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar codeMonitorsSchema string\n```\n\ncodeMonitorsSchema is the Code Monitoring raw graqhql schema. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#insightsSchema",
              "documentation": {
                "identifier": "insightsSchema",
                "newPage": false,
                "searchKey": "graphqlbackend.insightsSchema",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var insightsSchema"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar insightsSchema string\n```\n\ninsightsSchema is the Code Insights raw graqhql schema. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#authzSchema",
              "documentation": {
                "identifier": "authzSchema",
                "newPage": false,
                "searchKey": "graphqlbackend.authzSchema",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var authzSchema"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar authzSchema string\n```\n\nauthzSchema is the Authz raw graqhql schema. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#mockResolveRepositories",
              "documentation": {
                "identifier": "mockResolveRepositories",
                "newPage": false,
                "searchKey": "graphqlbackend.mockResolveRepositories",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var mockResolveRepositories"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mockResolveRepositories func(effectiveRepoFieldValues []string) (resolved searchrepos.Resolved, err error) = ...\n```\n\nThis file contains the root resolver for search. It currently has a lot of logic that spans out into all the other search_* files. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#mockDecodedViewerFinalSettings",
              "documentation": {
                "identifier": "mockDecodedViewerFinalSettings",
                "newPage": false,
                "searchKey": "graphqlbackend.mockDecodedViewerFinalSettings",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var mockDecodedViewerFinalSettings"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mockDecodedViewerFinalSettings *schema.Settings\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#numTotalRepos",
              "documentation": {
                "identifier": "numTotalRepos",
                "newPage": false,
                "searchKey": "graphqlbackend.numTotalRepos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var numTotalRepos"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar numTotalRepos = &numTotalReposCache{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchResponseCounter",
              "documentation": {
                "identifier": "searchResponseCounter",
                "newPage": false,
                "searchKey": "graphqlbackend.searchResponseCounter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var searchResponseCounter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar searchResponseCounter = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchLatencyHistogram",
              "documentation": {
                "identifier": "searchLatencyHistogram",
                "newPage": false,
                "searchKey": "graphqlbackend.searchLatencyHistogram",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var searchLatencyHistogram"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar searchLatencyHistogram = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ErrPredicateNoResults",
              "documentation": {
                "identifier": "ErrPredicateNoResults",
                "newPage": false,
                "searchKey": "graphqlbackend.ErrPredicateNoResults",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrPredicateNoResults"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrPredicateNoResults = errors.New(\"no results returned for predicate\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchResultsStatsCache",
              "documentation": {
                "identifier": "searchResultsStatsCache",
                "newPage": false,
                "searchKey": "graphqlbackend.searchResultsStatsCache",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var searchResultsStatsCache"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar searchResultsStatsCache = rcache.NewWithTTL(\"search_results_stats\", 3600) // 1h\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchResultsStatsCounter",
              "documentation": {
                "identifier": "searchResultsStatsCounter",
                "newPage": false,
                "searchKey": "graphqlbackend.searchResultsStatsCounter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var searchResultsStatsCounter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar searchResultsStatsCounter = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#defaultTimeout",
              "documentation": {
                "identifier": "defaultTimeout",
                "newPage": false,
                "searchKey": "graphqlbackend.defaultTimeout",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var defaultTimeout"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar defaultTimeout = 20 * time.Second\n```\n\nThe default timeout to use for queries. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#mockShowRepoSuggestions",
              "documentation": {
                "identifier": "mockShowRepoSuggestions",
                "newPage": false,
                "searchKey": "graphqlbackend.mockShowRepoSuggestions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var mockShowRepoSuggestions"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mockShowRepoSuggestions showSearchSuggestionResolvers\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#mockShowFileSuggestions",
              "documentation": {
                "identifier": "mockShowFileSuggestions",
                "newPage": false,
                "searchKey": "graphqlbackend.mockShowFileSuggestions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var mockShowFileSuggestions"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mockShowFileSuggestions showSearchSuggestionResolvers\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#mockShowLangSuggestions",
              "documentation": {
                "identifier": "mockShowLangSuggestions",
                "newPage": false,
                "searchKey": "graphqlbackend.mockShowLangSuggestions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var mockShowLangSuggestions"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mockShowLangSuggestions showSearchSuggestionResolvers\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#mockShowSymbolMatches",
              "documentation": {
                "identifier": "mockShowSymbolMatches",
                "newPage": false,
                "searchKey": "graphqlbackend.mockShowSymbolMatches",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var mockShowSymbolMatches"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mockShowSymbolMatches showSearchSuggestionResolvers\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#globalSettingsAllowEdits",
              "documentation": {
                "identifier": "globalSettingsAllowEdits",
                "newPage": false,
                "searchKey": "graphqlbackend.globalSettingsAllowEdits",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var globalSettingsAllowEdits"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar globalSettingsAllowEdits, _ = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#mockSettingsCascadeSubjects",
              "documentation": {
                "identifier": "mockSettingsCascadeSubjects",
                "newPage": false,
                "searchKey": "graphqlbackend.mockSettingsCascadeSubjects",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var mockSettingsCascadeSubjects"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mockSettingsCascadeSubjects func() ([]*settingsSubject, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#deeplyMergedSettingsFields",
              "documentation": {
                "identifier": "deeplyMergedSettingsFields",
                "newPage": false,
                "searchKey": "graphqlbackend.deeplyMergedSettingsFields",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var deeplyMergedSettingsFields"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar deeplyMergedSettingsFields = ...\n```\n\ndeeplyMergedSettingsFields contains the names of top-level settings fields whose values should be merged if they appear in multiple cascading settings. The value is the merge depth (how many levels into the object should the merging occur). \n\nFor example, suppose org settings is {\"a\":[1]} and user settings is {\"a\":[2]}. If \"a\" is NOT a deeply merged field, the merged settings would be {\"a\":[2]}. If \"a\" IS a deeply merged field with depth >= 1, then the merged settings would be {\"a\":[1,2].} \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#errUnknownSettingsSubject",
              "documentation": {
                "identifier": "errUnknownSettingsSubject",
                "newPage": false,
                "searchKey": "graphqlbackend.errUnknownSettingsSubject",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errUnknownSettingsSubject"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errUnknownSettingsSubject = errors.New(\"unknown settings subject\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#siteConfigAllowEdits",
              "documentation": {
                "identifier": "siteConfigAllowEdits",
                "newPage": false,
                "searchKey": "graphqlbackend.siteConfigAllowEdits",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var siteConfigAllowEdits"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar siteConfigAllowEdits, _ = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#AlertFuncs",
              "documentation": {
                "identifier": "AlertFuncs",
                "newPage": false,
                "searchKey": "graphqlbackend.AlertFuncs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var AlertFuncs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar AlertFuncs []func(AlertFuncArgs) []*Alert\n```\n\nAlertFuncs is a list of functions called to populate the GraphQL Site.alerts value. It may be appended to at init time. \n\nThe functions are called each time the Site.alerts value is queried, so they must not block. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#disableSecurity",
              "documentation": {
                "identifier": "disableSecurity",
                "newPage": false,
                "searchKey": "graphqlbackend.disableSecurity",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var disableSecurity"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar disableSecurity, _ = ...\n```\n\nIntentionally named \"DISABLE_SECURITY\" and not something else, so that anyone considering disabling this thinks twice about the risks associated with disabling these and considers keeping up-to-date more frequently instead. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#canReloadSite",
              "documentation": {
                "identifier": "canReloadSite",
                "newPage": false,
                "searchKey": "graphqlbackend.canReloadSite",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var canReloadSite"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar canReloadSite = processrestart.CanRestart()\n```\n\ncanReloadSite is whether the current site can be reloaded via the API. Currently only goreman-managed sites can be reloaded. Callers must also check if the actor is an admin before actually reloading the site. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#parseSchemaOnce",
              "documentation": {
                "identifier": "parseSchemaOnce",
                "newPage": false,
                "searchKey": "graphqlbackend.parseSchemaOnce",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var parseSchemaOnce"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar parseSchemaOnce sync.Once\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#parseSchemaErr",
              "documentation": {
                "identifier": "parseSchemaErr",
                "newPage": false,
                "searchKey": "graphqlbackend.parseSchemaErr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var parseSchemaErr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar parseSchemaErr error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#parsedSchema",
              "documentation": {
                "identifier": "parsedSchema",
                "newPage": false,
                "searchKey": "graphqlbackend.parsedSchema",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var parsedSchema"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar parsedSchema *graphql.Schema\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#timeNow",
              "documentation": {
                "identifier": "timeNow",
                "newPage": false,
                "searchKey": "graphqlbackend.timeNow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var timeNow"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar timeNow = time.Now\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchLatenciesFrontendCodeLoad",
              "documentation": {
                "identifier": "searchLatenciesFrontendCodeLoad",
                "newPage": false,
                "searchKey": "graphqlbackend.searchLatenciesFrontendCodeLoad",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var searchLatenciesFrontendCodeLoad"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar searchLatenciesFrontendCodeLoad = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchLatenciesFrontendFirstResult",
              "documentation": {
                "identifier": "searchLatenciesFrontendFirstResult",
                "newPage": false,
                "searchKey": "graphqlbackend.searchLatenciesFrontendFirstResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var searchLatenciesFrontendFirstResult"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar searchLatenciesFrontendFirstResult = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#highlightHistogram",
              "documentation": {
                "identifier": "highlightHistogram",
                "newPage": false,
                "searchKey": "graphqlbackend.highlightHistogram",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var highlightHistogram"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar highlightHistogram = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#rawCursor",
              "documentation": {
                "identifier": "rawCursor",
                "newPage": false,
                "searchKey": "graphqlbackend.rawCursor",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var rawCursor"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar rawCursor = repositoryCursor{Column: \"foo\", Value: \"bar\", Direction: \"next\"}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#opaqueCursor",
              "documentation": {
                "identifier": "opaqueCursor",
                "newPage": false,
                "searchKey": "graphqlbackend.opaqueCursor",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var opaqueCursor"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar opaqueCursor = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#mockCount",
              "documentation": {
                "identifier": "mockCount",
                "newPage": false,
                "searchKey": "graphqlbackend.mockCount",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var mockCount"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mockCount = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#testSearchGQLQuery",
              "documentation": {
                "identifier": "testSearchGQLQuery",
                "newPage": false,
                "searchKey": "graphqlbackend.testSearchGQLQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var testSearchGQLQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testSearchGQLQuery = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/cmd/frontend/graphqlbackend#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#accessTokenResolver",
              "documentation": {
                "identifier": "accessTokenResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.accessTokenResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type accessTokenResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype accessTokenResolver struct {\n\tdb          dbutil.DB\n\taccessToken database.AccessToken\n}\n```\n\naccessTokenResolver resolves an access token. \n\nAccess tokens provide scoped access to a user account (not just the API). This is different than other services such as GitHub, where access tokens only provide access to the API. This is OK for us because our general UI is completely implemented via our API, so access token authentication with our UI does not provide any additional functionality. In contrast, GitHub and other services likely allow user accounts to do more than what access tokens alone can via the API. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#accessTokenByID",
                    "documentation": {
                      "identifier": "accessTokenByID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.accessTokenByID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func accessTokenByID(ctx context.Context, db dbutil.DB, id graphql.ID) (*accessTokenResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc accessTokenByID(ctx context.Context, db dbutil.DB, id graphql.ID) (*accessTokenResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#accessTokenResolver.ID",
                    "documentation": {
                      "identifier": "accessTokenResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.accessTokenResolver.ID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *accessTokenResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *accessTokenResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#accessTokenResolver.Subject",
                    "documentation": {
                      "identifier": "accessTokenResolver.Subject",
                      "newPage": false,
                      "searchKey": "graphqlbackend.accessTokenResolver.Subject",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *accessTokenResolver) Subject(ctx context.Context) (*UserResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *accessTokenResolver) Subject(ctx context.Context) (*UserResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#accessTokenResolver.Scopes",
                    "documentation": {
                      "identifier": "accessTokenResolver.Scopes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.accessTokenResolver.Scopes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *accessTokenResolver) Scopes() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *accessTokenResolver) Scopes() []string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#accessTokenResolver.Note",
                    "documentation": {
                      "identifier": "accessTokenResolver.Note",
                      "newPage": false,
                      "searchKey": "graphqlbackend.accessTokenResolver.Note",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *accessTokenResolver) Note() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *accessTokenResolver) Note() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#accessTokenResolver.Creator",
                    "documentation": {
                      "identifier": "accessTokenResolver.Creator",
                      "newPage": false,
                      "searchKey": "graphqlbackend.accessTokenResolver.Creator",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *accessTokenResolver) Creator(ctx context.Context) (*UserResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *accessTokenResolver) Creator(ctx context.Context) (*UserResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#accessTokenResolver.CreatedAt",
                    "documentation": {
                      "identifier": "accessTokenResolver.CreatedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.accessTokenResolver.CreatedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *accessTokenResolver) CreatedAt() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *accessTokenResolver) CreatedAt() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#accessTokenResolver.LastUsedAt",
                    "documentation": {
                      "identifier": "accessTokenResolver.LastUsedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.accessTokenResolver.LastUsedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *accessTokenResolver) LastUsedAt() *DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *accessTokenResolver) LastUsedAt() *DateTime\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#createAccessTokenInput",
              "documentation": {
                "identifier": "createAccessTokenInput",
                "newPage": false,
                "searchKey": "graphqlbackend.createAccessTokenInput",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type createAccessTokenInput struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype createAccessTokenInput struct {\n\tUser   graphql.ID\n\tScopes []string\n\tNote   string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#createAccessTokenResult",
              "documentation": {
                "identifier": "createAccessTokenResult",
                "newPage": false,
                "searchKey": "graphqlbackend.createAccessTokenResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type createAccessTokenResult struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype createAccessTokenResult struct {\n\tid    graphql.ID\n\ttoken string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#createAccessTokenResult.ID",
                    "documentation": {
                      "identifier": "createAccessTokenResult.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.createAccessTokenResult.ID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *createAccessTokenResult) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *createAccessTokenResult) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#createAccessTokenResult.Token",
                    "documentation": {
                      "identifier": "createAccessTokenResult.Token",
                      "newPage": false,
                      "searchKey": "graphqlbackend.createAccessTokenResult.Token",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *createAccessTokenResult) Token() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *createAccessTokenResult) Token() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#deleteAccessTokenInput",
              "documentation": {
                "identifier": "deleteAccessTokenInput",
                "newPage": false,
                "searchKey": "graphqlbackend.deleteAccessTokenInput",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type deleteAccessTokenInput struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype deleteAccessTokenInput struct {\n\tByID    *graphql.ID\n\tByToken *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#accessTokenConnectionResolver",
              "documentation": {
                "identifier": "accessTokenConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.accessTokenConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type accessTokenConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype accessTokenConnectionResolver struct {\n\topt database.AccessTokensListOptions\n\n\t// cache results because they are used by multiple fields\n\tonce         sync.Once\n\taccessTokens []*database.AccessToken\n\terr          error\n\tdb           dbutil.DB\n}\n```\n\naccessTokenConnectionResolver resolves a list of access tokens. \n\n🚨 SECURITY: When instantiating an accessTokenConnectionResolver value, the caller MUST check permissions. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#accessTokenConnectionResolver.compute",
                    "documentation": {
                      "identifier": "accessTokenConnectionResolver.compute",
                      "newPage": false,
                      "searchKey": "graphqlbackend.accessTokenConnectionResolver.compute",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *accessTokenConnectionResolver) compute(ctx context.Context) ([]*database.AccessToken, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *accessTokenConnectionResolver) compute(ctx context.Context) ([]*database.AccessToken, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#accessTokenConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "accessTokenConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.accessTokenConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *accessTokenConnectionResolver) Nodes(ctx context.Context) ([]*accessTokenResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *accessTokenConnectionResolver) Nodes(ctx context.Context) ([]*accessTokenResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#accessTokenConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "accessTokenConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.accessTokenConnectionResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *accessTokenConnectionResolver) TotalCount(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *accessTokenConnectionResolver) TotalCount(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#accessTokenConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "accessTokenConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.accessTokenConnectionResolver.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *accessTokenConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *accessTokenConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#affiliatedRepositoriesConnection",
              "documentation": {
                "identifier": "affiliatedRepositoriesConnection",
                "newPage": false,
                "searchKey": "graphqlbackend.affiliatedRepositoriesConnection",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type affiliatedRepositoriesConnection struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype affiliatedRepositoriesConnection struct {\n\tuserID   int32\n\tcodeHost int64\n\tquery    string\n\n\tonce  sync.Once\n\tnodes []*codeHostRepositoryResolver\n\terr   error\n\tdb    dbutil.DB\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#affiliatedRepositoriesConnection.Nodes",
                    "documentation": {
                      "identifier": "affiliatedRepositoriesConnection.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.affiliatedRepositoriesConnection.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a *affiliatedRepositoriesConnection) Nodes(ctx context.Context) ([]*codeHostRepositoryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a *affiliatedRepositoriesConnection) Nodes(ctx context.Context) ([]*codeHostRepositoryResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#codeHostRepositoryResolver",
              "documentation": {
                "identifier": "codeHostRepositoryResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.codeHostRepositoryResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type codeHostRepositoryResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype codeHostRepositoryResolver struct {\n\trepo     *types.CodeHostRepository\n\tcodeHost *types.ExternalService\n\tdb       dbutil.DB\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#codeHostRepositoryResolver.Name",
                    "documentation": {
                      "identifier": "codeHostRepositoryResolver.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.codeHostRepositoryResolver.Name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *codeHostRepositoryResolver) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *codeHostRepositoryResolver) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#codeHostRepositoryResolver.Private",
                    "documentation": {
                      "identifier": "codeHostRepositoryResolver.Private",
                      "newPage": false,
                      "searchKey": "graphqlbackend.codeHostRepositoryResolver.Private",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *codeHostRepositoryResolver) Private() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *codeHostRepositoryResolver) Private() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#codeHostRepositoryResolver.CodeHost",
                    "documentation": {
                      "identifier": "codeHostRepositoryResolver.CodeHost",
                      "newPage": false,
                      "searchKey": "graphqlbackend.codeHostRepositoryResolver.CodeHost",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *codeHostRepositoryResolver) CodeHost(ctx context.Context) *externalServiceResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *codeHostRepositoryResolver) CodeHost(ctx context.Context) *externalServiceResolver\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#authProviderResolver",
              "documentation": {
                "identifier": "authProviderResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.authProviderResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type authProviderResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype authProviderResolver struct {\n\tauthProvider providers.Provider\n\n\tinfo *providers.Info // == authProvider.CachedInfo()\n}\n```\n\nauthProviderResolver resolves an auth provider. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#authProviderResolver.ServiceType",
                    "documentation": {
                      "identifier": "authProviderResolver.ServiceType",
                      "newPage": false,
                      "searchKey": "graphqlbackend.authProviderResolver.ServiceType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *authProviderResolver) ServiceType() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *authProviderResolver) ServiceType() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#authProviderResolver.ServiceID",
                    "documentation": {
                      "identifier": "authProviderResolver.ServiceID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.authProviderResolver.ServiceID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *authProviderResolver) ServiceID() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *authProviderResolver) ServiceID() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#authProviderResolver.ClientID",
                    "documentation": {
                      "identifier": "authProviderResolver.ClientID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.authProviderResolver.ClientID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *authProviderResolver) ClientID() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *authProviderResolver) ClientID() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#authProviderResolver.DisplayName",
                    "documentation": {
                      "identifier": "authProviderResolver.DisplayName",
                      "newPage": false,
                      "searchKey": "graphqlbackend.authProviderResolver.DisplayName",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *authProviderResolver) DisplayName() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *authProviderResolver) DisplayName() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#authProviderResolver.IsBuiltin",
                    "documentation": {
                      "identifier": "authProviderResolver.IsBuiltin",
                      "newPage": false,
                      "searchKey": "graphqlbackend.authProviderResolver.IsBuiltin",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *authProviderResolver) IsBuiltin() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *authProviderResolver) IsBuiltin() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#authProviderResolver.AuthenticationURL",
                    "documentation": {
                      "identifier": "authProviderResolver.AuthenticationURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.authProviderResolver.AuthenticationURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *authProviderResolver) AuthenticationURL() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *authProviderResolver) AuthenticationURL() *string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#authProviderConnectionResolver",
              "documentation": {
                "identifier": "authProviderConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.authProviderConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type authProviderConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype authProviderConnectionResolver struct {\n\tauthProviders []providers.Provider\n}\n```\n\nauthProviderConnectionResolver resolves a list of auth providers. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#authProviderConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "authProviderConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.authProviderConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *authProviderConnectionResolver) Nodes(ctx context.Context) ([]*authProviderResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *authProviderConnectionResolver) Nodes(ctx context.Context) ([]*authProviderResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#authProviderConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "authProviderConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.authProviderConnectionResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *authProviderConnectionResolver) TotalCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *authProviderConnectionResolver) TotalCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#authProviderConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "authProviderConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.authProviderConnectionResolver.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *authProviderConnectionResolver) PageInfo() *graphqlutil.PageInfo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *authProviderConnectionResolver) PageInfo() *graphqlutil.PageInfo\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#AuthzResolver",
              "documentation": {
                "identifier": "AuthzResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.AuthzResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AuthzResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AuthzResolver interface {\n\t// Mutations\n\tSetRepositoryPermissionsForUsers(ctx context.Context, args *RepoPermsArgs) (*EmptyResponse, error)\n\tScheduleRepositoryPermissionsSync(ctx context.Context, args *RepositoryIDArgs) (*EmptyResponse, error)\n\tScheduleUserPermissionsSync(ctx context.Context, args *UserIDArgs) (*EmptyResponse, error)\n\n\t// Queries\n\tAuthorizedUserRepositories(ctx context.Context, args *AuthorizedRepoArgs) (RepositoryConnectionResolver, error)\n\tUsersWithPendingPermissions(ctx context.Context) ([]string, error)\n\tAuthorizedUsers(ctx context.Context, args *RepoAuthorizedUserArgs) (UserConnectionResolver, error)\n\n\t// Helpers\n\tRepositoryPermissionsInfo(ctx context.Context, repoID graphql.ID) (PermissionsInfoResolver, error)\n\tUserPermissionsInfo(ctx context.Context, userID graphql.ID) (PermissionsInfoResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RepositoryIDArgs",
              "documentation": {
                "identifier": "RepositoryIDArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.RepositoryIDArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepositoryIDArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepositoryIDArgs struct {\n\tRepository graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#UserIDArgs",
              "documentation": {
                "identifier": "UserIDArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.UserIDArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserIDArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserIDArgs struct {\n\tUser graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RepoPermsArgs",
              "documentation": {
                "identifier": "RepoPermsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.RepoPermsArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepoPermsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepoPermsArgs struct {\n\tRepository      graphql.ID\n\tUserPermissions []struct {\n\t\tBindID     string\n\t\tPermission string\n\t}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#AuthorizedRepoArgs",
              "documentation": {
                "identifier": "AuthorizedRepoArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.AuthorizedRepoArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AuthorizedRepoArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AuthorizedRepoArgs struct {\n\tUsername *string\n\tEmail    *string\n\tPerm     string\n\tFirst    int32\n\tAfter    *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#PermissionsInfoResolver",
              "documentation": {
                "identifier": "PermissionsInfoResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.PermissionsInfoResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PermissionsInfoResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PermissionsInfoResolver interface {\n\tPermissions() []string\n\tSyncedAt() *DateTime\n\tUpdatedAt() DateTime\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CreateCampaignArgs",
              "documentation": {
                "identifier": "CreateCampaignArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.CreateCampaignArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CreateCampaignArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CreateCampaignArgs struct {\n\tCampaignSpec graphql.ID\n}\n```\n\nTODO(campaigns-deprecation) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CreateCampaignSpecArgs",
              "documentation": {
                "identifier": "CreateCampaignSpecArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.CreateCampaignSpecArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CreateCampaignSpecArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CreateCampaignSpecArgs struct {\n\tNamespace graphql.ID\n\n\tCampaignSpec   string\n\tChangesetSpecs []graphql.ID\n}\n```\n\nTODO(campaigns-deprecation) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ApplyCampaignArgs",
              "documentation": {
                "identifier": "ApplyCampaignArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ApplyCampaignArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ApplyCampaignArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ApplyCampaignArgs struct {\n\tCampaignSpec   graphql.ID\n\tEnsureCampaign *graphql.ID\n}\n```\n\nTODO(campaigns-deprecation) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CloseCampaignArgs",
              "documentation": {
                "identifier": "CloseCampaignArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.CloseCampaignArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CloseCampaignArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CloseCampaignArgs struct {\n\tCampaign        graphql.ID\n\tCloseChangesets bool\n}\n```\n\nTODO(campaigns-deprecation) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MoveCampaignArgs",
              "documentation": {
                "identifier": "MoveCampaignArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.MoveCampaignArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MoveCampaignArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MoveCampaignArgs struct {\n\tCampaign     graphql.ID\n\tNewName      *string\n\tNewNamespace *graphql.ID\n}\n```\n\nTODO(campaigns-deprecation) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#DeleteCampaignArgs",
              "documentation": {
                "identifier": "DeleteCampaignArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.DeleteCampaignArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DeleteCampaignArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DeleteCampaignArgs struct {\n\tCampaign graphql.ID\n}\n```\n\nTODO(campaigns-deprecation) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CreateCampaignsCredentialArgs",
              "documentation": {
                "identifier": "CreateCampaignsCredentialArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.CreateCampaignsCredentialArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CreateCampaignsCredentialArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CreateCampaignsCredentialArgs struct {\n\tExternalServiceKind string\n\tExternalServiceURL  string\n\tUser                graphql.ID\n\tCredential          string\n}\n```\n\nTODO(campaigns-deprecation) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#DeleteCampaignsCredentialArgs",
              "documentation": {
                "identifier": "DeleteCampaignsCredentialArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.DeleteCampaignsCredentialArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DeleteCampaignsCredentialArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DeleteCampaignsCredentialArgs struct {\n\tCampaignsCredential graphql.ID\n}\n```\n\nTODO(campaigns-deprecation) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ListCampaignsCodeHostsArgs",
              "documentation": {
                "identifier": "ListCampaignsCodeHostsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ListCampaignsCodeHostsArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListCampaignsCodeHostsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListCampaignsCodeHostsArgs struct {\n\tFirst  int32\n\tAfter  *string\n\tUserID int32\n}\n```\n\nTODO(campaigns-deprecation) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ListViewerCampaignsCodeHostsArgs",
              "documentation": {
                "identifier": "ListViewerCampaignsCodeHostsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ListViewerCampaignsCodeHostsArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListViewerCampaignsCodeHostsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListViewerCampaignsCodeHostsArgs struct {\n\tFirst                 int32\n\tAfter                 *string\n\tOnlyWithoutCredential bool\n}\n```\n\nTODO(campaigns-deprecation) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CampaignsCodeHostConnectionResolver",
              "documentation": {
                "identifier": "CampaignsCodeHostConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.CampaignsCodeHostConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CampaignsCodeHostConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CampaignsCodeHostConnectionResolver interface {\n\tNodes(ctx context.Context) ([]CampaignsCodeHostResolver, error)\n\tTotalCount(ctx context.Context) (int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\nTODO(campaigns-deprecation) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CampaignsCodeHostResolver",
              "documentation": {
                "identifier": "CampaignsCodeHostResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.CampaignsCodeHostResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CampaignsCodeHostResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CampaignsCodeHostResolver interface {\n\tExternalServiceKind() string\n\tExternalServiceURL() string\n\tRequiresSSH() bool\n\tCredential() CampaignsCredentialResolver\n}\n```\n\nTODO(campaigns-deprecation) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CampaignsCredentialResolver",
              "documentation": {
                "identifier": "CampaignsCredentialResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.CampaignsCredentialResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CampaignsCredentialResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CampaignsCredentialResolver interface {\n\tID() graphql.ID\n\tExternalServiceKind() string\n\tExternalServiceURL() string\n\tSSHPublicKey(ctx context.Context) (*string, error)\n\tCreatedAt() DateTime\n}\n```\n\nTODO(campaigns-deprecation) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CreateBatchChangeArgs",
              "documentation": {
                "identifier": "CreateBatchChangeArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.CreateBatchChangeArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CreateBatchChangeArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CreateBatchChangeArgs struct {\n\tBatchSpec graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ApplyBatchChangeArgs",
              "documentation": {
                "identifier": "ApplyBatchChangeArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ApplyBatchChangeArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ApplyBatchChangeArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ApplyBatchChangeArgs struct {\n\tBatchSpec         graphql.ID\n\tEnsureBatchChange *graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ListBatchChangesArgs",
              "documentation": {
                "identifier": "ListBatchChangesArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ListBatchChangesArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListBatchChangesArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListBatchChangesArgs struct {\n\tFirst               int32\n\tAfter               *string\n\tState               *string\n\tViewerCanAdminister *bool\n\n\tNamespace *graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CloseBatchChangeArgs",
              "documentation": {
                "identifier": "CloseBatchChangeArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.CloseBatchChangeArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CloseBatchChangeArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CloseBatchChangeArgs struct {\n\tBatchChange     graphql.ID\n\tCloseChangesets bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MoveBatchChangeArgs",
              "documentation": {
                "identifier": "MoveBatchChangeArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.MoveBatchChangeArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MoveBatchChangeArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MoveBatchChangeArgs struct {\n\tBatchChange  graphql.ID\n\tNewName      *string\n\tNewNamespace *graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#DeleteBatchChangeArgs",
              "documentation": {
                "identifier": "DeleteBatchChangeArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.DeleteBatchChangeArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DeleteBatchChangeArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DeleteBatchChangeArgs struct {\n\tBatchChange graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#SyncChangesetArgs",
              "documentation": {
                "identifier": "SyncChangesetArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.SyncChangesetArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SyncChangesetArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SyncChangesetArgs struct {\n\tChangeset graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ReenqueueChangesetArgs",
              "documentation": {
                "identifier": "ReenqueueChangesetArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ReenqueueChangesetArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ReenqueueChangesetArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ReenqueueChangesetArgs struct {\n\tChangeset graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CreateChangesetSpecArgs",
              "documentation": {
                "identifier": "CreateChangesetSpecArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.CreateChangesetSpecArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CreateChangesetSpecArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CreateChangesetSpecArgs struct {\n\tChangesetSpec string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CreateBatchSpecArgs",
              "documentation": {
                "identifier": "CreateBatchSpecArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.CreateBatchSpecArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CreateBatchSpecArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CreateBatchSpecArgs struct {\n\tNamespace graphql.ID\n\n\tBatchSpec      string\n\tChangesetSpecs []graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetSpecsConnectionArgs",
              "documentation": {
                "identifier": "ChangesetSpecsConnectionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetSpecsConnectionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetSpecsConnectionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetSpecsConnectionArgs struct {\n\tFirst int32\n\tAfter *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetApplyPreviewConnectionArgs",
              "documentation": {
                "identifier": "ChangesetApplyPreviewConnectionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetApplyPreviewConnectionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetApplyPreviewConnectionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetApplyPreviewConnectionArgs struct {\n\tFirst  int32\n\tAfter  *string\n\tSearch *string\n\t// CurrentState is a value of type btypes.ChangesetState.\n\tCurrentState *string\n\t// Action is a value of type btypes.ReconcilerOperation.\n\tAction *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#BatchChangeArgs",
              "documentation": {
                "identifier": "BatchChangeArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.BatchChangeArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchChangeArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchChangeArgs struct {\n\tNamespace string\n\tName      string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetEventsConnectionArgs",
              "documentation": {
                "identifier": "ChangesetEventsConnectionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetEventsConnectionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetEventsConnectionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetEventsConnectionArgs struct {\n\tFirst int32\n\tAfter *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CreateBatchChangesCredentialArgs",
              "documentation": {
                "identifier": "CreateBatchChangesCredentialArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.CreateBatchChangesCredentialArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CreateBatchChangesCredentialArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CreateBatchChangesCredentialArgs struct {\n\tExternalServiceKind string\n\tExternalServiceURL  string\n\tUser                *graphql.ID\n\tCredential          string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#DeleteBatchChangesCredentialArgs",
              "documentation": {
                "identifier": "DeleteBatchChangesCredentialArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.DeleteBatchChangesCredentialArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DeleteBatchChangesCredentialArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DeleteBatchChangesCredentialArgs struct {\n\tBatchChangesCredential graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ListBatchChangesCodeHostsArgs",
              "documentation": {
                "identifier": "ListBatchChangesCodeHostsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ListBatchChangesCodeHostsArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListBatchChangesCodeHostsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListBatchChangesCodeHostsArgs struct {\n\tFirst  int32\n\tAfter  *string\n\tUserID *int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ListViewerBatchChangesCodeHostsArgs",
              "documentation": {
                "identifier": "ListViewerBatchChangesCodeHostsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ListViewerBatchChangesCodeHostsArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListViewerBatchChangesCodeHostsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListViewerBatchChangesCodeHostsArgs struct {\n\tFirst                 int32\n\tAfter                 *string\n\tOnlyWithoutCredential bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#BulkOperationBaseArgs",
              "documentation": {
                "identifier": "BulkOperationBaseArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.BulkOperationBaseArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BulkOperationBaseArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BulkOperationBaseArgs struct {\n\tBatchChange graphql.ID\n\tChangesets  []graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#DetachChangesetsArgs",
              "documentation": {
                "identifier": "DetachChangesetsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.DetachChangesetsArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DetachChangesetsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DetachChangesetsArgs struct {\n\tBulkOperationBaseArgs\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ListBatchChangeBulkOperationArgs",
              "documentation": {
                "identifier": "ListBatchChangeBulkOperationArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ListBatchChangeBulkOperationArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListBatchChangeBulkOperationArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListBatchChangeBulkOperationArgs struct {\n\tFirst        int32\n\tAfter        *string\n\tCreatedAfter *DateTime\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CreateChangesetCommentsArgs",
              "documentation": {
                "identifier": "CreateChangesetCommentsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.CreateChangesetCommentsArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CreateChangesetCommentsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CreateChangesetCommentsArgs struct {\n\tBulkOperationBaseArgs\n\tBody string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ReenqueueChangesetsArgs",
              "documentation": {
                "identifier": "ReenqueueChangesetsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ReenqueueChangesetsArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ReenqueueChangesetsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ReenqueueChangesetsArgs struct {\n\tBulkOperationBaseArgs\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MergeChangesetsArgs",
              "documentation": {
                "identifier": "MergeChangesetsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.MergeChangesetsArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MergeChangesetsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MergeChangesetsArgs struct {\n\tBulkOperationBaseArgs\n\tSquash bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#BatchChangesResolver",
              "documentation": {
                "identifier": "BatchChangesResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.BatchChangesResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchChangesResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchChangesResolver interface {\n\t//\n\t// MUTATIONS\n\t//\n\t// TODO(campaigns-deprecation)\n\tCreateCampaign(ctx context.Context, args *CreateCampaignArgs) (BatchChangeResolver, error)\n\tCreateCampaignSpec(ctx context.Context, args *CreateCampaignSpecArgs) (BatchSpecResolver, error)\n\tApplyCampaign(ctx context.Context, args *ApplyCampaignArgs) (BatchChangeResolver, error)\n\tCloseCampaign(ctx context.Context, args *CloseCampaignArgs) (BatchChangeResolver, error)\n\tMoveCampaign(ctx context.Context, args *MoveCampaignArgs) (BatchChangeResolver, error)\n\tDeleteCampaign(ctx context.Context, args *DeleteCampaignArgs) (*EmptyResponse, error)\n\tCreateCampaignsCredential(ctx context.Context, args *CreateCampaignsCredentialArgs) (CampaignsCredentialResolver, error)\n\tDeleteCampaignsCredential(ctx context.Context, args *DeleteCampaignsCredentialArgs) (*EmptyResponse, error)\n\t// New:\n\tCreateBatchChange(ctx context.Context, args *CreateBatchChangeArgs) (BatchChangeResolver, error)\n\tCreateBatchSpec(ctx context.Context, args *CreateBatchSpecArgs) (BatchSpecResolver, error)\n\tApplyBatchChange(ctx context.Context, args *ApplyBatchChangeArgs) (BatchChangeResolver, error)\n\tCloseBatchChange(ctx context.Context, args *CloseBatchChangeArgs) (BatchChangeResolver, error)\n\tMoveBatchChange(ctx context.Context, args *MoveBatchChangeArgs) (BatchChangeResolver, error)\n\tDeleteBatchChange(ctx context.Context, args *DeleteBatchChangeArgs) (*EmptyResponse, error)\n\tCreateBatchChangesCredential(ctx context.Context, args *CreateBatchChangesCredentialArgs) (BatchChangesCredentialResolver, error)\n\tDeleteBatchChangesCredential(ctx context.Context, args *DeleteBatchChangesCredentialArgs) (*EmptyResponse, error)\n\n\tCreateChangesetSpec(ctx context.Context, args *CreateChangesetSpecArgs) (ChangesetSpecResolver, error)\n\tSyncChangeset(ctx context.Context, args *SyncChangesetArgs) (*EmptyResponse, error)\n\tReenqueueChangeset(ctx context.Context, args *ReenqueueChangesetArgs) (ChangesetResolver, error)\n\tDetachChangesets(ctx context.Context, args *DetachChangesetsArgs) (BulkOperationResolver, error)\n\tCreateChangesetComments(ctx context.Context, args *CreateChangesetCommentsArgs) (BulkOperationResolver, error)\n\tReenqueueChangesets(ctx context.Context, args *ReenqueueChangesetsArgs) (BulkOperationResolver, error)\n\tMergeChangesets(ctx context.Context, args *MergeChangesetsArgs) (BulkOperationResolver, error)\n\n\t// TODO(campaigns-deprecation)\n\tCampaign(ctx context.Context, args *BatchChangeArgs) (BatchChangeResolver, error)\n\tCampaigns(ctx context.Context, args *ListBatchChangesArgs) (BatchChangesConnectionResolver, error)\n\tCampaignsCodeHosts(ctx context.Context, args *ListCampaignsCodeHostsArgs) (CampaignsCodeHostConnectionResolver, error)\n\t// New:\n\tBatchChange(ctx context.Context, args *BatchChangeArgs) (BatchChangeResolver, error)\n\tBatchChanges(cx context.Context, args *ListBatchChangesArgs) (BatchChangesConnectionResolver, error)\n\n\tBatchChangesCodeHosts(ctx context.Context, args *ListBatchChangesCodeHostsArgs) (BatchChangesCodeHostConnectionResolver, error)\n\n\tNodeResolvers() map[string]NodeByIDFunc\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#BulkOperationConnectionResolver",
              "documentation": {
                "identifier": "BulkOperationConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.BulkOperationConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BulkOperationConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BulkOperationConnectionResolver interface {\n\tTotalCount(ctx context.Context) (int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n\tNodes(ctx context.Context) ([]BulkOperationResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#BulkOperationResolver",
              "documentation": {
                "identifier": "BulkOperationResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.BulkOperationResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BulkOperationResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BulkOperationResolver interface {\n\tID() graphql.ID\n\tType() (string, error)\n\tState() string\n\tProgress() float64\n\tErrors(ctx context.Context) ([]ChangesetJobErrorResolver, error)\n\tInitiator(ctx context.Context) (*UserResolver, error)\n\tChangesetCount() int32\n\tCreatedAt() DateTime\n\tFinishedAt() *DateTime\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetJobErrorResolver",
              "documentation": {
                "identifier": "ChangesetJobErrorResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetJobErrorResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetJobErrorResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetJobErrorResolver interface {\n\tChangeset() ChangesetResolver\n\tError() *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#BatchSpecResolver",
              "documentation": {
                "identifier": "BatchSpecResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.BatchSpecResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchSpecResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchSpecResolver interface {\n\tID() graphql.ID\n\n\tOriginalInput() (string, error)\n\tParsedInput() (JSONValue, error)\n\tChangesetSpecs(ctx context.Context, args *ChangesetSpecsConnectionArgs) (ChangesetSpecConnectionResolver, error)\n\tApplyPreview(ctx context.Context, args *ChangesetApplyPreviewConnectionArgs) (ChangesetApplyPreviewConnectionResolver, error)\n\n\tDescription() BatchChangeDescriptionResolver\n\n\tCreator(context.Context) (*UserResolver, error)\n\tCreatedAt() DateTime\n\tNamespace(context.Context) (*NamespaceResolver, error)\n\n\tExpiresAt() *DateTime\n\n\tApplyURL(ctx context.Context) (string, error)\n\n\tViewerCanAdminister(context.Context) (bool, error)\n\n\tDiffStat(ctx context.Context) (*DiffStat, error)\n\n\tAppliesToBatchChange(ctx context.Context) (BatchChangeResolver, error)\n\n\tSupersedingBatchSpec(context.Context) (BatchSpecResolver, error)\n\n\tViewerBatchChangesCodeHosts(ctx context.Context, args *ListViewerBatchChangesCodeHostsArgs) (BatchChangesCodeHostConnectionResolver, error)\n\n\t// TODO(campaigns-deprecation)\n\t// Defined so that BatchSpecResolver can act as a CampaignSpec:\n\tAppliesToCampaign(ctx context.Context) (BatchChangeResolver, error)\n\tSupersedingCampaignSpec(context.Context) (BatchSpecResolver, error)\n\tViewerCampaignsCodeHosts(ctx context.Context, args *ListViewerCampaignsCodeHostsArgs) (CampaignsCodeHostConnectionResolver, error)\n\t// This should be removed once we remove batches. It's here so that in\n\t// the NodeResolver we can have the same resolver, BatchChangeResolver, act\n\t// as a Campaign and a BatchChange.\n\tActAsCampaignSpec() bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#BatchChangeDescriptionResolver",
              "documentation": {
                "identifier": "BatchChangeDescriptionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.BatchChangeDescriptionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchChangeDescriptionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchChangeDescriptionResolver interface {\n\tName() string\n\tDescription() string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetApplyPreviewResolver",
              "documentation": {
                "identifier": "ChangesetApplyPreviewResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetApplyPreviewResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetApplyPreviewResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetApplyPreviewResolver interface {\n\tToVisibleChangesetApplyPreview() (VisibleChangesetApplyPreviewResolver, bool)\n\tToHiddenChangesetApplyPreview() (HiddenChangesetApplyPreviewResolver, bool)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#VisibleChangesetApplyPreviewResolver",
              "documentation": {
                "identifier": "VisibleChangesetApplyPreviewResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.VisibleChangesetApplyPreviewResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type VisibleChangesetApplyPreviewResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype VisibleChangesetApplyPreviewResolver interface {\n\t// Operations returns a slice of btypes.ReconcilerOperation.\n\tOperations(ctx context.Context) ([]string, error)\n\tDelta(ctx context.Context) (ChangesetSpecDeltaResolver, error)\n\tTargets() VisibleApplyPreviewTargetsResolver\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#HiddenChangesetApplyPreviewResolver",
              "documentation": {
                "identifier": "HiddenChangesetApplyPreviewResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.HiddenChangesetApplyPreviewResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type HiddenChangesetApplyPreviewResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype HiddenChangesetApplyPreviewResolver interface {\n\t// Operations returns a slice of btypes.ReconcilerOperation.\n\tOperations(ctx context.Context) ([]string, error)\n\tDelta(ctx context.Context) (ChangesetSpecDeltaResolver, error)\n\tTargets() HiddenApplyPreviewTargetsResolver\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#VisibleApplyPreviewTargetsResolver",
              "documentation": {
                "identifier": "VisibleApplyPreviewTargetsResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.VisibleApplyPreviewTargetsResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type VisibleApplyPreviewTargetsResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype VisibleApplyPreviewTargetsResolver interface {\n\tToVisibleApplyPreviewTargetsAttach() (VisibleApplyPreviewTargetsAttachResolver, bool)\n\tToVisibleApplyPreviewTargetsUpdate() (VisibleApplyPreviewTargetsUpdateResolver, bool)\n\tToVisibleApplyPreviewTargetsDetach() (VisibleApplyPreviewTargetsDetachResolver, bool)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#VisibleApplyPreviewTargetsAttachResolver",
              "documentation": {
                "identifier": "VisibleApplyPreviewTargetsAttachResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.VisibleApplyPreviewTargetsAttachResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type VisibleApplyPreviewTargetsAttachResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype VisibleApplyPreviewTargetsAttachResolver interface {\n\tChangesetSpec(ctx context.Context) (VisibleChangesetSpecResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#VisibleApplyPreviewTargetsUpdateResolver",
              "documentation": {
                "identifier": "VisibleApplyPreviewTargetsUpdateResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.VisibleApplyPreviewTargetsUpdateResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type VisibleApplyPreviewTargetsUpdateResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype VisibleApplyPreviewTargetsUpdateResolver interface {\n\tChangesetSpec(ctx context.Context) (VisibleChangesetSpecResolver, error)\n\tChangeset(ctx context.Context) (ExternalChangesetResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#VisibleApplyPreviewTargetsDetachResolver",
              "documentation": {
                "identifier": "VisibleApplyPreviewTargetsDetachResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.VisibleApplyPreviewTargetsDetachResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type VisibleApplyPreviewTargetsDetachResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype VisibleApplyPreviewTargetsDetachResolver interface {\n\tChangeset(ctx context.Context) (ExternalChangesetResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#HiddenApplyPreviewTargetsResolver",
              "documentation": {
                "identifier": "HiddenApplyPreviewTargetsResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.HiddenApplyPreviewTargetsResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type HiddenApplyPreviewTargetsResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype HiddenApplyPreviewTargetsResolver interface {\n\tToHiddenApplyPreviewTargetsAttach() (HiddenApplyPreviewTargetsAttachResolver, bool)\n\tToHiddenApplyPreviewTargetsUpdate() (HiddenApplyPreviewTargetsUpdateResolver, bool)\n\tToHiddenApplyPreviewTargetsDetach() (HiddenApplyPreviewTargetsDetachResolver, bool)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#HiddenApplyPreviewTargetsAttachResolver",
              "documentation": {
                "identifier": "HiddenApplyPreviewTargetsAttachResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.HiddenApplyPreviewTargetsAttachResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type HiddenApplyPreviewTargetsAttachResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype HiddenApplyPreviewTargetsAttachResolver interface {\n\tChangesetSpec(ctx context.Context) (HiddenChangesetSpecResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#HiddenApplyPreviewTargetsUpdateResolver",
              "documentation": {
                "identifier": "HiddenApplyPreviewTargetsUpdateResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.HiddenApplyPreviewTargetsUpdateResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type HiddenApplyPreviewTargetsUpdateResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype HiddenApplyPreviewTargetsUpdateResolver interface {\n\tChangesetSpec(ctx context.Context) (HiddenChangesetSpecResolver, error)\n\tChangeset(ctx context.Context) (HiddenExternalChangesetResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#HiddenApplyPreviewTargetsDetachResolver",
              "documentation": {
                "identifier": "HiddenApplyPreviewTargetsDetachResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.HiddenApplyPreviewTargetsDetachResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type HiddenApplyPreviewTargetsDetachResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype HiddenApplyPreviewTargetsDetachResolver interface {\n\tChangeset(ctx context.Context) (HiddenExternalChangesetResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetApplyPreviewConnectionStatsResolver",
              "documentation": {
                "identifier": "ChangesetApplyPreviewConnectionStatsResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetApplyPreviewConnectionStatsResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetApplyPreviewConnectionStatsResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetApplyPreviewConnectionStatsResolver interface {\n\tPush() int32\n\tUpdate() int32\n\tUndraft() int32\n\tPublish() int32\n\tPublishDraft() int32\n\tSync() int32\n\tImport() int32\n\tClose() int32\n\tReopen() int32\n\tSleep() int32\n\tDetach() int32\n\tArchive() int32\n\n\tAdded() int32\n\tModified() int32\n\tRemoved() int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetApplyPreviewConnectionResolver",
              "documentation": {
                "identifier": "ChangesetApplyPreviewConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetApplyPreviewConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetApplyPreviewConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetApplyPreviewConnectionResolver interface {\n\tTotalCount(ctx context.Context) (int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n\tNodes(ctx context.Context) ([]ChangesetApplyPreviewResolver, error)\n\tStats(ctx context.Context) (ChangesetApplyPreviewConnectionStatsResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetSpecConnectionResolver",
              "documentation": {
                "identifier": "ChangesetSpecConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetSpecConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetSpecConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetSpecConnectionResolver interface {\n\tTotalCount(ctx context.Context) (int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n\tNodes(ctx context.Context) ([]ChangesetSpecResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetSpecResolver",
              "documentation": {
                "identifier": "ChangesetSpecResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetSpecResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetSpecResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetSpecResolver interface {\n\tID() graphql.ID\n\t// Type returns a value of type btypes.ChangesetSpecDescriptionType.\n\tType() string\n\tExpiresAt() *DateTime\n\n\tToHiddenChangesetSpec() (HiddenChangesetSpecResolver, bool)\n\tToVisibleChangesetSpec() (VisibleChangesetSpecResolver, bool)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#HiddenChangesetSpecResolver",
              "documentation": {
                "identifier": "HiddenChangesetSpecResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.HiddenChangesetSpecResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type HiddenChangesetSpecResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype HiddenChangesetSpecResolver interface {\n\tChangesetSpecResolver\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#VisibleChangesetSpecResolver",
              "documentation": {
                "identifier": "VisibleChangesetSpecResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.VisibleChangesetSpecResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type VisibleChangesetSpecResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype VisibleChangesetSpecResolver interface {\n\tChangesetSpecResolver\n\n\tDescription(ctx context.Context) (ChangesetDescription, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetSpecDeltaResolver",
              "documentation": {
                "identifier": "ChangesetSpecDeltaResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetSpecDeltaResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetSpecDeltaResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetSpecDeltaResolver interface {\n\tTitleChanged() bool\n\tBodyChanged() bool\n\tUndraft() bool\n\tBaseRefChanged() bool\n\tDiffChanged() bool\n\tCommitMessageChanged() bool\n\tAuthorNameChanged() bool\n\tAuthorEmailChanged() bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetDescription",
              "documentation": {
                "identifier": "ChangesetDescription",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetDescription",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetDescription interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetDescription interface {\n\tToExistingChangesetReference() (ExistingChangesetReferenceResolver, bool)\n\tToGitBranchChangesetDescription() (GitBranchChangesetDescriptionResolver, bool)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ExistingChangesetReferenceResolver",
              "documentation": {
                "identifier": "ExistingChangesetReferenceResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.ExistingChangesetReferenceResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExistingChangesetReferenceResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExistingChangesetReferenceResolver interface {\n\tBaseRepository() *RepositoryResolver\n\tExternalID() string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#GitBranchChangesetDescriptionResolver",
              "documentation": {
                "identifier": "GitBranchChangesetDescriptionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.GitBranchChangesetDescriptionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitBranchChangesetDescriptionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitBranchChangesetDescriptionResolver interface {\n\tBaseRepository() *RepositoryResolver\n\tBaseRef() string\n\tBaseRev() string\n\n\tHeadRepository() *RepositoryResolver\n\tHeadRef() string\n\n\tTitle() string\n\tBody() string\n\n\tDiff(ctx context.Context) (PreviewRepositoryComparisonResolver, error)\n\tDiffStat() *DiffStat\n\n\tCommits() []GitCommitDescriptionResolver\n\n\tPublished() batches.PublishedValue\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#GitCommitDescriptionResolver",
              "documentation": {
                "identifier": "GitCommitDescriptionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.GitCommitDescriptionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitCommitDescriptionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitCommitDescriptionResolver interface {\n\tMessage() string\n\tSubject() string\n\tBody() *string\n\tAuthor() *PersonResolver\n\tDiff() string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#BatchChangesCodeHostConnectionResolver",
              "documentation": {
                "identifier": "BatchChangesCodeHostConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.BatchChangesCodeHostConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchChangesCodeHostConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchChangesCodeHostConnectionResolver interface {\n\tNodes(ctx context.Context) ([]BatchChangesCodeHostResolver, error)\n\tTotalCount(ctx context.Context) (int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#BatchChangesCodeHostResolver",
              "documentation": {
                "identifier": "BatchChangesCodeHostResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.BatchChangesCodeHostResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchChangesCodeHostResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchChangesCodeHostResolver interface {\n\tExternalServiceKind() string\n\tExternalServiceURL() string\n\tRequiresSSH() bool\n\tCredential() BatchChangesCredentialResolver\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#BatchChangesCredentialResolver",
              "documentation": {
                "identifier": "BatchChangesCredentialResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.BatchChangesCredentialResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchChangesCredentialResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchChangesCredentialResolver interface {\n\tID() graphql.ID\n\tExternalServiceKind() string\n\tExternalServiceURL() string\n\tSSHPublicKey(ctx context.Context) (*string, error)\n\tCreatedAt() DateTime\n\tIsSiteCredential() bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetCountsArgs",
              "documentation": {
                "identifier": "ChangesetCountsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetCountsArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetCountsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetCountsArgs struct {\n\tFrom            *DateTime\n\tTo              *DateTime\n\tIncludeArchived bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ListChangesetsArgs",
              "documentation": {
                "identifier": "ListChangesetsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ListChangesetsArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListChangesetsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListChangesetsArgs struct {\n\tFirst int32\n\tAfter *string\n\t// PublicationState is a value of type *btypes.ChangesetPublicationState.\n\tPublicationState *string\n\t// ReconcilerState is a slice of *btypes.ReconcilerState.\n\tReconcilerState *[]string\n\t// ExternalState is a value of type *btypes.ChangesetExternalState.\n\tExternalState *string\n\t// State is a value of type *btypes.ChangesetState.\n\tState *string\n\t// ReviewState is a value of type *btypes.ChangesetReviewState.\n\tReviewState *string\n\t// CheckState is a value of type *btypes.ChangesetCheckState.\n\tCheckState *string\n\t// old\n\tOnlyPublishedByThisCampaign *bool\n\t//new\n\tOnlyPublishedByThisBatchChange *bool\n\tSearch                         *string\n\n\tOnlyArchived bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#BatchChangeResolver",
              "documentation": {
                "identifier": "BatchChangeResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.BatchChangeResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchChangeResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchChangeResolver interface {\n\tID() graphql.ID\n\tName() string\n\tDescription() *string\n\tInitialApplier(ctx context.Context) (*UserResolver, error)\n\tLastApplier(ctx context.Context) (*UserResolver, error)\n\tLastAppliedAt() DateTime\n\tSpecCreator(ctx context.Context) (*UserResolver, error)\n\tViewerCanAdminister(ctx context.Context) (bool, error)\n\tURL(ctx context.Context) (string, error)\n\tNamespace(ctx context.Context) (n NamespaceResolver, err error)\n\tCreatedAt() DateTime\n\tUpdatedAt() DateTime\n\tChangesetsStats(ctx context.Context) (ChangesetsStatsResolver, error)\n\tChangesets(ctx context.Context, args *ListChangesetsArgs) (ChangesetsConnectionResolver, error)\n\tChangesetCountsOverTime(ctx context.Context, args *ChangesetCountsArgs) ([]ChangesetCountsResolver, error)\n\tClosedAt() *DateTime\n\tDiffStat(ctx context.Context) (*DiffStat, error)\n\tCurrentSpec(ctx context.Context) (BatchSpecResolver, error)\n\tBulkOperations(ctx context.Context, args *ListBatchChangeBulkOperationArgs) (BulkOperationConnectionResolver, error)\n\n\t// TODO(campaigns-deprecation): This should be removed once we remove batches.\n\t// It's here so that in the NodeResolver we can have the same resolver,\n\t// BatchChangeResolver, act as a Campaign and a BatchChange.\n\tActAsCampaign() bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#BatchChangesConnectionResolver",
              "documentation": {
                "identifier": "BatchChangesConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.BatchChangesConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchChangesConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchChangesConnectionResolver interface {\n\tNodes(ctx context.Context) ([]BatchChangeResolver, error)\n\tTotalCount(ctx context.Context) (int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetsStatsResolver",
              "documentation": {
                "identifier": "ChangesetsStatsResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetsStatsResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetsStatsResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetsStatsResolver interface {\n\tRetrying() int32\n\tFailed() int32\n\tScheduled() int32\n\tProcessing() int32\n\tUnpublished() int32\n\tDraft() int32\n\tOpen() int32\n\tMerged() int32\n\tClosed() int32\n\tDeleted() int32\n\tArchived() int32\n\tTotal() int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetsConnectionResolver",
              "documentation": {
                "identifier": "ChangesetsConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetsConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetsConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetsConnectionResolver interface {\n\tNodes(ctx context.Context) ([]ChangesetResolver, error)\n\tTotalCount(ctx context.Context) (int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetLabelResolver",
              "documentation": {
                "identifier": "ChangesetLabelResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetLabelResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetLabelResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetLabelResolver interface {\n\tText() string\n\tColor() string\n\tDescription() *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetResolver",
              "documentation": {
                "identifier": "ChangesetResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetResolver interface {\n\tID() graphql.ID\n\n\tCreatedAt() DateTime\n\tUpdatedAt() DateTime\n\tNextSyncAt(ctx context.Context) (*DateTime, error)\n\t// PublicationState returns a value of type btypes.ChangesetPublicationState.\n\tPublicationState() string\n\t// ReconcilerState returns a value of type btypes.ReconcilerState.\n\tReconcilerState() string\n\t// ExternalState returns a value of type *btypes.ChangesetExternalState.\n\tExternalState() *string\n\t// State returns a value of type *btypes.ChangesetState.\n\tState() (string, error)\n\tBatchChanges(ctx context.Context, args *ListBatchChangesArgs) (BatchChangesConnectionResolver, error)\n\n\tToExternalChangeset() (ExternalChangesetResolver, bool)\n\tToHiddenExternalChangeset() (HiddenExternalChangesetResolver, bool)\n\n\t// TODO(campaigns-deprecation):\n\tCampaigns(ctx context.Context, args *ListBatchChangesArgs) (BatchChangesConnectionResolver, error)\n}\n```\n\nChangesetResolver is the \"interface Changeset\" in the GraphQL schema and is implemented by ExternalChangesetResolver and HiddenExternalChangesetResolver. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#HiddenExternalChangesetResolver",
              "documentation": {
                "identifier": "HiddenExternalChangesetResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.HiddenExternalChangesetResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type HiddenExternalChangesetResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype HiddenExternalChangesetResolver interface {\n\tChangesetResolver\n}\n```\n\nHiddenExternalChangesetResolver implements only the common interface, ChangesetResolver, to not reveal information to unauthorized users. \n\nTheoretically this type is not necessary, but it's easier to understand the implementation of the GraphQL schema if we have a mapping between GraphQL types and Go types. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ExternalChangesetResolver",
              "documentation": {
                "identifier": "ExternalChangesetResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.ExternalChangesetResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExternalChangesetResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExternalChangesetResolver interface {\n\tChangesetResolver\n\n\tExternalID() *string\n\tTitle(context.Context) (*string, error)\n\tBody(context.Context) (*string, error)\n\tAuthor() (*PersonResolver, error)\n\tExternalURL() (*externallink.Resolver, error)\n\t// ReviewState returns a value of type *btypes.ChangesetReviewState.\n\tReviewState(context.Context) *string\n\t// CheckState returns a value of type *btypes.ChangesetCheckState.\n\tCheckState() *string\n\tRepository(ctx context.Context) *RepositoryResolver\n\n\tEvents(ctx context.Context, args *ChangesetEventsConnectionArgs) (ChangesetEventsConnectionResolver, error)\n\tDiff(ctx context.Context) (RepositoryComparisonInterface, error)\n\tDiffStat(ctx context.Context) (*DiffStat, error)\n\tLabels(ctx context.Context) ([]ChangesetLabelResolver, error)\n\n\tError() *string\n\tSyncerError() *string\n\tScheduleEstimateAt(ctx context.Context) (*DateTime, error)\n\n\tCurrentSpec(ctx context.Context) (VisibleChangesetSpecResolver, error)\n}\n```\n\nExternalChangesetResolver implements the ChangesetResolver interface and additional data. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetEventsConnectionResolver",
              "documentation": {
                "identifier": "ChangesetEventsConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetEventsConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetEventsConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetEventsConnectionResolver interface {\n\tNodes(ctx context.Context) ([]ChangesetEventResolver, error)\n\tTotalCount(ctx context.Context) (int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetEventResolver",
              "documentation": {
                "identifier": "ChangesetEventResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetEventResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetEventResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetEventResolver interface {\n\tID() graphql.ID\n\tChangeset() ExternalChangesetResolver\n\tCreatedAt() DateTime\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ChangesetCountsResolver",
              "documentation": {
                "identifier": "ChangesetCountsResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.ChangesetCountsResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetCountsResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetCountsResolver interface {\n\tDate() DateTime\n\tTotal() int32\n\tMerged() int32\n\tClosed() int32\n\tDraft() int32\n\tOpen() int32\n\tOpenApproved() int32\n\tOpenChangesRequested() int32\n\tOpenPending() int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#BigInt",
              "documentation": {
                "identifier": "BigInt",
                "newPage": false,
                "searchKey": "graphqlbackend.BigInt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BigInt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BigInt struct{ Int int64 }\n```\n\nBigInt implements the BigInt GraphQL scalar type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#BigIntOrNil",
                    "documentation": {
                      "identifier": "BigIntOrNil",
                      "newPage": false,
                      "searchKey": "graphqlbackend.BigIntOrNil",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func BigIntOrNil(int *int64) *BigInt"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc BigIntOrNil(int *int64) *BigInt\n```\n\nBigIntOrNil is a helper function that returns nil for int == nil and otherwise wraps int in BigInt. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#BigInt.ImplementsGraphQLType",
                    "documentation": {
                      "identifier": "BigInt.ImplementsGraphQLType",
                      "newPage": false,
                      "searchKey": "graphqlbackend.BigInt.ImplementsGraphQLType",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (BigInt) ImplementsGraphQLType(name string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (BigInt) ImplementsGraphQLType(name string) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#BigInt.MarshalJSON",
                    "documentation": {
                      "identifier": "BigInt.MarshalJSON",
                      "newPage": false,
                      "searchKey": "graphqlbackend.BigInt.MarshalJSON",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v BigInt) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v BigInt) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#BigInt.UnmarshalGraphQL",
                    "documentation": {
                      "identifier": "BigInt.UnmarshalGraphQL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.BigInt.UnmarshalGraphQL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *BigInt) UnmarshalGraphQL(input interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *BigInt) UnmarshalGraphQL(input interface{}) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#clientConfigurationResolver",
              "documentation": {
                "identifier": "clientConfigurationResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.clientConfigurationResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type clientConfigurationResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype clientConfigurationResolver struct {\n\tcontentScriptUrls []string\n\tparentSourcegraph *parentSourcegraphResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#clientConfigurationResolver.ContentScriptURLs",
                    "documentation": {
                      "identifier": "clientConfigurationResolver.ContentScriptURLs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.clientConfigurationResolver.ContentScriptURLs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *clientConfigurationResolver) ContentScriptURLs() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *clientConfigurationResolver) ContentScriptURLs() []string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#clientConfigurationResolver.ParentSourcegraph",
                    "documentation": {
                      "identifier": "clientConfigurationResolver.ParentSourcegraph",
                      "newPage": false,
                      "searchKey": "graphqlbackend.clientConfigurationResolver.ParentSourcegraph",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *clientConfigurationResolver) ParentSourcegraph() *parentSourcegraphResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *clientConfigurationResolver) ParentSourcegraph() *parentSourcegraphResolver\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#parentSourcegraphResolver",
              "documentation": {
                "identifier": "parentSourcegraphResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.parentSourcegraphResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type parentSourcegraphResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype parentSourcegraphResolver struct {\n\turl string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#parentSourcegraphResolver.URL",
                    "documentation": {
                      "identifier": "parentSourcegraphResolver.URL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.parentSourcegraphResolver.URL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *parentSourcegraphResolver) URL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *parentSourcegraphResolver) URL() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CodeMonitorsResolver",
              "documentation": {
                "identifier": "CodeMonitorsResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.CodeMonitorsResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CodeMonitorsResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CodeMonitorsResolver interface {\n\t// Query\n\tMonitors(ctx context.Context, userID int32, args *ListMonitorsArgs) (MonitorConnectionResolver, error)\n\tMonitorByID(ctx context.Context, id graphql.ID) (MonitorResolver, error)\n\n\t// Mutations\n\tCreateCodeMonitor(ctx context.Context, args *CreateCodeMonitorArgs) (MonitorResolver, error)\n\tToggleCodeMonitor(ctx context.Context, args *ToggleCodeMonitorArgs) (MonitorResolver, error)\n\tDeleteCodeMonitor(ctx context.Context, args *DeleteCodeMonitorArgs) (*EmptyResponse, error)\n\tUpdateCodeMonitor(ctx context.Context, args *UpdateCodeMonitorArgs) (MonitorResolver, error)\n\tResetTriggerQueryTimestamps(ctx context.Context, args *ResetTriggerQueryTimestampsArgs) (*EmptyResponse, error)\n\tTriggerTestEmailAction(ctx context.Context, args *TriggerTestEmailActionArgs) (*EmptyResponse, error)\n\n\tNodeResolvers() map[string]NodeByIDFunc\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MonitorConnectionResolver",
              "documentation": {
                "identifier": "MonitorConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.MonitorConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MonitorConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MonitorConnectionResolver interface {\n\tNodes(ctx context.Context) ([]MonitorResolver, error)\n\tTotalCount(ctx context.Context) (int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MonitorResolver",
              "documentation": {
                "identifier": "MonitorResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.MonitorResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MonitorResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MonitorResolver interface {\n\tID() graphql.ID\n\tCreatedBy(ctx context.Context) (*UserResolver, error)\n\tCreatedAt() DateTime\n\tDescription() string\n\tOwner(ctx context.Context) (NamespaceResolver, error)\n\tEnabled() bool\n\tTrigger(ctx context.Context) (MonitorTrigger, error)\n\tActions(ctx context.Context, args *ListActionArgs) (MonitorActionConnectionResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MonitorTrigger",
              "documentation": {
                "identifier": "MonitorTrigger",
                "newPage": false,
                "searchKey": "graphqlbackend.MonitorTrigger",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MonitorTrigger interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MonitorTrigger interface {\n\tToMonitorQuery() (MonitorQueryResolver, bool)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MonitorQueryResolver",
              "documentation": {
                "identifier": "MonitorQueryResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.MonitorQueryResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MonitorQueryResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MonitorQueryResolver interface {\n\tID() graphql.ID\n\tQuery() string\n\tEvents(ctx context.Context, args *ListEventsArgs) (MonitorTriggerEventConnectionResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MonitorTriggerEventConnectionResolver",
              "documentation": {
                "identifier": "MonitorTriggerEventConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.MonitorTriggerEventConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MonitorTriggerEventConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MonitorTriggerEventConnectionResolver interface {\n\tNodes(ctx context.Context) ([]MonitorTriggerEventResolver, error)\n\tTotalCount(ctx context.Context) (int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MonitorTriggerEventResolver",
              "documentation": {
                "identifier": "MonitorTriggerEventResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.MonitorTriggerEventResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MonitorTriggerEventResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MonitorTriggerEventResolver interface {\n\tID() graphql.ID\n\tStatus() (string, error)\n\tMessage() *string\n\tTimestamp() (DateTime, error)\n\tActions(ctx context.Context, args *ListActionArgs) (MonitorActionConnectionResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MonitorActionConnectionResolver",
              "documentation": {
                "identifier": "MonitorActionConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.MonitorActionConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MonitorActionConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MonitorActionConnectionResolver interface {\n\tNodes(ctx context.Context) ([]MonitorAction, error)\n\tTotalCount(ctx context.Context) (int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MonitorAction",
              "documentation": {
                "identifier": "MonitorAction",
                "newPage": false,
                "searchKey": "graphqlbackend.MonitorAction",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MonitorAction interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MonitorAction interface {\n\tToMonitorEmail() (MonitorEmailResolver, bool)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MonitorEmailResolver",
              "documentation": {
                "identifier": "MonitorEmailResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.MonitorEmailResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MonitorEmailResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MonitorEmailResolver interface {\n\tID() graphql.ID\n\tEnabled() bool\n\tPriority() string\n\tHeader() string\n\tRecipients(ctx context.Context, args *ListRecipientsArgs) (MonitorActionEmailRecipientsConnectionResolver, error)\n\tEvents(ctx context.Context, args *ListEventsArgs) (MonitorActionEventConnectionResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MonitorEmailRecipient",
              "documentation": {
                "identifier": "MonitorEmailRecipient",
                "newPage": false,
                "searchKey": "graphqlbackend.MonitorEmailRecipient",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MonitorEmailRecipient interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MonitorEmailRecipient interface {\n\tToUser() (*UserResolver, bool)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MonitorActionEmailRecipientsConnectionResolver",
              "documentation": {
                "identifier": "MonitorActionEmailRecipientsConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.MonitorActionEmailRecipientsConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MonitorActionEmailRecipientsConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MonitorActionEmailRecipientsConnectionResolver interface {\n\tNodes(ctx context.Context) ([]NamespaceResolver, error)\n\tTotalCount(ctx context.Context) (int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MonitorActionEventConnectionResolver",
              "documentation": {
                "identifier": "MonitorActionEventConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.MonitorActionEventConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MonitorActionEventConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MonitorActionEventConnectionResolver interface {\n\tNodes(ctx context.Context) ([]MonitorActionEventResolver, error)\n\tTotalCount(ctx context.Context) (int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MonitorActionEventResolver",
              "documentation": {
                "identifier": "MonitorActionEventResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.MonitorActionEventResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MonitorActionEventResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MonitorActionEventResolver interface {\n\tID() graphql.ID\n\tStatus() (string, error)\n\tMessage() *string\n\tTimestamp() DateTime\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ListEventsArgs",
              "documentation": {
                "identifier": "ListEventsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ListEventsArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListEventsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListEventsArgs struct {\n\tFirst int32\n\tAfter *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ListMonitorsArgs",
              "documentation": {
                "identifier": "ListMonitorsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ListMonitorsArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListMonitorsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListMonitorsArgs struct {\n\tFirst int32\n\tAfter *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ListActionArgs",
              "documentation": {
                "identifier": "ListActionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ListActionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListActionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListActionArgs struct {\n\tFirst int32\n\tAfter *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ListRecipientsArgs",
              "documentation": {
                "identifier": "ListRecipientsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ListRecipientsArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListRecipientsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListRecipientsArgs struct {\n\tFirst int32\n\tAfter *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CreateCodeMonitorArgs",
              "documentation": {
                "identifier": "CreateCodeMonitorArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.CreateCodeMonitorArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CreateCodeMonitorArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CreateCodeMonitorArgs struct {\n\tMonitor *CreateMonitorArgs\n\tTrigger *CreateTriggerArgs\n\tActions []*CreateActionArgs\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CreateTriggerArgs",
              "documentation": {
                "identifier": "CreateTriggerArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.CreateTriggerArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CreateTriggerArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CreateTriggerArgs struct {\n\tQuery string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CreateActionArgs",
              "documentation": {
                "identifier": "CreateActionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.CreateActionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CreateActionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CreateActionArgs struct {\n\tEmail *CreateActionEmailArgs\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CreateActionEmailArgs",
              "documentation": {
                "identifier": "CreateActionEmailArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.CreateActionEmailArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CreateActionEmailArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CreateActionEmailArgs struct {\n\tEnabled    bool\n\tPriority   string\n\tRecipients []graphql.ID\n\tHeader     string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ToggleCodeMonitorArgs",
              "documentation": {
                "identifier": "ToggleCodeMonitorArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ToggleCodeMonitorArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ToggleCodeMonitorArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ToggleCodeMonitorArgs struct {\n\tId      graphql.ID\n\tEnabled bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#DeleteCodeMonitorArgs",
              "documentation": {
                "identifier": "DeleteCodeMonitorArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.DeleteCodeMonitorArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DeleteCodeMonitorArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DeleteCodeMonitorArgs struct {\n\tId graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ResetTriggerQueryTimestampsArgs",
              "documentation": {
                "identifier": "ResetTriggerQueryTimestampsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ResetTriggerQueryTimestampsArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResetTriggerQueryTimestampsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResetTriggerQueryTimestampsArgs struct {\n\tId graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TriggerTestEmailActionArgs",
              "documentation": {
                "identifier": "TriggerTestEmailActionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.TriggerTestEmailActionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TriggerTestEmailActionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TriggerTestEmailActionArgs struct {\n\tNamespace   graphql.ID\n\tDescription string\n\tEmail       *CreateActionEmailArgs\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CreateMonitorArgs",
              "documentation": {
                "identifier": "CreateMonitorArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.CreateMonitorArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CreateMonitorArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CreateMonitorArgs struct {\n\tNamespace   graphql.ID\n\tDescription string\n\tEnabled     bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#EditActionEmailArgs",
              "documentation": {
                "identifier": "EditActionEmailArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.EditActionEmailArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EditActionEmailArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EditActionEmailArgs struct {\n\tId     *graphql.ID\n\tUpdate *CreateActionEmailArgs\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#EditActionArgs",
              "documentation": {
                "identifier": "EditActionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.EditActionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EditActionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EditActionArgs struct {\n\tEmail *EditActionEmailArgs\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#EditTriggerArgs",
              "documentation": {
                "identifier": "EditTriggerArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.EditTriggerArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EditTriggerArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EditTriggerArgs struct {\n\tId     graphql.ID\n\tUpdate *CreateTriggerArgs\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#EditMonitorArgs",
              "documentation": {
                "identifier": "EditMonitorArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.EditMonitorArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EditMonitorArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EditMonitorArgs struct {\n\tId     graphql.ID\n\tUpdate *CreateMonitorArgs\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#UpdateCodeMonitorArgs",
              "documentation": {
                "identifier": "UpdateCodeMonitorArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.UpdateCodeMonitorArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UpdateCodeMonitorArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UpdateCodeMonitorArgs struct {\n\tMonitor *EditMonitorArgs\n\tTrigger *EditTriggerArgs\n\tActions []*EditActionArgs\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CodeIntelResolver",
              "documentation": {
                "identifier": "CodeIntelResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.CodeIntelResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CodeIntelResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CodeIntelResolver interface {\n\tLSIFUploadByID(ctx context.Context, id graphql.ID) (LSIFUploadResolver, error)\n\tLSIFUploads(ctx context.Context, args *LSIFUploadsQueryArgs) (LSIFUploadConnectionResolver, error)\n\tLSIFUploadsByRepo(ctx context.Context, args *LSIFRepositoryUploadsQueryArgs) (LSIFUploadConnectionResolver, error)\n\tDeleteLSIFUpload(ctx context.Context, args *struct{ ID graphql.ID }) (*EmptyResponse, error)\n\tLSIFIndexByID(ctx context.Context, id graphql.ID) (LSIFIndexResolver, error)\n\tLSIFIndexes(ctx context.Context, args *LSIFIndexesQueryArgs) (LSIFIndexConnectionResolver, error)\n\tLSIFIndexesByRepo(ctx context.Context, args *LSIFRepositoryIndexesQueryArgs) (LSIFIndexConnectionResolver, error)\n\tDeleteLSIFIndex(ctx context.Context, args *struct{ ID graphql.ID }) (*EmptyResponse, error)\n\tIndexConfiguration(ctx context.Context, id graphql.ID) (IndexConfigurationResolver, error) // TODO - rename ...ForRepo\n\tUpdateRepositoryIndexConfiguration(ctx context.Context, args *UpdateRepositoryIndexConfigurationArgs) (*EmptyResponse, error)\n\tCommitGraph(ctx context.Context, id graphql.ID) (CodeIntelligenceCommitGraphResolver, error)\n\tQueueAutoIndexJobForRepo(ctx context.Context, args *struct{ Repository graphql.ID }) (*EmptyResponse, error)\n\tGitBlobLSIFData(ctx context.Context, args *GitBlobLSIFDataArgs) (GitBlobLSIFDataResolver, error)\n\n\tNodeResolvers() map[string]NodeByIDFunc\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LSIFUploadsQueryArgs",
              "documentation": {
                "identifier": "LSIFUploadsQueryArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.LSIFUploadsQueryArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFUploadsQueryArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFUploadsQueryArgs struct {\n\tgraphqlutil.ConnectionArgs\n\tQuery           *string\n\tState           *string\n\tIsLatestForRepo *bool\n\tAfter           *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LSIFRepositoryUploadsQueryArgs",
              "documentation": {
                "identifier": "LSIFRepositoryUploadsQueryArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.LSIFRepositoryUploadsQueryArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFRepositoryUploadsQueryArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFRepositoryUploadsQueryArgs struct {\n\t*LSIFUploadsQueryArgs\n\tRepositoryID graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LSIFUploadResolver",
              "documentation": {
                "identifier": "LSIFUploadResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.LSIFUploadResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFUploadResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFUploadResolver interface {\n\tID() graphql.ID\n\tInputCommit() string\n\tInputRoot() string\n\tIsLatestForRepo() bool\n\tUploadedAt() DateTime\n\tState() string\n\tFailure() *string\n\tStartedAt() *DateTime\n\tFinishedAt() *DateTime\n\tInputIndexer() string\n\tPlaceInQueue() *int32\n\tAssociatedIndex(ctx context.Context) (LSIFIndexResolver, error)\n\tProjectRoot(ctx context.Context) (*GitTreeEntryResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LSIFUploadConnectionResolver",
              "documentation": {
                "identifier": "LSIFUploadConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.LSIFUploadConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFUploadConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFUploadConnectionResolver interface {\n\tNodes(ctx context.Context) ([]LSIFUploadResolver, error)\n\tTotalCount(ctx context.Context) (*int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LSIFIndexesQueryArgs",
              "documentation": {
                "identifier": "LSIFIndexesQueryArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.LSIFIndexesQueryArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFIndexesQueryArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFIndexesQueryArgs struct {\n\tgraphqlutil.ConnectionArgs\n\tQuery *string\n\tState *string\n\tAfter *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LSIFRepositoryIndexesQueryArgs",
              "documentation": {
                "identifier": "LSIFRepositoryIndexesQueryArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.LSIFRepositoryIndexesQueryArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFRepositoryIndexesQueryArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFRepositoryIndexesQueryArgs struct {\n\t*LSIFIndexesQueryArgs\n\tRepositoryID graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LSIFIndexResolver",
              "documentation": {
                "identifier": "LSIFIndexResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.LSIFIndexResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFIndexResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFIndexResolver interface {\n\tID() graphql.ID\n\tInputCommit() string\n\tInputRoot() string\n\tInputIndexer() string\n\tQueuedAt() DateTime\n\tState() string\n\tFailure() *string\n\tStartedAt() *DateTime\n\tFinishedAt() *DateTime\n\tSteps() IndexStepsResolver\n\tPlaceInQueue() *int32\n\tAssociatedUpload(ctx context.Context) (LSIFUploadResolver, error)\n\tProjectRoot(ctx context.Context) (*GitTreeEntryResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#IndexStepsResolver",
              "documentation": {
                "identifier": "IndexStepsResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.IndexStepsResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexStepsResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexStepsResolver interface {\n\tSetup() []ExecutionLogEntryResolver\n\tPreIndex() []PreIndexStepResolver\n\tIndex() IndexStepResolver\n\tUpload() ExecutionLogEntryResolver\n\tTeardown() []ExecutionLogEntryResolver\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#PreIndexStepResolver",
              "documentation": {
                "identifier": "PreIndexStepResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.PreIndexStepResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PreIndexStepResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PreIndexStepResolver interface {\n\tRoot() string\n\tImage() string\n\tCommands() []string\n\tLogEntry() ExecutionLogEntryResolver\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#IndexStepResolver",
              "documentation": {
                "identifier": "IndexStepResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.IndexStepResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexStepResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexStepResolver interface {\n\tIndexerArgs() []string\n\tOutfile() *string\n\tLogEntry() ExecutionLogEntryResolver\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ExecutionLogEntryResolver",
              "documentation": {
                "identifier": "ExecutionLogEntryResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.ExecutionLogEntryResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExecutionLogEntryResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExecutionLogEntryResolver interface {\n\tKey() string\n\tCommand() []string\n\tStartTime() DateTime\n\tExitCode() int32\n\tOut(ctx context.Context) (string, error)\n\tDurationMilliseconds() int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LSIFIndexConnectionResolver",
              "documentation": {
                "identifier": "LSIFIndexConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.LSIFIndexConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFIndexConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFIndexConnectionResolver interface {\n\tNodes(ctx context.Context) ([]LSIFIndexResolver, error)\n\tTotalCount(ctx context.Context) (*int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#IndexConfigurationResolver",
              "documentation": {
                "identifier": "IndexConfigurationResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.IndexConfigurationResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexConfigurationResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexConfigurationResolver interface {\n\tConfiguration() *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#UpdateRepositoryIndexConfigurationArgs",
              "documentation": {
                "identifier": "UpdateRepositoryIndexConfigurationArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.UpdateRepositoryIndexConfigurationArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UpdateRepositoryIndexConfigurationArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UpdateRepositoryIndexConfigurationArgs struct {\n\tRepository    graphql.ID\n\tConfiguration string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#QueueAutoIndexJobArgs",
              "documentation": {
                "identifier": "QueueAutoIndexJobArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.QueueAutoIndexJobArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueueAutoIndexJobArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueueAutoIndexJobArgs struct {\n\tRepository graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#GitTreeLSIFDataResolver",
              "documentation": {
                "identifier": "GitTreeLSIFDataResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.GitTreeLSIFDataResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitTreeLSIFDataResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitTreeLSIFDataResolver interface {\n\tDiagnostics(ctx context.Context, args *LSIFDiagnosticsArgs) (DiagnosticConnectionResolver, error)\n\tDocumentationPage(ctx context.Context, args *LSIFDocumentationPageArgs) (DocumentationPageResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CodeIntelligenceCommitGraphResolver",
              "documentation": {
                "identifier": "CodeIntelligenceCommitGraphResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.CodeIntelligenceCommitGraphResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CodeIntelligenceCommitGraphResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CodeIntelligenceCommitGraphResolver interface {\n\tStale(ctx context.Context) (bool, error)\n\tUpdatedAt(ctx context.Context) (*DateTime, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#GitBlobLSIFDataResolver",
              "documentation": {
                "identifier": "GitBlobLSIFDataResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.GitBlobLSIFDataResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitBlobLSIFDataResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitBlobLSIFDataResolver interface {\n\tGitTreeLSIFDataResolver\n\tToGitTreeLSIFData() (GitTreeLSIFDataResolver, bool)\n\tToGitBlobLSIFData() (GitBlobLSIFDataResolver, bool)\n\n\tRanges(ctx context.Context, args *LSIFRangesArgs) (CodeIntelligenceRangeConnectionResolver, error)\n\tDefinitions(ctx context.Context, args *LSIFQueryPositionArgs) (LocationConnectionResolver, error)\n\tReferences(ctx context.Context, args *LSIFPagedQueryPositionArgs) (LocationConnectionResolver, error)\n\tHover(ctx context.Context, args *LSIFQueryPositionArgs) (HoverResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#GitBlobLSIFDataArgs",
              "documentation": {
                "identifier": "GitBlobLSIFDataArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.GitBlobLSIFDataArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitBlobLSIFDataArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitBlobLSIFDataArgs struct {\n\tRepo      *types.Repo\n\tCommit    api.CommitID\n\tPath      string\n\tExactPath bool\n\tToolName  string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LSIFRangesArgs",
              "documentation": {
                "identifier": "LSIFRangesArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.LSIFRangesArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFRangesArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFRangesArgs struct {\n\tStartLine int32\n\tEndLine   int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LSIFQueryPositionArgs",
              "documentation": {
                "identifier": "LSIFQueryPositionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.LSIFQueryPositionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFQueryPositionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFQueryPositionArgs struct {\n\tLine      int32\n\tCharacter int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LSIFPagedQueryPositionArgs",
              "documentation": {
                "identifier": "LSIFPagedQueryPositionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.LSIFPagedQueryPositionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFPagedQueryPositionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFPagedQueryPositionArgs struct {\n\tLSIFQueryPositionArgs\n\tgraphqlutil.ConnectionArgs\n\tAfter *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LSIFDiagnosticsArgs",
              "documentation": {
                "identifier": "LSIFDiagnosticsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.LSIFDiagnosticsArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFDiagnosticsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFDiagnosticsArgs struct {\n\tgraphqlutil.ConnectionArgs\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CodeIntelligenceRangeConnectionResolver",
              "documentation": {
                "identifier": "CodeIntelligenceRangeConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.CodeIntelligenceRangeConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CodeIntelligenceRangeConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CodeIntelligenceRangeConnectionResolver interface {\n\tNodes(ctx context.Context) ([]CodeIntelligenceRangeResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CodeIntelligenceRangeResolver",
              "documentation": {
                "identifier": "CodeIntelligenceRangeResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.CodeIntelligenceRangeResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CodeIntelligenceRangeResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CodeIntelligenceRangeResolver interface {\n\tRange(ctx context.Context) (RangeResolver, error)\n\tDefinitions(ctx context.Context) (LocationConnectionResolver, error)\n\tReferences(ctx context.Context) (LocationConnectionResolver, error)\n\tHover(ctx context.Context) (HoverResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LocationConnectionResolver",
              "documentation": {
                "identifier": "LocationConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.LocationConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LocationConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LocationConnectionResolver interface {\n\tNodes(ctx context.Context) ([]LocationResolver, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#HoverResolver",
              "documentation": {
                "identifier": "HoverResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.HoverResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type HoverResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype HoverResolver interface {\n\tMarkdown() Markdown\n\tRange() RangeResolver\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#DiagnosticConnectionResolver",
              "documentation": {
                "identifier": "DiagnosticConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.DiagnosticConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DiagnosticConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DiagnosticConnectionResolver interface {\n\tNodes(ctx context.Context) ([]DiagnosticResolver, error)\n\tTotalCount(ctx context.Context) (int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#DiagnosticResolver",
              "documentation": {
                "identifier": "DiagnosticResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.DiagnosticResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DiagnosticResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DiagnosticResolver interface {\n\tSeverity() (*string, error)\n\tCode() (*string, error)\n\tSource() (*string, error)\n\tMessage() (*string, error)\n\tLocation(ctx context.Context) (LocationResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LSIFDocumentationPageArgs",
              "documentation": {
                "identifier": "LSIFDocumentationPageArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.LSIFDocumentationPageArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFDocumentationPageArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFDocumentationPageArgs struct {\n\tPathID string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#DocumentationPageResolver",
              "documentation": {
                "identifier": "DocumentationPageResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.DocumentationPageResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DocumentationPageResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DocumentationPageResolver interface {\n\tTree() JSONValue\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CommitSearchResultResolver",
              "documentation": {
                "identifier": "CommitSearchResultResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.CommitSearchResultResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CommitSearchResultResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CommitSearchResultResolver struct {\n\tresult.CommitMatch\n\n\tdb dbutil.DB\n\n\t// gitCommitResolver should not be used directly since it may be uninitialized.\n\t// Use Commit() instead.\n\tgitCommitResolver *GitCommitResolver\n\tgitCommitOnce     sync.Once\n}\n```\n\nCommitSearchResultResolver is a resolver for the GraphQL type `CommitSearchResult` \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#CommitSearchResultResolver.Commit",
                    "documentation": {
                      "identifier": "CommitSearchResultResolver.Commit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.CommitSearchResultResolver.Commit",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CommitSearchResultResolver) Commit() *GitCommitResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CommitSearchResultResolver) Commit() *GitCommitResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#CommitSearchResultResolver.Refs",
                    "documentation": {
                      "identifier": "CommitSearchResultResolver.Refs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.CommitSearchResultResolver.Refs",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CommitSearchResultResolver) Refs() []*GitRefResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CommitSearchResultResolver) Refs() []*GitRefResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#CommitSearchResultResolver.SourceRefs",
                    "documentation": {
                      "identifier": "CommitSearchResultResolver.SourceRefs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.CommitSearchResultResolver.SourceRefs",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CommitSearchResultResolver) SourceRefs() []*GitRefResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CommitSearchResultResolver) SourceRefs() []*GitRefResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#CommitSearchResultResolver.MessagePreview",
                    "documentation": {
                      "identifier": "CommitSearchResultResolver.MessagePreview",
                      "newPage": false,
                      "searchKey": "graphqlbackend.CommitSearchResultResolver.MessagePreview",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CommitSearchResultResolver) MessagePreview() *highlightedStringResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CommitSearchResultResolver) MessagePreview() *highlightedStringResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#CommitSearchResultResolver.DiffPreview",
                    "documentation": {
                      "identifier": "CommitSearchResultResolver.DiffPreview",
                      "newPage": false,
                      "searchKey": "graphqlbackend.CommitSearchResultResolver.DiffPreview",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CommitSearchResultResolver) DiffPreview() *highlightedStringResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CommitSearchResultResolver) DiffPreview() *highlightedStringResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#CommitSearchResultResolver.Label",
                    "documentation": {
                      "identifier": "CommitSearchResultResolver.Label",
                      "newPage": false,
                      "searchKey": "graphqlbackend.CommitSearchResultResolver.Label",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CommitSearchResultResolver) Label() Markdown"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CommitSearchResultResolver) Label() Markdown\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#CommitSearchResultResolver.URL",
                    "documentation": {
                      "identifier": "CommitSearchResultResolver.URL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.CommitSearchResultResolver.URL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CommitSearchResultResolver) URL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CommitSearchResultResolver) URL() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#CommitSearchResultResolver.Detail",
                    "documentation": {
                      "identifier": "CommitSearchResultResolver.Detail",
                      "newPage": false,
                      "searchKey": "graphqlbackend.CommitSearchResultResolver.Detail",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CommitSearchResultResolver) Detail() Markdown"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CommitSearchResultResolver) Detail() Markdown\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#CommitSearchResultResolver.Matches",
                    "documentation": {
                      "identifier": "CommitSearchResultResolver.Matches",
                      "newPage": false,
                      "searchKey": "graphqlbackend.CommitSearchResultResolver.Matches",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CommitSearchResultResolver) Matches() []*searchResultMatchResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CommitSearchResultResolver) Matches() []*searchResultMatchResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#CommitSearchResultResolver.ToRepository",
                    "documentation": {
                      "identifier": "CommitSearchResultResolver.ToRepository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.CommitSearchResultResolver.ToRepository",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CommitSearchResultResolver) ToRepository() (*RepositoryResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CommitSearchResultResolver) ToRepository() (*RepositoryResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#CommitSearchResultResolver.ToFileMatch",
                    "documentation": {
                      "identifier": "CommitSearchResultResolver.ToFileMatch",
                      "newPage": false,
                      "searchKey": "graphqlbackend.CommitSearchResultResolver.ToFileMatch",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CommitSearchResultResolver) ToFileMatch() (*FileMatchResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CommitSearchResultResolver) ToFileMatch() (*FileMatchResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#CommitSearchResultResolver.ToCommitSearchResult",
                    "documentation": {
                      "identifier": "CommitSearchResultResolver.ToCommitSearchResult",
                      "newPage": false,
                      "searchKey": "graphqlbackend.CommitSearchResultResolver.ToCommitSearchResult",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CommitSearchResultResolver) ToCommitSearchResult() (*CommitSearchResultResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CommitSearchResultResolver) ToCommitSearchResult() (*CommitSearchResultResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#CommitSearchResultResolver.ResultCount",
                    "documentation": {
                      "identifier": "CommitSearchResultResolver.ResultCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.CommitSearchResultResolver.ResultCount",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CommitSearchResultResolver) ResultCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CommitSearchResultResolver) ResultCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#DateTime",
              "documentation": {
                "identifier": "DateTime",
                "newPage": false,
                "searchKey": "graphqlbackend.DateTime",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DateTime struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DateTime struct{ time.Time }\n```\n\nDateTime implements the DateTime GraphQL scalar type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#DateTimeOrNil",
                    "documentation": {
                      "identifier": "DateTimeOrNil",
                      "newPage": false,
                      "searchKey": "graphqlbackend.DateTimeOrNil",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func DateTimeOrNil(time *time.Time) *DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc DateTimeOrNil(time *time.Time) *DateTime\n```\n\nDateTimeOrNil is a helper function that returns nil for time == nil and otherwise wraps time in DateTime. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#DateTime.ImplementsGraphQLType",
                    "documentation": {
                      "identifier": "DateTime.ImplementsGraphQLType",
                      "newPage": false,
                      "searchKey": "graphqlbackend.DateTime.ImplementsGraphQLType",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (DateTime) ImplementsGraphQLType(name string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (DateTime) ImplementsGraphQLType(name string) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#DateTime.MarshalJSON",
                    "documentation": {
                      "identifier": "DateTime.MarshalJSON",
                      "newPage": false,
                      "searchKey": "graphqlbackend.DateTime.MarshalJSON",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v DateTime) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v DateTime) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#DateTime.UnmarshalGraphQL",
                    "documentation": {
                      "identifier": "DateTime.UnmarshalGraphQL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.DateTime.UnmarshalGraphQL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *DateTime) UnmarshalGraphQL(input interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *DateTime) UnmarshalGraphQL(input interface{}) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#defaultSettingsResolver",
              "documentation": {
                "identifier": "defaultSettingsResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.defaultSettingsResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type defaultSettingsResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype defaultSettingsResolver struct {\n\tdb    dbutil.DB\n\tgqlID string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#defaultSettingsResolver.ID",
                    "documentation": {
                      "identifier": "defaultSettingsResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.defaultSettingsResolver.ID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *defaultSettingsResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *defaultSettingsResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#defaultSettingsResolver.LatestSettings",
                    "documentation": {
                      "identifier": "defaultSettingsResolver.LatestSettings",
                      "newPage": false,
                      "searchKey": "graphqlbackend.defaultSettingsResolver.LatestSettings",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *defaultSettingsResolver) LatestSettings(ctx context.Context) (*settingsResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *defaultSettingsResolver) LatestSettings(ctx context.Context) (*settingsResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#defaultSettingsResolver.SettingsURL",
                    "documentation": {
                      "identifier": "defaultSettingsResolver.SettingsURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.defaultSettingsResolver.SettingsURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *defaultSettingsResolver) SettingsURL() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *defaultSettingsResolver) SettingsURL() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#defaultSettingsResolver.ViewerCanAdminister",
                    "documentation": {
                      "identifier": "defaultSettingsResolver.ViewerCanAdminister",
                      "newPage": false,
                      "searchKey": "graphqlbackend.defaultSettingsResolver.ViewerCanAdminister",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *defaultSettingsResolver) ViewerCanAdminister(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *defaultSettingsResolver) ViewerCanAdminister(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#defaultSettingsResolver.SettingsCascade",
                    "documentation": {
                      "identifier": "defaultSettingsResolver.SettingsCascade",
                      "newPage": false,
                      "searchKey": "graphqlbackend.defaultSettingsResolver.SettingsCascade",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *defaultSettingsResolver) SettingsCascade() *settingsCascade"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *defaultSettingsResolver) SettingsCascade() *settingsCascade\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#defaultSettingsResolver.ConfigurationCascade",
                    "documentation": {
                      "identifier": "defaultSettingsResolver.ConfigurationCascade",
                      "newPage": false,
                      "searchKey": "graphqlbackend.defaultSettingsResolver.ConfigurationCascade",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *defaultSettingsResolver) ConfigurationCascade() *settingsCascade"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *defaultSettingsResolver) ConfigurationCascade() *settingsCascade\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#DotcomRootResolver",
              "documentation": {
                "identifier": "DotcomRootResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.DotcomRootResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DotcomRootResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DotcomRootResolver interface {\n\tDotcomResolver\n\tDotcom() DotcomResolver\n\tNodeResolvers() map[string]NodeByIDFunc\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#DotcomResolver",
              "documentation": {
                "identifier": "DotcomResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.DotcomResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DotcomResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DotcomResolver interface {\n\t// DotcomMutation\n\tSetUserBilling(context.Context, *SetUserBillingArgs) (*EmptyResponse, error)\n\tCreateProductSubscription(context.Context, *CreateProductSubscriptionArgs) (ProductSubscription, error)\n\tSetProductSubscriptionBilling(context.Context, *SetProductSubscriptionBillingArgs) (*EmptyResponse, error)\n\tGenerateProductLicenseForSubscription(context.Context, *GenerateProductLicenseForSubscriptionArgs) (ProductLicense, error)\n\tCreatePaidProductSubscription(context.Context, *CreatePaidProductSubscriptionArgs) (*CreatePaidProductSubscriptionResult, error)\n\tUpdatePaidProductSubscription(context.Context, *UpdatePaidProductSubscriptionArgs) (*UpdatePaidProductSubscriptionResult, error)\n\tArchiveProductSubscription(context.Context, *ArchiveProductSubscriptionArgs) (*EmptyResponse, error)\n\n\t// DotcomQuery\n\tProductSubscription(context.Context, *ProductSubscriptionArgs) (ProductSubscription, error)\n\tProductSubscriptions(context.Context, *ProductSubscriptionsArgs) (ProductSubscriptionConnection, error)\n\tPreviewProductSubscriptionInvoice(context.Context, *PreviewProductSubscriptionInvoiceArgs) (ProductSubscriptionPreviewInvoice, error)\n\tProductLicenses(context.Context, *ProductLicensesArgs) (ProductLicenseConnection, error)\n\tProductPlans(context.Context) ([]ProductPlan, error)\n\tProductLicenseByID(ctx context.Context, id graphql.ID) (ProductLicense, error)\n\tProductSubscriptionByID(ctx context.Context, id graphql.ID) (ProductSubscription, error)\n\tUserURLForSiteAdminBilling(ctx context.Context, userID int32) (*string, error)\n}\n```\n\nDotcomResolver is the interface for the GraphQL types DotcomMutation and DotcomQuery. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ProductSubscription",
              "documentation": {
                "identifier": "ProductSubscription",
                "newPage": false,
                "searchKey": "graphqlbackend.ProductSubscription",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ProductSubscription interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ProductSubscription interface {\n\tID() graphql.ID\n\tUUID() string\n\tName() string\n\tAccount(context.Context) (*UserResolver, error)\n\tInvoiceItem(context.Context) (ProductSubscriptionInvoiceItem, error)\n\tEvents(context.Context) ([]ProductSubscriptionEvent, error)\n\tActiveLicense(context.Context) (ProductLicense, error)\n\tProductLicenses(context.Context, *graphqlutil.ConnectionArgs) (ProductLicenseConnection, error)\n\tCreatedAt() DateTime\n\tIsArchived() bool\n\tURL(context.Context) (string, error)\n\tURLForSiteAdmin(context.Context) *string\n\tURLForSiteAdminBilling(context.Context) (*string, error)\n}\n```\n\nProductSubscription is the interface for the GraphQL type ProductSubscription. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ProductSubscriptionInvoiceItem",
              "documentation": {
                "identifier": "ProductSubscriptionInvoiceItem",
                "newPage": false,
                "searchKey": "graphqlbackend.ProductSubscriptionInvoiceItem",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ProductSubscriptionInvoiceItem interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ProductSubscriptionInvoiceItem interface {\n\tPlan() (ProductPlan, error)\n\tUserCount() int32\n\tExpiresAt() DateTime\n}\n```\n\nProductSubscriptionInvoiceItem is the interface for the GraphQL type ProductSubscriptionInvoiceItem. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#SetUserBillingArgs",
              "documentation": {
                "identifier": "SetUserBillingArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.SetUserBillingArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SetUserBillingArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SetUserBillingArgs struct {\n\tUser              graphql.ID\n\tBillingCustomerID *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CreateProductSubscriptionArgs",
              "documentation": {
                "identifier": "CreateProductSubscriptionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.CreateProductSubscriptionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CreateProductSubscriptionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CreateProductSubscriptionArgs struct {\n\tAccountID graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#SetProductSubscriptionBillingArgs",
              "documentation": {
                "identifier": "SetProductSubscriptionBillingArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.SetProductSubscriptionBillingArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SetProductSubscriptionBillingArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SetProductSubscriptionBillingArgs struct {\n\tID                    graphql.ID\n\tBillingSubscriptionID *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#GenerateProductLicenseForSubscriptionArgs",
              "documentation": {
                "identifier": "GenerateProductLicenseForSubscriptionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.GenerateProductLicenseForSubscriptionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GenerateProductLicenseForSubscriptionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GenerateProductLicenseForSubscriptionArgs struct {\n\tProductSubscriptionID graphql.ID\n\tLicense               *ProductLicenseInput\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CreatePaidProductSubscriptionArgs",
              "documentation": {
                "identifier": "CreatePaidProductSubscriptionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.CreatePaidProductSubscriptionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CreatePaidProductSubscriptionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CreatePaidProductSubscriptionArgs struct {\n\tAccountID           graphql.ID\n\tProductSubscription ProductSubscriptionInput\n\tPaymentToken        *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#UpdatePaidProductSubscriptionArgs",
              "documentation": {
                "identifier": "UpdatePaidProductSubscriptionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.UpdatePaidProductSubscriptionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UpdatePaidProductSubscriptionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UpdatePaidProductSubscriptionArgs struct {\n\tSubscriptionID graphql.ID\n\tUpdate         ProductSubscriptionInput\n\tPaymentToken   *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ProductSubscriptionInput",
              "documentation": {
                "identifier": "ProductSubscriptionInput",
                "newPage": false,
                "searchKey": "graphqlbackend.ProductSubscriptionInput",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ProductSubscriptionInput struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ProductSubscriptionInput struct {\n\tBillingPlanID string\n\tUserCount     int32\n}\n```\n\nProductSubscriptionInput implements the GraphQL type ProductSubscriptionInput. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CreatePaidProductSubscriptionResult",
              "documentation": {
                "identifier": "CreatePaidProductSubscriptionResult",
                "newPage": false,
                "searchKey": "graphqlbackend.CreatePaidProductSubscriptionResult",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CreatePaidProductSubscriptionResult struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CreatePaidProductSubscriptionResult struct {\n\tProductSubscriptionValue ProductSubscription\n}\n```\n\nCreatePaidProductSubscriptionResult implements the GraphQL type CreatePaidProductSubscriptionResult. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#CreatePaidProductSubscriptionResult.ProductSubscription",
                    "documentation": {
                      "identifier": "CreatePaidProductSubscriptionResult.ProductSubscription",
                      "newPage": false,
                      "searchKey": "graphqlbackend.CreatePaidProductSubscriptionResult.ProductSubscription",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CreatePaidProductSubscriptionResult) ProductSubscription() ProductSubscription"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CreatePaidProductSubscriptionResult) ProductSubscription() ProductSubscription\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#UpdatePaidProductSubscriptionResult",
              "documentation": {
                "identifier": "UpdatePaidProductSubscriptionResult",
                "newPage": false,
                "searchKey": "graphqlbackend.UpdatePaidProductSubscriptionResult",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UpdatePaidProductSubscriptionResult struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UpdatePaidProductSubscriptionResult struct {\n\tProductSubscriptionValue ProductSubscription\n}\n```\n\nUpdatePaidProductSubscriptionResult implements the GraphQL type UpdatePaidProductSubscriptionResult. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UpdatePaidProductSubscriptionResult.ProductSubscription",
                    "documentation": {
                      "identifier": "UpdatePaidProductSubscriptionResult.ProductSubscription",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UpdatePaidProductSubscriptionResult.ProductSubscription",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UpdatePaidProductSubscriptionResult) ProductSubscription() ProductSubscription"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UpdatePaidProductSubscriptionResult) ProductSubscription() ProductSubscription\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ArchiveProductSubscriptionArgs",
              "documentation": {
                "identifier": "ArchiveProductSubscriptionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ArchiveProductSubscriptionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ArchiveProductSubscriptionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ArchiveProductSubscriptionArgs struct{ ID graphql.ID }\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ProductSubscriptionArgs",
              "documentation": {
                "identifier": "ProductSubscriptionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ProductSubscriptionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ProductSubscriptionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ProductSubscriptionArgs struct {\n\tUUID string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ProductSubscriptionsArgs",
              "documentation": {
                "identifier": "ProductSubscriptionsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ProductSubscriptionsArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ProductSubscriptionsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ProductSubscriptionsArgs struct {\n\tgraphqlutil.ConnectionArgs\n\tAccount *graphql.ID\n\tQuery   *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ProductSubscriptionConnection",
              "documentation": {
                "identifier": "ProductSubscriptionConnection",
                "newPage": false,
                "searchKey": "graphqlbackend.ProductSubscriptionConnection",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ProductSubscriptionConnection interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ProductSubscriptionConnection interface {\n\tNodes(context.Context) ([]ProductSubscription, error)\n\tTotalCount(context.Context) (int32, error)\n\tPageInfo(context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\nProductSubscriptionConnection is the interface for the GraphQL type ProductSubscriptionConnection. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#PreviewProductSubscriptionInvoiceArgs",
              "documentation": {
                "identifier": "PreviewProductSubscriptionInvoiceArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.PreviewProductSubscriptionInvoiceArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PreviewProductSubscriptionInvoiceArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PreviewProductSubscriptionInvoiceArgs struct {\n\tAccount              *graphql.ID\n\tSubscriptionToUpdate *graphql.ID\n\tProductSubscription  ProductSubscriptionInput\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ProductLicense",
              "documentation": {
                "identifier": "ProductLicense",
                "newPage": false,
                "searchKey": "graphqlbackend.ProductLicense",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ProductLicense interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ProductLicense interface {\n\tID() graphql.ID\n\tSubscription(context.Context) (ProductSubscription, error)\n\tInfo() (*ProductLicenseInfo, error)\n\tLicenseKey() string\n\tCreatedAt() DateTime\n}\n```\n\nProductLicense is the interface for the GraphQL type ProductLicense. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ProductLicenseInput",
              "documentation": {
                "identifier": "ProductLicenseInput",
                "newPage": false,
                "searchKey": "graphqlbackend.ProductLicenseInput",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ProductLicenseInput struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ProductLicenseInput struct {\n\tTags      []string\n\tUserCount int32\n\tExpiresAt int32\n}\n```\n\nProductLicenseInput implements the GraphQL type ProductLicenseInput. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ProductLicensesArgs",
              "documentation": {
                "identifier": "ProductLicensesArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ProductLicensesArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ProductLicensesArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ProductLicensesArgs struct {\n\tgraphqlutil.ConnectionArgs\n\tLicenseKeySubstring   *string\n\tProductSubscriptionID *graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ProductLicenseConnection",
              "documentation": {
                "identifier": "ProductLicenseConnection",
                "newPage": false,
                "searchKey": "graphqlbackend.ProductLicenseConnection",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ProductLicenseConnection interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ProductLicenseConnection interface {\n\tNodes(context.Context) ([]ProductLicense, error)\n\tTotalCount(context.Context) (int32, error)\n\tPageInfo(context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\nProductLicenseConnection is the interface for the GraphQL type ProductLicenseConnection. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ProductSubscriptionPreviewInvoice",
              "documentation": {
                "identifier": "ProductSubscriptionPreviewInvoice",
                "newPage": false,
                "searchKey": "graphqlbackend.ProductSubscriptionPreviewInvoice",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ProductSubscriptionPreviewInvoice interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ProductSubscriptionPreviewInvoice interface {\n\tPrice() int32\n\tProrationDate() *string\n\tIsDowngradeRequiringManualIntervention() bool\n\tBeforeInvoiceItem() ProductSubscriptionInvoiceItem\n\tAfterInvoiceItem() ProductSubscriptionInvoiceItem\n}\n```\n\nProductSubscriptionPreviewInvoice is the interface for the GraphQL type ProductSubscriptionPreviewInvoice. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ProductPlan",
              "documentation": {
                "identifier": "ProductPlan",
                "newPage": false,
                "searchKey": "graphqlbackend.ProductPlan",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ProductPlan interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ProductPlan interface {\n\tProductPlanID() string\n\tBillingPlanID() string\n\tName() string\n\tNameWithBrand() string\n\tPricePerUserPerYear() int32\n\tMinQuantity() *int32\n\tMaxQuantity() *int32\n\tTiersMode() string\n\tPlanTiers() []PlanTier\n}\n```\n\nProductPlan is the interface for the GraphQL type ProductPlan. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ProductSubscriptionEvent",
              "documentation": {
                "identifier": "ProductSubscriptionEvent",
                "newPage": false,
                "searchKey": "graphqlbackend.ProductSubscriptionEvent",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ProductSubscriptionEvent interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ProductSubscriptionEvent interface {\n\tID() string\n\tDate() string\n\tTitle() string\n\tDescription() *string\n\tURL() *string\n}\n```\n\nProductSubscriptionEvent is the interface for the GraphQL type ProductSubscriptionEvent. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#PlanTier",
              "documentation": {
                "identifier": "PlanTier",
                "newPage": false,
                "searchKey": "graphqlbackend.PlanTier",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PlanTier interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PlanTier interface {\n\tUnitAmount() int32\n\tUpTo() int32\n\tFlatAmount() int32\n}\n```\n\nPlanTier is the interface for the GraphQL type PlanTier. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#EmptyResponse",
              "documentation": {
                "identifier": "EmptyResponse",
                "newPage": false,
                "searchKey": "graphqlbackend.EmptyResponse",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EmptyResponse struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EmptyResponse struct{}\n```\n\nEmptyResponse is a type that can be used in the return signature for graphql queries that don't require a return value. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#EmptyResponse.AlwaysNil",
                    "documentation": {
                      "identifier": "EmptyResponse.AlwaysNil",
                      "newPage": false,
                      "searchKey": "graphqlbackend.EmptyResponse.AlwaysNil",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (er *EmptyResponse) AlwaysNil() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (er *EmptyResponse) AlwaysNil() *string\n```\n\nAlwaysNil exists since various graphql tools expect at least one field to be present in the schema so we provide a dummy one here that is always nil. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#userEventLogResolver",
              "documentation": {
                "identifier": "userEventLogResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.userEventLogResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type userEventLogResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype userEventLogResolver struct {\n\tdb    dbutil.DB\n\tevent *types.Event\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userEventLogResolver.User",
                    "documentation": {
                      "identifier": "userEventLogResolver.User",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userEventLogResolver.User",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *userEventLogResolver) User(ctx context.Context) (*UserResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *userEventLogResolver) User(ctx context.Context) (*UserResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userEventLogResolver.Name",
                    "documentation": {
                      "identifier": "userEventLogResolver.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userEventLogResolver.Name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *userEventLogResolver) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *userEventLogResolver) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userEventLogResolver.AnonymousUserID",
                    "documentation": {
                      "identifier": "userEventLogResolver.AnonymousUserID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userEventLogResolver.AnonymousUserID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *userEventLogResolver) AnonymousUserID() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *userEventLogResolver) AnonymousUserID() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userEventLogResolver.URL",
                    "documentation": {
                      "identifier": "userEventLogResolver.URL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userEventLogResolver.URL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *userEventLogResolver) URL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *userEventLogResolver) URL() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userEventLogResolver.Source",
                    "documentation": {
                      "identifier": "userEventLogResolver.Source",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userEventLogResolver.Source",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *userEventLogResolver) Source() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *userEventLogResolver) Source() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userEventLogResolver.Argument",
                    "documentation": {
                      "identifier": "userEventLogResolver.Argument",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userEventLogResolver.Argument",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *userEventLogResolver) Argument() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *userEventLogResolver) Argument() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userEventLogResolver.Version",
                    "documentation": {
                      "identifier": "userEventLogResolver.Version",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userEventLogResolver.Version",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *userEventLogResolver) Version() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *userEventLogResolver) Version() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userEventLogResolver.Timestamp",
                    "documentation": {
                      "identifier": "userEventLogResolver.Timestamp",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userEventLogResolver.Timestamp",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *userEventLogResolver) Timestamp() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *userEventLogResolver) Timestamp() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#userEventLogsConnectionResolver",
              "documentation": {
                "identifier": "userEventLogsConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.userEventLogsConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type userEventLogsConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype userEventLogsConnectionResolver struct {\n\tdb  dbutil.DB\n\topt database.EventLogsListOptions\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userEventLogsConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "userEventLogsConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userEventLogsConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *userEventLogsConnectionResolver) Nodes(ctx context.Context) ([]*userEventLogResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *userEventLogsConnectionResolver) Nodes(ctx context.Context) ([]*userEventLogResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userEventLogsConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "userEventLogsConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userEventLogsConnectionResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *userEventLogsConnectionResolver) TotalCount(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *userEventLogsConnectionResolver) TotalCount(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userEventLogsConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "userEventLogsConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userEventLogsConnectionResolver.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *userEventLogsConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *userEventLogsConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ExtensionRegistryResolver",
              "documentation": {
                "identifier": "ExtensionRegistryResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.ExtensionRegistryResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExtensionRegistryResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExtensionRegistryResolver interface {\n\tExtensions(context.Context, *RegistryExtensionConnectionArgs) (RegistryExtensionConnection, error)\n\tExtension(context.Context, *ExtensionRegistryExtensionArgs) (RegistryExtension, error)\n\tViewerPublishers(context.Context) ([]RegistryPublisher, error)\n\tPublishers(context.Context, *graphqlutil.ConnectionArgs) (RegistryPublisherConnection, error)\n\tCreateExtension(context.Context, *ExtensionRegistryCreateExtensionArgs) (ExtensionRegistryMutationResult, error)\n\tUpdateExtension(context.Context, *ExtensionRegistryUpdateExtensionArgs) (ExtensionRegistryMutationResult, error)\n\tPublishExtension(context.Context, *ExtensionRegistryPublishExtensionArgs) (ExtensionRegistryMutationResult, error)\n\tDeleteExtension(context.Context, *ExtensionRegistryDeleteExtensionArgs) (*EmptyResponse, error)\n\tLocalExtensionIDPrefix() *string\n\tFeaturedExtensions(context.Context) (FeaturedExtensionsConnection, error)\n\n\tImplementsLocalExtensionRegistry() bool // not exposed via GraphQL\n\t// FilterRemoteExtensions enforces `allowRemoteExtensions` by returning a\n\t// new slice with extension IDs that were present in\n\t// `allowRemoteExtensions`. It returns the original extension IDs if\n\t// `allowRemoteExtensions` is not set.\n\tFilterRemoteExtensions([]string) []string // not exposed via GraphQL\n}\n```\n\nExtensionRegistryResolver is the interface for the GraphQL types ExtensionRegistry and ExtensionRegistryMutation. \n\nSome methods are only implemented if there is a local extension registry. For these methods, the implementation (if one exists) is set on the XyzFunc struct field. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RegistryExtensionConnectionArgs",
              "documentation": {
                "identifier": "RegistryExtensionConnectionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.RegistryExtensionConnectionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RegistryExtensionConnectionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RegistryExtensionConnectionArgs struct {\n\tgraphqlutil.ConnectionArgs\n\tQuery                  *string\n\tPublisher              *graphql.ID\n\tLocal                  bool\n\tRemote                 bool\n\tPrioritizeExtensionIDs *[]string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ExtensionRegistryExtensionArgs",
              "documentation": {
                "identifier": "ExtensionRegistryExtensionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ExtensionRegistryExtensionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExtensionRegistryExtensionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExtensionRegistryExtensionArgs struct {\n\tExtensionID string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ExtensionRegistryCreateExtensionArgs",
              "documentation": {
                "identifier": "ExtensionRegistryCreateExtensionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ExtensionRegistryCreateExtensionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExtensionRegistryCreateExtensionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExtensionRegistryCreateExtensionArgs struct {\n\tPublisher graphql.ID\n\tName      string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ExtensionRegistryUpdateExtensionArgs",
              "documentation": {
                "identifier": "ExtensionRegistryUpdateExtensionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ExtensionRegistryUpdateExtensionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExtensionRegistryUpdateExtensionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExtensionRegistryUpdateExtensionArgs struct {\n\tExtension graphql.ID\n\tName      *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ExtensionRegistryPublishExtensionArgs",
              "documentation": {
                "identifier": "ExtensionRegistryPublishExtensionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ExtensionRegistryPublishExtensionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExtensionRegistryPublishExtensionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExtensionRegistryPublishExtensionArgs struct {\n\tExtensionID string\n\tManifest    string\n\tBundle      *string\n\tSourceMap   *string\n\tForce       bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ExtensionRegistryDeleteExtensionArgs",
              "documentation": {
                "identifier": "ExtensionRegistryDeleteExtensionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ExtensionRegistryDeleteExtensionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExtensionRegistryDeleteExtensionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExtensionRegistryDeleteExtensionArgs struct {\n\tExtension graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ExtensionRegistryMutationResult",
              "documentation": {
                "identifier": "ExtensionRegistryMutationResult",
                "newPage": false,
                "searchKey": "graphqlbackend.ExtensionRegistryMutationResult",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExtensionRegistryMutationResult interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExtensionRegistryMutationResult interface {\n\tExtension(context.Context) (RegistryExtension, error)\n}\n```\n\nExtensionRegistryMutationResult is the interface for the GraphQL type ExtensionRegistryMutationResult. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RegistryExtension",
              "documentation": {
                "identifier": "RegistryExtension",
                "newPage": false,
                "searchKey": "graphqlbackend.RegistryExtension",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RegistryExtension interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RegistryExtension interface {\n\tID() graphql.ID\n\tUUID() string\n\tExtensionID() string\n\tExtensionIDWithoutRegistry() string\n\tPublisher(ctx context.Context) (RegistryPublisher, error)\n\tName() string\n\tManifest(ctx context.Context) (ExtensionManifest, error)\n\tCreatedAt() *DateTime\n\tUpdatedAt() *DateTime\n\tPublishedAt(context.Context) (*DateTime, error)\n\tURL() string\n\tRemoteURL() *string\n\tRegistryName() (string, error)\n\tIsLocal() bool\n\tIsWorkInProgress() bool\n\tViewerCanAdminister(ctx context.Context) (bool, error)\n}\n```\n\nRegistryExtension is the interface for the GraphQL type RegistryExtension. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ExtensionManifest",
              "documentation": {
                "identifier": "ExtensionManifest",
                "newPage": false,
                "searchKey": "graphqlbackend.ExtensionManifest",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExtensionManifest interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExtensionManifest interface {\n\tRaw() string\n\tDescription() (*string, error)\n\tBundleURL() (*string, error)\n}\n```\n\nExtensionManifest is the interface for the GraphQL type ExtensionManifest. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RegistryPublisher",
              "documentation": {
                "identifier": "RegistryPublisher",
                "newPage": false,
                "searchKey": "graphqlbackend.RegistryPublisher",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RegistryPublisher interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RegistryPublisher interface {\n\tToUser() (*UserResolver, bool)\n\tToOrg() (*OrgResolver, bool)\n\n\t// Helpers that are not GraphQL fields.\n\tRegistryExtensionConnectionURL() (*string, error)\n}\n```\n\nRegistryPublisher is the interface for the GraphQL type RegistryPublisher. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RegistryExtensionConnection",
              "documentation": {
                "identifier": "RegistryExtensionConnection",
                "newPage": false,
                "searchKey": "graphqlbackend.RegistryExtensionConnection",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RegistryExtensionConnection interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RegistryExtensionConnection interface {\n\tNodes(context.Context) ([]RegistryExtension, error)\n\tTotalCount(context.Context) (int32, error)\n\tPageInfo(context.Context) (*graphqlutil.PageInfo, error)\n\tURL(context.Context) (*string, error)\n\tError(context.Context) *string\n}\n```\n\nRegistryExtensionConnection is the interface for the GraphQL type RegistryExtensionConnection. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RegistryPublisherConnection",
              "documentation": {
                "identifier": "RegistryPublisherConnection",
                "newPage": false,
                "searchKey": "graphqlbackend.RegistryPublisherConnection",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RegistryPublisherConnection interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RegistryPublisherConnection interface {\n\tNodes(context.Context) ([]RegistryPublisher, error)\n\tTotalCount(context.Context) (int32, error)\n\tPageInfo(context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\nRegistryPublisherConnection is the interface for the GraphQL type RegistryPublisherConnection. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#FeaturedExtensionsConnection",
              "documentation": {
                "identifier": "FeaturedExtensionsConnection",
                "newPage": false,
                "searchKey": "graphqlbackend.FeaturedExtensionsConnection",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FeaturedExtensionsConnection interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FeaturedExtensionsConnection interface {\n\tNodes(context.Context) ([]RegistryExtension, error)\n\tError(context.Context) *string\n}\n```\n\nFeaturedExtensions is the interface for the GraphQL type FeaturedExtensionsConnection. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#externalAccountResolver",
              "documentation": {
                "identifier": "externalAccountResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.externalAccountResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type externalAccountResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype externalAccountResolver struct {\n\tdb      dbutil.DB\n\taccount extsvc.Account\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalAccountByID",
                    "documentation": {
                      "identifier": "externalAccountByID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalAccountByID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func externalAccountByID(ctx context.Context, db dbutil.DB, id graphql.ID) (*externalAccountResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc externalAccountByID(ctx context.Context, db dbutil.DB, id graphql.ID) (*externalAccountResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalAccountResolver.ID",
                    "documentation": {
                      "identifier": "externalAccountResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalAccountResolver.ID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalAccountResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalAccountResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalAccountResolver.User",
                    "documentation": {
                      "identifier": "externalAccountResolver.User",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalAccountResolver.User",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalAccountResolver) User(ctx context.Context) (*UserResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalAccountResolver) User(ctx context.Context) (*UserResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalAccountResolver.ServiceType",
                    "documentation": {
                      "identifier": "externalAccountResolver.ServiceType",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalAccountResolver.ServiceType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalAccountResolver) ServiceType() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalAccountResolver) ServiceType() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalAccountResolver.ServiceID",
                    "documentation": {
                      "identifier": "externalAccountResolver.ServiceID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalAccountResolver.ServiceID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalAccountResolver) ServiceID() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalAccountResolver) ServiceID() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalAccountResolver.ClientID",
                    "documentation": {
                      "identifier": "externalAccountResolver.ClientID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalAccountResolver.ClientID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalAccountResolver) ClientID() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalAccountResolver) ClientID() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalAccountResolver.AccountID",
                    "documentation": {
                      "identifier": "externalAccountResolver.AccountID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalAccountResolver.AccountID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalAccountResolver) AccountID() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalAccountResolver) AccountID() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalAccountResolver.CreatedAt",
                    "documentation": {
                      "identifier": "externalAccountResolver.CreatedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalAccountResolver.CreatedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalAccountResolver) CreatedAt() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalAccountResolver) CreatedAt() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalAccountResolver.UpdatedAt",
                    "documentation": {
                      "identifier": "externalAccountResolver.UpdatedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalAccountResolver.UpdatedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalAccountResolver) UpdatedAt() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalAccountResolver) UpdatedAt() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalAccountResolver.RefreshURL",
                    "documentation": {
                      "identifier": "externalAccountResolver.RefreshURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalAccountResolver.RefreshURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalAccountResolver) RefreshURL() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalAccountResolver) RefreshURL() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalAccountResolver.AccountData",
                    "documentation": {
                      "identifier": "externalAccountResolver.AccountData",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalAccountResolver.AccountData",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalAccountResolver) AccountData(ctx context.Context) (*JSONValue, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalAccountResolver) AccountData(ctx context.Context) (*JSONValue, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#externalAccountConnectionResolver",
              "documentation": {
                "identifier": "externalAccountConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.externalAccountConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type externalAccountConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype externalAccountConnectionResolver struct {\n\tdb  dbutil.DB\n\topt database.ExternalAccountsListOptions\n\n\t// cache results because they are used by multiple fields\n\tonce             sync.Once\n\texternalAccounts []*extsvc.Account\n\terr              error\n}\n```\n\nexternalAccountConnectionResolver resolves a list of external accounts. \n\n🚨 SECURITY: When instantiating an externalAccountConnectionResolver value, the caller MUST check permissions. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalAccountConnectionResolver.compute",
                    "documentation": {
                      "identifier": "externalAccountConnectionResolver.compute",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalAccountConnectionResolver.compute",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalAccountConnectionResolver) compute(ctx context.Context) ([]*extsvc.Account, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalAccountConnectionResolver) compute(ctx context.Context) ([]*extsvc.Account, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalAccountConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "externalAccountConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalAccountConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalAccountConnectionResolver) Nodes(ctx context.Context) ([]*externalAccountResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalAccountConnectionResolver) Nodes(ctx context.Context) ([]*externalAccountResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalAccountConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "externalAccountConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalAccountConnectionResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalAccountConnectionResolver) TotalCount(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalAccountConnectionResolver) TotalCount(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalAccountConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "externalAccountConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalAccountConnectionResolver.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalAccountConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalAccountConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#externalServiceResolver",
              "documentation": {
                "identifier": "externalServiceResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.externalServiceResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type externalServiceResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype externalServiceResolver struct {\n\tdb              dbutil.DB\n\texternalService *types.ExternalService\n\twarning         string\n\n\twebhookURLOnce sync.Once\n\twebhookURL     string\n\twebhookErr     error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceByID",
                    "documentation": {
                      "identifier": "externalServiceByID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceByID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func externalServiceByID(ctx context.Context, db dbutil.DB, gqlID graphql.ID) (*externalServiceResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc externalServiceByID(ctx context.Context, db dbutil.DB, gqlID graphql.ID) (*externalServiceResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceResolver.ID",
                    "documentation": {
                      "identifier": "externalServiceResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceResolver.ID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalServiceResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalServiceResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceResolver.Kind",
                    "documentation": {
                      "identifier": "externalServiceResolver.Kind",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceResolver.Kind",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalServiceResolver) Kind() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalServiceResolver) Kind() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceResolver.DisplayName",
                    "documentation": {
                      "identifier": "externalServiceResolver.DisplayName",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceResolver.DisplayName",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalServiceResolver) DisplayName() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalServiceResolver) DisplayName() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceResolver.Config",
                    "documentation": {
                      "identifier": "externalServiceResolver.Config",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceResolver.Config",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalServiceResolver) Config() (JSONCString, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalServiceResolver) Config() (JSONCString, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceResolver.CreatedAt",
                    "documentation": {
                      "identifier": "externalServiceResolver.CreatedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceResolver.CreatedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalServiceResolver) CreatedAt() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalServiceResolver) CreatedAt() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceResolver.UpdatedAt",
                    "documentation": {
                      "identifier": "externalServiceResolver.UpdatedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceResolver.UpdatedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalServiceResolver) UpdatedAt() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalServiceResolver) UpdatedAt() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceResolver.Namespace",
                    "documentation": {
                      "identifier": "externalServiceResolver.Namespace",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceResolver.Namespace",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalServiceResolver) Namespace(ctx context.Context) (*NamespaceResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalServiceResolver) Namespace(ctx context.Context) (*NamespaceResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceResolver.WebhookURL",
                    "documentation": {
                      "identifier": "externalServiceResolver.WebhookURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceResolver.WebhookURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalServiceResolver) WebhookURL() (*string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalServiceResolver) WebhookURL() (*string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceResolver.Warning",
                    "documentation": {
                      "identifier": "externalServiceResolver.Warning",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceResolver.Warning",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalServiceResolver) Warning() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalServiceResolver) Warning() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceResolver.LastSyncError",
                    "documentation": {
                      "identifier": "externalServiceResolver.LastSyncError",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceResolver.LastSyncError",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalServiceResolver) LastSyncError(ctx context.Context) (*string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalServiceResolver) LastSyncError(ctx context.Context) (*string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceResolver.RepoCount",
                    "documentation": {
                      "identifier": "externalServiceResolver.RepoCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceResolver.RepoCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalServiceResolver) RepoCount(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalServiceResolver) RepoCount(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceResolver.LastSyncAt",
                    "documentation": {
                      "identifier": "externalServiceResolver.LastSyncAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceResolver.LastSyncAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalServiceResolver) LastSyncAt() *DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalServiceResolver) LastSyncAt() *DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceResolver.NextSyncAt",
                    "documentation": {
                      "identifier": "externalServiceResolver.NextSyncAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceResolver.NextSyncAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalServiceResolver) NextSyncAt() *DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalServiceResolver) NextSyncAt() *DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceResolver.GrantedScopes",
                    "documentation": {
                      "identifier": "externalServiceResolver.GrantedScopes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceResolver.GrantedScopes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalServiceResolver) GrantedScopes(ctx context.Context) (*[]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalServiceResolver) GrantedScopes(ctx context.Context) (*[]string, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#addExternalServiceArgs",
              "documentation": {
                "identifier": "addExternalServiceArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.addExternalServiceArgs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type addExternalServiceArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype addExternalServiceArgs struct {\n\tInput addExternalServiceInput\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#addExternalServiceInput",
              "documentation": {
                "identifier": "addExternalServiceInput",
                "newPage": false,
                "searchKey": "graphqlbackend.addExternalServiceInput",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type addExternalServiceInput struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype addExternalServiceInput struct {\n\tKind        string\n\tDisplayName string\n\tConfig      string\n\tNamespace   *graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#updateExternalServiceArgs",
              "documentation": {
                "identifier": "updateExternalServiceArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.updateExternalServiceArgs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type updateExternalServiceArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype updateExternalServiceArgs struct {\n\tInput updateExternalServiceInput\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#updateExternalServiceInput",
              "documentation": {
                "identifier": "updateExternalServiceInput",
                "newPage": false,
                "searchKey": "graphqlbackend.updateExternalServiceInput",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type updateExternalServiceInput struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype updateExternalServiceInput struct {\n\tID          graphql.ID\n\tDisplayName *string\n\tConfig      *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repoupdaterClient",
              "documentation": {
                "identifier": "repoupdaterClient",
                "newPage": false,
                "searchKey": "graphqlbackend.repoupdaterClient",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repoupdaterClient interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repoupdaterClient interface {\n\tSyncExternalService(ctx context.Context, svc api.ExternalService) (*protocol.ExternalServiceSyncResult, error)\n}\n```\n\nrepoupdaterClient is an interface with only the methods required in syncExternalService. As a result instead of using the entire repoupdater client implementation, we use a thinner API which only needs the SyncExternalService method to be defined on the object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#deleteExternalServiceArgs",
              "documentation": {
                "identifier": "deleteExternalServiceArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.deleteExternalServiceArgs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type deleteExternalServiceArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype deleteExternalServiceArgs struct {\n\tExternalService graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ExternalServicesArgs",
              "documentation": {
                "identifier": "ExternalServicesArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ExternalServicesArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExternalServicesArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExternalServicesArgs struct {\n\tNamespace *graphql.ID\n\tgraphqlutil.ConnectionArgs\n\tAfter *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#externalServiceConnectionResolver",
              "documentation": {
                "identifier": "externalServiceConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.externalServiceConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type externalServiceConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype externalServiceConnectionResolver struct {\n\topt database.ExternalServicesListOptions\n\n\t// cache results because they are used by multiple fields\n\tonce             sync.Once\n\texternalServices []*types.ExternalService\n\terr              error\n\tdb               dbutil.DB\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceConnectionResolver.compute",
                    "documentation": {
                      "identifier": "externalServiceConnectionResolver.compute",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceConnectionResolver.compute",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalServiceConnectionResolver) compute(ctx context.Context) ([]*types.ExternalService, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalServiceConnectionResolver) compute(ctx context.Context) ([]*types.ExternalService, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "externalServiceConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalServiceConnectionResolver) Nodes(ctx context.Context) ([]*externalServiceResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalServiceConnectionResolver) Nodes(ctx context.Context) ([]*externalServiceResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "externalServiceConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceConnectionResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalServiceConnectionResolver) TotalCount(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalServiceConnectionResolver) TotalCount(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalServiceConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "externalServiceConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalServiceConnectionResolver.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalServiceConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalServiceConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#computedExternalServiceConnectionResolver",
              "documentation": {
                "identifier": "computedExternalServiceConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.computedExternalServiceConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type computedExternalServiceConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype computedExternalServiceConnectionResolver struct {\n\targs             graphqlutil.ConnectionArgs\n\texternalServices []*types.ExternalService\n\tdb               dbutil.DB\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#computedExternalServiceConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "computedExternalServiceConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.computedExternalServiceConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *computedExternalServiceConnectionResolver) Nodes(ctx context.Context) []*externalServiceResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *computedExternalServiceConnectionResolver) Nodes(ctx context.Context) []*externalServiceResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#computedExternalServiceConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "computedExternalServiceConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.computedExternalServiceConnectionResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *computedExternalServiceConnectionResolver) TotalCount(ctx context.Context) int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *computedExternalServiceConnectionResolver) TotalCount(ctx context.Context) int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#computedExternalServiceConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "computedExternalServiceConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.computedExternalServiceConnectionResolver.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *computedExternalServiceConnectionResolver) PageInfo(ctx context.Context) *graphqlutil.PageInfo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *computedExternalServiceConnectionResolver) PageInfo(ctx context.Context) *graphqlutil.PageInfo\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#FeatureFlagResolver",
              "documentation": {
                "identifier": "FeatureFlagResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.FeatureFlagResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FeatureFlagResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FeatureFlagResolver struct {\n\tdb    dbutil.DB\n\tinner *featureflag.FeatureFlag\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FeatureFlagResolver.ToFeatureFlagBoolean",
                    "documentation": {
                      "identifier": "FeatureFlagResolver.ToFeatureFlagBoolean",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FeatureFlagResolver.ToFeatureFlagBoolean",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagResolver) ToFeatureFlagBoolean() (*FeatureFlagBooleanResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagResolver) ToFeatureFlagBoolean() (*FeatureFlagBooleanResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FeatureFlagResolver.ToFeatureFlagRollout",
                    "documentation": {
                      "identifier": "FeatureFlagResolver.ToFeatureFlagRollout",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FeatureFlagResolver.ToFeatureFlagRollout",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagResolver) ToFeatureFlagRollout() (*FeatureFlagRolloutResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagResolver) ToFeatureFlagRollout() (*FeatureFlagRolloutResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#FeatureFlagBooleanResolver",
              "documentation": {
                "identifier": "FeatureFlagBooleanResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.FeatureFlagBooleanResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FeatureFlagBooleanResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FeatureFlagBooleanResolver struct {\n\tdb dbutil.DB\n\t// Invariant: inner.Bool is non-nil\n\tinner *featureflag.FeatureFlag\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FeatureFlagBooleanResolver.Name",
                    "documentation": {
                      "identifier": "FeatureFlagBooleanResolver.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FeatureFlagBooleanResolver.Name",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagBooleanResolver) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagBooleanResolver) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FeatureFlagBooleanResolver.Value",
                    "documentation": {
                      "identifier": "FeatureFlagBooleanResolver.Value",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FeatureFlagBooleanResolver.Value",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagBooleanResolver) Value() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagBooleanResolver) Value() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FeatureFlagBooleanResolver.Overrides",
                    "documentation": {
                      "identifier": "FeatureFlagBooleanResolver.Overrides",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FeatureFlagBooleanResolver.Overrides",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagBooleanResolver) Overrides(ctx context.Context) ([]*FeatureFlagOverrideResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagBooleanResolver) Overrides(ctx context.Context) ([]*FeatureFlagOverrideResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#FeatureFlagRolloutResolver",
              "documentation": {
                "identifier": "FeatureFlagRolloutResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.FeatureFlagRolloutResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FeatureFlagRolloutResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FeatureFlagRolloutResolver struct {\n\tdb dbutil.DB\n\t// Invariant: inner.Rollout is non-nil\n\tinner *featureflag.FeatureFlag\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FeatureFlagRolloutResolver.Name",
                    "documentation": {
                      "identifier": "FeatureFlagRolloutResolver.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FeatureFlagRolloutResolver.Name",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagRolloutResolver) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagRolloutResolver) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FeatureFlagRolloutResolver.RolloutBasisPoints",
                    "documentation": {
                      "identifier": "FeatureFlagRolloutResolver.RolloutBasisPoints",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FeatureFlagRolloutResolver.RolloutBasisPoints",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagRolloutResolver) RolloutBasisPoints() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagRolloutResolver) RolloutBasisPoints() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FeatureFlagRolloutResolver.Overrides",
                    "documentation": {
                      "identifier": "FeatureFlagRolloutResolver.Overrides",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FeatureFlagRolloutResolver.Overrides",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagRolloutResolver) Overrides(ctx context.Context) ([]*FeatureFlagOverrideResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagRolloutResolver) Overrides(ctx context.Context) ([]*FeatureFlagOverrideResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#FeatureFlagOverrideResolver",
              "documentation": {
                "identifier": "FeatureFlagOverrideResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.FeatureFlagOverrideResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FeatureFlagOverrideResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FeatureFlagOverrideResolver struct {\n\tdb    dbutil.DB\n\tinner *featureflag.Override\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FeatureFlagOverrideResolver.TargetFlag",
                    "documentation": {
                      "identifier": "FeatureFlagOverrideResolver.TargetFlag",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FeatureFlagOverrideResolver.TargetFlag",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagOverrideResolver) TargetFlag(ctx context.Context) (*FeatureFlagResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagOverrideResolver) TargetFlag(ctx context.Context) (*FeatureFlagResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FeatureFlagOverrideResolver.Value",
                    "documentation": {
                      "identifier": "FeatureFlagOverrideResolver.Value",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FeatureFlagOverrideResolver.Value",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagOverrideResolver) Value() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagOverrideResolver) Value() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FeatureFlagOverrideResolver.Namespace",
                    "documentation": {
                      "identifier": "FeatureFlagOverrideResolver.Namespace",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FeatureFlagOverrideResolver.Namespace",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagOverrideResolver) Namespace(ctx context.Context) (*NamespaceResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagOverrideResolver) Namespace(ctx context.Context) (*NamespaceResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FeatureFlagOverrideResolver.ID",
                    "documentation": {
                      "identifier": "FeatureFlagOverrideResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FeatureFlagOverrideResolver.ID",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FeatureFlagOverrideResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FeatureFlagOverrideResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#overrideSpec",
              "documentation": {
                "identifier": "overrideSpec",
                "newPage": false,
                "searchKey": "graphqlbackend.overrideSpec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type overrideSpec struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype overrideSpec struct {\n\tUserID, OrgID *int32\n\tFlagName      string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#unmarshalOverrideID",
                    "documentation": {
                      "identifier": "unmarshalOverrideID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.unmarshalOverrideID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func unmarshalOverrideID(id graphql.ID) (spec overrideSpec, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc unmarshalOverrideID(id graphql.ID) (spec overrideSpec, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#EvaluatedFeatureFlagResolver",
              "documentation": {
                "identifier": "EvaluatedFeatureFlagResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.EvaluatedFeatureFlagResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EvaluatedFeatureFlagResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EvaluatedFeatureFlagResolver struct {\n\tname  string\n\tvalue bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#EvaluatedFeatureFlagResolver.Name",
                    "documentation": {
                      "identifier": "EvaluatedFeatureFlagResolver.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.EvaluatedFeatureFlagResolver.Name",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *EvaluatedFeatureFlagResolver) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *EvaluatedFeatureFlagResolver) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#EvaluatedFeatureFlagResolver.Value",
                    "documentation": {
                      "identifier": "EvaluatedFeatureFlagResolver.Value",
                      "newPage": false,
                      "searchKey": "graphqlbackend.EvaluatedFeatureFlagResolver.Value",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *EvaluatedFeatureFlagResolver) Value() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *EvaluatedFeatureFlagResolver) Value() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#FileResolver",
              "documentation": {
                "identifier": "FileResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.FileResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FileResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FileResolver interface {\n\tPath() string\n\tName() string\n\tIsDirectory() bool\n\tContent(ctx context.Context) (string, error)\n\tByteSize(ctx context.Context) (int32, error)\n\tBinary(ctx context.Context) (bool, error)\n\tRichHTML(ctx context.Context) (string, error)\n\tURL(ctx context.Context) (string, error)\n\tCanonicalURL() string\n\tExternalURLs(ctx context.Context) ([]*externallink.Resolver, error)\n\tHighlight(ctx context.Context, args *HighlightArgs) (*highlightedFileResolver, error)\n\n\tToGitBlob() (*GitTreeEntryResolver, bool)\n\tToVirtualFile() (*virtualFileResolver, bool)\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#previewNewFile",
                    "documentation": {
                      "identifier": "previewNewFile",
                      "newPage": false,
                      "searchKey": "graphqlbackend.previewNewFile",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func previewNewFile(db dbutil.DB, r *FileDiffResolver) FileResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc previewNewFile(db dbutil.DB, r *FileDiffResolver) FileResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryComparisonNewFile",
                    "documentation": {
                      "identifier": "repositoryComparisonNewFile",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryComparisonNewFile",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func repositoryComparisonNewFile(db dbutil.DB, r *FileDiffResolver) FileResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc repositoryComparisonNewFile(db dbutil.DB, r *FileDiffResolver) FileResolver\n```\n\nrepositoryComparisonNewFile is the default NewFileFunc used by RepositoryComparisonResolver to produce the new file in a FileDiffResolver. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#markdownOptions",
              "documentation": {
                "identifier": "markdownOptions",
                "newPage": false,
                "searchKey": "graphqlbackend.markdownOptions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type markdownOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype markdownOptions struct {\n\tAlwaysNil *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#FileMatchResolver",
              "documentation": {
                "identifier": "FileMatchResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.FileMatchResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FileMatchResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FileMatchResolver struct {\n\tresult.FileMatch\n\n\tRepoResolver *RepositoryResolver\n\tdb           dbutil.DB\n}\n```\n\nFileMatchResolver is a resolver for the GraphQL type `FileMatch` \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileMatchResolver.Equal",
                    "documentation": {
                      "identifier": "FileMatchResolver.Equal",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileMatchResolver.Equal",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fm *FileMatchResolver) Equal(other *FileMatchResolver) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fm *FileMatchResolver) Equal(other *FileMatchResolver) bool\n```\n\nEqual provides custom comparison which is used by go-cmp \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileMatchResolver.Key",
                    "documentation": {
                      "identifier": "FileMatchResolver.Key",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileMatchResolver.Key",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fm *FileMatchResolver) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fm *FileMatchResolver) Key() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileMatchResolver.File",
                    "documentation": {
                      "identifier": "FileMatchResolver.File",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileMatchResolver.File",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fm *FileMatchResolver) File() *GitTreeEntryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fm *FileMatchResolver) File() *GitTreeEntryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileMatchResolver.Commit",
                    "documentation": {
                      "identifier": "FileMatchResolver.Commit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileMatchResolver.Commit",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fm *FileMatchResolver) Commit() *GitCommitResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fm *FileMatchResolver) Commit() *GitCommitResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileMatchResolver.Repository",
                    "documentation": {
                      "identifier": "FileMatchResolver.Repository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileMatchResolver.Repository",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fm *FileMatchResolver) Repository() *RepositoryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fm *FileMatchResolver) Repository() *RepositoryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileMatchResolver.RevSpec",
                    "documentation": {
                      "identifier": "FileMatchResolver.RevSpec",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileMatchResolver.RevSpec",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fm *FileMatchResolver) RevSpec() *gitRevSpec"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fm *FileMatchResolver) RevSpec() *gitRevSpec\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileMatchResolver.Symbols",
                    "documentation": {
                      "identifier": "FileMatchResolver.Symbols",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileMatchResolver.Symbols",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fm *FileMatchResolver) Symbols() []symbolResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fm *FileMatchResolver) Symbols() []symbolResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileMatchResolver.LineMatches",
                    "documentation": {
                      "identifier": "FileMatchResolver.LineMatches",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileMatchResolver.LineMatches",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fm *FileMatchResolver) LineMatches() []lineMatchResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fm *FileMatchResolver) LineMatches() []lineMatchResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileMatchResolver.LimitHit",
                    "documentation": {
                      "identifier": "FileMatchResolver.LimitHit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileMatchResolver.LimitHit",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fm *FileMatchResolver) LimitHit() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fm *FileMatchResolver) LimitHit() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileMatchResolver.ToRepository",
                    "documentation": {
                      "identifier": "FileMatchResolver.ToRepository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileMatchResolver.ToRepository",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fm *FileMatchResolver) ToRepository() (*RepositoryResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fm *FileMatchResolver) ToRepository() (*RepositoryResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileMatchResolver.ToFileMatch",
                    "documentation": {
                      "identifier": "FileMatchResolver.ToFileMatch",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileMatchResolver.ToFileMatch",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fm *FileMatchResolver) ToFileMatch() (*FileMatchResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fm *FileMatchResolver) ToFileMatch() (*FileMatchResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileMatchResolver.ToCommitSearchResult",
                    "documentation": {
                      "identifier": "FileMatchResolver.ToCommitSearchResult",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileMatchResolver.ToCommitSearchResult",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fm *FileMatchResolver) ToCommitSearchResult() (*CommitSearchResultResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fm *FileMatchResolver) ToCommitSearchResult() (*CommitSearchResultResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileMatchResolver.ResultCount",
                    "documentation": {
                      "identifier": "FileMatchResolver.ResultCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileMatchResolver.ResultCount",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fm *FileMatchResolver) ResultCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fm *FileMatchResolver) ResultCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#lineMatchResolver",
              "documentation": {
                "identifier": "lineMatchResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.lineMatchResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type lineMatchResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype lineMatchResolver struct {\n\t*result.LineMatch\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#lineMatchResolver.Preview",
                    "documentation": {
                      "identifier": "lineMatchResolver.Preview",
                      "newPage": false,
                      "searchKey": "graphqlbackend.lineMatchResolver.Preview",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (lm lineMatchResolver) Preview() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (lm lineMatchResolver) Preview() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#lineMatchResolver.LineNumber",
                    "documentation": {
                      "identifier": "lineMatchResolver.LineNumber",
                      "newPage": false,
                      "searchKey": "graphqlbackend.lineMatchResolver.LineNumber",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (lm lineMatchResolver) LineNumber() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (lm lineMatchResolver) LineNumber() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#lineMatchResolver.OffsetAndLengths",
                    "documentation": {
                      "identifier": "lineMatchResolver.OffsetAndLengths",
                      "newPage": false,
                      "searchKey": "graphqlbackend.lineMatchResolver.OffsetAndLengths",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (lm lineMatchResolver) OffsetAndLengths() [][]int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (lm lineMatchResolver) OffsetAndLengths() [][]int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#lineMatchResolver.LimitHit",
                    "documentation": {
                      "identifier": "lineMatchResolver.LimitHit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.lineMatchResolver.LimitHit",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (lm lineMatchResolver) LimitHit() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (lm lineMatchResolver) LimitHit() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver",
              "documentation": {
                "identifier": "GitCommitResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.GitCommitResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitCommitResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitCommitResolver struct {\n\tdb           dbutil.DB\n\trepoResolver *RepositoryResolver\n\n\t// inputRev is the Git revspec that the user originally requested that resolved to this Git commit. It is used\n\t// to avoid redirecting a user browsing a revision \"mybranch\" to the absolute commit ID as they follow links in the UI.\n\tinputRev *string\n\n\t// fetch + serve sourcegraph stored user information\n\tincludeUserInfo bool\n\n\t// oid MUST be specified and a 40-character Git SHA.\n\toid GitObjectID\n\n\tgitRepo api.RepoName\n\n\t// commit should not be accessed directly since it might not be initialized.\n\t// Use the resolver methods instead.\n\tcommit     *git.Commit\n\tcommitOnce sync.Once\n\tcommitErr  error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#toGitCommitResolver",
                    "documentation": {
                      "identifier": "toGitCommitResolver",
                      "newPage": false,
                      "searchKey": "graphqlbackend.toGitCommitResolver",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func toGitCommitResolver(repo *RepositoryResolver, db dbutil.DB, id api.CommitID, commit *git.Commit) *GitCommitResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc toGitCommitResolver(repo *RepositoryResolver, db dbutil.DB, id api.CommitID, commit *git.Commit) *GitCommitResolver\n```\n\nWhen set to nil, commit will be loaded lazily as needed by the resolver. Pass in a commit when you have batch loaded a bunch of them and already have them at hand. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.resolveCommit",
                    "documentation": {
                      "identifier": "GitCommitResolver.resolveCommit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.resolveCommit",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) resolveCommit(ctx context.Context) (*git.Commit, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) resolveCommit(ctx context.Context) (*git.Commit, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.ID",
                    "documentation": {
                      "identifier": "GitCommitResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.ID",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.Repository",
                    "documentation": {
                      "identifier": "GitCommitResolver.Repository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.Repository",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) Repository() *RepositoryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) Repository() *RepositoryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.OID",
                    "documentation": {
                      "identifier": "GitCommitResolver.OID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.OID",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) OID() GitObjectID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) OID() GitObjectID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.InputRev",
                    "documentation": {
                      "identifier": "GitCommitResolver.InputRev",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.InputRev",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) InputRev() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) InputRev() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.AbbreviatedOID",
                    "documentation": {
                      "identifier": "GitCommitResolver.AbbreviatedOID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.AbbreviatedOID",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) AbbreviatedOID() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) AbbreviatedOID() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.Author",
                    "documentation": {
                      "identifier": "GitCommitResolver.Author",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.Author",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) Author(ctx context.Context) (*signatureResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) Author(ctx context.Context) (*signatureResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.Committer",
                    "documentation": {
                      "identifier": "GitCommitResolver.Committer",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.Committer",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) Committer(ctx context.Context) (*signatureResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) Committer(ctx context.Context) (*signatureResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.Message",
                    "documentation": {
                      "identifier": "GitCommitResolver.Message",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.Message",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) Message(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) Message(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.Subject",
                    "documentation": {
                      "identifier": "GitCommitResolver.Subject",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.Subject",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) Subject(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) Subject(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.Body",
                    "documentation": {
                      "identifier": "GitCommitResolver.Body",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.Body",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) Body(ctx context.Context) (*string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) Body(ctx context.Context) (*string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.Parents",
                    "documentation": {
                      "identifier": "GitCommitResolver.Parents",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.Parents",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) Parents(ctx context.Context) ([]*GitCommitResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) Parents(ctx context.Context) ([]*GitCommitResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.URL",
                    "documentation": {
                      "identifier": "GitCommitResolver.URL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.URL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) URL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) URL() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.CanonicalURL",
                    "documentation": {
                      "identifier": "GitCommitResolver.CanonicalURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.CanonicalURL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) CanonicalURL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) CanonicalURL() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.ExternalURLs",
                    "documentation": {
                      "identifier": "GitCommitResolver.ExternalURLs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.ExternalURLs",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) ExternalURLs(ctx context.Context) ([]*externallink.Resolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) ExternalURLs(ctx context.Context) ([]*externallink.Resolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.Tree",
                    "documentation": {
                      "identifier": "GitCommitResolver.Tree",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.Tree",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) Tree(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) Tree(ctx context.Context, args *struct {\n\tPath      string\n\tRecursive bool\n}) (*GitTreeEntryResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.Blob",
                    "documentation": {
                      "identifier": "GitCommitResolver.Blob",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.Blob",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) Blob(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) Blob(ctx context.Context, args *struct {\n\tPath string\n}) (*GitTreeEntryResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.File",
                    "documentation": {
                      "identifier": "GitCommitResolver.File",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.File",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) File(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) File(ctx context.Context, args *struct {\n\tPath string\n}) (*GitTreeEntryResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.FileNames",
                    "documentation": {
                      "identifier": "GitCommitResolver.FileNames",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.FileNames",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) FileNames(ctx context.Context) ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) FileNames(ctx context.Context) ([]string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.Languages",
                    "documentation": {
                      "identifier": "GitCommitResolver.Languages",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.Languages",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) Languages(ctx context.Context) ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) Languages(ctx context.Context) ([]string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.LanguageStatistics",
                    "documentation": {
                      "identifier": "GitCommitResolver.LanguageStatistics",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.LanguageStatistics",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) LanguageStatistics(ctx context.Context) ([]*languageStatisticsResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) LanguageStatistics(ctx context.Context) ([]*languageStatisticsResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.Ancestors",
                    "documentation": {
                      "identifier": "GitCommitResolver.Ancestors",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.Ancestors",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) Ancestors(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) Ancestors(ctx context.Context, args *struct {\n\tgraphqlutil.ConnectionArgs\n\tQuery *string\n\tPath  *string\n\tAfter *string\n}) (*gitCommitConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.BehindAhead",
                    "documentation": {
                      "identifier": "GitCommitResolver.BehindAhead",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.BehindAhead",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) BehindAhead(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) BehindAhead(ctx context.Context, args *struct {\n\tRevspec string\n}) (*behindAheadCountsResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.inputRevOrImmutableRev",
                    "documentation": {
                      "identifier": "GitCommitResolver.inputRevOrImmutableRev",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.inputRevOrImmutableRev",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) inputRevOrImmutableRev() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) inputRevOrImmutableRev() string\n```\n\ninputRevOrImmutableRev returns the input revspec, if it is provided and nonempty. Otherwise it returns the canonical OID for the revision. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.repoRevURL",
                    "documentation": {
                      "identifier": "GitCommitResolver.repoRevURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.repoRevURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) repoRevURL() *url.URL"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) repoRevURL() *url.URL\n```\n\nrepoRevURL returns the URL path prefix to use when constructing URLs to resources at this revision. Unlike inputRevOrImmutableRev, it does NOT use the OID if no input revspec is given. This is because the convention in the frontend is for repo-rev URLs to omit the \"@rev\" portion (unlike for commit page URLs, which must include some revspec in \"/REPO/-/commit/REVSPEC\"). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.canonicalRepoRevURL",
                    "documentation": {
                      "identifier": "GitCommitResolver.canonicalRepoRevURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.canonicalRepoRevURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) canonicalRepoRevURL() *url.URL"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) canonicalRepoRevURL() *url.URL\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitCommitResolver.Symbols",
                    "documentation": {
                      "identifier": "GitCommitResolver.Symbols",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitCommitResolver.Symbols",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitCommitResolver) Symbols(ctx context.Context, args *symbolsArgs) (*symbolConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitCommitResolver) Symbols(ctx context.Context, args *symbolsArgs) (*symbolConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitCommitGQLID",
              "documentation": {
                "identifier": "gitCommitGQLID",
                "newPage": false,
                "searchKey": "graphqlbackend.gitCommitGQLID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gitCommitGQLID struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gitCommitGQLID struct {\n\tRepository graphql.ID  `json:\"r\"`\n\tCommitID   GitObjectID `json:\"c\"`\n}\n```\n\ngitCommitGQLID is a type used for marshaling and unmarshaling a Git commit's GraphQL ID. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#behindAheadCountsResolver",
              "documentation": {
                "identifier": "behindAheadCountsResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.behindAheadCountsResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type behindAheadCountsResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype behindAheadCountsResolver struct{ behind, ahead int32 }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#behindAheadCountsResolver.Behind",
                    "documentation": {
                      "identifier": "behindAheadCountsResolver.Behind",
                      "newPage": false,
                      "searchKey": "graphqlbackend.behindAheadCountsResolver.Behind",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *behindAheadCountsResolver) Behind() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *behindAheadCountsResolver) Behind() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#behindAheadCountsResolver.Ahead",
                    "documentation": {
                      "identifier": "behindAheadCountsResolver.Ahead",
                      "newPage": false,
                      "searchKey": "graphqlbackend.behindAheadCountsResolver.Ahead",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *behindAheadCountsResolver) Ahead() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *behindAheadCountsResolver) Ahead() int32\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitCommitConnectionResolver",
              "documentation": {
                "identifier": "gitCommitConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.gitCommitConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gitCommitConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gitCommitConnectionResolver struct {\n\tdb            dbutil.DB\n\trevisionRange string\n\n\tfirst  *int32\n\tquery  *string\n\tpath   *string\n\tauthor *string\n\tafter  *string\n\n\trepo *RepositoryResolver\n\n\t// cache results because it is used by multiple fields\n\tonce    sync.Once\n\tcommits []*git.Commit\n\terr     error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitCommitConnectionResolver.compute",
                    "documentation": {
                      "identifier": "gitCommitConnectionResolver.compute",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitCommitConnectionResolver.compute",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitCommitConnectionResolver) compute(ctx context.Context) ([]*git.Commit, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitCommitConnectionResolver) compute(ctx context.Context) ([]*git.Commit, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitCommitConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "gitCommitConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitCommitConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitCommitConnectionResolver) Nodes(ctx context.Context) ([]*GitCommitResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitCommitConnectionResolver) Nodes(ctx context.Context) ([]*GitCommitResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitCommitConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "gitCommitConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitCommitConnectionResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitCommitConnectionResolver) TotalCount(ctx context.Context) (*int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitCommitConnectionResolver) TotalCount(ctx context.Context) (*int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitCommitConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "gitCommitConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitCommitConnectionResolver.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitCommitConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitCommitConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitObjectType",
              "documentation": {
                "identifier": "gitObjectType",
                "newPage": false,
                "searchKey": "graphqlbackend.gitObjectType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gitObjectType string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gitObjectType string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#toGitObjectType",
                    "documentation": {
                      "identifier": "toGitObjectType",
                      "newPage": false,
                      "searchKey": "graphqlbackend.toGitObjectType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func toGitObjectType(t git.ObjectType) gitObjectType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc toGitObjectType(t git.ObjectType) gitObjectType\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitObjectType.ImplementsGraphQLType",
                    "documentation": {
                      "identifier": "gitObjectType.ImplementsGraphQLType",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitObjectType.ImplementsGraphQLType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (gitObjectType) ImplementsGraphQLType(name string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (gitObjectType) ImplementsGraphQLType(name string) bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#GitObjectID",
              "documentation": {
                "identifier": "GitObjectID",
                "newPage": false,
                "searchKey": "graphqlbackend.GitObjectID",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitObjectID string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitObjectID string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#unmarshalGitCommitID",
                    "documentation": {
                      "identifier": "unmarshalGitCommitID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.unmarshalGitCommitID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func unmarshalGitCommitID(id graphql.ID) (repoID graphql.ID, commitID GitObjectID, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc unmarshalGitCommitID(id graphql.ID) (repoID graphql.ID, commitID GitObjectID, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitObjectID.ImplementsGraphQLType",
                    "documentation": {
                      "identifier": "GitObjectID.ImplementsGraphQLType",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitObjectID.ImplementsGraphQLType",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (GitObjectID) ImplementsGraphQLType(name string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (GitObjectID) ImplementsGraphQLType(name string) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitObjectID.UnmarshalGraphQL",
                    "documentation": {
                      "identifier": "GitObjectID.UnmarshalGraphQL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitObjectID.UnmarshalGraphQL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (id *GitObjectID) UnmarshalGraphQL(input interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (id *GitObjectID) UnmarshalGraphQL(input interface{}) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitObject",
              "documentation": {
                "identifier": "gitObject",
                "newPage": false,
                "searchKey": "graphqlbackend.gitObject",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gitObject struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gitObject struct {\n\trepo *RepositoryResolver\n\toid  GitObjectID\n\ttyp  gitObjectType\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitObject.OID",
                    "documentation": {
                      "identifier": "gitObject.OID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitObject.OID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *gitObject) OID(ctx context.Context) (GitObjectID, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *gitObject) OID(ctx context.Context) (GitObjectID, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitObject.AbbreviatedOID",
                    "documentation": {
                      "identifier": "gitObject.AbbreviatedOID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitObject.AbbreviatedOID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *gitObject) AbbreviatedOID(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *gitObject) AbbreviatedOID(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitObject.Commit",
                    "documentation": {
                      "identifier": "gitObject.Commit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitObject.Commit",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *gitObject) Commit(ctx context.Context) (*GitCommitResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *gitObject) Commit(ctx context.Context) (*GitCommitResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitObject.Type",
                    "documentation": {
                      "identifier": "gitObject.Type",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitObject.Type",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *gitObject) Type(context.Context) (gitObjectType, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *gitObject) Type(context.Context) (gitObjectType, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitObjectResolver",
              "documentation": {
                "identifier": "gitObjectResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.gitObjectResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gitObjectResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gitObjectResolver struct {\n\trepo    *RepositoryResolver\n\trevspec string\n\n\tonce sync.Once\n\toid  GitObjectID\n\ttyp  gitObjectType\n\terr  error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitObjectResolver.resolve",
                    "documentation": {
                      "identifier": "gitObjectResolver.resolve",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitObjectResolver.resolve",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *gitObjectResolver) resolve(ctx context.Context) (GitObjectID, gitObjectType, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *gitObjectResolver) resolve(ctx context.Context) (GitObjectID, gitObjectType, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitObjectResolver.OID",
                    "documentation": {
                      "identifier": "gitObjectResolver.OID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitObjectResolver.OID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *gitObjectResolver) OID(ctx context.Context) (GitObjectID, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *gitObjectResolver) OID(ctx context.Context) (GitObjectID, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitObjectResolver.AbbreviatedOID",
                    "documentation": {
                      "identifier": "gitObjectResolver.AbbreviatedOID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitObjectResolver.AbbreviatedOID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *gitObjectResolver) AbbreviatedOID(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *gitObjectResolver) AbbreviatedOID(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitObjectResolver.Commit",
                    "documentation": {
                      "identifier": "gitObjectResolver.Commit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitObjectResolver.Commit",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *gitObjectResolver) Commit(ctx context.Context) (*GitCommitResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *gitObjectResolver) Commit(ctx context.Context) (*GitCommitResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitObjectResolver.Type",
                    "documentation": {
                      "identifier": "gitObjectResolver.Type",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitObjectResolver.Type",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *gitObjectResolver) Type(ctx context.Context) (gitObjectType, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *gitObjectResolver) Type(ctx context.Context) (gitObjectType, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#GitRefResolver",
              "documentation": {
                "identifier": "GitRefResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.GitRefResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitRefResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitRefResolver struct {\n\trepo *RepositoryResolver\n\tname string\n\n\ttarget GitObjectID // the target's OID, if known (otherwise computed on demand)\n\n\tgitObjectResolverOnce sync.Once\n\tgitObjectResolver     *gitObjectResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewGitRefResolver",
                    "documentation": {
                      "identifier": "NewGitRefResolver",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewGitRefResolver",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewGitRefResolver(repo *RepositoryResolver, name string, target GitObjectID) *GitRefResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewGitRefResolver(repo *RepositoryResolver, name string, target GitObjectID) *GitRefResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitRefResolver.ID",
                    "documentation": {
                      "identifier": "GitRefResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitRefResolver.ID",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitRefResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitRefResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitRefResolver.Name",
                    "documentation": {
                      "identifier": "GitRefResolver.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitRefResolver.Name",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitRefResolver) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitRefResolver) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitRefResolver.AbbrevName",
                    "documentation": {
                      "identifier": "GitRefResolver.AbbrevName",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitRefResolver.AbbrevName",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitRefResolver) AbbrevName() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitRefResolver) AbbrevName() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitRefResolver.DisplayName",
                    "documentation": {
                      "identifier": "GitRefResolver.DisplayName",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitRefResolver.DisplayName",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitRefResolver) DisplayName() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitRefResolver) DisplayName() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitRefResolver.Prefix",
                    "documentation": {
                      "identifier": "GitRefResolver.Prefix",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitRefResolver.Prefix",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitRefResolver) Prefix() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitRefResolver) Prefix() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitRefResolver.Type",
                    "documentation": {
                      "identifier": "GitRefResolver.Type",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitRefResolver.Type",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitRefResolver) Type() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitRefResolver) Type() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitRefResolver.Target",
                    "documentation": {
                      "identifier": "GitRefResolver.Target",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitRefResolver.Target",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitRefResolver) Target() interface {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitRefResolver) Target() interface {\n\tOID(context.Context) (GitObjectID, error)\n\t//lint:ignore U1000 is used by graphql via reflection\n\tAbbreviatedOID(context.Context) (string, error)\n\t//lint:ignore U1000 is used by graphql via reflection\n\tCommit(context.Context) (*GitCommitResolver, error)\n\t//lint:ignore U1000 is used by graphql via reflection\n\tType(context.Context) (gitObjectType, error)\n}\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitRefResolver.Repository",
                    "documentation": {
                      "identifier": "GitRefResolver.Repository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitRefResolver.Repository",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitRefResolver) Repository() *RepositoryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitRefResolver) Repository() *RepositoryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitRefResolver.URL",
                    "documentation": {
                      "identifier": "GitRefResolver.URL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitRefResolver.URL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitRefResolver) URL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitRefResolver) URL() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitRefGQLID",
              "documentation": {
                "identifier": "gitRefGQLID",
                "newPage": false,
                "searchKey": "graphqlbackend.gitRefGQLID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gitRefGQLID struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gitRefGQLID struct {\n\tRepository graphql.ID `json:\"r\"`\n\tRev        string     `json:\"v\"`\n}\n```\n\ngitRefGQLID is a type used for marshaling and unmarshaling a Git ref's GraphQL ID. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitRevSpecExpr",
              "documentation": {
                "identifier": "gitRevSpecExpr",
                "newPage": false,
                "searchKey": "graphqlbackend.gitRevSpecExpr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gitRevSpecExpr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gitRevSpecExpr struct {\n\texpr string\n\trepo *RepositoryResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitRevSpecExpr.Expr",
                    "documentation": {
                      "identifier": "gitRevSpecExpr.Expr",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitRevSpecExpr.Expr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitRevSpecExpr) Expr() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitRevSpecExpr) Expr() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitRevSpecExpr.Object",
                    "documentation": {
                      "identifier": "gitRevSpecExpr.Object",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitRevSpecExpr.Object",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitRevSpecExpr) Object(ctx context.Context) (*gitObject, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitRevSpecExpr) Object(ctx context.Context) (*gitObject, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitRevSpec",
              "documentation": {
                "identifier": "gitRevSpec",
                "newPage": false,
                "searchKey": "graphqlbackend.gitRevSpec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gitRevSpec struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gitRevSpec struct {\n\tref    *GitRefResolver\n\texpr   *gitRevSpecExpr\n\tobject *gitObject\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitRevSpec.ToGitRef",
                    "documentation": {
                      "identifier": "gitRevSpec.ToGitRef",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitRevSpec.ToGitRef",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitRevSpec) ToGitRef() (*GitRefResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitRevSpec) ToGitRef() (*GitRefResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitRevSpec.ToGitRevSpecExpr",
                    "documentation": {
                      "identifier": "gitRevSpec.ToGitRevSpecExpr",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitRevSpec.ToGitRevSpecExpr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitRevSpec) ToGitRevSpecExpr() (*gitRevSpecExpr, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitRevSpec) ToGitRevSpecExpr() (*gitRevSpecExpr, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitRevSpec.ToGitObject",
                    "documentation": {
                      "identifier": "gitRevSpec.ToGitObject",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitRevSpec.ToGitObject",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitRevSpec) ToGitObject() (*gitObject, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitRevSpec) ToGitObject() (*gitObject, bool)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitRevisionRange",
              "documentation": {
                "identifier": "gitRevisionRange",
                "newPage": false,
                "searchKey": "graphqlbackend.gitRevisionRange",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gitRevisionRange struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gitRevisionRange struct {\n\texpr       string\n\tbase, head *gitRevSpec\n\tmergeBase  *gitObject\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitRevisionRange.Expr",
                    "documentation": {
                      "identifier": "gitRevisionRange.Expr",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitRevisionRange.Expr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitRevisionRange) Expr() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitRevisionRange) Expr() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitRevisionRange.Base",
                    "documentation": {
                      "identifier": "gitRevisionRange.Base",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitRevisionRange.Base",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitRevisionRange) Base() *gitRevSpec"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitRevisionRange) Base() *gitRevSpec\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitRevisionRange.BaseRevSpec",
                    "documentation": {
                      "identifier": "gitRevisionRange.BaseRevSpec",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitRevisionRange.BaseRevSpec",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitRevisionRange) BaseRevSpec() *gitRevSpecExpr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitRevisionRange) BaseRevSpec() *gitRevSpecExpr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitRevisionRange.Head",
                    "documentation": {
                      "identifier": "gitRevisionRange.Head",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitRevisionRange.Head",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitRevisionRange) Head() *gitRevSpec"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitRevisionRange) Head() *gitRevSpec\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitRevisionRange.HeadRevSpec",
                    "documentation": {
                      "identifier": "gitRevisionRange.HeadRevSpec",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitRevisionRange.HeadRevSpec",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitRevisionRange) HeadRevSpec() *gitRevSpecExpr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitRevisionRange) HeadRevSpec() *gitRevSpecExpr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitRevisionRange.MergeBase",
                    "documentation": {
                      "identifier": "gitRevisionRange.MergeBase",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitRevisionRange.MergeBase",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitRevisionRange) MergeBase() *gitObject"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitRevisionRange) MergeBase() *gitObject\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitTreeEntryConnectionArgs",
              "documentation": {
                "identifier": "gitTreeEntryConnectionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.gitTreeEntryConnectionArgs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gitTreeEntryConnectionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gitTreeEntryConnectionArgs struct {\n\tgraphqlutil.ConnectionArgs\n\tRecursive bool\n\t// If recurseSingleChild is true, we will return a flat list of every\n\t// directory and file in a single-child nest.\n\tRecursiveSingleChild bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#byDirectory",
              "documentation": {
                "identifier": "byDirectory",
                "newPage": false,
                "searchKey": "graphqlbackend.byDirectory",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type byDirectory []fs.FileInfo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype byDirectory []fs.FileInfo\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#byDirectory.Len",
                    "documentation": {
                      "identifier": "byDirectory.Len",
                      "newPage": false,
                      "searchKey": "graphqlbackend.byDirectory.Len",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s byDirectory) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s byDirectory) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#byDirectory.Swap",
                    "documentation": {
                      "identifier": "byDirectory.Swap",
                      "newPage": false,
                      "searchKey": "graphqlbackend.byDirectory.Swap",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s byDirectory) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s byDirectory) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#byDirectory.Less",
                    "documentation": {
                      "identifier": "byDirectory.Less",
                      "newPage": false,
                      "searchKey": "graphqlbackend.byDirectory.Less",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s byDirectory) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s byDirectory) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver",
              "documentation": {
                "identifier": "GitTreeEntryResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.GitTreeEntryResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitTreeEntryResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitTreeEntryResolver struct {\n\tdb     dbutil.DB\n\tcommit *GitCommitResolver\n\n\tcontentOnce sync.Once\n\tcontent     []byte\n\tcontentErr  error\n\n\t// stat is this tree entry's file info. Its Name method must return the full path relative to\n\t// the root, not the basename.\n\tstat fs.FileInfo\n\n\tisRecursive   bool  // whether entries is populated recursively (otherwise just current level of hierarchy)\n\tisSingleChild *bool // whether this is the single entry in its parent. Only set by the (&GitTreeEntryResolver) entries.\n}\n```\n\nGitTreeEntryResolver resolves an entry in a Git tree in a repository. The entry can be any Git object type that is valid in a tree. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewGitTreeEntryResolver",
                    "documentation": {
                      "identifier": "NewGitTreeEntryResolver",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewGitTreeEntryResolver",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewGitTreeEntryResolver(commit *GitCommitResolver, db dbutil.DB, stat fs.FileInfo) *GitTreeEntryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewGitTreeEntryResolver(commit *GitCommitResolver, db dbutil.DB, stat fs.FileInfo) *GitTreeEntryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.Blame",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.Blame",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.Blame",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) Blame(ctx context.Context,..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) Blame(ctx context.Context,\n\targs *struct {\n\t\tStartLine int32\n\t\tEndLine   int32\n\t}) ([]*hunkResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.IsRoot",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.IsRoot",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.IsRoot",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) IsRoot() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) IsRoot() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.Entries",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.Entries",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.Entries",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) Entries(ctx context.Context, args *gitTreeEntryConnectionArgs) ([]*GitTreeEntryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) Entries(ctx context.Context, args *gitTreeEntryConnectionArgs) ([]*GitTreeEntryResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.Directories",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.Directories",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.Directories",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) Directories(ctx context.Context, args *gitTreeEntryConnectionArgs) ([]*GitTreeEntryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) Directories(ctx context.Context, args *gitTreeEntryConnectionArgs) ([]*GitTreeEntryResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.Files",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.Files",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.Files",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) Files(ctx context.Context, args *gitTreeEntryConnectionArgs) ([]*GitTreeEntryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) Files(ctx context.Context, args *gitTreeEntryConnectionArgs) ([]*GitTreeEntryResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.entries",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.entries",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.entries",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) entries(ctx context.Context, args *gitTreeEntryConnectionArgs, filter func(fi fs.FileInfo) bool) ([]*GitTreeEntryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) entries(ctx context.Context, args *gitTreeEntryConnectionArgs, filter func(fi fs.FileInfo) bool) ([]*GitTreeEntryResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.Path",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.Path",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.Path",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) Path() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) Path() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.Name",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.Name",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.ToGitTree",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.ToGitTree",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.ToGitTree",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) ToGitTree() (*GitTreeEntryResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) ToGitTree() (*GitTreeEntryResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.ToGitBlob",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.ToGitBlob",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.ToGitBlob",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) ToGitBlob() (*GitTreeEntryResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) ToGitBlob() (*GitTreeEntryResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.ToVirtualFile",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.ToVirtualFile",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.ToVirtualFile",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) ToVirtualFile() (*virtualFileResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) ToVirtualFile() (*virtualFileResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.ByteSize",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.ByteSize",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.ByteSize",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) ByteSize(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) ByteSize(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.Content",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.Content",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.Content",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) Content(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) Content(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.RichHTML",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.RichHTML",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.RichHTML",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) RichHTML(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) RichHTML(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.Binary",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.Binary",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.Binary",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) Binary(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) Binary(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.Highlight",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.Highlight",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.Highlight",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) Highlight(ctx context.Context, args *HighlightArgs) (*highlightedFileResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) Highlight(ctx context.Context, args *HighlightArgs) (*highlightedFileResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.Commit",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.Commit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.Commit",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) Commit() *GitCommitResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) Commit() *GitCommitResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.Repository",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.Repository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.Repository",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) Repository() *RepositoryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) Repository() *RepositoryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.IsRecursive",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.IsRecursive",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.IsRecursive",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) IsRecursive() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) IsRecursive() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.URL",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.URL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.URL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) URL(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) URL(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.CanonicalURL",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.CanonicalURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.CanonicalURL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) CanonicalURL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) CanonicalURL() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.urlPath",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.urlPath",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.urlPath",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) urlPath(prefix *url.URL) *url.URL"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) urlPath(prefix *url.URL) *url.URL\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.IsDirectory",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.IsDirectory",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.IsDirectory",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) IsDirectory() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) IsDirectory() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.ExternalURLs",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.ExternalURLs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.ExternalURLs",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) ExternalURLs(ctx context.Context) ([]*externallink.Resolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) ExternalURLs(ctx context.Context) ([]*externallink.Resolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.RawZipArchiveURL",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.RawZipArchiveURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.RawZipArchiveURL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) RawZipArchiveURL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) RawZipArchiveURL() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.Submodule",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.Submodule",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.Submodule",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) Submodule() *gitSubmoduleResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) Submodule() *gitSubmoduleResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.IsSingleChild",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.IsSingleChild",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.IsSingleChild",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) IsSingleChild(ctx context.Context, args *gitTreeEntryConnectionArgs) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) IsSingleChild(ctx context.Context, args *gitTreeEntryConnectionArgs) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.LSIF",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.LSIF",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.LSIF",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) LSIF(ctx context.Context, args *struct{ ToolName *string }) (GitBlobLSIFDataResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) LSIF(ctx context.Context, args *struct{ ToolName *string }) (GitBlobLSIFDataResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#GitTreeEntryResolver.Symbols",
                    "documentation": {
                      "identifier": "GitTreeEntryResolver.Symbols",
                      "newPage": false,
                      "searchKey": "graphqlbackend.GitTreeEntryResolver.Symbols",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *GitTreeEntryResolver) Symbols(ctx context.Context, args *symbolsArgs) (*symbolConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *GitTreeEntryResolver) Symbols(ctx context.Context, args *symbolsArgs) (*symbolConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#fileInfo",
              "documentation": {
                "identifier": "fileInfo",
                "newPage": false,
                "searchKey": "graphqlbackend.fileInfo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type fileInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fileInfo struct {\n\tpath  string\n\tsize  int64\n\tisDir bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#fileInfo.Name",
                    "documentation": {
                      "identifier": "fileInfo.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.fileInfo.Name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f fileInfo) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f fileInfo) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#fileInfo.Size",
                    "documentation": {
                      "identifier": "fileInfo.Size",
                      "newPage": false,
                      "searchKey": "graphqlbackend.fileInfo.Size",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f fileInfo) Size() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f fileInfo) Size() int64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#fileInfo.IsDir",
                    "documentation": {
                      "identifier": "fileInfo.IsDir",
                      "newPage": false,
                      "searchKey": "graphqlbackend.fileInfo.IsDir",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f fileInfo) IsDir() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f fileInfo) IsDir() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#fileInfo.Mode",
                    "documentation": {
                      "identifier": "fileInfo.Mode",
                      "newPage": false,
                      "searchKey": "graphqlbackend.fileInfo.Mode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f fileInfo) Mode() os.FileMode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f fileInfo) Mode() os.FileMode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#fileInfo.ModTime",
                    "documentation": {
                      "identifier": "fileInfo.ModTime",
                      "newPage": false,
                      "searchKey": "graphqlbackend.fileInfo.ModTime",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f fileInfo) ModTime() time.Time"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f fileInfo) ModTime() time.Time\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#fileInfo.Sys",
                    "documentation": {
                      "identifier": "fileInfo.Sys",
                      "newPage": false,
                      "searchKey": "graphqlbackend.fileInfo.Sys",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f fileInfo) Sys() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f fileInfo) Sys() interface{}\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitSubmoduleResolver",
              "documentation": {
                "identifier": "gitSubmoduleResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.gitSubmoduleResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gitSubmoduleResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gitSubmoduleResolver struct {\n\tsubmodule git.Submodule\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitSubmoduleResolver.URL",
                    "documentation": {
                      "identifier": "gitSubmoduleResolver.URL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitSubmoduleResolver.URL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitSubmoduleResolver) URL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitSubmoduleResolver) URL() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitSubmoduleResolver.Commit",
                    "documentation": {
                      "identifier": "gitSubmoduleResolver.Commit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitSubmoduleResolver.Commit",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitSubmoduleResolver) Commit() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitSubmoduleResolver) Commit() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitSubmoduleResolver.Path",
                    "documentation": {
                      "identifier": "gitSubmoduleResolver.Path",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitSubmoduleResolver.Path",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitSubmoduleResolver) Path() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitSubmoduleResolver) Path() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#prometheusTracer",
              "documentation": {
                "identifier": "prometheusTracer",
                "newPage": false,
                "searchKey": "graphqlbackend.prometheusTracer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type prometheusTracer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype prometheusTracer struct {\n\tdb dbutil.DB\n\ttrace.OpenTracingTracer\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#prometheusTracer.TraceQuery",
                    "documentation": {
                      "identifier": "prometheusTracer.TraceQuery",
                      "newPage": false,
                      "searchKey": "graphqlbackend.prometheusTracer.TraceQuery",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *prometheusTracer) TraceQuery(ctx context.Context, queryString string, operationName string, variables map[string]interface{}, varTypes map[string]*introspection.Type) (context.Context, trace.TraceQueryFinishFunc)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *prometheusTracer) TraceQuery(ctx context.Context, queryString string, operationName string, variables map[string]interface{}, varTypes map[string]*introspection.Type) (context.Context, trace.TraceQueryFinishFunc)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#prometheusTracer.TraceField",
                    "documentation": {
                      "identifier": "prometheusTracer.TraceField",
                      "newPage": false,
                      "searchKey": "graphqlbackend.prometheusTracer.TraceField",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (prometheusTracer) TraceField(ctx context.Context, label, typeName, fieldName string, trivial bool, args map[string]interface{}) (context.Context, trace.TraceFieldFinishFunc)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (prometheusTracer) TraceField(ctx context.Context, label, typeName, fieldName string, trivial bool, args map[string]interface{}) (context.Context, trace.TraceFieldFinishFunc)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#schemaResolver",
              "documentation": {
                "identifier": "schemaResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.schemaResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type schemaResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype schemaResolver struct {\n\tBatchChangesResolver\n\tAuthzResolver\n\tCodeIntelResolver\n\tInsightsResolver\n\tCodeMonitorsResolver\n\tLicenseResolver\n\tDotcomRootResolver\n\n\tdb                dbutil.DB\n\trepoupdaterClient *repoupdater.Client\n\tnodeByIDFns       map[string]NodeByIDFunc\n}\n```\n\nschemaResolver handles all GraphQL queries for Sourcegraph. To do this, it uses subresolvers which are globals. Enterprise-only resolvers are assigned to a field of EnterpriseResolvers. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#newSchemaResolver",
                    "documentation": {
                      "identifier": "newSchemaResolver",
                      "newPage": false,
                      "searchKey": "graphqlbackend.newSchemaResolver",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newSchemaResolver(db dbutil.DB) *schemaResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newSchemaResolver(db dbutil.DB) *schemaResolver\n```\n\nnewSchemaResolver will return a new schemaResolver using repoupdater.DefaultClient. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.CreateAccessToken",
                    "documentation": {
                      "identifier": "schemaResolver.CreateAccessToken",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.CreateAccessToken",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) CreateAccessToken(ctx context.Context, args *createAccessTokenInput) (*createAccessTokenResult, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) CreateAccessToken(ctx context.Context, args *createAccessTokenInput) (*createAccessTokenResult, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.DeleteAccessToken",
                    "documentation": {
                      "identifier": "schemaResolver.DeleteAccessToken",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.DeleteAccessToken",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) DeleteAccessToken(ctx context.Context, args *deleteAccessTokenInput) (*EmptyResponse, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) DeleteAccessToken(ctx context.Context, args *deleteAccessTokenInput) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.ClientConfiguration",
                    "documentation": {
                      "identifier": "schemaResolver.ClientConfiguration",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.ClientConfiguration",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) ClientConfiguration(ctx context.Context) (*clientConfigurationResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) ClientConfiguration(ctx context.Context) (*clientConfigurationResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.ExtensionRegistry",
                    "documentation": {
                      "identifier": "schemaResolver.ExtensionRegistry",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.ExtensionRegistry",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) ExtensionRegistry(ctx context.Context) (ExtensionRegistryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) ExtensionRegistry(ctx context.Context) (ExtensionRegistryResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.DeleteExternalAccount",
                    "documentation": {
                      "identifier": "schemaResolver.DeleteExternalAccount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.DeleteExternalAccount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) DeleteExternalAccount(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) DeleteExternalAccount(ctx context.Context, args *struct {\n\tExternalAccount graphql.ID\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.AddExternalService",
                    "documentation": {
                      "identifier": "schemaResolver.AddExternalService",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.AddExternalService",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) AddExternalService(ctx context.Context, args *addExternalServiceArgs) (*externalServiceResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) AddExternalService(ctx context.Context, args *addExternalServiceArgs) (*externalServiceResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.UpdateExternalService",
                    "documentation": {
                      "identifier": "schemaResolver.UpdateExternalService",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.UpdateExternalService",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) UpdateExternalService(ctx context.Context, args *updateExternalServiceArgs) (*externalServiceResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) UpdateExternalService(ctx context.Context, args *updateExternalServiceArgs) (*externalServiceResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.DeleteExternalService",
                    "documentation": {
                      "identifier": "schemaResolver.DeleteExternalService",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.DeleteExternalService",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) DeleteExternalService(ctx context.Context, args *deleteExternalServiceArgs) (*EmptyResponse, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) DeleteExternalService(ctx context.Context, args *deleteExternalServiceArgs) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.ExternalServices",
                    "documentation": {
                      "identifier": "schemaResolver.ExternalServices",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.ExternalServices",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) ExternalServices(ctx context.Context, args *ExternalServicesArgs) (*externalServiceConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) ExternalServices(ctx context.Context, args *ExternalServicesArgs) (*externalServiceConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.ViewerFeatureFlags",
                    "documentation": {
                      "identifier": "schemaResolver.ViewerFeatureFlags",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.ViewerFeatureFlags",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) ViewerFeatureFlags(ctx context.Context) []*EvaluatedFeatureFlagResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) ViewerFeatureFlags(ctx context.Context) []*EvaluatedFeatureFlagResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.FeatureFlags",
                    "documentation": {
                      "identifier": "schemaResolver.FeatureFlags",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.FeatureFlags",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) FeatureFlags(ctx context.Context) ([]*FeatureFlagResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) FeatureFlags(ctx context.Context) ([]*FeatureFlagResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.CreateFeatureFlag",
                    "documentation": {
                      "identifier": "schemaResolver.CreateFeatureFlag",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.CreateFeatureFlag",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) CreateFeatureFlag(ctx context.Context, args struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) CreateFeatureFlag(ctx context.Context, args struct {\n\tName               string\n\tValue              *bool\n\tRolloutBasisPoints *int32\n}) (*FeatureFlagResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.DeleteFeatureFlag",
                    "documentation": {
                      "identifier": "schemaResolver.DeleteFeatureFlag",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.DeleteFeatureFlag",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) DeleteFeatureFlag(ctx context.Context, args struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) DeleteFeatureFlag(ctx context.Context, args struct {\n\tName string\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.UpdateFeatureFlag",
                    "documentation": {
                      "identifier": "schemaResolver.UpdateFeatureFlag",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.UpdateFeatureFlag",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) UpdateFeatureFlag(ctx context.Context, args struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) UpdateFeatureFlag(ctx context.Context, args struct {\n\tName               string\n\tValue              *bool\n\tRolloutBasisPoints *int32\n}) (*FeatureFlagResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.CreateFeatureFlagOverride",
                    "documentation": {
                      "identifier": "schemaResolver.CreateFeatureFlagOverride",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.CreateFeatureFlagOverride",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) CreateFeatureFlagOverride(ctx context.Context, args struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) CreateFeatureFlagOverride(ctx context.Context, args struct {\n\tNamespace graphql.ID\n\tFlagName  string\n\tValue     bool\n}) (*FeatureFlagOverrideResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.DeleteFeatureFlagOverride",
                    "documentation": {
                      "identifier": "schemaResolver.DeleteFeatureFlagOverride",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.DeleteFeatureFlagOverride",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) DeleteFeatureFlagOverride(ctx context.Context, args struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) DeleteFeatureFlagOverride(ctx context.Context, args struct {\n\tID graphql.ID\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.UpdateFeatureFlagOverride",
                    "documentation": {
                      "identifier": "schemaResolver.UpdateFeatureFlagOverride",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.UpdateFeatureFlagOverride",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) UpdateFeatureFlagOverride(ctx context.Context, args struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) UpdateFeatureFlagOverride(ctx context.Context, args struct {\n\tID    graphql.ID\n\tValue bool\n}) (*FeatureFlagOverrideResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.RenderMarkdown",
                    "documentation": {
                      "identifier": "schemaResolver.RenderMarkdown",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.RenderMarkdown",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*schemaResolver) RenderMarkdown(args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*schemaResolver) RenderMarkdown(args *struct {\n\tMarkdown string\n\tOptions  *markdownOptions\n}) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.HighlightCode",
                    "documentation": {
                      "identifier": "schemaResolver.HighlightCode",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.HighlightCode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*schemaResolver) HighlightCode(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*schemaResolver) HighlightCode(ctx context.Context, args *struct {\n\tCode           string\n\tFuzzyLanguage  string\n\tDisableTimeout bool\n\tIsLightTheme   bool\n}) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.gitCommitByID",
                    "documentation": {
                      "identifier": "schemaResolver.gitCommitByID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.gitCommitByID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) gitCommitByID(ctx context.Context, id graphql.ID) (*GitCommitResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) gitCommitByID(ctx context.Context, id graphql.ID) (*GitCommitResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.gitRefByID",
                    "documentation": {
                      "identifier": "schemaResolver.gitRefByID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.gitRefByID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) gitRefByID(ctx context.Context, id graphql.ID) (*GitRefResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) gitRefByID(ctx context.Context, id graphql.ID) (*GitRefResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.Root",
                    "documentation": {
                      "identifier": "schemaResolver.Root",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.Root",
                      "tags": [
                        "deprecated"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) Root() *schemaResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) Root() *schemaResolver\n```\n\nDEPRECATED \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.Repository",
                    "documentation": {
                      "identifier": "schemaResolver.Repository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.Repository",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) Repository(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) Repository(ctx context.Context, args *struct {\n\tName     *string\n\tCloneURL *string\n\t// TODO(chris): Remove URI in favor of Name.\n\tURI *string\n}) (*RepositoryResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.repositoryByID",
                    "documentation": {
                      "identifier": "schemaResolver.repositoryByID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.repositoryByID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) repositoryByID(ctx context.Context, id graphql.ID) (*RepositoryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) repositoryByID(ctx context.Context, id graphql.ID) (*RepositoryResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.RepositoryRedirect",
                    "documentation": {
                      "identifier": "schemaResolver.RepositoryRedirect",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.RepositoryRedirect",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) RepositoryRedirect(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) RepositoryRedirect(ctx context.Context, args *struct {\n\tName     *string\n\tCloneURL *string\n}) (*repositoryRedirect, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.PhabricatorRepo",
                    "documentation": {
                      "identifier": "schemaResolver.PhabricatorRepo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.PhabricatorRepo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) PhabricatorRepo(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) PhabricatorRepo(ctx context.Context, args *struct {\n\tName *string\n\t// TODO(chris): Remove URI in favor of Name.\n\tURI *string\n}) (*phabricatorRepoResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.CurrentUser",
                    "documentation": {
                      "identifier": "schemaResolver.CurrentUser",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.CurrentUser",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) CurrentUser(ctx context.Context) (*UserResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) CurrentUser(ctx context.Context) (*UserResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.AffiliatedRepositories",
                    "documentation": {
                      "identifier": "schemaResolver.AffiliatedRepositories",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.AffiliatedRepositories",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) AffiliatedRepositories(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) AffiliatedRepositories(ctx context.Context, args *struct {\n\tUser     graphql.ID\n\tCodeHost *graphql.ID\n\tQuery    *string\n}) (*affiliatedRepositoriesConnection, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.CodeHostSyncDue",
                    "documentation": {
                      "identifier": "schemaResolver.CodeHostSyncDue",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.CodeHostSyncDue",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) CodeHostSyncDue(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) CodeHostSyncDue(ctx context.Context, args *struct {\n\tIDs     []graphql.ID\n\tSeconds int32\n}) (bool, error)\n```\n\nCodeHostSyncDue returns true if any of the supplied code hosts are due to sync now or within \"seconds\" from now. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.Namespace",
                    "documentation": {
                      "identifier": "schemaResolver.Namespace",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.Namespace",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) Namespace(ctx context.Context, args *struct{ ID graphql.ID }) (*NamespaceResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) Namespace(ctx context.Context, args *struct{ ID graphql.ID }) (*NamespaceResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.NamespaceByName",
                    "documentation": {
                      "identifier": "schemaResolver.NamespaceByName",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.NamespaceByName",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) NamespaceByName(ctx context.Context, args *struct{ Name string }) (*NamespaceResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) NamespaceByName(ctx context.Context, args *struct{ Name string }) (*NamespaceResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.Node",
                    "documentation": {
                      "identifier": "schemaResolver.Node",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.Node",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) Node(ctx context.Context, args *struct{ ID graphql.ID }) (*NodeResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) Node(ctx context.Context, args *struct{ ID graphql.ID }) (*NodeResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.nodeByID",
                    "documentation": {
                      "identifier": "schemaResolver.nodeByID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.nodeByID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) nodeByID(ctx context.Context, id graphql.ID) (Node, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) nodeByID(ctx context.Context, id graphql.ID) (Node, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.TriggerObservabilityTestAlert",
                    "documentation": {
                      "identifier": "schemaResolver.TriggerObservabilityTestAlert",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.TriggerObservabilityTestAlert",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) TriggerObservabilityTestAlert(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) TriggerObservabilityTestAlert(ctx context.Context, args *struct {\n\tLevel string\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.OutOfBandMigrationByID",
                    "documentation": {
                      "identifier": "schemaResolver.OutOfBandMigrationByID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.OutOfBandMigrationByID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) OutOfBandMigrationByID(ctx context.Context, id graphql.ID) (*outOfBandMigrationResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) OutOfBandMigrationByID(ctx context.Context, id graphql.ID) (*outOfBandMigrationResolver, error)\n```\n\nOutOfBandMigrationByID resolves a single out-of-band migration by its identifier. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.OutOfBandMigrations",
                    "documentation": {
                      "identifier": "schemaResolver.OutOfBandMigrations",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.OutOfBandMigrations",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) OutOfBandMigrations(ctx context.Context) ([]*outOfBandMigrationResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) OutOfBandMigrations(ctx context.Context) ([]*outOfBandMigrationResolver, error)\n```\n\nOutOfBandMigrations resolves all registered single out-of-band migrations. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.SetMigrationDirection",
                    "documentation": {
                      "identifier": "schemaResolver.SetMigrationDirection",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.SetMigrationDirection",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) SetMigrationDirection(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) SetMigrationDirection(ctx context.Context, args *struct {\n\tID           graphql.ID\n\tApplyReverse bool\n}) (*EmptyResponse, error)\n```\n\nSetMigrationDirection updates the ApplyReverse flag for an out-of-band migration by identifier. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.Organization",
                    "documentation": {
                      "identifier": "schemaResolver.Organization",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.Organization",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) Organization(ctx context.Context, args struct{ Name string }) (*OrgResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) Organization(ctx context.Context, args struct{ Name string }) (*OrgResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.Org",
                    "documentation": {
                      "identifier": "schemaResolver.Org",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.Org",
                      "tags": [
                        "deprecated"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) Org(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) Org(ctx context.Context, args *struct {\n\tID graphql.ID\n}) (*OrgResolver, error)\n```\n\nDeprecated: Org is only in use by sourcegraph/src. Use Node to look up an org by its graphql.ID instead. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.CreateOrganization",
                    "documentation": {
                      "identifier": "schemaResolver.CreateOrganization",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.CreateOrganization",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) CreateOrganization(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) CreateOrganization(ctx context.Context, args *struct {\n\tName        string\n\tDisplayName *string\n}) (*OrgResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.UpdateOrganization",
                    "documentation": {
                      "identifier": "schemaResolver.UpdateOrganization",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.UpdateOrganization",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) UpdateOrganization(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) UpdateOrganization(ctx context.Context, args *struct {\n\tID          graphql.ID\n\tDisplayName *string\n}) (*OrgResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.RemoveUserFromOrganization",
                    "documentation": {
                      "identifier": "schemaResolver.RemoveUserFromOrganization",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.RemoveUserFromOrganization",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) RemoveUserFromOrganization(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) RemoveUserFromOrganization(ctx context.Context, args *struct {\n\tUser         graphql.ID\n\tOrganization graphql.ID\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.AddUserToOrganization",
                    "documentation": {
                      "identifier": "schemaResolver.AddUserToOrganization",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.AddUserToOrganization",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) AddUserToOrganization(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) AddUserToOrganization(ctx context.Context, args *struct {\n\tOrganization graphql.ID\n\tUsername     string\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.InviteUserToOrganization",
                    "documentation": {
                      "identifier": "schemaResolver.InviteUserToOrganization",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.InviteUserToOrganization",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) InviteUserToOrganization(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) InviteUserToOrganization(ctx context.Context, args *struct {\n\tOrganization graphql.ID\n\tUsername     string\n}) (*inviteUserToOrganizationResult, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.RespondToOrganizationInvitation",
                    "documentation": {
                      "identifier": "schemaResolver.RespondToOrganizationInvitation",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.RespondToOrganizationInvitation",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) RespondToOrganizationInvitation(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) RespondToOrganizationInvitation(ctx context.Context, args *struct {\n\tOrganizationInvitation graphql.ID\n\tResponseType           string\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.ResendOrganizationInvitationNotification",
                    "documentation": {
                      "identifier": "schemaResolver.ResendOrganizationInvitationNotification",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.ResendOrganizationInvitationNotification",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) ResendOrganizationInvitationNotification(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) ResendOrganizationInvitationNotification(ctx context.Context, args *struct {\n\tOrganizationInvitation graphql.ID\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.RevokeOrganizationInvitation",
                    "documentation": {
                      "identifier": "schemaResolver.RevokeOrganizationInvitation",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.RevokeOrganizationInvitation",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) RevokeOrganizationInvitation(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) RevokeOrganizationInvitation(ctx context.Context, args *struct {\n\tOrganizationInvitation graphql.ID\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.Organizations",
                    "documentation": {
                      "identifier": "schemaResolver.Organizations",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.Organizations",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) Organizations(args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) Organizations(args *struct {\n\tgraphqlutil.ConnectionArgs\n\tQuery *string\n}) *orgConnectionResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.ParseSearchQuery",
                    "documentation": {
                      "identifier": "schemaResolver.ParseSearchQuery",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.ParseSearchQuery",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) ParseSearchQuery(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) ParseSearchQuery(ctx context.Context, args *struct {\n\tQuery       string\n\tPatternType string\n}) (*JSONValue, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.RepoGroups",
                    "documentation": {
                      "identifier": "schemaResolver.RepoGroups",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.RepoGroups",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) RepoGroups(ctx context.Context) ([]*repoGroup, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) RepoGroups(ctx context.Context) ([]*repoGroup, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.Repositories",
                    "documentation": {
                      "identifier": "schemaResolver.Repositories",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.Repositories",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) Repositories(args *repositoryArgs) (*repositoryConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) Repositories(args *repositoryArgs) (*repositoryConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.AddPhabricatorRepo",
                    "documentation": {
                      "identifier": "schemaResolver.AddPhabricatorRepo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.AddPhabricatorRepo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) AddPhabricatorRepo(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) AddPhabricatorRepo(ctx context.Context, args *struct {\n\tCallsign string\n\tName     *string\n\t// TODO(chris): Remove URI in favor of Name.\n\tURI *string\n\tURL string\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.ResolvePhabricatorDiff",
                    "documentation": {
                      "identifier": "schemaResolver.ResolvePhabricatorDiff",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.ResolvePhabricatorDiff",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) ResolvePhabricatorDiff(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) ResolvePhabricatorDiff(ctx context.Context, args *struct {\n\tRepoName    string\n\tDiffID      int32\n\tBaseRev     string\n\tPatch       *string\n\tAuthorName  *string\n\tAuthorEmail *string\n\tDescription *string\n\tDate        *string\n}) (*GitCommitResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.CheckMirrorRepositoryConnection",
                    "documentation": {
                      "identifier": "schemaResolver.CheckMirrorRepositoryConnection",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.CheckMirrorRepositoryConnection",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) CheckMirrorRepositoryConnection(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) CheckMirrorRepositoryConnection(ctx context.Context, args *struct {\n\tRepository *graphql.ID\n\tName       *string\n}) (*checkMirrorRepositoryConnectionResult, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.UpdateMirrorRepository",
                    "documentation": {
                      "identifier": "schemaResolver.UpdateMirrorRepository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.UpdateMirrorRepository",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) UpdateMirrorRepository(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) UpdateMirrorRepository(ctx context.Context, args *struct {\n\tRepository graphql.ID\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.RepositoryStats",
                    "documentation": {
                      "identifier": "schemaResolver.RepositoryStats",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.RepositoryStats",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) RepositoryStats(ctx context.Context) (*repositoryStatsResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) RepositoryStats(ctx context.Context) (*repositoryStatsResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.savedSearchByID",
                    "documentation": {
                      "identifier": "schemaResolver.savedSearchByID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.savedSearchByID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) savedSearchByID(ctx context.Context, id graphql.ID) (*savedSearchResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) savedSearchByID(ctx context.Context, id graphql.ID) (*savedSearchResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.toSavedSearchResolver",
                    "documentation": {
                      "identifier": "schemaResolver.toSavedSearchResolver",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.toSavedSearchResolver",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) toSavedSearchResolver(entry types.SavedSearch) *savedSearchResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) toSavedSearchResolver(entry types.SavedSearch) *savedSearchResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.SavedSearches",
                    "documentation": {
                      "identifier": "schemaResolver.SavedSearches",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.SavedSearches",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) SavedSearches(ctx context.Context) ([]*savedSearchResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) SavedSearches(ctx context.Context) ([]*savedSearchResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.SendSavedSearchTestNotification",
                    "documentation": {
                      "identifier": "schemaResolver.SendSavedSearchTestNotification",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.SendSavedSearchTestNotification",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) SendSavedSearchTestNotification(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) SendSavedSearchTestNotification(ctx context.Context, args *struct {\n\tID graphql.ID\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.CreateSavedSearch",
                    "documentation": {
                      "identifier": "schemaResolver.CreateSavedSearch",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.CreateSavedSearch",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) CreateSavedSearch(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) CreateSavedSearch(ctx context.Context, args *struct {\n\tDescription string\n\tQuery       string\n\tNotifyOwner bool\n\tNotifySlack bool\n\tOrgID       *graphql.ID\n\tUserID      *graphql.ID\n}) (*savedSearchResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.UpdateSavedSearch",
                    "documentation": {
                      "identifier": "schemaResolver.UpdateSavedSearch",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.UpdateSavedSearch",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) UpdateSavedSearch(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) UpdateSavedSearch(ctx context.Context, args *struct {\n\tID          graphql.ID\n\tDescription string\n\tQuery       string\n\tNotifyOwner bool\n\tNotifySlack bool\n\tOrgID       *graphql.ID\n\tUserID      *graphql.ID\n}) (*savedSearchResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.DeleteSavedSearch",
                    "documentation": {
                      "identifier": "schemaResolver.DeleteSavedSearch",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.DeleteSavedSearch",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) DeleteSavedSearch(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) DeleteSavedSearch(ctx context.Context, args *struct {\n\tID graphql.ID\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.Search",
                    "documentation": {
                      "identifier": "schemaResolver.Search",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.Search",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) Search(ctx context.Context, args *SearchArgs) (SearchImplementer, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) Search(ctx context.Context, args *SearchArgs) (SearchImplementer, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.AutoDefinedSearchContexts",
                    "documentation": {
                      "identifier": "schemaResolver.AutoDefinedSearchContexts",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.AutoDefinedSearchContexts",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) AutoDefinedSearchContexts(ctx context.Context) ([]*searchContextResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) AutoDefinedSearchContexts(ctx context.Context) ([]*searchContextResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.CreateSearchContext",
                    "documentation": {
                      "identifier": "schemaResolver.CreateSearchContext",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.CreateSearchContext",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) CreateSearchContext(ctx context.Context, args createSearchContextArgs) (*searchContextResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) CreateSearchContext(ctx context.Context, args createSearchContextArgs) (*searchContextResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.UpdateSearchContext",
                    "documentation": {
                      "identifier": "schemaResolver.UpdateSearchContext",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.UpdateSearchContext",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) UpdateSearchContext(ctx context.Context, args updateSearchContextArgs) (*searchContextResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) UpdateSearchContext(ctx context.Context, args updateSearchContextArgs) (*searchContextResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.repositoryRevisionsFromInputArgs",
                    "documentation": {
                      "identifier": "schemaResolver.repositoryRevisionsFromInputArgs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.repositoryRevisionsFromInputArgs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) repositoryRevisionsFromInputArgs(ctx context.Context, args []searchContextRepositoryRevisionsInputArgs) ([]*types.SearchContextRepositoryRevisions, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) repositoryRevisionsFromInputArgs(ctx context.Context, args []searchContextRepositoryRevisionsInputArgs) ([]*types.SearchContextRepositoryRevisions, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.DeleteSearchContext",
                    "documentation": {
                      "identifier": "schemaResolver.DeleteSearchContext",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.DeleteSearchContext",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) DeleteSearchContext(ctx context.Context, args struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) DeleteSearchContext(ctx context.Context, args struct {\n\tID graphql.ID\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.SearchContexts",
                    "documentation": {
                      "identifier": "schemaResolver.SearchContexts",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.SearchContexts",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) SearchContexts(ctx context.Context, args *listSearchContextsArgs) (*searchContextConnection, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) SearchContexts(ctx context.Context, args *listSearchContextsArgs) (*searchContextConnection, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.IsSearchContextAvailable",
                    "documentation": {
                      "identifier": "schemaResolver.IsSearchContextAvailable",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.IsSearchContextAvailable",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) IsSearchContextAvailable(ctx context.Context, args struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) IsSearchContextAvailable(ctx context.Context, args struct {\n\tSpec string\n}) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.ConvertVersionContextToSearchContext",
                    "documentation": {
                      "identifier": "schemaResolver.ConvertVersionContextToSearchContext",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.ConvertVersionContextToSearchContext",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) ConvertVersionContextToSearchContext(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) ConvertVersionContextToSearchContext(ctx context.Context, args *struct {\n\tName string\n}) (*searchContextResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.SearchContextByID",
                    "documentation": {
                      "identifier": "schemaResolver.SearchContextByID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.SearchContextByID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) SearchContextByID(ctx context.Context, id graphql.ID) (*searchContextResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) SearchContextByID(ctx context.Context, id graphql.ID) (*searchContextResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.SearchFilterSuggestions",
                    "documentation": {
                      "identifier": "schemaResolver.SearchFilterSuggestions",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.SearchFilterSuggestions",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) SearchFilterSuggestions(ctx context.Context) (*searchFilterSuggestions, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) SearchFilterSuggestions(ctx context.Context) (*searchFilterSuggestions, error)\n```\n\nSearchFilterSuggestions provides search filter and default value suggestions. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.SetExternalServiceRepos",
                    "documentation": {
                      "identifier": "schemaResolver.SetExternalServiceRepos",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.SetExternalServiceRepos",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) SetExternalServiceRepos(ctx context.Context, args struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) SetExternalServiceRepos(ctx context.Context, args struct {\n\tID       graphql.ID\n\tRepos    *[]string\n\tAllRepos bool\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.SetUserPublicRepos",
                    "documentation": {
                      "identifier": "schemaResolver.SetUserPublicRepos",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.SetUserPublicRepos",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) SetUserPublicRepos(ctx context.Context, args struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) SetUserPublicRepos(ctx context.Context, args struct {\n\tUserID   graphql.ID\n\tRepoURIs []string\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.ViewerSettings",
                    "documentation": {
                      "identifier": "schemaResolver.ViewerSettings",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.ViewerSettings",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r schemaResolver) ViewerSettings(ctx context.Context) (*settingsCascade, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r schemaResolver) ViewerSettings(ctx context.Context) (*settingsCascade, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.ViewerConfiguration",
                    "documentation": {
                      "identifier": "schemaResolver.ViewerConfiguration",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.ViewerConfiguration",
                      "tags": [
                        "deprecated"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) ViewerConfiguration(ctx context.Context) (*settingsCascade, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) ViewerConfiguration(ctx context.Context) (*settingsCascade, error)\n```\n\nDeprecated: in the GraphQL API \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.SettingsMutation",
                    "documentation": {
                      "identifier": "schemaResolver.SettingsMutation",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.SettingsMutation",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) SettingsMutation(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) SettingsMutation(ctx context.Context, args *struct {\n\tInput *settingsMutationGroupInput\n}) (*settingsMutation, error)\n```\n\nSettingsMutation defines the Mutation.settingsMutation field. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.ConfigurationMutation",
                    "documentation": {
                      "identifier": "schemaResolver.ConfigurationMutation",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.ConfigurationMutation",
                      "tags": [
                        "deprecated"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) ConfigurationMutation(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) ConfigurationMutation(ctx context.Context, args *struct {\n\tInput *settingsMutationGroupInput\n}) (*settingsMutation, error)\n```\n\nDeprecated: in the GraphQL API \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.SettingsSubject",
                    "documentation": {
                      "identifier": "schemaResolver.SettingsSubject",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.SettingsSubject",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) SettingsSubject(ctx context.Context, args *struct{ ID graphql.ID }) (*settingsSubject, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) SettingsSubject(ctx context.Context, args *struct{ ID graphql.ID }) (*settingsSubject, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.siteByGQLID",
                    "documentation": {
                      "identifier": "schemaResolver.siteByGQLID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.siteByGQLID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) siteByGQLID(ctx context.Context, id graphql.ID) (Node, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) siteByGQLID(ctx context.Context, id graphql.ID) (Node, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.Site",
                    "documentation": {
                      "identifier": "schemaResolver.Site",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.Site",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) Site() *siteResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) Site() *siteResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.UpdateSiteConfiguration",
                    "documentation": {
                      "identifier": "schemaResolver.UpdateSiteConfiguration",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.UpdateSiteConfiguration",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) UpdateSiteConfiguration(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) UpdateSiteConfiguration(ctx context.Context, args *struct {\n\tLastID int32\n\tInput  string\n}) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.DeleteUser",
                    "documentation": {
                      "identifier": "schemaResolver.DeleteUser",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.DeleteUser",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) DeleteUser(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) DeleteUser(ctx context.Context, args *struct {\n\tUser graphql.ID\n\tHard *bool\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.DeleteOrganization",
                    "documentation": {
                      "identifier": "schemaResolver.DeleteOrganization",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.DeleteOrganization",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) DeleteOrganization(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) DeleteOrganization(ctx context.Context, args *struct {\n\tOrganization graphql.ID\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.SetUserIsSiteAdmin",
                    "documentation": {
                      "identifier": "schemaResolver.SetUserIsSiteAdmin",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.SetUserIsSiteAdmin",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) SetUserIsSiteAdmin(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) SetUserIsSiteAdmin(ctx context.Context, args *struct {\n\tUserID    graphql.ID\n\tSiteAdmin bool\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.InvalidateSessionsByID",
                    "documentation": {
                      "identifier": "schemaResolver.InvalidateSessionsByID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.InvalidateSessionsByID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) InvalidateSessionsByID(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) InvalidateSessionsByID(ctx context.Context, args *struct {\n\tUserID graphql.ID\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.ReloadSite",
                    "documentation": {
                      "identifier": "schemaResolver.ReloadSite",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.ReloadSite",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) ReloadSite(ctx context.Context) (*EmptyResponse, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) ReloadSite(ctx context.Context) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.StatusMessages",
                    "documentation": {
                      "identifier": "schemaResolver.StatusMessages",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.StatusMessages",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) StatusMessages(ctx context.Context) ([]*statusMessageResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) StatusMessages(ctx context.Context) ([]*statusMessageResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.SubmitSurvey",
                    "documentation": {
                      "identifier": "schemaResolver.SubmitSurvey",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.SubmitSurvey",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) SubmitSurvey(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) SubmitSurvey(ctx context.Context, args *struct {\n\tInput *SurveySubmissionInput\n}) (*EmptyResponse, error)\n```\n\nSubmitSurvey records a new satisfaction (NPS) survey response by the current user. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.SubmitHappinessFeedback",
                    "documentation": {
                      "identifier": "schemaResolver.SubmitHappinessFeedback",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.SubmitHappinessFeedback",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) SubmitHappinessFeedback(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) SubmitHappinessFeedback(ctx context.Context, args *struct {\n\tInput *HappinessFeedbackSubmissionInput\n}) (*EmptyResponse, error)\n```\n\nSubmitHappinessFeedback records a new happiness feedback response by the current user. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.SurveyResponses",
                    "documentation": {
                      "identifier": "schemaResolver.SurveyResponses",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.SurveyResponses",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) SurveyResponses(args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) SurveyResponses(args *struct {\n\tgraphqlutil.ConnectionArgs\n}) *surveyResponseConnectionResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.SetTag",
                    "documentation": {
                      "identifier": "schemaResolver.SetTag",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.SetTag",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) SetTag(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) SetTag(ctx context.Context, args *struct {\n\tNode    graphql.ID\n\tTag     string\n\tPresent bool\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.RequestTrial",
                    "documentation": {
                      "identifier": "schemaResolver.RequestTrial",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.RequestTrial",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) RequestTrial(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) RequestTrial(ctx context.Context, args *struct {\n\tEmail string\n}) (*EmptyResponse, error)\n```\n\nRequestTrial makes a submission to the request trial form. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.User",
                    "documentation": {
                      "identifier": "schemaResolver.User",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.User",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) User(ctx context.Context, args struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) User(ctx context.Context, args struct {\n\tUsername *string\n\tEmail    *string\n}) (*UserResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.UpdateUser",
                    "documentation": {
                      "identifier": "schemaResolver.UpdateUser",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.UpdateUser",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) UpdateUser(ctx context.Context, args *updateUserArgs) (*UserResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) UpdateUser(ctx context.Context, args *updateUserArgs) (*UserResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.UpdatePassword",
                    "documentation": {
                      "identifier": "schemaResolver.UpdatePassword",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.UpdatePassword",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) UpdatePassword(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) UpdatePassword(ctx context.Context, args *struct {\n\tOldPassword string\n\tNewPassword string\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.CreatePassword",
                    "documentation": {
                      "identifier": "schemaResolver.CreatePassword",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.CreatePassword",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) CreatePassword(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) CreatePassword(ctx context.Context, args *struct {\n\tNewPassword string\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.AddUserEmail",
                    "documentation": {
                      "identifier": "schemaResolver.AddUserEmail",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.AddUserEmail",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) AddUserEmail(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) AddUserEmail(ctx context.Context, args *struct {\n\tUser  graphql.ID\n\tEmail string\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.RemoveUserEmail",
                    "documentation": {
                      "identifier": "schemaResolver.RemoveUserEmail",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.RemoveUserEmail",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) RemoveUserEmail(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) RemoveUserEmail(ctx context.Context, args *struct {\n\tUser  graphql.ID\n\tEmail string\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.SetUserEmailPrimary",
                    "documentation": {
                      "identifier": "schemaResolver.SetUserEmailPrimary",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.SetUserEmailPrimary",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) SetUserEmailPrimary(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) SetUserEmailPrimary(ctx context.Context, args *struct {\n\tUser  graphql.ID\n\tEmail string\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.SetUserEmailVerified",
                    "documentation": {
                      "identifier": "schemaResolver.SetUserEmailVerified",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.SetUserEmailVerified",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) SetUserEmailVerified(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) SetUserEmailVerified(ctx context.Context, args *struct {\n\tUser     graphql.ID\n\tEmail    string\n\tVerified bool\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.ResendVerificationEmail",
                    "documentation": {
                      "identifier": "schemaResolver.ResendVerificationEmail",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.ResendVerificationEmail",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) ResendVerificationEmail(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) ResendVerificationEmail(ctx context.Context, args *struct {\n\tUser  graphql.ID\n\tEmail string\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.LogUserEvent",
                    "documentation": {
                      "identifier": "schemaResolver.LogUserEvent",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.LogUserEvent",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*schemaResolver) LogUserEvent(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*schemaResolver) LogUserEvent(ctx context.Context, args *struct {\n\tEvent        string\n\tUserCookieID string\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.LogEvent",
                    "documentation": {
                      "identifier": "schemaResolver.LogEvent",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.LogEvent",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) LogEvent(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) LogEvent(ctx context.Context, args *struct {\n\tEvent          string\n\tUserCookieID   string\n\tFirstSourceURL *string\n\tURL            string\n\tSource         string\n\tArgument       *string\n\tCohortID       *string\n}) (*EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.Users",
                    "documentation": {
                      "identifier": "schemaResolver.Users",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.Users",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) Users(args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) Users(args *struct {\n\tgraphqlutil.ConnectionArgs\n\tQuery        *string\n\tTag          *string\n\tActivePeriod *string\n}) *userConnectionResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.CreateUser",
                    "documentation": {
                      "identifier": "schemaResolver.CreateUser",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.CreateUser",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) CreateUser(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) CreateUser(ctx context.Context, args *struct {\n\tUsername string\n\tEmail    *string\n}) (*createUserResult, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.RandomizeUserPassword",
                    "documentation": {
                      "identifier": "schemaResolver.RandomizeUserPassword",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.RandomizeUserPassword",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) RandomizeUserPassword(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) RandomizeUserPassword(ctx context.Context, args *struct {\n\tUser graphql.ID\n}) (*randomizeUserPasswordResult, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#schemaResolver.VersionContexts",
                    "documentation": {
                      "identifier": "schemaResolver.VersionContexts",
                      "newPage": false,
                      "searchKey": "graphqlbackend.schemaResolver.VersionContexts",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *schemaResolver) VersionContexts(ctx context.Context) ([]*versionContextResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *schemaResolver) VersionContexts(ctx context.Context) ([]*versionContextResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RedirectResolver",
              "documentation": {
                "identifier": "RedirectResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.RedirectResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RedirectResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RedirectResolver struct {\n\turl string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RedirectResolver.URL",
                    "documentation": {
                      "identifier": "RedirectResolver.URL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RedirectResolver.URL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RedirectResolver) URL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RedirectResolver) URL() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repositoryRedirect",
              "documentation": {
                "identifier": "repositoryRedirect",
                "newPage": false,
                "searchKey": "graphqlbackend.repositoryRedirect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repositoryRedirect struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repositoryRedirect struct {\n\trepo     *RepositoryResolver\n\tredirect *RedirectResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryRedirect.ToRepository",
                    "documentation": {
                      "identifier": "repositoryRedirect.ToRepository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryRedirect.ToRepository",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryRedirect) ToRepository() (*RepositoryResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryRedirect) ToRepository() (*RepositoryResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryRedirect.ToRedirect",
                    "documentation": {
                      "identifier": "repositoryRedirect.ToRedirect",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryRedirect.ToRedirect",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryRedirect) ToRedirect() (*RedirectResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryRedirect) ToRedirect() (*RedirectResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#highlightedRangeResolver",
              "documentation": {
                "identifier": "highlightedRangeResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.highlightedRangeResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type highlightedRangeResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype highlightedRangeResolver struct {\n\tinner result.HighlightedRange\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#highlightedRangeResolver.Line",
                    "documentation": {
                      "identifier": "highlightedRangeResolver.Line",
                      "newPage": false,
                      "searchKey": "graphqlbackend.highlightedRangeResolver.Line",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h highlightedRangeResolver) Line() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h highlightedRangeResolver) Line() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#highlightedRangeResolver.Character",
                    "documentation": {
                      "identifier": "highlightedRangeResolver.Character",
                      "newPage": false,
                      "searchKey": "graphqlbackend.highlightedRangeResolver.Character",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h highlightedRangeResolver) Character() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h highlightedRangeResolver) Character() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#highlightedRangeResolver.Length",
                    "documentation": {
                      "identifier": "highlightedRangeResolver.Length",
                      "newPage": false,
                      "searchKey": "graphqlbackend.highlightedRangeResolver.Length",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h highlightedRangeResolver) Length() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h highlightedRangeResolver) Length() int32\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#highlightedStringResolver",
              "documentation": {
                "identifier": "highlightedStringResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.highlightedStringResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type highlightedStringResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype highlightedStringResolver struct {\n\tinner result.HighlightedString\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#highlightedStringResolver.Value",
                    "documentation": {
                      "identifier": "highlightedStringResolver.Value",
                      "newPage": false,
                      "searchKey": "graphqlbackend.highlightedStringResolver.Value",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *highlightedStringResolver) Value() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *highlightedStringResolver) Value() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#highlightedStringResolver.Highlights",
                    "documentation": {
                      "identifier": "highlightedStringResolver.Highlights",
                      "newPage": false,
                      "searchKey": "graphqlbackend.highlightedStringResolver.Highlights",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *highlightedStringResolver) Highlights() []highlightedRangeResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *highlightedStringResolver) Highlights() []highlightedRangeResolver\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#HighlightArgs",
              "documentation": {
                "identifier": "HighlightArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.HighlightArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type HighlightArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype HighlightArgs struct {\n\tDisableTimeout     bool\n\tIsLightTheme       bool\n\tHighlightLongLines bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#highlightedFileResolver",
              "documentation": {
                "identifier": "highlightedFileResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.highlightedFileResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type highlightedFileResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype highlightedFileResolver struct {\n\taborted bool\n\thtml    template.HTML\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#highlightContent",
                    "documentation": {
                      "identifier": "highlightContent",
                      "newPage": false,
                      "searchKey": "graphqlbackend.highlightContent",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func highlightContent(ctx context.Context, args *HighlightArgs, content, path string, metadata highlight.Metadata) (*highlightedFileResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc highlightContent(ctx context.Context, args *HighlightArgs, content, path string, metadata highlight.Metadata) (*highlightedFileResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#highlightedFileResolver.Aborted",
                    "documentation": {
                      "identifier": "highlightedFileResolver.Aborted",
                      "newPage": false,
                      "searchKey": "graphqlbackend.highlightedFileResolver.Aborted",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *highlightedFileResolver) Aborted() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *highlightedFileResolver) Aborted() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#highlightedFileResolver.HTML",
                    "documentation": {
                      "identifier": "highlightedFileResolver.HTML",
                      "newPage": false,
                      "searchKey": "graphqlbackend.highlightedFileResolver.HTML",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *highlightedFileResolver) HTML() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *highlightedFileResolver) HTML() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#highlightedFileResolver.LineRanges",
                    "documentation": {
                      "identifier": "highlightedFileResolver.LineRanges",
                      "newPage": false,
                      "searchKey": "graphqlbackend.highlightedFileResolver.LineRanges",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *highlightedFileResolver) LineRanges(args *struct{ Ranges []highlight.LineRange }) ([][]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *highlightedFileResolver) LineRanges(args *struct{ Ranges []highlight.LineRange }) ([][]string, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#hunkResolver",
              "documentation": {
                "identifier": "hunkResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.hunkResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type hunkResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype hunkResolver struct {\n\tdb   dbutil.DB\n\trepo *RepositoryResolver\n\thunk *git.Hunk\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#hunkResolver.Author",
                    "documentation": {
                      "identifier": "hunkResolver.Author",
                      "newPage": false,
                      "searchKey": "graphqlbackend.hunkResolver.Author",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *hunkResolver) Author() signatureResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *hunkResolver) Author() signatureResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#hunkResolver.StartLine",
                    "documentation": {
                      "identifier": "hunkResolver.StartLine",
                      "newPage": false,
                      "searchKey": "graphqlbackend.hunkResolver.StartLine",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *hunkResolver) StartLine() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *hunkResolver) StartLine() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#hunkResolver.EndLine",
                    "documentation": {
                      "identifier": "hunkResolver.EndLine",
                      "newPage": false,
                      "searchKey": "graphqlbackend.hunkResolver.EndLine",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *hunkResolver) EndLine() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *hunkResolver) EndLine() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#hunkResolver.StartByte",
                    "documentation": {
                      "identifier": "hunkResolver.StartByte",
                      "newPage": false,
                      "searchKey": "graphqlbackend.hunkResolver.StartByte",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *hunkResolver) StartByte() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *hunkResolver) StartByte() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#hunkResolver.EndByte",
                    "documentation": {
                      "identifier": "hunkResolver.EndByte",
                      "newPage": false,
                      "searchKey": "graphqlbackend.hunkResolver.EndByte",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *hunkResolver) EndByte() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *hunkResolver) EndByte() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#hunkResolver.Rev",
                    "documentation": {
                      "identifier": "hunkResolver.Rev",
                      "newPage": false,
                      "searchKey": "graphqlbackend.hunkResolver.Rev",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *hunkResolver) Rev() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *hunkResolver) Rev() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#hunkResolver.Message",
                    "documentation": {
                      "identifier": "hunkResolver.Message",
                      "newPage": false,
                      "searchKey": "graphqlbackend.hunkResolver.Message",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *hunkResolver) Message() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *hunkResolver) Message() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#hunkResolver.Commit",
                    "documentation": {
                      "identifier": "hunkResolver.Commit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.hunkResolver.Commit",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *hunkResolver) Commit(ctx context.Context) (*GitCommitResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *hunkResolver) Commit(ctx context.Context) (*GitCommitResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#InsightsResolver",
              "documentation": {
                "identifier": "InsightsResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.InsightsResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InsightsResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InsightsResolver interface {\n\tInsights(ctx context.Context) (InsightConnectionResolver, error)\n}\n```\n\nInsightsResolver is the root resolver. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#InsightsDataPointResolver",
              "documentation": {
                "identifier": "InsightsDataPointResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.InsightsDataPointResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InsightsDataPointResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InsightsDataPointResolver interface {\n\tDateTime() DateTime\n\tValue() float64\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#InsightStatusResolver",
              "documentation": {
                "identifier": "InsightStatusResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.InsightStatusResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InsightStatusResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InsightStatusResolver interface {\n\tTotalPoints() int32\n\tPendingJobs() int32\n\tCompletedJobs() int32\n\tFailedJobs() int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#InsightsPointsArgs",
              "documentation": {
                "identifier": "InsightsPointsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.InsightsPointsArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InsightsPointsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InsightsPointsArgs struct {\n\tFrom *DateTime\n\tTo   *DateTime\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#InsightSeriesResolver",
              "documentation": {
                "identifier": "InsightSeriesResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.InsightSeriesResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InsightSeriesResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InsightSeriesResolver interface {\n\tLabel() string\n\tPoints(ctx context.Context, args *InsightsPointsArgs) ([]InsightsDataPointResolver, error)\n\tStatus(ctx context.Context) (InsightStatusResolver, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#InsightResolver",
              "documentation": {
                "identifier": "InsightResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.InsightResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InsightResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InsightResolver interface {\n\tTitle() string\n\tDescription() string\n\tSeries() []InsightSeriesResolver\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#InsightConnectionResolver",
              "documentation": {
                "identifier": "InsightConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.InsightConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InsightConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InsightConnectionResolver interface {\n\tNodes(ctx context.Context) ([]InsightResolver, error)\n\tTotalCount(ctx context.Context) (int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#JSONValue",
              "documentation": {
                "identifier": "JSONValue",
                "newPage": false,
                "searchKey": "graphqlbackend.JSONValue",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type JSONValue struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype JSONValue struct{ Value interface{} }\n```\n\nJSONValue implements the JSONValue scalar type. In GraphQL queries, it is represented the JSON representation of its Go value. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#JSONValue.ImplementsGraphQLType",
                    "documentation": {
                      "identifier": "JSONValue.ImplementsGraphQLType",
                      "newPage": false,
                      "searchKey": "graphqlbackend.JSONValue.ImplementsGraphQLType",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (JSONValue) ImplementsGraphQLType(name string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (JSONValue) ImplementsGraphQLType(name string) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#JSONValue.UnmarshalGraphQL",
                    "documentation": {
                      "identifier": "JSONValue.UnmarshalGraphQL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.JSONValue.UnmarshalGraphQL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *JSONValue) UnmarshalGraphQL(input interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *JSONValue) UnmarshalGraphQL(input interface{}) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#JSONValue.MarshalJSON",
                    "documentation": {
                      "identifier": "JSONValue.MarshalJSON",
                      "newPage": false,
                      "searchKey": "graphqlbackend.JSONValue.MarshalJSON",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v JSONValue) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v JSONValue) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#JSONValue.UnmarshalJSON",
                    "documentation": {
                      "identifier": "JSONValue.UnmarshalJSON",
                      "newPage": false,
                      "searchKey": "graphqlbackend.JSONValue.UnmarshalJSON",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *JSONValue) UnmarshalJSON(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *JSONValue) UnmarshalJSON(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#JSONCString",
              "documentation": {
                "identifier": "JSONCString",
                "newPage": false,
                "searchKey": "graphqlbackend.JSONCString",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type JSONCString string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype JSONCString string\n```\n\nJSONCString implements the JSONCString scalar type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#JSONCString.ImplementsGraphQLType",
                    "documentation": {
                      "identifier": "JSONCString.ImplementsGraphQLType",
                      "newPage": false,
                      "searchKey": "graphqlbackend.JSONCString.ImplementsGraphQLType",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (JSONCString) ImplementsGraphQLType(name string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (JSONCString) ImplementsGraphQLType(name string) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#JSONCString.UnmarshalGraphQL",
                    "documentation": {
                      "identifier": "JSONCString.UnmarshalGraphQL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.JSONCString.UnmarshalGraphQL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *JSONCString) UnmarshalGraphQL(input interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *JSONCString) UnmarshalGraphQL(input interface{}) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#JSONCString.MarshalJSON",
                    "documentation": {
                      "identifier": "JSONCString.MarshalJSON",
                      "newPage": false,
                      "searchKey": "graphqlbackend.JSONCString.MarshalJSON",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j JSONCString) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j JSONCString) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#languageStatisticsResolver",
              "documentation": {
                "identifier": "languageStatisticsResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.languageStatisticsResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type languageStatisticsResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype languageStatisticsResolver struct {\n\tl inventory.Lang\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#languageStatisticsResolver.Name",
                    "documentation": {
                      "identifier": "languageStatisticsResolver.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.languageStatisticsResolver.Name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *languageStatisticsResolver) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *languageStatisticsResolver) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#languageStatisticsResolver.TotalBytes",
                    "documentation": {
                      "identifier": "languageStatisticsResolver.TotalBytes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.languageStatisticsResolver.TotalBytes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *languageStatisticsResolver) TotalBytes() float64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *languageStatisticsResolver) TotalBytes() float64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#languageStatisticsResolver.TotalLines",
                    "documentation": {
                      "identifier": "languageStatisticsResolver.TotalLines",
                      "newPage": false,
                      "searchKey": "graphqlbackend.languageStatisticsResolver.TotalLines",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *languageStatisticsResolver) TotalLines() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *languageStatisticsResolver) TotalLines() int32\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LicenseResolver",
              "documentation": {
                "identifier": "LicenseResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.LicenseResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LicenseResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LicenseResolver interface {\n\tEnterpriseLicenseHasFeature(ctx context.Context, args *EnterpriseLicenseHasFeatureArgs) (bool, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#EnterpriseLicenseHasFeatureArgs",
              "documentation": {
                "identifier": "EnterpriseLicenseHasFeatureArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.EnterpriseLicenseHasFeatureArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnterpriseLicenseHasFeatureArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnterpriseLicenseHasFeatureArgs struct {\n\tFeature string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LocationResolver",
              "documentation": {
                "identifier": "LocationResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.LocationResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LocationResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LocationResolver interface {\n\tResource() *GitTreeEntryResolver\n\tRange() *rangeResolver\n\tURL(ctx context.Context) (string, error)\n\tCanonicalURL() string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewLocationResolver",
                    "documentation": {
                      "identifier": "NewLocationResolver",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewLocationResolver",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewLocationResolver(resource *GitTreeEntryResolver, lspRange *lsp.Range) LocationResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewLocationResolver(resource *GitTreeEntryResolver, lspRange *lsp.Range) LocationResolver\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#locationResolver",
              "documentation": {
                "identifier": "locationResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.locationResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type locationResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype locationResolver struct {\n\tresource *GitTreeEntryResolver\n\tlspRange *lsp.Range\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#locationResolver.Resource",
                    "documentation": {
                      "identifier": "locationResolver.Resource",
                      "newPage": false,
                      "searchKey": "graphqlbackend.locationResolver.Resource",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *locationResolver) Resource() *GitTreeEntryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *locationResolver) Resource() *GitTreeEntryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#locationResolver.Range",
                    "documentation": {
                      "identifier": "locationResolver.Range",
                      "newPage": false,
                      "searchKey": "graphqlbackend.locationResolver.Range",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *locationResolver) Range() *rangeResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *locationResolver) Range() *rangeResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#locationResolver.URL",
                    "documentation": {
                      "identifier": "locationResolver.URL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.locationResolver.URL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *locationResolver) URL(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *locationResolver) URL(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#locationResolver.CanonicalURL",
                    "documentation": {
                      "identifier": "locationResolver.CanonicalURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.locationResolver.CanonicalURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *locationResolver) CanonicalURL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *locationResolver) CanonicalURL() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#locationResolver.urlPath",
                    "documentation": {
                      "identifier": "locationResolver.urlPath",
                      "newPage": false,
                      "searchKey": "graphqlbackend.locationResolver.urlPath",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *locationResolver) urlPath(prefix string) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *locationResolver) urlPath(prefix string) string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RangeResolver",
              "documentation": {
                "identifier": "RangeResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.RangeResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RangeResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RangeResolver interface {\n\tStart() PositionResolver\n\tEnd() PositionResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewRangeResolver",
                    "documentation": {
                      "identifier": "NewRangeResolver",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewRangeResolver",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewRangeResolver(lspRange lsp.Range) RangeResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewRangeResolver(lspRange lsp.Range) RangeResolver\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#rangeResolver",
              "documentation": {
                "identifier": "rangeResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.rangeResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type rangeResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype rangeResolver struct{ lspRange lsp.Range }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#rangeResolver.Start",
                    "documentation": {
                      "identifier": "rangeResolver.Start",
                      "newPage": false,
                      "searchKey": "graphqlbackend.rangeResolver.Start",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *rangeResolver) Start() PositionResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *rangeResolver) Start() PositionResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#rangeResolver.End",
                    "documentation": {
                      "identifier": "rangeResolver.End",
                      "newPage": false,
                      "searchKey": "graphqlbackend.rangeResolver.End",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *rangeResolver) End() PositionResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *rangeResolver) End() PositionResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#rangeResolver.start",
                    "documentation": {
                      "identifier": "rangeResolver.start",
                      "newPage": false,
                      "searchKey": "graphqlbackend.rangeResolver.start",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *rangeResolver) start() *positionResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *rangeResolver) start() *positionResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#rangeResolver.end",
                    "documentation": {
                      "identifier": "rangeResolver.end",
                      "newPage": false,
                      "searchKey": "graphqlbackend.rangeResolver.end",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *rangeResolver) end() *positionResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *rangeResolver) end() *positionResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#rangeResolver.urlFragment",
                    "documentation": {
                      "identifier": "rangeResolver.urlFragment",
                      "newPage": false,
                      "searchKey": "graphqlbackend.rangeResolver.urlFragment",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *rangeResolver) urlFragment() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *rangeResolver) urlFragment() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#PositionResolver",
              "documentation": {
                "identifier": "PositionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.PositionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PositionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PositionResolver interface {\n\tLine() int32\n\tCharacter() int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#positionResolver",
              "documentation": {
                "identifier": "positionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.positionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type positionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype positionResolver struct{ pos lsp.Position }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#positionResolver.Line",
                    "documentation": {
                      "identifier": "positionResolver.Line",
                      "newPage": false,
                      "searchKey": "graphqlbackend.positionResolver.Line",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *positionResolver) Line() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *positionResolver) Line() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#positionResolver.Character",
                    "documentation": {
                      "identifier": "positionResolver.Character",
                      "newPage": false,
                      "searchKey": "graphqlbackend.positionResolver.Character",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *positionResolver) Character() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *positionResolver) Character() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#positionResolver.urlFragment",
                    "documentation": {
                      "identifier": "positionResolver.urlFragment",
                      "newPage": false,
                      "searchKey": "graphqlbackend.positionResolver.urlFragment",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *positionResolver) urlFragment(forceIncludeCharacter bool) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *positionResolver) urlFragment(forceIncludeCharacter bool) string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#Markdown",
              "documentation": {
                "identifier": "Markdown",
                "newPage": false,
                "searchKey": "graphqlbackend.Markdown",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Markdown string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Markdown string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#Markdown.Text",
                    "documentation": {
                      "identifier": "Markdown.Text",
                      "newPage": false,
                      "searchKey": "graphqlbackend.Markdown.Text",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m Markdown) Text() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m Markdown) Text() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#Markdown.HTML",
                    "documentation": {
                      "identifier": "Markdown.HTML",
                      "newPage": false,
                      "searchKey": "graphqlbackend.Markdown.HTML",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m Markdown) HTML() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m Markdown) HTML() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#Namespace",
              "documentation": {
                "identifier": "Namespace",
                "newPage": false,
                "searchKey": "graphqlbackend.Namespace",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Namespace interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Namespace interface {\n\tID() graphql.ID\n\tURL() string\n\tNamespaceName() string\n}\n```\n\nNamespace is the interface for the GraphQL Namespace interface. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NamespaceByID",
                    "documentation": {
                      "identifier": "NamespaceByID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NamespaceByID",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NamespaceByID(ctx context.Context, db dbutil.DB, id graphql.ID) (Namespace, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NamespaceByID(ctx context.Context, db dbutil.DB, id graphql.ID) (Namespace, error)\n```\n\nNamespaceByID looks up a GraphQL value of type Namespace by ID. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#InvalidNamespaceIDErr",
              "documentation": {
                "identifier": "InvalidNamespaceIDErr",
                "newPage": false,
                "searchKey": "graphqlbackend.InvalidNamespaceIDErr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InvalidNamespaceIDErr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InvalidNamespaceIDErr struct {\n\tid graphql.ID\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#InvalidNamespaceIDErr.Error",
                    "documentation": {
                      "identifier": "InvalidNamespaceIDErr.Error",
                      "newPage": false,
                      "searchKey": "graphqlbackend.InvalidNamespaceIDErr.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e InvalidNamespaceIDErr) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e InvalidNamespaceIDErr) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#NamespaceResolver",
              "documentation": {
                "identifier": "NamespaceResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.NamespaceResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NamespaceResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NamespaceResolver struct {\n\tNamespace\n}\n```\n\nNamespaceResolver resolves the GraphQL Namespace interface to a type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NamespaceResolver.ToOrg",
                    "documentation": {
                      "identifier": "NamespaceResolver.ToOrg",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NamespaceResolver.ToOrg",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r NamespaceResolver) ToOrg() (*OrgResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r NamespaceResolver) ToOrg() (*OrgResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NamespaceResolver.ToUser",
                    "documentation": {
                      "identifier": "NamespaceResolver.ToUser",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NamespaceResolver.ToUser",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r NamespaceResolver) ToUser() (*UserResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r NamespaceResolver) ToUser() (*UserResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#Node",
              "documentation": {
                "identifier": "Node",
                "newPage": false,
                "searchKey": "graphqlbackend.Node",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Node interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Node interface {\n\tID() graphql.ID\n}\n```\n\nNode must be implemented by any resolver that implements the Node interface in GraphQL. When defining a new type implementing Node, the NodeResolver below needs a ToXX type assertion method, and the node resolver needs to be registered in the nodeByIDFns on the schemaResolver. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#NodeByIDFunc",
              "documentation": {
                "identifier": "NodeByIDFunc",
                "newPage": false,
                "searchKey": "graphqlbackend.NodeByIDFunc",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NodeByIDFunc func(ctx context.Context, id github.com/graph-gophers/graphql-go.ID) (github.com/sourcegraph/sourcegraph/cmd/frontend/graphqlbackend.Node, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NodeByIDFunc = func(ctx context.Context, id graphql.ID) (Node, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#NodeResolver",
              "documentation": {
                "identifier": "NodeResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.NodeResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NodeResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NodeResolver struct {\n\tNode\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToAccessToken",
                    "documentation": {
                      "identifier": "NodeResolver.ToAccessToken",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToAccessToken",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToAccessToken() (*accessTokenResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToAccessToken() (*accessTokenResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToMonitor",
                    "documentation": {
                      "identifier": "NodeResolver.ToMonitor",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToMonitor",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToMonitor() (MonitorResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToMonitor() (MonitorResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToMonitorQuery",
                    "documentation": {
                      "identifier": "NodeResolver.ToMonitorQuery",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToMonitorQuery",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToMonitorQuery() (MonitorQueryResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToMonitorQuery() (MonitorQueryResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToMonitorEmail",
                    "documentation": {
                      "identifier": "NodeResolver.ToMonitorEmail",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToMonitorEmail",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToMonitorEmail() (MonitorEmailResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToMonitorEmail() (MonitorEmailResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToMonitorActionEvent",
                    "documentation": {
                      "identifier": "NodeResolver.ToMonitorActionEvent",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToMonitorActionEvent",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToMonitorActionEvent() (MonitorActionEventResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToMonitorActionEvent() (MonitorActionEventResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToMonitorTriggerEvent",
                    "documentation": {
                      "identifier": "NodeResolver.ToMonitorTriggerEvent",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToMonitorTriggerEvent",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToMonitorTriggerEvent() (MonitorTriggerEventResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToMonitorTriggerEvent() (MonitorTriggerEventResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToCampaign",
                    "documentation": {
                      "identifier": "NodeResolver.ToCampaign",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToCampaign",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToCampaign() (BatchChangeResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToCampaign() (BatchChangeResolver, bool)\n```\n\nTODO(campaigns-deprecation): This should be removed once we remove campaigns completely \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToCampaignSpec",
                    "documentation": {
                      "identifier": "NodeResolver.ToCampaignSpec",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToCampaignSpec",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToCampaignSpec() (BatchSpecResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToCampaignSpec() (BatchSpecResolver, bool)\n```\n\nTODO(campaigns-deprecation): This should be removed once we remove campaigns completely \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToBatchChange",
                    "documentation": {
                      "identifier": "NodeResolver.ToBatchChange",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToBatchChange",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToBatchChange() (BatchChangeResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToBatchChange() (BatchChangeResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToBatchSpec",
                    "documentation": {
                      "identifier": "NodeResolver.ToBatchSpec",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToBatchSpec",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToBatchSpec() (BatchSpecResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToBatchSpec() (BatchSpecResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToExternalChangeset",
                    "documentation": {
                      "identifier": "NodeResolver.ToExternalChangeset",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToExternalChangeset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToExternalChangeset() (ExternalChangesetResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToExternalChangeset() (ExternalChangesetResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToHiddenExternalChangeset",
                    "documentation": {
                      "identifier": "NodeResolver.ToHiddenExternalChangeset",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToHiddenExternalChangeset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToHiddenExternalChangeset() (HiddenExternalChangesetResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToHiddenExternalChangeset() (HiddenExternalChangesetResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToChangesetEvent",
                    "documentation": {
                      "identifier": "NodeResolver.ToChangesetEvent",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToChangesetEvent",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToChangesetEvent() (ChangesetEventResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToChangesetEvent() (ChangesetEventResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToHiddenChangesetSpec",
                    "documentation": {
                      "identifier": "NodeResolver.ToHiddenChangesetSpec",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToHiddenChangesetSpec",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToHiddenChangesetSpec() (HiddenChangesetSpecResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToHiddenChangesetSpec() (HiddenChangesetSpecResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToVisibleChangesetSpec",
                    "documentation": {
                      "identifier": "NodeResolver.ToVisibleChangesetSpec",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToVisibleChangesetSpec",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToVisibleChangesetSpec() (VisibleChangesetSpecResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToVisibleChangesetSpec() (VisibleChangesetSpecResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToCampaignsCredential",
                    "documentation": {
                      "identifier": "NodeResolver.ToCampaignsCredential",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToCampaignsCredential",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToCampaignsCredential() (CampaignsCredentialResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToCampaignsCredential() (CampaignsCredentialResolver, bool)\n```\n\nTODO(campaigns-deprecation): This should be removed once we remove campaigns completely \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToBatchChangesCredential",
                    "documentation": {
                      "identifier": "NodeResolver.ToBatchChangesCredential",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToBatchChangesCredential",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToBatchChangesCredential() (BatchChangesCredentialResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToBatchChangesCredential() (BatchChangesCredentialResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToProductLicense",
                    "documentation": {
                      "identifier": "NodeResolver.ToProductLicense",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToProductLicense",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToProductLicense() (ProductLicense, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToProductLicense() (ProductLicense, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToProductSubscription",
                    "documentation": {
                      "identifier": "NodeResolver.ToProductSubscription",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToProductSubscription",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToProductSubscription() (ProductSubscription, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToProductSubscription() (ProductSubscription, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToExternalAccount",
                    "documentation": {
                      "identifier": "NodeResolver.ToExternalAccount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToExternalAccount",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToExternalAccount() (*externalAccountResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToExternalAccount() (*externalAccountResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToExternalService",
                    "documentation": {
                      "identifier": "NodeResolver.ToExternalService",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToExternalService",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToExternalService() (*externalServiceResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToExternalService() (*externalServiceResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToGitRef",
                    "documentation": {
                      "identifier": "NodeResolver.ToGitRef",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToGitRef",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToGitRef() (*GitRefResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToGitRef() (*GitRefResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToRepository",
                    "documentation": {
                      "identifier": "NodeResolver.ToRepository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToRepository",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToRepository() (*RepositoryResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToRepository() (*RepositoryResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToUser",
                    "documentation": {
                      "identifier": "NodeResolver.ToUser",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToUser",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToUser() (*UserResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToUser() (*UserResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToOrg",
                    "documentation": {
                      "identifier": "NodeResolver.ToOrg",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToOrg",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToOrg() (*OrgResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToOrg() (*OrgResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToOrganizationInvitation",
                    "documentation": {
                      "identifier": "NodeResolver.ToOrganizationInvitation",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToOrganizationInvitation",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToOrganizationInvitation() (*organizationInvitationResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToOrganizationInvitation() (*organizationInvitationResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToGitCommit",
                    "documentation": {
                      "identifier": "NodeResolver.ToGitCommit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToGitCommit",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToGitCommit() (*GitCommitResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToGitCommit() (*GitCommitResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToRegistryExtension",
                    "documentation": {
                      "identifier": "NodeResolver.ToRegistryExtension",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToRegistryExtension",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToRegistryExtension() (RegistryExtension, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToRegistryExtension() (RegistryExtension, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToSavedSearch",
                    "documentation": {
                      "identifier": "NodeResolver.ToSavedSearch",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToSavedSearch",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToSavedSearch() (*savedSearchResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToSavedSearch() (*savedSearchResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToSearchContext",
                    "documentation": {
                      "identifier": "NodeResolver.ToSearchContext",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToSearchContext",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToSearchContext() (*searchContextResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToSearchContext() (*searchContextResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToSite",
                    "documentation": {
                      "identifier": "NodeResolver.ToSite",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToSite",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToSite() (*siteResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToSite() (*siteResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToLSIFUpload",
                    "documentation": {
                      "identifier": "NodeResolver.ToLSIFUpload",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToLSIFUpload",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToLSIFUpload() (LSIFUploadResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToLSIFUpload() (LSIFUploadResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToLSIFIndex",
                    "documentation": {
                      "identifier": "NodeResolver.ToLSIFIndex",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToLSIFIndex",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToLSIFIndex() (LSIFIndexResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToLSIFIndex() (LSIFIndexResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToOutOfBandMigration",
                    "documentation": {
                      "identifier": "NodeResolver.ToOutOfBandMigration",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToOutOfBandMigration",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToOutOfBandMigration() (*outOfBandMigrationResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToOutOfBandMigration() (*outOfBandMigrationResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NodeResolver.ToBulkOperation",
                    "documentation": {
                      "identifier": "NodeResolver.ToBulkOperation",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NodeResolver.ToBulkOperation",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *NodeResolver) ToBulkOperation() (BulkOperationResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *NodeResolver) ToBulkOperation() (BulkOperationResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#outOfBandMigrationResolver",
              "documentation": {
                "identifier": "outOfBandMigrationResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.outOfBandMigrationResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type outOfBandMigrationResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype outOfBandMigrationResolver struct {\n\tm oobmigration.Migration\n}\n```\n\noutOfBandMigrationResolver implements the GraphQL type OutOfBandMigration. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#outOfBandMigrationResolver.ID",
                    "documentation": {
                      "identifier": "outOfBandMigrationResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.outOfBandMigrationResolver.ID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *outOfBandMigrationResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *outOfBandMigrationResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#outOfBandMigrationResolver.Team",
                    "documentation": {
                      "identifier": "outOfBandMigrationResolver.Team",
                      "newPage": false,
                      "searchKey": "graphqlbackend.outOfBandMigrationResolver.Team",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *outOfBandMigrationResolver) Team() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *outOfBandMigrationResolver) Team() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#outOfBandMigrationResolver.Component",
                    "documentation": {
                      "identifier": "outOfBandMigrationResolver.Component",
                      "newPage": false,
                      "searchKey": "graphqlbackend.outOfBandMigrationResolver.Component",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *outOfBandMigrationResolver) Component() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *outOfBandMigrationResolver) Component() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#outOfBandMigrationResolver.Description",
                    "documentation": {
                      "identifier": "outOfBandMigrationResolver.Description",
                      "newPage": false,
                      "searchKey": "graphqlbackend.outOfBandMigrationResolver.Description",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *outOfBandMigrationResolver) Description() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *outOfBandMigrationResolver) Description() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#outOfBandMigrationResolver.Introduced",
                    "documentation": {
                      "identifier": "outOfBandMigrationResolver.Introduced",
                      "newPage": false,
                      "searchKey": "graphqlbackend.outOfBandMigrationResolver.Introduced",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *outOfBandMigrationResolver) Introduced() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *outOfBandMigrationResolver) Introduced() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#outOfBandMigrationResolver.Deprecated",
                    "documentation": {
                      "identifier": "outOfBandMigrationResolver.Deprecated",
                      "newPage": false,
                      "searchKey": "graphqlbackend.outOfBandMigrationResolver.Deprecated",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *outOfBandMigrationResolver) Deprecated() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *outOfBandMigrationResolver) Deprecated() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#outOfBandMigrationResolver.Progress",
                    "documentation": {
                      "identifier": "outOfBandMigrationResolver.Progress",
                      "newPage": false,
                      "searchKey": "graphqlbackend.outOfBandMigrationResolver.Progress",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *outOfBandMigrationResolver) Progress() float64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *outOfBandMigrationResolver) Progress() float64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#outOfBandMigrationResolver.Created",
                    "documentation": {
                      "identifier": "outOfBandMigrationResolver.Created",
                      "newPage": false,
                      "searchKey": "graphqlbackend.outOfBandMigrationResolver.Created",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *outOfBandMigrationResolver) Created() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *outOfBandMigrationResolver) Created() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#outOfBandMigrationResolver.LastUpdated",
                    "documentation": {
                      "identifier": "outOfBandMigrationResolver.LastUpdated",
                      "newPage": false,
                      "searchKey": "graphqlbackend.outOfBandMigrationResolver.LastUpdated",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *outOfBandMigrationResolver) LastUpdated() *DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *outOfBandMigrationResolver) LastUpdated() *DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#outOfBandMigrationResolver.NonDestructive",
                    "documentation": {
                      "identifier": "outOfBandMigrationResolver.NonDestructive",
                      "newPage": false,
                      "searchKey": "graphqlbackend.outOfBandMigrationResolver.NonDestructive",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *outOfBandMigrationResolver) NonDestructive() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *outOfBandMigrationResolver) NonDestructive() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#outOfBandMigrationResolver.ApplyReverse",
                    "documentation": {
                      "identifier": "outOfBandMigrationResolver.ApplyReverse",
                      "newPage": false,
                      "searchKey": "graphqlbackend.outOfBandMigrationResolver.ApplyReverse",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *outOfBandMigrationResolver) ApplyReverse() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *outOfBandMigrationResolver) ApplyReverse() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#outOfBandMigrationResolver.Errors",
                    "documentation": {
                      "identifier": "outOfBandMigrationResolver.Errors",
                      "newPage": false,
                      "searchKey": "graphqlbackend.outOfBandMigrationResolver.Errors",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *outOfBandMigrationResolver) Errors() []*outOfBandMigrationErrorResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *outOfBandMigrationResolver) Errors() []*outOfBandMigrationErrorResolver\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#outOfBandMigrationErrorResolver",
              "documentation": {
                "identifier": "outOfBandMigrationErrorResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.outOfBandMigrationErrorResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type outOfBandMigrationErrorResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype outOfBandMigrationErrorResolver struct {\n\te oobmigration.MigrationError\n}\n```\n\noutOfBandMigrationErrorResolver implements the GraphQL type OutOfBandMigrationError. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#outOfBandMigrationErrorResolver.Message",
                    "documentation": {
                      "identifier": "outOfBandMigrationErrorResolver.Message",
                      "newPage": false,
                      "searchKey": "graphqlbackend.outOfBandMigrationErrorResolver.Message",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *outOfBandMigrationErrorResolver) Message() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *outOfBandMigrationErrorResolver) Message() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#outOfBandMigrationErrorResolver.Created",
                    "documentation": {
                      "identifier": "outOfBandMigrationErrorResolver.Created",
                      "newPage": false,
                      "searchKey": "graphqlbackend.outOfBandMigrationErrorResolver.Created",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *outOfBandMigrationErrorResolver) Created() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *outOfBandMigrationErrorResolver) Created() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#OrgResolver",
              "documentation": {
                "identifier": "OrgResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.OrgResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OrgResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OrgResolver struct {\n\tdb  dbutil.DB\n\torg *types.Org\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgByID",
                    "documentation": {
                      "identifier": "OrgByID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgByID",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func OrgByID(ctx context.Context, db dbutil.DB, id graphql.ID) (*OrgResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc OrgByID(ctx context.Context, db dbutil.DB, id graphql.ID) (*OrgResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgByIDInt32",
                    "documentation": {
                      "identifier": "OrgByIDInt32",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgByIDInt32",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func OrgByIDInt32(ctx context.Context, db dbutil.DB, orgID int32) (*OrgResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc OrgByIDInt32(ctx context.Context, db dbutil.DB, orgID int32) (*OrgResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewOrg",
                    "documentation": {
                      "identifier": "NewOrg",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewOrg",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewOrg(db dbutil.DB, org *types.Org) *OrgResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewOrg(db dbutil.DB, org *types.Org) *OrgResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgResolver.ID",
                    "documentation": {
                      "identifier": "OrgResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgResolver.ID",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgResolver.OrgID",
                    "documentation": {
                      "identifier": "OrgResolver.OrgID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgResolver.OrgID",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgResolver) OrgID() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgResolver) OrgID() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgResolver.Name",
                    "documentation": {
                      "identifier": "OrgResolver.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgResolver.Name",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgResolver) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgResolver) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgResolver.DisplayName",
                    "documentation": {
                      "identifier": "OrgResolver.DisplayName",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgResolver.DisplayName",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgResolver) DisplayName() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgResolver) DisplayName() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgResolver.URL",
                    "documentation": {
                      "identifier": "OrgResolver.URL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgResolver.URL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgResolver) URL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgResolver) URL() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgResolver.SettingsURL",
                    "documentation": {
                      "identifier": "OrgResolver.SettingsURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgResolver.SettingsURL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgResolver) SettingsURL() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgResolver) SettingsURL() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgResolver.CreatedAt",
                    "documentation": {
                      "identifier": "OrgResolver.CreatedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgResolver.CreatedAt",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgResolver) CreatedAt() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgResolver) CreatedAt() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgResolver.Members",
                    "documentation": {
                      "identifier": "OrgResolver.Members",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgResolver.Members",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgResolver) Members(ctx context.Context) (*staticUserConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgResolver) Members(ctx context.Context) (*staticUserConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgResolver.settingsSubject",
                    "documentation": {
                      "identifier": "OrgResolver.settingsSubject",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgResolver.settingsSubject",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgResolver) settingsSubject() api.SettingsSubject"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgResolver) settingsSubject() api.SettingsSubject\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgResolver.LatestSettings",
                    "documentation": {
                      "identifier": "OrgResolver.LatestSettings",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgResolver.LatestSettings",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgResolver) LatestSettings(ctx context.Context) (*settingsResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgResolver) LatestSettings(ctx context.Context) (*settingsResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgResolver.SettingsCascade",
                    "documentation": {
                      "identifier": "OrgResolver.SettingsCascade",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgResolver.SettingsCascade",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgResolver) SettingsCascade() *settingsCascade"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgResolver) SettingsCascade() *settingsCascade\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgResolver.ConfigurationCascade",
                    "documentation": {
                      "identifier": "OrgResolver.ConfigurationCascade",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgResolver.ConfigurationCascade",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgResolver) ConfigurationCascade() *settingsCascade"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgResolver) ConfigurationCascade() *settingsCascade\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgResolver.ViewerPendingInvitation",
                    "documentation": {
                      "identifier": "OrgResolver.ViewerPendingInvitation",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgResolver.ViewerPendingInvitation",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgResolver) ViewerPendingInvitation(ctx context.Context) (*organizationInvitationResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgResolver) ViewerPendingInvitation(ctx context.Context) (*organizationInvitationResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgResolver.ViewerCanAdminister",
                    "documentation": {
                      "identifier": "OrgResolver.ViewerCanAdminister",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgResolver.ViewerCanAdminister",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgResolver) ViewerCanAdminister(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgResolver) ViewerCanAdminister(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgResolver.ViewerIsMember",
                    "documentation": {
                      "identifier": "OrgResolver.ViewerIsMember",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgResolver.ViewerIsMember",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgResolver) ViewerIsMember(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgResolver) ViewerIsMember(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgResolver.NamespaceName",
                    "documentation": {
                      "identifier": "OrgResolver.NamespaceName",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgResolver.NamespaceName",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgResolver) NamespaceName() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgResolver) NamespaceName() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgResolver.Campaigns",
                    "documentation": {
                      "identifier": "OrgResolver.Campaigns",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgResolver.Campaigns",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgResolver) Campaigns(ctx context.Context, args *ListBatchChangesArgs) (BatchChangesConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgResolver) Campaigns(ctx context.Context, args *ListBatchChangesArgs) (BatchChangesConnectionResolver, error)\n```\n\nTODO(campaigns-deprecation): \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#OrgResolver.BatchChanges",
                    "documentation": {
                      "identifier": "OrgResolver.BatchChanges",
                      "newPage": false,
                      "searchKey": "graphqlbackend.OrgResolver.BatchChanges",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *OrgResolver) BatchChanges(ctx context.Context, args *ListBatchChangesArgs) (BatchChangesConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *OrgResolver) BatchChanges(ctx context.Context, args *ListBatchChangesArgs) (BatchChangesConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#organizationInvitationResolver",
              "documentation": {
                "identifier": "organizationInvitationResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.organizationInvitationResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type organizationInvitationResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype organizationInvitationResolver struct {\n\tdb dbutil.DB\n\tv  *database.OrgInvitation\n}\n```\n\norganizationInvitationResolver implements the GraphQL type OrganizationInvitation. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#orgInvitationByID",
                    "documentation": {
                      "identifier": "orgInvitationByID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.orgInvitationByID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func orgInvitationByID(ctx context.Context, db dbutil.DB, id graphql.ID) (*organizationInvitationResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc orgInvitationByID(ctx context.Context, db dbutil.DB, id graphql.ID) (*organizationInvitationResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#orgInvitationByIDInt64",
                    "documentation": {
                      "identifier": "orgInvitationByIDInt64",
                      "newPage": false,
                      "searchKey": "graphqlbackend.orgInvitationByIDInt64",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func orgInvitationByIDInt64(ctx context.Context, db dbutil.DB, id int64) (*organizationInvitationResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc orgInvitationByIDInt64(ctx context.Context, db dbutil.DB, id int64) (*organizationInvitationResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#organizationInvitationResolver.ID",
                    "documentation": {
                      "identifier": "organizationInvitationResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.organizationInvitationResolver.ID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *organizationInvitationResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *organizationInvitationResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#organizationInvitationResolver.Organization",
                    "documentation": {
                      "identifier": "organizationInvitationResolver.Organization",
                      "newPage": false,
                      "searchKey": "graphqlbackend.organizationInvitationResolver.Organization",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *organizationInvitationResolver) Organization(ctx context.Context) (*OrgResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *organizationInvitationResolver) Organization(ctx context.Context) (*OrgResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#organizationInvitationResolver.Sender",
                    "documentation": {
                      "identifier": "organizationInvitationResolver.Sender",
                      "newPage": false,
                      "searchKey": "graphqlbackend.organizationInvitationResolver.Sender",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *organizationInvitationResolver) Sender(ctx context.Context) (*UserResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *organizationInvitationResolver) Sender(ctx context.Context) (*UserResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#organizationInvitationResolver.Recipient",
                    "documentation": {
                      "identifier": "organizationInvitationResolver.Recipient",
                      "newPage": false,
                      "searchKey": "graphqlbackend.organizationInvitationResolver.Recipient",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *organizationInvitationResolver) Recipient(ctx context.Context) (*UserResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *organizationInvitationResolver) Recipient(ctx context.Context) (*UserResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#organizationInvitationResolver.CreatedAt",
                    "documentation": {
                      "identifier": "organizationInvitationResolver.CreatedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.organizationInvitationResolver.CreatedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *organizationInvitationResolver) CreatedAt() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *organizationInvitationResolver) CreatedAt() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#organizationInvitationResolver.NotifiedAt",
                    "documentation": {
                      "identifier": "organizationInvitationResolver.NotifiedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.organizationInvitationResolver.NotifiedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *organizationInvitationResolver) NotifiedAt() *DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *organizationInvitationResolver) NotifiedAt() *DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#organizationInvitationResolver.RespondedAt",
                    "documentation": {
                      "identifier": "organizationInvitationResolver.RespondedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.organizationInvitationResolver.RespondedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *organizationInvitationResolver) RespondedAt() *DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *organizationInvitationResolver) RespondedAt() *DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#organizationInvitationResolver.ResponseType",
                    "documentation": {
                      "identifier": "organizationInvitationResolver.ResponseType",
                      "newPage": false,
                      "searchKey": "graphqlbackend.organizationInvitationResolver.ResponseType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *organizationInvitationResolver) ResponseType() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *organizationInvitationResolver) ResponseType() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#organizationInvitationResolver.RespondURL",
                    "documentation": {
                      "identifier": "organizationInvitationResolver.RespondURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.organizationInvitationResolver.RespondURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *organizationInvitationResolver) RespondURL(ctx context.Context) (*string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *organizationInvitationResolver) RespondURL(ctx context.Context) (*string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#organizationInvitationResolver.RevokedAt",
                    "documentation": {
                      "identifier": "organizationInvitationResolver.RevokedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.organizationInvitationResolver.RevokedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *organizationInvitationResolver) RevokedAt() *DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *organizationInvitationResolver) RevokedAt() *DateTime\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#inviteUserToOrganizationResult",
              "documentation": {
                "identifier": "inviteUserToOrganizationResult",
                "newPage": false,
                "searchKey": "graphqlbackend.inviteUserToOrganizationResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type inviteUserToOrganizationResult struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype inviteUserToOrganizationResult struct {\n\tsentInvitationEmail bool\n\tinvitationURL       string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#inviteUserToOrganizationResult.SentInvitationEmail",
                    "documentation": {
                      "identifier": "inviteUserToOrganizationResult.SentInvitationEmail",
                      "newPage": false,
                      "searchKey": "graphqlbackend.inviteUserToOrganizationResult.SentInvitationEmail",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *inviteUserToOrganizationResult) SentInvitationEmail() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *inviteUserToOrganizationResult) SentInvitationEmail() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#inviteUserToOrganizationResult.InvitationURL",
                    "documentation": {
                      "identifier": "inviteUserToOrganizationResult.InvitationURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.inviteUserToOrganizationResult.InvitationURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *inviteUserToOrganizationResult) InvitationURL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *inviteUserToOrganizationResult) InvitationURL() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#organizationMembershipConnectionResolver",
              "documentation": {
                "identifier": "organizationMembershipConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.organizationMembershipConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type organizationMembershipConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype organizationMembershipConnectionResolver struct {\n\tnodes []*organizationMembershipResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#organizationMembershipConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "organizationMembershipConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.organizationMembershipConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *organizationMembershipConnectionResolver) Nodes() []*organizationMembershipResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *organizationMembershipConnectionResolver) Nodes() []*organizationMembershipResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#organizationMembershipConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "organizationMembershipConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.organizationMembershipConnectionResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *organizationMembershipConnectionResolver) TotalCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *organizationMembershipConnectionResolver) TotalCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#organizationMembershipConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "organizationMembershipConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.organizationMembershipConnectionResolver.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *organizationMembershipConnectionResolver) PageInfo() *graphqlutil.PageInfo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *organizationMembershipConnectionResolver) PageInfo() *graphqlutil.PageInfo\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#organizationMembershipResolver",
              "documentation": {
                "identifier": "organizationMembershipResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.organizationMembershipResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type organizationMembershipResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype organizationMembershipResolver struct {\n\tdb         dbutil.DB\n\tmembership *types.OrgMembership\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#organizationMembershipResolver.Organization",
                    "documentation": {
                      "identifier": "organizationMembershipResolver.Organization",
                      "newPage": false,
                      "searchKey": "graphqlbackend.organizationMembershipResolver.Organization",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *organizationMembershipResolver) Organization(ctx context.Context) (*OrgResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *organizationMembershipResolver) Organization(ctx context.Context) (*OrgResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#organizationMembershipResolver.User",
                    "documentation": {
                      "identifier": "organizationMembershipResolver.User",
                      "newPage": false,
                      "searchKey": "graphqlbackend.organizationMembershipResolver.User",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *organizationMembershipResolver) User(ctx context.Context) (*UserResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *organizationMembershipResolver) User(ctx context.Context) (*UserResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#organizationMembershipResolver.CreatedAt",
                    "documentation": {
                      "identifier": "organizationMembershipResolver.CreatedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.organizationMembershipResolver.CreatedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *organizationMembershipResolver) CreatedAt() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *organizationMembershipResolver) CreatedAt() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#organizationMembershipResolver.UpdatedAt",
                    "documentation": {
                      "identifier": "organizationMembershipResolver.UpdatedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.organizationMembershipResolver.UpdatedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *organizationMembershipResolver) UpdatedAt() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *organizationMembershipResolver) UpdatedAt() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#orgConnectionResolver",
              "documentation": {
                "identifier": "orgConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.orgConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type orgConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype orgConnectionResolver struct {\n\tdb  dbutil.DB\n\topt database.OrgsListOptions\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#orgConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "orgConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.orgConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *orgConnectionResolver) Nodes(ctx context.Context) ([]*OrgResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *orgConnectionResolver) Nodes(ctx context.Context) ([]*OrgResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#orgConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "orgConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.orgConnectionResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *orgConnectionResolver) TotalCount(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *orgConnectionResolver) TotalCount(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#orgConnectionStaticResolver",
              "documentation": {
                "identifier": "orgConnectionStaticResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.orgConnectionStaticResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type orgConnectionStaticResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype orgConnectionStaticResolver struct {\n\tnodes []*OrgResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#orgConnectionStaticResolver.Nodes",
                    "documentation": {
                      "identifier": "orgConnectionStaticResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.orgConnectionStaticResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *orgConnectionStaticResolver) Nodes() []*OrgResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *orgConnectionStaticResolver) Nodes() []*OrgResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#orgConnectionStaticResolver.TotalCount",
                    "documentation": {
                      "identifier": "orgConnectionStaticResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.orgConnectionStaticResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *orgConnectionStaticResolver) TotalCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *orgConnectionStaticResolver) TotalCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#orgConnectionStaticResolver.PageInfo",
                    "documentation": {
                      "identifier": "orgConnectionStaticResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.orgConnectionStaticResolver.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *orgConnectionStaticResolver) PageInfo() *graphqlutil.PageInfo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *orgConnectionStaticResolver) PageInfo() *graphqlutil.PageInfo\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#PersonResolver",
              "documentation": {
                "identifier": "PersonResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.PersonResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PersonResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PersonResolver struct {\n\tdb    dbutil.DB\n\tname  string\n\temail string\n\n\t// fetch + serve sourcegraph stored user information\n\tincludeUserInfo bool\n\n\t// cache result because it is used by multiple fields\n\tonce sync.Once\n\tuser *types.User\n\terr  error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewPersonResolver",
                    "documentation": {
                      "identifier": "NewPersonResolver",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewPersonResolver",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewPersonResolver(db dbutil.DB, name, email string, includeUserInfo bool) *PersonResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewPersonResolver(db dbutil.DB, name, email string, includeUserInfo bool) *PersonResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#PersonResolver.resolveUser",
                    "documentation": {
                      "identifier": "PersonResolver.resolveUser",
                      "newPage": false,
                      "searchKey": "graphqlbackend.PersonResolver.resolveUser",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *PersonResolver) resolveUser(ctx context.Context) (*types.User, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *PersonResolver) resolveUser(ctx context.Context) (*types.User, error)\n```\n\nresolveUser resolves the person to a user (using the email address). Not all persons can be resolved to a user. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#PersonResolver.Name",
                    "documentation": {
                      "identifier": "PersonResolver.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.PersonResolver.Name",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *PersonResolver) Name(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *PersonResolver) Name(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#PersonResolver.Email",
                    "documentation": {
                      "identifier": "PersonResolver.Email",
                      "newPage": false,
                      "searchKey": "graphqlbackend.PersonResolver.Email",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *PersonResolver) Email() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *PersonResolver) Email() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#PersonResolver.DisplayName",
                    "documentation": {
                      "identifier": "PersonResolver.DisplayName",
                      "newPage": false,
                      "searchKey": "graphqlbackend.PersonResolver.DisplayName",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *PersonResolver) DisplayName(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *PersonResolver) DisplayName(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#PersonResolver.AvatarURL",
                    "documentation": {
                      "identifier": "PersonResolver.AvatarURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.PersonResolver.AvatarURL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *PersonResolver) AvatarURL(ctx context.Context) (*string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *PersonResolver) AvatarURL(ctx context.Context) (*string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#PersonResolver.User",
                    "documentation": {
                      "identifier": "PersonResolver.User",
                      "newPage": false,
                      "searchKey": "graphqlbackend.PersonResolver.User",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *PersonResolver) User(ctx context.Context) (*UserResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *PersonResolver) User(ctx context.Context) (*UserResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#phabricatorRepoResolver",
              "documentation": {
                "identifier": "phabricatorRepoResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.phabricatorRepoResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type phabricatorRepoResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype phabricatorRepoResolver struct {\n\t*types.PhabricatorRepo\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#phabricatorRepoResolver.Callsign",
                    "documentation": {
                      "identifier": "phabricatorRepoResolver.Callsign",
                      "newPage": false,
                      "searchKey": "graphqlbackend.phabricatorRepoResolver.Callsign",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *phabricatorRepoResolver) Callsign() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *phabricatorRepoResolver) Callsign() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#phabricatorRepoResolver.Name",
                    "documentation": {
                      "identifier": "phabricatorRepoResolver.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.phabricatorRepoResolver.Name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *phabricatorRepoResolver) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *phabricatorRepoResolver) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#phabricatorRepoResolver.URI",
                    "documentation": {
                      "identifier": "phabricatorRepoResolver.URI",
                      "newPage": false,
                      "searchKey": "graphqlbackend.phabricatorRepoResolver.URI",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *phabricatorRepoResolver) URI() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *phabricatorRepoResolver) URI() string\n```\n\nTODO(chris): Remove URI in favor of Name. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#phabricatorRepoResolver.URL",
                    "documentation": {
                      "identifier": "phabricatorRepoResolver.URL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.phabricatorRepoResolver.URL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *phabricatorRepoResolver) URL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *phabricatorRepoResolver) URL() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#PreviewRepositoryComparisonResolver",
              "documentation": {
                "identifier": "PreviewRepositoryComparisonResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.PreviewRepositoryComparisonResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PreviewRepositoryComparisonResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PreviewRepositoryComparisonResolver interface {\n\tRepositoryComparisonInterface\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#previewRepositoryComparisonResolver",
              "documentation": {
                "identifier": "previewRepositoryComparisonResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.previewRepositoryComparisonResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type previewRepositoryComparisonResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype previewRepositoryComparisonResolver struct {\n\tdb     dbutil.DB\n\trepo   *RepositoryResolver\n\tcommit *GitCommitResolver\n\tpatch  string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewPreviewRepositoryComparisonResolver",
                    "documentation": {
                      "identifier": "NewPreviewRepositoryComparisonResolver",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewPreviewRepositoryComparisonResolver",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewPreviewRepositoryComparisonResolver(ctx context.Context, db dbutil.DB, repo *RepositoryResolver, baseRev, patch string) (*previewRepositoryComparisonResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewPreviewRepositoryComparisonResolver(ctx context.Context, db dbutil.DB, repo *RepositoryResolver, baseRev, patch string) (*previewRepositoryComparisonResolver, error)\n```\n\nNewPreviewRepositoryComparisonResolver is a convenience function to get a preview diff from a repo, given a base rev and the git patch. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#previewRepositoryComparisonResolver.ToPreviewRepositoryComparison",
                    "documentation": {
                      "identifier": "previewRepositoryComparisonResolver.ToPreviewRepositoryComparison",
                      "newPage": false,
                      "searchKey": "graphqlbackend.previewRepositoryComparisonResolver.ToPreviewRepositoryComparison",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *previewRepositoryComparisonResolver) ToPreviewRepositoryComparison() (PreviewRepositoryComparisonResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *previewRepositoryComparisonResolver) ToPreviewRepositoryComparison() (PreviewRepositoryComparisonResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#previewRepositoryComparisonResolver.ToRepositoryComparison",
                    "documentation": {
                      "identifier": "previewRepositoryComparisonResolver.ToRepositoryComparison",
                      "newPage": false,
                      "searchKey": "graphqlbackend.previewRepositoryComparisonResolver.ToRepositoryComparison",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *previewRepositoryComparisonResolver) ToRepositoryComparison() (*RepositoryComparisonResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *previewRepositoryComparisonResolver) ToRepositoryComparison() (*RepositoryComparisonResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#previewRepositoryComparisonResolver.BaseRepository",
                    "documentation": {
                      "identifier": "previewRepositoryComparisonResolver.BaseRepository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.previewRepositoryComparisonResolver.BaseRepository",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *previewRepositoryComparisonResolver) BaseRepository() *RepositoryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *previewRepositoryComparisonResolver) BaseRepository() *RepositoryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#previewRepositoryComparisonResolver.FileDiffs",
                    "documentation": {
                      "identifier": "previewRepositoryComparisonResolver.FileDiffs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.previewRepositoryComparisonResolver.FileDiffs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *previewRepositoryComparisonResolver) FileDiffs(ctx context.Context, args *FileDiffsConnectionArgs) (FileDiffConnection, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *previewRepositoryComparisonResolver) FileDiffs(ctx context.Context, args *FileDiffsConnectionArgs) (FileDiffConnection, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ProductLicenseInfo",
              "documentation": {
                "identifier": "ProductLicenseInfo",
                "newPage": false,
                "searchKey": "graphqlbackend.ProductLicenseInfo",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ProductLicenseInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ProductLicenseInfo struct {\n\tTagsValue      []string\n\tUserCountValue uint\n\tExpiresAtValue time.Time\n}\n```\n\nProductLicenseInfo implements the GraphQL type ProductLicenseInfo. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#ProductLicenseInfo.ProductNameWithBrand",
                    "documentation": {
                      "identifier": "ProductLicenseInfo.ProductNameWithBrand",
                      "newPage": false,
                      "searchKey": "graphqlbackend.ProductLicenseInfo.ProductNameWithBrand",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r ProductLicenseInfo) ProductNameWithBrand() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r ProductLicenseInfo) ProductNameWithBrand() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#ProductLicenseInfo.Tags",
                    "documentation": {
                      "identifier": "ProductLicenseInfo.Tags",
                      "newPage": false,
                      "searchKey": "graphqlbackend.ProductLicenseInfo.Tags",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r ProductLicenseInfo) Tags() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r ProductLicenseInfo) Tags() []string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#ProductLicenseInfo.UserCount",
                    "documentation": {
                      "identifier": "ProductLicenseInfo.UserCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.ProductLicenseInfo.UserCount",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r ProductLicenseInfo) UserCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r ProductLicenseInfo) UserCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#ProductLicenseInfo.ExpiresAt",
                    "documentation": {
                      "identifier": "ProductLicenseInfo.ExpiresAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.ProductLicenseInfo.ExpiresAt",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r ProductLicenseInfo) ExpiresAt() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r ProductLicenseInfo) ExpiresAt() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#productSubscriptionStatus",
              "documentation": {
                "identifier": "productSubscriptionStatus",
                "newPage": false,
                "searchKey": "graphqlbackend.productSubscriptionStatus",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type productSubscriptionStatus struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype productSubscriptionStatus struct{}\n```\n\nproductSubscriptionStatus implements the GraphQL type ProductSubscriptionStatus. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#productSubscriptionStatus.ProductNameWithBrand",
                    "documentation": {
                      "identifier": "productSubscriptionStatus.ProductNameWithBrand",
                      "newPage": false,
                      "searchKey": "graphqlbackend.productSubscriptionStatus.ProductNameWithBrand",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (productSubscriptionStatus) ProductNameWithBrand() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (productSubscriptionStatus) ProductNameWithBrand() (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#productSubscriptionStatus.ActualUserCount",
                    "documentation": {
                      "identifier": "productSubscriptionStatus.ActualUserCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.productSubscriptionStatus.ActualUserCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (productSubscriptionStatus) ActualUserCount(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (productSubscriptionStatus) ActualUserCount(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#productSubscriptionStatus.ActualUserCountDate",
                    "documentation": {
                      "identifier": "productSubscriptionStatus.ActualUserCountDate",
                      "newPage": false,
                      "searchKey": "graphqlbackend.productSubscriptionStatus.ActualUserCountDate",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (productSubscriptionStatus) ActualUserCountDate(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (productSubscriptionStatus) ActualUserCountDate(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#productSubscriptionStatus.NoLicenseWarningUserCount",
                    "documentation": {
                      "identifier": "productSubscriptionStatus.NoLicenseWarningUserCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.productSubscriptionStatus.NoLicenseWarningUserCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (productSubscriptionStatus) NoLicenseWarningUserCount(ctx context.Context) (*int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (productSubscriptionStatus) NoLicenseWarningUserCount(ctx context.Context) (*int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#productSubscriptionStatus.MaximumAllowedUserCount",
                    "documentation": {
                      "identifier": "productSubscriptionStatus.MaximumAllowedUserCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.productSubscriptionStatus.MaximumAllowedUserCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (productSubscriptionStatus) MaximumAllowedUserCount(ctx context.Context) (*int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (productSubscriptionStatus) MaximumAllowedUserCount(ctx context.Context) (*int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#productSubscriptionStatus.License",
                    "documentation": {
                      "identifier": "productSubscriptionStatus.License",
                      "newPage": false,
                      "searchKey": "graphqlbackend.productSubscriptionStatus.License",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r productSubscriptionStatus) License() (*ProductLicenseInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r productSubscriptionStatus) License() (*ProductLicenseInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#QueryCost",
              "documentation": {
                "identifier": "QueryCost",
                "newPage": false,
                "searchKey": "graphqlbackend.QueryCost",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueryCost struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueryCost struct {\n\tFieldCount int\n\tMaxDepth   int\n\tVersion    int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#EstimateQueryCost",
                    "documentation": {
                      "identifier": "EstimateQueryCost",
                      "newPage": false,
                      "searchKey": "graphqlbackend.EstimateQueryCost",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func EstimateQueryCost(query string, variables map[string]interface{}) (totalCost *QueryCost, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc EstimateQueryCost(query string, variables map[string]interface{}) (totalCost *QueryCost, err error)\n```\n\nEstimateQueryCost estimates the cost of the query before it is actually executed. It is a worst cast estimate of the number of fields expected to be returned by the query and handles nested queries a well as fragments. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#calcNodeCost",
                    "documentation": {
                      "identifier": "calcNodeCost",
                      "newPage": false,
                      "searchKey": "graphqlbackend.calcNodeCost",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func calcNodeCost(def ast.Node, fragmentCosts map[string]int, variables map[string]interface{}) (*QueryCost, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc calcNodeCost(def ast.Node, fragmentCosts map[string]int, variables map[string]interface{}) (*QueryCost, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LimiterArgs",
              "documentation": {
                "identifier": "LimiterArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.LimiterArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LimiterArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LimiterArgs struct {\n\tIsIP          bool\n\tAnonymous     bool\n\tRequestName   string\n\tRequestSource trace.SourceType\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#Limiter",
              "documentation": {
                "identifier": "Limiter",
                "newPage": false,
                "searchKey": "graphqlbackend.Limiter",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Limiter interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Limiter interface {\n\tRateLimit(key string, quantity int, args LimiterArgs) (bool, throttled.RateLimitResult, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LimitWatcher",
              "documentation": {
                "identifier": "LimitWatcher",
                "newPage": false,
                "searchKey": "graphqlbackend.LimitWatcher",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LimitWatcher interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LimitWatcher interface {\n\tGet() (Limiter, bool)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#BasicLimitWatcher",
              "documentation": {
                "identifier": "BasicLimitWatcher",
                "newPage": false,
                "searchKey": "graphqlbackend.BasicLimitWatcher",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BasicLimitWatcher graphqlbackend.RateLimitWatcher"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BasicLimitWatcher RateLimitWatcher\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewBasicLimitWatcher",
                    "documentation": {
                      "identifier": "NewBasicLimitWatcher",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewBasicLimitWatcher",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewBasicLimitWatcher(store throttled.GCRAStore) *BasicLimitWatcher"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewBasicLimitWatcher(store throttled.GCRAStore) *BasicLimitWatcher\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#BasicLimitWatcher.updateFromConfig",
                    "documentation": {
                      "identifier": "BasicLimitWatcher.updateFromConfig",
                      "newPage": false,
                      "searchKey": "graphqlbackend.BasicLimitWatcher.updateFromConfig",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (bl *BasicLimitWatcher) updateFromConfig(limit int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (bl *BasicLimitWatcher) updateFromConfig(limit int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#BasicLimitWatcher.Get",
                    "documentation": {
                      "identifier": "BasicLimitWatcher.Get",
                      "newPage": false,
                      "searchKey": "graphqlbackend.BasicLimitWatcher.Get",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (bl *BasicLimitWatcher) Get() (Limiter, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (bl *BasicLimitWatcher) Get() (Limiter, bool)\n```\n\nGet returns the latest Limiter. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#BasicLimiter",
              "documentation": {
                "identifier": "BasicLimiter",
                "newPage": false,
                "searchKey": "graphqlbackend.BasicLimiter",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BasicLimiter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BasicLimiter struct {\n\t*throttled.GCRARateLimiter\n\tenabled bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#BasicLimiter.RateLimit",
                    "documentation": {
                      "identifier": "BasicLimiter.RateLimit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.BasicLimiter.RateLimit",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (bl *BasicLimiter) RateLimit(_ string, _ int, args LimiterArgs) (bool, throttled.RateLimitResult, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (bl *BasicLimiter) RateLimit(_ string, _ int, args LimiterArgs) (bool, throttled.RateLimitResult, error)\n```\n\nRateLimit limits unauthenticated requests to the GraphQL API with an equal quantity of 1. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RateLimitWatcher",
              "documentation": {
                "identifier": "RateLimitWatcher",
                "newPage": false,
                "searchKey": "graphqlbackend.RateLimitWatcher",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RateLimitWatcher struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RateLimitWatcher struct {\n\tstore throttled.GCRAStore\n\trl    atomic.Value // *RateLimiter\n}\n```\n\nRateLimitWatcher stores the currently configured rate limiter and whether or not rate limiting is enabled. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewRateLimiteWatcher",
                    "documentation": {
                      "identifier": "NewRateLimiteWatcher",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewRateLimiteWatcher",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewRateLimiteWatcher(store throttled.GCRAStore) *RateLimitWatcher"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewRateLimiteWatcher(store throttled.GCRAStore) *RateLimitWatcher\n```\n\nNewRateLimiteWatcher creates a new limiter with the provided store and starts watching for config changes. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RateLimitWatcher.Get",
                    "documentation": {
                      "identifier": "RateLimitWatcher.Get",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RateLimitWatcher.Get",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *RateLimitWatcher) Get() (Limiter, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *RateLimitWatcher) Get() (Limiter, bool)\n```\n\nGet returns the current rate limiter. If rate limiting is currently disabled (nil, false) is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RateLimitWatcher.updateFromConfig",
                    "documentation": {
                      "identifier": "RateLimitWatcher.updateFromConfig",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RateLimitWatcher.updateFromConfig",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *RateLimitWatcher) updateFromConfig(rlc *schema.ApiRatelimit)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *RateLimitWatcher) updateFromConfig(rlc *schema.ApiRatelimit)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RateLimiter",
              "documentation": {
                "identifier": "RateLimiter",
                "newPage": false,
                "searchKey": "graphqlbackend.RateLimiter",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RateLimiter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RateLimiter struct {\n\tenabled     bool\n\tipLimiter   *throttled.GCRARateLimiter\n\tuserLimiter *throttled.GCRARateLimiter\n\toverrides   map[string]limiter\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RateLimiter.RateLimit",
                    "documentation": {
                      "identifier": "RateLimiter.RateLimit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RateLimiter.RateLimit",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rl *RateLimiter) RateLimit(uid string, cost int, args LimiterArgs) (bool, throttled.RateLimitResult, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rl *RateLimiter) RateLimit(uid string, cost int, args LimiterArgs) (bool, throttled.RateLimitResult, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#limiter",
              "documentation": {
                "identifier": "limiter",
                "newPage": false,
                "searchKey": "graphqlbackend.limiter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type limiter interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype limiter interface {\n\tRateLimit(string, int) (bool, throttled.RateLimitResult, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#fixedLimiter",
              "documentation": {
                "identifier": "fixedLimiter",
                "newPage": false,
                "searchKey": "graphqlbackend.fixedLimiter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type fixedLimiter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fixedLimiter struct {\n\tlimited bool\n\tresult  throttled.RateLimitResult\n}\n```\n\nfixedLimiter is a rate limiter that always returns the same result \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#fixedLimiter.RateLimit",
                    "documentation": {
                      "identifier": "fixedLimiter.RateLimit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.fixedLimiter.RateLimit",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *fixedLimiter) RateLimit(string, int) (bool, throttled.RateLimitResult, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *fixedLimiter) RateLimit(string, int) (bool, throttled.RateLimitResult, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repoGroup",
              "documentation": {
                "identifier": "repoGroup",
                "newPage": false,
                "searchKey": "graphqlbackend.repoGroup",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repoGroup struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repoGroup struct {\n\tname         string\n\trepositories []api.RepoName\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repoGroup.Name",
                    "documentation": {
                      "identifier": "repoGroup.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repoGroup.Name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g repoGroup) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g repoGroup) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repoGroup.Repositories",
                    "documentation": {
                      "identifier": "repoGroup.Repositories",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repoGroup.Repositories",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g repoGroup) Repositories() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g repoGroup) Repositories() []string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repositoryArgs",
              "documentation": {
                "identifier": "repositoryArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.repositoryArgs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repositoryArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repositoryArgs struct {\n\tgraphqlutil.ConnectionArgs\n\tQuery       *string\n\tNames       *[]string\n\tCloned      bool\n\tNotCloned   bool\n\tIndexed     bool\n\tNotIndexed  bool\n\tFailedFetch bool\n\tOrderBy     string\n\tDescending  bool\n\tAfter       *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TotalCountArgs",
              "documentation": {
                "identifier": "TotalCountArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.TotalCountArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TotalCountArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TotalCountArgs struct {\n\tPrecise bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RepositoryConnectionResolver",
              "documentation": {
                "identifier": "RepositoryConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.RepositoryConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepositoryConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepositoryConnectionResolver interface {\n\tNodes(ctx context.Context) ([]*RepositoryResolver, error)\n\tTotalCount(ctx context.Context, args *TotalCountArgs) (*int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repositoryConnectionResolver",
              "documentation": {
                "identifier": "repositoryConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.repositoryConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repositoryConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repositoryConnectionResolver struct {\n\tdb          dbutil.DB\n\topt         database.ReposListOptions\n\tcloned      bool\n\tnotCloned   bool\n\tindexed     bool\n\tnotIndexed  bool\n\tfailedFetch bool\n\n\t// cache results because they are used by multiple fields\n\tonce  sync.Once\n\trepos []*types.Repo\n\terr   error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryConnectionResolver.compute",
                    "documentation": {
                      "identifier": "repositoryConnectionResolver.compute",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryConnectionResolver.compute",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryConnectionResolver) compute(ctx context.Context) ([]*types.Repo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryConnectionResolver) compute(ctx context.Context) ([]*types.Repo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "repositoryConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryConnectionResolver) Nodes(ctx context.Context) ([]*RepositoryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryConnectionResolver) Nodes(ctx context.Context) ([]*RepositoryResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "repositoryConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryConnectionResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryConnectionResolver) TotalCount(ctx context.Context, args *TotalCountArgs) (countptr *int32, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryConnectionResolver) TotalCount(ctx context.Context, args *TotalCountArgs) (countptr *int32, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "repositoryConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryConnectionResolver.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver",
              "documentation": {
                "identifier": "RepositoryResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.RepositoryResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepositoryResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepositoryResolver struct {\n\thydration sync.Once\n\terr       error\n\n\t// Invariant: Name and ID of RepoMatch are always set and safe to use. They are\n\t// used to hydrate the inner repo, and should always be the same as the name and\n\t// id of the inner repo, but referring to the inner repo directly is unsafe\n\t// because it may cause a race during hydration.\n\tresult.RepoMatch\n\n\tdb dbutil.DB\n\n\t// innerRepo may only contain ID and Name information.\n\t// To access any other repo information, use repo() instead.\n\tinnerRepo *types.Repo\n\n\tdefaultBranchOnce sync.Once\n\tdefaultBranch     *GitRefResolver\n\tdefaultBranchErr  error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewRepositoryResolver",
                    "documentation": {
                      "identifier": "NewRepositoryResolver",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewRepositoryResolver",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewRepositoryResolver(db dbutil.DB, repo *types.Repo) *RepositoryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewRepositoryResolver(db dbutil.DB, repo *types.Repo) *RepositoryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.ID",
                    "documentation": {
                      "identifier": "RepositoryResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.ID",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.IDInt32",
                    "documentation": {
                      "identifier": "RepositoryResolver.IDInt32",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.IDInt32",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) IDInt32() api.RepoID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) IDInt32() api.RepoID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.repo",
                    "documentation": {
                      "identifier": "RepositoryResolver.repo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.repo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) repo(ctx context.Context) (*types.Repo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) repo(ctx context.Context) (*types.Repo, error)\n```\n\nrepo makes sure the repo is hydrated before returning it. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.RepoName",
                    "documentation": {
                      "identifier": "RepositoryResolver.RepoName",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.RepoName",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) RepoName() api.RepoName"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) RepoName() api.RepoName\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.Name",
                    "documentation": {
                      "identifier": "RepositoryResolver.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.Name",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.ExternalRepo",
                    "documentation": {
                      "identifier": "RepositoryResolver.ExternalRepo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.ExternalRepo",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) ExternalRepo(ctx context.Context) (*api.ExternalRepoSpec, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) ExternalRepo(ctx context.Context) (*api.ExternalRepoSpec, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.IsFork",
                    "documentation": {
                      "identifier": "RepositoryResolver.IsFork",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.IsFork",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) IsFork(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) IsFork(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.IsArchived",
                    "documentation": {
                      "identifier": "RepositoryResolver.IsArchived",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.IsArchived",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) IsArchived(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) IsArchived(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.IsPrivate",
                    "documentation": {
                      "identifier": "RepositoryResolver.IsPrivate",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.IsPrivate",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) IsPrivate(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) IsPrivate(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.URI",
                    "documentation": {
                      "identifier": "RepositoryResolver.URI",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.URI",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) URI(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) URI(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.Description",
                    "documentation": {
                      "identifier": "RepositoryResolver.Description",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.Description",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) Description(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) Description(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.ViewerCanAdminister",
                    "documentation": {
                      "identifier": "RepositoryResolver.ViewerCanAdminister",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.ViewerCanAdminister",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) ViewerCanAdminister(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) ViewerCanAdminister(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.CloneInProgress",
                    "documentation": {
                      "identifier": "RepositoryResolver.CloneInProgress",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.CloneInProgress",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) CloneInProgress(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) CloneInProgress(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.Commit",
                    "documentation": {
                      "identifier": "RepositoryResolver.Commit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.Commit",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) Commit(ctx context.Context, args *RepositoryCommitArgs) (*GitCommitResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) Commit(ctx context.Context, args *RepositoryCommitArgs) (*GitCommitResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.CommitFromID",
                    "documentation": {
                      "identifier": "RepositoryResolver.CommitFromID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.CommitFromID",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) CommitFromID(ctx context.Context, args *RepositoryCommitArgs, commitID api.CommitID) (*GitCommitResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) CommitFromID(ctx context.Context, args *RepositoryCommitArgs, commitID api.CommitID) (*GitCommitResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.DefaultBranch",
                    "documentation": {
                      "identifier": "RepositoryResolver.DefaultBranch",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.DefaultBranch",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) DefaultBranch(ctx context.Context) (*GitRefResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) DefaultBranch(ctx context.Context) (*GitRefResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.Language",
                    "documentation": {
                      "identifier": "RepositoryResolver.Language",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.Language",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) Language(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) Language(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.Enabled",
                    "documentation": {
                      "identifier": "RepositoryResolver.Enabled",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.Enabled",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) Enabled() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) Enabled() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.CreatedAt",
                    "documentation": {
                      "identifier": "RepositoryResolver.CreatedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.CreatedAt",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) CreatedAt() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) CreatedAt() DateTime\n```\n\nNo clients that we know of read this field. Additionally on performance profiles the marshalling of timestamps is significant in our postgres client. So we deprecate the fields and return fake data for created_at. [https://github.com/sourcegraph/sourcegraph/pull/4668](https://github.com/sourcegraph/sourcegraph/pull/4668) \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.UpdatedAt",
                    "documentation": {
                      "identifier": "RepositoryResolver.UpdatedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.UpdatedAt",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) UpdatedAt() *DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) UpdatedAt() *DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.URL",
                    "documentation": {
                      "identifier": "RepositoryResolver.URL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.URL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) URL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) URL() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.ExternalURLs",
                    "documentation": {
                      "identifier": "RepositoryResolver.ExternalURLs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.ExternalURLs",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) ExternalURLs(ctx context.Context) ([]*externallink.Resolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) ExternalURLs(ctx context.Context) ([]*externallink.Resolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.Rev",
                    "documentation": {
                      "identifier": "RepositoryResolver.Rev",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.Rev",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) Rev() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) Rev() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.Label",
                    "documentation": {
                      "identifier": "RepositoryResolver.Label",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.Label",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) Label() (Markdown, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) Label() (Markdown, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.Detail",
                    "documentation": {
                      "identifier": "RepositoryResolver.Detail",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.Detail",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) Detail() Markdown"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) Detail() Markdown\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.Matches",
                    "documentation": {
                      "identifier": "RepositoryResolver.Matches",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.Matches",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) Matches() []*searchResultMatchResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) Matches() []*searchResultMatchResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.ToRepository",
                    "documentation": {
                      "identifier": "RepositoryResolver.ToRepository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.ToRepository",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) ToRepository() (*RepositoryResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) ToRepository() (*RepositoryResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.ToFileMatch",
                    "documentation": {
                      "identifier": "RepositoryResolver.ToFileMatch",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.ToFileMatch",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) ToFileMatch() (*FileMatchResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) ToFileMatch() (*FileMatchResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.ToCommitSearchResult",
                    "documentation": {
                      "identifier": "RepositoryResolver.ToCommitSearchResult",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.ToCommitSearchResult",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) ToCommitSearchResult() (*CommitSearchResultResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) ToCommitSearchResult() (*CommitSearchResultResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.ResultCount",
                    "documentation": {
                      "identifier": "RepositoryResolver.ResultCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.ResultCount",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) ResultCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) ResultCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.Type",
                    "documentation": {
                      "identifier": "RepositoryResolver.Type",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.Type",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) Type(ctx context.Context) (*types.Repo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) Type(ctx context.Context) (*types.Repo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.Stars",
                    "documentation": {
                      "identifier": "RepositoryResolver.Stars",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.Stars",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) Stars(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) Stars(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.hydrate",
                    "documentation": {
                      "identifier": "RepositoryResolver.hydrate",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.hydrate",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) hydrate(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) hydrate(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.LSIFUploads",
                    "documentation": {
                      "identifier": "RepositoryResolver.LSIFUploads",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.LSIFUploads",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) LSIFUploads(ctx context.Context, args *LSIFUploadsQueryArgs) (LSIFUploadConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) LSIFUploads(ctx context.Context, args *LSIFUploadsQueryArgs) (LSIFUploadConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.LSIFIndexes",
                    "documentation": {
                      "identifier": "RepositoryResolver.LSIFIndexes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.LSIFIndexes",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) LSIFIndexes(ctx context.Context, args *LSIFIndexesQueryArgs) (LSIFIndexConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) LSIFIndexes(ctx context.Context, args *LSIFIndexesQueryArgs) (LSIFIndexConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.IndexConfiguration",
                    "documentation": {
                      "identifier": "RepositoryResolver.IndexConfiguration",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.IndexConfiguration",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) IndexConfiguration(ctx context.Context) (IndexConfigurationResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) IndexConfiguration(ctx context.Context) (IndexConfigurationResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.CodeIntelligenceCommitGraph",
                    "documentation": {
                      "identifier": "RepositoryResolver.CodeIntelligenceCommitGraph",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.CodeIntelligenceCommitGraph",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) CodeIntelligenceCommitGraph(ctx context.Context) (CodeIntelligenceCommitGraphResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) CodeIntelligenceCommitGraph(ctx context.Context) (CodeIntelligenceCommitGraphResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.AuthorizedUsers",
                    "documentation": {
                      "identifier": "RepositoryResolver.AuthorizedUsers",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.AuthorizedUsers",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) AuthorizedUsers(ctx context.Context, args *AuthorizedUserArgs) (UserConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) AuthorizedUsers(ctx context.Context, args *AuthorizedUserArgs) (UserConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.PermissionsInfo",
                    "documentation": {
                      "identifier": "RepositoryResolver.PermissionsInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.PermissionsInfo",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) PermissionsInfo(ctx context.Context) (PermissionsInfoResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) PermissionsInfo(ctx context.Context) (PermissionsInfoResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.Comparison",
                    "documentation": {
                      "identifier": "RepositoryResolver.Comparison",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.Comparison",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) Comparison(ctx context.Context, args *RepositoryComparisonInput) (*RepositoryComparisonResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) Comparison(ctx context.Context, args *RepositoryComparisonInput) (*RepositoryComparisonResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.Contributors",
                    "documentation": {
                      "identifier": "RepositoryResolver.Contributors",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.Contributors",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) Contributors(args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) Contributors(args *struct {\n\trepositoryContributorsArgs\n\tFirst *int32\n}) *repositoryContributorConnectionResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.ExternalRepository",
                    "documentation": {
                      "identifier": "RepositoryResolver.ExternalRepository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.ExternalRepository",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) ExternalRepository() *externalRepositoryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) ExternalRepository() *externalRepositoryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.ExternalServices",
                    "documentation": {
                      "identifier": "RepositoryResolver.ExternalServices",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.ExternalServices",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) ExternalServices(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) ExternalServices(ctx context.Context, args *struct {\n\tgraphqlutil.ConnectionArgs\n}) (*computedExternalServiceConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.Branches",
                    "documentation": {
                      "identifier": "RepositoryResolver.Branches",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.Branches",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) Branches(ctx context.Context, args *refsArgs) (*gitRefConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) Branches(ctx context.Context, args *refsArgs) (*gitRefConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.Tags",
                    "documentation": {
                      "identifier": "RepositoryResolver.Tags",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.Tags",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) Tags(ctx context.Context, args *refsArgs) (*gitRefConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) Tags(ctx context.Context, args *refsArgs) (*gitRefConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.GitRefs",
                    "documentation": {
                      "identifier": "RepositoryResolver.GitRefs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.GitRefs",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) GitRefs(ctx context.Context, args *refsArgs) (*gitRefConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) GitRefs(ctx context.Context, args *refsArgs) (*gitRefConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.MirrorInfo",
                    "documentation": {
                      "identifier": "RepositoryResolver.MirrorInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.MirrorInfo",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) MirrorInfo() *repositoryMirrorInfoResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) MirrorInfo() *repositoryMirrorInfoResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryResolver.TextSearchIndex",
                    "documentation": {
                      "identifier": "RepositoryResolver.TextSearchIndex",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryResolver.TextSearchIndex",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryResolver) TextSearchIndex() *repositoryTextSearchIndexResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryResolver) TextSearchIndex() *repositoryTextSearchIndexResolver\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RepositoryCommitArgs",
              "documentation": {
                "identifier": "RepositoryCommitArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.RepositoryCommitArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepositoryCommitArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepositoryCommitArgs struct {\n\tRev          string\n\tInputRevspec *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#AuthorizedUserArgs",
              "documentation": {
                "identifier": "AuthorizedUserArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.AuthorizedUserArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AuthorizedUserArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AuthorizedUserArgs struct {\n\tRepositoryID graphql.ID\n\tPermission   string\n\tFirst        int32\n\tAfter        *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RepoAuthorizedUserArgs",
              "documentation": {
                "identifier": "RepoAuthorizedUserArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.RepoAuthorizedUserArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepoAuthorizedUserArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepoAuthorizedUserArgs struct {\n\tRepositoryID graphql.ID\n\t*AuthorizedUserArgs\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RepositoryComparisonInput",
              "documentation": {
                "identifier": "RepositoryComparisonInput",
                "newPage": false,
                "searchKey": "graphqlbackend.RepositoryComparisonInput",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepositoryComparisonInput struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepositoryComparisonInput struct {\n\tBase         *string\n\tHead         *string\n\tFetchMissing bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#FileDiffsConnectionArgs",
              "documentation": {
                "identifier": "FileDiffsConnectionArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.FileDiffsConnectionArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FileDiffsConnectionArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FileDiffsConnectionArgs struct {\n\tFirst *int32\n\tAfter *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RepositoryComparisonInterface",
              "documentation": {
                "identifier": "RepositoryComparisonInterface",
                "newPage": false,
                "searchKey": "graphqlbackend.RepositoryComparisonInterface",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepositoryComparisonInterface interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepositoryComparisonInterface interface {\n\tBaseRepository() *RepositoryResolver\n\tFileDiffs(ctx context.Context, args *FileDiffsConnectionArgs) (FileDiffConnection, error)\n\n\tToRepositoryComparison() (*RepositoryComparisonResolver, bool)\n\tToPreviewRepositoryComparison() (PreviewRepositoryComparisonResolver, bool)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#FileDiffConnection",
              "documentation": {
                "identifier": "FileDiffConnection",
                "newPage": false,
                "searchKey": "graphqlbackend.FileDiffConnection",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FileDiffConnection interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FileDiffConnection interface {\n\tNodes(ctx context.Context) ([]FileDiff, error)\n\tTotalCount(ctx context.Context) (*int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n\tDiffStat(ctx context.Context) (*DiffStat, error)\n\tRawDiff(ctx context.Context) (string, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#FileDiff",
              "documentation": {
                "identifier": "FileDiff",
                "newPage": false,
                "searchKey": "graphqlbackend.FileDiff",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FileDiff interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FileDiff interface {\n\tOldPath() *string\n\tNewPath() *string\n\tHunks() []*DiffHunk\n\tStat() *DiffStat\n\tOldFile() FileResolver\n\tNewFile() FileResolver\n\tMostRelevantFile() FileResolver\n\tInternalID() string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RepositoryComparisonResolver",
              "documentation": {
                "identifier": "RepositoryComparisonResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.RepositoryComparisonResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepositoryComparisonResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepositoryComparisonResolver struct {\n\tdb                       dbutil.DB\n\tbaseRevspec, headRevspec string\n\tbase, head               *GitCommitResolver\n\trepo                     *RepositoryResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewRepositoryComparison",
                    "documentation": {
                      "identifier": "NewRepositoryComparison",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewRepositoryComparison",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewRepositoryComparison(ctx context.Context, db dbutil.DB, r *RepositoryResolver, args *RepositoryComparisonInput) (*RepositoryComparisonResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewRepositoryComparison(ctx context.Context, db dbutil.DB, r *RepositoryResolver, args *RepositoryComparisonInput) (*RepositoryComparisonResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryComparisonResolver.ToPreviewRepositoryComparison",
                    "documentation": {
                      "identifier": "RepositoryComparisonResolver.ToPreviewRepositoryComparison",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryComparisonResolver.ToPreviewRepositoryComparison",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryComparisonResolver) ToPreviewRepositoryComparison() (PreviewRepositoryComparisonResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryComparisonResolver) ToPreviewRepositoryComparison() (PreviewRepositoryComparisonResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryComparisonResolver.ToRepositoryComparison",
                    "documentation": {
                      "identifier": "RepositoryComparisonResolver.ToRepositoryComparison",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryComparisonResolver.ToRepositoryComparison",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryComparisonResolver) ToRepositoryComparison() (*RepositoryComparisonResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryComparisonResolver) ToRepositoryComparison() (*RepositoryComparisonResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryComparisonResolver.BaseRepository",
                    "documentation": {
                      "identifier": "RepositoryComparisonResolver.BaseRepository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryComparisonResolver.BaseRepository",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryComparisonResolver) BaseRepository() *RepositoryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryComparisonResolver) BaseRepository() *RepositoryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryComparisonResolver.HeadRepository",
                    "documentation": {
                      "identifier": "RepositoryComparisonResolver.HeadRepository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryComparisonResolver.HeadRepository",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryComparisonResolver) HeadRepository() *RepositoryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryComparisonResolver) HeadRepository() *RepositoryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryComparisonResolver.Range",
                    "documentation": {
                      "identifier": "RepositoryComparisonResolver.Range",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryComparisonResolver.Range",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryComparisonResolver) Range() *gitRevisionRange"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryComparisonResolver) Range() *gitRevisionRange\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryComparisonResolver.Commits",
                    "documentation": {
                      "identifier": "RepositoryComparisonResolver.Commits",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryComparisonResolver.Commits",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryComparisonResolver) Commits(args *graphqlutil.ConnectionArgs) *gitCommitConnectionResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryComparisonResolver) Commits(\n\targs *graphqlutil.ConnectionArgs,\n) *gitCommitConnectionResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#RepositoryComparisonResolver.FileDiffs",
                    "documentation": {
                      "identifier": "RepositoryComparisonResolver.FileDiffs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.RepositoryComparisonResolver.FileDiffs",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RepositoryComparisonResolver) FileDiffs(ctx context.Context, args *FileDiffsConnectionArgs) (FileDiffConnection, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RepositoryComparisonResolver) FileDiffs(ctx context.Context, args *FileDiffsConnectionArgs) (FileDiffConnection, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ComputeDiffFunc",
              "documentation": {
                "identifier": "ComputeDiffFunc",
                "newPage": false,
                "searchKey": "graphqlbackend.ComputeDiffFunc",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ComputeDiffFunc func(ctx context.Context, args *github.com/sourcegraph/sourcegraph/cmd/frontend/graphqlbackend.FileDiffsConnectionArgs) ([]*github.com/sourcegraph/go-diff/diff.FileDiff, int32, bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ComputeDiffFunc func(ctx context.Context, args *FileDiffsConnectionArgs) ([]*diff.FileDiff, int32, bool, error)\n```\n\nComputeDiffFunc is a function that computes FileDiffs for the given args. It returns the diffs, the starting index from which to return entries (`after` param), whether there's a next page, and an optional error. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#computeRepositoryComparisonDiff",
                    "documentation": {
                      "identifier": "computeRepositoryComparisonDiff",
                      "newPage": false,
                      "searchKey": "graphqlbackend.computeRepositoryComparisonDiff",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func computeRepositoryComparisonDiff(cmp *RepositoryComparisonResolver) ComputeDiffFunc"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc computeRepositoryComparisonDiff(cmp *RepositoryComparisonResolver) ComputeDiffFunc\n```\n\ncomputeRepositoryComparisonDiff returns a ComputeDiffFunc for the given RepositoryComparisonResolver. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#NewFileFunc",
              "documentation": {
                "identifier": "NewFileFunc",
                "newPage": false,
                "searchKey": "graphqlbackend.NewFileFunc",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NewFileFunc func(db github.com/sourcegraph/sourcegraph/internal/database/dbutil.DB, r *github.com/sourcegraph/sourcegraph/cmd/frontend/graphqlbackend.FileDiffResolver) github.com/sourcegraph/sourcegraph/cmd/frontend/graphqlbackend.FileResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NewFileFunc func(db dbutil.DB, r *FileDiffResolver) FileResolver\n```\n\nNewFileFunc is a function that returns the \"new\" file in a FileDiff as a FileResolver. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#fileDiffConnectionResolver",
              "documentation": {
                "identifier": "fileDiffConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.fileDiffConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type fileDiffConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fileDiffConnectionResolver struct {\n\tdb      dbutil.DB\n\tbase    *GitCommitResolver\n\thead    *GitCommitResolver\n\tfirst   *int32\n\tafter   *string\n\tcompute ComputeDiffFunc\n\tnewFile NewFileFunc\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewFileDiffConnectionResolver",
                    "documentation": {
                      "identifier": "NewFileDiffConnectionResolver",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewFileDiffConnectionResolver",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewFileDiffConnectionResolver(db dbutil.DB,..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewFileDiffConnectionResolver(\n\tdb dbutil.DB,\n\tbase, head *GitCommitResolver,\n\targs *FileDiffsConnectionArgs,\n\tcompute ComputeDiffFunc,\n\tnewFileFunc NewFileFunc,\n) *fileDiffConnectionResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#fileDiffConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "fileDiffConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.fileDiffConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *fileDiffConnectionResolver) Nodes(ctx context.Context) ([]FileDiff, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *fileDiffConnectionResolver) Nodes(ctx context.Context) ([]FileDiff, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#fileDiffConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "fileDiffConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.fileDiffConnectionResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *fileDiffConnectionResolver) TotalCount(ctx context.Context) (*int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *fileDiffConnectionResolver) TotalCount(ctx context.Context) (*int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#fileDiffConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "fileDiffConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.fileDiffConnectionResolver.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *fileDiffConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *fileDiffConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#fileDiffConnectionResolver.DiffStat",
                    "documentation": {
                      "identifier": "fileDiffConnectionResolver.DiffStat",
                      "newPage": false,
                      "searchKey": "graphqlbackend.fileDiffConnectionResolver.DiffStat",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *fileDiffConnectionResolver) DiffStat(ctx context.Context) (*DiffStat, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *fileDiffConnectionResolver) DiffStat(ctx context.Context) (*DiffStat, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#fileDiffConnectionResolver.RawDiff",
                    "documentation": {
                      "identifier": "fileDiffConnectionResolver.RawDiff",
                      "newPage": false,
                      "searchKey": "graphqlbackend.fileDiffConnectionResolver.RawDiff",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *fileDiffConnectionResolver) RawDiff(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *fileDiffConnectionResolver) RawDiff(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#FileDiffResolver",
              "documentation": {
                "identifier": "FileDiffResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.FileDiffResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FileDiffResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FileDiffResolver struct {\n\tFileDiff *diff.FileDiff\n\tBase     *GitCommitResolver\n\tHead     *GitCommitResolver\n\n\tdb      dbutil.DB\n\tnewFile NewFileFunc\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileDiffResolver.OldPath",
                    "documentation": {
                      "identifier": "FileDiffResolver.OldPath",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileDiffResolver.OldPath",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *FileDiffResolver) OldPath() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *FileDiffResolver) OldPath() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileDiffResolver.NewPath",
                    "documentation": {
                      "identifier": "FileDiffResolver.NewPath",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileDiffResolver.NewPath",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *FileDiffResolver) NewPath() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *FileDiffResolver) NewPath() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileDiffResolver.Hunks",
                    "documentation": {
                      "identifier": "FileDiffResolver.Hunks",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileDiffResolver.Hunks",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *FileDiffResolver) Hunks() []*DiffHunk"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *FileDiffResolver) Hunks() []*DiffHunk\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileDiffResolver.Stat",
                    "documentation": {
                      "identifier": "FileDiffResolver.Stat",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileDiffResolver.Stat",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *FileDiffResolver) Stat() *DiffStat"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *FileDiffResolver) Stat() *DiffStat\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileDiffResolver.OldFile",
                    "documentation": {
                      "identifier": "FileDiffResolver.OldFile",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileDiffResolver.OldFile",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *FileDiffResolver) OldFile() FileResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *FileDiffResolver) OldFile() FileResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileDiffResolver.NewFile",
                    "documentation": {
                      "identifier": "FileDiffResolver.NewFile",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileDiffResolver.NewFile",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *FileDiffResolver) NewFile() FileResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *FileDiffResolver) NewFile() FileResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileDiffResolver.MostRelevantFile",
                    "documentation": {
                      "identifier": "FileDiffResolver.MostRelevantFile",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileDiffResolver.MostRelevantFile",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *FileDiffResolver) MostRelevantFile() FileResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *FileDiffResolver) MostRelevantFile() FileResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#FileDiffResolver.InternalID",
                    "documentation": {
                      "identifier": "FileDiffResolver.InternalID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.FileDiffResolver.InternalID",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *FileDiffResolver) InternalID() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *FileDiffResolver) InternalID() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#FileDiffHighlighter",
              "documentation": {
                "identifier": "FileDiffHighlighter",
                "newPage": false,
                "searchKey": "graphqlbackend.FileDiffHighlighter",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FileDiffHighlighter interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FileDiffHighlighter interface {\n\tHighlight(ctx context.Context, args *HighlightArgs) ([]template.HTML, []template.HTML, bool, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#fileDiffHighlighter",
              "documentation": {
                "identifier": "fileDiffHighlighter",
                "newPage": false,
                "searchKey": "graphqlbackend.fileDiffHighlighter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type fileDiffHighlighter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fileDiffHighlighter struct {\n\toldFile          FileResolver\n\tnewFile          FileResolver\n\thighlightedBase  []template.HTML\n\thighlightedHead  []template.HTML\n\thighlightOnce    sync.Once\n\thighlightErr     error\n\thighlightAborted bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#fileDiffHighlighter.Highlight",
                    "documentation": {
                      "identifier": "fileDiffHighlighter.Highlight",
                      "newPage": false,
                      "searchKey": "graphqlbackend.fileDiffHighlighter.Highlight",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *fileDiffHighlighter) Highlight(ctx context.Context, args *HighlightArgs) ([]template.HTML, []template.HTML, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *fileDiffHighlighter) Highlight(ctx context.Context, args *HighlightArgs) ([]template.HTML, []template.HTML, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#DiffHunk",
              "documentation": {
                "identifier": "DiffHunk",
                "newPage": false,
                "searchKey": "graphqlbackend.DiffHunk",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DiffHunk struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DiffHunk struct {\n\thunk        *diff.Hunk\n\thighlighter FileDiffHighlighter\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewDiffHunk",
                    "documentation": {
                      "identifier": "NewDiffHunk",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewDiffHunk",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewDiffHunk(hunk *diff.Hunk, highlighter FileDiffHighlighter) *DiffHunk"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewDiffHunk(hunk *diff.Hunk, highlighter FileDiffHighlighter) *DiffHunk\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#DiffHunk.OldRange",
                    "documentation": {
                      "identifier": "DiffHunk.OldRange",
                      "newPage": false,
                      "searchKey": "graphqlbackend.DiffHunk.OldRange",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiffHunk) OldRange() *DiffHunkRange"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiffHunk) OldRange() *DiffHunkRange\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#DiffHunk.OldNoNewlineAt",
                    "documentation": {
                      "identifier": "DiffHunk.OldNoNewlineAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.DiffHunk.OldNoNewlineAt",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiffHunk) OldNoNewlineAt() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiffHunk) OldNoNewlineAt() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#DiffHunk.NewRange",
                    "documentation": {
                      "identifier": "DiffHunk.NewRange",
                      "newPage": false,
                      "searchKey": "graphqlbackend.DiffHunk.NewRange",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiffHunk) NewRange() *DiffHunkRange"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiffHunk) NewRange() *DiffHunkRange\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#DiffHunk.Section",
                    "documentation": {
                      "identifier": "DiffHunk.Section",
                      "newPage": false,
                      "searchKey": "graphqlbackend.DiffHunk.Section",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiffHunk) Section() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiffHunk) Section() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#DiffHunk.Body",
                    "documentation": {
                      "identifier": "DiffHunk.Body",
                      "newPage": false,
                      "searchKey": "graphqlbackend.DiffHunk.Body",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiffHunk) Body() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiffHunk) Body() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#DiffHunk.Highlight",
                    "documentation": {
                      "identifier": "DiffHunk.Highlight",
                      "newPage": false,
                      "searchKey": "graphqlbackend.DiffHunk.Highlight",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiffHunk) Highlight(ctx context.Context, args *HighlightArgs) (*highlightedDiffHunkBodyResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiffHunk) Highlight(ctx context.Context, args *HighlightArgs) (*highlightedDiffHunkBodyResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#highlightedDiffHunkBodyResolver",
              "documentation": {
                "identifier": "highlightedDiffHunkBodyResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.highlightedDiffHunkBodyResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type highlightedDiffHunkBodyResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype highlightedDiffHunkBodyResolver struct {\n\thighlightedDiffHunkLineResolvers []*highlightedDiffHunkLineResolver\n\taborted                          bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#highlightedDiffHunkBodyResolver.Aborted",
                    "documentation": {
                      "identifier": "highlightedDiffHunkBodyResolver.Aborted",
                      "newPage": false,
                      "searchKey": "graphqlbackend.highlightedDiffHunkBodyResolver.Aborted",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *highlightedDiffHunkBodyResolver) Aborted() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *highlightedDiffHunkBodyResolver) Aborted() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#highlightedDiffHunkBodyResolver.Lines",
                    "documentation": {
                      "identifier": "highlightedDiffHunkBodyResolver.Lines",
                      "newPage": false,
                      "searchKey": "graphqlbackend.highlightedDiffHunkBodyResolver.Lines",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *highlightedDiffHunkBodyResolver) Lines() []*highlightedDiffHunkLineResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *highlightedDiffHunkBodyResolver) Lines() []*highlightedDiffHunkLineResolver\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#highlightedDiffHunkLineResolver",
              "documentation": {
                "identifier": "highlightedDiffHunkLineResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.highlightedDiffHunkLineResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type highlightedDiffHunkLineResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype highlightedDiffHunkLineResolver struct {\n\thtml string\n\tkind string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#highlightedDiffHunkLineResolver.HTML",
                    "documentation": {
                      "identifier": "highlightedDiffHunkLineResolver.HTML",
                      "newPage": false,
                      "searchKey": "graphqlbackend.highlightedDiffHunkLineResolver.HTML",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *highlightedDiffHunkLineResolver) HTML() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *highlightedDiffHunkLineResolver) HTML() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#highlightedDiffHunkLineResolver.Kind",
                    "documentation": {
                      "identifier": "highlightedDiffHunkLineResolver.Kind",
                      "newPage": false,
                      "searchKey": "graphqlbackend.highlightedDiffHunkLineResolver.Kind",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *highlightedDiffHunkLineResolver) Kind() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *highlightedDiffHunkLineResolver) Kind() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#DiffHunkRange",
              "documentation": {
                "identifier": "DiffHunkRange",
                "newPage": false,
                "searchKey": "graphqlbackend.DiffHunkRange",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DiffHunkRange struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DiffHunkRange struct {\n\tstartLine int32\n\tlines     int32\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewDiffHunkRange",
                    "documentation": {
                      "identifier": "NewDiffHunkRange",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewDiffHunkRange",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewDiffHunkRange(startLine, lines int32) *DiffHunkRange"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewDiffHunkRange(startLine, lines int32) *DiffHunkRange\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#DiffHunkRange.StartLine",
                    "documentation": {
                      "identifier": "DiffHunkRange.StartLine",
                      "newPage": false,
                      "searchKey": "graphqlbackend.DiffHunkRange.StartLine",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiffHunkRange) StartLine() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiffHunkRange) StartLine() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#DiffHunkRange.Lines",
                    "documentation": {
                      "identifier": "DiffHunkRange.Lines",
                      "newPage": false,
                      "searchKey": "graphqlbackend.DiffHunkRange.Lines",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiffHunkRange) Lines() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiffHunkRange) Lines() int32\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#DiffStat",
              "documentation": {
                "identifier": "DiffStat",
                "newPage": false,
                "searchKey": "graphqlbackend.DiffStat",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DiffStat struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DiffStat struct{ added, changed, deleted int32 }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewDiffStat",
                    "documentation": {
                      "identifier": "NewDiffStat",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewDiffStat",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewDiffStat(s diff.Stat) *DiffStat"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewDiffStat(s diff.Stat) *DiffStat\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#DiffStat.AddStat",
                    "documentation": {
                      "identifier": "DiffStat.AddStat",
                      "newPage": false,
                      "searchKey": "graphqlbackend.DiffStat.AddStat",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiffStat) AddStat(s diff.Stat)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiffStat) AddStat(s diff.Stat)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#DiffStat.AddDiffStat",
                    "documentation": {
                      "identifier": "DiffStat.AddDiffStat",
                      "newPage": false,
                      "searchKey": "graphqlbackend.DiffStat.AddDiffStat",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiffStat) AddDiffStat(s *DiffStat)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiffStat) AddDiffStat(s *DiffStat)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#DiffStat.Added",
                    "documentation": {
                      "identifier": "DiffStat.Added",
                      "newPage": false,
                      "searchKey": "graphqlbackend.DiffStat.Added",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiffStat) Added() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiffStat) Added() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#DiffStat.Changed",
                    "documentation": {
                      "identifier": "DiffStat.Changed",
                      "newPage": false,
                      "searchKey": "graphqlbackend.DiffStat.Changed",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiffStat) Changed() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiffStat) Changed() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#DiffStat.Deleted",
                    "documentation": {
                      "identifier": "DiffStat.Deleted",
                      "newPage": false,
                      "searchKey": "graphqlbackend.DiffStat.Deleted",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiffStat) Deleted() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiffStat) Deleted() int32\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repositoryContributorResolver",
              "documentation": {
                "identifier": "repositoryContributorResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.repositoryContributorResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repositoryContributorResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repositoryContributorResolver struct {\n\tdb    dbutil.DB\n\tname  string\n\temail string\n\tcount int32\n\n\trepo *RepositoryResolver\n\targs repositoryContributorsArgs\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryContributorResolver.Person",
                    "documentation": {
                      "identifier": "repositoryContributorResolver.Person",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryContributorResolver.Person",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryContributorResolver) Person() *PersonResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryContributorResolver) Person() *PersonResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryContributorResolver.Count",
                    "documentation": {
                      "identifier": "repositoryContributorResolver.Count",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryContributorResolver.Count",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryContributorResolver) Count() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryContributorResolver) Count() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryContributorResolver.Repository",
                    "documentation": {
                      "identifier": "repositoryContributorResolver.Repository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryContributorResolver.Repository",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryContributorResolver) Repository() *RepositoryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryContributorResolver) Repository() *RepositoryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryContributorResolver.Commits",
                    "documentation": {
                      "identifier": "repositoryContributorResolver.Commits",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryContributorResolver.Commits",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryContributorResolver) Commits(args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryContributorResolver) Commits(args *struct {\n\tFirst *int32\n}) *gitCommitConnectionResolver\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repositoryContributorsArgs",
              "documentation": {
                "identifier": "repositoryContributorsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.repositoryContributorsArgs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repositoryContributorsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repositoryContributorsArgs struct {\n\tRevisionRange *string\n\tAfter         *string\n\tPath          *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repositoryContributorConnectionResolver",
              "documentation": {
                "identifier": "repositoryContributorConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.repositoryContributorConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repositoryContributorConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repositoryContributorConnectionResolver struct {\n\tdb    dbutil.DB\n\targs  repositoryContributorsArgs\n\tfirst *int32\n\n\trepo *RepositoryResolver\n\n\t// cache result because it is used by multiple fields\n\tonce    sync.Once\n\tresults []*git.PersonCount\n\terr     error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryContributorConnectionResolver.compute",
                    "documentation": {
                      "identifier": "repositoryContributorConnectionResolver.compute",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryContributorConnectionResolver.compute",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryContributorConnectionResolver) compute(ctx context.Context) ([]*git.PersonCount, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryContributorConnectionResolver) compute(ctx context.Context) ([]*git.PersonCount, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryContributorConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "repositoryContributorConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryContributorConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryContributorConnectionResolver) Nodes(ctx context.Context) ([]*repositoryContributorResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryContributorConnectionResolver) Nodes(ctx context.Context) ([]*repositoryContributorResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryContributorConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "repositoryContributorConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryContributorConnectionResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryContributorConnectionResolver) TotalCount(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryContributorConnectionResolver) TotalCount(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryContributorConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "repositoryContributorConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryContributorConnectionResolver.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryContributorConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryContributorConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repositoryCursor",
              "documentation": {
                "identifier": "repositoryCursor",
                "newPage": false,
                "searchKey": "graphqlbackend.repositoryCursor",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repositoryCursor struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repositoryCursor struct {\n\tColumn    string\n\tValue     string\n\tDirection string\n}\n```\n\nA repositoryCursor can be provided to a `repositories` query for efficient cursor-based pagination (vs. LIMIT/OFFSET). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#unmarshalRepositoryCursor",
                    "documentation": {
                      "identifier": "unmarshalRepositoryCursor",
                      "newPage": false,
                      "searchKey": "graphqlbackend.unmarshalRepositoryCursor",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func unmarshalRepositoryCursor(cursor *string) (*repositoryCursor, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc unmarshalRepositoryCursor(cursor *string) (*repositoryCursor, error)\n```\n\nunmarshalRepositoryCursor unmarshals a repository pagination cursor. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#externalRepositoryResolver",
              "documentation": {
                "identifier": "externalRepositoryResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.externalRepositoryResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type externalRepositoryResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype externalRepositoryResolver struct {\n\trepository *RepositoryResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalRepositoryResolver.ID",
                    "documentation": {
                      "identifier": "externalRepositoryResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalRepositoryResolver.ID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalRepositoryResolver) ID(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalRepositoryResolver) ID(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalRepositoryResolver.ServiceType",
                    "documentation": {
                      "identifier": "externalRepositoryResolver.ServiceType",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalRepositoryResolver.ServiceType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalRepositoryResolver) ServiceType(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalRepositoryResolver) ServiceType(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#externalRepositoryResolver.ServiceID",
                    "documentation": {
                      "identifier": "externalRepositoryResolver.ServiceID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.externalRepositoryResolver.ServiceID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *externalRepositoryResolver) ServiceID(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *externalRepositoryResolver) ServiceID(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#refsArgs",
              "documentation": {
                "identifier": "refsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.refsArgs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type refsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype refsArgs struct {\n\tgraphqlutil.ConnectionArgs\n\tQuery       *string\n\tType        *string\n\tOrderBy     *string\n\tInteractive bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitRefConnectionResolver",
              "documentation": {
                "identifier": "gitRefConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.gitRefConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gitRefConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gitRefConnectionResolver struct {\n\tfirst *int32\n\trefs  []*GitRefResolver\n\n\trepo *RepositoryResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitRefConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "gitRefConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitRefConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitRefConnectionResolver) Nodes() []*GitRefResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitRefConnectionResolver) Nodes() []*GitRefResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitRefConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "gitRefConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitRefConnectionResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitRefConnectionResolver) TotalCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitRefConnectionResolver) TotalCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitRefConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "gitRefConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitRefConnectionResolver.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *gitRefConnectionResolver) PageInfo() *graphqlutil.PageInfo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *gitRefConnectionResolver) PageInfo() *graphqlutil.PageInfo\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repositoryMirrorInfoResolver",
              "documentation": {
                "identifier": "repositoryMirrorInfoResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.repositoryMirrorInfoResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repositoryMirrorInfoResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repositoryMirrorInfoResolver struct {\n\trepository *RepositoryResolver\n\tdb         dbutil.DB\n\n\t// memoize the repo-updater RepoUpdateSchedulerInfo call\n\trepoUpdateSchedulerInfoOnce   sync.Once\n\trepoUpdateSchedulerInfoResult *repoupdaterprotocol.RepoUpdateSchedulerInfoResult\n\trepoUpdateSchedulerInfoErr    error\n\n\t// memoize the gitserver RepoInfo call\n\trepoInfoOnce     sync.Once\n\trepoInfoResponse *protocol.RepoInfo\n\trepoInfoErr      error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryMirrorInfoResolver.gitserverRepoInfo",
                    "documentation": {
                      "identifier": "repositoryMirrorInfoResolver.gitserverRepoInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryMirrorInfoResolver.gitserverRepoInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryMirrorInfoResolver) gitserverRepoInfo(ctx context.Context) (*protocol.RepoInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryMirrorInfoResolver) gitserverRepoInfo(ctx context.Context) (*protocol.RepoInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryMirrorInfoResolver.repoUpdateSchedulerInfo",
                    "documentation": {
                      "identifier": "repositoryMirrorInfoResolver.repoUpdateSchedulerInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryMirrorInfoResolver.repoUpdateSchedulerInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryMirrorInfoResolver) repoUpdateSchedulerInfo(ctx context.Context) (*repoupdaterprotocol.RepoUpdateSchedulerInfoResult, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryMirrorInfoResolver) repoUpdateSchedulerInfo(ctx context.Context) (*repoupdaterprotocol.RepoUpdateSchedulerInfoResult, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryMirrorInfoResolver.RemoteURL",
                    "documentation": {
                      "identifier": "repositoryMirrorInfoResolver.RemoteURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryMirrorInfoResolver.RemoteURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryMirrorInfoResolver) RemoteURL(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryMirrorInfoResolver) RemoteURL(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryMirrorInfoResolver.Cloned",
                    "documentation": {
                      "identifier": "repositoryMirrorInfoResolver.Cloned",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryMirrorInfoResolver.Cloned",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryMirrorInfoResolver) Cloned(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryMirrorInfoResolver) Cloned(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryMirrorInfoResolver.CloneInProgress",
                    "documentation": {
                      "identifier": "repositoryMirrorInfoResolver.CloneInProgress",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryMirrorInfoResolver.CloneInProgress",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryMirrorInfoResolver) CloneInProgress(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryMirrorInfoResolver) CloneInProgress(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryMirrorInfoResolver.CloneProgress",
                    "documentation": {
                      "identifier": "repositoryMirrorInfoResolver.CloneProgress",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryMirrorInfoResolver.CloneProgress",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryMirrorInfoResolver) CloneProgress(ctx context.Context) (*string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryMirrorInfoResolver) CloneProgress(ctx context.Context) (*string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryMirrorInfoResolver.UpdatedAt",
                    "documentation": {
                      "identifier": "repositoryMirrorInfoResolver.UpdatedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryMirrorInfoResolver.UpdatedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryMirrorInfoResolver) UpdatedAt(ctx context.Context) (*DateTime, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryMirrorInfoResolver) UpdatedAt(ctx context.Context) (*DateTime, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryMirrorInfoResolver.UpdateSchedule",
                    "documentation": {
                      "identifier": "repositoryMirrorInfoResolver.UpdateSchedule",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryMirrorInfoResolver.UpdateSchedule",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryMirrorInfoResolver) UpdateSchedule(ctx context.Context) (*updateScheduleResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryMirrorInfoResolver) UpdateSchedule(ctx context.Context) (*updateScheduleResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryMirrorInfoResolver.UpdateQueue",
                    "documentation": {
                      "identifier": "repositoryMirrorInfoResolver.UpdateQueue",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryMirrorInfoResolver.UpdateQueue",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryMirrorInfoResolver) UpdateQueue(ctx context.Context) (*updateQueueResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryMirrorInfoResolver) UpdateQueue(ctx context.Context) (*updateQueueResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#updateScheduleResolver",
              "documentation": {
                "identifier": "updateScheduleResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.updateScheduleResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type updateScheduleResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype updateScheduleResolver struct {\n\tschedule *repoupdaterprotocol.RepoScheduleState\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#updateScheduleResolver.IntervalSeconds",
                    "documentation": {
                      "identifier": "updateScheduleResolver.IntervalSeconds",
                      "newPage": false,
                      "searchKey": "graphqlbackend.updateScheduleResolver.IntervalSeconds",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *updateScheduleResolver) IntervalSeconds() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *updateScheduleResolver) IntervalSeconds() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#updateScheduleResolver.Due",
                    "documentation": {
                      "identifier": "updateScheduleResolver.Due",
                      "newPage": false,
                      "searchKey": "graphqlbackend.updateScheduleResolver.Due",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *updateScheduleResolver) Due() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *updateScheduleResolver) Due() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#updateScheduleResolver.Index",
                    "documentation": {
                      "identifier": "updateScheduleResolver.Index",
                      "newPage": false,
                      "searchKey": "graphqlbackend.updateScheduleResolver.Index",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *updateScheduleResolver) Index() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *updateScheduleResolver) Index() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#updateScheduleResolver.Total",
                    "documentation": {
                      "identifier": "updateScheduleResolver.Total",
                      "newPage": false,
                      "searchKey": "graphqlbackend.updateScheduleResolver.Total",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *updateScheduleResolver) Total() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *updateScheduleResolver) Total() int32\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#updateQueueResolver",
              "documentation": {
                "identifier": "updateQueueResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.updateQueueResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type updateQueueResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype updateQueueResolver struct {\n\tqueue *repoupdaterprotocol.RepoQueueState\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#updateQueueResolver.Updating",
                    "documentation": {
                      "identifier": "updateQueueResolver.Updating",
                      "newPage": false,
                      "searchKey": "graphqlbackend.updateQueueResolver.Updating",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *updateQueueResolver) Updating() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *updateQueueResolver) Updating() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#updateQueueResolver.Index",
                    "documentation": {
                      "identifier": "updateQueueResolver.Index",
                      "newPage": false,
                      "searchKey": "graphqlbackend.updateQueueResolver.Index",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *updateQueueResolver) Index() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *updateQueueResolver) Index() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#updateQueueResolver.Total",
                    "documentation": {
                      "identifier": "updateQueueResolver.Total",
                      "newPage": false,
                      "searchKey": "graphqlbackend.updateQueueResolver.Total",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *updateQueueResolver) Total() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *updateQueueResolver) Total() int32\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#checkMirrorRepositoryConnectionResult",
              "documentation": {
                "identifier": "checkMirrorRepositoryConnectionResult",
                "newPage": false,
                "searchKey": "graphqlbackend.checkMirrorRepositoryConnectionResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type checkMirrorRepositoryConnectionResult struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype checkMirrorRepositoryConnectionResult struct {\n\terrorMessage string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#checkMirrorRepositoryConnectionResult.Error",
                    "documentation": {
                      "identifier": "checkMirrorRepositoryConnectionResult.Error",
                      "newPage": false,
                      "searchKey": "graphqlbackend.checkMirrorRepositoryConnectionResult.Error",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *checkMirrorRepositoryConnectionResult) Error() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *checkMirrorRepositoryConnectionResult) Error() *string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repositoryStatsResolver",
              "documentation": {
                "identifier": "repositoryStatsResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.repositoryStatsResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repositoryStatsResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repositoryStatsResolver struct {\n\tgitDirBytes       uint64\n\tindexedLinesCount uint64\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryStatsResolver.GitDirBytes",
                    "documentation": {
                      "identifier": "repositoryStatsResolver.GitDirBytes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryStatsResolver.GitDirBytes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryStatsResolver) GitDirBytes() BigInt"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryStatsResolver) GitDirBytes() BigInt\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryStatsResolver.IndexedLinesCount",
                    "documentation": {
                      "identifier": "repositoryStatsResolver.IndexedLinesCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryStatsResolver.IndexedLinesCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryStatsResolver) IndexedLinesCount() BigInt"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryStatsResolver) IndexedLinesCount() BigInt\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexResolver",
              "documentation": {
                "identifier": "repositoryTextSearchIndexResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.repositoryTextSearchIndexResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repositoryTextSearchIndexResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repositoryTextSearchIndexResolver struct {\n\trepo   *RepositoryResolver\n\tclient repoLister\n\n\tonce  sync.Once\n\tentry *zoekt.RepoListEntry\n\terr   error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexResolver.resolve",
                    "documentation": {
                      "identifier": "repositoryTextSearchIndexResolver.resolve",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryTextSearchIndexResolver.resolve",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryTextSearchIndexResolver) resolve(ctx context.Context) (*zoekt.RepoListEntry, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryTextSearchIndexResolver) resolve(ctx context.Context) (*zoekt.RepoListEntry, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexResolver.Repository",
                    "documentation": {
                      "identifier": "repositoryTextSearchIndexResolver.Repository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryTextSearchIndexResolver.Repository",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryTextSearchIndexResolver) Repository() *RepositoryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryTextSearchIndexResolver) Repository() *RepositoryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexResolver.Status",
                    "documentation": {
                      "identifier": "repositoryTextSearchIndexResolver.Status",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryTextSearchIndexResolver.Status",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryTextSearchIndexResolver) Status(ctx context.Context) (*repositoryTextSearchIndexStatus, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryTextSearchIndexResolver) Status(ctx context.Context) (*repositoryTextSearchIndexStatus, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexResolver.Refs",
                    "documentation": {
                      "identifier": "repositoryTextSearchIndexResolver.Refs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryTextSearchIndexResolver.Refs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryTextSearchIndexResolver) Refs(ctx context.Context) ([]*repositoryTextSearchIndexedRef, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryTextSearchIndexResolver) Refs(ctx context.Context) ([]*repositoryTextSearchIndexedRef, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repoLister",
              "documentation": {
                "identifier": "repoLister",
                "newPage": false,
                "searchKey": "graphqlbackend.repoLister",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repoLister interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repoLister interface {\n\tList(ctx context.Context, q zoektquery.Q) (*zoekt.RepoList, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexStatus",
              "documentation": {
                "identifier": "repositoryTextSearchIndexStatus",
                "newPage": false,
                "searchKey": "graphqlbackend.repositoryTextSearchIndexStatus",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repositoryTextSearchIndexStatus struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repositoryTextSearchIndexStatus struct {\n\tentry zoekt.RepoListEntry\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexStatus.UpdatedAt",
                    "documentation": {
                      "identifier": "repositoryTextSearchIndexStatus.UpdatedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryTextSearchIndexStatus.UpdatedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryTextSearchIndexStatus) UpdatedAt() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryTextSearchIndexStatus) UpdatedAt() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexStatus.ContentByteSize",
                    "documentation": {
                      "identifier": "repositoryTextSearchIndexStatus.ContentByteSize",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryTextSearchIndexStatus.ContentByteSize",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryTextSearchIndexStatus) ContentByteSize() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryTextSearchIndexStatus) ContentByteSize() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexStatus.ContentFilesCount",
                    "documentation": {
                      "identifier": "repositoryTextSearchIndexStatus.ContentFilesCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryTextSearchIndexStatus.ContentFilesCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryTextSearchIndexStatus) ContentFilesCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryTextSearchIndexStatus) ContentFilesCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexStatus.IndexByteSize",
                    "documentation": {
                      "identifier": "repositoryTextSearchIndexStatus.IndexByteSize",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryTextSearchIndexStatus.IndexByteSize",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryTextSearchIndexStatus) IndexByteSize() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryTextSearchIndexStatus) IndexByteSize() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexStatus.IndexShardsCount",
                    "documentation": {
                      "identifier": "repositoryTextSearchIndexStatus.IndexShardsCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryTextSearchIndexStatus.IndexShardsCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryTextSearchIndexStatus) IndexShardsCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryTextSearchIndexStatus) IndexShardsCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexStatus.NewLinesCount",
                    "documentation": {
                      "identifier": "repositoryTextSearchIndexStatus.NewLinesCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryTextSearchIndexStatus.NewLinesCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryTextSearchIndexStatus) NewLinesCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryTextSearchIndexStatus) NewLinesCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexStatus.DefaultBranchNewLinesCount",
                    "documentation": {
                      "identifier": "repositoryTextSearchIndexStatus.DefaultBranchNewLinesCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryTextSearchIndexStatus.DefaultBranchNewLinesCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryTextSearchIndexStatus) DefaultBranchNewLinesCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryTextSearchIndexStatus) DefaultBranchNewLinesCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexStatus.OtherBranchesNewLinesCount",
                    "documentation": {
                      "identifier": "repositoryTextSearchIndexStatus.OtherBranchesNewLinesCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryTextSearchIndexStatus.OtherBranchesNewLinesCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryTextSearchIndexStatus) OtherBranchesNewLinesCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryTextSearchIndexStatus) OtherBranchesNewLinesCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexedRef",
              "documentation": {
                "identifier": "repositoryTextSearchIndexedRef",
                "newPage": false,
                "searchKey": "graphqlbackend.repositoryTextSearchIndexedRef",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repositoryTextSearchIndexedRef struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repositoryTextSearchIndexedRef struct {\n\tref           *GitRefResolver\n\tindexedCommit GitObjectID\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexedRef.Ref",
                    "documentation": {
                      "identifier": "repositoryTextSearchIndexedRef.Ref",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryTextSearchIndexedRef.Ref",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryTextSearchIndexedRef) Ref() *GitRefResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryTextSearchIndexedRef) Ref() *GitRefResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexedRef.Indexed",
                    "documentation": {
                      "identifier": "repositoryTextSearchIndexedRef.Indexed",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryTextSearchIndexedRef.Indexed",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryTextSearchIndexedRef) Indexed() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryTextSearchIndexedRef) Indexed() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexedRef.Current",
                    "documentation": {
                      "identifier": "repositoryTextSearchIndexedRef.Current",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryTextSearchIndexedRef.Current",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryTextSearchIndexedRef) Current(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryTextSearchIndexedRef) Current(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositoryTextSearchIndexedRef.IndexedCommit",
                    "documentation": {
                      "identifier": "repositoryTextSearchIndexedRef.IndexedCommit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositoryTextSearchIndexedRef.IndexedCommit",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryTextSearchIndexedRef) IndexedCommit() *gitObject"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryTextSearchIndexedRef) IndexedCommit() *gitObject\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#savedSearchResolver",
              "documentation": {
                "identifier": "savedSearchResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.savedSearchResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type savedSearchResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype savedSearchResolver struct {\n\tdb dbutil.DB\n\ts  types.SavedSearch\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#savedSearchResolver.ID",
                    "documentation": {
                      "identifier": "savedSearchResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.savedSearchResolver.ID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r savedSearchResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r savedSearchResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#savedSearchResolver.Notify",
                    "documentation": {
                      "identifier": "savedSearchResolver.Notify",
                      "newPage": false,
                      "searchKey": "graphqlbackend.savedSearchResolver.Notify",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r savedSearchResolver) Notify() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r savedSearchResolver) Notify() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#savedSearchResolver.NotifySlack",
                    "documentation": {
                      "identifier": "savedSearchResolver.NotifySlack",
                      "newPage": false,
                      "searchKey": "graphqlbackend.savedSearchResolver.NotifySlack",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r savedSearchResolver) NotifySlack() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r savedSearchResolver) NotifySlack() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#savedSearchResolver.Description",
                    "documentation": {
                      "identifier": "savedSearchResolver.Description",
                      "newPage": false,
                      "searchKey": "graphqlbackend.savedSearchResolver.Description",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r savedSearchResolver) Description() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r savedSearchResolver) Description() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#savedSearchResolver.Query",
                    "documentation": {
                      "identifier": "savedSearchResolver.Query",
                      "newPage": false,
                      "searchKey": "graphqlbackend.savedSearchResolver.Query",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r savedSearchResolver) Query() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r savedSearchResolver) Query() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#savedSearchResolver.Namespace",
                    "documentation": {
                      "identifier": "savedSearchResolver.Namespace",
                      "newPage": false,
                      "searchKey": "graphqlbackend.savedSearchResolver.Namespace",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r savedSearchResolver) Namespace(ctx context.Context) (*NamespaceResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r savedSearchResolver) Namespace(ctx context.Context) (*NamespaceResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#savedSearchResolver.SlackWebhookURL",
                    "documentation": {
                      "identifier": "savedSearchResolver.SlackWebhookURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.savedSearchResolver.SlackWebhookURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r savedSearchResolver) SlackWebhookURL() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r savedSearchResolver) SlackWebhookURL() *string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#SearchArgs",
              "documentation": {
                "identifier": "SearchArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.SearchArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchArgs struct {\n\tVersion        string\n\tPatternType    *string\n\tQuery          string\n\tAfter          *string\n\tFirst          *int32\n\tVersionContext *string\n\n\t// Stream if non-nil will stream all SearchEvents.\n\t//\n\t// This is how our streaming and our batch interface co-exist. When this\n\t// is set, it exposes a way to stream out results as we collect them.\n\t//\n\t// TODO(keegan) This is not our final design. For example this doesn't\n\t// allow us to stream out things like dynamic filters or take into account\n\t// AND/OR. However, streaming is behind a feature flag for now, so this is\n\t// to make it visible in the browser.\n\tStream streaming.Sender\n\n\t// For tests\n\tSettings *schema.Settings\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#SearchImplementer",
              "documentation": {
                "identifier": "SearchImplementer",
                "newPage": false,
                "searchKey": "graphqlbackend.SearchImplementer",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchImplementer interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchImplementer interface {\n\tResults(context.Context) (*SearchResultsResolver, error)\n\tSuggestions(context.Context, *searchSuggestionsArgs) ([]SearchSuggestionResolver, error)\n\t//lint:ignore U1000 is used by graphql via reflection\n\tStats(context.Context) (*searchResultsStats, error)\n\n\tInputs() run.SearchInputs\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewSearchImplementer",
                    "documentation": {
                      "identifier": "NewSearchImplementer",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewSearchImplementer",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewSearchImplementer(ctx context.Context, db dbutil.DB, args *SearchArgs) (_ SearchImplementer, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewSearchImplementer(ctx context.Context, db dbutil.DB, args *SearchArgs) (_ SearchImplementer, err error)\n```\n\nNewSearchImplementer returns a SearchImplementer that provides search results and suggestions. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchResolver",
              "documentation": {
                "identifier": "searchResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.searchResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type searchResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype searchResolver struct {\n\t*run.SearchInputs\n\tdb                  dbutil.DB\n\tinvalidateRepoCache bool // if true, invalidates the repo cache when evaluating search subexpressions.\n\n\t// stream if non-nil will send all search events we receive down it.\n\tstream streaming.Sender\n\n\t// Cached resolveRepositories results. We use a pointer to the mutex so that we\n\t// can copy the resolver, while sharing the mutex. If we didn't use a pointer,\n\t// the mutex would lead to unexpected behaviour.\n\treposMu  *sync.Mutex\n\tresolved *searchrepos.Resolved\n\trepoErr  error\n\n\tzoekt        *searchbackend.Zoekt\n\tsearcherURLs *endpoint.Map\n}\n```\n\nsearchResolver is a resolver for the GraphQL type `Search` \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.Inputs",
                    "documentation": {
                      "identifier": "searchResolver.Inputs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.Inputs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) Inputs() run.SearchInputs"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) Inputs() run.SearchInputs\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.rawQuery",
                    "documentation": {
                      "identifier": "searchResolver.rawQuery",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.rawQuery",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) rawQuery() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) rawQuery() string\n```\n\nrawQuery returns the original query string input. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.countIsSet",
                    "documentation": {
                      "identifier": "searchResolver.countIsSet",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.countIsSet",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) countIsSet() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) countIsSet() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.protocol",
                    "documentation": {
                      "identifier": "searchResolver.protocol",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.protocol",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) protocol() search.Protocol"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) protocol() search.Protocol\n```\n\nprotocol returns what type of search we are doing (batch, stream, paginated). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.resolveRepositories",
                    "documentation": {
                      "identifier": "searchResolver.resolveRepositories",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.resolveRepositories",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) resolveRepositories(ctx context.Context, opts resolveRepositoriesOpts) (resolved searchrepos.Resolved, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) resolveRepositories(ctx context.Context, opts resolveRepositoriesOpts) (resolved searchrepos.Resolved, err error)\n```\n\nresolveRepositories calls ResolveRepositories, caching the result for the common case where opts.effectiveRepoFieldValues == nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.suggestFilePaths",
                    "documentation": {
                      "identifier": "searchResolver.suggestFilePaths",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.suggestFilePaths",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) suggestFilePaths(ctx context.Context, limit int) ([]SearchSuggestionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) suggestFilePaths(ctx context.Context, limit int) ([]SearchSuggestionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.reposExist",
                    "documentation": {
                      "identifier": "searchResolver.reposExist",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.reposExist",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) reposExist(ctx context.Context, options searchrepos.Options) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) reposExist(ctx context.Context, options searchrepos.Options) bool\n```\n\nreposExist returns true if one or more repos resolve. If the attempt returns 0 repos or fails, it returns false. It is a helper function for raising NoResolvedRepos alerts with suggestions when we know the original query does not contain any repos to search. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.errorForNoResolvedRepos",
                    "documentation": {
                      "identifier": "searchResolver.errorForNoResolvedRepos",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.errorForNoResolvedRepos",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) errorForNoResolvedRepos(ctx context.Context) *errNoResolvedRepos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) errorForNoResolvedRepos(ctx context.Context) *errNoResolvedRepos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.errorForOverRepoLimit",
                    "documentation": {
                      "identifier": "searchResolver.errorForOverRepoLimit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.errorForOverRepoLimit",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) errorForOverRepoLimit(ctx context.Context) *errOverRepoLimit"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) errorForOverRepoLimit(ctx context.Context) *errOverRepoLimit\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.paginatedResults",
                    "documentation": {
                      "identifier": "searchResolver.paginatedResults",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.paginatedResults",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) paginatedResults(ctx context.Context) (result *SearchResults, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) paginatedResults(ctx context.Context) (result *SearchResults, err error)\n```\n\npaginatedResults handles serving paginated search queries. It's logic does not live alongside the non-paginated doResults because: \n\n1. It would introduce many `if r.pagination != nil` conditionals which would \n\n```\nmake that code harder to reason about.\n\n```\n2. That method is already very large and brittle, common logic can be \n\n```\nrefactored out instead.\n\n```\n3. The way that method operates (mixing in search result types depending on \n\n```\na timeout, searcing result types in parallel) is fundamentally incompatible\nwith the absolute ordering we do here for pagination.\n\n```\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.evaluateLeaf",
                    "documentation": {
                      "identifier": "searchResolver.evaluateLeaf",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.evaluateLeaf",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) evaluateLeaf(ctx context.Context) (_ *SearchResults, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) evaluateLeaf(ctx context.Context) (_ *SearchResults, err error)\n```\n\nevaluateLeaf performs a single search operation and corresponds to the evaluation of leaf expression in a query. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.evaluateAnd",
                    "documentation": {
                      "identifier": "searchResolver.evaluateAnd",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.evaluateAnd",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) evaluateAnd(ctx context.Context, q query.Basic) (*SearchResults, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) evaluateAnd(ctx context.Context, q query.Basic) (*SearchResults, error)\n```\n\nevaluateAnd performs set intersection on result sets. It collects results for all expressions that are ANDed together by searching for each subexpression and then intersects those results that are in the same repo/file path. To collect N results for count:N, we need to opportunistically ask for more than N results for each subexpression (since intersect can never yield more than N, and likely yields fewer than N results). If the intersection does not yield N results, and is not exhaustive for every expression, we rerun the search by doubling count again. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.evaluateOr",
                    "documentation": {
                      "identifier": "searchResolver.evaluateOr",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.evaluateOr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) evaluateOr(ctx context.Context, q query.Basic) (*SearchResults, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) evaluateOr(ctx context.Context, q query.Basic) (*SearchResults, error)\n```\n\nevaluateOr performs set union on result sets. It collects results for all expressions that are ORed together by searching for each subexpression. If the maximum number of results are reached after evaluating a subexpression, we shortcircuit and return results immediately. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.setQuery",
                    "documentation": {
                      "identifier": "searchResolver.setQuery",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.setQuery",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) setQuery(q []query.Node)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) setQuery(q []query.Node)\n```\n\nsetQuery sets a new query in the search resolver, for potentially repeated calls in the search pipeline. The important part is it takes care of invalidating cached repo info. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.evaluatePatternExpression",
                    "documentation": {
                      "identifier": "searchResolver.evaluatePatternExpression",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.evaluatePatternExpression",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) evaluatePatternExpression(ctx context.Context, q query.Basic) (*SearchResults, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) evaluatePatternExpression(ctx context.Context, q query.Basic) (*SearchResults, error)\n```\n\nevaluatePatternExpression evaluates a search pattern containing and/or expressions. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.evaluate",
                    "documentation": {
                      "identifier": "searchResolver.evaluate",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.evaluate",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) evaluate(ctx context.Context, q query.Basic) (*SearchResults, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) evaluate(ctx context.Context, q query.Basic) (*SearchResults, error)\n```\n\nevaluate evaluates all expressions of a search query. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.logBatch",
                    "documentation": {
                      "identifier": "searchResolver.logBatch",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.logBatch",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) logBatch(ctx context.Context, srr *SearchResultsResolver, start time.Time, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) logBatch(ctx context.Context, srr *SearchResultsResolver, start time.Time, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.resultsBatch",
                    "documentation": {
                      "identifier": "searchResolver.resultsBatch",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.resultsBatch",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) resultsBatch(ctx context.Context) (*SearchResultsResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) resultsBatch(ctx context.Context) (*SearchResultsResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.resultsStreaming",
                    "documentation": {
                      "identifier": "searchResolver.resultsStreaming",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.resultsStreaming",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) resultsStreaming(ctx context.Context) (*SearchResultsResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) resultsStreaming(ctx context.Context) (*SearchResultsResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.resultsToResolver",
                    "documentation": {
                      "identifier": "searchResolver.resultsToResolver",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.resultsToResolver",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) resultsToResolver(results *SearchResults) *SearchResultsResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) resultsToResolver(results *SearchResults) *SearchResultsResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.Results",
                    "documentation": {
                      "identifier": "searchResolver.Results",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) Results(ctx context.Context) (*SearchResultsResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) Results(ctx context.Context) (*SearchResultsResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.resultsRecursive",
                    "documentation": {
                      "identifier": "searchResolver.resultsRecursive",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.resultsRecursive",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) resultsRecursive(ctx context.Context, plan query.Plan) (sr *SearchResults, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) resultsRecursive(ctx context.Context, plan query.Plan) (sr *SearchResults, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.resultsWithTimeoutSuggestion",
                    "documentation": {
                      "identifier": "searchResolver.resultsWithTimeoutSuggestion",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.resultsWithTimeoutSuggestion",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) resultsWithTimeoutSuggestion(ctx context.Context) (*SearchResults, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) resultsWithTimeoutSuggestion(ctx context.Context) (*SearchResults, error)\n```\n\nresultsWithTimeoutSuggestion calls doResults, and in case of deadline exceeded returns a search alert with a did-you-mean link for the same query with a longer timeout. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.Stats",
                    "documentation": {
                      "identifier": "searchResolver.Stats",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.Stats",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) Stats(ctx context.Context) (stats *searchResultsStats, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) Stats(ctx context.Context) (stats *searchResultsStats, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.searchTimeoutFieldSet",
                    "documentation": {
                      "identifier": "searchResolver.searchTimeoutFieldSet",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.searchTimeoutFieldSet",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) searchTimeoutFieldSet() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) searchTimeoutFieldSet() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.withTimeout",
                    "documentation": {
                      "identifier": "searchResolver.withTimeout",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.withTimeout",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) withTimeout(ctx context.Context) (context.Context, context.CancelFunc, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) withTimeout(ctx context.Context) (context.Context, context.CancelFunc, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.determineResultTypes",
                    "documentation": {
                      "identifier": "searchResolver.determineResultTypes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.determineResultTypes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) determineResultTypes(args search.TextParameters, forceTypes result.Types) result.Types"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) determineResultTypes(args search.TextParameters, forceTypes result.Types) result.Types\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.determineRepos",
                    "documentation": {
                      "identifier": "searchResolver.determineRepos",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.determineRepos",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) determineRepos(ctx context.Context, tr *trace.Trace, start time.Time) (*searchrepos.Resolved, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) determineRepos(ctx context.Context, tr *trace.Trace, start time.Time) (*searchrepos.Resolved, error)\n```\n\ndetermineRepos wraps resolveRepositories. It interprets the response and error to see if an alert needs to be returned. Only one of the return values will be non-nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.isGlobalSearch",
                    "documentation": {
                      "identifier": "searchResolver.isGlobalSearch",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.isGlobalSearch",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) isGlobalSearch() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) isGlobalSearch() bool\n```\n\nisGlobalSearch returns true if the query does not contain repo, repogroup, or repohasfile filters. For structural queries, queries with version context, and queries with non-global search context, isGlobalSearch always return false. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.doResults",
                    "documentation": {
                      "identifier": "searchResolver.doResults",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.doResults",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) doResults(ctx context.Context, forceResultTypes result.Types) (_ *SearchResults, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) doResults(ctx context.Context, forceResultTypes result.Types) (_ *SearchResults, err error)\n```\n\ndoResults is one of the highest level search functions that handles finding results. \n\nIf forceOnlyResultType is specified, only results of the given type are returned, regardless of what `type:` is specified in the query string. \n\nPartial results AND an error may be returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.sortResults",
                    "documentation": {
                      "identifier": "searchResolver.sortResults",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.sortResults",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) sortResults(results []result.Match)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) sortResults(results []result.Match)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.getExactFilePatterns",
                    "documentation": {
                      "identifier": "searchResolver.getExactFilePatterns",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.getExactFilePatterns",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) getExactFilePatterns() map[string]struct{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) getExactFilePatterns() map[string]struct{}\n```\n\ngetExactFilePatterns returns the set of file patterns without glob syntax. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResolver.Suggestions",
                    "documentation": {
                      "identifier": "searchResolver.Suggestions",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResolver.Suggestions",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchResolver) Suggestions(ctx context.Context, args *searchSuggestionsArgs) ([]SearchSuggestionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchResolver) Suggestions(ctx context.Context, args *searchSuggestionsArgs) ([]SearchSuggestionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#resolveRepositoriesOpts",
              "documentation": {
                "identifier": "resolveRepositoriesOpts",
                "newPage": false,
                "searchKey": "graphqlbackend.resolveRepositoriesOpts",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type resolveRepositoriesOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype resolveRepositoriesOpts struct {\n\teffectiveRepoFieldValues []string\n\n\tlimit int // Maximum repositories to return\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#badRequestError",
              "documentation": {
                "identifier": "badRequestError",
                "newPage": false,
                "searchKey": "graphqlbackend.badRequestError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type badRequestError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype badRequestError struct {\n\terr error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#badRequestError.BadRequest",
                    "documentation": {
                      "identifier": "badRequestError.BadRequest",
                      "newPage": false,
                      "searchKey": "graphqlbackend.badRequestError.BadRequest",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *badRequestError) BadRequest() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *badRequestError) BadRequest() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#badRequestError.Error",
                    "documentation": {
                      "identifier": "badRequestError.Error",
                      "newPage": false,
                      "searchKey": "graphqlbackend.badRequestError.Error",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *badRequestError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *badRequestError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#badRequestError.Cause",
                    "documentation": {
                      "identifier": "badRequestError.Cause",
                      "newPage": false,
                      "searchKey": "graphqlbackend.badRequestError.Cause",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *badRequestError) Cause() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *badRequestError) Cause() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchAlert",
              "documentation": {
                "identifier": "searchAlert",
                "newPage": false,
                "searchKey": "graphqlbackend.searchAlert",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type searchAlert struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype searchAlert struct {\n\tprometheusType  string\n\ttitle           string\n\tdescription     string\n\tproposedQueries []*searchQueryDescription\n\t// The higher the priority the more important is the alert.\n\tpriority int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#alertForCappedAndExpression",
                    "documentation": {
                      "identifier": "alertForCappedAndExpression",
                      "newPage": false,
                      "searchKey": "graphqlbackend.alertForCappedAndExpression",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func alertForCappedAndExpression() *searchAlert"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc alertForCappedAndExpression() *searchAlert\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#alertForQuery",
                    "documentation": {
                      "identifier": "alertForQuery",
                      "newPage": false,
                      "searchKey": "graphqlbackend.alertForQuery",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func alertForQuery(queryString string, err error) *searchAlert"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc alertForQuery(queryString string, err error) *searchAlert\n```\n\nalertForQuery converts errors in the query to search alerts. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#alertForTimeout",
                    "documentation": {
                      "identifier": "alertForTimeout",
                      "newPage": false,
                      "searchKey": "graphqlbackend.alertForTimeout",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func alertForTimeout(usedTime time.Duration, suggestTime time.Duration, r *searchResolver) *searchAlert"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc alertForTimeout(usedTime time.Duration, suggestTime time.Duration, r *searchResolver) *searchAlert\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#alertForStructuralSearchNotSet",
                    "documentation": {
                      "identifier": "alertForStructuralSearchNotSet",
                      "newPage": false,
                      "searchKey": "graphqlbackend.alertForStructuralSearchNotSet",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func alertForStructuralSearchNotSet(queryString string) *searchAlert"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc alertForStructuralSearchNotSet(queryString string) *searchAlert\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#alertForMissingRepoRevs",
                    "documentation": {
                      "identifier": "alertForMissingRepoRevs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.alertForMissingRepoRevs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func alertForMissingRepoRevs(missingRepoRevs []*search.RepositoryRevisions) *searchAlert"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc alertForMissingRepoRevs(missingRepoRevs []*search.RepositoryRevisions) *searchAlert\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#alertForError",
                    "documentation": {
                      "identifier": "alertForError",
                      "newPage": false,
                      "searchKey": "graphqlbackend.alertForError",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func alertForError(err error) *searchAlert"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc alertForError(err error) *searchAlert\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#errorToAlert",
                    "documentation": {
                      "identifier": "errorToAlert",
                      "newPage": false,
                      "searchKey": "graphqlbackend.errorToAlert",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func errorToAlert(err error) (*searchAlert, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc errorToAlert(err error) (*searchAlert, error)\n```\n\nerrorToAlert is intended to be a catch-all function for converting all errors into alerts. The intent here is to create alerts as close to the API boundary as possible, so this should be called immediately before creating the SearchResultsResolver. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#maxAlertByPriority",
                    "documentation": {
                      "identifier": "maxAlertByPriority",
                      "newPage": false,
                      "searchKey": "graphqlbackend.maxAlertByPriority",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func maxAlertByPriority(a, b *searchAlert) *searchAlert"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc maxAlertByPriority(a, b *searchAlert) *searchAlert\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#multierrorToAlert",
                    "documentation": {
                      "identifier": "multierrorToAlert",
                      "newPage": false,
                      "searchKey": "graphqlbackend.multierrorToAlert",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func multierrorToAlert(me *multierror.Error) (resAlert *searchAlert, resErr error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc multierrorToAlert(me *multierror.Error) (resAlert *searchAlert, resErr error)\n```\n\nmultierrorToAlert converts a multierror.Error into the highest priority alert for the errors contained in it, and a new error with all the errors that could not be converted to alerts. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#alertForStalePermissions",
                    "documentation": {
                      "identifier": "alertForStalePermissions",
                      "newPage": false,
                      "searchKey": "graphqlbackend.alertForStalePermissions",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func alertForStalePermissions() *searchAlert"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc alertForStalePermissions() *searchAlert\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#alertForInvalidRevision",
                    "documentation": {
                      "identifier": "alertForInvalidRevision",
                      "newPage": false,
                      "searchKey": "graphqlbackend.alertForInvalidRevision",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func alertForInvalidRevision(revision string) *searchAlert"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc alertForInvalidRevision(revision string) *searchAlert\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchAlert.PrometheusType",
                    "documentation": {
                      "identifier": "searchAlert.PrometheusType",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchAlert.PrometheusType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a searchAlert) PrometheusType() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a searchAlert) PrometheusType() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchAlert.Title",
                    "documentation": {
                      "identifier": "searchAlert.Title",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchAlert.Title",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a searchAlert) Title() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a searchAlert) Title() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchAlert.Description",
                    "documentation": {
                      "identifier": "searchAlert.Description",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchAlert.Description",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a searchAlert) Description() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a searchAlert) Description() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchAlert.ProposedQueries",
                    "documentation": {
                      "identifier": "searchAlert.ProposedQueries",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchAlert.ProposedQueries",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a searchAlert) ProposedQueries() *[]*searchQueryDescription"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a searchAlert) ProposedQueries() *[]*searchQueryDescription\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchAlert.wrapResults",
                    "documentation": {
                      "identifier": "searchAlert.wrapResults",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchAlert.wrapResults",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a searchAlert) wrapResults() *SearchResults"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a searchAlert) wrapResults() *SearchResults\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchAlert.wrapSearchImplementer",
                    "documentation": {
                      "identifier": "searchAlert.wrapSearchImplementer",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchAlert.wrapSearchImplementer",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a searchAlert) wrapSearchImplementer(db dbutil.DB) *alertSearchImplementer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a searchAlert) wrapSearchImplementer(db dbutil.DB) *alertSearchImplementer\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#errNoResolvedRepos",
              "documentation": {
                "identifier": "errNoResolvedRepos",
                "newPage": false,
                "searchKey": "graphqlbackend.errNoResolvedRepos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type errNoResolvedRepos struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype errNoResolvedRepos struct {\n\tPrometheusType  string\n\tTitle           string\n\tDescription     string\n\tProposedQueries []*searchQueryDescription\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#errNoResolvedRepos.Error",
                    "documentation": {
                      "identifier": "errNoResolvedRepos.Error",
                      "newPage": false,
                      "searchKey": "graphqlbackend.errNoResolvedRepos.Error",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *errNoResolvedRepos) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *errNoResolvedRepos) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#errOverRepoLimit",
              "documentation": {
                "identifier": "errOverRepoLimit",
                "newPage": false,
                "searchKey": "graphqlbackend.errOverRepoLimit",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type errOverRepoLimit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype errOverRepoLimit struct {\n\tProposedQueries []*searchQueryDescription\n\tDescription     string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#errOverRepoLimit.Error",
                    "documentation": {
                      "identifier": "errOverRepoLimit.Error",
                      "newPage": false,
                      "searchKey": "graphqlbackend.errOverRepoLimit.Error",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *errOverRepoLimit) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *errOverRepoLimit) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#missingRepoRevsError",
              "documentation": {
                "identifier": "missingRepoRevsError",
                "newPage": false,
                "searchKey": "graphqlbackend.missingRepoRevsError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type missingRepoRevsError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype missingRepoRevsError struct {\n\tMissing []*search.RepositoryRevisions\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#missingRepoRevsError.Error",
                    "documentation": {
                      "identifier": "missingRepoRevsError.Error",
                      "newPage": false,
                      "searchKey": "graphqlbackend.missingRepoRevsError.Error",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*missingRepoRevsError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*missingRepoRevsError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#alertSearchImplementer",
              "documentation": {
                "identifier": "alertSearchImplementer",
                "newPage": false,
                "searchKey": "graphqlbackend.alertSearchImplementer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type alertSearchImplementer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype alertSearchImplementer struct {\n\tdb    dbutil.DB\n\talert searchAlert\n}\n```\n\nalertSearchImplementer is a light wrapper type around an alert that implements SearchImplementer. This helps avoid needing to have a db on the searchAlert type \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#alertSearchImplementer.Results",
                    "documentation": {
                      "identifier": "alertSearchImplementer.Results",
                      "newPage": false,
                      "searchKey": "graphqlbackend.alertSearchImplementer.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a alertSearchImplementer) Results(context.Context) (*SearchResultsResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a alertSearchImplementer) Results(context.Context) (*SearchResultsResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#alertSearchImplementer.Suggestions",
                    "documentation": {
                      "identifier": "alertSearchImplementer.Suggestions",
                      "newPage": false,
                      "searchKey": "graphqlbackend.alertSearchImplementer.Suggestions",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (alertSearchImplementer) Suggestions(context.Context, *searchSuggestionsArgs) ([]SearchSuggestionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (alertSearchImplementer) Suggestions(context.Context, *searchSuggestionsArgs) ([]SearchSuggestionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#alertSearchImplementer.Stats",
                    "documentation": {
                      "identifier": "alertSearchImplementer.Stats",
                      "newPage": false,
                      "searchKey": "graphqlbackend.alertSearchImplementer.Stats",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (alertSearchImplementer) Stats(context.Context) (*searchResultsStats, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (alertSearchImplementer) Stats(context.Context) (*searchResultsStats, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#alertSearchImplementer.Inputs",
                    "documentation": {
                      "identifier": "alertSearchImplementer.Inputs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.alertSearchImplementer.Inputs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (alertSearchImplementer) Inputs() run.SearchInputs"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (alertSearchImplementer) Inputs() run.SearchInputs\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#alertObserver",
              "documentation": {
                "identifier": "alertObserver",
                "newPage": false,
                "searchKey": "graphqlbackend.alertObserver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type alertObserver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype alertObserver struct {\n\t// Inputs are used to generate alert messages based on the query.\n\tInputs *run.SearchInputs\n\n\t// Update state.\n\thasResults bool\n\n\t// Error state. Can be called concurrently.\n\tmu    sync.Mutex\n\talert *searchAlert\n\terr   error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#alertObserver.Error",
                    "documentation": {
                      "identifier": "alertObserver.Error",
                      "newPage": false,
                      "searchKey": "graphqlbackend.alertObserver.Error",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *alertObserver) Error(ctx context.Context, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *alertObserver) Error(ctx context.Context, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#alertObserver.update",
                    "documentation": {
                      "identifier": "alertObserver.update",
                      "newPage": false,
                      "searchKey": "graphqlbackend.alertObserver.update",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *alertObserver) update(alert *searchAlert)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *alertObserver) update(alert *searchAlert)\n```\n\nupdate to alert if it is more important than our current alert. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#alertObserver.Done",
                    "documentation": {
                      "identifier": "alertObserver.Done",
                      "newPage": false,
                      "searchKey": "graphqlbackend.alertObserver.Done",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *alertObserver) Done(stats *streaming.Stats) (*searchAlert, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *alertObserver) Done(stats *streaming.Stats) (*searchAlert, error)\n```\n\nDone returns the highest priority alert and a multierror.Error containing all errors that could not be converted to alerts. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchContextsOrderBy",
              "documentation": {
                "identifier": "searchContextsOrderBy",
                "newPage": false,
                "searchKey": "graphqlbackend.searchContextsOrderBy",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type searchContextsOrderBy string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype searchContextsOrderBy string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchContextResolver",
              "documentation": {
                "identifier": "searchContextResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.searchContextResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type searchContextResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype searchContextResolver struct {\n\tsc *types.SearchContext\n\tdb dbutil.DB\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextResolver.ID",
                    "documentation": {
                      "identifier": "searchContextResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextResolver.ID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchContextResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchContextResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextResolver.Name",
                    "documentation": {
                      "identifier": "searchContextResolver.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextResolver.Name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchContextResolver) Name(ctx context.Context) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchContextResolver) Name(ctx context.Context) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextResolver.Description",
                    "documentation": {
                      "identifier": "searchContextResolver.Description",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextResolver.Description",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchContextResolver) Description(ctx context.Context) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchContextResolver) Description(ctx context.Context) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextResolver.Public",
                    "documentation": {
                      "identifier": "searchContextResolver.Public",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextResolver.Public",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchContextResolver) Public(ctx context.Context) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchContextResolver) Public(ctx context.Context) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextResolver.AutoDefined",
                    "documentation": {
                      "identifier": "searchContextResolver.AutoDefined",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextResolver.AutoDefined",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchContextResolver) AutoDefined(ctx context.Context) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchContextResolver) AutoDefined(ctx context.Context) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextResolver.Spec",
                    "documentation": {
                      "identifier": "searchContextResolver.Spec",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextResolver.Spec",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchContextResolver) Spec() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchContextResolver) Spec() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextResolver.UpdatedAt",
                    "documentation": {
                      "identifier": "searchContextResolver.UpdatedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextResolver.UpdatedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchContextResolver) UpdatedAt(ctx context.Context) DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchContextResolver) UpdatedAt(ctx context.Context) DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextResolver.Namespace",
                    "documentation": {
                      "identifier": "searchContextResolver.Namespace",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextResolver.Namespace",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchContextResolver) Namespace(ctx context.Context) (*NamespaceResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchContextResolver) Namespace(ctx context.Context) (*NamespaceResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextResolver.ViewerCanManage",
                    "documentation": {
                      "identifier": "searchContextResolver.ViewerCanManage",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextResolver.ViewerCanManage",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchContextResolver) ViewerCanManage(ctx context.Context) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchContextResolver) ViewerCanManage(ctx context.Context) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextResolver.Repositories",
                    "documentation": {
                      "identifier": "searchContextResolver.Repositories",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextResolver.Repositories",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchContextResolver) Repositories(ctx context.Context) ([]*searchContextRepositoryRevisionsResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchContextResolver) Repositories(ctx context.Context) ([]*searchContextRepositoryRevisionsResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchContextInputArgs",
              "documentation": {
                "identifier": "searchContextInputArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.searchContextInputArgs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type searchContextInputArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype searchContextInputArgs struct {\n\tName        string\n\tDescription string\n\tPublic      bool\n\tNamespace   *graphql.ID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchContextEditInputArgs",
              "documentation": {
                "identifier": "searchContextEditInputArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.searchContextEditInputArgs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type searchContextEditInputArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype searchContextEditInputArgs struct {\n\tName        string\n\tDescription string\n\tPublic      bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchContextRepositoryRevisionsInputArgs",
              "documentation": {
                "identifier": "searchContextRepositoryRevisionsInputArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.searchContextRepositoryRevisionsInputArgs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type searchContextRepositoryRevisionsInputArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype searchContextRepositoryRevisionsInputArgs struct {\n\tRepositoryID graphql.ID\n\tRevisions    []string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#createSearchContextArgs",
              "documentation": {
                "identifier": "createSearchContextArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.createSearchContextArgs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type createSearchContextArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype createSearchContextArgs struct {\n\tSearchContext searchContextInputArgs\n\tRepositories  []searchContextRepositoryRevisionsInputArgs\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#updateSearchContextArgs",
              "documentation": {
                "identifier": "updateSearchContextArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.updateSearchContextArgs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type updateSearchContextArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype updateSearchContextArgs struct {\n\tID            graphql.ID\n\tSearchContext searchContextEditInputArgs\n\tRepositories  []searchContextRepositoryRevisionsInputArgs\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchContextRepositoryRevisionsResolver",
              "documentation": {
                "identifier": "searchContextRepositoryRevisionsResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.searchContextRepositoryRevisionsResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type searchContextRepositoryRevisionsResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype searchContextRepositoryRevisionsResolver struct {\n\trepository *RepositoryResolver\n\trevisions  []string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextRepositoryRevisionsResolver.Repository",
                    "documentation": {
                      "identifier": "searchContextRepositoryRevisionsResolver.Repository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextRepositoryRevisionsResolver.Repository",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchContextRepositoryRevisionsResolver) Repository(ctx context.Context) *RepositoryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchContextRepositoryRevisionsResolver) Repository(ctx context.Context) *RepositoryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextRepositoryRevisionsResolver.Revisions",
                    "documentation": {
                      "identifier": "searchContextRepositoryRevisionsResolver.Revisions",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextRepositoryRevisionsResolver.Revisions",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *searchContextRepositoryRevisionsResolver) Revisions(ctx context.Context) []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *searchContextRepositoryRevisionsResolver) Revisions(ctx context.Context) []string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#listSearchContextsArgs",
              "documentation": {
                "identifier": "listSearchContextsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.listSearchContextsArgs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type listSearchContextsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype listSearchContextsArgs struct {\n\tFirst      int32\n\tAfter      *string\n\tQuery      *string\n\tNamespaces []*graphql.ID\n\tOrderBy    searchContextsOrderBy\n\tDescending bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchContextConnection",
              "documentation": {
                "identifier": "searchContextConnection",
                "newPage": false,
                "searchKey": "graphqlbackend.searchContextConnection",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type searchContextConnection struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype searchContextConnection struct {\n\tafterCursor    int32\n\tsearchContexts []*searchContextResolver\n\ttotalCount     int32\n\thasNextPage    bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextConnection.Nodes",
                    "documentation": {
                      "identifier": "searchContextConnection.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextConnection.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *searchContextConnection) Nodes(ctx context.Context) ([]*searchContextResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *searchContextConnection) Nodes(ctx context.Context) ([]*searchContextResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextConnection.TotalCount",
                    "documentation": {
                      "identifier": "searchContextConnection.TotalCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextConnection.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *searchContextConnection) TotalCount(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *searchContextConnection) TotalCount(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextConnection.PageInfo",
                    "documentation": {
                      "identifier": "searchContextConnection.PageInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextConnection.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *searchContextConnection) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *searchContextConnection) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchFilterSuggestions",
              "documentation": {
                "identifier": "searchFilterSuggestions",
                "newPage": false,
                "searchKey": "graphqlbackend.searchFilterSuggestions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type searchFilterSuggestions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype searchFilterSuggestions struct {\n\trepogroups []string\n\trepos      []string\n}\n```\n\nsearchFilterSuggestions holds suggestions of search filters and their default values. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchFilterSuggestions.Repogroup",
                    "documentation": {
                      "identifier": "searchFilterSuggestions.Repogroup",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchFilterSuggestions.Repogroup",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *searchFilterSuggestions) Repogroup() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *searchFilterSuggestions) Repogroup() []string\n```\n\nRepogroup returns all repository groups defined in the settings. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchFilterSuggestions.Repo",
                    "documentation": {
                      "identifier": "searchFilterSuggestions.Repo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchFilterSuggestions.Repo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *searchFilterSuggestions) Repo() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *searchFilterSuggestions) Repo() []string\n```\n\nRepo returns a list of repositories as the default value for suggestion. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repoPaginationPlan",
              "documentation": {
                "identifier": "repoPaginationPlan",
                "newPage": false,
                "searchKey": "graphqlbackend.repoPaginationPlan",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repoPaginationPlan struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repoPaginationPlan struct {\n\t// pagination is the pagination request we're trying to fulfill.\n\tpagination *run.SearchPaginationInfo\n\n\t// repositories is the exhaustive and complete list of sorted repositories\n\t// to be searched over multiple requests.\n\trepositories []*search.RepositoryRevisions\n\n\t// parameters for controlling the size of batches that the executor is\n\t// called to search. The final batch size is calculated as:\n\t//\n\t// \tbatchSize = numTotalReposOnSourcegraph() / searchBucketDivisor\n\t//\n\t// With the additional constraint that it must be at least min and no\n\t// larger than max.\n\tsearchBucketDivisor              int\n\tsearchBucketMin, searchBucketMax int\n\n\tmockNumTotalRepos func() int\n}\n```\n\nrepoPaginationPlan describes a plan for executing a search function that searches only over a set of repositories (i.e. the search function offers no pagination or result-level pagination capabilities) to provide result-level pagination. That is, if you have a function which can provide a complete list of results for a given repository, this planner can be used to implement result-level pagination on top of that function. \n\nIt does this by searching over a globally-sorted list of repositories in batches. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repoPaginationPlan.execute",
                    "documentation": {
                      "identifier": "repoPaginationPlan.execute",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repoPaginationPlan.execute",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *repoPaginationPlan) execute(ctx context.Context, repoStore *database.RepoStore, exec executor) (c *run.SearchCursor, results []result.Match, common *streaming.Stats, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *repoPaginationPlan) execute(ctx context.Context, repoStore *database.RepoStore, exec executor) (c *run.SearchCursor, results []result.Match, common *streaming.Stats, err error)\n```\n\nexecute executes the repository pagination plan by invoking the executor to search batches of repositories. \n\nIf the executor returns any error, the search will be cancelled and the error returned. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#executor",
              "documentation": {
                "identifier": "executor",
                "newPage": false,
                "searchKey": "graphqlbackend.executor",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type executor func(batch []*github.com/sourcegraph/sourcegraph/internal/search.RepositoryRevisions) ([]github.com/sourcegraph/sourcegraph/internal/search/result.Match, *github.com/sourcegraph/sourcegraph/internal/search/streaming.Stats, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype executor func(batch []*search.RepositoryRevisions) ([]result.Match, *streaming.Stats, error)\n```\n\nexecutor is a function which searches a batch of repositories. \n\nA non-nil Stats must always be returned, even if an error is returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#slicedSearchResults",
              "documentation": {
                "identifier": "slicedSearchResults",
                "newPage": false,
                "searchKey": "graphqlbackend.slicedSearchResults",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type slicedSearchResults struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype slicedSearchResults struct {\n\t// results is the new results, sliced.\n\tresults []result.Match\n\n\t// common is the new common results structure, updated to reflect the sliced results only.\n\tcommon *streaming.Stats\n\n\t// resultOffset indicates where the search would continue within the last\n\t// repository whose results were consumed. For example:\n\t//\n\t// \tlimit := 5\n\t// \tresults := [a1, a2, a3, b1, b2, b3, c1, c2, c3]\n\t// \tsliceSearchResults(results, ..., limit).resultOffset = 2 // in repository B, resume at result offset 2 (b3)\n\t//\n\tresultOffset int32\n\n\t// limitHit indicates if the limit was hit and results were truncated.\n\tlimitHit bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#sliceSearchResults",
                    "documentation": {
                      "identifier": "sliceSearchResults",
                      "newPage": false,
                      "searchKey": "graphqlbackend.sliceSearchResults",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func sliceSearchResults(results []result.Match, common *streaming.Stats, offset, limit int) (final slicedSearchResults)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc sliceSearchResults(results []result.Match, common *streaming.Stats, offset, limit int) (final slicedSearchResults)\n```\n\nsliceSearchResults effectively slices results[offset:offset+limit] and returns an updated Stats structure to reflect that, as well as information about the slicing that was performed. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#numTotalReposCache",
              "documentation": {
                "identifier": "numTotalReposCache",
                "newPage": false,
                "searchKey": "graphqlbackend.numTotalReposCache",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type numTotalReposCache struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype numTotalReposCache struct {\n\tsync.RWMutex\n\tlastUpdate time.Time\n\tcount      int\n}\n```\n\nSince we will need to know the number of total repos on Sourcegraph for every paginated search request, but the exact number doesn't matter, we cache the result for a minute to avoid executing many DB count operations. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#numTotalReposCache.get",
                    "documentation": {
                      "identifier": "numTotalReposCache.get",
                      "newPage": false,
                      "searchKey": "graphqlbackend.numTotalReposCache.get",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *numTotalReposCache) get(ctx context.Context, repoStore *database.RepoStore) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *numTotalReposCache) get(ctx context.Context, repoStore *database.RepoStore) int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchQueryDescription",
              "documentation": {
                "identifier": "searchQueryDescription",
                "newPage": false,
                "searchKey": "graphqlbackend.searchQueryDescription",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type searchQueryDescription struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype searchQueryDescription struct {\n\tdescription string\n\tquery       string\n\tpatternType query.SearchType\n}\n```\n\nsearchQueryDescription is a type for the SearchQueryDescription resolver used by SearchAlert. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchQueryDescription.Query",
                    "documentation": {
                      "identifier": "searchQueryDescription.Query",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchQueryDescription.Query",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q searchQueryDescription) Query() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q searchQueryDescription) Query() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchQueryDescription.Description",
                    "documentation": {
                      "identifier": "searchQueryDescription.Description",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchQueryDescription.Description",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q searchQueryDescription) Description() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q searchQueryDescription) Description() *string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchResultMatchResolver",
              "documentation": {
                "identifier": "searchResultMatchResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.searchResultMatchResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type searchResultMatchResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype searchResultMatchResolver struct {\n\turl        string\n\tbody       string\n\thighlights []result.HighlightedRange\n}\n```\n\nA resolver for the GraphQL type GenericSearchMatch \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResultMatchResolver.URL",
                    "documentation": {
                      "identifier": "searchResultMatchResolver.URL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResultMatchResolver.URL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *searchResultMatchResolver) URL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *searchResultMatchResolver) URL() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResultMatchResolver.Body",
                    "documentation": {
                      "identifier": "searchResultMatchResolver.Body",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResultMatchResolver.Body",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *searchResultMatchResolver) Body() Markdown"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *searchResultMatchResolver) Body() Markdown\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResultMatchResolver.Highlights",
                    "documentation": {
                      "identifier": "searchResultMatchResolver.Highlights",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResultMatchResolver.Highlights",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *searchResultMatchResolver) Highlights() []highlightedRangeResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *searchResultMatchResolver) Highlights() []highlightedRangeResolver\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver",
              "documentation": {
                "identifier": "SearchResultsResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.SearchResultsResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchResultsResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchResultsResolver struct {\n\tdb dbutil.DB\n\t*SearchResults\n\n\t// limit is the maximum number of SearchResults to send back to the user.\n\tlimit int\n\n\t// The time it took to compute all results.\n\telapsed time.Duration\n\n\t// cache for user settings. Ideally this should be set just once in the code path\n\t// by an upstream resolver\n\tUserSettings *schema.Settings\n}\n```\n\nSearchResultsResolver is a resolver for the GraphQL type `SearchResults` \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver.PageInfo",
                    "documentation": {
                      "identifier": "SearchResultsResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.SearchResultsResolver.PageInfo",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *SearchResultsResolver) PageInfo() *graphqlutil.PageInfo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *SearchResultsResolver) PageInfo() *graphqlutil.PageInfo\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver.LimitHit",
                    "documentation": {
                      "identifier": "SearchResultsResolver.LimitHit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.SearchResultsResolver.LimitHit",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *SearchResultsResolver) LimitHit() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *SearchResultsResolver) LimitHit() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver.Repositories",
                    "documentation": {
                      "identifier": "SearchResultsResolver.Repositories",
                      "newPage": false,
                      "searchKey": "graphqlbackend.SearchResultsResolver.Repositories",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *SearchResultsResolver) Repositories() []*RepositoryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *SearchResultsResolver) Repositories() []*RepositoryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver.RepositoriesCount",
                    "documentation": {
                      "identifier": "SearchResultsResolver.RepositoriesCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.SearchResultsResolver.RepositoriesCount",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *SearchResultsResolver) RepositoriesCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *SearchResultsResolver) RepositoriesCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver.repositoryResolvers",
                    "documentation": {
                      "identifier": "SearchResultsResolver.repositoryResolvers",
                      "newPage": false,
                      "searchKey": "graphqlbackend.SearchResultsResolver.repositoryResolvers",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *SearchResultsResolver) repositoryResolvers(mask search.RepoStatus) []*RepositoryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *SearchResultsResolver) repositoryResolvers(mask search.RepoStatus) []*RepositoryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver.Cloning",
                    "documentation": {
                      "identifier": "SearchResultsResolver.Cloning",
                      "newPage": false,
                      "searchKey": "graphqlbackend.SearchResultsResolver.Cloning",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *SearchResultsResolver) Cloning() []*RepositoryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *SearchResultsResolver) Cloning() []*RepositoryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver.Missing",
                    "documentation": {
                      "identifier": "SearchResultsResolver.Missing",
                      "newPage": false,
                      "searchKey": "graphqlbackend.SearchResultsResolver.Missing",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *SearchResultsResolver) Missing() []*RepositoryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *SearchResultsResolver) Missing() []*RepositoryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver.Timedout",
                    "documentation": {
                      "identifier": "SearchResultsResolver.Timedout",
                      "newPage": false,
                      "searchKey": "graphqlbackend.SearchResultsResolver.Timedout",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *SearchResultsResolver) Timedout() []*RepositoryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *SearchResultsResolver) Timedout() []*RepositoryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver.IndexUnavailable",
                    "documentation": {
                      "identifier": "SearchResultsResolver.IndexUnavailable",
                      "newPage": false,
                      "searchKey": "graphqlbackend.SearchResultsResolver.IndexUnavailable",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *SearchResultsResolver) IndexUnavailable() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *SearchResultsResolver) IndexUnavailable() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver.Results",
                    "documentation": {
                      "identifier": "SearchResultsResolver.Results",
                      "newPage": false,
                      "searchKey": "graphqlbackend.SearchResultsResolver.Results",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sr *SearchResultsResolver) Results() []SearchResultResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sr *SearchResultsResolver) Results() []SearchResultResolver\n```\n\nResults are the results found by the search. It respects the limits set. To access all results directly access the SearchResults field. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver.MatchCount",
                    "documentation": {
                      "identifier": "SearchResultsResolver.MatchCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.SearchResultsResolver.MatchCount",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sr *SearchResultsResolver) MatchCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sr *SearchResultsResolver) MatchCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver.ResultCount",
                    "documentation": {
                      "identifier": "SearchResultsResolver.ResultCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.SearchResultsResolver.ResultCount",
                      "tags": [
                        "exported",
                        "deprecated"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sr *SearchResultsResolver) ResultCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sr *SearchResultsResolver) ResultCount() int32\n```\n\nDeprecated. Prefer MatchCount. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver.ApproximateResultCount",
                    "documentation": {
                      "identifier": "SearchResultsResolver.ApproximateResultCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.SearchResultsResolver.ApproximateResultCount",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sr *SearchResultsResolver) ApproximateResultCount() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sr *SearchResultsResolver) ApproximateResultCount() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver.Alert",
                    "documentation": {
                      "identifier": "SearchResultsResolver.Alert",
                      "newPage": false,
                      "searchKey": "graphqlbackend.SearchResultsResolver.Alert",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sr *SearchResultsResolver) Alert() *searchAlert"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sr *SearchResultsResolver) Alert() *searchAlert\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver.ElapsedMilliseconds",
                    "documentation": {
                      "identifier": "SearchResultsResolver.ElapsedMilliseconds",
                      "newPage": false,
                      "searchKey": "graphqlbackend.SearchResultsResolver.ElapsedMilliseconds",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sr *SearchResultsResolver) ElapsedMilliseconds() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sr *SearchResultsResolver) ElapsedMilliseconds() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver.DynamicFilters",
                    "documentation": {
                      "identifier": "SearchResultsResolver.DynamicFilters",
                      "newPage": false,
                      "searchKey": "graphqlbackend.SearchResultsResolver.DynamicFilters",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sr *SearchResultsResolver) DynamicFilters(ctx context.Context) []*searchFilterResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sr *SearchResultsResolver) DynamicFilters(ctx context.Context) []*searchFilterResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver.blameFileMatch",
                    "documentation": {
                      "identifier": "SearchResultsResolver.blameFileMatch",
                      "newPage": false,
                      "searchKey": "graphqlbackend.SearchResultsResolver.blameFileMatch",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sr *SearchResultsResolver) blameFileMatch(ctx context.Context, fm *result.FileMatch) (t time.Time, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sr *SearchResultsResolver) blameFileMatch(ctx context.Context, fm *result.FileMatch) (t time.Time, err error)\n```\n\nblameFileMatch blames the specified file match to produce the time at which the first line match inside of it was authored. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#SearchResultsResolver.Sparkline",
                    "documentation": {
                      "identifier": "SearchResultsResolver.Sparkline",
                      "newPage": false,
                      "searchKey": "graphqlbackend.SearchResultsResolver.Sparkline",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sr *SearchResultsResolver) Sparkline(ctx context.Context) (sparkline []int32, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sr *SearchResultsResolver) Sparkline(ctx context.Context) (sparkline []int32, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#SearchResults",
              "documentation": {
                "identifier": "SearchResults",
                "newPage": false,
                "searchKey": "graphqlbackend.SearchResults",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchResults struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchResults struct {\n\tMatches []result.Match\n\tStats   streaming.Stats\n\tCursor  *run.SearchCursor\n\tAlert   *searchAlert\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#unionMerge",
                    "documentation": {
                      "identifier": "unionMerge",
                      "newPage": false,
                      "searchKey": "graphqlbackend.unionMerge",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func unionMerge(left, right *SearchResults) *SearchResults"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc unionMerge(left, right *SearchResults) *SearchResults\n```\n\nunionMerge performs a merge of file match results, merging line matches when they occur in the same file. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#union",
                    "documentation": {
                      "identifier": "union",
                      "newPage": false,
                      "searchKey": "graphqlbackend.union",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func union(left, right *SearchResults) *SearchResults"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc union(left, right *SearchResults) *SearchResults\n```\n\nunion returns the union of two sets of search results and merges common search data. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#intersectMerge",
                    "documentation": {
                      "identifier": "intersectMerge",
                      "newPage": false,
                      "searchKey": "graphqlbackend.intersectMerge",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func intersectMerge(left, right *SearchResults) *SearchResults"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc intersectMerge(left, right *SearchResults) *SearchResults\n```\n\nintersectMerge performs a merge of file match results, merging line matches for files contained in both result sets, and updating counts. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#intersect",
                    "documentation": {
                      "identifier": "intersect",
                      "newPage": false,
                      "searchKey": "graphqlbackend.intersect",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func intersect(left, right *SearchResults) *SearchResults"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc intersect(left, right *SearchResults) *SearchResults\n```\n\nintersect returns the intersection of two sets of search result content matches, based on whether a single file path contains content matches in both sets. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchFilterResolver",
              "documentation": {
                "identifier": "searchFilterResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.searchFilterResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type searchFilterResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype searchFilterResolver struct {\n\tfilter streaming.Filter\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchFilterResolver.Value",
                    "documentation": {
                      "identifier": "searchFilterResolver.Value",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchFilterResolver.Value",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sf *searchFilterResolver) Value() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sf *searchFilterResolver) Value() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchFilterResolver.Label",
                    "documentation": {
                      "identifier": "searchFilterResolver.Label",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchFilterResolver.Label",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sf *searchFilterResolver) Label() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sf *searchFilterResolver) Label() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchFilterResolver.Count",
                    "documentation": {
                      "identifier": "searchFilterResolver.Count",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchFilterResolver.Count",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sf *searchFilterResolver) Count() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sf *searchFilterResolver) Count() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchFilterResolver.LimitHit",
                    "documentation": {
                      "identifier": "searchFilterResolver.LimitHit",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchFilterResolver.LimitHit",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sf *searchFilterResolver) LimitHit() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sf *searchFilterResolver) LimitHit() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchFilterResolver.Kind",
                    "documentation": {
                      "identifier": "searchFilterResolver.Kind",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchFilterResolver.Kind",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sf *searchFilterResolver) Kind() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sf *searchFilterResolver) Kind() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchResultsStats",
              "documentation": {
                "identifier": "searchResultsStats",
                "newPage": false,
                "searchKey": "graphqlbackend.searchResultsStats",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type searchResultsStats struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype searchResultsStats struct {\n\tJApproximateResultCount string\n\tJSparkline              []int32\n\n\tsr *searchResolver\n\n\tonce   sync.Once\n\tsrs    *SearchResultsResolver\n\tsrsErr error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResultsStats.ApproximateResultCount",
                    "documentation": {
                      "identifier": "searchResultsStats.ApproximateResultCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResultsStats.ApproximateResultCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (srs *searchResultsStats) ApproximateResultCount() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (srs *searchResultsStats) ApproximateResultCount() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResultsStats.Sparkline",
                    "documentation": {
                      "identifier": "searchResultsStats.Sparkline",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResultsStats.Sparkline",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (srs *searchResultsStats) Sparkline() []int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (srs *searchResultsStats) Sparkline() []int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResultsStats.Languages",
                    "documentation": {
                      "identifier": "searchResultsStats.Languages",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResultsStats.Languages",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (srs *searchResultsStats) Languages(ctx context.Context) ([]*languageStatisticsResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (srs *searchResultsStats) Languages(ctx context.Context) ([]*languageStatisticsResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchResultsStats.getResults",
                    "documentation": {
                      "identifier": "searchResultsStats.getResults",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchResultsStats.getResults",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (srs *searchResultsStats) getResults(ctx context.Context) (*SearchResultsResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (srs *searchResultsStats) getResults(ctx context.Context) (*SearchResultsResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#SearchResultResolver",
              "documentation": {
                "identifier": "SearchResultResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.SearchResultResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchResultResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchResultResolver interface {\n\tToRepository() (*RepositoryResolver, bool)\n\tToFileMatch() (*FileMatchResolver, bool)\n\tToCommitSearchResult() (*CommitSearchResultResolver, bool)\n\n\tResultCount() int32\n}\n```\n\nSearchResultResolver is a resolver for the GraphQL union type `SearchResult`. \n\nSupported types: \n\n```\n- *RepositoryResolver         // repo name match\n- *fileMatchResolver          // text match\n- *commitSearchResultResolver // diff or commit match\n\n```\nNote: Any new result types added here also need to be handled properly in search_results.go:301 (sparklines) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#SearchSuggestionResolver",
              "documentation": {
                "identifier": "SearchSuggestionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.SearchSuggestionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchSuggestionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchSuggestionResolver interface {\n\t// Score defines how well this item matches the query for sorting purposes\n\tScore() int\n\n\t// Length holds the length of the item name as a second sorting criterium\n\tLength() int\n\n\t// Label to sort alphabetically by when all else is equal.\n\tLabel() string\n\n\t// Key is a key used to deduplicate suggestion results\n\tKey() suggestionKey\n\n\tToRepository() (*RepositoryResolver, bool)\n\tToFile() (*GitTreeEntryResolver, bool)\n\tToGitBlob() (*GitTreeEntryResolver, bool)\n\tToGitTree() (*GitTreeEntryResolver, bool)\n\tToSymbol() (*symbolResolver, bool)\n\tToLanguage() (*languageResolver, bool)\n\tToSearchContext() (*searchContextResolver, bool)\n}\n```\n\nSearchSuggestionResolver is a resolver for the GraphQL union type `SearchSuggestion` \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#baseSuggestionResolver",
              "documentation": {
                "identifier": "baseSuggestionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.baseSuggestionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type baseSuggestionResolver struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype baseSuggestionResolver struct{}\n```\n\nbaseSuggestionResolver implements all the To* methods, returning false for all of them. Its intent is to be embedded into other suggestion resolvers to simplify implementing searchSuggestionResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#baseSuggestionResolver.ToRepository",
                    "documentation": {
                      "identifier": "baseSuggestionResolver.ToRepository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.baseSuggestionResolver.ToRepository",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (baseSuggestionResolver) ToRepository() (*RepositoryResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (baseSuggestionResolver) ToRepository() (*RepositoryResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#baseSuggestionResolver.ToFile",
                    "documentation": {
                      "identifier": "baseSuggestionResolver.ToFile",
                      "newPage": false,
                      "searchKey": "graphqlbackend.baseSuggestionResolver.ToFile",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (baseSuggestionResolver) ToFile() (*GitTreeEntryResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (baseSuggestionResolver) ToFile() (*GitTreeEntryResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#baseSuggestionResolver.ToGitBlob",
                    "documentation": {
                      "identifier": "baseSuggestionResolver.ToGitBlob",
                      "newPage": false,
                      "searchKey": "graphqlbackend.baseSuggestionResolver.ToGitBlob",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (baseSuggestionResolver) ToGitBlob() (*GitTreeEntryResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (baseSuggestionResolver) ToGitBlob() (*GitTreeEntryResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#baseSuggestionResolver.ToGitTree",
                    "documentation": {
                      "identifier": "baseSuggestionResolver.ToGitTree",
                      "newPage": false,
                      "searchKey": "graphqlbackend.baseSuggestionResolver.ToGitTree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (baseSuggestionResolver) ToGitTree() (*GitTreeEntryResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (baseSuggestionResolver) ToGitTree() (*GitTreeEntryResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#baseSuggestionResolver.ToSymbol",
                    "documentation": {
                      "identifier": "baseSuggestionResolver.ToSymbol",
                      "newPage": false,
                      "searchKey": "graphqlbackend.baseSuggestionResolver.ToSymbol",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (baseSuggestionResolver) ToSymbol() (*symbolResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (baseSuggestionResolver) ToSymbol() (*symbolResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#baseSuggestionResolver.ToLanguage",
                    "documentation": {
                      "identifier": "baseSuggestionResolver.ToLanguage",
                      "newPage": false,
                      "searchKey": "graphqlbackend.baseSuggestionResolver.ToLanguage",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (baseSuggestionResolver) ToLanguage() (*languageResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (baseSuggestionResolver) ToLanguage() (*languageResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#baseSuggestionResolver.ToSearchContext",
                    "documentation": {
                      "identifier": "baseSuggestionResolver.ToSearchContext",
                      "newPage": false,
                      "searchKey": "graphqlbackend.baseSuggestionResolver.ToSearchContext",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (baseSuggestionResolver) ToSearchContext() (*searchContextResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (baseSuggestionResolver) ToSearchContext() (*searchContextResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repositorySuggestionResolver",
              "documentation": {
                "identifier": "repositorySuggestionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.repositorySuggestionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repositorySuggestionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repositorySuggestionResolver struct {\n\tbaseSuggestionResolver\n\trepo  *RepositoryResolver\n\tscore int\n}\n```\n\nrepositorySuggestionResolver implements searchSuggestionResolver for RepositoryResolver \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositorySuggestionResolver.Score",
                    "documentation": {
                      "identifier": "repositorySuggestionResolver.Score",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositorySuggestionResolver.Score",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r repositorySuggestionResolver) Score() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r repositorySuggestionResolver) Score() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositorySuggestionResolver.Length",
                    "documentation": {
                      "identifier": "repositorySuggestionResolver.Length",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositorySuggestionResolver.Length",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r repositorySuggestionResolver) Length() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r repositorySuggestionResolver) Length() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositorySuggestionResolver.Label",
                    "documentation": {
                      "identifier": "repositorySuggestionResolver.Label",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositorySuggestionResolver.Label",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r repositorySuggestionResolver) Label() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r repositorySuggestionResolver) Label() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositorySuggestionResolver.ToRepository",
                    "documentation": {
                      "identifier": "repositorySuggestionResolver.ToRepository",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositorySuggestionResolver.ToRepository",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r repositorySuggestionResolver) ToRepository() (*RepositoryResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r repositorySuggestionResolver) ToRepository() (*RepositoryResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repositorySuggestionResolver.Key",
                    "documentation": {
                      "identifier": "repositorySuggestionResolver.Key",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repositorySuggestionResolver.Key",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r repositorySuggestionResolver) Key() suggestionKey"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r repositorySuggestionResolver) Key() suggestionKey\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitTreeSuggestionResolver",
              "documentation": {
                "identifier": "gitTreeSuggestionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.gitTreeSuggestionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gitTreeSuggestionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gitTreeSuggestionResolver struct {\n\tbaseSuggestionResolver\n\tgitTreeEntry *GitTreeEntryResolver\n\tscore        int\n}\n```\n\ngitTreeSuggestionResolver implements searchSuggestionResolver for GitTreeEntryResolver \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitTreeSuggestionResolver.Score",
                    "documentation": {
                      "identifier": "gitTreeSuggestionResolver.Score",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitTreeSuggestionResolver.Score",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g gitTreeSuggestionResolver) Score() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g gitTreeSuggestionResolver) Score() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitTreeSuggestionResolver.Length",
                    "documentation": {
                      "identifier": "gitTreeSuggestionResolver.Length",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitTreeSuggestionResolver.Length",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g gitTreeSuggestionResolver) Length() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g gitTreeSuggestionResolver) Length() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitTreeSuggestionResolver.Label",
                    "documentation": {
                      "identifier": "gitTreeSuggestionResolver.Label",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitTreeSuggestionResolver.Label",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g gitTreeSuggestionResolver) Label() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g gitTreeSuggestionResolver) Label() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitTreeSuggestionResolver.ToFile",
                    "documentation": {
                      "identifier": "gitTreeSuggestionResolver.ToFile",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitTreeSuggestionResolver.ToFile",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g gitTreeSuggestionResolver) ToFile() (*GitTreeEntryResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g gitTreeSuggestionResolver) ToFile() (*GitTreeEntryResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitTreeSuggestionResolver.ToGitBlob",
                    "documentation": {
                      "identifier": "gitTreeSuggestionResolver.ToGitBlob",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitTreeSuggestionResolver.ToGitBlob",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g gitTreeSuggestionResolver) ToGitBlob() (*GitTreeEntryResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g gitTreeSuggestionResolver) ToGitBlob() (*GitTreeEntryResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitTreeSuggestionResolver.ToGitTree",
                    "documentation": {
                      "identifier": "gitTreeSuggestionResolver.ToGitTree",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitTreeSuggestionResolver.ToGitTree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g gitTreeSuggestionResolver) ToGitTree() (*GitTreeEntryResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g gitTreeSuggestionResolver) ToGitTree() (*GitTreeEntryResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#gitTreeSuggestionResolver.Key",
                    "documentation": {
                      "identifier": "gitTreeSuggestionResolver.Key",
                      "newPage": false,
                      "searchKey": "graphqlbackend.gitTreeSuggestionResolver.Key",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g gitTreeSuggestionResolver) Key() suggestionKey"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g gitTreeSuggestionResolver) Key() suggestionKey\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#symbolSuggestionResolver",
              "documentation": {
                "identifier": "symbolSuggestionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.symbolSuggestionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type symbolSuggestionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype symbolSuggestionResolver struct {\n\tbaseSuggestionResolver\n\tsymbol symbolResolver\n\tscore  int\n}\n```\n\nsymbolSuggestionResolver implements searchSuggestionResolver for symbolResolver \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#symbolSuggestionResolver.Score",
                    "documentation": {
                      "identifier": "symbolSuggestionResolver.Score",
                      "newPage": false,
                      "searchKey": "graphqlbackend.symbolSuggestionResolver.Score",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s symbolSuggestionResolver) Score() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s symbolSuggestionResolver) Score() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#symbolSuggestionResolver.Length",
                    "documentation": {
                      "identifier": "symbolSuggestionResolver.Length",
                      "newPage": false,
                      "searchKey": "graphqlbackend.symbolSuggestionResolver.Length",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s symbolSuggestionResolver) Length() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s symbolSuggestionResolver) Length() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#symbolSuggestionResolver.Label",
                    "documentation": {
                      "identifier": "symbolSuggestionResolver.Label",
                      "newPage": false,
                      "searchKey": "graphqlbackend.symbolSuggestionResolver.Label",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s symbolSuggestionResolver) Label() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s symbolSuggestionResolver) Label() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#symbolSuggestionResolver.ToSymbol",
                    "documentation": {
                      "identifier": "symbolSuggestionResolver.ToSymbol",
                      "newPage": false,
                      "searchKey": "graphqlbackend.symbolSuggestionResolver.ToSymbol",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s symbolSuggestionResolver) ToSymbol() (*symbolResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s symbolSuggestionResolver) ToSymbol() (*symbolResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#symbolSuggestionResolver.Key",
                    "documentation": {
                      "identifier": "symbolSuggestionResolver.Key",
                      "newPage": false,
                      "searchKey": "graphqlbackend.symbolSuggestionResolver.Key",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s symbolSuggestionResolver) Key() suggestionKey"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s symbolSuggestionResolver) Key() suggestionKey\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#languageSuggestionResolver",
              "documentation": {
                "identifier": "languageSuggestionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.languageSuggestionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type languageSuggestionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype languageSuggestionResolver struct {\n\tbaseSuggestionResolver\n\tlang  *languageResolver\n\tscore int\n}\n```\n\nlanguageSuggestionResolver implements searchSuggestionResolver for languageResolver \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#languageSuggestionResolver.Score",
                    "documentation": {
                      "identifier": "languageSuggestionResolver.Score",
                      "newPage": false,
                      "searchKey": "graphqlbackend.languageSuggestionResolver.Score",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l languageSuggestionResolver) Score() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l languageSuggestionResolver) Score() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#languageSuggestionResolver.Length",
                    "documentation": {
                      "identifier": "languageSuggestionResolver.Length",
                      "newPage": false,
                      "searchKey": "graphqlbackend.languageSuggestionResolver.Length",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l languageSuggestionResolver) Length() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l languageSuggestionResolver) Length() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#languageSuggestionResolver.Label",
                    "documentation": {
                      "identifier": "languageSuggestionResolver.Label",
                      "newPage": false,
                      "searchKey": "graphqlbackend.languageSuggestionResolver.Label",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l languageSuggestionResolver) Label() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l languageSuggestionResolver) Label() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#languageSuggestionResolver.ToLanguage",
                    "documentation": {
                      "identifier": "languageSuggestionResolver.ToLanguage",
                      "newPage": false,
                      "searchKey": "graphqlbackend.languageSuggestionResolver.ToLanguage",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l languageSuggestionResolver) ToLanguage() (*languageResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l languageSuggestionResolver) ToLanguage() (*languageResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#languageSuggestionResolver.Key",
                    "documentation": {
                      "identifier": "languageSuggestionResolver.Key",
                      "newPage": false,
                      "searchKey": "graphqlbackend.languageSuggestionResolver.Key",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l languageSuggestionResolver) Key() suggestionKey"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l languageSuggestionResolver) Key() suggestionKey\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchContextSuggestionResolver",
              "documentation": {
                "identifier": "searchContextSuggestionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.searchContextSuggestionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type searchContextSuggestionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype searchContextSuggestionResolver struct {\n\tbaseSuggestionResolver\n\tsearchContext *searchContextResolver\n\tscore         int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextSuggestionResolver.Score",
                    "documentation": {
                      "identifier": "searchContextSuggestionResolver.Score",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextSuggestionResolver.Score",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s searchContextSuggestionResolver) Score() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s searchContextSuggestionResolver) Score() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextSuggestionResolver.Length",
                    "documentation": {
                      "identifier": "searchContextSuggestionResolver.Length",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextSuggestionResolver.Length",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s searchContextSuggestionResolver) Length() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s searchContextSuggestionResolver) Length() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextSuggestionResolver.Label",
                    "documentation": {
                      "identifier": "searchContextSuggestionResolver.Label",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextSuggestionResolver.Label",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s searchContextSuggestionResolver) Label() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s searchContextSuggestionResolver) Label() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextSuggestionResolver.ToSearchContext",
                    "documentation": {
                      "identifier": "searchContextSuggestionResolver.ToSearchContext",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextSuggestionResolver.ToSearchContext",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s searchContextSuggestionResolver) ToSearchContext() (*searchContextResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s searchContextSuggestionResolver) ToSearchContext() (*searchContextResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchContextSuggestionResolver.Key",
                    "documentation": {
                      "identifier": "searchContextSuggestionResolver.Key",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchContextSuggestionResolver.Key",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s searchContextSuggestionResolver) Key() suggestionKey"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s searchContextSuggestionResolver) Key() suggestionKey\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#suggestionKey",
              "documentation": {
                "identifier": "suggestionKey",
                "newPage": false,
                "searchKey": "graphqlbackend.suggestionKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type suggestionKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype suggestionKey struct {\n\trepoName          string\n\trepoRev           string\n\tfile              string\n\tsymbol            string\n\tlang              string\n\turl               string\n\tsearchContextSpec string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchSuggestionsArgs",
              "documentation": {
                "identifier": "searchSuggestionsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.searchSuggestionsArgs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type searchSuggestionsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype searchSuggestionsArgs struct {\n\tFirst *int32\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#searchSuggestionsArgs.applyDefaultsAndConstraints",
                    "documentation": {
                      "identifier": "searchSuggestionsArgs.applyDefaultsAndConstraints",
                      "newPage": false,
                      "searchKey": "graphqlbackend.searchSuggestionsArgs.applyDefaultsAndConstraints",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a *searchSuggestionsArgs) applyDefaultsAndConstraints()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a *searchSuggestionsArgs) applyDefaultsAndConstraints()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#showSearchSuggestionResolvers",
              "documentation": {
                "identifier": "showSearchSuggestionResolvers",
                "newPage": false,
                "searchKey": "graphqlbackend.showSearchSuggestionResolvers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type showSearchSuggestionResolvers func() ([]github.com/sourcegraph/sourcegraph/cmd/frontend/graphqlbackend.SearchSuggestionResolver, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype showSearchSuggestionResolvers func() ([]SearchSuggestionResolver, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#languageResolver",
              "documentation": {
                "identifier": "languageResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.languageResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type languageResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype languageResolver struct {\n\tname string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#languageResolver.Name",
                    "documentation": {
                      "identifier": "languageResolver.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.languageResolver.Name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *languageResolver) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *languageResolver) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repoSetter",
              "documentation": {
                "identifier": "repoSetter",
                "newPage": false,
                "searchKey": "graphqlbackend.repoSetter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repoSetter interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repoSetter interface {\n\tSetRepos(all bool, repos []string) error\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#settingsResolver",
              "documentation": {
                "identifier": "settingsResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.settingsResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type settingsResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype settingsResolver struct {\n\tdb       dbutil.DB\n\tsubject  *settingsSubject\n\tsettings *api.Settings\n\tuser     *types.User\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsResolver.ID",
                    "documentation": {
                      "identifier": "settingsResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsResolver.ID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *settingsResolver) ID() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *settingsResolver) ID() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsResolver.Subject",
                    "documentation": {
                      "identifier": "settingsResolver.Subject",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsResolver.Subject",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *settingsResolver) Subject() *settingsSubject"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *settingsResolver) Subject() *settingsSubject\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsResolver.Configuration",
                    "documentation": {
                      "identifier": "settingsResolver.Configuration",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsResolver.Configuration",
                      "tags": [
                        "deprecated"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *settingsResolver) Configuration() *configurationResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *settingsResolver) Configuration() *configurationResolver\n```\n\nDeprecated: Use the Contents field instead. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsResolver.Contents",
                    "documentation": {
                      "identifier": "settingsResolver.Contents",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsResolver.Contents",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *settingsResolver) Contents() JSONCString"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *settingsResolver) Contents() JSONCString\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsResolver.CreatedAt",
                    "documentation": {
                      "identifier": "settingsResolver.CreatedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsResolver.CreatedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *settingsResolver) CreatedAt() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *settingsResolver) CreatedAt() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsResolver.Author",
                    "documentation": {
                      "identifier": "settingsResolver.Author",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsResolver.Author",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *settingsResolver) Author(ctx context.Context) (*UserResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *settingsResolver) Author(ctx context.Context) (*UserResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#settingsCascade",
              "documentation": {
                "identifier": "settingsCascade",
                "newPage": false,
                "searchKey": "graphqlbackend.settingsCascade",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type settingsCascade struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype settingsCascade struct {\n\tdb dbutil.DB\n\t// At most 1 of these fields is set.\n\tunauthenticatedActor bool\n\tsubject              *settingsSubject\n}\n```\n\nsettingsCascade implements the GraphQL type SettingsCascade (and the deprecated type ConfigurationCascade). \n\nIt resolves settings from multiple sources.  When there is overlap between values, they will be merged in the following cascading order (first is lowest precedence): \n\n- Global site settings - Organization settings - Current user settings \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsCascade.Subjects",
                    "documentation": {
                      "identifier": "settingsCascade.Subjects",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsCascade.Subjects",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *settingsCascade) Subjects(ctx context.Context) ([]*settingsSubject, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *settingsCascade) Subjects(ctx context.Context) ([]*settingsSubject, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsCascade.Final",
                    "documentation": {
                      "identifier": "settingsCascade.Final",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsCascade.Final",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *settingsCascade) Final(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *settingsCascade) Final(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsCascade.Merged",
                    "documentation": {
                      "identifier": "settingsCascade.Merged",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsCascade.Merged",
                      "tags": [
                        "deprecated"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *settingsCascade) Merged(ctx context.Context) (_ *configurationResolver, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *settingsCascade) Merged(ctx context.Context) (_ *configurationResolver, err error)\n```\n\nDeprecated: in the GraphQL API \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#configurationResolver",
              "documentation": {
                "identifier": "configurationResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.configurationResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type configurationResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype configurationResolver struct {\n\tcontents string\n\tmessages []string // error and warning messages\n}\n```\n\nDeprecated: The GraphQL type Configuration is deprecated. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#viewerFinalSettings",
                    "documentation": {
                      "identifier": "viewerFinalSettings",
                      "newPage": false,
                      "searchKey": "graphqlbackend.viewerFinalSettings",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func viewerFinalSettings(ctx context.Context, db dbutil.DB) (*configurationResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc viewerFinalSettings(ctx context.Context, db dbutil.DB) (*configurationResolver, error)\n```\n\nviewerFinalSettings returns the final (merged) settings for the viewer. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#configurationResolver.Contents",
                    "documentation": {
                      "identifier": "configurationResolver.Contents",
                      "newPage": false,
                      "searchKey": "graphqlbackend.configurationResolver.Contents",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *configurationResolver) Contents() JSONCString"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *configurationResolver) Contents() JSONCString\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#configurationResolver.Messages",
                    "documentation": {
                      "identifier": "configurationResolver.Messages",
                      "newPage": false,
                      "searchKey": "graphqlbackend.configurationResolver.Messages",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *configurationResolver) Messages() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *configurationResolver) Messages() []string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#settingsMutationGroupInput",
              "documentation": {
                "identifier": "settingsMutationGroupInput",
                "newPage": false,
                "searchKey": "graphqlbackend.settingsMutationGroupInput",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type settingsMutationGroupInput struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype settingsMutationGroupInput struct {\n\tSubject graphql.ID\n\tLastID  *int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#settingsMutation",
              "documentation": {
                "identifier": "settingsMutation",
                "newPage": false,
                "searchKey": "graphqlbackend.settingsMutation",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type settingsMutation struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype settingsMutation struct {\n\tdb      dbutil.DB\n\tinput   *settingsMutationGroupInput\n\tsubject *settingsSubject\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsMutation.EditSettings",
                    "documentation": {
                      "identifier": "settingsMutation.EditSettings",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsMutation.EditSettings",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *settingsMutation) EditSettings(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *settingsMutation) EditSettings(ctx context.Context, args *struct {\n\tEdit *settingsEdit\n}) (*updateSettingsPayload, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsMutation.EditConfiguration",
                    "documentation": {
                      "identifier": "settingsMutation.EditConfiguration",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsMutation.EditConfiguration",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *settingsMutation) EditConfiguration(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *settingsMutation) EditConfiguration(ctx context.Context, args *struct {\n\tEdit *settingsEdit\n}) (*updateSettingsPayload, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsMutation.editSettings",
                    "documentation": {
                      "identifier": "settingsMutation.editSettings",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsMutation.editSettings",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *settingsMutation) editSettings(ctx context.Context, keyPath jsonx.Path, value interface{}, remove bool) (*updateSettingsPayload, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *settingsMutation) editSettings(ctx context.Context, keyPath jsonx.Path, value interface{}, remove bool) (*updateSettingsPayload, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsMutation.OverwriteSettings",
                    "documentation": {
                      "identifier": "settingsMutation.OverwriteSettings",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsMutation.OverwriteSettings",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *settingsMutation) OverwriteSettings(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *settingsMutation) OverwriteSettings(ctx context.Context, args *struct {\n\tContents string\n}) (*updateSettingsPayload, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsMutation.doUpdateSettings",
                    "documentation": {
                      "identifier": "settingsMutation.doUpdateSettings",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsMutation.doUpdateSettings",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *settingsMutation) doUpdateSettings(ctx context.Context, computeEdits func(oldSettings string) ([]jsonx.Edit, error)) (idAfterUpdate int32, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *settingsMutation) doUpdateSettings(ctx context.Context, computeEdits func(oldSettings string) ([]jsonx.Edit, error)) (idAfterUpdate int32, err error)\n```\n\ndoUpdateSettings is a helper for updating settings. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsMutation.getCurrentSettings",
                    "documentation": {
                      "identifier": "settingsMutation.getCurrentSettings",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsMutation.getCurrentSettings",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *settingsMutation) getCurrentSettings(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *settingsMutation) getCurrentSettings(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#updateSettingsPayload",
              "documentation": {
                "identifier": "updateSettingsPayload",
                "newPage": false,
                "searchKey": "graphqlbackend.updateSettingsPayload",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type updateSettingsPayload struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype updateSettingsPayload struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#updateSettingsPayload.Empty",
                    "documentation": {
                      "identifier": "updateSettingsPayload.Empty",
                      "newPage": false,
                      "searchKey": "graphqlbackend.updateSettingsPayload.Empty",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (updateSettingsPayload) Empty() *EmptyResponse"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (updateSettingsPayload) Empty() *EmptyResponse\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#settingsEdit",
              "documentation": {
                "identifier": "settingsEdit",
                "newPage": false,
                "searchKey": "graphqlbackend.settingsEdit",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type settingsEdit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype settingsEdit struct {\n\tKeyPath                   []*keyPathSegment\n\tValue                     *JSONValue\n\tValueIsJSONCEncodedString bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#keyPathSegment",
              "documentation": {
                "identifier": "keyPathSegment",
                "newPage": false,
                "searchKey": "graphqlbackend.keyPathSegment",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type keyPathSegment struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype keyPathSegment struct {\n\tProperty *string\n\tIndex    *int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#settingsSubject",
              "documentation": {
                "identifier": "settingsSubject",
                "newPage": false,
                "searchKey": "graphqlbackend.settingsSubject",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type settingsSubject struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype settingsSubject struct {\n\t// Exactly 1 of these fields must be set.\n\tdefaultSettings *defaultSettingsResolver\n\tsite            *siteResolver\n\torg             *OrgResolver\n\tuser            *UserResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsSubjectForNode",
                    "documentation": {
                      "identifier": "settingsSubjectForNode",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsSubjectForNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func settingsSubjectForNode(ctx context.Context, n Node) (*settingsSubject, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc settingsSubjectForNode(ctx context.Context, n Node) (*settingsSubject, error)\n```\n\nsettingsSubjectForNode fetches the settings subject for the given Node. If the node is not a valid settings subject, an error is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsSubject.ToDefaultSettings",
                    "documentation": {
                      "identifier": "settingsSubject.ToDefaultSettings",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsSubject.ToDefaultSettings",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *settingsSubject) ToDefaultSettings() (*defaultSettingsResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *settingsSubject) ToDefaultSettings() (*defaultSettingsResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsSubject.ToSite",
                    "documentation": {
                      "identifier": "settingsSubject.ToSite",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsSubject.ToSite",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *settingsSubject) ToSite() (*siteResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *settingsSubject) ToSite() (*siteResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsSubject.ToOrg",
                    "documentation": {
                      "identifier": "settingsSubject.ToOrg",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsSubject.ToOrg",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *settingsSubject) ToOrg() (*OrgResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *settingsSubject) ToOrg() (*OrgResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsSubject.ToUser",
                    "documentation": {
                      "identifier": "settingsSubject.ToUser",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsSubject.ToUser",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *settingsSubject) ToUser() (*UserResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *settingsSubject) ToUser() (*UserResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsSubject.toSubject",
                    "documentation": {
                      "identifier": "settingsSubject.toSubject",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsSubject.toSubject",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *settingsSubject) toSubject() api.SettingsSubject"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *settingsSubject) toSubject() api.SettingsSubject\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsSubject.ID",
                    "documentation": {
                      "identifier": "settingsSubject.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsSubject.ID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *settingsSubject) ID() (graphql.ID, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *settingsSubject) ID() (graphql.ID, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsSubject.LatestSettings",
                    "documentation": {
                      "identifier": "settingsSubject.LatestSettings",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsSubject.LatestSettings",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *settingsSubject) LatestSettings(ctx context.Context) (*settingsResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *settingsSubject) LatestSettings(ctx context.Context) (*settingsResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsSubject.SettingsURL",
                    "documentation": {
                      "identifier": "settingsSubject.SettingsURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsSubject.SettingsURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *settingsSubject) SettingsURL() (*string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *settingsSubject) SettingsURL() (*string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsSubject.ViewerCanAdminister",
                    "documentation": {
                      "identifier": "settingsSubject.ViewerCanAdminister",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsSubject.ViewerCanAdminister",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *settingsSubject) ViewerCanAdminister(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *settingsSubject) ViewerCanAdminister(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsSubject.SettingsCascade",
                    "documentation": {
                      "identifier": "settingsSubject.SettingsCascade",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsSubject.SettingsCascade",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *settingsSubject) SettingsCascade() (*settingsCascade, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *settingsSubject) SettingsCascade() (*settingsCascade, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsSubject.ConfigurationCascade",
                    "documentation": {
                      "identifier": "settingsSubject.ConfigurationCascade",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsSubject.ConfigurationCascade",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *settingsSubject) ConfigurationCascade() (*settingsCascade, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *settingsSubject) ConfigurationCascade() (*settingsCascade, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#settingsSubject.readSettings",
                    "documentation": {
                      "identifier": "settingsSubject.readSettings",
                      "newPage": false,
                      "searchKey": "graphqlbackend.settingsSubject.readSettings",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *settingsSubject) readSettings(ctx context.Context, v interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *settingsSubject) readSettings(ctx context.Context, v interface{}) error\n```\n\nreadSettings unmarshals s's latest settings into v. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#signatureResolver",
              "documentation": {
                "identifier": "signatureResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.signatureResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type signatureResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype signatureResolver struct {\n\tperson *PersonResolver\n\tdate   time.Time\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#toSignatureResolver",
                    "documentation": {
                      "identifier": "toSignatureResolver",
                      "newPage": false,
                      "searchKey": "graphqlbackend.toSignatureResolver",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func toSignatureResolver(db dbutil.DB, sig *git.Signature, includeUserInfo bool) *signatureResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc toSignatureResolver(db dbutil.DB, sig *git.Signature, includeUserInfo bool) *signatureResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#signatureResolver.Person",
                    "documentation": {
                      "identifier": "signatureResolver.Person",
                      "newPage": false,
                      "searchKey": "graphqlbackend.signatureResolver.Person",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r signatureResolver) Person() *PersonResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r signatureResolver) Person() *PersonResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#signatureResolver.Date",
                    "documentation": {
                      "identifier": "signatureResolver.Date",
                      "newPage": false,
                      "searchKey": "graphqlbackend.signatureResolver.Date",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r signatureResolver) Date() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r signatureResolver) Date() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#siteResolver",
              "documentation": {
                "identifier": "siteResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.siteResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type siteResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype siteResolver struct {\n\tdb    dbutil.DB\n\tgqlID string // == singletonSiteGQLID, not the site ID\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.AccessTokens",
                    "documentation": {
                      "identifier": "siteResolver.AccessTokens",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.AccessTokens",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) AccessTokens(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) AccessTokens(ctx context.Context, args *struct {\n\tgraphqlutil.ConnectionArgs\n}) (*accessTokenConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.AuthProviders",
                    "documentation": {
                      "identifier": "siteResolver.AuthProviders",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.AuthProviders",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) AuthProviders(ctx context.Context) (*authProviderConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) AuthProviders(ctx context.Context) (*authProviderConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.ExternalAccounts",
                    "documentation": {
                      "identifier": "siteResolver.ExternalAccounts",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.ExternalAccounts",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) ExternalAccounts(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) ExternalAccounts(ctx context.Context, args *struct {\n\tgraphqlutil.ConnectionArgs\n\tUser        *graphql.ID\n\tServiceType *string\n\tServiceID   *string\n\tClientID    *string\n}) (*externalAccountConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.ID",
                    "documentation": {
                      "identifier": "siteResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.ID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.SiteID",
                    "documentation": {
                      "identifier": "siteResolver.SiteID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.SiteID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) SiteID() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) SiteID() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.Configuration",
                    "documentation": {
                      "identifier": "siteResolver.Configuration",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.Configuration",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) Configuration(ctx context.Context) (*siteConfigurationResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) Configuration(ctx context.Context) (*siteConfigurationResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.ViewerCanAdminister",
                    "documentation": {
                      "identifier": "siteResolver.ViewerCanAdminister",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.ViewerCanAdminister",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) ViewerCanAdminister(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) ViewerCanAdminister(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.settingsSubject",
                    "documentation": {
                      "identifier": "siteResolver.settingsSubject",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.settingsSubject",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) settingsSubject() api.SettingsSubject"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) settingsSubject() api.SettingsSubject\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.LatestSettings",
                    "documentation": {
                      "identifier": "siteResolver.LatestSettings",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.LatestSettings",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) LatestSettings(ctx context.Context) (*settingsResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) LatestSettings(ctx context.Context) (*settingsResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.SettingsCascade",
                    "documentation": {
                      "identifier": "siteResolver.SettingsCascade",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.SettingsCascade",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) SettingsCascade() *settingsCascade"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) SettingsCascade() *settingsCascade\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.ConfigurationCascade",
                    "documentation": {
                      "identifier": "siteResolver.ConfigurationCascade",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.ConfigurationCascade",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) ConfigurationCascade() *settingsCascade"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) ConfigurationCascade() *settingsCascade\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.SettingsURL",
                    "documentation": {
                      "identifier": "siteResolver.SettingsURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.SettingsURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) SettingsURL() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) SettingsURL() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.CanReloadSite",
                    "documentation": {
                      "identifier": "siteResolver.CanReloadSite",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.CanReloadSite",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) CanReloadSite(ctx context.Context) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) CanReloadSite(ctx context.Context) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.BuildVersion",
                    "documentation": {
                      "identifier": "siteResolver.BuildVersion",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.BuildVersion",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) BuildVersion() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) BuildVersion() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.ProductVersion",
                    "documentation": {
                      "identifier": "siteResolver.ProductVersion",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.ProductVersion",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) ProductVersion() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) ProductVersion() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.HasCodeIntelligence",
                    "documentation": {
                      "identifier": "siteResolver.HasCodeIntelligence",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.HasCodeIntelligence",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) HasCodeIntelligence() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) HasCodeIntelligence() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.ProductSubscription",
                    "documentation": {
                      "identifier": "siteResolver.ProductSubscription",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.ProductSubscription",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) ProductSubscription() *productSubscriptionStatus"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) ProductSubscription() *productSubscriptionStatus\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.AllowSiteSettingsEdits",
                    "documentation": {
                      "identifier": "siteResolver.AllowSiteSettingsEdits",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.AllowSiteSettingsEdits",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) AllowSiteSettingsEdits() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) AllowSiteSettingsEdits() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.Alerts",
                    "documentation": {
                      "identifier": "siteResolver.Alerts",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.Alerts",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) Alerts(ctx context.Context) ([]*Alert, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) Alerts(ctx context.Context) ([]*Alert, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.NeedsRepositoryConfiguration",
                    "documentation": {
                      "identifier": "siteResolver.NeedsRepositoryConfiguration",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.NeedsRepositoryConfiguration",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) NeedsRepositoryConfiguration(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) NeedsRepositoryConfiguration(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.DisableBuiltInSearches",
                    "documentation": {
                      "identifier": "siteResolver.DisableBuiltInSearches",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.DisableBuiltInSearches",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*siteResolver) DisableBuiltInSearches() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*siteResolver) DisableBuiltInSearches() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.SendsEmailVerificationEmails",
                    "documentation": {
                      "identifier": "siteResolver.SendsEmailVerificationEmails",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.SendsEmailVerificationEmails",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*siteResolver) SendsEmailVerificationEmails() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*siteResolver) SendsEmailVerificationEmails() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.FreeUsersExceeded",
                    "documentation": {
                      "identifier": "siteResolver.FreeUsersExceeded",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.FreeUsersExceeded",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) FreeUsersExceeded(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) FreeUsersExceeded(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.MonitoringStatistics",
                    "documentation": {
                      "identifier": "siteResolver.MonitoringStatistics",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.MonitoringStatistics",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) MonitoringStatistics(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) MonitoringStatistics(ctx context.Context, args *struct {\n\tDays *int32\n}) (*siteMonitoringStatisticsResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.UpdateCheck",
                    "documentation": {
                      "identifier": "siteResolver.UpdateCheck",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.UpdateCheck",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) UpdateCheck(ctx context.Context) (*updateCheckResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) UpdateCheck(ctx context.Context) (*updateCheckResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteResolver.UsageStatistics",
                    "documentation": {
                      "identifier": "siteResolver.UsageStatistics",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteResolver.UsageStatistics",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteResolver) UsageStatistics(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteResolver) UsageStatistics(ctx context.Context, args *struct {\n\tDays   *int32\n\tWeeks  *int32\n\tMonths *int32\n}) (*siteUsageStatisticsResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#siteConfigurationResolver",
              "documentation": {
                "identifier": "siteConfigurationResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.siteConfigurationResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type siteConfigurationResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype siteConfigurationResolver struct {\n\tdb dbutil.DB\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteConfigurationResolver.ID",
                    "documentation": {
                      "identifier": "siteConfigurationResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteConfigurationResolver.ID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteConfigurationResolver) ID(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteConfigurationResolver) ID(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteConfigurationResolver.EffectiveContents",
                    "documentation": {
                      "identifier": "siteConfigurationResolver.EffectiveContents",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteConfigurationResolver.EffectiveContents",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteConfigurationResolver) EffectiveContents(ctx context.Context) (JSONCString, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteConfigurationResolver) EffectiveContents(ctx context.Context) (JSONCString, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteConfigurationResolver.ValidationMessages",
                    "documentation": {
                      "identifier": "siteConfigurationResolver.ValidationMessages",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteConfigurationResolver.ValidationMessages",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteConfigurationResolver) ValidationMessages(ctx context.Context) ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteConfigurationResolver) ValidationMessages(ctx context.Context) ([]string, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#Alert",
              "documentation": {
                "identifier": "Alert",
                "newPage": false,
                "searchKey": "graphqlbackend.Alert",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Alert struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Alert struct {\n\tTypeValue                 string\n\tMessageValue              string\n\tIsDismissibleWithKeyValue string\n}\n```\n\nAlert implements the GraphQL type Alert. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#determineOutOfDateAlert",
                    "documentation": {
                      "identifier": "determineOutOfDateAlert",
                      "newPage": false,
                      "searchKey": "graphqlbackend.determineOutOfDateAlert",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func determineOutOfDateAlert(isAdmin bool, months int, offline bool) *Alert"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc determineOutOfDateAlert(isAdmin bool, months int, offline bool) *Alert\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#Alert.Type",
                    "documentation": {
                      "identifier": "Alert.Type",
                      "newPage": false,
                      "searchKey": "graphqlbackend.Alert.Type",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Alert) Type() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Alert) Type() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#Alert.Message",
                    "documentation": {
                      "identifier": "Alert.Message",
                      "newPage": false,
                      "searchKey": "graphqlbackend.Alert.Message",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Alert) Message() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Alert) Message() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#Alert.IsDismissibleWithKey",
                    "documentation": {
                      "identifier": "Alert.IsDismissibleWithKey",
                      "newPage": false,
                      "searchKey": "graphqlbackend.Alert.IsDismissibleWithKey",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Alert) IsDismissibleWithKey() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Alert) IsDismissibleWithKey() *string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#AlertFuncArgs",
              "documentation": {
                "identifier": "AlertFuncArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.AlertFuncArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AlertFuncArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AlertFuncArgs struct {\n\tIsAuthenticated     bool             // whether the viewer is authenticated\n\tIsSiteAdmin         bool             // whether the viewer is a site admin\n\tViewerFinalSettings *schema.Settings // the viewer's final user/org/global settings\n}\n```\n\nAlertFuncArgs are the arguments provided to functions in AlertFuncs used to populate the GraphQL Site.alerts value. They allow the functions to customize the returned alerts based on the identity of the viewer (without needing to query for that on their own, which would be slow). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MonitoringAlert",
              "documentation": {
                "identifier": "MonitoringAlert",
                "newPage": false,
                "searchKey": "graphqlbackend.MonitoringAlert",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MonitoringAlert srcprometheus.MonitoringAlert"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MonitoringAlert srcprometheus.MonitoringAlert\n```\n\nMonitoringAlert implements GraphQL getters on top of srcprometheus.MonitoringAlert \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#MonitoringAlert.Timestamp",
                    "documentation": {
                      "identifier": "MonitoringAlert.Timestamp",
                      "newPage": false,
                      "searchKey": "graphqlbackend.MonitoringAlert.Timestamp",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *MonitoringAlert) Timestamp() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *MonitoringAlert) Timestamp() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#MonitoringAlert.Name",
                    "documentation": {
                      "identifier": "MonitoringAlert.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.MonitoringAlert.Name",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *MonitoringAlert) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *MonitoringAlert) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#MonitoringAlert.ServiceName",
                    "documentation": {
                      "identifier": "MonitoringAlert.ServiceName",
                      "newPage": false,
                      "searchKey": "graphqlbackend.MonitoringAlert.ServiceName",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *MonitoringAlert) ServiceName() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *MonitoringAlert) ServiceName() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#MonitoringAlert.Owner",
                    "documentation": {
                      "identifier": "MonitoringAlert.Owner",
                      "newPage": false,
                      "searchKey": "graphqlbackend.MonitoringAlert.Owner",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *MonitoringAlert) Owner() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *MonitoringAlert) Owner() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#MonitoringAlert.Average",
                    "documentation": {
                      "identifier": "MonitoringAlert.Average",
                      "newPage": false,
                      "searchKey": "graphqlbackend.MonitoringAlert.Average",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *MonitoringAlert) Average() float64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *MonitoringAlert) Average() float64\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#siteMonitoringStatisticsResolver",
              "documentation": {
                "identifier": "siteMonitoringStatisticsResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.siteMonitoringStatisticsResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type siteMonitoringStatisticsResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype siteMonitoringStatisticsResolver struct {\n\tprom     srcprometheus.Client\n\ttimespan time.Duration\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteMonitoringStatisticsResolver.Alerts",
                    "documentation": {
                      "identifier": "siteMonitoringStatisticsResolver.Alerts",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteMonitoringStatisticsResolver.Alerts",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *siteMonitoringStatisticsResolver) Alerts(ctx context.Context) ([]*MonitoringAlert, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *siteMonitoringStatisticsResolver) Alerts(ctx context.Context) ([]*MonitoringAlert, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#updateCheckResolver",
              "documentation": {
                "identifier": "updateCheckResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.updateCheckResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type updateCheckResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype updateCheckResolver struct {\n\tlast    *updatecheck.Status\n\tpending bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#updateCheckResolver.Pending",
                    "documentation": {
                      "identifier": "updateCheckResolver.Pending",
                      "newPage": false,
                      "searchKey": "graphqlbackend.updateCheckResolver.Pending",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *updateCheckResolver) Pending() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *updateCheckResolver) Pending() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#updateCheckResolver.CheckedAt",
                    "documentation": {
                      "identifier": "updateCheckResolver.CheckedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.updateCheckResolver.CheckedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *updateCheckResolver) CheckedAt() *DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *updateCheckResolver) CheckedAt() *DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#updateCheckResolver.ErrorMessage",
                    "documentation": {
                      "identifier": "updateCheckResolver.ErrorMessage",
                      "newPage": false,
                      "searchKey": "graphqlbackend.updateCheckResolver.ErrorMessage",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *updateCheckResolver) ErrorMessage() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *updateCheckResolver) ErrorMessage() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#updateCheckResolver.UpdateVersionAvailable",
                    "documentation": {
                      "identifier": "updateCheckResolver.UpdateVersionAvailable",
                      "newPage": false,
                      "searchKey": "graphqlbackend.updateCheckResolver.UpdateVersionAvailable",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *updateCheckResolver) UpdateVersionAvailable() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *updateCheckResolver) UpdateVersionAvailable() *string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#siteUsageStatisticsResolver",
              "documentation": {
                "identifier": "siteUsageStatisticsResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.siteUsageStatisticsResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type siteUsageStatisticsResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype siteUsageStatisticsResolver struct {\n\tsiteUsageStatistics *types.SiteUsageStatistics\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteUsageStatisticsResolver.DAUs",
                    "documentation": {
                      "identifier": "siteUsageStatisticsResolver.DAUs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteUsageStatisticsResolver.DAUs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *siteUsageStatisticsResolver) DAUs() []*siteUsagePeriodResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *siteUsageStatisticsResolver) DAUs() []*siteUsagePeriodResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteUsageStatisticsResolver.WAUs",
                    "documentation": {
                      "identifier": "siteUsageStatisticsResolver.WAUs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteUsageStatisticsResolver.WAUs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *siteUsageStatisticsResolver) WAUs() []*siteUsagePeriodResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *siteUsageStatisticsResolver) WAUs() []*siteUsagePeriodResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteUsageStatisticsResolver.MAUs",
                    "documentation": {
                      "identifier": "siteUsageStatisticsResolver.MAUs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteUsageStatisticsResolver.MAUs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *siteUsageStatisticsResolver) MAUs() []*siteUsagePeriodResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *siteUsageStatisticsResolver) MAUs() []*siteUsagePeriodResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteUsageStatisticsResolver.activities",
                    "documentation": {
                      "identifier": "siteUsageStatisticsResolver.activities",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteUsageStatisticsResolver.activities",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *siteUsageStatisticsResolver) activities(periods []*types.SiteActivityPeriod) []*siteUsagePeriodResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *siteUsageStatisticsResolver) activities(periods []*types.SiteActivityPeriod) []*siteUsagePeriodResolver\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#siteUsagePeriodResolver",
              "documentation": {
                "identifier": "siteUsagePeriodResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.siteUsagePeriodResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type siteUsagePeriodResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype siteUsagePeriodResolver struct {\n\tsiteUsagePeriod *types.SiteActivityPeriod\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteUsagePeriodResolver.StartTime",
                    "documentation": {
                      "identifier": "siteUsagePeriodResolver.StartTime",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteUsagePeriodResolver.StartTime",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *siteUsagePeriodResolver) StartTime() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *siteUsagePeriodResolver) StartTime() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteUsagePeriodResolver.UserCount",
                    "documentation": {
                      "identifier": "siteUsagePeriodResolver.UserCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteUsagePeriodResolver.UserCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *siteUsagePeriodResolver) UserCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *siteUsagePeriodResolver) UserCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteUsagePeriodResolver.RegisteredUserCount",
                    "documentation": {
                      "identifier": "siteUsagePeriodResolver.RegisteredUserCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteUsagePeriodResolver.RegisteredUserCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *siteUsagePeriodResolver) RegisteredUserCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *siteUsagePeriodResolver) RegisteredUserCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteUsagePeriodResolver.AnonymousUserCount",
                    "documentation": {
                      "identifier": "siteUsagePeriodResolver.AnonymousUserCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteUsagePeriodResolver.AnonymousUserCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *siteUsagePeriodResolver) AnonymousUserCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *siteUsagePeriodResolver) AnonymousUserCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#siteUsagePeriodResolver.IntegrationUserCount",
                    "documentation": {
                      "identifier": "siteUsagePeriodResolver.IntegrationUserCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.siteUsagePeriodResolver.IntegrationUserCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *siteUsagePeriodResolver) IntegrationUserCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *siteUsagePeriodResolver) IntegrationUserCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#statusMessageResolver",
              "documentation": {
                "identifier": "statusMessageResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.statusMessageResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type statusMessageResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype statusMessageResolver struct {\n\tmessage repos.StatusMessage\n\tdb      dbutil.DB\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#statusMessageResolver.ToCloningProgress",
                    "documentation": {
                      "identifier": "statusMessageResolver.ToCloningProgress",
                      "newPage": false,
                      "searchKey": "graphqlbackend.statusMessageResolver.ToCloningProgress",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *statusMessageResolver) ToCloningProgress() (*statusMessageResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *statusMessageResolver) ToCloningProgress() (*statusMessageResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#statusMessageResolver.ToIndexingProgress",
                    "documentation": {
                      "identifier": "statusMessageResolver.ToIndexingProgress",
                      "newPage": false,
                      "searchKey": "graphqlbackend.statusMessageResolver.ToIndexingProgress",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *statusMessageResolver) ToIndexingProgress() (*statusMessageResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *statusMessageResolver) ToIndexingProgress() (*statusMessageResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#statusMessageResolver.ToExternalServiceSyncError",
                    "documentation": {
                      "identifier": "statusMessageResolver.ToExternalServiceSyncError",
                      "newPage": false,
                      "searchKey": "graphqlbackend.statusMessageResolver.ToExternalServiceSyncError",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *statusMessageResolver) ToExternalServiceSyncError() (*statusMessageResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *statusMessageResolver) ToExternalServiceSyncError() (*statusMessageResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#statusMessageResolver.ToSyncError",
                    "documentation": {
                      "identifier": "statusMessageResolver.ToSyncError",
                      "newPage": false,
                      "searchKey": "graphqlbackend.statusMessageResolver.ToSyncError",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *statusMessageResolver) ToSyncError() (*statusMessageResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *statusMessageResolver) ToSyncError() (*statusMessageResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#statusMessageResolver.Message",
                    "documentation": {
                      "identifier": "statusMessageResolver.Message",
                      "newPage": false,
                      "searchKey": "graphqlbackend.statusMessageResolver.Message",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *statusMessageResolver) Message() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *statusMessageResolver) Message() (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#statusMessageResolver.ExternalService",
                    "documentation": {
                      "identifier": "statusMessageResolver.ExternalService",
                      "newPage": false,
                      "searchKey": "graphqlbackend.statusMessageResolver.ExternalService",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *statusMessageResolver) ExternalService(ctx context.Context) (*externalServiceResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *statusMessageResolver) ExternalService(ctx context.Context) (*externalServiceResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#surveyResponseResolver",
              "documentation": {
                "identifier": "surveyResponseResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.surveyResponseResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type surveyResponseResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype surveyResponseResolver struct {\n\tdb             dbutil.DB\n\tsurveyResponse *types.SurveyResponse\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#surveyResponseResolver.ID",
                    "documentation": {
                      "identifier": "surveyResponseResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.surveyResponseResolver.ID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *surveyResponseResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *surveyResponseResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#surveyResponseResolver.User",
                    "documentation": {
                      "identifier": "surveyResponseResolver.User",
                      "newPage": false,
                      "searchKey": "graphqlbackend.surveyResponseResolver.User",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *surveyResponseResolver) User(ctx context.Context) (*UserResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *surveyResponseResolver) User(ctx context.Context) (*UserResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#surveyResponseResolver.Email",
                    "documentation": {
                      "identifier": "surveyResponseResolver.Email",
                      "newPage": false,
                      "searchKey": "graphqlbackend.surveyResponseResolver.Email",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *surveyResponseResolver) Email() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *surveyResponseResolver) Email() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#surveyResponseResolver.Score",
                    "documentation": {
                      "identifier": "surveyResponseResolver.Score",
                      "newPage": false,
                      "searchKey": "graphqlbackend.surveyResponseResolver.Score",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *surveyResponseResolver) Score() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *surveyResponseResolver) Score() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#surveyResponseResolver.Reason",
                    "documentation": {
                      "identifier": "surveyResponseResolver.Reason",
                      "newPage": false,
                      "searchKey": "graphqlbackend.surveyResponseResolver.Reason",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *surveyResponseResolver) Reason() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *surveyResponseResolver) Reason() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#surveyResponseResolver.Better",
                    "documentation": {
                      "identifier": "surveyResponseResolver.Better",
                      "newPage": false,
                      "searchKey": "graphqlbackend.surveyResponseResolver.Better",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *surveyResponseResolver) Better() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *surveyResponseResolver) Better() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#surveyResponseResolver.CreatedAt",
                    "documentation": {
                      "identifier": "surveyResponseResolver.CreatedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.surveyResponseResolver.CreatedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *surveyResponseResolver) CreatedAt() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *surveyResponseResolver) CreatedAt() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#SurveySubmissionInput",
              "documentation": {
                "identifier": "SurveySubmissionInput",
                "newPage": false,
                "searchKey": "graphqlbackend.SurveySubmissionInput",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SurveySubmissionInput struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SurveySubmissionInput struct {\n\t// Emails is an optional, user-provided email address, if there is no\n\t// currently authenticated user. If there is, this value will not be used.\n\tEmail *string\n\t// Score is the user's likelihood of recommending Sourcegraph to a friend, from 0-10.\n\tScore int32\n\t// Reason is the answer to \"What is the most important reason for the score you gave\".\n\tReason *string\n\t// Better is the answer to \"What can Sourcegraph do to provide a better product\"\n\tBetter *string\n}\n```\n\nSurveySubmissionInput contains a satisfaction (NPS) survey response. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#surveySubmissionForHubSpot",
              "documentation": {
                "identifier": "surveySubmissionForHubSpot",
                "newPage": false,
                "searchKey": "graphqlbackend.surveySubmissionForHubSpot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type surveySubmissionForHubSpot struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype surveySubmissionForHubSpot struct {\n\tEmail           *string `url:\"email\"`\n\tScore           int32   `url:\"nps_score\"`\n\tReason          *string `url:\"nps_reason\"`\n\tBetter          *string `url:\"nps_improvement\"`\n\tIsAuthenticated bool    `url:\"user_is_authenticated\"`\n\tSiteID          string  `url:\"site_id\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#HappinessFeedbackSubmissionInput",
              "documentation": {
                "identifier": "HappinessFeedbackSubmissionInput",
                "newPage": false,
                "searchKey": "graphqlbackend.HappinessFeedbackSubmissionInput",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type HappinessFeedbackSubmissionInput struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype HappinessFeedbackSubmissionInput struct {\n\t// Score is the user's happiness rating, from 1-4.\n\tScore int32\n\t// Feedback is the answer to \"What's going well? What could be better?\".\n\tFeedback *string\n\t// The path that the happiness feedback was submitted from\n\tCurrentPath *string\n}\n```\n\nFeedbackSubmissionInput contains a happiness feedback response. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#happinessFeedbackSubmissionForHubSpot",
              "documentation": {
                "identifier": "happinessFeedbackSubmissionForHubSpot",
                "newPage": false,
                "searchKey": "graphqlbackend.happinessFeedbackSubmissionForHubSpot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type happinessFeedbackSubmissionForHubSpot struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype happinessFeedbackSubmissionForHubSpot struct {\n\tEmail       *string `url:\"email\"`\n\tScore       int32   `url:\"happiness_score\"`\n\tFeedback    *string `url:\"happiness_feedback\"`\n\tCurrentPath *string `url:\"happiness_current_url\"`\n\tIsTest      bool    `url:\"happiness_is_test\"`\n\tSiteID      string  `url:\"site_id\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#surveyResponseConnectionResolver",
              "documentation": {
                "identifier": "surveyResponseConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.surveyResponseConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type surveyResponseConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype surveyResponseConnectionResolver struct {\n\tdb  dbutil.DB\n\topt database.SurveyResponseListOptions\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#surveyResponseConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "surveyResponseConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.surveyResponseConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *surveyResponseConnectionResolver) Nodes(ctx context.Context) ([]*surveyResponseResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *surveyResponseConnectionResolver) Nodes(ctx context.Context) ([]*surveyResponseResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#surveyResponseConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "surveyResponseConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.surveyResponseConnectionResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *surveyResponseConnectionResolver) TotalCount(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *surveyResponseConnectionResolver) TotalCount(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#surveyResponseConnectionResolver.AverageScore",
                    "documentation": {
                      "identifier": "surveyResponseConnectionResolver.AverageScore",
                      "newPage": false,
                      "searchKey": "graphqlbackend.surveyResponseConnectionResolver.AverageScore",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *surveyResponseConnectionResolver) AverageScore(ctx context.Context) (float64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *surveyResponseConnectionResolver) AverageScore(ctx context.Context) (float64, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#surveyResponseConnectionResolver.NetPromoterScore",
                    "documentation": {
                      "identifier": "surveyResponseConnectionResolver.NetPromoterScore",
                      "newPage": false,
                      "searchKey": "graphqlbackend.surveyResponseConnectionResolver.NetPromoterScore",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *surveyResponseConnectionResolver) NetPromoterScore(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *surveyResponseConnectionResolver) NetPromoterScore(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#surveyResponseConnectionResolver.Last30DaysCount",
                    "documentation": {
                      "identifier": "surveyResponseConnectionResolver.Last30DaysCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.surveyResponseConnectionResolver.Last30DaysCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *surveyResponseConnectionResolver) Last30DaysCount(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *surveyResponseConnectionResolver) Last30DaysCount(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#symbolsArgs",
              "documentation": {
                "identifier": "symbolsArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.symbolsArgs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type symbolsArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype symbolsArgs struct {\n\tgraphqlutil.ConnectionArgs\n\tQuery           *string\n\tIncludePatterns *[]string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#symbolConnectionResolver",
              "documentation": {
                "identifier": "symbolConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.symbolConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type symbolConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype symbolConnectionResolver struct {\n\tfirst   *int32\n\tsymbols []symbolResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#symbolConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "symbolConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.symbolConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *symbolConnectionResolver) Nodes(ctx context.Context) ([]symbolResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *symbolConnectionResolver) Nodes(ctx context.Context) ([]symbolResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#symbolConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "symbolConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.symbolConnectionResolver.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *symbolConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *symbolConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#symbolResolver",
              "documentation": {
                "identifier": "symbolResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.symbolResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type symbolResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype symbolResolver struct {\n\tdb     dbutil.DB\n\tcommit *GitCommitResolver\n\t*result.SymbolMatch\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#toSymbolResolver",
                    "documentation": {
                      "identifier": "toSymbolResolver",
                      "newPage": false,
                      "searchKey": "graphqlbackend.toSymbolResolver",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func toSymbolResolver(db dbutil.DB, commit *GitCommitResolver, sr *result.SymbolMatch) symbolResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc toSymbolResolver(db dbutil.DB, commit *GitCommitResolver, sr *result.SymbolMatch) symbolResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#symbolResolver.Name",
                    "documentation": {
                      "identifier": "symbolResolver.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.symbolResolver.Name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r symbolResolver) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r symbolResolver) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#symbolResolver.ContainerName",
                    "documentation": {
                      "identifier": "symbolResolver.ContainerName",
                      "newPage": false,
                      "searchKey": "graphqlbackend.symbolResolver.ContainerName",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r symbolResolver) ContainerName() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r symbolResolver) ContainerName() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#symbolResolver.Kind",
                    "documentation": {
                      "identifier": "symbolResolver.Kind",
                      "newPage": false,
                      "searchKey": "graphqlbackend.symbolResolver.Kind",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r symbolResolver) Kind() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r symbolResolver) Kind() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#symbolResolver.Language",
                    "documentation": {
                      "identifier": "symbolResolver.Language",
                      "newPage": false,
                      "searchKey": "graphqlbackend.symbolResolver.Language",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r symbolResolver) Language() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r symbolResolver) Language() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#symbolResolver.Location",
                    "documentation": {
                      "identifier": "symbolResolver.Location",
                      "newPage": false,
                      "searchKey": "graphqlbackend.symbolResolver.Location",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r symbolResolver) Location() *locationResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r symbolResolver) Location() *locationResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#symbolResolver.URL",
                    "documentation": {
                      "identifier": "symbolResolver.URL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.symbolResolver.URL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r symbolResolver) URL(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r symbolResolver) URL(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#symbolResolver.CanonicalURL",
                    "documentation": {
                      "identifier": "symbolResolver.CanonicalURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.symbolResolver.CanonicalURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r symbolResolver) CanonicalURL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r symbolResolver) CanonicalURL() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#symbolResolver.FileLocal",
                    "documentation": {
                      "identifier": "symbolResolver.FileLocal",
                      "newPage": false,
                      "searchKey": "graphqlbackend.symbolResolver.FileLocal",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r symbolResolver) FileLocal() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r symbolResolver) FileLocal() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#Test",
              "documentation": {
                "identifier": "Test",
                "newPage": false,
                "searchKey": "graphqlbackend.Test",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Test struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Test struct {\n\tContext        context.Context\n\tSchema         *graphql.Schema\n\tQuery          string\n\tOperationName  string\n\tVariables      map[string]interface{}\n\tExpectedResult string\n\tExpectedErrors []*errors.QueryError\n}\n```\n\nTest is a GraphQL test case to be used with RunTest(s). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#trialRequestForHubSpot",
              "documentation": {
                "identifier": "trialRequestForHubSpot",
                "newPage": false,
                "searchKey": "graphqlbackend.trialRequestForHubSpot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type trialRequestForHubSpot struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype trialRequestForHubSpot struct {\n\tEmail  *string `url:\"email\"`\n\tSiteID string  `url:\"site_id\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#UserResolver",
              "documentation": {
                "identifier": "UserResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.UserResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserResolver struct {\n\tdb   dbutil.DB\n\tuser *types.User\n}\n```\n\nUserResolver implements the GraphQL User type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewUserResolver",
                    "documentation": {
                      "identifier": "NewUserResolver",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewUserResolver",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewUserResolver(db dbutil.DB, user *types.User) *UserResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewUserResolver(db dbutil.DB, user *types.User) *UserResolver\n```\n\nNewUserResolver returns a new UserResolver with given user object. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserByID",
                    "documentation": {
                      "identifier": "UserByID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserByID",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func UserByID(ctx context.Context, db dbutil.DB, id graphql.ID) (*UserResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc UserByID(ctx context.Context, db dbutil.DB, id graphql.ID) (*UserResolver, error)\n```\n\nUserByID looks up and returns the user with the given GraphQL ID. If no such user exists, it returns a non-nil error. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserByIDInt32",
                    "documentation": {
                      "identifier": "UserByIDInt32",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserByIDInt32",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func UserByIDInt32(ctx context.Context, db dbutil.DB, id int32) (*UserResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc UserByIDInt32(ctx context.Context, db dbutil.DB, id int32) (*UserResolver, error)\n```\n\nUserByIDInt32 looks up and returns the user with the given database ID. If no such user exists, it returns a non-nil error. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#CurrentUser",
                    "documentation": {
                      "identifier": "CurrentUser",
                      "newPage": false,
                      "searchKey": "graphqlbackend.CurrentUser",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func CurrentUser(ctx context.Context, db dbutil.DB) (*UserResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc CurrentUser(ctx context.Context, db dbutil.DB) (*UserResolver, error)\n```\n\nCurrentUser returns the authenticated user if any. If there is no authenticated user, it returns (nil, nil). If some other error occurs, then the error is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.AccessTokens",
                    "documentation": {
                      "identifier": "UserResolver.AccessTokens",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.AccessTokens",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) AccessTokens(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) AccessTokens(ctx context.Context, args *struct {\n\tgraphqlutil.ConnectionArgs\n}) (*accessTokenConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.EventLogs",
                    "documentation": {
                      "identifier": "UserResolver.EventLogs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.EventLogs",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) EventLogs(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) EventLogs(ctx context.Context, args *struct {\n\tgraphqlutil.ConnectionArgs\n\tEventName *string // return only event logs matching the event name\n}) (*userEventLogsConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.ExternalAccounts",
                    "documentation": {
                      "identifier": "UserResolver.ExternalAccounts",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.ExternalAccounts",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) ExternalAccounts(ctx context.Context, args *struct {..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) ExternalAccounts(ctx context.Context, args *struct {\n\tgraphqlutil.ConnectionArgs\n}) (*externalAccountConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.OrganizationMemberships",
                    "documentation": {
                      "identifier": "UserResolver.OrganizationMemberships",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.OrganizationMemberships",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) OrganizationMemberships(ctx context.Context) (*organizationMembershipConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) OrganizationMemberships(ctx context.Context) (*organizationMembershipConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.ID",
                    "documentation": {
                      "identifier": "UserResolver.ID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.ID",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.DatabaseID",
                    "documentation": {
                      "identifier": "UserResolver.DatabaseID",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.DatabaseID",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) DatabaseID() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) DatabaseID() int32\n```\n\nDatabaseID returns the numeric ID for the user in the database. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.Email",
                    "documentation": {
                      "identifier": "UserResolver.Email",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.Email",
                      "tags": [
                        "exported",
                        "deprecated"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) Email(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) Email(ctx context.Context) (string, error)\n```\n\nEmail returns the user's oldest email, if one exists. Deprecated: use Emails instead. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.Username",
                    "documentation": {
                      "identifier": "UserResolver.Username",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.Username",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) Username() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) Username() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.DisplayName",
                    "documentation": {
                      "identifier": "UserResolver.DisplayName",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.DisplayName",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) DisplayName() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) DisplayName() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.BuiltinAuth",
                    "documentation": {
                      "identifier": "UserResolver.BuiltinAuth",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.BuiltinAuth",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) BuiltinAuth() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) BuiltinAuth() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.AvatarURL",
                    "documentation": {
                      "identifier": "UserResolver.AvatarURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.AvatarURL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) AvatarURL() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) AvatarURL() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.URL",
                    "documentation": {
                      "identifier": "UserResolver.URL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.URL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) URL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) URL() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.SettingsURL",
                    "documentation": {
                      "identifier": "UserResolver.SettingsURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.SettingsURL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) SettingsURL() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) SettingsURL() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.CreatedAt",
                    "documentation": {
                      "identifier": "UserResolver.CreatedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.CreatedAt",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) CreatedAt() DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) CreatedAt() DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.UpdatedAt",
                    "documentation": {
                      "identifier": "UserResolver.UpdatedAt",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.UpdatedAt",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) UpdatedAt() *DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) UpdatedAt() *DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.settingsSubject",
                    "documentation": {
                      "identifier": "UserResolver.settingsSubject",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.settingsSubject",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) settingsSubject() api.SettingsSubject"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) settingsSubject() api.SettingsSubject\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.LatestSettings",
                    "documentation": {
                      "identifier": "UserResolver.LatestSettings",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.LatestSettings",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) LatestSettings(ctx context.Context) (*settingsResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) LatestSettings(ctx context.Context) (*settingsResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.SettingsCascade",
                    "documentation": {
                      "identifier": "UserResolver.SettingsCascade",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.SettingsCascade",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) SettingsCascade() *settingsCascade"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) SettingsCascade() *settingsCascade\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.ConfigurationCascade",
                    "documentation": {
                      "identifier": "UserResolver.ConfigurationCascade",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.ConfigurationCascade",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) ConfigurationCascade() *settingsCascade"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) ConfigurationCascade() *settingsCascade\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.SiteAdmin",
                    "documentation": {
                      "identifier": "UserResolver.SiteAdmin",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.SiteAdmin",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) SiteAdmin(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) SiteAdmin(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.Organizations",
                    "documentation": {
                      "identifier": "UserResolver.Organizations",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.Organizations",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) Organizations(ctx context.Context) (*orgConnectionStaticResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) Organizations(ctx context.Context) (*orgConnectionStaticResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.Tags",
                    "documentation": {
                      "identifier": "UserResolver.Tags",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.Tags",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) Tags(ctx context.Context) ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) Tags(ctx context.Context) ([]string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.SurveyResponses",
                    "documentation": {
                      "identifier": "UserResolver.SurveyResponses",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.SurveyResponses",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) SurveyResponses(ctx context.Context) ([]*surveyResponseResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) SurveyResponses(ctx context.Context) ([]*surveyResponseResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.ViewerCanAdminister",
                    "documentation": {
                      "identifier": "UserResolver.ViewerCanAdminister",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.ViewerCanAdminister",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) ViewerCanAdminister(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) ViewerCanAdminister(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.URLForSiteAdminBilling",
                    "documentation": {
                      "identifier": "UserResolver.URLForSiteAdminBilling",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.URLForSiteAdminBilling",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) URLForSiteAdminBilling(ctx context.Context) (*string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) URLForSiteAdminBilling(ctx context.Context) (*string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.NamespaceName",
                    "documentation": {
                      "identifier": "UserResolver.NamespaceName",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.NamespaceName",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) NamespaceName() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) NamespaceName() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.PermissionsInfo",
                    "documentation": {
                      "identifier": "UserResolver.PermissionsInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.PermissionsInfo",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) PermissionsInfo(ctx context.Context) (PermissionsInfoResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) PermissionsInfo(ctx context.Context) (PermissionsInfoResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.ViewerCanChangeUsername",
                    "documentation": {
                      "identifier": "UserResolver.ViewerCanChangeUsername",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.ViewerCanChangeUsername",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) ViewerCanChangeUsername(ctx context.Context) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) ViewerCanChangeUsername(ctx context.Context) bool\n```\n\nViewerCanChangeUsername returns if the current user can change the username of the user. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.Campaigns",
                    "documentation": {
                      "identifier": "UserResolver.Campaigns",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.Campaigns",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) Campaigns(ctx context.Context, args *ListBatchChangesArgs) (BatchChangesConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) Campaigns(ctx context.Context, args *ListBatchChangesArgs) (BatchChangesConnectionResolver, error)\n```\n\nTODO(campaigns-deprecation): \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.BatchChanges",
                    "documentation": {
                      "identifier": "UserResolver.BatchChanges",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.BatchChanges",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) BatchChanges(ctx context.Context, args *ListBatchChangesArgs) (BatchChangesConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) BatchChanges(ctx context.Context, args *ListBatchChangesArgs) (BatchChangesConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.Repositories",
                    "documentation": {
                      "identifier": "UserResolver.Repositories",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.Repositories",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) Repositories(ctx context.Context, args *ListUserRepositoriesArgs) (RepositoryConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) Repositories(ctx context.Context, args *ListUserRepositoriesArgs) (RepositoryConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.CampaignsCodeHosts",
                    "documentation": {
                      "identifier": "UserResolver.CampaignsCodeHosts",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.CampaignsCodeHosts",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) CampaignsCodeHosts(ctx context.Context, args *ListCampaignsCodeHostsArgs) (CampaignsCodeHostConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) CampaignsCodeHosts(ctx context.Context, args *ListCampaignsCodeHostsArgs) (CampaignsCodeHostConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.BatchChangesCodeHosts",
                    "documentation": {
                      "identifier": "UserResolver.BatchChangesCodeHosts",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.BatchChangesCodeHosts",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) BatchChangesCodeHosts(ctx context.Context, args *ListBatchChangesCodeHostsArgs) (BatchChangesCodeHostConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) BatchChangesCodeHosts(ctx context.Context, args *ListBatchChangesCodeHostsArgs) (BatchChangesCodeHostConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.Monitors",
                    "documentation": {
                      "identifier": "UserResolver.Monitors",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.Monitors",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) Monitors(ctx context.Context, args *ListMonitorsArgs) (MonitorConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) Monitors(ctx context.Context, args *ListMonitorsArgs) (MonitorConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.PublicRepositories",
                    "documentation": {
                      "identifier": "UserResolver.PublicRepositories",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.PublicRepositories",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) PublicRepositories(ctx context.Context) ([]*RepositoryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) PublicRepositories(ctx context.Context) ([]*RepositoryResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.Emails",
                    "documentation": {
                      "identifier": "UserResolver.Emails",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.Emails",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) Emails(ctx context.Context) ([]*userEmailResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) Emails(ctx context.Context) ([]*userEmailResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.Session",
                    "documentation": {
                      "identifier": "UserResolver.Session",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.Session",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) Session(ctx context.Context) (*sessionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) Session(ctx context.Context) (*sessionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#UserResolver.UsageStatistics",
                    "documentation": {
                      "identifier": "UserResolver.UsageStatistics",
                      "newPage": false,
                      "searchKey": "graphqlbackend.UserResolver.UsageStatistics",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UserResolver) UsageStatistics(ctx context.Context) (*userUsageStatisticsResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UserResolver) UsageStatistics(ctx context.Context) (*userUsageStatisticsResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#updateUserArgs",
              "documentation": {
                "identifier": "updateUserArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.updateUserArgs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type updateUserArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype updateUserArgs struct {\n\tUser        graphql.ID\n\tUsername    *string\n\tDisplayName *string\n\tAvatarURL   *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#ListUserRepositoriesArgs",
              "documentation": {
                "identifier": "ListUserRepositoriesArgs",
                "newPage": false,
                "searchKey": "graphqlbackend.ListUserRepositoriesArgs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListUserRepositoriesArgs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListUserRepositoriesArgs struct {\n\tFirst             *int32\n\tQuery             *string\n\tAfter             *string\n\tCloned            bool\n\tNotCloned         bool\n\tIndexed           bool\n\tNotIndexed        bool\n\tExternalServiceID *graphql.ID\n\tOrderBy           *string\n\tDescending        bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#userEmailResolver",
              "documentation": {
                "identifier": "userEmailResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.userEmailResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type userEmailResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype userEmailResolver struct {\n\tdb        dbutil.DB\n\tuserEmail database.UserEmail\n\tuser      *UserResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userEmailResolver.Email",
                    "documentation": {
                      "identifier": "userEmailResolver.Email",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userEmailResolver.Email",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *userEmailResolver) Email() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *userEmailResolver) Email() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userEmailResolver.IsPrimary",
                    "documentation": {
                      "identifier": "userEmailResolver.IsPrimary",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userEmailResolver.IsPrimary",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *userEmailResolver) IsPrimary(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *userEmailResolver) IsPrimary(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userEmailResolver.Verified",
                    "documentation": {
                      "identifier": "userEmailResolver.Verified",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userEmailResolver.Verified",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *userEmailResolver) Verified() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *userEmailResolver) Verified() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userEmailResolver.VerificationPending",
                    "documentation": {
                      "identifier": "userEmailResolver.VerificationPending",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userEmailResolver.VerificationPending",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *userEmailResolver) VerificationPending() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *userEmailResolver) VerificationPending() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userEmailResolver.User",
                    "documentation": {
                      "identifier": "userEmailResolver.User",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userEmailResolver.User",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *userEmailResolver) User() *UserResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *userEmailResolver) User() *UserResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userEmailResolver.ViewerCanManuallyVerify",
                    "documentation": {
                      "identifier": "userEmailResolver.ViewerCanManuallyVerify",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userEmailResolver.ViewerCanManuallyVerify",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *userEmailResolver) ViewerCanManuallyVerify(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *userEmailResolver) ViewerCanManuallyVerify(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#sessionResolver",
              "documentation": {
                "identifier": "sessionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.sessionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type sessionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sessionResolver struct {\n\tcanSignOut bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#sessionResolver.CanSignOut",
                    "documentation": {
                      "identifier": "sessionResolver.CanSignOut",
                      "newPage": false,
                      "searchKey": "graphqlbackend.sessionResolver.CanSignOut",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *sessionResolver) CanSignOut() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *sessionResolver) CanSignOut() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#userUsageStatisticsResolver",
              "documentation": {
                "identifier": "userUsageStatisticsResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.userUsageStatisticsResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type userUsageStatisticsResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype userUsageStatisticsResolver struct {\n\tuserUsageStatistics *types.UserUsageStatistics\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userUsageStatisticsResolver.PageViews",
                    "documentation": {
                      "identifier": "userUsageStatisticsResolver.PageViews",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userUsageStatisticsResolver.PageViews",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *userUsageStatisticsResolver) PageViews() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *userUsageStatisticsResolver) PageViews() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userUsageStatisticsResolver.SearchQueries",
                    "documentation": {
                      "identifier": "userUsageStatisticsResolver.SearchQueries",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userUsageStatisticsResolver.SearchQueries",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *userUsageStatisticsResolver) SearchQueries() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *userUsageStatisticsResolver) SearchQueries() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userUsageStatisticsResolver.CodeIntelligenceActions",
                    "documentation": {
                      "identifier": "userUsageStatisticsResolver.CodeIntelligenceActions",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userUsageStatisticsResolver.CodeIntelligenceActions",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *userUsageStatisticsResolver) CodeIntelligenceActions() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *userUsageStatisticsResolver) CodeIntelligenceActions() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userUsageStatisticsResolver.FindReferencesActions",
                    "documentation": {
                      "identifier": "userUsageStatisticsResolver.FindReferencesActions",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userUsageStatisticsResolver.FindReferencesActions",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *userUsageStatisticsResolver) FindReferencesActions() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *userUsageStatisticsResolver) FindReferencesActions() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userUsageStatisticsResolver.LastActiveTime",
                    "documentation": {
                      "identifier": "userUsageStatisticsResolver.LastActiveTime",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userUsageStatisticsResolver.LastActiveTime",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *userUsageStatisticsResolver) LastActiveTime() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *userUsageStatisticsResolver) LastActiveTime() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userUsageStatisticsResolver.LastActiveCodeHostIntegrationTime",
                    "documentation": {
                      "identifier": "userUsageStatisticsResolver.LastActiveCodeHostIntegrationTime",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userUsageStatisticsResolver.LastActiveCodeHostIntegrationTime",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *userUsageStatisticsResolver) LastActiveCodeHostIntegrationTime() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *userUsageStatisticsResolver) LastActiveCodeHostIntegrationTime() *string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#UserConnectionResolver",
              "documentation": {
                "identifier": "UserConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.UserConnectionResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserConnectionResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserConnectionResolver interface {\n\tNodes(ctx context.Context) ([]*UserResolver, error)\n\tTotalCount(ctx context.Context) (int32, error)\n\tPageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#userConnectionResolver",
              "documentation": {
                "identifier": "userConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.userConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type userConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype userConnectionResolver struct {\n\tdb           dbutil.DB\n\topt          database.UsersListOptions\n\tactivePeriod *string\n\n\t// cache results because they are used by multiple fields\n\tonce       sync.Once\n\tusers      []*types.User\n\ttotalCount int\n\terr        error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userConnectionResolver.compute",
                    "documentation": {
                      "identifier": "userConnectionResolver.compute",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userConnectionResolver.compute",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *userConnectionResolver) compute(ctx context.Context) ([]*types.User, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *userConnectionResolver) compute(ctx context.Context) ([]*types.User, int, error)\n```\n\ncompute caches results from the more expensive user list creation that occurs when activePeriod is set to a specific length of time. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "userConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *userConnectionResolver) Nodes(ctx context.Context) ([]*UserResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *userConnectionResolver) Nodes(ctx context.Context) ([]*UserResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "userConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userConnectionResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *userConnectionResolver) TotalCount(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *userConnectionResolver) TotalCount(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "userConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userConnectionResolver.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *userConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *userConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#userConnectionResolver.useCache",
                    "documentation": {
                      "identifier": "userConnectionResolver.useCache",
                      "newPage": false,
                      "searchKey": "graphqlbackend.userConnectionResolver.useCache",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *userConnectionResolver) useCache() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *userConnectionResolver) useCache() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#staticUserConnectionResolver",
              "documentation": {
                "identifier": "staticUserConnectionResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.staticUserConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type staticUserConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype staticUserConnectionResolver struct {\n\tdb    dbutil.DB\n\tusers []*types.User\n}\n```\n\nstaticUserConnectionResolver implements the GraphQL type UserConnection based on an underlying list of users that is computed statically. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#staticUserConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "staticUserConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphqlbackend.staticUserConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *staticUserConnectionResolver) Nodes() []*UserResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *staticUserConnectionResolver) Nodes() []*UserResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#staticUserConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "staticUserConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphqlbackend.staticUserConnectionResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *staticUserConnectionResolver) TotalCount() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *staticUserConnectionResolver) TotalCount() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#staticUserConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "staticUserConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphqlbackend.staticUserConnectionResolver.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *staticUserConnectionResolver) PageInfo() *graphqlutil.PageInfo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *staticUserConnectionResolver) PageInfo() *graphqlutil.PageInfo\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#createUserResult",
              "documentation": {
                "identifier": "createUserResult",
                "newPage": false,
                "searchKey": "graphqlbackend.createUserResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type createUserResult struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype createUserResult struct {\n\tdb   dbutil.DB\n\tuser *types.User\n}\n```\n\ncreateUserResult is the result of Mutation.createUser. \n\n🚨 SECURITY: Only site admins should be able to instantiate this value. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#createUserResult.User",
                    "documentation": {
                      "identifier": "createUserResult.User",
                      "newPage": false,
                      "searchKey": "graphqlbackend.createUserResult.User",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *createUserResult) User() *UserResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *createUserResult) User() *UserResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#createUserResult.ResetPasswordURL",
                    "documentation": {
                      "identifier": "createUserResult.ResetPasswordURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.createUserResult.ResetPasswordURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *createUserResult) ResetPasswordURL(ctx context.Context) (*string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *createUserResult) ResetPasswordURL(ctx context.Context) (*string, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#randomizeUserPasswordResult",
              "documentation": {
                "identifier": "randomizeUserPasswordResult",
                "newPage": false,
                "searchKey": "graphqlbackend.randomizeUserPasswordResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type randomizeUserPasswordResult struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype randomizeUserPasswordResult struct {\n\tuserID int32\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#randomizeUserPasswordResult.ResetPasswordURL",
                    "documentation": {
                      "identifier": "randomizeUserPasswordResult.ResetPasswordURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.randomizeUserPasswordResult.ResetPasswordURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *randomizeUserPasswordResult) ResetPasswordURL(ctx context.Context) (*string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *randomizeUserPasswordResult) ResetPasswordURL(ctx context.Context) (*string, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#versionContextResolver",
              "documentation": {
                "identifier": "versionContextResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.versionContextResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type versionContextResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype versionContextResolver struct {\n\tvc *schema.VersionContext\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewVersionContextResolver",
                    "documentation": {
                      "identifier": "NewVersionContextResolver",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewVersionContextResolver",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewVersionContextResolver(vc *schema.VersionContext) *versionContextResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewVersionContextResolver(vc *schema.VersionContext) *versionContextResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#versionContextResolver.Name",
                    "documentation": {
                      "identifier": "versionContextResolver.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.versionContextResolver.Name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *versionContextResolver) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *versionContextResolver) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#versionContextResolver.Description",
                    "documentation": {
                      "identifier": "versionContextResolver.Description",
                      "newPage": false,
                      "searchKey": "graphqlbackend.versionContextResolver.Description",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *versionContextResolver) Description() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *versionContextResolver) Description() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#FileContentFunc",
              "documentation": {
                "identifier": "FileContentFunc",
                "newPage": false,
                "searchKey": "graphqlbackend.FileContentFunc",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FileContentFunc func(ctx context.Context) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FileContentFunc func(ctx context.Context) (string, error)\n```\n\nFileContentFunc is a closure that returns the contents of a file and is used by the VirtualFileResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#fileDiffVirtualFileContent",
                    "documentation": {
                      "identifier": "fileDiffVirtualFileContent",
                      "newPage": false,
                      "searchKey": "graphqlbackend.fileDiffVirtualFileContent",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fileDiffVirtualFileContent(r *FileDiffResolver) FileContentFunc"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fileDiffVirtualFileContent(r *FileDiffResolver) FileContentFunc\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#virtualFileResolver",
              "documentation": {
                "identifier": "virtualFileResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.virtualFileResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type virtualFileResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype virtualFileResolver struct {\n\tfileContent FileContentFunc\n\t// stat is this tree entry's file info. Its Name method must return the full path relative to\n\t// the root, not the basename.\n\tstat fs.FileInfo\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#NewVirtualFileResolver",
                    "documentation": {
                      "identifier": "NewVirtualFileResolver",
                      "newPage": false,
                      "searchKey": "graphqlbackend.NewVirtualFileResolver",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewVirtualFileResolver(stat fs.FileInfo, fileContent FileContentFunc) *virtualFileResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewVirtualFileResolver(stat fs.FileInfo, fileContent FileContentFunc) *virtualFileResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#virtualFileResolver.Path",
                    "documentation": {
                      "identifier": "virtualFileResolver.Path",
                      "newPage": false,
                      "searchKey": "graphqlbackend.virtualFileResolver.Path",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *virtualFileResolver) Path() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *virtualFileResolver) Path() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#virtualFileResolver.Name",
                    "documentation": {
                      "identifier": "virtualFileResolver.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.virtualFileResolver.Name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *virtualFileResolver) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *virtualFileResolver) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#virtualFileResolver.IsDirectory",
                    "documentation": {
                      "identifier": "virtualFileResolver.IsDirectory",
                      "newPage": false,
                      "searchKey": "graphqlbackend.virtualFileResolver.IsDirectory",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *virtualFileResolver) IsDirectory() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *virtualFileResolver) IsDirectory() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#virtualFileResolver.ToGitBlob",
                    "documentation": {
                      "identifier": "virtualFileResolver.ToGitBlob",
                      "newPage": false,
                      "searchKey": "graphqlbackend.virtualFileResolver.ToGitBlob",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *virtualFileResolver) ToGitBlob() (*GitTreeEntryResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *virtualFileResolver) ToGitBlob() (*GitTreeEntryResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#virtualFileResolver.ToVirtualFile",
                    "documentation": {
                      "identifier": "virtualFileResolver.ToVirtualFile",
                      "newPage": false,
                      "searchKey": "graphqlbackend.virtualFileResolver.ToVirtualFile",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *virtualFileResolver) ToVirtualFile() (*virtualFileResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *virtualFileResolver) ToVirtualFile() (*virtualFileResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#virtualFileResolver.URL",
                    "documentation": {
                      "identifier": "virtualFileResolver.URL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.virtualFileResolver.URL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *virtualFileResolver) URL(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *virtualFileResolver) URL(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#virtualFileResolver.CanonicalURL",
                    "documentation": {
                      "identifier": "virtualFileResolver.CanonicalURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.virtualFileResolver.CanonicalURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *virtualFileResolver) CanonicalURL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *virtualFileResolver) CanonicalURL() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#virtualFileResolver.ExternalURLs",
                    "documentation": {
                      "identifier": "virtualFileResolver.ExternalURLs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.virtualFileResolver.ExternalURLs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *virtualFileResolver) ExternalURLs(ctx context.Context) ([]*externallink.Resolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *virtualFileResolver) ExternalURLs(ctx context.Context) ([]*externallink.Resolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#virtualFileResolver.ByteSize",
                    "documentation": {
                      "identifier": "virtualFileResolver.ByteSize",
                      "newPage": false,
                      "searchKey": "graphqlbackend.virtualFileResolver.ByteSize",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *virtualFileResolver) ByteSize(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *virtualFileResolver) ByteSize(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#virtualFileResolver.Content",
                    "documentation": {
                      "identifier": "virtualFileResolver.Content",
                      "newPage": false,
                      "searchKey": "graphqlbackend.virtualFileResolver.Content",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *virtualFileResolver) Content(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *virtualFileResolver) Content(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#virtualFileResolver.RichHTML",
                    "documentation": {
                      "identifier": "virtualFileResolver.RichHTML",
                      "newPage": false,
                      "searchKey": "graphqlbackend.virtualFileResolver.RichHTML",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *virtualFileResolver) RichHTML(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *virtualFileResolver) RichHTML(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#virtualFileResolver.Binary",
                    "documentation": {
                      "identifier": "virtualFileResolver.Binary",
                      "newPage": false,
                      "searchKey": "graphqlbackend.virtualFileResolver.Binary",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *virtualFileResolver) Binary(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *virtualFileResolver) Binary(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#virtualFileResolver.Highlight",
                    "documentation": {
                      "identifier": "virtualFileResolver.Highlight",
                      "newPage": false,
                      "searchKey": "graphqlbackend.virtualFileResolver.Highlight",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *virtualFileResolver) Highlight(ctx context.Context, args *HighlightArgs) (*highlightedFileResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *virtualFileResolver) Highlight(ctx context.Context, args *HighlightArgs) (*highlightedFileResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#roundTripFunc",
              "documentation": {
                "identifier": "roundTripFunc",
                "newPage": false,
                "searchKey": "graphqlbackend.roundTripFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type roundTripFunc func(*net/http.Request) (*net/http.Response, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype roundTripFunc func(*http.Request) (*http.Response, error)\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#roundTripFunc.RoundTrip",
                    "documentation": {
                      "identifier": "roundTripFunc.RoundTrip",
                      "newPage": false,
                      "searchKey": "graphqlbackend.roundTripFunc.RoundTrip",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f roundTripFunc) RoundTrip(r *http.Request) (*http.Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f roundTripFunc) RoundTrip(r *http.Request) (*http.Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#githubRepository",
              "documentation": {
                "identifier": "githubRepository",
                "newPage": false,
                "searchKey": "graphqlbackend.githubRepository",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type githubRepository struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype githubRepository struct {\n\tFullName string `json:\"full_name\"`\n\tPrivate  bool   `json:\"private\"`\n}\n```\n\ncopied from the github client, just the fields we need \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitlabRepository",
              "documentation": {
                "identifier": "gitlabRepository",
                "newPage": false,
                "searchKey": "graphqlbackend.gitlabRepository",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gitlabRepository struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gitlabRepository struct {\n\tVisibility        string `json:\"visibility\"`\n\tID                int    `json:\"id\"`\n\tPathWithNamespace string `json:\"path_with_namespace\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#dummyFileResolver",
              "documentation": {
                "identifier": "dummyFileResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.dummyFileResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type dummyFileResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dummyFileResolver struct {\n\tpath, name string\n\n\trichHTML     string\n\turl          string\n\tcanonicalURL string\n\n\tcontent func(context.Context) (string, error)\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#dummyFileResolver.Path",
                    "documentation": {
                      "identifier": "dummyFileResolver.Path",
                      "newPage": false,
                      "searchKey": "graphqlbackend.dummyFileResolver.Path",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *dummyFileResolver) Path() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *dummyFileResolver) Path() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#dummyFileResolver.Name",
                    "documentation": {
                      "identifier": "dummyFileResolver.Name",
                      "newPage": false,
                      "searchKey": "graphqlbackend.dummyFileResolver.Name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *dummyFileResolver) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *dummyFileResolver) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#dummyFileResolver.IsDirectory",
                    "documentation": {
                      "identifier": "dummyFileResolver.IsDirectory",
                      "newPage": false,
                      "searchKey": "graphqlbackend.dummyFileResolver.IsDirectory",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *dummyFileResolver) IsDirectory() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *dummyFileResolver) IsDirectory() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#dummyFileResolver.Content",
                    "documentation": {
                      "identifier": "dummyFileResolver.Content",
                      "newPage": false,
                      "searchKey": "graphqlbackend.dummyFileResolver.Content",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *dummyFileResolver) Content(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *dummyFileResolver) Content(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#dummyFileResolver.ByteSize",
                    "documentation": {
                      "identifier": "dummyFileResolver.ByteSize",
                      "newPage": false,
                      "searchKey": "graphqlbackend.dummyFileResolver.ByteSize",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *dummyFileResolver) ByteSize(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *dummyFileResolver) ByteSize(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#dummyFileResolver.Binary",
                    "documentation": {
                      "identifier": "dummyFileResolver.Binary",
                      "newPage": false,
                      "searchKey": "graphqlbackend.dummyFileResolver.Binary",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *dummyFileResolver) Binary(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *dummyFileResolver) Binary(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#dummyFileResolver.RichHTML",
                    "documentation": {
                      "identifier": "dummyFileResolver.RichHTML",
                      "newPage": false,
                      "searchKey": "graphqlbackend.dummyFileResolver.RichHTML",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *dummyFileResolver) RichHTML(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *dummyFileResolver) RichHTML(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#dummyFileResolver.URL",
                    "documentation": {
                      "identifier": "dummyFileResolver.URL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.dummyFileResolver.URL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *dummyFileResolver) URL(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *dummyFileResolver) URL(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#dummyFileResolver.CanonicalURL",
                    "documentation": {
                      "identifier": "dummyFileResolver.CanonicalURL",
                      "newPage": false,
                      "searchKey": "graphqlbackend.dummyFileResolver.CanonicalURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *dummyFileResolver) CanonicalURL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *dummyFileResolver) CanonicalURL() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#dummyFileResolver.ExternalURLs",
                    "documentation": {
                      "identifier": "dummyFileResolver.ExternalURLs",
                      "newPage": false,
                      "searchKey": "graphqlbackend.dummyFileResolver.ExternalURLs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *dummyFileResolver) ExternalURLs(ctx context.Context) ([]*externallink.Resolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *dummyFileResolver) ExternalURLs(ctx context.Context) ([]*externallink.Resolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#dummyFileResolver.Highlight",
                    "documentation": {
                      "identifier": "dummyFileResolver.Highlight",
                      "newPage": false,
                      "searchKey": "graphqlbackend.dummyFileResolver.Highlight",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *dummyFileResolver) Highlight(ctx context.Context, args *HighlightArgs) (*highlightedFileResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *dummyFileResolver) Highlight(ctx context.Context, args *HighlightArgs) (*highlightedFileResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#dummyFileResolver.ToGitBlob",
                    "documentation": {
                      "identifier": "dummyFileResolver.ToGitBlob",
                      "newPage": false,
                      "searchKey": "graphqlbackend.dummyFileResolver.ToGitBlob",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *dummyFileResolver) ToGitBlob() (*GitTreeEntryResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *dummyFileResolver) ToGitBlob() (*GitTreeEntryResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#dummyFileResolver.ToVirtualFile",
                    "documentation": {
                      "identifier": "dummyFileResolver.ToVirtualFile",
                      "newPage": false,
                      "searchKey": "graphqlbackend.dummyFileResolver.ToVirtualFile",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *dummyFileResolver) ToVirtualFile() (*virtualFileResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *dummyFileResolver) ToVirtualFile() (*virtualFileResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#dummyFileHighlighter",
              "documentation": {
                "identifier": "dummyFileHighlighter",
                "newPage": false,
                "searchKey": "graphqlbackend.dummyFileHighlighter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type dummyFileHighlighter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dummyFileHighlighter struct {\n\thighlightedBase, highlightedHead []template.HTML\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#dummyFileHighlighter.Highlight",
                    "documentation": {
                      "identifier": "dummyFileHighlighter.Highlight",
                      "newPage": false,
                      "searchKey": "graphqlbackend.dummyFileHighlighter.Highlight",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *dummyFileHighlighter) Highlight(ctx context.Context, args *HighlightArgs) ([]template.HTML, []template.HTML, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *dummyFileHighlighter) Highlight(ctx context.Context, args *HighlightArgs) ([]template.HTML, []template.HTML, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repoListerMock",
              "documentation": {
                "identifier": "repoListerMock",
                "newPage": false,
                "searchKey": "graphqlbackend.repoListerMock",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repoListerMock struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repoListerMock struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/graphqlbackend#repoListerMock.List",
                    "documentation": {
                      "identifier": "repoListerMock.List",
                      "newPage": false,
                      "searchKey": "graphqlbackend.repoListerMock.List",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r repoListerMock) List(ctx context.Context, q zoektquery.Q) (*zoekt.RepoList, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r repoListerMock) List(ctx context.Context, q zoektquery.Q) (*zoekt.RepoList, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/cmd/frontend/graphqlbackend#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#marshalAccessTokenID",
              "documentation": {
                "identifier": "marshalAccessTokenID",
                "newPage": false,
                "searchKey": "graphqlbackend.marshalAccessTokenID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalAccessTokenID(id int64) graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalAccessTokenID(id int64) graphql.ID\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#unmarshalAccessTokenID",
              "documentation": {
                "identifier": "unmarshalAccessTokenID",
                "newPage": false,
                "searchKey": "graphqlbackend.unmarshalAccessTokenID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func unmarshalAccessTokenID(id graphql.ID) (accessTokenID int64, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unmarshalAccessTokenID(id graphql.ID) (accessTokenID int64, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#allowPrivate",
              "documentation": {
                "identifier": "allowPrivate",
                "newPage": false,
                "searchKey": "graphqlbackend.allowPrivate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func allowPrivate(ctx context.Context, db dbutil.DB, userID int32) (bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc allowPrivate(ctx context.Context, db dbutil.DB, userID int32) (bool, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#stripPassword",
              "documentation": {
                "identifier": "stripPassword",
                "newPage": false,
                "searchKey": "graphqlbackend.stripPassword",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stripPassword(s string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stripPassword(s string) string\n```\n\nstripPassword strips the password from u if it can be parsed as a URL. If not, it is left unchanged This is a modified version of stringPassword from the standard lib in net/http/client.go \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#defaultSettings",
              "documentation": {
                "identifier": "defaultSettings",
                "newPage": false,
                "searchKey": "graphqlbackend.defaultSettings",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func defaultSettings(db dbutil.DB) map[string]interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc defaultSettings(db dbutil.DB) map[string]interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#marshalDefaultSettingsGQLID",
              "documentation": {
                "identifier": "marshalDefaultSettingsGQLID",
                "newPage": false,
                "searchKey": "graphqlbackend.marshalDefaultSettingsGQLID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalDefaultSettingsGQLID(defaultSettingsID string) graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalDefaultSettingsGQLID(defaultSettingsID string) graphql.ID\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#marshalExternalAccountID",
              "documentation": {
                "identifier": "marshalExternalAccountID",
                "newPage": false,
                "searchKey": "graphqlbackend.marshalExternalAccountID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalExternalAccountID(repo int32) graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalExternalAccountID(repo int32) graphql.ID\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#unmarshalExternalAccountID",
              "documentation": {
                "identifier": "unmarshalExternalAccountID",
                "newPage": false,
                "searchKey": "graphqlbackend.unmarshalExternalAccountID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func unmarshalExternalAccountID(id graphql.ID) (externalAccountID int32, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unmarshalExternalAccountID(id graphql.ID) (externalAccountID int32, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#marshalExternalServiceID",
              "documentation": {
                "identifier": "marshalExternalServiceID",
                "newPage": false,
                "searchKey": "graphqlbackend.marshalExternalServiceID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalExternalServiceID(id int64) graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalExternalServiceID(id int64) graphql.ID\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#unmarshalExternalServiceID",
              "documentation": {
                "identifier": "unmarshalExternalServiceID",
                "newPage": false,
                "searchKey": "graphqlbackend.unmarshalExternalServiceID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func unmarshalExternalServiceID(id graphql.ID) (externalServiceID int64, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unmarshalExternalServiceID(id graphql.ID) (externalServiceID int64, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#syncExternalService",
              "documentation": {
                "identifier": "syncExternalService",
                "newPage": false,
                "searchKey": "graphqlbackend.syncExternalService",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func syncExternalService(ctx context.Context, svc *types.ExternalService, timeout time.Duration, client repoupdaterClient) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc syncExternalService(ctx context.Context, svc *types.ExternalService, timeout time.Duration, client repoupdaterClient) error\n```\n\nsyncExternalService will eagerly trigger a repo-updater sync. It accepts a timeout as an argument which is recommended to be 5 seconds unless the caller has special requirements for it to be larger or smaller. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#checkExternalServiceAccess",
              "documentation": {
                "identifier": "checkExternalServiceAccess",
                "newPage": false,
                "searchKey": "graphqlbackend.checkExternalServiceAccess",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkExternalServiceAccess(ctx context.Context, db dbutil.DB, namespaceUserID int32) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkExternalServiceAccess(ctx context.Context, db dbutil.DB, namespaceUserID int32) error\n```\n\ncheckExternalServiceAccess checks whether the current user is allowed to access the supplied external service. \n\n🚨 SECURITY: Site admins can view external services with no owner, otherwise only the owner of the external service is allowed to access it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#overridesToResolvers",
              "documentation": {
                "identifier": "overridesToResolvers",
                "newPage": false,
                "searchKey": "graphqlbackend.overridesToResolvers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func overridesToResolvers(db dbutil.DB, input []*featureflag.Override) []*FeatureFlagOverrideResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc overridesToResolvers(db dbutil.DB, input []*featureflag.Override) []*FeatureFlagOverrideResolver\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#marshalOverrideID",
              "documentation": {
                "identifier": "marshalOverrideID",
                "newPage": false,
                "searchKey": "graphqlbackend.marshalOverrideID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalOverrideID(spec overrideSpec) graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalOverrideID(spec overrideSpec) graphql.ID\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#evaluatedFlagsToResolvers",
              "documentation": {
                "identifier": "evaluatedFlagsToResolvers",
                "newPage": false,
                "searchKey": "graphqlbackend.evaluatedFlagsToResolvers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func evaluatedFlagsToResolvers(input map[string]bool) []*EvaluatedFeatureFlagResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc evaluatedFlagsToResolvers(input map[string]bool) []*EvaluatedFeatureFlagResolver\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#flagsToResolvers",
              "documentation": {
                "identifier": "flagsToResolvers",
                "newPage": false,
                "searchKey": "graphqlbackend.flagsToResolvers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func flagsToResolvers(db dbutil.DB, flags []*featureflag.FeatureFlag) []*FeatureFlagResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc flagsToResolvers(db dbutil.DB, flags []*featureflag.FeatureFlag) []*FeatureFlagResolver\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#richHTML",
              "documentation": {
                "identifier": "richHTML",
                "newPage": false,
                "searchKey": "graphqlbackend.richHTML",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func richHTML(content, ext string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc richHTML(content, ext string) (string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#marshalGitCommitID",
              "documentation": {
                "identifier": "marshalGitCommitID",
                "newPage": false,
                "searchKey": "graphqlbackend.marshalGitCommitID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalGitCommitID(repo graphql.ID, commitID GitObjectID) graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalGitCommitID(repo graphql.ID, commitID GitObjectID) graphql.ID\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitRefPrefix",
              "documentation": {
                "identifier": "gitRefPrefix",
                "newPage": false,
                "searchKey": "graphqlbackend.gitRefPrefix",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func gitRefPrefix(ref string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc gitRefPrefix(ref string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitRefType",
              "documentation": {
                "identifier": "gitRefType",
                "newPage": false,
                "searchKey": "graphqlbackend.gitRefType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func gitRefType(ref string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc gitRefType(ref string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#gitRefDisplayName",
              "documentation": {
                "identifier": "gitRefDisplayName",
                "newPage": false,
                "searchKey": "graphqlbackend.gitRefDisplayName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func gitRefDisplayName(ref string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc gitRefDisplayName(ref string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#marshalGitRefID",
              "documentation": {
                "identifier": "marshalGitRefID",
                "newPage": false,
                "searchKey": "graphqlbackend.marshalGitRefID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalGitRefID(repo graphql.ID, rev string) graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalGitRefID(repo graphql.ID, rev string) graphql.ID\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#unmarshalGitRefID",
              "documentation": {
                "identifier": "unmarshalGitRefID",
                "newPage": false,
                "searchKey": "graphqlbackend.unmarshalGitRefID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func unmarshalGitRefID(id graphql.ID) (repoID graphql.ID, rev string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unmarshalGitRefID(id graphql.ID) (repoID graphql.ID, rev string, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#escapePathForURL",
              "documentation": {
                "identifier": "escapePathForURL",
                "newPage": false,
                "searchKey": "graphqlbackend.escapePathForURL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func escapePathForURL(path string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc escapePathForURL(path string) string\n```\n\nescapePathForURL escapes path (e.g. repository name, revspec) for use in a Sourcegraph URL. For niceness/readability, we do NOT escape slashes but we do escape other characters like '#' that are necessary for correctness. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#cloneURLToRepoName",
              "documentation": {
                "identifier": "cloneURLToRepoName",
                "newPage": false,
                "searchKey": "graphqlbackend.cloneURLToRepoName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func cloneURLToRepoName(ctx context.Context, cloneURL string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc cloneURLToRepoName(ctx context.Context, cloneURL string) (string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#CreateFileInfo",
              "documentation": {
                "identifier": "CreateFileInfo",
                "newPage": false,
                "searchKey": "graphqlbackend.CreateFileInfo",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func CreateFileInfo(path string, isDir bool) fs.FileInfo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CreateFileInfo(path string, isDir bool) fs.FileInfo\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#prometheusFieldName",
              "documentation": {
                "identifier": "prometheusFieldName",
                "newPage": false,
                "searchKey": "graphqlbackend.prometheusFieldName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func prometheusFieldName(typeName, fieldName string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc prometheusFieldName(typeName, fieldName string) string\n```\n\nprometheusFieldName reduces the cardinality of GraphQL field names to make it suitable for use in a Prometheus metric. We only track the ones most valuable to us. \n\nSee [https://github.com/sourcegraph/sourcegraph/issues/9895](https://github.com/sourcegraph/sourcegraph/issues/9895) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#prometheusTypeName",
              "documentation": {
                "identifier": "prometheusTypeName",
                "newPage": false,
                "searchKey": "graphqlbackend.prometheusTypeName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func prometheusTypeName(typeName string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc prometheusTypeName(typeName string) string\n```\n\nprometheusTypeName reduces the cardinality of GraphQL type names to make it suitable for use in a Prometheus metric. This is a blocklist of type names which involve non-complex calculations in the GraphQL backend and thus are not worth tracking. You can find a complete list of the ones Prometheus is currently tracking via: \n\n```\nsum by (type)(src_graphql_field_seconds_count)\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#prometheusGraphQLRequestName",
              "documentation": {
                "identifier": "prometheusGraphQLRequestName",
                "newPage": false,
                "searchKey": "graphqlbackend.prometheusGraphQLRequestName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func prometheusGraphQLRequestName(requestName string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc prometheusGraphQLRequestName(requestName string) string\n```\n\nprometheusGraphQLRequestName is a allowlist of GraphQL request names (e.g. /.api/graphql?Foobar) to include in a Prometheus metric. Be extremely careful \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#NewSchema",
              "documentation": {
                "identifier": "NewSchema",
                "newPage": false,
                "searchKey": "graphqlbackend.NewSchema",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewSchema(db dbutil.DB, batchChanges BatchChangesResolver, codeIntel CodeIntelResolver, insights InsightsResolver, authz AuthzResolver, codeMonitors CodeMonitorsResolver, license LicenseResolver, dotcom DotcomRootResolver) (*graphql.Schema, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewSchema(db dbutil.DB, batchChanges BatchChangesResolver, codeIntel CodeIntelResolver, insights InsightsResolver, authz AuthzResolver, codeMonitors CodeMonitorsResolver, license LicenseResolver, dotcom DotcomRootResolver) (*graphql.Schema, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#UnmarshalNamespaceID",
              "documentation": {
                "identifier": "UnmarshalNamespaceID",
                "newPage": false,
                "searchKey": "graphqlbackend.UnmarshalNamespaceID",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func UnmarshalNamespaceID(id graphql.ID, userID *int32, orgID *int32) (err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc UnmarshalNamespaceID(id graphql.ID, userID *int32, orgID *int32) (err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MarshalOutOfBandMigrationID",
              "documentation": {
                "identifier": "MarshalOutOfBandMigrationID",
                "newPage": false,
                "searchKey": "graphqlbackend.MarshalOutOfBandMigrationID",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MarshalOutOfBandMigrationID(id int32) graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MarshalOutOfBandMigrationID(id int32) graphql.ID\n```\n\nMarshalOutOfBandMigrationID converts an internal out of band migration id into a GraphQL id. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#UnmarshalOutOfBandMigrationID",
              "documentation": {
                "identifier": "UnmarshalOutOfBandMigrationID",
                "newPage": false,
                "searchKey": "graphqlbackend.UnmarshalOutOfBandMigrationID",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func UnmarshalOutOfBandMigrationID(id graphql.ID) (migrationID int32, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc UnmarshalOutOfBandMigrationID(id graphql.ID) (migrationID int32, err error)\n```\n\nUnmarshalOutOfBandMigrationID converts a GraphQL id into an internal out of band migration id. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MarshalOrgID",
              "documentation": {
                "identifier": "MarshalOrgID",
                "newPage": false,
                "searchKey": "graphqlbackend.MarshalOrgID",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MarshalOrgID(id int32) graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MarshalOrgID(id int32) graphql.ID\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#UnmarshalOrgID",
              "documentation": {
                "identifier": "UnmarshalOrgID",
                "newPage": false,
                "searchKey": "graphqlbackend.UnmarshalOrgID",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func UnmarshalOrgID(id graphql.ID) (orgID int32, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc UnmarshalOrgID(id graphql.ID) (orgID int32, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#marshalOrgInvitationID",
              "documentation": {
                "identifier": "marshalOrgInvitationID",
                "newPage": false,
                "searchKey": "graphqlbackend.marshalOrgInvitationID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalOrgInvitationID(id int64) graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalOrgInvitationID(id int64) graphql.ID\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#unmarshalOrgInvitationID",
              "documentation": {
                "identifier": "unmarshalOrgInvitationID",
                "newPage": false,
                "searchKey": "graphqlbackend.unmarshalOrgInvitationID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func unmarshalOrgInvitationID(id graphql.ID) (orgInvitationID int64, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unmarshalOrgInvitationID(id graphql.ID) (orgInvitationID int64, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#strptr",
              "documentation": {
                "identifier": "strptr",
                "newPage": false,
                "searchKey": "graphqlbackend.strptr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func strptr(s string) *string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc strptr(s string) *string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#getUserToInviteToOrganization",
              "documentation": {
                "identifier": "getUserToInviteToOrganization",
                "newPage": false,
                "searchKey": "graphqlbackend.getUserToInviteToOrganization",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getUserToInviteToOrganization(ctx context.Context, db dbutil.DB, username string, orgID int32) (userToInvite *types.User, userEmailAddress string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getUserToInviteToOrganization(ctx context.Context, db dbutil.DB, username string, orgID int32) (userToInvite *types.User, userEmailAddress string, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#orgInvitationURL",
              "documentation": {
                "identifier": "orgInvitationURL",
                "newPage": false,
                "searchKey": "graphqlbackend.orgInvitationURL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func orgInvitationURL(org *types.Org) *url.URL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc orgInvitationURL(org *types.Org) *url.URL\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#sendOrgInvitationNotification",
              "documentation": {
                "identifier": "sendOrgInvitationNotification",
                "newPage": false,
                "searchKey": "graphqlbackend.sendOrgInvitationNotification",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func sendOrgInvitationNotification(ctx context.Context, db dbutil.DB, org *types.Org, sender *types.User, recipientEmail string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sendOrgInvitationNotification(ctx context.Context, db dbutil.DB, org *types.Org, sender *types.User, recipientEmail string) error\n```\n\nsendOrgInvitationNotification sends an email to the recipient of an org invitation with a link to respond to the invitation. Callers should check conf.CanSendEmail() if they want to return a nice error if sending email is not enabled. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#toJSON",
              "documentation": {
                "identifier": "toJSON",
                "newPage": false,
                "searchKey": "graphqlbackend.toJSON",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func toJSON(node query.Node) interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc toJSON(node query.Node) interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#fileDiffConnectionCompute",
              "documentation": {
                "identifier": "fileDiffConnectionCompute",
                "newPage": false,
                "searchKey": "graphqlbackend.fileDiffConnectionCompute",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func fileDiffConnectionCompute(patch string) func(ctx context.Context, args *FileDiffsConnectionArgs) ([]*diff.FileDiff, int32, bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fileDiffConnectionCompute(patch string) func(ctx context.Context, args *FileDiffsConnectionArgs) ([]*diff.FileDiff, int32, bool, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#applyPatch",
              "documentation": {
                "identifier": "applyPatch",
                "newPage": false,
                "searchKey": "graphqlbackend.applyPatch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func applyPatch(fileContent string, fileDiff *diff.FileDiff) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc applyPatch(fileContent string, fileDiff *diff.FileDiff) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#getFragmentDependencies",
              "documentation": {
                "identifier": "getFragmentDependencies",
                "newPage": false,
                "searchKey": "graphqlbackend.getFragmentDependencies",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getFragmentDependencies(node ast.Node) map[string]struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getFragmentDependencies(node ast.Node) map[string]struct{}\n```\n\ngetFragmentDependencies returns all the fragments this node depend on. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#extractInt",
              "documentation": {
                "identifier": "extractInt",
                "newPage": false,
                "searchKey": "graphqlbackend.extractInt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func extractInt(i interface{}) (int, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc extractInt(i interface{}) (int, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#shouldCheckParam",
              "documentation": {
                "identifier": "shouldCheckParam",
                "newPage": false,
                "searchKey": "graphqlbackend.shouldCheckParam",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func shouldCheckParam(p visitor.VisitFuncParams) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc shouldCheckParam(p visitor.VisitFuncParams) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repoNamesToStrings",
              "documentation": {
                "identifier": "repoNamesToStrings",
                "newPage": false,
                "searchKey": "graphqlbackend.repoNamesToStrings",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func repoNamesToStrings(repoNames []api.RepoName) []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc repoNamesToStrings(repoNames []api.RepoName) []string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#toDBRepoListColumn",
              "documentation": {
                "identifier": "toDBRepoListColumn",
                "newPage": false,
                "searchKey": "graphqlbackend.toDBRepoListColumn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func toDBRepoListColumn(ob string) database.RepoListColumn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc toDBRepoListColumn(ob string) database.RepoListColumn\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MarshalRepositoryID",
              "documentation": {
                "identifier": "MarshalRepositoryID",
                "newPage": false,
                "searchKey": "graphqlbackend.MarshalRepositoryID",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MarshalRepositoryID(repo api.RepoID) graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MarshalRepositoryID(repo api.RepoID) graphql.ID\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#UnmarshalRepositoryID",
              "documentation": {
                "identifier": "UnmarshalRepositoryID",
                "newPage": false,
                "searchKey": "graphqlbackend.UnmarshalRepositoryID",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func UnmarshalRepositoryID(id graphql.ID) (repo api.RepoID, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc UnmarshalRepositoryID(id graphql.ID) (repo api.RepoID, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#getDefaultBranchForRepo",
              "documentation": {
                "identifier": "getDefaultBranchForRepo",
                "newPage": false,
                "searchKey": "graphqlbackend.getDefaultBranchForRepo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getDefaultBranchForRepo(ctx context.Context, repoName api.RepoName) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getDefaultBranchForRepo(ctx context.Context, repoName api.RepoName) (string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#makePhabClientForOrigin",
              "documentation": {
                "identifier": "makePhabClientForOrigin",
                "newPage": false,
                "searchKey": "graphqlbackend.makePhabClientForOrigin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func makePhabClientForOrigin(ctx context.Context, db dbutil.DB, origin string) (*phabricator.Client, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makePhabClientForOrigin(ctx context.Context, db dbutil.DB, origin string) (*phabricator.Client, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#diffPathOrNull",
              "documentation": {
                "identifier": "diffPathOrNull",
                "newPage": false,
                "searchKey": "graphqlbackend.diffPathOrNull",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func diffPathOrNull(path string) *string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc diffPathOrNull(path string) *string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#marshalRepositoryCursor",
              "documentation": {
                "identifier": "marshalRepositoryCursor",
                "newPage": false,
                "searchKey": "graphqlbackend.marshalRepositoryCursor",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalRepositoryCursor(cursor *repositoryCursor) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalRepositoryCursor(cursor *repositoryCursor) string\n```\n\nmarshalRepositoryCursor marshals a repository pagination cursor. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#hydrateBranchCommits",
              "documentation": {
                "identifier": "hydrateBranchCommits",
                "newPage": false,
                "searchKey": "graphqlbackend.hydrateBranchCommits",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hydrateBranchCommits(ctx context.Context, repo api.RepoName, interactive bool, branches []*git.Branch) (ok bool, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hydrateBranchCommits(ctx context.Context, repo api.RepoName, interactive bool, branches []*git.Branch) (ok bool, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#marshalSavedSearchID",
              "documentation": {
                "identifier": "marshalSavedSearchID",
                "newPage": false,
                "searchKey": "graphqlbackend.marshalSavedSearchID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalSavedSearchID(savedSearchID int32) graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalSavedSearchID(savedSearchID int32) graphql.ID\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#unmarshalSavedSearchID",
              "documentation": {
                "identifier": "unmarshalSavedSearchID",
                "newPage": false,
                "searchKey": "graphqlbackend.unmarshalSavedSearchID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func unmarshalSavedSearchID(id graphql.ID) (savedSearchID int32, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unmarshalSavedSearchID(id graphql.ID) (savedSearchID int32, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#queryHasPatternType",
              "documentation": {
                "identifier": "queryHasPatternType",
                "newPage": false,
                "searchKey": "graphqlbackend.queryHasPatternType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func queryHasPatternType(query string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc queryHasPatternType(query string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#processPaginationRequest",
              "documentation": {
                "identifier": "processPaginationRequest",
                "newPage": false,
                "searchKey": "graphqlbackend.processPaginationRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func processPaginationRequest(args *SearchArgs, q query.Q) (*run.SearchPaginationInfo, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc processPaginationRequest(args *SearchArgs, q query.Q) (*run.SearchPaginationInfo, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#detectSearchType",
              "documentation": {
                "identifier": "detectSearchType",
                "newPage": false,
                "searchKey": "graphqlbackend.detectSearchType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func detectSearchType(version string, patternType *string) (query.SearchType, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc detectSearchType(version string, patternType *string) (query.SearchType, error)\n```\n\ndetectSearchType returns the search type to perfrom (\"regexp\", or \"literal\"). The search type derives from three sources: the version and patternType parameters passed to the search endpoint (literal search is the default in V2), and the `patternType:` filter in the input query string which overrides the searchType, if present. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#overrideSearchType",
              "documentation": {
                "identifier": "overrideSearchType",
                "newPage": false,
                "searchKey": "graphqlbackend.overrideSearchType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func overrideSearchType(input string, searchType query.SearchType) query.SearchType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc overrideSearchType(input string, searchType query.SearchType) query.SearchType\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#getBoolPtr",
              "documentation": {
                "identifier": "getBoolPtr",
                "newPage": false,
                "searchKey": "graphqlbackend.getBoolPtr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getBoolPtr(b *bool, def bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getBoolPtr(b *bool, def bool) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#decodedViewerFinalSettings",
              "documentation": {
                "identifier": "decodedViewerFinalSettings",
                "newPage": false,
                "searchKey": "graphqlbackend.decodedViewerFinalSettings",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decodedViewerFinalSettings(ctx context.Context, db dbutil.DB) (_ *schema.Settings, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decodedViewerFinalSettings(ctx context.Context, db dbutil.DB) (_ *schema.Settings, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#getRepos",
              "documentation": {
                "identifier": "getRepos",
                "newPage": false,
                "searchKey": "graphqlbackend.getRepos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getRepos(ctx context.Context, p *search.Promise) ([]*search.RepositoryRevisions, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getRepos(ctx context.Context, p *search.Promise) ([]*search.RepositoryRevisions, error)\n```\n\ngetRepos is a wrapper around p.Get. It returns an error if the promise contains an underlying type other than []*search.RepositoryRevisions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#pathParentsByFrequency",
              "documentation": {
                "identifier": "pathParentsByFrequency",
                "newPage": false,
                "searchKey": "graphqlbackend.pathParentsByFrequency",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func pathParentsByFrequency(paths []string) []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc pathParentsByFrequency(paths []string) []string\n```\n\npathParentsByFrequency returns the most common path parents of the given paths. For example, given paths [a/b a/c x/y], it would return [a x] because \"a\" is a parent to 2 paths and \"x\" is a parent to 1 path. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#capFirst",
              "documentation": {
                "identifier": "capFirst",
                "newPage": false,
                "searchKey": "graphqlbackend.capFirst",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func capFirst(s string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc capFirst(s string) string\n```\n\ncapFirst capitalizes the first rune in the given string. It can be safely used with UTF-8 strings. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#marshalSearchContextID",
              "documentation": {
                "identifier": "marshalSearchContextID",
                "newPage": false,
                "searchKey": "graphqlbackend.marshalSearchContextID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalSearchContextID(searchContextSpec string) graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalSearchContextID(searchContextSpec string) graphql.ID\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#unmarshalSearchContextID",
              "documentation": {
                "identifier": "unmarshalSearchContextID",
                "newPage": false,
                "searchKey": "graphqlbackend.unmarshalSearchContextID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func unmarshalSearchContextID(id graphql.ID) (spec string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unmarshalSearchContextID(id graphql.ID) (spec string, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#marshalSearchContextCursor",
              "documentation": {
                "identifier": "marshalSearchContextCursor",
                "newPage": false,
                "searchKey": "graphqlbackend.marshalSearchContextCursor",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalSearchContextCursor(cursor int32) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalSearchContextCursor(cursor int32) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#unmarshalSearchContextCursor",
              "documentation": {
                "identifier": "unmarshalSearchContextCursor",
                "newPage": false,
                "searchKey": "graphqlbackend.unmarshalSearchContextCursor",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func unmarshalSearchContextCursor(cursor *string) (int32, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unmarshalSearchContextCursor(cursor *string) (int32, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchContextsToResolvers",
              "documentation": {
                "identifier": "searchContextsToResolvers",
                "newPage": false,
                "searchKey": "graphqlbackend.searchContextsToResolvers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func searchContextsToResolvers(searchContexts []*types.SearchContext, db dbutil.DB) []*searchContextResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc searchContextsToResolvers(searchContexts []*types.SearchContext, db dbutil.DB) []*searchContextResolver\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#resolveVersionContext",
              "documentation": {
                "identifier": "resolveVersionContext",
                "newPage": false,
                "searchKey": "graphqlbackend.resolveVersionContext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func resolveVersionContext(versionContext string) (*schema.VersionContext, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc resolveVersionContext(versionContext string) (*schema.VersionContext, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#marshalSearchCursor",
              "documentation": {
                "identifier": "marshalSearchCursor",
                "newPage": false,
                "searchKey": "graphqlbackend.marshalSearchCursor",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalSearchCursor(c *run.SearchCursor) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalSearchCursor(c *run.SearchCursor) string\n```\n\nmarshalSearchCursor marshals a search pagination cursor. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#unmarshalSearchCursor",
              "documentation": {
                "identifier": "unmarshalSearchCursor",
                "newPage": false,
                "searchKey": "graphqlbackend.unmarshalSearchCursor",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func unmarshalSearchCursor(cursor *string) (*run.SearchCursor, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unmarshalSearchCursor(cursor *string) (*run.SearchCursor, error)\n```\n\nunmarshalSearchCursor unmarshals a search pagination cursor. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repoIsLess",
              "documentation": {
                "identifier": "repoIsLess",
                "newPage": false,
                "searchKey": "graphqlbackend.repoIsLess",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func repoIsLess(i, j types.RepoName) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc repoIsLess(i, j types.RepoName) bool\n```\n\nrepoIsLess sorts repositories first by name then by ID, suitable for use with sort.Slice. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#paginatedSearchFilesInRepos",
              "documentation": {
                "identifier": "paginatedSearchFilesInRepos",
                "newPage": false,
                "searchKey": "graphqlbackend.paginatedSearchFilesInRepos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func paginatedSearchFilesInRepos(ctx context.Context, db dbutil.DB, args *search.TextParameters, pagination *run.SearchPaginationInfo) (*run.SearchCursor, []result.Match, *streaming.Stats, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc paginatedSearchFilesInRepos(ctx context.Context, db dbutil.DB, args *search.TextParameters, pagination *run.SearchPaginationInfo) (*run.SearchCursor, []result.Match, *streaming.Stats, error)\n```\n\npaginatedSearchFilesInRepos implements result-level pagination by calling searchFilesInRepos to search over subsets (batches) of the total list of repositories that may have results for this request (args.Repos). It does this by picking some tradeoffs to balance some conflicting facts: \n\n1. Paginated text searches must currently ask Zoekt AND non-indexed search \n\n```\nto produce the entire result set for a repository. This is like querying\nfor `repo:^exact-repo$ count:1000000` in a non-paginated query, and is\nmore costly and slower than the default `count:30` used in non-paginated\nrequests (search for FileMatchLimit) which allows Zoekt/non-indexed\nsearch to stop searching after finding enough results. Another reason for\nneeding to produce the entire result set for a repository is because\nZoekt does not today produce a stable order of results.\n\n```\n2. With NITH (needle-in-the-haystack) queries, if we don't search enough \n\n```\nrepositories in parallel we would substantially harm the performance of\nthese queries. For example, if we were to search 100 repositories at a\ntime and there were 1000 repositories to search and only the last 100\nrepositories had results for you, you need to wait for the first 9\nbatched searches to complete making your results 10x slower to fetch on\ntop of the penalty we incur from the larger `count:` mentioned in point\n2 above (in the worst case scenario).\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#fileMatchesToMatches",
              "documentation": {
                "identifier": "fileMatchesToMatches",
                "newPage": false,
                "searchKey": "graphqlbackend.fileMatchesToMatches",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func fileMatchesToMatches(fms []*result.FileMatch) []result.Match"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fileMatchesToMatches(fms []*result.FileMatch) []result.Match\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repoOfMatch",
              "documentation": {
                "identifier": "repoOfMatch",
                "newPage": false,
                "searchKey": "graphqlbackend.repoOfMatch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func repoOfMatch(match result.Match) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc repoOfMatch(match result.Match) string\n```\n\nrepoOfMatch is a helper function to resolve the repo associated with a result type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#sliceSearchResultsCommon",
              "documentation": {
                "identifier": "sliceSearchResultsCommon",
                "newPage": false,
                "searchKey": "graphqlbackend.sliceSearchResultsCommon",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func sliceSearchResultsCommon(common *streaming.Stats, firstResultRepo, lastResultRepo string) *streaming.Stats"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sliceSearchResultsCommon(common *streaming.Stats, firstResultRepo, lastResultRepo string) *streaming.Stats\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#clamp",
              "documentation": {
                "identifier": "clamp",
                "newPage": false,
                "searchKey": "graphqlbackend.clamp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func clamp(x, min, max int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc clamp(x, min, max int) int\n```\n\nclamp clamps x into the range of [min, max]. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#matchesToResolvers",
              "documentation": {
                "identifier": "matchesToResolvers",
                "newPage": false,
                "searchKey": "graphqlbackend.matchesToResolvers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func matchesToResolvers(db dbutil.DB, matches []result.Match) []SearchResultResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc matchesToResolvers(db dbutil.DB, matches []result.Match) []SearchResultResolver\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#LogSearchLatency",
              "documentation": {
                "identifier": "LogSearchLatency",
                "newPage": false,
                "searchKey": "graphqlbackend.LogSearchLatency",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func LogSearchLatency(ctx context.Context, db dbutil.DB, si *run.SearchInputs, durationMs int32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc LogSearchLatency(ctx context.Context, db dbutil.DB, si *run.SearchInputs, durationMs int32)\n```\n\nLogSearchLatency records search durations in the event database. This function may only be called after a search result is performed, because it relies on the invariant that query and pattern error checking has already been performed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#invalidateRepoCache",
              "documentation": {
                "identifier": "invalidateRepoCache",
                "newPage": false,
                "searchKey": "graphqlbackend.invalidateRepoCache",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func invalidateRepoCache(plan query.Plan) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc invalidateRepoCache(plan query.Plan) bool\n```\n\ninvalidateRepoCache returns whether resolved repos should be invalidated when evaluating subexpressions. If a query contains more than one repo, revision, or repogroup field, we should invalidate resolved repos, since multiple repos, revisions, or repogroups imply that different repos may need to be resolved. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#logPrometheusBatch",
              "documentation": {
                "identifier": "logPrometheusBatch",
                "newPage": false,
                "searchKey": "graphqlbackend.logPrometheusBatch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func logPrometheusBatch(status, alertType, requestSource, requestName string, elapsed time.Duration)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc logPrometheusBatch(status, alertType, requestSource, requestName string, elapsed time.Duration)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#newHoneyEvent",
              "documentation": {
                "identifier": "newHoneyEvent",
                "newPage": false,
                "searchKey": "graphqlbackend.newHoneyEvent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func newHoneyEvent(ctx context.Context, status, alertType, requestSource, requestName, query string, elapsed time.Duration, srr *SearchResultsResolver) *libhoney.Event"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newHoneyEvent(ctx context.Context, status, alertType, requestSource, requestName, query string, elapsed time.Duration, srr *SearchResultsResolver) *libhoney.Event\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#logHoneyBatch",
              "documentation": {
                "identifier": "logHoneyBatch",
                "newPage": false,
                "searchKey": "graphqlbackend.logHoneyBatch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func logHoneyBatch(ctx context.Context, status, alertType, requestSource, requestName string, elapsed time.Duration, query string, start time.Time, srr *SearchResultsResolver)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc logHoneyBatch(ctx context.Context, status, alertType, requestSource, requestName string, elapsed time.Duration, query string, start time.Time, srr *SearchResultsResolver)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#DetermineStatusForLogs",
              "documentation": {
                "identifier": "DetermineStatusForLogs",
                "newPage": false,
                "searchKey": "graphqlbackend.DetermineStatusForLogs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func DetermineStatusForLogs(srr *SearchResultsResolver, err error) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc DetermineStatusForLogs(srr *SearchResultsResolver, err error) string\n```\n\nDetermineStatusForLogs determines the final status of a search for logging purposes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchResultsToRepoNodes",
              "documentation": {
                "identifier": "searchResultsToRepoNodes",
                "newPage": false,
                "searchKey": "graphqlbackend.searchResultsToRepoNodes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func searchResultsToRepoNodes(matches []result.Match) ([]query.Node, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc searchResultsToRepoNodes(matches []result.Match) ([]query.Node, error)\n```\n\nsearchResultsToRepoNodes converts a set of search results into repository nodes such that they can be used to replace a repository predicate \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#substitutePredicates",
              "documentation": {
                "identifier": "substitutePredicates",
                "newPage": false,
                "searchKey": "graphqlbackend.substitutePredicates",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func substitutePredicates(q query.Basic, evaluate func(query.Predicate) (*SearchResults, error)) (query.Plan, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc substitutePredicates(q query.Basic, evaluate func(query.Predicate) (*SearchResults, error)) (query.Plan, error)\n```\n\nsubstitutePredicates replaces all the predicates in a query with their expanded form. The predicates are expanded using the doExpand function. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#longer",
              "documentation": {
                "identifier": "longer",
                "newPage": false,
                "searchKey": "graphqlbackend.longer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func longer(n int, dt time.Duration) time.Duration"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc longer(n int, dt time.Duration) time.Duration\n```\n\nlonger returns a suggested longer time to wait if the given duration wasn't long enough. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#isContextError",
              "documentation": {
                "identifier": "isContextError",
                "newPage": false,
                "searchKey": "graphqlbackend.isContextError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isContextError(ctx context.Context, err error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isContextError(ctx context.Context, err error) bool\n```\n\nisContextError returns true if ctx.Err() is not nil or if err is an error caused by context cancelation or timeout. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#compareFileLengths",
              "documentation": {
                "identifier": "compareFileLengths",
                "newPage": false,
                "searchKey": "graphqlbackend.compareFileLengths",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func compareFileLengths(left, right string, exactFilePatterns map[string]struct{}) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc compareFileLengths(left, right string, exactFilePatterns map[string]struct{}) bool\n```\n\ncompareFileLengths sorts file paths such that they appear earlier if they match file: patterns in the query exactly. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#compareDates",
              "documentation": {
                "identifier": "compareDates",
                "newPage": false,
                "searchKey": "graphqlbackend.compareDates",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func compareDates(left, right *time.Time) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc compareDates(left, right *time.Time) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#compareSearchResults",
              "documentation": {
                "identifier": "compareSearchResults",
                "newPage": false,
                "searchKey": "graphqlbackend.compareSearchResults",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func compareSearchResults(left, right result.Match, exactFilePatterns map[string]struct{}) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc compareSearchResults(left, right result.Match, exactFilePatterns map[string]struct{}) bool\n```\n\ncompareSearchResults sorts repository matches, file matches, and commits. Repositories and filenames are sorted alphabetically. As a refinement, if any filename matches a value in a non-empty set exactFilePatterns, then such filenames are listed earlier. \n\nCommits are sorted by date. Commits are not associated with searchrepos, and will always list after repository or file match results, if any. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#selectResults",
              "documentation": {
                "identifier": "selectResults",
                "newPage": false,
                "searchKey": "graphqlbackend.selectResults",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func selectResults(results []result.Match, q query.Basic) []result.Match"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc selectResults(results []result.Match, q query.Basic) []result.Match\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchResultsStatsLanguages",
              "documentation": {
                "identifier": "searchResultsStatsLanguages",
                "newPage": false,
                "searchKey": "graphqlbackend.searchResultsStatsLanguages",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func searchResultsStatsLanguages(ctx context.Context, matches []result.Match) ([]inventory.Lang, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc searchResultsStatsLanguages(ctx context.Context, matches []result.Match) ([]inventory.Lang, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#sortSearchSuggestions",
              "documentation": {
                "identifier": "sortSearchSuggestions",
                "newPage": false,
                "searchKey": "graphqlbackend.sortSearchSuggestions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func sortSearchSuggestions(s []SearchSuggestionResolver)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sortSearchSuggestions(s []SearchSuggestionResolver)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#allEmptyStrings",
              "documentation": {
                "identifier": "allEmptyStrings",
                "newPage": false,
                "searchKey": "graphqlbackend.allEmptyStrings",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func allEmptyStrings(ss1, ss2 []string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc allEmptyStrings(ss1, ss2 []string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#getRepo",
              "documentation": {
                "identifier": "getRepo",
                "newPage": false,
                "searchKey": "graphqlbackend.getRepo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getRepo(ctx context.Context, repoStore *database.RepoStore, repoURI string) (repo *types.Repo, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getRepo(ctx context.Context, repoStore *database.RepoStore, repoURI string) (repo *types.Repo, err error)\n```\n\ngetRepo attempts to find a repo in the database by URI, returning the ID if it's found. If it's not found it will use RepoLookup on repo-updater to fetch the repo info from a code host, store it in the repos table, enqueue a clone for that repo, and return the repo ID \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#settingsCreateIfUpToDate",
              "documentation": {
                "identifier": "settingsCreateIfUpToDate",
                "newPage": false,
                "searchKey": "graphqlbackend.settingsCreateIfUpToDate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func settingsCreateIfUpToDate(ctx context.Context, db dbutil.DB, subject *settingsSubject, lastID *int32, authorUserID int32, contents string) (latestSetting *api.Settings, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc settingsCreateIfUpToDate(ctx context.Context, db dbutil.DB, subject *settingsSubject, lastID *int32, authorUserID int32, contents string) (latestSetting *api.Settings, err error)\n```\n\nlike database.Settings.CreateIfUpToDate, except it handles notifying the query-runner if any saved queries have changed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#mergeSettings",
              "documentation": {
                "identifier": "mergeSettings",
                "newPage": false,
                "searchKey": "graphqlbackend.mergeSettings",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func mergeSettings(jsonSettingsStrings []string) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mergeSettings(jsonSettingsStrings []string) ([]byte, error)\n```\n\nmergeSettings merges the specified JSON settings documents together to produce a single JSON settings document. The deep merging behavior is described in the documentation for deeplyMergedSettingsFields. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#mergeSettingsValues",
              "documentation": {
                "identifier": "mergeSettingsValues",
                "newPage": false,
                "searchKey": "graphqlbackend.mergeSettingsValues",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func mergeSettingsValues(dst map[string]interface{}, field string, value interface{}, depth int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mergeSettingsValues(dst map[string]interface{}, field string, value interface{}, depth int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#toKeyPath",
              "documentation": {
                "identifier": "toKeyPath",
                "newPage": false,
                "searchKey": "graphqlbackend.toKeyPath",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func toKeyPath(gqlKeyPath []*keyPathSegment) (jsonx.Path, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc toKeyPath(gqlKeyPath []*keyPathSegment) (jsonx.Path, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#marshalSiteGQLID",
              "documentation": {
                "identifier": "marshalSiteGQLID",
                "newPage": false,
                "searchKey": "graphqlbackend.marshalSiteGQLID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalSiteGQLID(siteID string) graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalSiteGQLID(siteID string) graphql.ID\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#SiteGQLID",
              "documentation": {
                "identifier": "SiteGQLID",
                "newPage": false,
                "searchKey": "graphqlbackend.SiteGQLID",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func SiteGQLID() graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SiteGQLID() graphql.ID\n```\n\nSiteGQLID is the GraphQL ID of the Sourcegraph site. It is a constant across all Sourcegraph instances. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#unmarshalSiteGQLID",
              "documentation": {
                "identifier": "unmarshalSiteGQLID",
                "newPage": false,
                "searchKey": "graphqlbackend.unmarshalSiteGQLID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func unmarshalSiteGQLID(id graphql.ID) (siteID string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unmarshalSiteGQLID(id graphql.ID) (siteID string, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#canUpdateSiteConfiguration",
              "documentation": {
                "identifier": "canUpdateSiteConfiguration",
                "newPage": false,
                "searchKey": "graphqlbackend.canUpdateSiteConfiguration",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func canUpdateSiteConfiguration() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc canUpdateSiteConfiguration() bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "graphqlbackend.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#updateAvailableAlert",
              "documentation": {
                "identifier": "updateAvailableAlert",
                "newPage": false,
                "searchKey": "graphqlbackend.updateAvailableAlert",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func updateAvailableAlert(args AlertFuncArgs) []*Alert"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc updateAvailableAlert(args AlertFuncArgs) []*Alert\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#isMinorUpdateAvailable",
              "documentation": {
                "identifier": "isMinorUpdateAvailable",
                "newPage": false,
                "searchKey": "graphqlbackend.isMinorUpdateAvailable",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isMinorUpdateAvailable(currentVersion, updateVersion string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isMinorUpdateAvailable(currentVersion, updateVersion string) bool\n```\n\nisMinorUpdateAvailable tells if upgrading from the current version to the specified upgrade candidate would be a major/minor update and NOT a patch update. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#outOfDateAlert",
              "documentation": {
                "identifier": "outOfDateAlert",
                "newPage": false,
                "searchKey": "graphqlbackend.outOfDateAlert",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func outOfDateAlert(args AlertFuncArgs) []*Alert"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc outOfDateAlert(args AlertFuncArgs) []*Alert\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#deprecationAlert",
              "documentation": {
                "identifier": "deprecationAlert",
                "newPage": false,
                "searchKey": "graphqlbackend.deprecationAlert",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func deprecationAlert(args AlertFuncArgs) []*Alert"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc deprecationAlert(args AlertFuncArgs) []*Alert\n```\n\nThis should be removed from 3.27 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#observabilityActiveAlertsAlert",
              "documentation": {
                "identifier": "observabilityActiveAlertsAlert",
                "newPage": false,
                "searchKey": "graphqlbackend.observabilityActiveAlertsAlert",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func observabilityActiveAlertsAlert(prom srcprometheus.Client) func(AlertFuncArgs) []*Alert"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc observabilityActiveAlertsAlert(prom srcprometheus.Client) func(AlertFuncArgs) []*Alert\n```\n\nobservabilityActiveAlertsAlert directs admins to check Grafana if critical alerts are firing \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#pluralize",
              "documentation": {
                "identifier": "pluralize",
                "newPage": false,
                "searchKey": "graphqlbackend.pluralize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func pluralize(v int, singular, plural string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc pluralize(v int, singular, plural string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#needsRepositoryConfiguration",
              "documentation": {
                "identifier": "needsRepositoryConfiguration",
                "newPage": false,
                "searchKey": "graphqlbackend.needsRepositoryConfiguration",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func needsRepositoryConfiguration(ctx context.Context, db dbutil.DB) (bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc needsRepositoryConfiguration(ctx context.Context, db dbutil.DB) (bool, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#marshalSurveyResponseID",
              "documentation": {
                "identifier": "marshalSurveyResponseID",
                "newPage": false,
                "searchKey": "graphqlbackend.marshalSurveyResponseID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalSurveyResponseID(id int32) graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalSurveyResponseID(id int32) graphql.ID\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#symbolResultsToResolvers",
              "documentation": {
                "identifier": "symbolResultsToResolvers",
                "newPage": false,
                "searchKey": "graphqlbackend.symbolResultsToResolvers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func symbolResultsToResolvers(db dbutil.DB, commit *GitCommitResolver, symbols []*result.SymbolMatch) []symbolResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc symbolResultsToResolvers(db dbutil.DB, commit *GitCommitResolver, symbols []*result.SymbolMatch) []symbolResolver\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#limitOrDefault",
              "documentation": {
                "identifier": "limitOrDefault",
                "newPage": false,
                "searchKey": "graphqlbackend.limitOrDefault",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func limitOrDefault(first *int32) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc limitOrDefault(first *int32) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#mustParseGraphQLSchema",
              "documentation": {
                "identifier": "mustParseGraphQLSchema",
                "newPage": false,
                "searchKey": "graphqlbackend.mustParseGraphQLSchema",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func mustParseGraphQLSchema(t *testing.T) *graphql.Schema"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mustParseGraphQLSchema(t *testing.T) *graphql.Schema\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RunTests",
              "documentation": {
                "identifier": "RunTests",
                "newPage": false,
                "searchKey": "graphqlbackend.RunTests",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RunTests(t *testing.T, tests []*Test)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RunTests(t *testing.T, tests []*Test)\n```\n\nRunTests runs the given GraphQL test cases as subtests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#RunTest",
              "documentation": {
                "identifier": "RunTest",
                "newPage": false,
                "searchKey": "graphqlbackend.RunTest",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RunTest(t *testing.T, test *Test)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RunTest(t *testing.T, test *Test)\n```\n\nRunTest runs a single GraphQL test case. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#formatJSON",
              "documentation": {
                "identifier": "formatJSON",
                "newPage": false,
                "searchKey": "graphqlbackend.formatJSON",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func formatJSON(data []byte) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc formatJSON(data []byte) ([]byte, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#checkErrors",
              "documentation": {
                "identifier": "checkErrors",
                "newPage": false,
                "searchKey": "graphqlbackend.checkErrors",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkErrors(t *testing.T, want, got []*errors.QueryError)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkErrors(t *testing.T, want, got []*errors.QueryError)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#sortErrors",
              "documentation": {
                "identifier": "sortErrors",
                "newPage": false,
                "searchKey": "graphqlbackend.sortErrors",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func sortErrors(errors []*errors.QueryError)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sortErrors(errors []*errors.QueryError)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#MarshalUserID",
              "documentation": {
                "identifier": "MarshalUserID",
                "newPage": false,
                "searchKey": "graphqlbackend.MarshalUserID",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MarshalUserID(id int32) graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MarshalUserID(id int32) graphql.ID\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#UnmarshalUserID",
              "documentation": {
                "identifier": "UnmarshalUserID",
                "newPage": false,
                "searchKey": "graphqlbackend.UnmarshalUserID",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func UnmarshalUserID(id graphql.ID) (userID int32, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc UnmarshalUserID(id graphql.ID) (userID int32, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#viewerCanChangeUsername",
              "documentation": {
                "identifier": "viewerCanChangeUsername",
                "newPage": false,
                "searchKey": "graphqlbackend.viewerCanChangeUsername",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func viewerCanChangeUsername(ctx context.Context, db dbutil.DB, userID int32) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc viewerCanChangeUsername(ctx context.Context, db dbutil.DB, userID int32) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#viewerIsChangingUsername",
              "documentation": {
                "identifier": "viewerIsChangingUsername",
                "newPage": false,
                "searchKey": "graphqlbackend.viewerIsChangingUsername",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func viewerIsChangingUsername(ctx context.Context, db dbutil.DB, subjectUserID int32, proposedUsername string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc viewerIsChangingUsername(ctx context.Context, db dbutil.DB, subjectUserID int32, proposedUsername string) bool\n```\n\nUsers may be trying to change their own username, or someone else's. \n\nThe subjectUserID value represents the decoded user ID from the incoming update request, and the proposedUsername is the value that would be applied to that subject's record if all security checks pass. \n\nIf that subject's username is different from the proposed one, then a change is being attempted and may be rejected by viewerCanChangeUsername. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#exportPrometheusSearchLatencies",
              "documentation": {
                "identifier": "exportPrometheusSearchLatencies",
                "newPage": false,
                "searchKey": "graphqlbackend.exportPrometheusSearchLatencies",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func exportPrometheusSearchLatencies(event string, payload json.RawMessage) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc exportPrometheusSearchLatencies(event string, payload json.RawMessage) error\n```\n\nexportPrometheusSearchLatencies exports Prometheus search latency metrics given a GraphQL LogEvent payload. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestMutation_CreateAccessToken",
              "documentation": {
                "identifier": "TestMutation_CreateAccessToken",
                "newPage": false,
                "searchKey": "graphqlbackend.TestMutation_CreateAccessToken",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMutation_CreateAccessToken(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMutation_CreateAccessToken(t *testing.T)\n```\n\n🚨 SECURITY: This tests that users can't create tokens for users they aren't allowed to do so for. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestMutation_DeleteAccessToken",
              "documentation": {
                "identifier": "TestMutation_DeleteAccessToken",
                "newPage": false,
                "searchKey": "graphqlbackend.TestMutation_DeleteAccessToken",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMutation_DeleteAccessToken(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMutation_DeleteAccessToken(t *testing.T)\n```\n\n🚨 SECURITY: This tests that users can't delete tokens they shouldn't be allowed to delete. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestStripPassword",
              "documentation": {
                "identifier": "TestStripPassword",
                "newPage": false,
                "searchKey": "graphqlbackend.TestStripPassword",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStripPassword(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStripPassword(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestDateTime",
              "documentation": {
                "identifier": "TestDateTime",
                "newPage": false,
                "searchKey": "graphqlbackend.TestDateTime",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDateTime(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDateTime(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "graphqlbackend.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestExternalAccountResolver_AccountData",
              "documentation": {
                "identifier": "TestExternalAccountResolver_AccountData",
                "newPage": false,
                "searchKey": "graphqlbackend.TestExternalAccountResolver_AccountData",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalAccountResolver_AccountData(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalAccountResolver_AccountData(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestAddExternalService",
              "documentation": {
                "identifier": "TestAddExternalService",
                "newPage": false,
                "searchKey": "graphqlbackend.TestAddExternalService",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddExternalService(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddExternalService(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestUpdateExternalService",
              "documentation": {
                "identifier": "TestUpdateExternalService",
                "newPage": false,
                "searchKey": "graphqlbackend.TestUpdateExternalService",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUpdateExternalService(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUpdateExternalService(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestDeleteExternalService",
              "documentation": {
                "identifier": "TestDeleteExternalService",
                "newPage": false,
                "searchKey": "graphqlbackend.TestDeleteExternalService",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteExternalService(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteExternalService(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestExternalServices",
              "documentation": {
                "identifier": "TestExternalServices",
                "newPage": false,
                "searchKey": "graphqlbackend.TestExternalServices",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalServices(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalServices(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestExternalServices_PageInfo",
              "documentation": {
                "identifier": "TestExternalServices_PageInfo",
                "newPage": false,
                "searchKey": "graphqlbackend.TestExternalServices_PageInfo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExternalServices_PageInfo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExternalServices_PageInfo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSyncExternalService_ContextTimeout",
              "documentation": {
                "identifier": "TestSyncExternalService_ContextTimeout",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSyncExternalService_ContextTimeout",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSyncExternalService_ContextTimeout(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSyncExternalService_ContextTimeout(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestIsBinary",
              "documentation": {
                "identifier": "TestIsBinary",
                "newPage": false,
                "searchKey": "graphqlbackend.TestIsBinary",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIsBinary(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIsBinary(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestGitCommitResolver",
              "documentation": {
                "identifier": "TestGitCommitResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.TestGitCommitResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGitCommitResolver(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGitCommitResolver(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestGitCommitFileNames",
              "documentation": {
                "identifier": "TestGitCommitFileNames",
                "newPage": false,
                "searchKey": "graphqlbackend.TestGitCommitFileNames",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGitCommitFileNames(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGitCommitFileNames(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestEscapePathForURL",
              "documentation": {
                "identifier": "TestEscapePathForURL",
                "newPage": false,
                "searchKey": "graphqlbackend.TestEscapePathForURL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEscapePathForURL(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEscapePathForURL(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestGitTreeEntry_RawZipArchiveURL",
              "documentation": {
                "identifier": "TestGitTreeEntry_RawZipArchiveURL",
                "newPage": false,
                "searchKey": "graphqlbackend.TestGitTreeEntry_RawZipArchiveURL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGitTreeEntry_RawZipArchiveURL(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGitTreeEntry_RawZipArchiveURL(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestGitTreeEntry_Content",
              "documentation": {
                "identifier": "TestGitTreeEntry_Content",
                "newPage": false,
                "searchKey": "graphqlbackend.TestGitTreeEntry_Content",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGitTreeEntry_Content(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGitTreeEntry_Content(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestGitTree",
              "documentation": {
                "identifier": "TestGitTree",
                "newPage": false,
                "searchKey": "graphqlbackend.TestGitTree",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGitTree(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGitTree(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#BenchmarkPrometheusFieldName",
              "documentation": {
                "identifier": "BenchmarkPrometheusFieldName",
                "newPage": false,
                "searchKey": "graphqlbackend.BenchmarkPrometheusFieldName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkPrometheusFieldName(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkPrometheusFieldName(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestRepository",
              "documentation": {
                "identifier": "TestRepository",
                "newPage": false,
                "searchKey": "graphqlbackend.TestRepository",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestResolverTo",
              "documentation": {
                "identifier": "TestResolverTo",
                "newPage": false,
                "searchKey": "graphqlbackend.TestResolverTo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResolverTo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResolverTo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestMain",
              "documentation": {
                "identifier": "TestMain",
                "newPage": false,
                "searchKey": "graphqlbackend.TestMain",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMain(m *testing.M)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMain(m *testing.M)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestAffiliatedRepositories",
              "documentation": {
                "identifier": "TestAffiliatedRepositories",
                "newPage": false,
                "searchKey": "graphqlbackend.TestAffiliatedRepositories",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAffiliatedRepositories(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAffiliatedRepositories(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestNamespace",
              "documentation": {
                "identifier": "TestNamespace",
                "newPage": false,
                "searchKey": "graphqlbackend.TestNamespace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNamespace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNamespace(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestNamespaceByName",
              "documentation": {
                "identifier": "TestNamespaceByName",
                "newPage": false,
                "searchKey": "graphqlbackend.TestNamespaceByName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNamespaceByName(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNamespaceByName(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestOrganization",
              "documentation": {
                "identifier": "TestOrganization",
                "newPage": false,
                "searchKey": "graphqlbackend.TestOrganization",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOrganization(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOrganization(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestNode_Org",
              "documentation": {
                "identifier": "TestNode_Org",
                "newPage": false,
                "searchKey": "graphqlbackend.TestNode_Org",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNode_Org(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNode_Org(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestOrgs",
              "documentation": {
                "identifier": "TestOrgs",
                "newPage": false,
                "searchKey": "graphqlbackend.TestOrgs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOrgs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOrgs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestPreviewRepositoryComparisonResolver",
              "documentation": {
                "identifier": "TestPreviewRepositoryComparisonResolver",
                "newPage": false,
                "searchKey": "graphqlbackend.TestPreviewRepositoryComparisonResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPreviewRepositoryComparisonResolver(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPreviewRepositoryComparisonResolver(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestApplyPatch",
              "documentation": {
                "identifier": "TestApplyPatch",
                "newPage": false,
                "searchKey": "graphqlbackend.TestApplyPatch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestApplyPatch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestApplyPatch(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#mockBackendCommits",
              "documentation": {
                "identifier": "mockBackendCommits",
                "newPage": false,
                "searchKey": "graphqlbackend.mockBackendCommits",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func mockBackendCommits(t *testing.T, revs ...api.CommitID)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mockBackendCommits(t *testing.T, revs ...api.CommitID)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestEstimateQueryCost",
              "documentation": {
                "identifier": "TestEstimateQueryCost",
                "newPage": false,
                "searchKey": "graphqlbackend.TestEstimateQueryCost",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEstimateQueryCost(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEstimateQueryCost(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestRatelimitFromConfig",
              "documentation": {
                "identifier": "TestRatelimitFromConfig",
                "newPage": false,
                "searchKey": "graphqlbackend.TestRatelimitFromConfig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRatelimitFromConfig(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRatelimitFromConfig(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestBasicLimiterEnabled",
              "documentation": {
                "identifier": "TestBasicLimiterEnabled",
                "newPage": false,
                "searchKey": "graphqlbackend.TestBasicLimiterEnabled",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBasicLimiterEnabled(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBasicLimiterEnabled(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestBasicLimiter",
              "documentation": {
                "identifier": "TestBasicLimiter",
                "newPage": false,
                "searchKey": "graphqlbackend.TestBasicLimiter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBasicLimiter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBasicLimiter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestRepositories",
              "documentation": {
                "identifier": "TestRepositories",
                "newPage": false,
                "searchKey": "graphqlbackend.TestRepositories",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepositories(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepositories(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestRepositories_CursorPagination",
              "documentation": {
                "identifier": "TestRepositories_CursorPagination",
                "newPage": false,
                "searchKey": "graphqlbackend.TestRepositories_CursorPagination",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepositories_CursorPagination(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepositories_CursorPagination(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestRepositoryComparison",
              "documentation": {
                "identifier": "TestRepositoryComparison",
                "newPage": false,
                "searchKey": "graphqlbackend.TestRepositoryComparison",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepositoryComparison(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepositoryComparison(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestDiffHunk",
              "documentation": {
                "identifier": "TestDiffHunk",
                "newPage": false,
                "searchKey": "graphqlbackend.TestDiffHunk",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDiffHunk(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDiffHunk(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestDiffHunk2",
              "documentation": {
                "identifier": "TestDiffHunk2",
                "newPage": false,
                "searchKey": "graphqlbackend.TestDiffHunk2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDiffHunk2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDiffHunk2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestFileDiffHighlighter",
              "documentation": {
                "identifier": "TestFileDiffHighlighter",
                "newPage": false,
                "searchKey": "graphqlbackend.TestFileDiffHighlighter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFileDiffHighlighter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFileDiffHighlighter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestMarshalRepositoryCursor",
              "documentation": {
                "identifier": "TestMarshalRepositoryCursor",
                "newPage": false,
                "searchKey": "graphqlbackend.TestMarshalRepositoryCursor",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalRepositoryCursor(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalRepositoryCursor(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestUnmarshalRepositoryCursor",
              "documentation": {
                "identifier": "TestUnmarshalRepositoryCursor",
                "newPage": false,
                "searchKey": "graphqlbackend.TestUnmarshalRepositoryCursor",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalRepositoryCursor(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalRepositoryCursor(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestCheckMirrorRepositoryConnection",
              "documentation": {
                "identifier": "TestCheckMirrorRepositoryConnection",
                "newPage": false,
                "searchKey": "graphqlbackend.TestCheckMirrorRepositoryConnection",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCheckMirrorRepositoryConnection(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCheckMirrorRepositoryConnection(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestCheckMirrorRepositoryRemoteURL",
              "documentation": {
                "identifier": "TestCheckMirrorRepositoryRemoteURL",
                "newPage": false,
                "searchKey": "graphqlbackend.TestCheckMirrorRepositoryRemoteURL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCheckMirrorRepositoryRemoteURL(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCheckMirrorRepositoryRemoteURL(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestRepository_Commit",
              "documentation": {
                "identifier": "TestRepository_Commit",
                "newPage": false,
                "searchKey": "graphqlbackend.TestRepository_Commit",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_Commit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_Commit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestRepositoryHydration",
              "documentation": {
                "identifier": "TestRepositoryHydration",
                "newPage": false,
                "searchKey": "graphqlbackend.TestRepositoryHydration",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepositoryHydration(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepositoryHydration(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#assertRepoResolverHydrated",
              "documentation": {
                "identifier": "assertRepoResolverHydrated",
                "newPage": false,
                "searchKey": "graphqlbackend.assertRepoResolverHydrated",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func assertRepoResolverHydrated(ctx context.Context, t *testing.T, r *RepositoryResolver, hydrated *types.Repo)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc assertRepoResolverHydrated(ctx context.Context, t *testing.T, r *RepositoryResolver, hydrated *types.Repo)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestRepositoryLabel",
              "documentation": {
                "identifier": "TestRepositoryLabel",
                "newPage": false,
                "searchKey": "graphqlbackend.TestRepositoryLabel",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepositoryLabel(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepositoryLabel(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestRepository_DefaultBranch",
              "documentation": {
                "identifier": "TestRepository_DefaultBranch",
                "newPage": false,
                "searchKey": "graphqlbackend.TestRepository_DefaultBranch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepository_DefaultBranch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepository_DefaultBranch(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestRetrievingAndDeduplicatingIndexedRefs",
              "documentation": {
                "identifier": "TestRetrievingAndDeduplicatingIndexedRefs",
                "newPage": false,
                "searchKey": "graphqlbackend.TestRetrievingAndDeduplicatingIndexedRefs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRetrievingAndDeduplicatingIndexedRefs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRetrievingAndDeduplicatingIndexedRefs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSavedSearches",
              "documentation": {
                "identifier": "TestSavedSearches",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSavedSearches",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSavedSearches(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSavedSearches(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSavedSearchByIDOwner",
              "documentation": {
                "identifier": "TestSavedSearchByIDOwner",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSavedSearchByIDOwner",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSavedSearchByIDOwner(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSavedSearchByIDOwner(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSavedSearchByIDNonOwner",
              "documentation": {
                "identifier": "TestSavedSearchByIDNonOwner",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSavedSearchByIDNonOwner",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSavedSearchByIDNonOwner(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSavedSearchByIDNonOwner(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestCreateSavedSearch",
              "documentation": {
                "identifier": "TestCreateSavedSearch",
                "newPage": false,
                "searchKey": "graphqlbackend.TestCreateSavedSearch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCreateSavedSearch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCreateSavedSearch(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestUpdateSavedSearch",
              "documentation": {
                "identifier": "TestUpdateSavedSearch",
                "newPage": false,
                "searchKey": "graphqlbackend.TestUpdateSavedSearch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUpdateSavedSearch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUpdateSavedSearch(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestDeleteSavedSearch",
              "documentation": {
                "identifier": "TestDeleteSavedSearch",
                "newPage": false,
                "searchKey": "graphqlbackend.TestDeleteSavedSearch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteSavedSearch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteSavedSearch(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSearchPatternForSuggestion",
              "documentation": {
                "identifier": "TestSearchPatternForSuggestion",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSearchPatternForSuggestion",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchPatternForSuggestion(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchPatternForSuggestion(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestAddQueryRegexpField",
              "documentation": {
                "identifier": "TestAddQueryRegexpField",
                "newPage": false,
                "searchKey": "graphqlbackend.TestAddQueryRegexpField",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddQueryRegexpField(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddQueryRegexpField(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestAlertForDiffCommitSearchLimits",
              "documentation": {
                "identifier": "TestAlertForDiffCommitSearchLimits",
                "newPage": false,
                "searchKey": "graphqlbackend.TestAlertForDiffCommitSearchLimits",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAlertForDiffCommitSearchLimits(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAlertForDiffCommitSearchLimits(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestErrorToAlertStructuralSearch",
              "documentation": {
                "identifier": "TestErrorToAlertStructuralSearch",
                "newPage": false,
                "searchKey": "graphqlbackend.TestErrorToAlertStructuralSearch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestErrorToAlertStructuralSearch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestErrorToAlertStructuralSearch(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestAlertForOverRepoLimit",
              "documentation": {
                "identifier": "TestAlertForOverRepoLimit",
                "newPage": false,
                "searchKey": "graphqlbackend.TestAlertForOverRepoLimit",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAlertForOverRepoLimit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAlertForOverRepoLimit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestCapFirst",
              "documentation": {
                "identifier": "TestCapFirst",
                "newPage": false,
                "searchKey": "graphqlbackend.TestCapFirst",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCapFirst(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCapFirst(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestAlertForNoResolvedReposWithNonGlobalSearchContext",
              "documentation": {
                "identifier": "TestAlertForNoResolvedReposWithNonGlobalSearchContext",
                "newPage": false,
                "searchKey": "graphqlbackend.TestAlertForNoResolvedReposWithNonGlobalSearchContext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAlertForNoResolvedReposWithNonGlobalSearchContext(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAlertForNoResolvedReposWithNonGlobalSearchContext(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestAutoDefinedSearchContexts",
              "documentation": {
                "identifier": "TestAutoDefinedSearchContexts",
                "newPage": false,
                "searchKey": "graphqlbackend.TestAutoDefinedSearchContexts",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAutoDefinedSearchContexts(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAutoDefinedSearchContexts(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSearchContexts",
              "documentation": {
                "identifier": "TestSearchContexts",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSearchContexts",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchContexts(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchContexts(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSearchFilterSuggestions",
              "documentation": {
                "identifier": "TestSearchFilterSuggestions",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSearchFilterSuggestions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchFilterSuggestions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchFilterSuggestions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSearchPagination_unmarshalSearchCursor",
              "documentation": {
                "identifier": "TestSearchPagination_unmarshalSearchCursor",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSearchPagination_unmarshalSearchCursor",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchPagination_unmarshalSearchCursor(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchPagination_unmarshalSearchCursor(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSearchPagination_sliceSearchResults",
              "documentation": {
                "identifier": "TestSearchPagination_sliceSearchResults",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSearchPagination_sliceSearchResults",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchPagination_sliceSearchResults(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchPagination_sliceSearchResults(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSearchPagination_repoPaginationPlan",
              "documentation": {
                "identifier": "TestSearchPagination_repoPaginationPlan",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSearchPagination_repoPaginationPlan",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchPagination_repoPaginationPlan(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchPagination_repoPaginationPlan(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSearchPagination_issue_6287",
              "documentation": {
                "identifier": "TestSearchPagination_issue_6287",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSearchPagination_issue_6287",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchPagination_issue_6287(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchPagination_issue_6287(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSearchPagination_cloning_missing",
              "documentation": {
                "identifier": "TestSearchPagination_cloning_missing",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSearchPagination_cloning_missing",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchPagination_cloning_missing(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchPagination_cloning_missing(t *testing.T)\n```\n\nTestSearchPagination_cloning_missing is a joint test for both repoPaginationPlan and sliceSearchResults's handling of cloning and missing repositories. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#reposMap",
              "documentation": {
                "identifier": "reposMap",
                "newPage": false,
                "searchKey": "graphqlbackend.reposMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func reposMap(repos ...types.RepoName) map[api.RepoID]types.RepoName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc reposMap(repos ...types.RepoName) map[api.RepoID]types.RepoName\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSearchResultsStatsLanguages",
              "documentation": {
                "identifier": "TestSearchResultsStatsLanguages",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSearchResultsStatsLanguages",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchResultsStatsLanguages(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchResultsStatsLanguages(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#assertEqual",
              "documentation": {
                "identifier": "assertEqual",
                "newPage": false,
                "searchKey": "graphqlbackend.assertEqual",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func assertEqual(t *testing.T, got, want interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc assertEqual(t *testing.T, got, want interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSearchResults",
              "documentation": {
                "identifier": "TestSearchResults",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSearchResults",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchResults(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchResults(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSearchResolver_DynamicFilters",
              "documentation": {
                "identifier": "TestSearchResolver_DynamicFilters",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSearchResolver_DynamicFilters",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchResolver_DynamicFilters(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchResolver_DynamicFilters(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestLonger",
              "documentation": {
                "identifier": "TestLonger",
                "newPage": false,
                "searchKey": "graphqlbackend.TestLonger",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLonger(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLonger(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSearchResultsHydration",
              "documentation": {
                "identifier": "TestSearchResultsHydration",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSearchResultsHydration",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchResultsHydration(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchResultsHydration(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#Test_SearchResultsResolver_ApproximateResultCount",
              "documentation": {
                "identifier": "Test_SearchResultsResolver_ApproximateResultCount",
                "newPage": false,
                "searchKey": "graphqlbackend.Test_SearchResultsResolver_ApproximateResultCount",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test_SearchResultsResolver_ApproximateResultCount(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test_SearchResultsResolver_ApproximateResultCount(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestGetExactFilePatterns",
              "documentation": {
                "identifier": "TestGetExactFilePatterns",
                "newPage": false,
                "searchKey": "graphqlbackend.TestGetExactFilePatterns",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetExactFilePatterns(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetExactFilePatterns(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestCompareSearchResults",
              "documentation": {
                "identifier": "TestCompareSearchResults",
                "newPage": false,
                "searchKey": "graphqlbackend.TestCompareSearchResults",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCompareSearchResults(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCompareSearchResults(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestEvaluateAnd",
              "documentation": {
                "identifier": "TestEvaluateAnd",
                "newPage": false,
                "searchKey": "graphqlbackend.TestEvaluateAnd",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEvaluateAnd(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEvaluateAnd(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSearchContext",
              "documentation": {
                "identifier": "TestSearchContext",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSearchContext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchContext(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchContext(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#commitResult",
              "documentation": {
                "identifier": "commitResult",
                "newPage": false,
                "searchKey": "graphqlbackend.commitResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func commitResult(repo, commit string) *result.CommitMatch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc commitResult(repo, commit string) *result.CommitMatch\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#diffResult",
              "documentation": {
                "identifier": "diffResult",
                "newPage": false,
                "searchKey": "graphqlbackend.diffResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func diffResult(repo, commit string) *result.CommitMatch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc diffResult(repo, commit string) *result.CommitMatch\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repoResult",
              "documentation": {
                "identifier": "repoResult",
                "newPage": false,
                "searchKey": "graphqlbackend.repoResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func repoResult(name string) *result.RepoMatch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc repoResult(name string) *result.RepoMatch\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#fileResult",
              "documentation": {
                "identifier": "fileResult",
                "newPage": false,
                "searchKey": "graphqlbackend.fileResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func fileResult(repo string, lineMatches []*result.LineMatch, symbolMatches []*result.SymbolMatch) *result.FileMatch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fileResult(repo string, lineMatches []*result.LineMatch, symbolMatches []*result.SymbolMatch) *result.FileMatch\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestUnionMerge",
              "documentation": {
                "identifier": "TestUnionMerge",
                "newPage": false,
                "searchKey": "graphqlbackend.TestUnionMerge",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnionMerge(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnionMerge(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#searchResultResolversToString",
              "documentation": {
                "identifier": "searchResultResolversToString",
                "newPage": false,
                "searchKey": "graphqlbackend.searchResultResolversToString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func searchResultResolversToString(matches []result.Match) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc searchResultResolversToString(matches []result.Match) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestIsGlobalSearch",
              "documentation": {
                "identifier": "TestIsGlobalSearch",
                "newPage": false,
                "searchKey": "graphqlbackend.TestIsGlobalSearch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIsGlobalSearch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIsGlobalSearch(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestZeroElapsedMilliseconds",
              "documentation": {
                "identifier": "TestZeroElapsedMilliseconds",
                "newPage": false,
                "searchKey": "graphqlbackend.TestZeroElapsedMilliseconds",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestZeroElapsedMilliseconds(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestZeroElapsedMilliseconds(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSearchSuggestions",
              "documentation": {
                "identifier": "TestSearchSuggestions",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSearchSuggestions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearchSuggestions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearchSuggestions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSearch",
              "documentation": {
                "identifier": "TestSearch",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSearch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSearch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSearch(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#testStringResult",
              "documentation": {
                "identifier": "testStringResult",
                "newPage": false,
                "searchKey": "graphqlbackend.testStringResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStringResult(result SearchSuggestionResolver) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStringResult(result SearchSuggestionResolver) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestDetectSearchType",
              "documentation": {
                "identifier": "TestDetectSearchType",
                "newPage": false,
                "searchKey": "graphqlbackend.TestDetectSearchType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDetectSearchType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDetectSearchType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestExactlyOneRepo",
              "documentation": {
                "identifier": "TestExactlyOneRepo",
                "newPage": false,
                "searchKey": "graphqlbackend.TestExactlyOneRepo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExactlyOneRepo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExactlyOneRepo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestQuoteSuggestions",
              "documentation": {
                "identifier": "TestQuoteSuggestions",
                "newPage": false,
                "searchKey": "graphqlbackend.TestQuoteSuggestions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQuoteSuggestions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQuoteSuggestions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestVersionContext",
              "documentation": {
                "identifier": "TestVersionContext",
                "newPage": false,
                "searchKey": "graphqlbackend.TestVersionContext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestVersionContext(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestVersionContext(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#mkFileMatch",
              "documentation": {
                "identifier": "mkFileMatch",
                "newPage": false,
                "searchKey": "graphqlbackend.mkFileMatch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func mkFileMatch(repo types.RepoName, path string, lineNumbers ...int32) *result.FileMatch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mkFileMatch(repo types.RepoName, path string, lineNumbers ...int32) *result.FileMatch\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#repoRev",
              "documentation": {
                "identifier": "repoRev",
                "newPage": false,
                "searchKey": "graphqlbackend.repoRev",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func repoRev(revSpec string) *search.RepositoryRevisions"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc repoRev(revSpec string) *search.RepositoryRevisions\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestGetRepos",
              "documentation": {
                "identifier": "TestGetRepos",
                "newPage": false,
                "searchKey": "graphqlbackend.TestGetRepos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetRepos(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetRepos(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestGetReposWrongUnderlyingType",
              "documentation": {
                "identifier": "TestGetReposWrongUnderlyingType",
                "newPage": false,
                "searchKey": "graphqlbackend.TestGetReposWrongUnderlyingType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetReposWrongUnderlyingType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetReposWrongUnderlyingType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#BenchmarkSearchResults",
              "documentation": {
                "identifier": "BenchmarkSearchResults",
                "newPage": false,
                "searchKey": "graphqlbackend.BenchmarkSearchResults",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSearchResults(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSearchResults(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#BenchmarkIntegrationSearchResults",
              "documentation": {
                "identifier": "BenchmarkIntegrationSearchResults",
                "newPage": false,
                "searchKey": "graphqlbackend.BenchmarkIntegrationSearchResults",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIntegrationSearchResults(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIntegrationSearchResults(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#generateRepos",
              "documentation": {
                "identifier": "generateRepos",
                "newPage": false,
                "searchKey": "graphqlbackend.generateRepos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func generateRepos(count int) ([]*types.Repo, []*types.Repo, []*zoekt.RepoListEntry)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc generateRepos(count int) ([]*types.Repo, []*types.Repo, []*zoekt.RepoListEntry)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#generateZoektMatches",
              "documentation": {
                "identifier": "generateZoektMatches",
                "newPage": false,
                "searchKey": "graphqlbackend.generateZoektMatches",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func generateZoektMatches(count int) []zoekt.FileMatch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc generateZoektMatches(count int) []zoekt.FileMatch\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#zoektRPC",
              "documentation": {
                "identifier": "zoektRPC",
                "newPage": false,
                "searchKey": "graphqlbackend.zoektRPC",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func zoektRPC(s zoekt.Searcher) (zoekt.Searcher, func())"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc zoektRPC(s zoekt.Searcher) (zoekt.Searcher, func())\n```\n\nzoektRPC starts zoekts rpc interface and returns a client to searcher. Useful for capturing CPU/memory usage when benchmarking the zoekt client. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSetExternalServiceRepos",
              "documentation": {
                "identifier": "TestSetExternalServiceRepos",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSetExternalServiceRepos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSetExternalServiceRepos(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSetExternalServiceRepos(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestMergeSettings",
              "documentation": {
                "identifier": "TestMergeSettings",
                "newPage": false,
                "searchKey": "graphqlbackend.TestMergeSettings",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMergeSettings(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMergeSettings(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSubjects",
              "documentation": {
                "identifier": "TestSubjects",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSubjects",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSubjects(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSubjects(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#jsonDeepEqual",
              "documentation": {
                "identifier": "jsonDeepEqual",
                "newPage": false,
                "searchKey": "graphqlbackend.jsonDeepEqual",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func jsonDeepEqual(a, b string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc jsonDeepEqual(a, b string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSettingsMutation_EditSettings",
              "documentation": {
                "identifier": "TestSettingsMutation_EditSettings",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSettingsMutation_EditSettings",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSettingsMutation_EditSettings(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSettingsMutation_EditSettings(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSettingsMutation_OverwriteSettings",
              "documentation": {
                "identifier": "TestSettingsMutation_OverwriteSettings",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSettingsMutation_OverwriteSettings",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSettingsMutation_OverwriteSettings(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSettingsMutation_OverwriteSettings(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestDeleteUser",
              "documentation": {
                "identifier": "TestDeleteUser",
                "newPage": false,
                "searchKey": "graphqlbackend.TestDeleteUser",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteUser(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteUser(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#Test_determineOutOfDateAlert",
              "documentation": {
                "identifier": "Test_determineOutOfDateAlert",
                "newPage": false,
                "searchKey": "graphqlbackend.Test_determineOutOfDateAlert",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test_determineOutOfDateAlert(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test_determineOutOfDateAlert(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestObservabilityActiveAlertsAlert",
              "documentation": {
                "identifier": "TestObservabilityActiveAlertsAlert",
                "newPage": false,
                "searchKey": "graphqlbackend.TestObservabilityActiveAlertsAlert",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestObservabilityActiveAlertsAlert(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestObservabilityActiveAlertsAlert(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestStatusMessages",
              "documentation": {
                "identifier": "TestStatusMessages",
                "newPage": false,
                "searchKey": "graphqlbackend.TestStatusMessages",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStatusMessages(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStatusMessages(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#resetMocks",
              "documentation": {
                "identifier": "resetMocks",
                "newPage": false,
                "searchKey": "graphqlbackend.resetMocks",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func resetMocks()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc resetMocks()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestSetUserEmailVerified",
              "documentation": {
                "identifier": "TestSetUserEmailVerified",
                "newPage": false,
                "searchKey": "graphqlbackend.TestSetUserEmailVerified",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSetUserEmailVerified(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSetUserEmailVerified(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestResendUserEmailVerification",
              "documentation": {
                "identifier": "TestResendUserEmailVerification",
                "newPage": false,
                "searchKey": "graphqlbackend.TestResendUserEmailVerification",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResendUserEmailVerification(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResendUserEmailVerification(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestUser",
              "documentation": {
                "identifier": "TestUser",
                "newPage": false,
                "searchKey": "graphqlbackend.TestUser",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUser(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUser(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestNode_User",
              "documentation": {
                "identifier": "TestNode_User",
                "newPage": false,
                "searchKey": "graphqlbackend.TestNode_User",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNode_User(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNode_User(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestUpdateUser",
              "documentation": {
                "identifier": "TestUpdateUser",
                "newPage": false,
                "searchKey": "graphqlbackend.TestUpdateUser",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUpdateUser(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUpdateUser(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestUser_UsageStatistics",
              "documentation": {
                "identifier": "TestUser_UsageStatistics",
                "newPage": false,
                "searchKey": "graphqlbackend.TestUser_UsageStatistics",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUser_UsageStatistics(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUser_UsageStatistics(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestCreateUser",
              "documentation": {
                "identifier": "TestCreateUser",
                "newPage": false,
                "searchKey": "graphqlbackend.TestCreateUser",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCreateUser(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCreateUser(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestUsers",
              "documentation": {
                "identifier": "TestUsers",
                "newPage": false,
                "searchKey": "graphqlbackend.TestUsers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsers(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsers(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/graphqlbackend#TestVirtualFile",
              "documentation": {
                "identifier": "TestVirtualFile",
                "newPage": false,
                "searchKey": "graphqlbackend.TestVirtualFile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestVirtualFile(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestVirtualFile(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/cmd/frontend/graphqlbackend/externallink"
    },
    {
      "pathID": "/cmd/frontend/graphqlbackend/graphqlutil"
    }
  ]
}
