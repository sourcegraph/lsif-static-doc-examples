{
  "pathID": "/cmd/frontend/auth",
  "documentation": {
    "identifier": "auth",
    "newPage": true,
    "searchKey": "cmd/frontend/auth",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package auth"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package auth contains auth related code for the frontend. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/cmd/frontend/auth#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/auth#AuthURLPrefix",
              "documentation": {
                "identifier": "AuthURLPrefix",
                "newPage": false,
                "searchKey": "auth.AuthURLPrefix",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AuthURLPrefix"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AuthURLPrefix = \"/.auth\"\n```\n\nAuthURLPrefix is the URL path prefix under which to attach authentication handlers \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/cmd/frontend/auth#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/auth#extraAuthMiddlewares",
              "documentation": {
                "identifier": "extraAuthMiddlewares",
                "newPage": false,
                "searchKey": "auth.extraAuthMiddlewares",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var extraAuthMiddlewares"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar extraAuthMiddlewares []*Middleware\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#disallowedSymbols",
              "documentation": {
                "identifier": "disallowedSymbols",
                "newPage": false,
                "searchKey": "auth.disallowedSymbols",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var disallowedSymbols"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar disallowedSymbols = lazyregexp.New(`(^[\\-\\.])|(\\.$)|([\\-\\.]{2,})`)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#disallowedCharacter",
              "documentation": {
                "identifier": "disallowedCharacter",
                "newPage": false,
                "searchKey": "auth.disallowedCharacter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var disallowedCharacter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar disallowedCharacter = lazyregexp.New(`[^a-zA-Z0-9\\-\\.]`)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#RequireAuthMiddleware",
              "documentation": {
                "identifier": "RequireAuthMiddleware",
                "newPage": false,
                "searchKey": "auth.RequireAuthMiddleware",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var RequireAuthMiddleware"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar RequireAuthMiddleware = ...\n```\n\nRequireAuthMiddleware is a middleware that requires authentication for all HTTP requests, except those allowed by allowAnonymousRequest. It's used when auth.public == false. \n\nIt is enabled for all auth providers, but an auth provider may reject or redirect the user to its own auth flow before the request reaches here. \n\nðŸš¨ SECURITY: Any change to this function could introduce security exploits. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#anonymousAccessibleAPIRoutes",
              "documentation": {
                "identifier": "anonymousAccessibleAPIRoutes",
                "newPage": false,
                "searchKey": "auth.anonymousAccessibleAPIRoutes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var anonymousAccessibleAPIRoutes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar anonymousAccessibleAPIRoutes = ...\n```\n\nðŸš¨ SECURITY: These maps define route names that anonymous users can access. They MUST NOT leak any sensitive data or allow unprivileged users to perform undesired actions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#anonymousAccessibleUIRoutes",
              "documentation": {
                "identifier": "anonymousAccessibleUIRoutes",
                "newPage": false,
                "searchKey": "auth.anonymousAccessibleUIRoutes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var anonymousAccessibleUIRoutes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar anonymousAccessibleUIRoutes = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#anonymousUIStatusCode",
              "documentation": {
                "identifier": "anonymousUIStatusCode",
                "newPage": false,
                "searchKey": "auth.anonymousUIStatusCode",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var anonymousUIStatusCode"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar anonymousUIStatusCode = map[string]int{\n\n\tuirouter.RouteRaw: http.StatusUnauthorized,\n}\n```\n\nSome routes return non-standard HTTP responses when a user is not signed in. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#MockGetAndSaveUser",
              "documentation": {
                "identifier": "MockGetAndSaveUser",
                "newPage": false,
                "searchKey": "auth.MockGetAndSaveUser",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var MockGetAndSaveUser"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar MockGetAndSaveUser func(ctx context.Context, op GetAndSaveUserOp) (userID int32, safeErrMsg string, err error) = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/cmd/frontend/auth#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/auth#Middleware",
              "documentation": {
                "identifier": "Middleware",
                "newPage": false,
                "searchKey": "auth.Middleware",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Middleware struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Middleware struct {\n\t// API is the middleware that performs authentication on the API handler.\n\tAPI func(http.Handler) http.Handler\n\n\t// App is the middleware that performs authentication on the app handler.\n\tApp func(http.Handler) http.Handler\n}\n```\n\nMiddleware groups two related middlewares (one for the API, one for the app). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/auth#AuthMiddleware",
                    "documentation": {
                      "identifier": "AuthMiddleware",
                      "newPage": false,
                      "searchKey": "auth.AuthMiddleware",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func AuthMiddleware() *Middleware"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc AuthMiddleware() *Middleware\n```\n\nAuthMiddleware returns the authentication middleware that combines all authentication middlewares that have been registered. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/auth#composeMiddleware",
                    "documentation": {
                      "identifier": "composeMiddleware",
                      "newPage": false,
                      "searchKey": "auth.composeMiddleware",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func composeMiddleware(middlewares ...*Middleware) *Middleware"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc composeMiddleware(middlewares ...*Middleware) *Middleware\n```\n\ncomposeMiddleware returns a new Middleware that composes the middlewares together. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#GetAndSaveUserOp",
              "documentation": {
                "identifier": "GetAndSaveUserOp",
                "newPage": false,
                "searchKey": "auth.GetAndSaveUserOp",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GetAndSaveUserOp struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GetAndSaveUserOp struct {\n\tUserProps           database.NewUser\n\tExternalAccount     extsvc.AccountSpec\n\tExternalAccountData extsvc.AccountData\n\tCreateIfNotExist    bool\n\tLookUpByUsername    bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#userInfo",
              "documentation": {
                "identifier": "userInfo",
                "newPage": false,
                "searchKey": "auth.userInfo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type userInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype userInfo struct {\n\tuser     types.User\n\textAccts []extsvc.AccountSpec\n\temails   []string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#mockParams",
              "documentation": {
                "identifier": "mockParams",
                "newPage": false,
                "searchKey": "auth.mockParams",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type mockParams struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mockParams struct {\n\tuserInfos               []userInfo\n\tlookupUserAndSaveErr    error\n\tcreateUserAndSaveErr    error\n\tassociateUserAndSaveErr error\n\tgetByVerifiedEmailErr   error\n\tgetByUsernameErr        error //nolint:structcheck\n\tgetByIDErr              error\n\tupdateErr               error\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#mocks",
              "documentation": {
                "identifier": "mocks",
                "newPage": false,
                "searchKey": "auth.mocks",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type mocks struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mocks struct {\n\tmockParams\n\tt *testing.T\n\n\t// savedExtAccts tracks all ext acct \"saves\" for a given user ID\n\tsavedExtAccts map[int32][]extsvc.AccountSpec\n\n\t// createdUsers tracks user creations by user ID\n\tcreatedUsers map[int32]database.NewUser\n\n\t// updatedUsers tracks all user updates for a given user ID\n\tupdatedUsers map[int32][]database.UserUpdate\n\n\t// nextUserID is the user ID of the next created user.\n\tnextUserID int32\n\n\t// calledGrantPendingPermissions tracks if database.Authz.GrantPendingPermissions method is called.\n\tcalledGrantPendingPermissions bool\n}\n```\n\nmocks provide mocking. It should only be used for one call of auth.GetAndSaveUser, because saves are recorded in the mock struct but will not be reflected in the return values of the mocked methods. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/auth#newMocks",
                    "documentation": {
                      "identifier": "newMocks",
                      "newPage": false,
                      "searchKey": "auth.newMocks",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newMocks(t *testing.T, m mockParams) *mocks"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newMocks(t *testing.T, m mockParams) *mocks\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/auth#mocks.apply",
                    "documentation": {
                      "identifier": "mocks.apply",
                      "newPage": false,
                      "searchKey": "auth.mocks.apply",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *mocks) apply()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *mocks) apply()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/auth#mocks.reset",
                    "documentation": {
                      "identifier": "mocks.reset",
                      "newPage": false,
                      "searchKey": "auth.mocks.reset",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *mocks) reset()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *mocks) reset()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/auth#mocks.LookupUserAndSave",
                    "documentation": {
                      "identifier": "mocks.LookupUserAndSave",
                      "newPage": false,
                      "searchKey": "auth.mocks.LookupUserAndSave",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *mocks) LookupUserAndSave(spec extsvc.AccountSpec, data extsvc.AccountData) (userID int32, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *mocks) LookupUserAndSave(spec extsvc.AccountSpec, data extsvc.AccountData) (userID int32, err error)\n```\n\nLookupUserAndSave mocks database.ExternalAccounts.LookupUserAndSave \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/auth#mocks.CreateUserAndSave",
                    "documentation": {
                      "identifier": "mocks.CreateUserAndSave",
                      "newPage": false,
                      "searchKey": "auth.mocks.CreateUserAndSave",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *mocks) CreateUserAndSave(newUser database.NewUser, spec extsvc.AccountSpec, data extsvc.AccountData) (createdUserID int32, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *mocks) CreateUserAndSave(newUser database.NewUser, spec extsvc.AccountSpec, data extsvc.AccountData) (createdUserID int32, err error)\n```\n\nCreateUserAndSave mocks database.ExternalAccounts.CreateUserAndSave \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/auth#mocks.AssociateUserAndSave",
                    "documentation": {
                      "identifier": "mocks.AssociateUserAndSave",
                      "newPage": false,
                      "searchKey": "auth.mocks.AssociateUserAndSave",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *mocks) AssociateUserAndSave(userID int32, spec extsvc.AccountSpec, data extsvc.AccountData) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *mocks) AssociateUserAndSave(userID int32, spec extsvc.AccountSpec, data extsvc.AccountData) (err error)\n```\n\nAssociateUserAndSave mocks database.ExternalAccounts.AssociateUserAndSave \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/auth#mocks.GetByVerifiedEmail",
                    "documentation": {
                      "identifier": "mocks.GetByVerifiedEmail",
                      "newPage": false,
                      "searchKey": "auth.mocks.GetByVerifiedEmail",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *mocks) GetByVerifiedEmail(ctx context.Context, email string) (*types.User, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *mocks) GetByVerifiedEmail(ctx context.Context, email string) (*types.User, error)\n```\n\nGetByVerifiedEmail mocks database.Users.GetByVerifiedEmail \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/auth#mocks.GetByUsername",
                    "documentation": {
                      "identifier": "mocks.GetByUsername",
                      "newPage": false,
                      "searchKey": "auth.mocks.GetByUsername",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *mocks) GetByUsername(ctx context.Context, username string) (*types.User, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *mocks) GetByUsername(ctx context.Context, username string) (*types.User, error)\n```\n\nGetByUsername mocks database.Users.GetByUsername \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/auth#mocks.GetByID",
                    "documentation": {
                      "identifier": "mocks.GetByID",
                      "newPage": false,
                      "searchKey": "auth.mocks.GetByID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *mocks) GetByID(ctx context.Context, id int32) (*types.User, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *mocks) GetByID(ctx context.Context, id int32) (*types.User, error)\n```\n\nGetByID mocks database.Users.GetByID \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/auth#mocks.Update",
                    "documentation": {
                      "identifier": "mocks.Update",
                      "newPage": false,
                      "searchKey": "auth.mocks.Update",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *mocks) Update(id int32, update database.UserUpdate) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *mocks) Update(id int32, update database.UserUpdate) error\n```\n\nUpdate mocks database.Users.Update \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/auth#mocks.GrantPendingPermissions",
                    "documentation": {
                      "identifier": "mocks.GrantPendingPermissions",
                      "newPage": false,
                      "searchKey": "auth.mocks.GrantPendingPermissions",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *mocks) GrantPendingPermissions(context.Context, *database.GrantPendingPermissionsArgs) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *mocks) GrantPendingPermissions(context.Context, *database.GrantPendingPermissionsArgs) error\n```\n\nGrantPendingPermissions mocks database.Authz.GrantPendingPermissions \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/cmd/frontend/auth#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/auth#RegisterMiddlewares",
              "documentation": {
                "identifier": "RegisterMiddlewares",
                "newPage": false,
                "searchKey": "auth.RegisterMiddlewares",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RegisterMiddlewares(m ...*Middleware)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RegisterMiddlewares(m ...*Middleware)\n```\n\nRegisterMiddlewares registers additional authentication middlewares. Currently this is used to register enterprise-only SSO middleware. This should only be called from an init function. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#NormalizeUsername",
              "documentation": {
                "identifier": "NormalizeUsername",
                "newPage": false,
                "searchKey": "auth.NormalizeUsername",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NormalizeUsername(name string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NormalizeUsername(name string) (string, error)\n```\n\nNormalizeUsername normalizes a proposed username into a format that meets Sourcegraph's username formatting rules (based on, but not identical to [https://help.github.com/enterprise/2.11/admin/guides/user-management/using-ldap/#username-considerations-with-ldap](https://help.github.com/enterprise/2.11/admin/guides/user-management/using-ldap/#username-considerations-with-ldap)): \n\n- Any characters not in `[a-zA-Z0-9-.]` are replaced with `-` - Usernames with exactly one `@` character are interpreted as an email address, so the username will be extracted by truncating at the `@` character. - Usernames with two or more `@` characters are not considered an email address, so the `@` will be treated as a non-standard character and be replaced with `-` - Usernames with consecutive `-` or `.` characters are not allowed - Usernames that start or end with `.` are not allowed - Usernames that start with `-` are not allowed \n\nUsernames that could not be converted return an error. \n\nNote: Do not forget to change database constraints on \"users\" and \"orgs\" tables. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#matchedRouteName",
              "documentation": {
                "identifier": "matchedRouteName",
                "newPage": false,
                "searchKey": "auth.matchedRouteName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func matchedRouteName(req *http.Request, router *mux.Router) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc matchedRouteName(req *http.Request, router *mux.Router) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#AllowAnonymousRequest",
              "documentation": {
                "identifier": "AllowAnonymousRequest",
                "newPage": false,
                "searchKey": "auth.AllowAnonymousRequest",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func AllowAnonymousRequest(req *http.Request) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc AllowAnonymousRequest(req *http.Request) bool\n```\n\nAllowAnonymousRequest reports whether handling of the HTTP request (which is from an anonymous user) should proceed. The eventual handler for the request may still perform other authn/authz checks. \n\nðŸš¨ SECURITY: This func MUST return false if handling req would leak any sensitive data or allow unprivileged users to perform undesired actions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#anonymousStatusCode",
              "documentation": {
                "identifier": "anonymousStatusCode",
                "newPage": false,
                "searchKey": "auth.anonymousStatusCode",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func anonymousStatusCode(req *http.Request, defaultCode int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc anonymousStatusCode(req *http.Request, defaultCode int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#SafeRedirectURL",
              "documentation": {
                "identifier": "SafeRedirectURL",
                "newPage": false,
                "searchKey": "auth.SafeRedirectURL",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func SafeRedirectURL(urlStr string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SafeRedirectURL(urlStr string) string\n```\n\nSafeRedirectURL returns a safe redirect URL based on the input, to protect against open-redirect vulnerabilities. \n\nðŸš¨ SECURITY: Handlers MUST call this on any redirection destination URL derived from untrusted user input, or else there is a possible open-redirect vulnerability. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#GetAndSaveUser",
              "documentation": {
                "identifier": "GetAndSaveUser",
                "newPage": false,
                "searchKey": "auth.GetAndSaveUser",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func GetAndSaveUser(ctx context.Context, op GetAndSaveUserOp) (userID int32, safeErrMsg string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc GetAndSaveUser(ctx context.Context, op GetAndSaveUserOp) (userID int32, safeErrMsg string, err error)\n```\n\nGetAndSaveUser accepts authentication information associated with a given user, validates and applies the necessary updates to the DB, and returns the user ID after the updates have been applied. \n\nAt a high level, it does the following: 1. Determine the identity of the user by applying the following rules in order: \n\n```\na. If ctx contains an authenticated Actor, the Actor's identity is the user identity.\nb. Look up the user by external account ID.\nc. If the email specified in op.UserProps is verified, Look up the user by verified email.\n   If op.LookUpByUsername is true, look up by username instead of verified email.\n   (Note: most clients should look up by email, as username is typically insecure.)\nd. If op.CreateIfNotExist is true, attempt to create a new user with the properties\n   specified in op.UserProps. This may fail if the desired username is already taken.\ne. If a new user is successfully created, attempt to grant pending permissions.\n\n```\n2. Ensure that the user is associated with the external account information. This means \n\n```\ncreating the external account if it does not already exist or updating it if it\nalready does.\n\n```\n3. Update any user props that have changed. 4. Return the user ID. \n\nðŸš¨ SECURITY: It is the caller's responsibility to ensure the veracity of the information that op contains (e.g., by receiving it from the appropriate authentication mechanism). It must also ensure that the user identity implied by op is consistent. Specifically, the values used in step 1 above must be consistent: * The authenticated Actor, if it exists * op.ExternalAccount * op.UserProps, especially op.UserProps.Email \n\nðŸš¨ SECURITY: The safeErrMsg is an error message that can be shown to unauthenticated users to describe the problem. The err may contain sensitive information and should only be written to the server error logs, not to the HTTP response to shown to unauthenticated users. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#TestNormalizeUsername",
              "documentation": {
                "identifier": "TestNormalizeUsername",
                "newPage": false,
                "searchKey": "auth.TestNormalizeUsername",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNormalizeUsername(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNormalizeUsername(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#TestSafeRedirectURL",
              "documentation": {
                "identifier": "TestSafeRedirectURL",
                "newPage": false,
                "searchKey": "auth.TestSafeRedirectURL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSafeRedirectURL(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSafeRedirectURL(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "auth.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#TestGetAndSaveUser",
              "documentation": {
                "identifier": "TestGetAndSaveUser",
                "newPage": false,
                "searchKey": "auth.TestGetAndSaveUser",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetAndSaveUser(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetAndSaveUser(t *testing.T)\n```\n\nTestGetAndSaveUser ensures the correctness of the GetAndSaveUser function. \n\nðŸš¨ SECURITY: This guarantees the integrity of the identity resolution process (ensuring that new external accounts are linked to the appropriate user account) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#TestMetadataOnlyAutomaticallySetOnFirstOccurrence",
              "documentation": {
                "identifier": "TestMetadataOnlyAutomaticallySetOnFirstOccurrence",
                "newPage": false,
                "searchKey": "auth.TestMetadataOnlyAutomaticallySetOnFirstOccurrence",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMetadataOnlyAutomaticallySetOnFirstOccurrence(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMetadataOnlyAutomaticallySetOnFirstOccurrence(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#ext",
              "documentation": {
                "identifier": "ext",
                "newPage": false,
                "searchKey": "auth.ext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ext(serviceType, serviceID, clientID, accountID string) extsvc.AccountSpec"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ext(serviceType, serviceID, clientID, accountID string) extsvc.AccountSpec\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/auth#userProps",
              "documentation": {
                "identifier": "userProps",
                "newPage": false,
                "searchKey": "auth.userProps",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func userProps(username, email string, verifiedEmail bool) database.NewUser"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc userProps(username, email string, verifiedEmail bool) database.NewUser\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/cmd/frontend/auth/providers"
    }
  ]
}
