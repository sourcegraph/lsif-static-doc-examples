{
  "pathID": "/cmd/frontend/internal/handlerutil",
  "documentation": {
    "identifier": "handlerutil",
    "newPage": true,
    "searchKey": "cmd/frontend/internal/handlerutil",
    "tags": [
      "package",
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package handlerutil"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package handlerutil contains common helper functions used by both the app and API HTTP handlers. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/cmd/frontend/internal/handlerutil#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/internal/handlerutil#ravenClient",
              "documentation": {
                "identifier": "ravenClient",
                "newPage": false,
                "searchKey": "handlerutil.ravenClient",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ravenClient"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ravenClient *raven.Client\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/cmd/frontend/internal/handlerutil#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/internal/handlerutil#HandlerWithErrorReturn",
              "documentation": {
                "identifier": "HandlerWithErrorReturn",
                "newPage": false,
                "searchKey": "handlerutil.HandlerWithErrorReturn",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type HandlerWithErrorReturn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype HandlerWithErrorReturn struct {\n\tHandler func(http.ResponseWriter, *http.Request) error       // the underlying handler\n\tError   func(http.ResponseWriter, *http.Request, int, error) // called to send an error response (e.g., an error page), it must not panic\n\n\tPretendPanic bool\n}\n```\n\nHandlerWithErrorReturn wraps a http.HandlerFunc-like func that also returns an error.  If the error is nil, this wrapper is a no-op. If the error is non-nil, it attempts to determine the HTTP status code equivalent of the returned error (if non-nil) and set that as the HTTP status. \n\nError must never panic. If it has to execute something that may panic (for example, call out into an external code), then it must use recover to catch potential panics. If Error panics, the panic will propagate upstream. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/internal/handlerutil#HandlerWithErrorReturn.ServeHTTP",
                    "documentation": {
                      "identifier": "HandlerWithErrorReturn.ServeHTTP",
                      "newPage": false,
                      "searchKey": "handlerutil.HandlerWithErrorReturn.ServeHTTP",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h HandlerWithErrorReturn) ServeHTTP(w http.ResponseWriter, r *http.Request)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h HandlerWithErrorReturn) ServeHTTP(w http.ResponseWriter, r *http.Request)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/handlerutil#URLMovedError",
              "documentation": {
                "identifier": "URLMovedError",
                "newPage": false,
                "searchKey": "handlerutil.URLMovedError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type URLMovedError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype URLMovedError struct {\n\tNewRepo api.RepoName `json:\"RedirectTo\"`\n}\n```\n\nURLMovedError should be returned when a requested resource has moved to a new address. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/internal/handlerutil#URLMovedError.Error",
                    "documentation": {
                      "identifier": "URLMovedError.Error",
                      "newPage": false,
                      "searchKey": "handlerutil.URLMovedError.Error",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *URLMovedError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *URLMovedError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/cmd/frontend/internal/handlerutil#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/internal/handlerutil#CSRFMiddleware",
              "documentation": {
                "identifier": "CSRFMiddleware",
                "newPage": false,
                "searchKey": "handlerutil.CSRFMiddleware",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func CSRFMiddleware(next http.Handler, isSecure func() bool) http.Handler"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CSRFMiddleware(next http.Handler, isSecure func() bool) http.Handler\n```\n\nCSRFMiddleware is HTTP middleware that helps prevent cross-site request forgery. To make your forms compliant you will have to submit the token via the X-Csrf-Token header, which is made available in the client-side context. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/handlerutil#GetRepo",
              "documentation": {
                "identifier": "GetRepo",
                "newPage": false,
                "searchKey": "handlerutil.GetRepo",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func GetRepo(ctx context.Context, vars map[string]string) (*types.Repo, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc GetRepo(ctx context.Context, vars map[string]string) (*types.Repo, error)\n```\n\nGetRepo gets the repo (from the reposSvc) specified in the URL's Repo route param. Callers should ideally check for a return error of type URLMovedError and handle this scenario by warning or redirecting the user. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/handlerutil#GetRepoAndRev",
              "documentation": {
                "identifier": "GetRepoAndRev",
                "newPage": false,
                "searchKey": "handlerutil.GetRepoAndRev",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func GetRepoAndRev(ctx context.Context, vars map[string]string) (*types.Repo, api.CommitID, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc GetRepoAndRev(ctx context.Context, vars map[string]string) (*types.Repo, api.CommitID, error)\n```\n\nGetRepoAndRev returns the repo object and the commit ID for a repository. It may also return custom error URLMovedError to allow special handling of this case, such as for example redirecting the user. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/handlerutil#RedirectToNewRepoName",
              "documentation": {
                "identifier": "RedirectToNewRepoName",
                "newPage": false,
                "searchKey": "handlerutil.RedirectToNewRepoName",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RedirectToNewRepoName(w http.ResponseWriter, r *http.Request, newRepoName api.RepoName) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RedirectToNewRepoName(w http.ResponseWriter, r *http.Request, newRepoName api.RepoName) error\n```\n\nRedirectToNewRepoName writes an HTTP redirect response with a Location that matches the request's location except with the Repo route var updated to refer to newRepoName (instead of the originally requested repo name). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/handlerutil#TestGetRepo",
              "documentation": {
                "identifier": "TestGetRepo",
                "newPage": false,
                "searchKey": "handlerutil.TestGetRepo",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetRepo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetRepo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/handlerutil#collapseMultipleErrors",
              "documentation": {
                "identifier": "collapseMultipleErrors",
                "newPage": false,
                "searchKey": "handlerutil.collapseMultipleErrors",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func collapseMultipleErrors(err error) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc collapseMultipleErrors(err error) error\n```\n\ncollapseMultipleErrors returns the first err if err is a parallel.Errors list of length 1. Otherwise it returns err unchanged. This lets us return the proper HTTP status code for single errors. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/handlerutil#getRepoRev",
              "documentation": {
                "identifier": "getRepoRev",
                "newPage": false,
                "searchKey": "handlerutil.getRepoRev",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getRepoRev(ctx context.Context, vars map[string]string, repoID api.RepoID) (api.RepoID, api.CommitID, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getRepoRev(ctx context.Context, vars map[string]string, repoID api.RepoID) (api.RepoID, api.CommitID, error)\n```\n\ngetRepoRev resolves the repository and commit specified in the route vars. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/handlerutil#httpErrCode",
              "documentation": {
                "identifier": "httpErrCode",
                "newPage": false,
                "searchKey": "handlerutil.httpErrCode",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func httpErrCode(r *http.Request, err error) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc httpErrCode(r *http.Request, err error) int\n```\n\nhttpErrCode maps an error to a status code. If the client canceled the request we return the non-standard \"499 Client Closed Request\" used by nginx. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/handlerutil#init.error_reporting.go",
              "documentation": {
                "identifier": "init.error_reporting.go",
                "newPage": false,
                "searchKey": "handlerutil.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/handlerutil#reportError",
              "documentation": {
                "identifier": "reportError",
                "newPage": false,
                "searchKey": "handlerutil.reportError",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func reportError(r *http.Request, status int, err error, panicked bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc reportError(r *http.Request, status int, err error, panicked bool)\n```\n\nreportError reports an error to Sentry. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
