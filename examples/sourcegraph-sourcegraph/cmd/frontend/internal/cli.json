{
  "pathID": "/cmd/frontend/internal/cli",
  "documentation": {
    "identifier": "cli",
    "newPage": true,
    "searchKey": "cmd/frontend/internal/cli",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package cli"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package cli contains CLI commands for the \"src\" program. \n\nIt is a library, not a main package, so that other test packages may use its definitions (e.g., to invoke commands or create CLI argument strings directly in Go in a type-safe manner). \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/cmd/frontend/internal/cli#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#corsAllowHeader",
              "documentation": {
                "identifier": "corsAllowHeader",
                "newPage": false,
                "searchKey": "cli.corsAllowHeader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const corsAllowHeader"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst corsAllowHeader = \"X-Requested-With\"\n```\n\ncorsAllowHeader is the HTTP header that, if present (and assuming secureHeadersMiddleware is used), indicates that the incoming HTTP request is either same-origin or is from an allowed origin. See [https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Protecting_REST_Services:_Use_of_Custom_Request_Headers](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Protecting_REST_Services:_Use_of_Custom_Request_Headers) for more information on this technique. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#logoColor",
              "documentation": {
                "identifier": "logoColor",
                "newPage": false,
                "searchKey": "cli.logoColor",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const logoColor"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst logoColor = ...\n```\n\nTODO(sqs): use non-colored logo if terminal doesn't support color \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#skipSysReqsEnvVar",
              "documentation": {
                "identifier": "skipSysReqsEnvVar",
                "newPage": false,
                "searchKey": "cli.skipSysReqsEnvVar",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const skipSysReqsEnvVar"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst skipSysReqsEnvVar = \"SRC_SKIP_REQS\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/cmd/frontend/internal/cli#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#metricConfigOverrideUpdates",
              "documentation": {
                "identifier": "metricConfigOverrideUpdates",
                "newPage": false,
                "searchKey": "cli.metricConfigOverrideUpdates",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var metricConfigOverrideUpdates"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar metricConfigOverrideUpdates = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#serviceConnectionsVal",
              "documentation": {
                "identifier": "serviceConnectionsVal",
                "newPage": false,
                "searchKey": "cli.serviceConnectionsVal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var serviceConnectionsVal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar serviceConnectionsVal conftypes.ServiceConnections\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#serviceConnectionsOnce",
              "documentation": {
                "identifier": "serviceConnectionsOnce",
                "newPage": false,
                "searchKey": "cli.serviceConnectionsOnce",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var serviceConnectionsOnce"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar serviceConnectionsOnce sync.Once\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#traceFields",
              "documentation": {
                "identifier": "traceFields",
                "newPage": false,
                "searchKey": "cli.traceFields",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var traceFields"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar traceFields = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#traceThreshold",
              "documentation": {
                "identifier": "traceThreshold",
                "newPage": false,
                "searchKey": "cli.traceThreshold",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var traceThreshold"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar traceThreshold = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#printLogo",
              "documentation": {
                "identifier": "printLogo",
                "newPage": false,
                "searchKey": "cli.printLogo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var printLogo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar printLogo, _ = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#httpAddr",
              "documentation": {
                "identifier": "httpAddr",
                "newPage": false,
                "searchKey": "cli.httpAddr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var httpAddr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar httpAddr = env.Get(\"SRC_HTTP_ADDR\", \":3080\", \"HTTP listen address for app and HTTP API\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#httpAddrInternal",
              "documentation": {
                "identifier": "httpAddrInternal",
                "newPage": false,
                "searchKey": "cli.httpAddrInternal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var httpAddrInternal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar httpAddrInternal = envvar.HTTPAddrInternal\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#nginxAddr",
              "documentation": {
                "identifier": "nginxAddr",
                "newPage": false,
                "searchKey": "cli.nginxAddr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var nginxAddr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nginxAddr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#devExtension",
              "documentation": {
                "identifier": "devExtension",
                "newPage": false,
                "searchKey": "cli.devExtension",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var devExtension"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar devExtension = \"chrome-extension://bmfbcejdknlknpncfpeloejonjoledha\"\n```\n\ndev browser browser extension ID. You can find this by going to chrome://extensions \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#prodExtension",
              "documentation": {
                "identifier": "prodExtension",
                "newPage": false,
                "searchKey": "cli.prodExtension",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var prodExtension"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar prodExtension = \"chrome-extension://dgjhfomjieaadpoljlnidmbgkdffpack\"\n```\n\nproduction browser extension ID. This is found by viewing our extension in the chrome store. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#skipSysReqsEnv",
              "documentation": {
                "identifier": "skipSysReqsEnv",
                "newPage": false,
                "searchKey": "cli.skipSysReqsEnv",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var skipSysReqsEnv"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar skipSysReqsEnv = env.Get(skipSysReqsEnvVar, \"false\", \"skip system requirement checks\")\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/cmd/frontend/internal/cli#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#configurationSource",
              "documentation": {
                "identifier": "configurationSource",
                "newPage": false,
                "searchKey": "cli.configurationSource",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type configurationSource struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype configurationSource struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/internal/cli#configurationSource.Read",
                    "documentation": {
                      "identifier": "configurationSource.Read",
                      "newPage": false,
                      "searchKey": "cli.configurationSource.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c configurationSource) Read(ctx context.Context) (conftypes.RawUnified, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c configurationSource) Read(ctx context.Context) (conftypes.RawUnified, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/internal/cli#configurationSource.Write",
                    "documentation": {
                      "identifier": "configurationSource.Write",
                      "newPage": false,
                      "searchKey": "cli.configurationSource.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c configurationSource) Write(ctx context.Context, input conftypes.RawUnified) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c configurationSource) Write(ctx context.Context, input conftypes.RawUnified) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/cmd/frontend/internal/cli#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#printConfigValidation",
              "documentation": {
                "identifier": "printConfigValidation",
                "newPage": false,
                "searchKey": "cli.printConfigValidation",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func printConfigValidation()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc printConfigValidation()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#overrideSiteConfig",
              "documentation": {
                "identifier": "overrideSiteConfig",
                "newPage": false,
                "searchKey": "cli.overrideSiteConfig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func overrideSiteConfig(ctx context.Context) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc overrideSiteConfig(ctx context.Context) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#overrideGlobalSettings",
              "documentation": {
                "identifier": "overrideGlobalSettings",
                "newPage": false,
                "searchKey": "cli.overrideGlobalSettings",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func overrideGlobalSettings(ctx context.Context, db dbutil.DB) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc overrideGlobalSettings(ctx context.Context, db dbutil.DB) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#overrideExtSvcConfig",
              "documentation": {
                "identifier": "overrideExtSvcConfig",
                "newPage": false,
                "searchKey": "cli.overrideExtSvcConfig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func overrideExtSvcConfig(ctx context.Context, db dbutil.DB) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc overrideExtSvcConfig(ctx context.Context, db dbutil.DB) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#watchUpdate",
              "documentation": {
                "identifier": "watchUpdate",
                "newPage": false,
                "searchKey": "cli.watchUpdate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func watchUpdate(ctx context.Context, path string, update func(context.Context) error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc watchUpdate(ctx context.Context, path string, update func(context.Context) error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#watchPaths",
              "documentation": {
                "identifier": "watchPaths",
                "newPage": false,
                "searchKey": "cli.watchPaths",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func watchPaths(ctx context.Context, paths ...string) (<-chan error, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc watchPaths(ctx context.Context, paths ...string) (<-chan error, error)\n```\n\nwatchPaths returns a channel which watches the non-empty paths. Whenever any path changes a nil error is sent down chan. If an error occurs it is sent. chan is closed when ctx is Done. \n\nNote: This can send many events even if the file content hasn't changed. For example chmod events are sent. Another is a rename is two events for watcher (remove and create). Additionally if a file is removed the watch is removed. Even if a file with the same name is created in its place later. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#serviceConnections",
              "documentation": {
                "identifier": "serviceConnections",
                "newPage": false,
                "searchKey": "cli.serviceConnections",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func serviceConnections() conftypes.ServiceConnections"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc serviceConnections() conftypes.ServiceConnections\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#gitServers",
              "documentation": {
                "identifier": "gitServers",
                "newPage": false,
                "searchKey": "cli.gitServers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func gitServers() []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc gitServers() []string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#comparePostgresDSNs",
              "documentation": {
                "identifier": "comparePostgresDSNs",
                "newPage": false,
                "searchKey": "cli.comparePostgresDSNs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func comparePostgresDSNs(dsn1, dsn2 string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc comparePostgresDSNs(dsn1, dsn2 string) error\n```\n\ncomparePostgresDSNs returns an error if one of the given Postgres DSN values are not a valid URL, or if they are both valid URLs but point to the same database. We consider two DSNs to be the same when they specify the same host, port, and path. It's possible that different hosts/ports map to the same physical machine, so we could conceivably return false negatives here and the tricksy site-admin may have pulled the wool over our eyes. This shouldn't actually affect anything operationally in the near-term, but may just make migrations harder when we need to have them manually separate the data. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#newExternalHTTPHandler",
              "documentation": {
                "identifier": "newExternalHTTPHandler",
                "newPage": false,
                "searchKey": "cli.newExternalHTTPHandler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func newExternalHTTPHandler(db dbutil.DB, schema *graphql.Schema, gitHubWebhook webhooks.Registerer, gitLabWebhook, bitbucketServerWebhook http.Handler, newCodeIntelUploadHandler enterprise.NewCodeIntelUploadHandler, newExecutorProxyHandler enterprise.NewExecutorProxyHandler, rateLimitWatcher graphqlbackend.LimitWatcher) (http.Handler, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newExternalHTTPHandler(db dbutil.DB, schema *graphql.Schema, gitHubWebhook webhooks.Registerer, gitLabWebhook, bitbucketServerWebhook http.Handler, newCodeIntelUploadHandler enterprise.NewCodeIntelUploadHandler, newExecutorProxyHandler enterprise.NewExecutorProxyHandler, rateLimitWatcher graphqlbackend.LimitWatcher) (http.Handler, error)\n```\n\nnewExternalHTTPHandler creates and returns the HTTP handler that serves the app and API pages to external clients. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#healthCheckMiddleware",
              "documentation": {
                "identifier": "healthCheckMiddleware",
                "newPage": false,
                "searchKey": "cli.healthCheckMiddleware",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func healthCheckMiddleware(next http.Handler) http.Handler"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc healthCheckMiddleware(next http.Handler) http.Handler\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#newInternalHTTPHandler",
              "documentation": {
                "identifier": "newInternalHTTPHandler",
                "newPage": false,
                "searchKey": "cli.newInternalHTTPHandler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func newInternalHTTPHandler(schema *graphql.Schema, db dbutil.DB, newCodeIntelUploadHandler enterprise.NewCodeIntelUploadHandler, rateLimitWatcher graphqlbackend.LimitWatcher) http.Handler"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newInternalHTTPHandler(schema *graphql.Schema, db dbutil.DB, newCodeIntelUploadHandler enterprise.NewCodeIntelUploadHandler, rateLimitWatcher graphqlbackend.LimitWatcher) http.Handler\n```\n\nnewInternalHTTPHandler creates and returns the HTTP handler for the internal API (accessible to other internal services). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#withInternalActor",
              "documentation": {
                "identifier": "withInternalActor",
                "newPage": false,
                "searchKey": "cli.withInternalActor",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func withInternalActor(h http.Handler) http.Handler"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc withInternalActor(h http.Handler) http.Handler\n```\n\nwithInternalActor wraps an existing HTTP handler by setting an internal actor in the HTTP request context. \n\n🚨 SECURITY: This should *never* be called to wrap externally accessible handlers (i.e., only use for the internal endpoint), because internal requests will bypass repository permissions checks. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#secureHeadersMiddleware",
              "documentation": {
                "identifier": "secureHeadersMiddleware",
                "newPage": false,
                "searchKey": "cli.secureHeadersMiddleware",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func secureHeadersMiddleware(next http.Handler) http.Handler"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc secureHeadersMiddleware(next http.Handler) http.Handler\n```\n\nsecureHeadersMiddleware adds and checks for HTTP security-related headers. \n\n🚨 SECURITY: This handler is served to all clients, even on private servers to clients who have not authenticated. It must not reveal any sensitive information. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#isTrustedOrigin",
              "documentation": {
                "identifier": "isTrustedOrigin",
                "newPage": false,
                "searchKey": "cli.isTrustedOrigin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isTrustedOrigin(r *http.Request) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isTrustedOrigin(r *http.Request) bool\n```\n\nisTrustedOrigin returns whether the HTTP request's Origin is trusted to initiate authenticated cross-origin requests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#newOutOfBandMigrationRunner",
              "documentation": {
                "identifier": "newOutOfBandMigrationRunner",
                "newPage": false,
                "searchKey": "cli.newOutOfBandMigrationRunner",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func newOutOfBandMigrationRunner(ctx context.Context, db *sql.DB) *oobmigration.Runner"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newOutOfBandMigrationRunner(ctx context.Context, db *sql.DB) *oobmigration.Runner\n```\n\nnewOutOfBandMigrationRunner creates and validates an out of band migrator instance. This method may issue a `log.Fatal` when there are migrations left in an unexpected state for the current application version. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#validateOutOfBandMigrationRunner",
              "documentation": {
                "identifier": "validateOutOfBandMigrationRunner",
                "newPage": false,
                "searchKey": "cli.validateOutOfBandMigrationRunner",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func validateOutOfBandMigrationRunner(ctx context.Context, outOfBandMigrationRunner *oobmigration.Runner)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc validateOutOfBandMigrationRunner(ctx context.Context, outOfBandMigrationRunner *oobmigration.Runner)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "cli.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#defaultExternalURL",
              "documentation": {
                "identifier": "defaultExternalURL",
                "newPage": false,
                "searchKey": "cli.defaultExternalURL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func defaultExternalURL(nginxAddr, httpAddr string) *url.URL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc defaultExternalURL(nginxAddr, httpAddr string) *url.URL\n```\n\ndefaultExternalURL returns the default external URL of the application. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#InitDB",
              "documentation": {
                "identifier": "InitDB",
                "newPage": false,
                "searchKey": "cli.InitDB",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func InitDB() (*sql.DB, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc InitDB() (*sql.DB, error)\n```\n\nInitDB initializes and returns the global database connection and sets the version of the frontend in our versions table. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#Main",
              "documentation": {
                "identifier": "Main",
                "newPage": false,
                "searchKey": "cli.Main",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Main(enterpriseSetupHook func(db dbutil.DB, outOfBandMigrationRunner *oobmigration.Runner) enterprise.Services) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Main(enterpriseSetupHook func(db dbutil.DB, outOfBandMigrationRunner *oobmigration.Runner) enterprise.Services) error\n```\n\nMain is the main entrypoint for the frontend server program. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#makeExternalAPI",
              "documentation": {
                "identifier": "makeExternalAPI",
                "newPage": false,
                "searchKey": "cli.makeExternalAPI",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeExternalAPI(db dbutil.DB, schema *graphql.Schema, enterprise enterprise.Services, rateLimiter graphqlbackend.LimitWatcher) (goroutine.BackgroundRoutine, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeExternalAPI(db dbutil.DB, schema *graphql.Schema, enterprise enterprise.Services, rateLimiter graphqlbackend.LimitWatcher) (goroutine.BackgroundRoutine, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#makeInternalAPI",
              "documentation": {
                "identifier": "makeInternalAPI",
                "newPage": false,
                "searchKey": "cli.makeInternalAPI",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeInternalAPI(schema *graphql.Schema, db dbutil.DB, enterprise enterprise.Services, rateLimiter graphqlbackend.LimitWatcher) (goroutine.BackgroundRoutine, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeInternalAPI(schema *graphql.Schema, db dbutil.DB, enterprise enterprise.Services, rateLimiter graphqlbackend.LimitWatcher) (goroutine.BackgroundRoutine, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#isAllowedOrigin",
              "documentation": {
                "identifier": "isAllowedOrigin",
                "newPage": false,
                "searchKey": "cli.isAllowedOrigin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isAllowedOrigin(origin string, allowedOrigins []string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isAllowedOrigin(origin string, allowedOrigins []string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#makeRateLimitWatcher",
              "documentation": {
                "identifier": "makeRateLimitWatcher",
                "newPage": false,
                "searchKey": "cli.makeRateLimitWatcher",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeRateLimitWatcher() (*graphqlbackend.BasicLimitWatcher, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeRateLimitWatcher() (*graphqlbackend.BasicLimitWatcher, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#skippedSysReqs",
              "documentation": {
                "identifier": "skippedSysReqs",
                "newPage": false,
                "searchKey": "cli.skippedSysReqs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func skippedSysReqs() []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc skippedSysReqs() []string\n```\n\nskippedSysReqs returns a list of sysreq names to skip (e.g., \"Docker\"). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#checkSysReqs",
              "documentation": {
                "identifier": "checkSysReqs",
                "newPage": false,
                "searchKey": "cli.checkSysReqs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkSysReqs(ctx context.Context, w io.Writer) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkSysReqs(ctx context.Context, w io.Writer) error\n```\n\ncheckSysReqs uses package sysreq to check for the presence of system requirements. If any are missing, it prints a message to w and returns a non-nil error. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/cli#TestServiceConnections",
              "documentation": {
                "identifier": "TestServiceConnections",
                "newPage": false,
                "searchKey": "cli.TestServiceConnections",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServiceConnections(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServiceConnections(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/cmd/frontend/internal/cli/loghandlers"
    },
    {
      "pathID": "/cmd/frontend/internal/cli/middleware"
    },
    {
      "pathID": "/cmd/frontend/internal/cli/middleware_test"
    }
  ]
}
