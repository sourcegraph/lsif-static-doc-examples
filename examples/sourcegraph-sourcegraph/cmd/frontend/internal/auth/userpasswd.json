{
  "pathID": "/cmd/frontend/internal/auth/userpasswd",
  "documentation": {
    "identifier": "userpasswd",
    "newPage": true,
    "searchKey": "cmd/frontend/internal/auth/userpasswd",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package userpasswd"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package userpasswd implements builtin username-password authentication and signup. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/cmd/frontend/internal/auth/userpasswd#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#providerType",
              "documentation": {
                "identifier": "providerType",
                "newPage": false,
                "searchKey": "userpasswd.providerType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const providerType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst providerType = \"builtin\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/cmd/frontend/internal/auth/userpasswd#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#resetPasswordEmailTemplates",
              "documentation": {
                "identifier": "resetPasswordEmailTemplates",
                "newPage": false,
                "searchKey": "userpasswd.resetPasswordEmailTemplates",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var resetPasswordEmailTemplates"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar resetPasswordEmailTemplates = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#setPasswordEmailTemplates",
              "documentation": {
                "identifier": "setPasswordEmailTemplates",
                "newPage": false,
                "searchKey": "userpasswd.setPasswordEmailTemplates",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var setPasswordEmailTemplates"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar setPasswordEmailTemplates = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/cmd/frontend/internal/auth/userpasswd#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#credentials",
              "documentation": {
                "identifier": "credentials",
                "newPage": false,
                "searchKey": "userpasswd.credentials",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type credentials struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype credentials struct {\n\tEmail           string `json:\"email\"`\n\tUsername        string `json:\"username\"`\n\tPassword        string `json:\"password\"`\n\tAnonymousUserID string `json:\"anonymousUserId\"`\n\tFirstSourceURL  string `json:\"firstSourceUrl\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#provider",
              "documentation": {
                "identifier": "provider",
                "newPage": false,
                "searchKey": "userpasswd.provider",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type provider struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype provider struct {\n\tc *schema.BuiltinAuthProvider\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/cmd/frontend/internal/auth/userpasswd#provider.ConfigID",
                    "documentation": {
                      "identifier": "provider.ConfigID",
                      "newPage": false,
                      "searchKey": "userpasswd.provider.ConfigID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (provider) ConfigID() providers.ConfigID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (provider) ConfigID() providers.ConfigID\n```\n\nConfigID implements providers.Provider. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/internal/auth/userpasswd#provider.Config",
                    "documentation": {
                      "identifier": "provider.Config",
                      "newPage": false,
                      "searchKey": "userpasswd.provider.Config",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p provider) Config() schema.AuthProviders"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p provider) Config() schema.AuthProviders\n```\n\nConfig implements providers.Provider. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/internal/auth/userpasswd#provider.Refresh",
                    "documentation": {
                      "identifier": "provider.Refresh",
                      "newPage": false,
                      "searchKey": "userpasswd.provider.Refresh",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p provider) Refresh(context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p provider) Refresh(context.Context) error\n```\n\nRefresh implements providers.Provider. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/cmd/frontend/internal/auth/userpasswd#provider.CachedInfo",
                    "documentation": {
                      "identifier": "provider.CachedInfo",
                      "newPage": false,
                      "searchKey": "userpasswd.provider.CachedInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p provider) CachedInfo() *providers.Info"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p provider) CachedInfo() *providers.Info\n```\n\nCachedInfo implements providers.Provider. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/cmd/frontend/internal/auth/userpasswd#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#ResetPasswordEnabled",
              "documentation": {
                "identifier": "ResetPasswordEnabled",
                "newPage": false,
                "searchKey": "userpasswd.ResetPasswordEnabled",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ResetPasswordEnabled() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ResetPasswordEnabled() bool\n```\n\nResetPasswordEnabled reports whether the reset-password flow is enabled (per site config). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#getProviderConfig",
              "documentation": {
                "identifier": "getProviderConfig",
                "newPage": false,
                "searchKey": "userpasswd.getProviderConfig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getProviderConfig() (pc *schema.BuiltinAuthProvider, multiple bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getProviderConfig() (pc *schema.BuiltinAuthProvider, multiple bool)\n```\n\ngetProviderConfig returns the builtin auth provider config. At most 1 can be specified in site config; if there is more than 1, it returns multiple == true (which the caller should handle by returning an error and refusing to proceed with auth). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#handleEnabledCheck",
              "documentation": {
                "identifier": "handleEnabledCheck",
                "newPage": false,
                "searchKey": "userpasswd.handleEnabledCheck",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func handleEnabledCheck(w http.ResponseWriter) (handled bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc handleEnabledCheck(w http.ResponseWriter) (handled bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "userpasswd.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#validateConfig",
              "documentation": {
                "identifier": "validateConfig",
                "newPage": false,
                "searchKey": "userpasswd.validateConfig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func validateConfig(c conf.Unified) (problems conf.Problems)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc validateConfig(c conf.Unified) (problems conf.Problems)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "userpasswd.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\nWatch for configuration changes related to the builtin auth provider. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#HandleSignUp",
              "documentation": {
                "identifier": "HandleSignUp",
                "newPage": false,
                "searchKey": "userpasswd.HandleSignUp",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func HandleSignUp(w http.ResponseWriter, r *http.Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HandleSignUp(w http.ResponseWriter, r *http.Request)\n```\n\nHandleSignUp handles submission of the user signup form. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#HandleSiteInit",
              "documentation": {
                "identifier": "HandleSiteInit",
                "newPage": false,
                "searchKey": "userpasswd.HandleSiteInit",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func HandleSiteInit(w http.ResponseWriter, r *http.Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HandleSiteInit(w http.ResponseWriter, r *http.Request)\n```\n\nHandleSiteInit handles submission of the site initialization form, where the initial site admin user is created. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#checkEmailAbuse",
              "documentation": {
                "identifier": "checkEmailAbuse",
                "newPage": false,
                "searchKey": "userpasswd.checkEmailAbuse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkEmailAbuse(ctx context.Context, addr string) (abused bool, reason string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkEmailAbuse(ctx context.Context, addr string) (abused bool, reason string, err error)\n```\n\ncheckEmailAbuse performs abuse prevention checks to prevent email abuse, i.e. users using emails of other people whom they want to annoy. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#handleSignUp",
              "documentation": {
                "identifier": "handleSignUp",
                "newPage": false,
                "searchKey": "userpasswd.handleSignUp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func handleSignUp(w http.ResponseWriter, r *http.Request, failIfNewUserIsNotInitialSiteAdmin bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc handleSignUp(w http.ResponseWriter, r *http.Request, failIfNewUserIsNotInitialSiteAdmin bool)\n```\n\ndoServeSignUp is called to create a new user account. It is called for the normal user signup process (where a non-admin user is created) and for the site initialization process (where the initial site admin user account is created). \n\n🚨 SECURITY: Any change to this function could introduce security exploits and/or break sign up / initial admin account creation. Be careful. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#getByEmailOrUsername",
              "documentation": {
                "identifier": "getByEmailOrUsername",
                "newPage": false,
                "searchKey": "userpasswd.getByEmailOrUsername",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getByEmailOrUsername(ctx context.Context, emailOrUsername string) (*types.User, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getByEmailOrUsername(ctx context.Context, emailOrUsername string) (*types.User, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#HandleSignIn",
              "documentation": {
                "identifier": "HandleSignIn",
                "newPage": false,
                "searchKey": "userpasswd.HandleSignIn",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func HandleSignIn(w http.ResponseWriter, r *http.Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HandleSignIn(w http.ResponseWriter, r *http.Request)\n```\n\nHandleSignIn accepts a POST containing username-password credentials and authenticates the current session if the credentials are valid. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#HandleCheckUsernameTaken",
              "documentation": {
                "identifier": "HandleCheckUsernameTaken",
                "newPage": false,
                "searchKey": "userpasswd.HandleCheckUsernameTaken",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func HandleCheckUsernameTaken(db dbutil.DB) func(w http.ResponseWriter, r *http.Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HandleCheckUsernameTaken(db dbutil.DB) func(w http.ResponseWriter, r *http.Request)\n```\n\nCheck availability of username for signup form \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#httpLogAndError",
              "documentation": {
                "identifier": "httpLogAndError",
                "newPage": false,
                "searchKey": "userpasswd.httpLogAndError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func httpLogAndError(w http.ResponseWriter, msg string, code int, errArgs ...interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc httpLogAndError(w http.ResponseWriter, msg string, code int, errArgs ...interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#HandleResetPasswordInit",
              "documentation": {
                "identifier": "HandleResetPasswordInit",
                "newPage": false,
                "searchKey": "userpasswd.HandleResetPasswordInit",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func HandleResetPasswordInit(w http.ResponseWriter, r *http.Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HandleResetPasswordInit(w http.ResponseWriter, r *http.Request)\n```\n\nHandleResetPasswordInit initiates the builtin-auth password reset flow by sending a password-reset email. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#HandleSetPasswordEmail",
              "documentation": {
                "identifier": "HandleSetPasswordEmail",
                "newPage": false,
                "searchKey": "userpasswd.HandleSetPasswordEmail",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func HandleSetPasswordEmail(ctx context.Context, id int32) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HandleSetPasswordEmail(ctx context.Context, id int32) (string, error)\n```\n\nHandleSetPasswordEmail sends the password reset email directly to the user for users created by site admins. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#HandleResetPasswordCode",
              "documentation": {
                "identifier": "HandleResetPasswordCode",
                "newPage": false,
                "searchKey": "userpasswd.HandleResetPasswordCode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func HandleResetPasswordCode(w http.ResponseWriter, r *http.Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HandleResetPasswordCode(w http.ResponseWriter, r *http.Request)\n```\n\nHandleResetPasswordCode resets the password if the correct code is provided. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#handleNotAuthenticatedCheck",
              "documentation": {
                "identifier": "handleNotAuthenticatedCheck",
                "newPage": false,
                "searchKey": "userpasswd.handleNotAuthenticatedCheck",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func handleNotAuthenticatedCheck(w http.ResponseWriter, r *http.Request) (handled bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc handleNotAuthenticatedCheck(w http.ResponseWriter, r *http.Request) (handled bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#TestValidateCustom",
              "documentation": {
                "identifier": "TestValidateCustom",
                "newPage": false,
                "searchKey": "userpasswd.TestValidateCustom",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValidateCustom(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValidateCustom(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#TestCheckEmailAbuse",
              "documentation": {
                "identifier": "TestCheckEmailAbuse",
                "newPage": false,
                "searchKey": "userpasswd.TestCheckEmailAbuse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCheckEmailAbuse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCheckEmailAbuse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/cmd/frontend/internal/auth/userpasswd#TestHandleSetPasswordEmail",
              "documentation": {
                "identifier": "TestHandleSetPasswordEmail",
                "newPage": false,
                "searchKey": "userpasswd.TestHandleSetPasswordEmail",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHandleSetPasswordEmail(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHandleSetPasswordEmail(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
