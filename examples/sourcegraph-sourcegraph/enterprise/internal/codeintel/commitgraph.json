{
  "pathID": "/enterprise/internal/codeintel/commitgraph",
  "documentation": {
    "identifier": "commitgraph",
    "newPage": true,
    "searchKey": "enterprise/internal/codeintel/commitgraph",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package commitgraph"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/internal/codeintel/commitgraph#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#CommitGraphView",
              "documentation": {
                "identifier": "CommitGraphView",
                "newPage": false,
                "searchKey": "commitgraph.CommitGraphView",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CommitGraphView struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CommitGraphView struct {\n\t// Meta is a map from commit to metadata on each visible upload from that\n\t// commit's location in the commit graph.\n\tMeta map[string][]UploadMeta\n\n\t// Tokens is a map from upload identifiers to a hash of their root an indexer\n\t// field. Equality of this token for two uploads means that they are able to\n\t// \"shadow\" one another.\n\tTokens map[int]string\n}\n```\n\nCommitGraphView is a space-efficient view of a commit graph decorated with the set of uploads visible at every commit. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/commitgraph#NewCommitGraphView",
                    "documentation": {
                      "identifier": "NewCommitGraphView",
                      "newPage": false,
                      "searchKey": "commitgraph.NewCommitGraphView",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewCommitGraphView() *CommitGraphView"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewCommitGraphView() *CommitGraphView\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/commitgraph#readBenchmarkCommitGraphView",
                    "documentation": {
                      "identifier": "readBenchmarkCommitGraphView",
                      "newPage": false,
                      "searchKey": "commitgraph.readBenchmarkCommitGraphView",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func readBenchmarkCommitGraphView() (*CommitGraphView, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc readBenchmarkCommitGraphView() (*CommitGraphView, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/commitgraph#CommitGraphView.Add",
                    "documentation": {
                      "identifier": "CommitGraphView.Add",
                      "newPage": false,
                      "searchKey": "commitgraph.CommitGraphView.Add",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *CommitGraphView) Add(meta UploadMeta, commit, token string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *CommitGraphView) Add(meta UploadMeta, commit, token string)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#Envelope",
              "documentation": {
                "identifier": "Envelope",
                "newPage": false,
                "searchKey": "commitgraph.Envelope",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Envelope struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Envelope struct {\n\tUploads *VisibilityRelationship\n\tLinks   *LinkRelationship\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#Graph",
              "documentation": {
                "identifier": "Graph",
                "newPage": false,
                "searchKey": "commitgraph.Graph",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Graph struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Graph struct {\n\tcommitGraphView *CommitGraphView\n\tgraph           map[string][]string\n\tcommits         []string\n\tancestorUploads map[string]map[string]UploadMeta\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/commitgraph#NewGraph",
                    "documentation": {
                      "identifier": "NewGraph",
                      "newPage": false,
                      "searchKey": "commitgraph.NewGraph",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewGraph(commitGraph *gitserver.CommitGraph, commitGraphView *CommitGraphView) *Graph"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewGraph(commitGraph *gitserver.CommitGraph, commitGraphView *CommitGraphView) *Graph\n```\n\nNewGraph creates a commit graph decorated with the set of uploads visible from that commit based on the given commit graph and complete set of LSIF upload metadata. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/commitgraph#Graph.Gather",
                    "documentation": {
                      "identifier": "Graph.Gather",
                      "newPage": false,
                      "searchKey": "commitgraph.Graph.Gather",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *Graph) Gather() (uploads map[string][]UploadMeta, links map[string]LinkRelationship)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *Graph) Gather() (uploads map[string][]UploadMeta, links map[string]LinkRelationship)\n```\n\nGather reads the graph's stream to completion and returns a map of the values. This method is only used for convenience and testing and should not be used in a hot path. It can be VERY memory intensive in production to have a reference to each commit's upload metadata concurrently. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/commitgraph#Graph.Stream",
                    "documentation": {
                      "identifier": "Graph.Stream",
                      "newPage": false,
                      "searchKey": "commitgraph.Graph.Stream",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *Graph) Stream() <-chan Envelope"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *Graph) Stream() <-chan Envelope\n```\n\nStream returns a channel of envelope values which indicate either the set of visible uploads at a particular commit, or the nearest neighbors at a particular commit, depending on the value within the envelope. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/commitgraph#Graph.UploadsVisibleAtCommit",
                    "documentation": {
                      "identifier": "Graph.UploadsVisibleAtCommit",
                      "newPage": false,
                      "searchKey": "commitgraph.Graph.UploadsVisibleAtCommit",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *Graph) UploadsVisibleAtCommit(commit string) []UploadMeta"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *Graph) UploadsVisibleAtCommit(commit string) []UploadMeta\n```\n\nUploadsVisibleAtCommit returns the set of uploads that are visible from the given commit. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#LinkRelationship",
              "documentation": {
                "identifier": "LinkRelationship",
                "newPage": false,
                "searchKey": "commitgraph.LinkRelationship",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LinkRelationship struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LinkRelationship struct {\n\tCommit         string\n\tAncestorCommit string\n\tDistance       uint32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#UploadMeta",
              "documentation": {
                "identifier": "UploadMeta",
                "newPage": false,
                "searchKey": "commitgraph.UploadMeta",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UploadMeta struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UploadMeta struct {\n\tUploadID int\n\tDistance uint32\n}\n```\n\nUploadMeta represents the visibility of an LSIF upload from a particular location on a repository's commit graph. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#VisibilityRelationship",
              "documentation": {
                "identifier": "VisibilityRelationship",
                "newPage": false,
                "searchKey": "commitgraph.VisibilityRelationship",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type VisibilityRelationship struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype VisibilityRelationship struct {\n\tCommit  string\n\tUploads []UploadMeta\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/codeintel/commitgraph#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#BenchmarkCalculateVisibleUploads",
              "documentation": {
                "identifier": "BenchmarkCalculateVisibleUploads",
                "newPage": false,
                "searchKey": "commitgraph.BenchmarkCalculateVisibleUploads",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCalculateVisibleUploads(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCalculateVisibleUploads(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#TestCalculateVisibleUploads",
              "documentation": {
                "identifier": "TestCalculateVisibleUploads",
                "newPage": false,
                "searchKey": "commitgraph.TestCalculateVisibleUploads",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCalculateVisibleUploads(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCalculateVisibleUploads(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#TestCalculateVisibleUploadsAlternateCommitGraph",
              "documentation": {
                "identifier": "TestCalculateVisibleUploadsAlternateCommitGraph",
                "newPage": false,
                "searchKey": "commitgraph.TestCalculateVisibleUploadsAlternateCommitGraph",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCalculateVisibleUploadsAlternateCommitGraph(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCalculateVisibleUploadsAlternateCommitGraph(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#adjustVisibleUploads",
              "documentation": {
                "identifier": "adjustVisibleUploads",
                "newPage": false,
                "searchKey": "commitgraph.adjustVisibleUploads",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func adjustVisibleUploads(ancestorVisibleUploads map[string]UploadMeta, ancestorDistance uint32) []UploadMeta"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc adjustVisibleUploads(ancestorVisibleUploads map[string]UploadMeta, ancestorDistance uint32) []UploadMeta\n```\n\nadjustVisibleUploads returns a copy of the given uploads map with the distance adjusted by the given amount. This returns the uploads \"inherited\" from a the nearest ancestor with commit data. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#makeTestGraph",
              "documentation": {
                "identifier": "makeTestGraph",
                "newPage": false,
                "searchKey": "commitgraph.makeTestGraph",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeTestGraph(commitGraph *gitserver.CommitGraph, commitGraphView *CommitGraphView) (uploads map[string][]UploadMeta, links map[string]LinkRelationship)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeTestGraph(commitGraph *gitserver.CommitGraph, commitGraphView *CommitGraphView) (uploads map[string][]UploadMeta, links map[string]LinkRelationship)\n```\n\nmakeTestGraph calls Gather on a new graph then sorts the uploads deterministically for easier comparison. Order of the upload list is not relevant to production flows. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#populateUploadsByTraversal",
              "documentation": {
                "identifier": "populateUploadsByTraversal",
                "newPage": false,
                "searchKey": "commitgraph.populateUploadsByTraversal",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func populateUploadsByTraversal(graph map[string][]string, order []string, commitGraphView *CommitGraphView) map[string]map[string]UploadMeta"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc populateUploadsByTraversal(graph map[string][]string, order []string, commitGraphView *CommitGraphView) map[string]map[string]UploadMeta\n```\n\npopulateUploadsByTraversal populates a map from select commits (see below) to another map from tokens to upload meta value. Select commits are any commits that satisfy one of the following properties: \n\n```\n1. They define an upload,\n2. They have multiple parents, or\n3. They have a child with multiple parents.\n\n```\nFor all remaining commits, we can easily re-calculate the visible uploads without storing them. All such commits have a single, unambiguous path to an ancestor that does store data. These commits have the same visibility (the descendant is just farther away). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#populateUploadsForCommit",
              "documentation": {
                "identifier": "populateUploadsForCommit",
                "newPage": false,
                "searchKey": "commitgraph.populateUploadsForCommit",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func populateUploadsForCommit(uploads map[string]map[string]UploadMeta, ancestors []string, distance uint32, commitGraphView *CommitGraphView, commit string) map[string]UploadMeta"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc populateUploadsForCommit(uploads map[string]map[string]UploadMeta, ancestors []string, distance uint32, commitGraphView *CommitGraphView, commit string) map[string]UploadMeta\n```\n\npopulateUploadsForCommit populates the items stored in the given mapping for the given commit. The uploads considered visible for a commit include: \n\n```\n1. the set of uploads defined on that commit, and\n2. the set of uploads visible from the ancestors with the minimum distance\n   for equivalent root and indexer values.\n\n```\nIf two ancestors have different uploads visible for the same root and indexer, the one with the smaller distance to the source commit will shadow the other. Similarly, If an ancestor and the child commit define uploads for the same root and indexer pair, the upload defined on the commit will shadow the upload defined on the ancestor. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#readBenchmarkCommitGraph",
              "documentation": {
                "identifier": "readBenchmarkCommitGraph",
                "newPage": false,
                "searchKey": "commitgraph.readBenchmarkCommitGraph",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readBenchmarkCommitGraph() (*gitserver.CommitGraph, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readBenchmarkCommitGraph() (*gitserver.CommitGraph, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#readBenchmarkFile",
              "documentation": {
                "identifier": "readBenchmarkFile",
                "newPage": false,
                "searchKey": "commitgraph.readBenchmarkFile",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readBenchmarkFile(path string) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readBenchmarkFile(path string) ([]byte, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#replaces",
              "documentation": {
                "identifier": "replaces",
                "newPage": false,
                "searchKey": "commitgraph.replaces",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func replaces(upload1, upload2 UploadMeta) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc replaces(upload1, upload2 UploadMeta) bool\n```\n\nreplaces returns true if upload1 has a smaller distance than upload2. Ties are broken by the minimum upload identifier to remain determinstic. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#reverseGraph",
              "documentation": {
                "identifier": "reverseGraph",
                "newPage": false,
                "searchKey": "commitgraph.reverseGraph",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func reverseGraph(graph map[string][]string) map[string][]string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc reverseGraph(graph map[string][]string) map[string][]string\n```\n\nreverseGraph returns the reverse of the given graph by flipping all the edges. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#traverseForCommit",
              "documentation": {
                "identifier": "traverseForCommit",
                "newPage": false,
                "searchKey": "commitgraph.traverseForCommit",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func traverseForCommit(graph map[string][]string, uploads map[string]map[string]UploadMeta, commit string) (string, uint32, bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc traverseForCommit(graph map[string][]string, uploads map[string]map[string]UploadMeta, commit string) (string, uint32, bool)\n```\n\ntraverseForCommit returns the commit in the given uploads map matching the first ancestor in the graph with a value present in the map. The distance in the graph between the original commit and the ancestor is also returned. \n\nNOTE: We assume that each commit with multiple parents have been assigned data while walking the graph in topological order. If that is not the case, one parent will be chosen arbitrarily. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/commitgraph#traverseForUploads",
              "documentation": {
                "identifier": "traverseForUploads",
                "newPage": false,
                "searchKey": "commitgraph.traverseForUploads",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func traverseForUploads(graph map[string][]string, uploads map[string]map[string]UploadMeta, commit string) (map[string]UploadMeta, uint32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc traverseForUploads(graph map[string][]string, uploads map[string]map[string]UploadMeta, commit string) (map[string]UploadMeta, uint32)\n```\n\ntraverseForUploads returns the value in the given uploads map whose key matches the first ancestor in the graph with a value present in the map. The distance in the graph between the original commit and the ancestor is also returned. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
