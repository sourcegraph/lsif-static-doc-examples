{
  "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer",
  "documentation": {
    "identifier": "enqueuer",
    "newPage": true,
    "searchKey": "enterprise/internal/codeintel/autoindex/enqueuer",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package enqueuer"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitHubScheme",
              "documentation": {
                "identifier": "GitHubScheme",
                "newPage": false,
                "searchKey": "enqueuer.GitHubScheme",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const GitHubScheme"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst GitHubScheme = \"https://\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#defaultMaxJobsPerCommit",
              "documentation": {
                "identifier": "defaultMaxJobsPerCommit",
                "newPage": false,
                "searchKey": "enqueuer.defaultMaxJobsPerCommit",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const defaultMaxJobsPerCommit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst defaultMaxJobsPerCommit = 25\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#goVersionPattern",
              "documentation": {
                "identifier": "goVersionPattern",
                "newPage": false,
                "searchKey": "enqueuer.goVersionPattern",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var goVersionPattern"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar goVersionPattern = lazyregexp.New(`^v?[\\d\\.]+-([a-f0-9]+)`)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#yamlIndexConfiguration",
              "documentation": {
                "identifier": "yamlIndexConfiguration",
                "newPage": false,
                "searchKey": "enqueuer.yamlIndexConfiguration",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var yamlIndexConfiguration"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar yamlIndexConfiguration = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStore",
              "documentation": {
                "identifier": "DBStore",
                "newPage": false,
                "searchKey": "enqueuer.DBStore",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStore interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStore interface {\n\tbasestore.ShareableStore\n\n\tHandle() *basestore.TransactableHandle\n\tTransact(ctx context.Context) (DBStore, error)\n\tDone(err error) error\n\n\tDirtyRepositories(ctx context.Context) (map[int]int, error)\n\tIsQueued(ctx context.Context, repositoryID int, commit string) (bool, error)\n\tInsertIndex(ctx context.Context, index dbstore.Index) (int, error)\n\tGetRepositoriesWithIndexConfiguration(ctx context.Context) ([]int, error)\n\tGetIndexConfigurationByRepositoryID(ctx context.Context, repositoryID int) (dbstore.IndexConfiguration, bool, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDirtyRepositoriesFunc",
              "documentation": {
                "identifier": "DBStoreDirtyRepositoriesFunc",
                "newPage": false,
                "searchKey": "enqueuer.DBStoreDirtyRepositoriesFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDirtyRepositoriesFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDirtyRepositoriesFunc struct {\n\tdefaultHook func(context.Context) (map[int]int, error)\n\thooks       []func(context.Context) (map[int]int, error)\n\thistory     []DBStoreDirtyRepositoriesFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreDirtyRepositoriesFunc describes the behavior when the DirtyRepositories method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDirtyRepositoriesFunc.History",
                    "documentation": {
                      "identifier": "DBStoreDirtyRepositoriesFunc.History",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreDirtyRepositoriesFunc.History",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDirtyRepositoriesFunc) History() []DBStoreDirtyRepositoriesFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDirtyRepositoriesFunc) History() []DBStoreDirtyRepositoriesFuncCall\n```\n\nHistory returns a sequence of DBStoreDirtyRepositoriesFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDirtyRepositoriesFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreDirtyRepositoriesFunc.PushHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreDirtyRepositoriesFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDirtyRepositoriesFunc) PushHook(hook func(context.Context) (map[int]int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDirtyRepositoriesFunc) PushHook(hook func(context.Context) (map[int]int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the DirtyRepositories method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDirtyRepositoriesFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreDirtyRepositoriesFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreDirtyRepositoriesFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDirtyRepositoriesFunc) PushReturn(r0 map[int]int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDirtyRepositoriesFunc) PushReturn(r0 map[int]int, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDirtyRepositoriesFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreDirtyRepositoriesFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreDirtyRepositoriesFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDirtyRepositoriesFunc) SetDefaultHook(hook func(context.Context) (map[int]int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDirtyRepositoriesFunc) SetDefaultHook(hook func(context.Context) (map[int]int, error))\n```\n\nSetDefaultHook sets function that is called when the DirtyRepositories method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDirtyRepositoriesFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreDirtyRepositoriesFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreDirtyRepositoriesFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDirtyRepositoriesFunc) SetDefaultReturn(r0 map[int]int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDirtyRepositoriesFunc) SetDefaultReturn(r0 map[int]int, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDirtyRepositoriesFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreDirtyRepositoriesFunc.appendCall",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreDirtyRepositoriesFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDirtyRepositoriesFunc) appendCall(r0 DBStoreDirtyRepositoriesFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDirtyRepositoriesFunc) appendCall(r0 DBStoreDirtyRepositoriesFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDirtyRepositoriesFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreDirtyRepositoriesFunc.nextHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreDirtyRepositoriesFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDirtyRepositoriesFunc) nextHook() func(context.Context) (map[int]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDirtyRepositoriesFunc) nextHook() func(context.Context) (map[int]int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDirtyRepositoriesFuncCall",
              "documentation": {
                "identifier": "DBStoreDirtyRepositoriesFuncCall",
                "newPage": false,
                "searchKey": "enqueuer.DBStoreDirtyRepositoriesFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDirtyRepositoriesFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDirtyRepositoriesFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 map[int]int\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreDirtyRepositoriesFuncCall is an object that describes an invocation of method DirtyRepositories on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDirtyRepositoriesFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreDirtyRepositoriesFuncCall.Args",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreDirtyRepositoriesFuncCall.Args",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDirtyRepositoriesFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDirtyRepositoriesFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDirtyRepositoriesFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreDirtyRepositoriesFuncCall.Results",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreDirtyRepositoriesFuncCall.Results",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDirtyRepositoriesFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDirtyRepositoriesFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDoneFunc",
              "documentation": {
                "identifier": "DBStoreDoneFunc",
                "newPage": false,
                "searchKey": "enqueuer.DBStoreDoneFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDoneFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDoneFunc struct {\n\tdefaultHook func(error) error\n\thooks       []func(error) error\n\thistory     []DBStoreDoneFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreDoneFunc describes the behavior when the Done method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDoneFunc.History",
                    "documentation": {
                      "identifier": "DBStoreDoneFunc.History",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreDoneFunc.History",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDoneFunc) History() []DBStoreDoneFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDoneFunc) History() []DBStoreDoneFuncCall\n```\n\nHistory returns a sequence of DBStoreDoneFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDoneFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreDoneFunc.PushHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreDoneFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDoneFunc) PushHook(hook func(error) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDoneFunc) PushHook(hook func(error) error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Done method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDoneFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreDoneFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreDoneFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDoneFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDoneFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDoneFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreDoneFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreDoneFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDoneFunc) SetDefaultHook(hook func(error) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDoneFunc) SetDefaultHook(hook func(error) error)\n```\n\nSetDefaultHook sets function that is called when the Done method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDoneFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreDoneFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreDoneFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDoneFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDoneFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDoneFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreDoneFunc.appendCall",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreDoneFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDoneFunc) appendCall(r0 DBStoreDoneFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDoneFunc) appendCall(r0 DBStoreDoneFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDoneFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreDoneFunc.nextHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreDoneFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDoneFunc) nextHook() func(error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDoneFunc) nextHook() func(error) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDoneFuncCall",
              "documentation": {
                "identifier": "DBStoreDoneFuncCall",
                "newPage": false,
                "searchKey": "enqueuer.DBStoreDoneFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDoneFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDoneFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 error\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nDBStoreDoneFuncCall is an object that describes an invocation of method Done on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDoneFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreDoneFuncCall.Args",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreDoneFuncCall.Args",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDoneFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDoneFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreDoneFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreDoneFuncCall.Results",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreDoneFuncCall.Results",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDoneFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDoneFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetIndexConfigurationByRepositoryIDFunc",
              "documentation": {
                "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFunc",
                "newPage": false,
                "searchKey": "enqueuer.DBStoreGetIndexConfigurationByRepositoryIDFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetIndexConfigurationByRepositoryIDFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetIndexConfigurationByRepositoryIDFunc struct {\n\tdefaultHook func(context.Context, int) (dbstore.IndexConfiguration, bool, error)\n\thooks       []func(context.Context, int) (dbstore.IndexConfiguration, bool, error)\n\thistory     []DBStoreGetIndexConfigurationByRepositoryIDFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreGetIndexConfigurationByRepositoryIDFunc describes the behavior when the GetIndexConfigurationByRepositoryID method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetIndexConfigurationByRepositoryIDFunc.History",
                    "documentation": {
                      "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFunc.History",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreGetIndexConfigurationByRepositoryIDFunc.History",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) History() []DBStoreGetIndexConfigurationByRepositoryIDFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) History() []DBStoreGetIndexConfigurationByRepositoryIDFuncCall\n```\n\nHistory returns a sequence of DBStoreGetIndexConfigurationByRepositoryIDFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetIndexConfigurationByRepositoryIDFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFunc.PushHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreGetIndexConfigurationByRepositoryIDFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) PushHook(hook func(context.Context, int) (dbstore.IndexConfiguration, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) PushHook(hook func(context.Context, int) (dbstore.IndexConfiguration, bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetIndexConfigurationByRepositoryID method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetIndexConfigurationByRepositoryIDFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreGetIndexConfigurationByRepositoryIDFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) PushReturn(r0 dbstore.IndexConfiguration, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) PushReturn(r0 dbstore.IndexConfiguration, r1 bool, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetIndexConfigurationByRepositoryIDFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreGetIndexConfigurationByRepositoryIDFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.IndexConfiguration, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.IndexConfiguration, bool, error))\n```\n\nSetDefaultHook sets function that is called when the GetIndexConfigurationByRepositoryID method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetIndexConfigurationByRepositoryIDFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreGetIndexConfigurationByRepositoryIDFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) SetDefaultReturn(r0 dbstore.IndexConfiguration, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) SetDefaultReturn(r0 dbstore.IndexConfiguration, r1 bool, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetIndexConfigurationByRepositoryIDFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFunc.appendCall",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreGetIndexConfigurationByRepositoryIDFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) appendCall(r0 DBStoreGetIndexConfigurationByRepositoryIDFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) appendCall(r0 DBStoreGetIndexConfigurationByRepositoryIDFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetIndexConfigurationByRepositoryIDFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFunc.nextHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreGetIndexConfigurationByRepositoryIDFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) nextHook() func(context.Context, int) (dbstore.IndexConfiguration, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) nextHook() func(context.Context, int) (dbstore.IndexConfiguration, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetIndexConfigurationByRepositoryIDFuncCall",
              "documentation": {
                "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFuncCall",
                "newPage": false,
                "searchKey": "enqueuer.DBStoreGetIndexConfigurationByRepositoryIDFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetIndexConfigurationByRepositoryIDFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetIndexConfigurationByRepositoryIDFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 dbstore.IndexConfiguration\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 bool\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nDBStoreGetIndexConfigurationByRepositoryIDFuncCall is an object that describes an invocation of method GetIndexConfigurationByRepositoryID on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetIndexConfigurationByRepositoryIDFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFuncCall.Args",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreGetIndexConfigurationByRepositoryIDFuncCall.Args",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetIndexConfigurationByRepositoryIDFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetIndexConfigurationByRepositoryIDFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetIndexConfigurationByRepositoryIDFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFuncCall.Results",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreGetIndexConfigurationByRepositoryIDFuncCall.Results",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetIndexConfigurationByRepositoryIDFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetIndexConfigurationByRepositoryIDFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetRepositoriesWithIndexConfigurationFunc",
              "documentation": {
                "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFunc",
                "newPage": false,
                "searchKey": "enqueuer.DBStoreGetRepositoriesWithIndexConfigurationFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetRepositoriesWithIndexConfigurationFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetRepositoriesWithIndexConfigurationFunc struct {\n\tdefaultHook func(context.Context) ([]int, error)\n\thooks       []func(context.Context) ([]int, error)\n\thistory     []DBStoreGetRepositoriesWithIndexConfigurationFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreGetRepositoriesWithIndexConfigurationFunc describes the behavior when the GetRepositoriesWithIndexConfiguration method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetRepositoriesWithIndexConfigurationFunc.History",
                    "documentation": {
                      "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFunc.History",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreGetRepositoriesWithIndexConfigurationFunc.History",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) History() []DBStoreGetRepositoriesWithIndexConfigurationFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) History() []DBStoreGetRepositoriesWithIndexConfigurationFuncCall\n```\n\nHistory returns a sequence of DBStoreGetRepositoriesWithIndexConfigurationFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetRepositoriesWithIndexConfigurationFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFunc.PushHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreGetRepositoriesWithIndexConfigurationFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) PushHook(hook func(context.Context) ([]int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) PushHook(hook func(context.Context) ([]int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetRepositoriesWithIndexConfiguration method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetRepositoriesWithIndexConfigurationFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreGetRepositoriesWithIndexConfigurationFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) PushReturn(r0 []int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) PushReturn(r0 []int, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetRepositoriesWithIndexConfigurationFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreGetRepositoriesWithIndexConfigurationFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) SetDefaultHook(hook func(context.Context) ([]int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) SetDefaultHook(hook func(context.Context) ([]int, error))\n```\n\nSetDefaultHook sets function that is called when the GetRepositoriesWithIndexConfiguration method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetRepositoriesWithIndexConfigurationFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreGetRepositoriesWithIndexConfigurationFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) SetDefaultReturn(r0 []int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) SetDefaultReturn(r0 []int, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetRepositoriesWithIndexConfigurationFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFunc.appendCall",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreGetRepositoriesWithIndexConfigurationFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) appendCall(r0 DBStoreGetRepositoriesWithIndexConfigurationFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) appendCall(r0 DBStoreGetRepositoriesWithIndexConfigurationFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetRepositoriesWithIndexConfigurationFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFunc.nextHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreGetRepositoriesWithIndexConfigurationFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) nextHook() func(context.Context) ([]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) nextHook() func(context.Context) ([]int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetRepositoriesWithIndexConfigurationFuncCall",
              "documentation": {
                "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFuncCall",
                "newPage": false,
                "searchKey": "enqueuer.DBStoreGetRepositoriesWithIndexConfigurationFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetRepositoriesWithIndexConfigurationFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetRepositoriesWithIndexConfigurationFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []int\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreGetRepositoriesWithIndexConfigurationFuncCall is an object that describes an invocation of method GetRepositoriesWithIndexConfiguration on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetRepositoriesWithIndexConfigurationFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFuncCall.Args",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreGetRepositoriesWithIndexConfigurationFuncCall.Args",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetRepositoriesWithIndexConfigurationFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetRepositoriesWithIndexConfigurationFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreGetRepositoriesWithIndexConfigurationFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFuncCall.Results",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreGetRepositoriesWithIndexConfigurationFuncCall.Results",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetRepositoriesWithIndexConfigurationFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetRepositoriesWithIndexConfigurationFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreHandleFunc",
              "documentation": {
                "identifier": "DBStoreHandleFunc",
                "newPage": false,
                "searchKey": "enqueuer.DBStoreHandleFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreHandleFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreHandleFunc struct {\n\tdefaultHook func() *basestore.TransactableHandle\n\thooks       []func() *basestore.TransactableHandle\n\thistory     []DBStoreHandleFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreHandleFunc describes the behavior when the Handle method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreHandleFunc.History",
                    "documentation": {
                      "identifier": "DBStoreHandleFunc.History",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreHandleFunc.History",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHandleFunc) History() []DBStoreHandleFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHandleFunc) History() []DBStoreHandleFuncCall\n```\n\nHistory returns a sequence of DBStoreHandleFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreHandleFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreHandleFunc.PushHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreHandleFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Handle method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreHandleFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreHandleFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreHandleFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreHandleFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreHandleFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreHandleFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle)\n```\n\nSetDefaultHook sets function that is called when the Handle method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreHandleFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreHandleFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreHandleFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreHandleFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreHandleFunc.appendCall",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreHandleFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHandleFunc) appendCall(r0 DBStoreHandleFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHandleFunc) appendCall(r0 DBStoreHandleFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreHandleFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreHandleFunc.nextHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreHandleFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHandleFunc) nextHook() func() *basestore.TransactableHandle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHandleFunc) nextHook() func() *basestore.TransactableHandle\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreHandleFuncCall",
              "documentation": {
                "identifier": "DBStoreHandleFuncCall",
                "newPage": false,
                "searchKey": "enqueuer.DBStoreHandleFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreHandleFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreHandleFuncCall struct {\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *basestore.TransactableHandle\n}\n```\n\nDBStoreHandleFuncCall is an object that describes an invocation of method Handle on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreHandleFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreHandleFuncCall.Args",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreHandleFuncCall.Args",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreHandleFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreHandleFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreHandleFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreHandleFuncCall.Results",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreHandleFuncCall.Results",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreHandleFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreHandleFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreInsertIndexFunc",
              "documentation": {
                "identifier": "DBStoreInsertIndexFunc",
                "newPage": false,
                "searchKey": "enqueuer.DBStoreInsertIndexFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreInsertIndexFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreInsertIndexFunc struct {\n\tdefaultHook func(context.Context, dbstore.Index) (int, error)\n\thooks       []func(context.Context, dbstore.Index) (int, error)\n\thistory     []DBStoreInsertIndexFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreInsertIndexFunc describes the behavior when the InsertIndex method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreInsertIndexFunc.History",
                    "documentation": {
                      "identifier": "DBStoreInsertIndexFunc.History",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreInsertIndexFunc.History",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreInsertIndexFunc) History() []DBStoreInsertIndexFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreInsertIndexFunc) History() []DBStoreInsertIndexFuncCall\n```\n\nHistory returns a sequence of DBStoreInsertIndexFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreInsertIndexFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreInsertIndexFunc.PushHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreInsertIndexFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreInsertIndexFunc) PushHook(hook func(context.Context, dbstore.Index) (int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreInsertIndexFunc) PushHook(hook func(context.Context, dbstore.Index) (int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the InsertIndex method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreInsertIndexFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreInsertIndexFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreInsertIndexFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreInsertIndexFunc) PushReturn(r0 int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreInsertIndexFunc) PushReturn(r0 int, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreInsertIndexFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreInsertIndexFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreInsertIndexFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreInsertIndexFunc) SetDefaultHook(hook func(context.Context, dbstore.Index) (int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreInsertIndexFunc) SetDefaultHook(hook func(context.Context, dbstore.Index) (int, error))\n```\n\nSetDefaultHook sets function that is called when the InsertIndex method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreInsertIndexFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreInsertIndexFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreInsertIndexFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreInsertIndexFunc) SetDefaultReturn(r0 int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreInsertIndexFunc) SetDefaultReturn(r0 int, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreInsertIndexFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreInsertIndexFunc.appendCall",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreInsertIndexFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreInsertIndexFunc) appendCall(r0 DBStoreInsertIndexFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreInsertIndexFunc) appendCall(r0 DBStoreInsertIndexFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreInsertIndexFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreInsertIndexFunc.nextHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreInsertIndexFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreInsertIndexFunc) nextHook() func(context.Context, dbstore.Index) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreInsertIndexFunc) nextHook() func(context.Context, dbstore.Index) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreInsertIndexFuncCall",
              "documentation": {
                "identifier": "DBStoreInsertIndexFuncCall",
                "newPage": false,
                "searchKey": "enqueuer.DBStoreInsertIndexFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreInsertIndexFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreInsertIndexFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 dbstore.Index\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 int\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreInsertIndexFuncCall is an object that describes an invocation of method InsertIndex on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreInsertIndexFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreInsertIndexFuncCall.Args",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreInsertIndexFuncCall.Args",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreInsertIndexFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreInsertIndexFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreInsertIndexFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreInsertIndexFuncCall.Results",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreInsertIndexFuncCall.Results",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreInsertIndexFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreInsertIndexFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreIsQueuedFunc",
              "documentation": {
                "identifier": "DBStoreIsQueuedFunc",
                "newPage": false,
                "searchKey": "enqueuer.DBStoreIsQueuedFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreIsQueuedFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreIsQueuedFunc struct {\n\tdefaultHook func(context.Context, int, string) (bool, error)\n\thooks       []func(context.Context, int, string) (bool, error)\n\thistory     []DBStoreIsQueuedFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreIsQueuedFunc describes the behavior when the IsQueued method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreIsQueuedFunc.History",
                    "documentation": {
                      "identifier": "DBStoreIsQueuedFunc.History",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreIsQueuedFunc.History",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreIsQueuedFunc) History() []DBStoreIsQueuedFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreIsQueuedFunc) History() []DBStoreIsQueuedFuncCall\n```\n\nHistory returns a sequence of DBStoreIsQueuedFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreIsQueuedFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreIsQueuedFunc.PushHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreIsQueuedFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreIsQueuedFunc) PushHook(hook func(context.Context, int, string) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreIsQueuedFunc) PushHook(hook func(context.Context, int, string) (bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the IsQueued method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreIsQueuedFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreIsQueuedFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreIsQueuedFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreIsQueuedFunc) PushReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreIsQueuedFunc) PushReturn(r0 bool, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreIsQueuedFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreIsQueuedFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreIsQueuedFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreIsQueuedFunc) SetDefaultHook(hook func(context.Context, int, string) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreIsQueuedFunc) SetDefaultHook(hook func(context.Context, int, string) (bool, error))\n```\n\nSetDefaultHook sets function that is called when the IsQueued method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreIsQueuedFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreIsQueuedFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreIsQueuedFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreIsQueuedFunc) SetDefaultReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreIsQueuedFunc) SetDefaultReturn(r0 bool, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreIsQueuedFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreIsQueuedFunc.appendCall",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreIsQueuedFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreIsQueuedFunc) appendCall(r0 DBStoreIsQueuedFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreIsQueuedFunc) appendCall(r0 DBStoreIsQueuedFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreIsQueuedFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreIsQueuedFunc.nextHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreIsQueuedFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreIsQueuedFunc) nextHook() func(context.Context, int, string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreIsQueuedFunc) nextHook() func(context.Context, int, string) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreIsQueuedFuncCall",
              "documentation": {
                "identifier": "DBStoreIsQueuedFuncCall",
                "newPage": false,
                "searchKey": "enqueuer.DBStoreIsQueuedFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreIsQueuedFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreIsQueuedFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 bool\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreIsQueuedFuncCall is an object that describes an invocation of method IsQueued on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreIsQueuedFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreIsQueuedFuncCall.Args",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreIsQueuedFuncCall.Args",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreIsQueuedFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreIsQueuedFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreIsQueuedFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreIsQueuedFuncCall.Results",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreIsQueuedFuncCall.Results",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreIsQueuedFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreIsQueuedFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreShim",
              "documentation": {
                "identifier": "DBStoreShim",
                "newPage": false,
                "searchKey": "enqueuer.DBStoreShim",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreShim struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreShim struct {\n\t*dbstore.Store\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreShim.Transact",
                    "documentation": {
                      "identifier": "DBStoreShim.Transact",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreShim.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DBStoreShim) Transact(ctx context.Context) (DBStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DBStoreShim) Transact(ctx context.Context) (DBStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreTransactFunc",
              "documentation": {
                "identifier": "DBStoreTransactFunc",
                "newPage": false,
                "searchKey": "enqueuer.DBStoreTransactFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreTransactFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreTransactFunc struct {\n\tdefaultHook func(context.Context) (DBStore, error)\n\thooks       []func(context.Context) (DBStore, error)\n\thistory     []DBStoreTransactFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreTransactFunc describes the behavior when the Transact method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreTransactFunc.History",
                    "documentation": {
                      "identifier": "DBStoreTransactFunc.History",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreTransactFunc.History",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreTransactFunc) History() []DBStoreTransactFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreTransactFunc) History() []DBStoreTransactFuncCall\n```\n\nHistory returns a sequence of DBStoreTransactFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreTransactFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreTransactFunc.PushHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreTransactFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreTransactFunc) PushHook(hook func(context.Context) (DBStore, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreTransactFunc) PushHook(hook func(context.Context) (DBStore, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Transact method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreTransactFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreTransactFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreTransactFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreTransactFunc) PushReturn(r0 DBStore, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreTransactFunc) PushReturn(r0 DBStore, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreTransactFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreTransactFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreTransactFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreTransactFunc) SetDefaultHook(hook func(context.Context) (DBStore, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreTransactFunc) SetDefaultHook(hook func(context.Context) (DBStore, error))\n```\n\nSetDefaultHook sets function that is called when the Transact method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreTransactFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreTransactFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreTransactFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreTransactFunc) SetDefaultReturn(r0 DBStore, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreTransactFunc) SetDefaultReturn(r0 DBStore, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreTransactFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreTransactFunc.appendCall",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreTransactFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreTransactFunc) appendCall(r0 DBStoreTransactFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreTransactFunc) appendCall(r0 DBStoreTransactFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreTransactFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreTransactFunc.nextHook",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreTransactFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreTransactFunc) nextHook() func(context.Context) (DBStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreTransactFunc) nextHook() func(context.Context) (DBStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreTransactFuncCall",
              "documentation": {
                "identifier": "DBStoreTransactFuncCall",
                "newPage": false,
                "searchKey": "enqueuer.DBStoreTransactFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreTransactFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreTransactFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 DBStore\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreTransactFuncCall is an object that describes an invocation of method Transact on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreTransactFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreTransactFuncCall.Args",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreTransactFuncCall.Args",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreTransactFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreTransactFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#DBStoreTransactFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreTransactFuncCall.Results",
                      "newPage": false,
                      "searchKey": "enqueuer.DBStoreTransactFuncCall.Results",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreTransactFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreTransactFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClient",
              "documentation": {
                "identifier": "GitserverClient",
                "newPage": false,
                "searchKey": "enqueuer.GitserverClient",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClient interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClient interface {\n\tHead(ctx context.Context, repositoryID int) (string, error)\n\tListFiles(ctx context.Context, repositoryID int, commit string, pattern *regexp.Regexp) ([]string, error)\n\tFileExists(ctx context.Context, repositoryID int, commit, file string) (bool, error)\n\tRawContents(ctx context.Context, repositoryID int, commit, file string) ([]byte, error)\n\tResolveRevision(ctx context.Context, repositoryID int, versionString string) (api.CommitID, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientFileExistsFunc",
              "documentation": {
                "identifier": "GitserverClientFileExistsFunc",
                "newPage": false,
                "searchKey": "enqueuer.GitserverClientFileExistsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientFileExistsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientFileExistsFunc struct {\n\tdefaultHook func(context.Context, int, string, string) (bool, error)\n\thooks       []func(context.Context, int, string, string) (bool, error)\n\thistory     []GitserverClientFileExistsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGitserverClientFileExistsFunc describes the behavior when the FileExists method of the parent MockGitserverClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientFileExistsFunc.History",
                    "documentation": {
                      "identifier": "GitserverClientFileExistsFunc.History",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientFileExistsFunc.History",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientFileExistsFunc) History() []GitserverClientFileExistsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientFileExistsFunc) History() []GitserverClientFileExistsFuncCall\n```\n\nHistory returns a sequence of GitserverClientFileExistsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientFileExistsFunc.PushHook",
                    "documentation": {
                      "identifier": "GitserverClientFileExistsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientFileExistsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientFileExistsFunc) PushHook(hook func(context.Context, int, string, string) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientFileExistsFunc) PushHook(hook func(context.Context, int, string, string) (bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the FileExists method of the parent MockGitserverClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientFileExistsFunc.PushReturn",
                    "documentation": {
                      "identifier": "GitserverClientFileExistsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientFileExistsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientFileExistsFunc) PushReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientFileExistsFunc) PushReturn(r0 bool, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientFileExistsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GitserverClientFileExistsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientFileExistsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientFileExistsFunc) SetDefaultHook(hook func(context.Context, int, string, string) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientFileExistsFunc) SetDefaultHook(hook func(context.Context, int, string, string) (bool, error))\n```\n\nSetDefaultHook sets function that is called when the FileExists method of the parent MockGitserverClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientFileExistsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GitserverClientFileExistsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientFileExistsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientFileExistsFunc) SetDefaultReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientFileExistsFunc) SetDefaultReturn(r0 bool, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientFileExistsFunc.appendCall",
                    "documentation": {
                      "identifier": "GitserverClientFileExistsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientFileExistsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientFileExistsFunc) appendCall(r0 GitserverClientFileExistsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientFileExistsFunc) appendCall(r0 GitserverClientFileExistsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientFileExistsFunc.nextHook",
                    "documentation": {
                      "identifier": "GitserverClientFileExistsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientFileExistsFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientFileExistsFunc) nextHook() func(context.Context, int, string, string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientFileExistsFunc) nextHook() func(context.Context, int, string, string) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientFileExistsFuncCall",
              "documentation": {
                "identifier": "GitserverClientFileExistsFuncCall",
                "newPage": false,
                "searchKey": "enqueuer.GitserverClientFileExistsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientFileExistsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientFileExistsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 bool\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nGitserverClientFileExistsFuncCall is an object that describes an invocation of method FileExists on an instance of MockGitserverClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientFileExistsFuncCall.Args",
                    "documentation": {
                      "identifier": "GitserverClientFileExistsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientFileExistsFuncCall.Args",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientFileExistsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientFileExistsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientFileExistsFuncCall.Results",
                    "documentation": {
                      "identifier": "GitserverClientFileExistsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientFileExistsFuncCall.Results",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientFileExistsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientFileExistsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientHeadFunc",
              "documentation": {
                "identifier": "GitserverClientHeadFunc",
                "newPage": false,
                "searchKey": "enqueuer.GitserverClientHeadFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientHeadFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientHeadFunc struct {\n\tdefaultHook func(context.Context, int) (string, error)\n\thooks       []func(context.Context, int) (string, error)\n\thistory     []GitserverClientHeadFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGitserverClientHeadFunc describes the behavior when the Head method of the parent MockGitserverClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientHeadFunc.History",
                    "documentation": {
                      "identifier": "GitserverClientHeadFunc.History",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientHeadFunc.History",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientHeadFunc) History() []GitserverClientHeadFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientHeadFunc) History() []GitserverClientHeadFuncCall\n```\n\nHistory returns a sequence of GitserverClientHeadFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientHeadFunc.PushHook",
                    "documentation": {
                      "identifier": "GitserverClientHeadFunc.PushHook",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientHeadFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientHeadFunc) PushHook(hook func(context.Context, int) (string, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientHeadFunc) PushHook(hook func(context.Context, int) (string, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Head method of the parent MockGitserverClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientHeadFunc.PushReturn",
                    "documentation": {
                      "identifier": "GitserverClientHeadFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientHeadFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientHeadFunc) PushReturn(r0 string, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientHeadFunc) PushReturn(r0 string, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientHeadFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GitserverClientHeadFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientHeadFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientHeadFunc) SetDefaultHook(hook func(context.Context, int) (string, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientHeadFunc) SetDefaultHook(hook func(context.Context, int) (string, error))\n```\n\nSetDefaultHook sets function that is called when the Head method of the parent MockGitserverClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientHeadFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GitserverClientHeadFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientHeadFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientHeadFunc) SetDefaultReturn(r0 string, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientHeadFunc) SetDefaultReturn(r0 string, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientHeadFunc.appendCall",
                    "documentation": {
                      "identifier": "GitserverClientHeadFunc.appendCall",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientHeadFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientHeadFunc) appendCall(r0 GitserverClientHeadFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientHeadFunc) appendCall(r0 GitserverClientHeadFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientHeadFunc.nextHook",
                    "documentation": {
                      "identifier": "GitserverClientHeadFunc.nextHook",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientHeadFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientHeadFunc) nextHook() func(context.Context, int) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientHeadFunc) nextHook() func(context.Context, int) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientHeadFuncCall",
              "documentation": {
                "identifier": "GitserverClientHeadFuncCall",
                "newPage": false,
                "searchKey": "enqueuer.GitserverClientHeadFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientHeadFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientHeadFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 string\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nGitserverClientHeadFuncCall is an object that describes an invocation of method Head on an instance of MockGitserverClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientHeadFuncCall.Args",
                    "documentation": {
                      "identifier": "GitserverClientHeadFuncCall.Args",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientHeadFuncCall.Args",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientHeadFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientHeadFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientHeadFuncCall.Results",
                    "documentation": {
                      "identifier": "GitserverClientHeadFuncCall.Results",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientHeadFuncCall.Results",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientHeadFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientHeadFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientListFilesFunc",
              "documentation": {
                "identifier": "GitserverClientListFilesFunc",
                "newPage": false,
                "searchKey": "enqueuer.GitserverClientListFilesFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientListFilesFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientListFilesFunc struct {\n\tdefaultHook func(context.Context, int, string, *regexp.Regexp) ([]string, error)\n\thooks       []func(context.Context, int, string, *regexp.Regexp) ([]string, error)\n\thistory     []GitserverClientListFilesFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGitserverClientListFilesFunc describes the behavior when the ListFiles method of the parent MockGitserverClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientListFilesFunc.History",
                    "documentation": {
                      "identifier": "GitserverClientListFilesFunc.History",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientListFilesFunc.History",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientListFilesFunc) History() []GitserverClientListFilesFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientListFilesFunc) History() []GitserverClientListFilesFuncCall\n```\n\nHistory returns a sequence of GitserverClientListFilesFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientListFilesFunc.PushHook",
                    "documentation": {
                      "identifier": "GitserverClientListFilesFunc.PushHook",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientListFilesFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientListFilesFunc) PushHook(hook func(context.Context, int, string, *regexp.Regexp) ([]string, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientListFilesFunc) PushHook(hook func(context.Context, int, string, *regexp.Regexp) ([]string, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the ListFiles method of the parent MockGitserverClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientListFilesFunc.PushReturn",
                    "documentation": {
                      "identifier": "GitserverClientListFilesFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientListFilesFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientListFilesFunc) PushReturn(r0 []string, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientListFilesFunc) PushReturn(r0 []string, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientListFilesFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GitserverClientListFilesFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientListFilesFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientListFilesFunc) SetDefaultHook(hook func(context.Context, int, string, *regexp.Regexp) ([]string, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientListFilesFunc) SetDefaultHook(hook func(context.Context, int, string, *regexp.Regexp) ([]string, error))\n```\n\nSetDefaultHook sets function that is called when the ListFiles method of the parent MockGitserverClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientListFilesFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GitserverClientListFilesFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientListFilesFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientListFilesFunc) SetDefaultReturn(r0 []string, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientListFilesFunc) SetDefaultReturn(r0 []string, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientListFilesFunc.appendCall",
                    "documentation": {
                      "identifier": "GitserverClientListFilesFunc.appendCall",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientListFilesFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientListFilesFunc) appendCall(r0 GitserverClientListFilesFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientListFilesFunc) appendCall(r0 GitserverClientListFilesFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientListFilesFunc.nextHook",
                    "documentation": {
                      "identifier": "GitserverClientListFilesFunc.nextHook",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientListFilesFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientListFilesFunc) nextHook() func(context.Context, int, string, *regexp.Regexp) ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientListFilesFunc) nextHook() func(context.Context, int, string, *regexp.Regexp) ([]string, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientListFilesFuncCall",
              "documentation": {
                "identifier": "GitserverClientListFilesFuncCall",
                "newPage": false,
                "searchKey": "enqueuer.GitserverClientListFilesFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientListFilesFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientListFilesFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 *regexp.Regexp\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []string\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nGitserverClientListFilesFuncCall is an object that describes an invocation of method ListFiles on an instance of MockGitserverClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientListFilesFuncCall.Args",
                    "documentation": {
                      "identifier": "GitserverClientListFilesFuncCall.Args",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientListFilesFuncCall.Args",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientListFilesFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientListFilesFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientListFilesFuncCall.Results",
                    "documentation": {
                      "identifier": "GitserverClientListFilesFuncCall.Results",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientListFilesFuncCall.Results",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientListFilesFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientListFilesFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientRawContentsFunc",
              "documentation": {
                "identifier": "GitserverClientRawContentsFunc",
                "newPage": false,
                "searchKey": "enqueuer.GitserverClientRawContentsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientRawContentsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientRawContentsFunc struct {\n\tdefaultHook func(context.Context, int, string, string) ([]byte, error)\n\thooks       []func(context.Context, int, string, string) ([]byte, error)\n\thistory     []GitserverClientRawContentsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGitserverClientRawContentsFunc describes the behavior when the RawContents method of the parent MockGitserverClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientRawContentsFunc.History",
                    "documentation": {
                      "identifier": "GitserverClientRawContentsFunc.History",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientRawContentsFunc.History",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientRawContentsFunc) History() []GitserverClientRawContentsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientRawContentsFunc) History() []GitserverClientRawContentsFuncCall\n```\n\nHistory returns a sequence of GitserverClientRawContentsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientRawContentsFunc.PushHook",
                    "documentation": {
                      "identifier": "GitserverClientRawContentsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientRawContentsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientRawContentsFunc) PushHook(hook func(context.Context, int, string, string) ([]byte, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientRawContentsFunc) PushHook(hook func(context.Context, int, string, string) ([]byte, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the RawContents method of the parent MockGitserverClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientRawContentsFunc.PushReturn",
                    "documentation": {
                      "identifier": "GitserverClientRawContentsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientRawContentsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientRawContentsFunc) PushReturn(r0 []byte, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientRawContentsFunc) PushReturn(r0 []byte, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientRawContentsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GitserverClientRawContentsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientRawContentsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientRawContentsFunc) SetDefaultHook(hook func(context.Context, int, string, string) ([]byte, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientRawContentsFunc) SetDefaultHook(hook func(context.Context, int, string, string) ([]byte, error))\n```\n\nSetDefaultHook sets function that is called when the RawContents method of the parent MockGitserverClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientRawContentsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GitserverClientRawContentsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientRawContentsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientRawContentsFunc) SetDefaultReturn(r0 []byte, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientRawContentsFunc) SetDefaultReturn(r0 []byte, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientRawContentsFunc.appendCall",
                    "documentation": {
                      "identifier": "GitserverClientRawContentsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientRawContentsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientRawContentsFunc) appendCall(r0 GitserverClientRawContentsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientRawContentsFunc) appendCall(r0 GitserverClientRawContentsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientRawContentsFunc.nextHook",
                    "documentation": {
                      "identifier": "GitserverClientRawContentsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientRawContentsFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientRawContentsFunc) nextHook() func(context.Context, int, string, string) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientRawContentsFunc) nextHook() func(context.Context, int, string, string) ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientRawContentsFuncCall",
              "documentation": {
                "identifier": "GitserverClientRawContentsFuncCall",
                "newPage": false,
                "searchKey": "enqueuer.GitserverClientRawContentsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientRawContentsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientRawContentsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []byte\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nGitserverClientRawContentsFuncCall is an object that describes an invocation of method RawContents on an instance of MockGitserverClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientRawContentsFuncCall.Args",
                    "documentation": {
                      "identifier": "GitserverClientRawContentsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientRawContentsFuncCall.Args",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientRawContentsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientRawContentsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientRawContentsFuncCall.Results",
                    "documentation": {
                      "identifier": "GitserverClientRawContentsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientRawContentsFuncCall.Results",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientRawContentsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientRawContentsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientResolveRevisionFunc",
              "documentation": {
                "identifier": "GitserverClientResolveRevisionFunc",
                "newPage": false,
                "searchKey": "enqueuer.GitserverClientResolveRevisionFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientResolveRevisionFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientResolveRevisionFunc struct {\n\tdefaultHook func(context.Context, int, string) (api.CommitID, error)\n\thooks       []func(context.Context, int, string) (api.CommitID, error)\n\thistory     []GitserverClientResolveRevisionFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGitserverClientResolveRevisionFunc describes the behavior when the ResolveRevision method of the parent MockGitserverClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientResolveRevisionFunc.History",
                    "documentation": {
                      "identifier": "GitserverClientResolveRevisionFunc.History",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientResolveRevisionFunc.History",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientResolveRevisionFunc) History() []GitserverClientResolveRevisionFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientResolveRevisionFunc) History() []GitserverClientResolveRevisionFuncCall\n```\n\nHistory returns a sequence of GitserverClientResolveRevisionFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientResolveRevisionFunc.PushHook",
                    "documentation": {
                      "identifier": "GitserverClientResolveRevisionFunc.PushHook",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientResolveRevisionFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientResolveRevisionFunc) PushHook(hook func(context.Context, int, string) (api.CommitID, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientResolveRevisionFunc) PushHook(hook func(context.Context, int, string) (api.CommitID, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the ResolveRevision method of the parent MockGitserverClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientResolveRevisionFunc.PushReturn",
                    "documentation": {
                      "identifier": "GitserverClientResolveRevisionFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientResolveRevisionFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientResolveRevisionFunc) PushReturn(r0 api.CommitID, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientResolveRevisionFunc) PushReturn(r0 api.CommitID, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientResolveRevisionFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GitserverClientResolveRevisionFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientResolveRevisionFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientResolveRevisionFunc) SetDefaultHook(hook func(context.Context, int, string) (api.CommitID, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientResolveRevisionFunc) SetDefaultHook(hook func(context.Context, int, string) (api.CommitID, error))\n```\n\nSetDefaultHook sets function that is called when the ResolveRevision method of the parent MockGitserverClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientResolveRevisionFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GitserverClientResolveRevisionFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientResolveRevisionFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientResolveRevisionFunc) SetDefaultReturn(r0 api.CommitID, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientResolveRevisionFunc) SetDefaultReturn(r0 api.CommitID, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientResolveRevisionFunc.appendCall",
                    "documentation": {
                      "identifier": "GitserverClientResolveRevisionFunc.appendCall",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientResolveRevisionFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientResolveRevisionFunc) appendCall(r0 GitserverClientResolveRevisionFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientResolveRevisionFunc) appendCall(r0 GitserverClientResolveRevisionFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientResolveRevisionFunc.nextHook",
                    "documentation": {
                      "identifier": "GitserverClientResolveRevisionFunc.nextHook",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientResolveRevisionFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientResolveRevisionFunc) nextHook() func(context.Context, int, string) (api.CommitID, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientResolveRevisionFunc) nextHook() func(context.Context, int, string) (api.CommitID, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientResolveRevisionFuncCall",
              "documentation": {
                "identifier": "GitserverClientResolveRevisionFuncCall",
                "newPage": false,
                "searchKey": "enqueuer.GitserverClientResolveRevisionFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientResolveRevisionFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientResolveRevisionFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 api.CommitID\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nGitserverClientResolveRevisionFuncCall is an object that describes an invocation of method ResolveRevision on an instance of MockGitserverClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientResolveRevisionFuncCall.Args",
                    "documentation": {
                      "identifier": "GitserverClientResolveRevisionFuncCall.Args",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientResolveRevisionFuncCall.Args",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientResolveRevisionFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientResolveRevisionFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#GitserverClientResolveRevisionFuncCall.Results",
                    "documentation": {
                      "identifier": "GitserverClientResolveRevisionFuncCall.Results",
                      "newPage": false,
                      "searchKey": "enqueuer.GitserverClientResolveRevisionFuncCall.Results",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientResolveRevisionFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientResolveRevisionFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#IndexEnqueuer",
              "documentation": {
                "identifier": "IndexEnqueuer",
                "newPage": false,
                "searchKey": "enqueuer.IndexEnqueuer",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexEnqueuer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexEnqueuer struct {\n\tdbStore          DBStore\n\tgitserverClient  GitserverClient\n\trepoUpdater      RepoUpdaterClient\n\tmaxJobsPerCommit int\n\toperations       *operations\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#NewIndexEnqueuer",
                    "documentation": {
                      "identifier": "NewIndexEnqueuer",
                      "newPage": false,
                      "searchKey": "enqueuer.NewIndexEnqueuer",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewIndexEnqueuer(dbStore DBStore, gitClient GitserverClient, repoUpdater RepoUpdaterClient, observationContext *observation.Context) *IndexEnqueuer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewIndexEnqueuer(dbStore DBStore, gitClient GitserverClient, repoUpdater RepoUpdaterClient, observationContext *observation.Context) *IndexEnqueuer\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#IndexEnqueuer.ForceQueueIndexesForRepository",
                    "documentation": {
                      "identifier": "IndexEnqueuer.ForceQueueIndexesForRepository",
                      "newPage": false,
                      "searchKey": "enqueuer.IndexEnqueuer.ForceQueueIndexesForRepository",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IndexEnqueuer) ForceQueueIndexesForRepository(ctx context.Context, repositoryID int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IndexEnqueuer) ForceQueueIndexesForRepository(ctx context.Context, repositoryID int) error\n```\n\nForceQueueIndexesForRepository attempts to queue an index for the lastest commit on the default branch of the given repository. If this repository and commit already has an index or upload record associated with it, a new index job record will still be enqueued. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#IndexEnqueuer.InferIndexConfiguration",
                    "documentation": {
                      "identifier": "IndexEnqueuer.InferIndexConfiguration",
                      "newPage": false,
                      "searchKey": "enqueuer.IndexEnqueuer.InferIndexConfiguration",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IndexEnqueuer) InferIndexConfiguration(ctx context.Context, repositoryID int) (_ *config.IndexConfiguration, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IndexEnqueuer) InferIndexConfiguration(ctx context.Context, repositoryID int) (_ *config.IndexConfiguration, err error)\n```\n\nInferIndexConfiguration looks at the repository contents at the lastest commit on the default branch of the given repository and determines an index configuration that is likely to succeed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#IndexEnqueuer.QueueIndexesForPackage",
                    "documentation": {
                      "identifier": "IndexEnqueuer.QueueIndexesForPackage",
                      "newPage": false,
                      "searchKey": "enqueuer.IndexEnqueuer.QueueIndexesForPackage",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IndexEnqueuer) QueueIndexesForPackage(ctx context.Context, pkg semantic.Package) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IndexEnqueuer) QueueIndexesForPackage(ctx context.Context, pkg semantic.Package) (err error)\n```\n\nQueueIndexesForPackage enqueues index jobs for a dependency of a recently-processed precise code intelligence index. Currently we only support recognition of \"gomod\" import monikers. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#IndexEnqueuer.QueueIndexesForRepository",
                    "documentation": {
                      "identifier": "IndexEnqueuer.QueueIndexesForRepository",
                      "newPage": false,
                      "searchKey": "enqueuer.IndexEnqueuer.QueueIndexesForRepository",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IndexEnqueuer) QueueIndexesForRepository(ctx context.Context, repositoryID int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IndexEnqueuer) QueueIndexesForRepository(ctx context.Context, repositoryID int) error\n```\n\nQueueIndexesForRepository attempts to queue an index for the lastest commit on the default branch of the given repository. If this repository and commit already has an index or upload record associated with it, this method does nothing. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#IndexEnqueuer.getIndexRecords",
                    "documentation": {
                      "identifier": "IndexEnqueuer.getIndexRecords",
                      "newPage": false,
                      "searchKey": "enqueuer.IndexEnqueuer.getIndexRecords",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IndexEnqueuer) getIndexRecords(ctx context.Context, repositoryID int, commit string) ([]store.Index, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IndexEnqueuer) getIndexRecords(ctx context.Context, repositoryID int, commit string) ([]store.Index, error)\n```\n\ngetIndexRecords determines the set of index records that should be enqueued for the given commit. For each repository, we look for index configuration in the following order: \n\n```\n- in the database\n- committed to `sourcegraph.yaml` in the repository\n- inferred from the repository structure\n\n```\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#IndexEnqueuer.getIndexRecordsFromConfigurationInDatabase",
                    "documentation": {
                      "identifier": "IndexEnqueuer.getIndexRecordsFromConfigurationInDatabase",
                      "newPage": false,
                      "searchKey": "enqueuer.IndexEnqueuer.getIndexRecordsFromConfigurationInDatabase",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IndexEnqueuer) getIndexRecordsFromConfigurationInDatabase(ctx context.Context, repositoryID int, commit string) ([]store.Index, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IndexEnqueuer) getIndexRecordsFromConfigurationInDatabase(ctx context.Context, repositoryID int, commit string) ([]store.Index, bool, error)\n```\n\ngetIndexRecordsFromConfigurationInDatabase returns a set of index jobs configured via the UI for the given repository. If no jobs are configured via the UI then a false valued flag is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#IndexEnqueuer.getIndexRecordsFromConfigurationInRepository",
                    "documentation": {
                      "identifier": "IndexEnqueuer.getIndexRecordsFromConfigurationInRepository",
                      "newPage": false,
                      "searchKey": "enqueuer.IndexEnqueuer.getIndexRecordsFromConfigurationInRepository",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IndexEnqueuer) getIndexRecordsFromConfigurationInRepository(ctx context.Context, repositoryID int, commit string) ([]store.Index, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IndexEnqueuer) getIndexRecordsFromConfigurationInRepository(ctx context.Context, repositoryID int, commit string) ([]store.Index, bool, error)\n```\n\ngetIndexRecordsFromConfigurationInRepository returns a set of index jobs configured via a committed configuration file at the given commit. If no jobs are configured within the repository then a false valued flag is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#IndexEnqueuer.inferIndexJobsFromRepositoryStructure",
                    "documentation": {
                      "identifier": "IndexEnqueuer.inferIndexJobsFromRepositoryStructure",
                      "newPage": false,
                      "searchKey": "enqueuer.IndexEnqueuer.inferIndexJobsFromRepositoryStructure",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IndexEnqueuer) inferIndexJobsFromRepositoryStructure(ctx context.Context, repositoryID int, commit string) ([]config.IndexJob, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IndexEnqueuer) inferIndexJobsFromRepositoryStructure(ctx context.Context, repositoryID int, commit string) ([]config.IndexJob, error)\n```\n\ninferIndexJobsFromRepositoryStructure collects the result of  InferIndexJobs over all registered recognizers. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#IndexEnqueuer.inferIndexRecordsFromRepositoryStructure",
                    "documentation": {
                      "identifier": "IndexEnqueuer.inferIndexRecordsFromRepositoryStructure",
                      "newPage": false,
                      "searchKey": "enqueuer.IndexEnqueuer.inferIndexRecordsFromRepositoryStructure",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IndexEnqueuer) inferIndexRecordsFromRepositoryStructure(ctx context.Context, repositoryID int, commit string) ([]store.Index, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IndexEnqueuer) inferIndexRecordsFromRepositoryStructure(ctx context.Context, repositoryID int, commit string) ([]store.Index, bool, error)\n```\n\ninferIndexRecordsFromRepositoryStructure looks at the repository contents at the given commit and determines a set of index jobs that are likely to succeed. If no jobs could be inferred then a false valued flag is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#IndexEnqueuer.queueIndexForRepository",
                    "documentation": {
                      "identifier": "IndexEnqueuer.queueIndexForRepository",
                      "newPage": false,
                      "searchKey": "enqueuer.IndexEnqueuer.queueIndexForRepository",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IndexEnqueuer) queueIndexForRepository(ctx context.Context, repositoryID int, force bool) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IndexEnqueuer) queueIndexForRepository(ctx context.Context, repositoryID int, force bool) (err error)\n```\n\nqueueIndexForRepository determines the head of the default branch of the given repository and attempts to determine a set of index jobs to enqueue. \n\nIf the force flag is false, then the presence of an upload or index record for this given repository and commit will cause this method to no-op. Note that this is NOT a guarantee that there will never be any duplicate records when the flag is false. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#IndexEnqueuer.queueIndexForRepositoryAndCommit",
                    "documentation": {
                      "identifier": "IndexEnqueuer.queueIndexForRepositoryAndCommit",
                      "newPage": false,
                      "searchKey": "enqueuer.IndexEnqueuer.queueIndexForRepositoryAndCommit",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IndexEnqueuer) queueIndexForRepositoryAndCommit(ctx context.Context, repositoryID int, commit string, force bool, traceLog observation.TraceLogger) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IndexEnqueuer) queueIndexForRepositoryAndCommit(ctx context.Context, repositoryID int, commit string, force bool, traceLog observation.TraceLogger) error\n```\n\nqueueIndexForRepositoryAndCommit determines a set of index jobs to enqueue for the given repository and commit. \n\nIf the force flag is false, then the presence of an upload or index record for this given repository and commit will cause this method to no-op. Note that this is NOT a guarantee that there will never be any duplicate records when the flag is false. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#IndexEnqueuer.queueIndexes",
                    "documentation": {
                      "identifier": "IndexEnqueuer.queueIndexes",
                      "newPage": false,
                      "searchKey": "enqueuer.IndexEnqueuer.queueIndexes",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IndexEnqueuer) queueIndexes(ctx context.Context, repositoryID int, commit string, indexes []store.Index) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IndexEnqueuer) queueIndexes(ctx context.Context, repositoryID int, commit string, indexes []store.Index) (err error)\n```\n\nqueueIndexes inserts a set of index records into the database. It is assumed that the given repository id an commit are the same for each given index record. In the same transaction as the insert, the repository's row is updated in the lsif_indexable_repositories table as a crude form of rate limiting. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#MockDBStore",
              "documentation": {
                "identifier": "MockDBStore",
                "newPage": false,
                "searchKey": "enqueuer.MockDBStore",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockDBStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockDBStore struct {\n\t// DirtyRepositoriesFunc is an instance of a mock function object\n\t// controlling the behavior of the method DirtyRepositories.\n\tDirtyRepositoriesFunc *DBStoreDirtyRepositoriesFunc\n\t// DoneFunc is an instance of a mock function object controlling the\n\t// behavior of the method Done.\n\tDoneFunc *DBStoreDoneFunc\n\t// GetIndexConfigurationByRepositoryIDFunc is an instance of a mock\n\t// function object controlling the behavior of the method\n\t// GetIndexConfigurationByRepositoryID.\n\tGetIndexConfigurationByRepositoryIDFunc *DBStoreGetIndexConfigurationByRepositoryIDFunc\n\t// GetRepositoriesWithIndexConfigurationFunc is an instance of a mock\n\t// function object controlling the behavior of the method\n\t// GetRepositoriesWithIndexConfiguration.\n\tGetRepositoriesWithIndexConfigurationFunc *DBStoreGetRepositoriesWithIndexConfigurationFunc\n\t// HandleFunc is an instance of a mock function object controlling the\n\t// behavior of the method Handle.\n\tHandleFunc *DBStoreHandleFunc\n\t// InsertIndexFunc is an instance of a mock function object controlling\n\t// the behavior of the method InsertIndex.\n\tInsertIndexFunc *DBStoreInsertIndexFunc\n\t// IsQueuedFunc is an instance of a mock function object controlling the\n\t// behavior of the method IsQueued.\n\tIsQueuedFunc *DBStoreIsQueuedFunc\n\t// TransactFunc is an instance of a mock function object controlling the\n\t// behavior of the method Transact.\n\tTransactFunc *DBStoreTransactFunc\n}\n```\n\nMockDBStore is a mock implementation of the DBStore interface (from the package github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/autoindex/enqueuer) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#NewMockDBStore",
                    "documentation": {
                      "identifier": "NewMockDBStore",
                      "newPage": false,
                      "searchKey": "enqueuer.NewMockDBStore",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockDBStore() *MockDBStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockDBStore() *MockDBStore\n```\n\nNewMockDBStore creates a new mock of the DBStore interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#NewMockDBStoreFrom",
                    "documentation": {
                      "identifier": "NewMockDBStoreFrom",
                      "newPage": false,
                      "searchKey": "enqueuer.NewMockDBStoreFrom",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockDBStoreFrom(i DBStore) *MockDBStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockDBStoreFrom(i DBStore) *MockDBStore\n```\n\nNewMockDBStoreFrom creates a new mock of the MockDBStore interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#MockDBStore.DirtyRepositories",
                    "documentation": {
                      "identifier": "MockDBStore.DirtyRepositories",
                      "newPage": false,
                      "searchKey": "enqueuer.MockDBStore.DirtyRepositories",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) DirtyRepositories(v0 context.Context) (map[int]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) DirtyRepositories(v0 context.Context) (map[int]int, error)\n```\n\nDirtyRepositories delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#MockDBStore.Done",
                    "documentation": {
                      "identifier": "MockDBStore.Done",
                      "newPage": false,
                      "searchKey": "enqueuer.MockDBStore.Done",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) Done(v0 error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) Done(v0 error) error\n```\n\nDone delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#MockDBStore.GetIndexConfigurationByRepositoryID",
                    "documentation": {
                      "identifier": "MockDBStore.GetIndexConfigurationByRepositoryID",
                      "newPage": false,
                      "searchKey": "enqueuer.MockDBStore.GetIndexConfigurationByRepositoryID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) GetIndexConfigurationByRepositoryID(v0 context.Context, v1 int) (dbstore.IndexConfiguration, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) GetIndexConfigurationByRepositoryID(v0 context.Context, v1 int) (dbstore.IndexConfiguration, bool, error)\n```\n\nGetIndexConfigurationByRepositoryID delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#MockDBStore.GetRepositoriesWithIndexConfiguration",
                    "documentation": {
                      "identifier": "MockDBStore.GetRepositoriesWithIndexConfiguration",
                      "newPage": false,
                      "searchKey": "enqueuer.MockDBStore.GetRepositoriesWithIndexConfiguration",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) GetRepositoriesWithIndexConfiguration(v0 context.Context) ([]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) GetRepositoriesWithIndexConfiguration(v0 context.Context) ([]int, error)\n```\n\nGetRepositoriesWithIndexConfiguration delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#MockDBStore.Handle",
                    "documentation": {
                      "identifier": "MockDBStore.Handle",
                      "newPage": false,
                      "searchKey": "enqueuer.MockDBStore.Handle",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) Handle() *basestore.TransactableHandle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) Handle() *basestore.TransactableHandle\n```\n\nHandle delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#MockDBStore.InsertIndex",
                    "documentation": {
                      "identifier": "MockDBStore.InsertIndex",
                      "newPage": false,
                      "searchKey": "enqueuer.MockDBStore.InsertIndex",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) InsertIndex(v0 context.Context, v1 dbstore.Index) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) InsertIndex(v0 context.Context, v1 dbstore.Index) (int, error)\n```\n\nInsertIndex delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#MockDBStore.IsQueued",
                    "documentation": {
                      "identifier": "MockDBStore.IsQueued",
                      "newPage": false,
                      "searchKey": "enqueuer.MockDBStore.IsQueued",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) IsQueued(v0 context.Context, v1 int, v2 string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) IsQueued(v0 context.Context, v1 int, v2 string) (bool, error)\n```\n\nIsQueued delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#MockDBStore.Transact",
                    "documentation": {
                      "identifier": "MockDBStore.Transact",
                      "newPage": false,
                      "searchKey": "enqueuer.MockDBStore.Transact",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) Transact(v0 context.Context) (DBStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) Transact(v0 context.Context) (DBStore, error)\n```\n\nTransact delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#MockGitserverClient",
              "documentation": {
                "identifier": "MockGitserverClient",
                "newPage": false,
                "searchKey": "enqueuer.MockGitserverClient",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockGitserverClient struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockGitserverClient struct {\n\t// FileExistsFunc is an instance of a mock function object controlling\n\t// the behavior of the method FileExists.\n\tFileExistsFunc *GitserverClientFileExistsFunc\n\t// HeadFunc is an instance of a mock function object controlling the\n\t// behavior of the method Head.\n\tHeadFunc *GitserverClientHeadFunc\n\t// ListFilesFunc is an instance of a mock function object controlling\n\t// the behavior of the method ListFiles.\n\tListFilesFunc *GitserverClientListFilesFunc\n\t// RawContentsFunc is an instance of a mock function object controlling\n\t// the behavior of the method RawContents.\n\tRawContentsFunc *GitserverClientRawContentsFunc\n\t// ResolveRevisionFunc is an instance of a mock function object\n\t// controlling the behavior of the method ResolveRevision.\n\tResolveRevisionFunc *GitserverClientResolveRevisionFunc\n}\n```\n\nMockGitserverClient is a mock implementation of the GitserverClient interface (from the package github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/autoindex/enqueuer) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#NewMockGitserverClient",
                    "documentation": {
                      "identifier": "NewMockGitserverClient",
                      "newPage": false,
                      "searchKey": "enqueuer.NewMockGitserverClient",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockGitserverClient() *MockGitserverClient"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockGitserverClient() *MockGitserverClient\n```\n\nNewMockGitserverClient creates a new mock of the GitserverClient interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#NewMockGitserverClientFrom",
                    "documentation": {
                      "identifier": "NewMockGitserverClientFrom",
                      "newPage": false,
                      "searchKey": "enqueuer.NewMockGitserverClientFrom",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockGitserverClientFrom(i GitserverClient) *MockGitserverClient"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockGitserverClientFrom(i GitserverClient) *MockGitserverClient\n```\n\nNewMockGitserverClientFrom creates a new mock of the MockGitserverClient interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#MockGitserverClient.FileExists",
                    "documentation": {
                      "identifier": "MockGitserverClient.FileExists",
                      "newPage": false,
                      "searchKey": "enqueuer.MockGitserverClient.FileExists",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGitserverClient) FileExists(v0 context.Context, v1 int, v2 string, v3 string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGitserverClient) FileExists(v0 context.Context, v1 int, v2 string, v3 string) (bool, error)\n```\n\nFileExists delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#MockGitserverClient.Head",
                    "documentation": {
                      "identifier": "MockGitserverClient.Head",
                      "newPage": false,
                      "searchKey": "enqueuer.MockGitserverClient.Head",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGitserverClient) Head(v0 context.Context, v1 int) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGitserverClient) Head(v0 context.Context, v1 int) (string, error)\n```\n\nHead delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#MockGitserverClient.ListFiles",
                    "documentation": {
                      "identifier": "MockGitserverClient.ListFiles",
                      "newPage": false,
                      "searchKey": "enqueuer.MockGitserverClient.ListFiles",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGitserverClient) ListFiles(v0 context.Context, v1 int, v2 string, v3 *regexp.Regexp) ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGitserverClient) ListFiles(v0 context.Context, v1 int, v2 string, v3 *regexp.Regexp) ([]string, error)\n```\n\nListFiles delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#MockGitserverClient.RawContents",
                    "documentation": {
                      "identifier": "MockGitserverClient.RawContents",
                      "newPage": false,
                      "searchKey": "enqueuer.MockGitserverClient.RawContents",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGitserverClient) RawContents(v0 context.Context, v1 int, v2 string, v3 string) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGitserverClient) RawContents(v0 context.Context, v1 int, v2 string, v3 string) ([]byte, error)\n```\n\nRawContents delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#MockGitserverClient.ResolveRevision",
                    "documentation": {
                      "identifier": "MockGitserverClient.ResolveRevision",
                      "newPage": false,
                      "searchKey": "enqueuer.MockGitserverClient.ResolveRevision",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGitserverClient) ResolveRevision(v0 context.Context, v1 int, v2 string) (api.CommitID, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGitserverClient) ResolveRevision(v0 context.Context, v1 int, v2 string) (api.CommitID, error)\n```\n\nResolveRevision delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#MockRepoUpdaterClient",
              "documentation": {
                "identifier": "MockRepoUpdaterClient",
                "newPage": false,
                "searchKey": "enqueuer.MockRepoUpdaterClient",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockRepoUpdaterClient struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockRepoUpdaterClient struct {\n\t// EnqueueRepoUpdateFunc is an instance of a mock function object\n\t// controlling the behavior of the method EnqueueRepoUpdate.\n\tEnqueueRepoUpdateFunc *RepoUpdaterClientEnqueueRepoUpdateFunc\n}\n```\n\nMockRepoUpdaterClient is a mock implementation of the RepoUpdaterClient interface (from the package github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/autoindex/enqueuer) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#NewMockRepoUpdaterClient",
                    "documentation": {
                      "identifier": "NewMockRepoUpdaterClient",
                      "newPage": false,
                      "searchKey": "enqueuer.NewMockRepoUpdaterClient",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockRepoUpdaterClient() *MockRepoUpdaterClient"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockRepoUpdaterClient() *MockRepoUpdaterClient\n```\n\nNewMockRepoUpdaterClient creates a new mock of the RepoUpdaterClient interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#NewMockRepoUpdaterClientFrom",
                    "documentation": {
                      "identifier": "NewMockRepoUpdaterClientFrom",
                      "newPage": false,
                      "searchKey": "enqueuer.NewMockRepoUpdaterClientFrom",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockRepoUpdaterClientFrom(i RepoUpdaterClient) *MockRepoUpdaterClient"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockRepoUpdaterClientFrom(i RepoUpdaterClient) *MockRepoUpdaterClient\n```\n\nNewMockRepoUpdaterClientFrom creates a new mock of the MockRepoUpdaterClient interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#MockRepoUpdaterClient.EnqueueRepoUpdate",
                    "documentation": {
                      "identifier": "MockRepoUpdaterClient.EnqueueRepoUpdate",
                      "newPage": false,
                      "searchKey": "enqueuer.MockRepoUpdaterClient.EnqueueRepoUpdate",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockRepoUpdaterClient) EnqueueRepoUpdate(v0 context.Context, v1 api.RepoName) (*protocol.RepoUpdateResponse, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockRepoUpdaterClient) EnqueueRepoUpdate(v0 context.Context, v1 api.RepoName) (*protocol.RepoUpdateResponse, error)\n```\n\nEnqueueRepoUpdate delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#RepoUpdaterClient",
              "documentation": {
                "identifier": "RepoUpdaterClient",
                "newPage": false,
                "searchKey": "enqueuer.RepoUpdaterClient",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepoUpdaterClient interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepoUpdaterClient interface {\n\tEnqueueRepoUpdate(ctx context.Context, repo api.RepoName) (*protocol.RepoUpdateResponse, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#RepoUpdaterClientEnqueueRepoUpdateFunc",
              "documentation": {
                "identifier": "RepoUpdaterClientEnqueueRepoUpdateFunc",
                "newPage": false,
                "searchKey": "enqueuer.RepoUpdaterClientEnqueueRepoUpdateFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepoUpdaterClientEnqueueRepoUpdateFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepoUpdaterClientEnqueueRepoUpdateFunc struct {\n\tdefaultHook func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error)\n\thooks       []func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error)\n\thistory     []RepoUpdaterClientEnqueueRepoUpdateFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nRepoUpdaterClientEnqueueRepoUpdateFunc describes the behavior when the EnqueueRepoUpdate method of the parent MockRepoUpdaterClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#RepoUpdaterClientEnqueueRepoUpdateFunc.History",
                    "documentation": {
                      "identifier": "RepoUpdaterClientEnqueueRepoUpdateFunc.History",
                      "newPage": false,
                      "searchKey": "enqueuer.RepoUpdaterClientEnqueueRepoUpdateFunc.History",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *RepoUpdaterClientEnqueueRepoUpdateFunc) History() []RepoUpdaterClientEnqueueRepoUpdateFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *RepoUpdaterClientEnqueueRepoUpdateFunc) History() []RepoUpdaterClientEnqueueRepoUpdateFuncCall\n```\n\nHistory returns a sequence of RepoUpdaterClientEnqueueRepoUpdateFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#RepoUpdaterClientEnqueueRepoUpdateFunc.PushHook",
                    "documentation": {
                      "identifier": "RepoUpdaterClientEnqueueRepoUpdateFunc.PushHook",
                      "newPage": false,
                      "searchKey": "enqueuer.RepoUpdaterClientEnqueueRepoUpdateFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *RepoUpdaterClientEnqueueRepoUpdateFunc) PushHook(hook func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *RepoUpdaterClientEnqueueRepoUpdateFunc) PushHook(hook func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the EnqueueRepoUpdate method of the parent MockRepoUpdaterClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#RepoUpdaterClientEnqueueRepoUpdateFunc.PushReturn",
                    "documentation": {
                      "identifier": "RepoUpdaterClientEnqueueRepoUpdateFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.RepoUpdaterClientEnqueueRepoUpdateFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *RepoUpdaterClientEnqueueRepoUpdateFunc) PushReturn(r0 *protocol.RepoUpdateResponse, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *RepoUpdaterClientEnqueueRepoUpdateFunc) PushReturn(r0 *protocol.RepoUpdateResponse, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#RepoUpdaterClientEnqueueRepoUpdateFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "RepoUpdaterClientEnqueueRepoUpdateFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "enqueuer.RepoUpdaterClientEnqueueRepoUpdateFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *RepoUpdaterClientEnqueueRepoUpdateFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *RepoUpdaterClientEnqueueRepoUpdateFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error))\n```\n\nSetDefaultHook sets function that is called when the EnqueueRepoUpdate method of the parent MockRepoUpdaterClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#RepoUpdaterClientEnqueueRepoUpdateFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "RepoUpdaterClientEnqueueRepoUpdateFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "enqueuer.RepoUpdaterClientEnqueueRepoUpdateFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *RepoUpdaterClientEnqueueRepoUpdateFunc) SetDefaultReturn(r0 *protocol.RepoUpdateResponse, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *RepoUpdaterClientEnqueueRepoUpdateFunc) SetDefaultReturn(r0 *protocol.RepoUpdateResponse, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#RepoUpdaterClientEnqueueRepoUpdateFunc.appendCall",
                    "documentation": {
                      "identifier": "RepoUpdaterClientEnqueueRepoUpdateFunc.appendCall",
                      "newPage": false,
                      "searchKey": "enqueuer.RepoUpdaterClientEnqueueRepoUpdateFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *RepoUpdaterClientEnqueueRepoUpdateFunc) appendCall(r0 RepoUpdaterClientEnqueueRepoUpdateFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *RepoUpdaterClientEnqueueRepoUpdateFunc) appendCall(r0 RepoUpdaterClientEnqueueRepoUpdateFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#RepoUpdaterClientEnqueueRepoUpdateFunc.nextHook",
                    "documentation": {
                      "identifier": "RepoUpdaterClientEnqueueRepoUpdateFunc.nextHook",
                      "newPage": false,
                      "searchKey": "enqueuer.RepoUpdaterClientEnqueueRepoUpdateFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *RepoUpdaterClientEnqueueRepoUpdateFunc) nextHook() func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *RepoUpdaterClientEnqueueRepoUpdateFunc) nextHook() func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#RepoUpdaterClientEnqueueRepoUpdateFuncCall",
              "documentation": {
                "identifier": "RepoUpdaterClientEnqueueRepoUpdateFuncCall",
                "newPage": false,
                "searchKey": "enqueuer.RepoUpdaterClientEnqueueRepoUpdateFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepoUpdaterClientEnqueueRepoUpdateFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepoUpdaterClientEnqueueRepoUpdateFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 api.RepoName\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *protocol.RepoUpdateResponse\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nRepoUpdaterClientEnqueueRepoUpdateFuncCall is an object that describes an invocation of method EnqueueRepoUpdate on an instance of MockRepoUpdaterClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#RepoUpdaterClientEnqueueRepoUpdateFuncCall.Args",
                    "documentation": {
                      "identifier": "RepoUpdaterClientEnqueueRepoUpdateFuncCall.Args",
                      "newPage": false,
                      "searchKey": "enqueuer.RepoUpdaterClientEnqueueRepoUpdateFuncCall.Args",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c RepoUpdaterClientEnqueueRepoUpdateFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c RepoUpdaterClientEnqueueRepoUpdateFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#RepoUpdaterClientEnqueueRepoUpdateFuncCall.Results",
                    "documentation": {
                      "identifier": "RepoUpdaterClientEnqueueRepoUpdateFuncCall.Results",
                      "newPage": false,
                      "searchKey": "enqueuer.RepoUpdaterClientEnqueueRepoUpdateFuncCall.Results",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c RepoUpdaterClientEnqueueRepoUpdateFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c RepoUpdaterClientEnqueueRepoUpdateFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#gitClient",
              "documentation": {
                "identifier": "gitClient",
                "newPage": false,
                "searchKey": "enqueuer.gitClient",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type gitClient struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gitClient struct {\n\tclient       GitserverClient\n\trepositoryID int\n\tcommit       string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#newGitClient",
                    "documentation": {
                      "identifier": "newGitClient",
                      "newPage": false,
                      "searchKey": "enqueuer.newGitClient",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newGitClient(client GitserverClient, repositoryID int, commit string) gitClient"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newGitClient(client GitserverClient, repositoryID int, commit string) gitClient\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#gitClient.FileExists",
                    "documentation": {
                      "identifier": "gitClient.FileExists",
                      "newPage": false,
                      "searchKey": "enqueuer.gitClient.FileExists",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c gitClient) FileExists(ctx context.Context, file string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c gitClient) FileExists(ctx context.Context, file string) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#gitClient.ListFiles",
                    "documentation": {
                      "identifier": "gitClient.ListFiles",
                      "newPage": false,
                      "searchKey": "enqueuer.gitClient.ListFiles",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c gitClient) ListFiles(ctx context.Context, pattern *regexp.Regexp) ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c gitClient) ListFiles(ctx context.Context, pattern *regexp.Regexp) ([]string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#gitClient.RawContents",
                    "documentation": {
                      "identifier": "gitClient.RawContents",
                      "newPage": false,
                      "searchKey": "enqueuer.gitClient.RawContents",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c gitClient) RawContents(ctx context.Context, file string) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c gitClient) RawContents(ctx context.Context, file string) ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#operations",
              "documentation": {
                "identifier": "operations",
                "newPage": false,
                "searchKey": "enqueuer.operations",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type operations struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype operations struct {\n\tQueueIndex              *observation.Operation\n\tInferIndexConfiguration *observation.Operation\n\tQueueIndexForPackage    *observation.Operation\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#newOperations",
                    "documentation": {
                      "identifier": "newOperations",
                      "newPage": false,
                      "searchKey": "enqueuer.newOperations",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newOperations(observationContext *observation.Context) *operations"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newOperations(observationContext *observation.Context) *operations\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#InferGoRepositoryAndRevision",
              "documentation": {
                "identifier": "InferGoRepositoryAndRevision",
                "newPage": false,
                "searchKey": "enqueuer.InferGoRepositoryAndRevision",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func InferGoRepositoryAndRevision(pkg semantic.Package) (repoName, gitTagOrCommit string, ok bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc InferGoRepositoryAndRevision(pkg semantic.Package) (repoName, gitTagOrCommit string, ok bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#TestInferGoRepositoryAndRevision",
              "documentation": {
                "identifier": "TestInferGoRepositoryAndRevision",
                "newPage": false,
                "searchKey": "enqueuer.TestInferGoRepositoryAndRevision",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInferGoRepositoryAndRevision(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInferGoRepositoryAndRevision(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#TestQueueIndexesForPackage",
              "documentation": {
                "identifier": "TestQueueIndexesForPackage",
                "newPage": false,
                "searchKey": "enqueuer.TestQueueIndexesForPackage",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQueueIndexesForPackage(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQueueIndexesForPackage(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#TestQueueIndexesForRepositoryInDatabase",
              "documentation": {
                "identifier": "TestQueueIndexesForRepositoryInDatabase",
                "newPage": false,
                "searchKey": "enqueuer.TestQueueIndexesForRepositoryInDatabase",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQueueIndexesForRepositoryInDatabase(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQueueIndexesForRepositoryInDatabase(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#TestQueueIndexesForRepositoryInRepository",
              "documentation": {
                "identifier": "TestQueueIndexesForRepositoryInRepository",
                "newPage": false,
                "searchKey": "enqueuer.TestQueueIndexesForRepositoryInRepository",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQueueIndexesForRepositoryInRepository(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQueueIndexesForRepositoryInRepository(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#TestQueueIndexesForRepositoryInferred",
              "documentation": {
                "identifier": "TestQueueIndexesForRepositoryInferred",
                "newPage": false,
                "searchKey": "enqueuer.TestQueueIndexesForRepositoryInferred",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQueueIndexesForRepositoryInferred(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQueueIndexesForRepositoryInferred(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#TestQueueIndexesForRepositoryInferredTooLarge",
              "documentation": {
                "identifier": "TestQueueIndexesForRepositoryInferredTooLarge",
                "newPage": false,
                "searchKey": "enqueuer.TestQueueIndexesForRepositoryInferredTooLarge",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQueueIndexesForRepositoryInferredTooLarge(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQueueIndexesForRepositoryInferredTooLarge(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#convertIndexConfiguration",
              "documentation": {
                "identifier": "convertIndexConfiguration",
                "newPage": false,
                "searchKey": "enqueuer.convertIndexConfiguration",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func convertIndexConfiguration(repositoryID int, commit string, indexConfiguration config.IndexConfiguration) (indexes []store.Index)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc convertIndexConfiguration(repositoryID int, commit string, indexConfiguration config.IndexConfiguration) (indexes []store.Index)\n```\n\nconvertIndexConfiguration converts an index configuration object into a set of index records to be inserted into the database. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#convertInferredConfiguration",
              "documentation": {
                "identifier": "convertInferredConfiguration",
                "newPage": false,
                "searchKey": "enqueuer.convertInferredConfiguration",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func convertInferredConfiguration(repositoryID int, commit string, indexJobs []config.IndexJob) (indexes []store.Index)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc convertInferredConfiguration(repositoryID int, commit string, indexJobs []config.IndexJob) (indexes []store.Index)\n```\n\nconvertInferredConfiguration converts a set of index jobs into a set of index records to be inserted into the database. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/autoindex/enqueuer#isNotFoundError",
              "documentation": {
                "identifier": "isNotFoundError",
                "newPage": false,
                "searchKey": "enqueuer.isNotFoundError",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isNotFoundError(err error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isNotFoundError(err error) bool\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
