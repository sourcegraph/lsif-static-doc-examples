{
  "pathID": "/enterprise/internal/codeintel/stores/dbstore",
  "documentation": {
    "identifier": "dbstore",
    "newPage": true,
    "searchKey": "enterprise/internal/codeintel/stores/dbstore",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package dbstore"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/internal/codeintel/stores/dbstore#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#DefinitionDumpsLimit",
              "documentation": {
                "identifier": "DefinitionDumpsLimit",
                "newPage": false,
                "searchKey": "dbstore.DefinitionDumpsLimit",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DefinitionDumpsLimit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DefinitionDumpsLimit = 10\n```\n\nDefinitionDumpsLimit is the maximum number of records that can be returned from DefinitionDumps. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#DeletedRepositoryGracePeriod",
              "documentation": {
                "identifier": "DeletedRepositoryGracePeriod",
                "newPage": false,
                "searchKey": "dbstore.DeletedRepositoryGracePeriod",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DeletedRepositoryGracePeriod"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DeletedRepositoryGracePeriod = time.Minute * 30\n```\n\nDeletedRepositoryGracePeriod is the minimum allowable duration between a repo deletion and the upload and index records for that repository being deleted. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#DependencyIndexingJobMaxNumResets",
              "documentation": {
                "identifier": "DependencyIndexingJobMaxNumResets",
                "newPage": false,
                "searchKey": "dbstore.DependencyIndexingJobMaxNumResets",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DependencyIndexingJobMaxNumResets"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DependencyIndexingJobMaxNumResets = 3\n```\n\nDependencyIndexingJobMaxNumResets is the maximum number of times a dependency indexing job can be reset. If an job's failed attempts counter reaches this threshold, it will be moved into \"errored\" rather than \"queued\" on its next reset. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#IndexMaxNumResets",
              "documentation": {
                "identifier": "IndexMaxNumResets",
                "newPage": false,
                "searchKey": "dbstore.IndexMaxNumResets",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const IndexMaxNumResets"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst IndexMaxNumResets = 3\n```\n\nIndexMaxNumResets is the maximum number of times an index can be reset. If an index's failed attempts counter reaches this threshold, it will be moved into \"errored\" rather than \"queued\" on its next reset. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#StalledDependencyIndexingJobMaxAge",
              "documentation": {
                "identifier": "StalledDependencyIndexingJobMaxAge",
                "newPage": false,
                "searchKey": "dbstore.StalledDependencyIndexingJobMaxAge",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const StalledDependencyIndexingJobMaxAge"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst StalledDependencyIndexingJobMaxAge = time.Second * 5\n```\n\nStalledDependencyIndexingJobMaxAge is the maximum allowable duration between updating the state of a dependency indexing job as \"processing\" and locking the job row during processing. An unlocked row that is marked as processing likely indicates that the worker that dequeued the job has died. There should be a nearly-zero delay between these states during normal operation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#StalledIndexMaxAge",
              "documentation": {
                "identifier": "StalledIndexMaxAge",
                "newPage": false,
                "searchKey": "dbstore.StalledIndexMaxAge",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const StalledIndexMaxAge"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst StalledIndexMaxAge = time.Second * 5\n```\n\nStalledIndexMaxAge is the maximum allowable duration between updating the state of an index as \"processing\" and locking the index row during processing. An unlocked row that is marked as processing likely indicates that the indexer that dequeued the index has died. There should be a nearly-zero delay between these states during normal operation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#StalledUploadMaxAge",
              "documentation": {
                "identifier": "StalledUploadMaxAge",
                "newPage": false,
                "searchKey": "dbstore.StalledUploadMaxAge",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const StalledUploadMaxAge"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst StalledUploadMaxAge = time.Second * 5\n```\n\nStalledUploadMaxAge is the maximum allowable duration between updating the state of an upload as \"processing\" and locking the upload row during processing. An unlocked row that is marked as processing likely indicates that the worker that dequeued the upload has died. There should be a nearly-zero delay between these states during normal operation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#UploadMaxNumResets",
              "documentation": {
                "identifier": "UploadMaxNumResets",
                "newPage": false,
                "searchKey": "dbstore.UploadMaxNumResets",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const UploadMaxNumResets"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst UploadMaxNumResets = 3\n```\n\nUploadMaxNumResets is the maximum number of times an upload can be reset. If an upload's failed attempts counter reaches this threshold, it will be moved into \"errored\" rather than \"queued\" on its next reset. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#addUploadPartQuery",
              "documentation": {
                "identifier": "addUploadPartQuery",
                "newPage": false,
                "searchKey": "dbstore.addUploadPartQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const addUploadPartQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst addUploadPartQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#bulkTransferQuery",
              "documentation": {
                "identifier": "bulkTransferQuery",
                "newPage": false,
                "searchKey": "dbstore.bulkTransferQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const bulkTransferQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst bulkTransferQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#calculateVisibleUploadsCommitGraphQuery",
              "documentation": {
                "identifier": "calculateVisibleUploadsCommitGraphQuery",
                "newPage": false,
                "searchKey": "dbstore.calculateVisibleUploadsCommitGraphQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const calculateVisibleUploadsCommitGraphQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst calculateVisibleUploadsCommitGraphQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#calculateVisibleUploadsDirtyRepositoryQuery",
              "documentation": {
                "identifier": "calculateVisibleUploadsDirtyRepositoryQuery",
                "newPage": false,
                "searchKey": "dbstore.calculateVisibleUploadsDirtyRepositoryQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const calculateVisibleUploadsDirtyRepositoryQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst calculateVisibleUploadsDirtyRepositoryQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#commitGraphQuery",
              "documentation": {
                "identifier": "commitGraphQuery",
                "newPage": false,
                "searchKey": "dbstore.commitGraphQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const commitGraphQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst commitGraphQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#definitionDumpsQuery",
              "documentation": {
                "identifier": "definitionDumpsQuery",
                "newPage": false,
                "searchKey": "dbstore.definitionDumpsQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const definitionDumpsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst definitionDumpsQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#deleteIndexByIDQuery",
              "documentation": {
                "identifier": "deleteIndexByIDQuery",
                "newPage": false,
                "searchKey": "dbstore.deleteIndexByIDQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const deleteIndexByIDQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst deleteIndexByIDQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#deleteIndexesWithoutRepositoryQuery",
              "documentation": {
                "identifier": "deleteIndexesWithoutRepositoryQuery",
                "newPage": false,
                "searchKey": "dbstore.deleteIndexesWithoutRepositoryQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const deleteIndexesWithoutRepositoryQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst deleteIndexesWithoutRepositoryQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#deleteOldIndexesQuery",
              "documentation": {
                "identifier": "deleteOldIndexesQuery",
                "newPage": false,
                "searchKey": "dbstore.deleteOldIndexesQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const deleteOldIndexesQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst deleteOldIndexesQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#deleteOverlappingDumpsQuery",
              "documentation": {
                "identifier": "deleteOverlappingDumpsQuery",
                "newPage": false,
                "searchKey": "dbstore.deleteOverlappingDumpsQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const deleteOverlappingDumpsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst deleteOverlappingDumpsQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#deleteUploadByIDQuery",
              "documentation": {
                "identifier": "deleteUploadByIDQuery",
                "newPage": false,
                "searchKey": "dbstore.deleteUploadByIDQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const deleteUploadByIDQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst deleteUploadByIDQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#deleteUploadsStuckUploadingQuery",
              "documentation": {
                "identifier": "deleteUploadsStuckUploadingQuery",
                "newPage": false,
                "searchKey": "dbstore.deleteUploadsStuckUploadingQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const deleteUploadsStuckUploadingQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst deleteUploadsStuckUploadingQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#deleteUploadsWithoutRepositoryQuery",
              "documentation": {
                "identifier": "deleteUploadsWithoutRepositoryQuery",
                "newPage": false,
                "searchKey": "dbstore.deleteUploadsWithoutRepositoryQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const deleteUploadsWithoutRepositoryQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst deleteUploadsWithoutRepositoryQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#dirtyRepositoriesQuery",
              "documentation": {
                "identifier": "dirtyRepositoriesQuery",
                "newPage": false,
                "searchKey": "dbstore.dirtyRepositoriesQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const dirtyRepositoriesQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst dirtyRepositoriesQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#findClosestDumpsFromGraphFragmentCommitGraphQuery",
              "documentation": {
                "identifier": "findClosestDumpsFromGraphFragmentCommitGraphQuery",
                "newPage": false,
                "searchKey": "dbstore.findClosestDumpsFromGraphFragmentCommitGraphQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const findClosestDumpsFromGraphFragmentCommitGraphQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst findClosestDumpsFromGraphFragmentCommitGraphQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#findClosestDumpsFromGraphFragmentQuery",
              "documentation": {
                "identifier": "findClosestDumpsFromGraphFragmentQuery",
                "newPage": false,
                "searchKey": "dbstore.findClosestDumpsFromGraphFragmentQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const findClosestDumpsFromGraphFragmentQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst findClosestDumpsFromGraphFragmentQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#findClosestDumpsQuery",
              "documentation": {
                "identifier": "findClosestDumpsQuery",
                "newPage": false,
                "searchKey": "dbstore.findClosestDumpsQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const findClosestDumpsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst findClosestDumpsQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#getAutoIndexDisabledRepositoriesQuery",
              "documentation": {
                "identifier": "getAutoIndexDisabledRepositoriesQuery",
                "newPage": false,
                "searchKey": "dbstore.getAutoIndexDisabledRepositoriesQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const getAutoIndexDisabledRepositoriesQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst getAutoIndexDisabledRepositoriesQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#getDumpsByIDsQuery",
              "documentation": {
                "identifier": "getDumpsByIDsQuery",
                "newPage": false,
                "searchKey": "dbstore.getDumpsByIDsQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const getDumpsByIDsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst getDumpsByIDsQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#getIndexByIDQuery",
              "documentation": {
                "identifier": "getIndexByIDQuery",
                "newPage": false,
                "searchKey": "dbstore.getIndexByIDQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const getIndexByIDQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst getIndexByIDQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#getIndexConfigurationByRepositoryIDQuery",
              "documentation": {
                "identifier": "getIndexConfigurationByRepositoryIDQuery",
                "newPage": false,
                "searchKey": "dbstore.getIndexConfigurationByRepositoryIDQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const getIndexConfigurationByRepositoryIDQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst getIndexConfigurationByRepositoryIDQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#getIndexesByIDsQuery",
              "documentation": {
                "identifier": "getIndexesByIDsQuery",
                "newPage": false,
                "searchKey": "dbstore.getIndexesByIDsQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const getIndexesByIDsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst getIndexesByIDsQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#getIndexesCountQuery",
              "documentation": {
                "identifier": "getIndexesCountQuery",
                "newPage": false,
                "searchKey": "dbstore.getIndexesCountQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const getIndexesCountQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst getIndexesCountQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#getIndexesQuery",
              "documentation": {
                "identifier": "getIndexesQuery",
                "newPage": false,
                "searchKey": "dbstore.getIndexesQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const getIndexesQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst getIndexesQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#getOldestCommitDateQuery",
              "documentation": {
                "identifier": "getOldestCommitDateQuery",
                "newPage": false,
                "searchKey": "dbstore.getOldestCommitDateQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const getOldestCommitDateQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst getOldestCommitDateQuery = ...\n```\n\nNote: we check against '-infinity' here, as the backfill operation will use this sentinel value in the case that the commit is no longer know by gitserver. This allows the backfill migration to make progress without having pristine database. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#getRepositoriesWithIndexConfigurationQuery",
              "documentation": {
                "identifier": "getRepositoriesWithIndexConfigurationQuery",
                "newPage": false,
                "searchKey": "dbstore.getRepositoriesWithIndexConfigurationQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const getRepositoriesWithIndexConfigurationQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst getRepositoriesWithIndexConfigurationQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#getUploadByIDQuery",
              "documentation": {
                "identifier": "getUploadByIDQuery",
                "newPage": false,
                "searchKey": "dbstore.getUploadByIDQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const getUploadByIDQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst getUploadByIDQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#getUploadsByIDsQuery",
              "documentation": {
                "identifier": "getUploadsByIDsQuery",
                "newPage": false,
                "searchKey": "dbstore.getUploadsByIDsQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const getUploadsByIDsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst getUploadsByIDsQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#getUploadsCountQuery",
              "documentation": {
                "identifier": "getUploadsCountQuery",
                "newPage": false,
                "searchKey": "dbstore.getUploadsCountQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const getUploadsCountQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst getUploadsCountQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#getUploadsQuery",
              "documentation": {
                "identifier": "getUploadsQuery",
                "newPage": false,
                "searchKey": "dbstore.getUploadsQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const getUploadsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst getUploadsQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#hardDeleteUploadByIDQuery",
              "documentation": {
                "identifier": "hardDeleteUploadByIDQuery",
                "newPage": false,
                "searchKey": "dbstore.hardDeleteUploadByIDQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const hardDeleteUploadByIDQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst hardDeleteUploadByIDQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#hasCommitQuery",
              "documentation": {
                "identifier": "hasCommitQuery",
                "newPage": false,
                "searchKey": "dbstore.hasCommitQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const hasCommitQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst hasCommitQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#hasRepositoryQuery",
              "documentation": {
                "identifier": "hasRepositoryQuery",
                "newPage": false,
                "searchKey": "dbstore.hasRepositoryQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const hasRepositoryQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst hasRepositoryQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#indexAssociatedUploadIDQueryFragment",
              "documentation": {
                "identifier": "indexAssociatedUploadIDQueryFragment",
                "newPage": false,
                "searchKey": "dbstore.indexAssociatedUploadIDQueryFragment",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const indexAssociatedUploadIDQueryFragment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst indexAssociatedUploadIDQueryFragment = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#indexRankQueryFragment",
              "documentation": {
                "identifier": "indexRankQueryFragment",
                "newPage": false,
                "searchKey": "dbstore.indexRankQueryFragment",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const indexRankQueryFragment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst indexRankQueryFragment = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#insertDependencyIndexingJobQuery",
              "documentation": {
                "identifier": "insertDependencyIndexingJobQuery",
                "newPage": false,
                "searchKey": "dbstore.insertDependencyIndexingJobQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const insertDependencyIndexingJobQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst insertDependencyIndexingJobQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#insertIndexQuery",
              "documentation": {
                "identifier": "insertIndexQuery",
                "newPage": false,
                "searchKey": "dbstore.insertIndexQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const insertIndexQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst insertIndexQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#insertUploadQuery",
              "documentation": {
                "identifier": "insertUploadQuery",
                "newPage": false,
                "searchKey": "dbstore.insertUploadQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const insertUploadQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst insertUploadQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#isQueuedQuery",
              "documentation": {
                "identifier": "isQueuedQuery",
                "newPage": false,
                "searchKey": "dbstore.isQueuedQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const isQueuedQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst isQueuedQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#markFailedQuery",
              "documentation": {
                "identifier": "markFailedQuery",
                "newPage": false,
                "searchKey": "dbstore.markFailedQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const markFailedQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst markFailedQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#markQueuedQuery",
              "documentation": {
                "identifier": "markQueuedQuery",
                "newPage": false,
                "searchKey": "dbstore.markQueuedQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const markQueuedQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst markQueuedQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#markRepositoryAsDirtyQuery",
              "documentation": {
                "identifier": "markRepositoryAsDirtyQuery",
                "newPage": false,
                "searchKey": "dbstore.markRepositoryAsDirtyQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const markRepositoryAsDirtyQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst markRepositoryAsDirtyQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#nearestUploadsDeleteQuery",
              "documentation": {
                "identifier": "nearestUploadsDeleteQuery",
                "newPage": false,
                "searchKey": "dbstore.nearestUploadsDeleteQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const nearestUploadsDeleteQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst nearestUploadsDeleteQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#nearestUploadsInsertQuery",
              "documentation": {
                "identifier": "nearestUploadsInsertQuery",
                "newPage": false,
                "searchKey": "dbstore.nearestUploadsInsertQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const nearestUploadsInsertQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst nearestUploadsInsertQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#nearestUploadsLinksDeleteQuery",
              "documentation": {
                "identifier": "nearestUploadsLinksDeleteQuery",
                "newPage": false,
                "searchKey": "dbstore.nearestUploadsLinksDeleteQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const nearestUploadsLinksDeleteQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst nearestUploadsLinksDeleteQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#nearestUploadsLinksInsertQuery",
              "documentation": {
                "identifier": "nearestUploadsLinksInsertQuery",
                "newPage": false,
                "searchKey": "dbstore.nearestUploadsLinksInsertQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const nearestUploadsLinksInsertQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst nearestUploadsLinksInsertQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#nearestUploadsLinksUpdateQuery",
              "documentation": {
                "identifier": "nearestUploadsLinksUpdateQuery",
                "newPage": false,
                "searchKey": "dbstore.nearestUploadsLinksUpdateQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const nearestUploadsLinksUpdateQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst nearestUploadsLinksUpdateQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#nearestUploadsUpdateQuery",
              "documentation": {
                "identifier": "nearestUploadsUpdateQuery",
                "newPage": false,
                "searchKey": "dbstore.nearestUploadsUpdateQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const nearestUploadsUpdateQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst nearestUploadsUpdateQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#referenceIDsAndFiltersBaseQuery",
              "documentation": {
                "identifier": "referenceIDsAndFiltersBaseQuery",
                "newPage": false,
                "searchKey": "dbstore.referenceIDsAndFiltersBaseQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const referenceIDsAndFiltersBaseQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst referenceIDsAndFiltersBaseQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#referenceIDsAndFiltersCTEDefinitions",
              "documentation": {
                "identifier": "referenceIDsAndFiltersCTEDefinitions",
                "newPage": false,
                "searchKey": "dbstore.referenceIDsAndFiltersCTEDefinitions",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const referenceIDsAndFiltersCTEDefinitions"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst referenceIDsAndFiltersCTEDefinitions = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#referenceIDsAndFiltersCountQuery",
              "documentation": {
                "identifier": "referenceIDsAndFiltersCountQuery",
                "newPage": false,
                "searchKey": "dbstore.referenceIDsAndFiltersCountQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const referenceIDsAndFiltersCountQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst referenceIDsAndFiltersCountQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#referenceIDsAndFiltersQuery",
              "documentation": {
                "identifier": "referenceIDsAndFiltersQuery",
                "newPage": false,
                "searchKey": "dbstore.referenceIDsAndFiltersQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const referenceIDsAndFiltersQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst referenceIDsAndFiltersQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#referencesForUploadQuery",
              "documentation": {
                "identifier": "referencesForUploadQuery",
                "newPage": false,
                "searchKey": "dbstore.referencesForUploadQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const referencesForUploadQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst referencesForUploadQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#refreshCommitResolvabilityQuery",
              "documentation": {
                "identifier": "refreshCommitResolvabilityQuery",
                "newPage": false,
                "searchKey": "dbstore.refreshCommitResolvabilityQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const refreshCommitResolvabilityQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst refreshCommitResolvabilityQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#repoNameQuery",
              "documentation": {
                "identifier": "repoNameQuery",
                "newPage": false,
                "searchKey": "dbstore.repoNameQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const repoNameQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst repoNameQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#softDeleteOldUploadsQuery",
              "documentation": {
                "identifier": "softDeleteOldUploadsQuery",
                "newPage": false,
                "searchKey": "dbstore.softDeleteOldUploadsQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const softDeleteOldUploadsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst softDeleteOldUploadsQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#staleSourcedCommitsQuery",
              "documentation": {
                "identifier": "staleSourcedCommitsQuery",
                "newPage": false,
                "searchKey": "dbstore.staleSourcedCommitsQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const staleSourcedCommitsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst staleSourcedCommitsQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#staleSourcedCommitsSubquery",
              "documentation": {
                "identifier": "staleSourcedCommitsSubquery",
                "newPage": false,
                "searchKey": "dbstore.staleSourcedCommitsSubquery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const staleSourcedCommitsSubquery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst staleSourcedCommitsSubquery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#temporaryNearestUploadsLinksTableQuery",
              "documentation": {
                "identifier": "temporaryNearestUploadsLinksTableQuery",
                "newPage": false,
                "searchKey": "dbstore.temporaryNearestUploadsLinksTableQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const temporaryNearestUploadsLinksTableQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst temporaryNearestUploadsLinksTableQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#temporaryNearestUploadsTableQuery",
              "documentation": {
                "identifier": "temporaryNearestUploadsTableQuery",
                "newPage": false,
                "searchKey": "dbstore.temporaryNearestUploadsTableQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const temporaryNearestUploadsTableQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst temporaryNearestUploadsTableQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#temporaryUploadsVisibleAtTipTableQuery",
              "documentation": {
                "identifier": "temporaryUploadsVisibleAtTipTableQuery",
                "newPage": false,
                "searchKey": "dbstore.temporaryUploadsVisibleAtTipTableQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const temporaryUploadsVisibleAtTipTableQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst temporaryUploadsVisibleAtTipTableQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#updateCommitedAtQuery",
              "documentation": {
                "identifier": "updateCommitedAtQuery",
                "newPage": false,
                "searchKey": "dbstore.updateCommitedAtQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const updateCommitedAtQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst updateCommitedAtQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#updateIndexConfigurationByRepositoryIDQuery",
              "documentation": {
                "identifier": "updateIndexConfigurationByRepositoryIDQuery",
                "newPage": false,
                "searchKey": "dbstore.updateIndexConfigurationByRepositoryIDQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const updateIndexConfigurationByRepositoryIDQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst updateIndexConfigurationByRepositoryIDQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#updatePackagesInsertQuery",
              "documentation": {
                "identifier": "updatePackagesInsertQuery",
                "newPage": false,
                "searchKey": "dbstore.updatePackagesInsertQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const updatePackagesInsertQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst updatePackagesInsertQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#updatePackagesTemporaryTableQuery",
              "documentation": {
                "identifier": "updatePackagesTemporaryTableQuery",
                "newPage": false,
                "searchKey": "dbstore.updatePackagesTemporaryTableQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const updatePackagesTemporaryTableQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst updatePackagesTemporaryTableQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#updateReferencesInsertQuery",
              "documentation": {
                "identifier": "updateReferencesInsertQuery",
                "newPage": false,
                "searchKey": "dbstore.updateReferencesInsertQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const updateReferencesInsertQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst updateReferencesInsertQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#updateReferencesTemporaryTableQuery",
              "documentation": {
                "identifier": "updateReferencesTemporaryTableQuery",
                "newPage": false,
                "searchKey": "dbstore.updateReferencesTemporaryTableQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const updateReferencesTemporaryTableQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst updateReferencesTemporaryTableQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#uploadRankQueryFragment",
              "documentation": {
                "identifier": "uploadRankQueryFragment",
                "newPage": false,
                "searchKey": "dbstore.uploadRankQueryFragment",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const uploadRankQueryFragment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst uploadRankQueryFragment = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#uploadsVisibleAtTipDeleteQuery",
              "documentation": {
                "identifier": "uploadsVisibleAtTipDeleteQuery",
                "newPage": false,
                "searchKey": "dbstore.uploadsVisibleAtTipDeleteQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const uploadsVisibleAtTipDeleteQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst uploadsVisibleAtTipDeleteQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#uploadsVisibleAtTipInsertQuery",
              "documentation": {
                "identifier": "uploadsVisibleAtTipInsertQuery",
                "newPage": false,
                "searchKey": "dbstore.uploadsVisibleAtTipInsertQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const uploadsVisibleAtTipInsertQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst uploadsVisibleAtTipInsertQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#visibleAtTipSubselectQuery",
              "documentation": {
                "identifier": "visibleAtTipSubselectQuery",
                "newPage": false,
                "searchKey": "dbstore.visibleAtTipSubselectQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const visibleAtTipSubselectQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst visibleAtTipSubselectQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#visibleUploadCandidatesQuery",
              "documentation": {
                "identifier": "visibleUploadCandidatesQuery",
                "newPage": false,
                "searchKey": "dbstore.visibleUploadCandidatesQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const visibleUploadCandidatesQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst visibleUploadCandidatesQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#visibleUploadsQuery",
              "documentation": {
                "identifier": "visibleUploadsQuery",
                "newPage": false,
                "searchKey": "dbstore.visibleUploadsQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const visibleUploadsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst visibleUploadsQuery = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/codeintel/stores/dbstore#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#ErrDequeueRace",
              "documentation": {
                "identifier": "ErrDequeueRace",
                "newPage": false,
                "searchKey": "dbstore.ErrDequeueRace",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrDequeueRace"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrDequeueRace = errors.New(\"dequeue race\")\n```\n\nErrDequeueRace occurs when an upload selected for dequeue has been locked by another worker. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#ErrDequeueTransaction",
              "documentation": {
                "identifier": "ErrDequeueTransaction",
                "newPage": false,
                "searchKey": "dbstore.ErrDequeueTransaction",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrDequeueTransaction"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrDequeueTransaction = errors.New(\"unexpected transaction\")\n```\n\nErrDequeueTransaction occurs when Dequeue is called from inside a transaction. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#ErrIllegalLimit",
              "documentation": {
                "identifier": "ErrIllegalLimit",
                "newPage": false,
                "searchKey": "dbstore.ErrIllegalLimit",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrIllegalLimit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrIllegalLimit = errors.New(\"illegal limit\")\n```\n\nErrIllegalLimit occurs when a limit is not strictly positive. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#ErrNoSavepoint",
              "documentation": {
                "identifier": "ErrNoSavepoint",
                "newPage": false,
                "searchKey": "dbstore.ErrNoSavepoint",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrNoSavepoint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrNoSavepoint = errors.New(\"no savepoint defined\")\n```\n\nErrNoSavepoint occurs when there is no savepont to rollback to. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#ErrNoTransaction",
              "documentation": {
                "identifier": "ErrNoTransaction",
                "newPage": false,
                "searchKey": "dbstore.ErrNoTransaction",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrNoTransaction"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrNoTransaction = errors.New(\"store: not in a transaction\")\n```\n\nErrNoTransaction occurs when Savepoint or RollbackToSavepoint is called outside of a transaction. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#ErrNotTransactable",
              "documentation": {
                "identifier": "ErrNotTransactable",
                "newPage": false,
                "searchKey": "dbstore.ErrNotTransactable",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrNotTransactable"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrNotTransactable = errors.New(\"store: not transactable\")\n```\n\nErrNotTransactable occurs when Transact is called on a store whose underlying store handle does not support beginning a transaction. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#ErrUnknownRepository",
              "documentation": {
                "identifier": "ErrUnknownRepository",
                "newPage": false,
                "searchKey": "dbstore.ErrUnknownRepository",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrUnknownRepository"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrUnknownRepository = errors.New(\"unknown repository\")\n```\n\nErrUnknownRepository occurs when a repository does not exist. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#IndexColumnsWithNullRank",
              "documentation": {
                "identifier": "IndexColumnsWithNullRank",
                "newPage": false,
                "searchKey": "dbstore.IndexColumnsWithNullRank",
                "tags": [
                  "variable",
                  "array",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var IndexColumnsWithNullRank"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar IndexColumnsWithNullRank = indexColumnsWithNullRank\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#ScanFirstIndexRecord",
              "documentation": {
                "identifier": "ScanFirstIndexRecord",
                "newPage": false,
                "searchKey": "dbstore.ScanFirstIndexRecord",
                "tags": [
                  "variable",
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ScanFirstIndexRecord"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ScanFirstIndexRecord = scanFirstIndexRecord\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#dependencyIndexingJobColumns",
              "documentation": {
                "identifier": "dependencyIndexingJobColumns",
                "newPage": false,
                "searchKey": "dbstore.dependencyIndexingJobColumns",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var dependencyIndexingJobColumns"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dependencyIndexingJobColumns = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#dependencyIndexingJobWorkerStoreOptions",
              "documentation": {
                "identifier": "dependencyIndexingJobWorkerStoreOptions",
                "newPage": false,
                "searchKey": "dbstore.dependencyIndexingJobWorkerStoreOptions",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var dependencyIndexingJobWorkerStoreOptions"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dependencyIndexingJobWorkerStoreOptions = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#indexColumnsWithNullRank",
              "documentation": {
                "identifier": "indexColumnsWithNullRank",
                "newPage": false,
                "searchKey": "dbstore.indexColumnsWithNullRank",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var indexColumnsWithNullRank"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar indexColumnsWithNullRank = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#indexWorkerStoreOptions",
              "documentation": {
                "identifier": "indexWorkerStoreOptions",
                "newPage": false,
                "searchKey": "dbstore.indexWorkerStoreOptions",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var indexWorkerStoreOptions"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar indexWorkerStoreOptions = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#uploadColumnsWithNullRank",
              "documentation": {
                "identifier": "uploadColumnsWithNullRank",
                "newPage": false,
                "searchKey": "dbstore.uploadColumnsWithNullRank",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var uploadColumnsWithNullRank"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar uploadColumnsWithNullRank = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#uploadWorkerStoreOptions",
              "documentation": {
                "identifier": "uploadWorkerStoreOptions",
                "newPage": false,
                "searchKey": "dbstore.uploadWorkerStoreOptions",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var uploadWorkerStoreOptions"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar uploadWorkerStoreOptions = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/codeintel/stores/dbstore#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#DependencyIndexingJob",
              "documentation": {
                "identifier": "DependencyIndexingJob",
                "newPage": false,
                "searchKey": "dbstore.DependencyIndexingJob",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DependencyIndexingJob struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DependencyIndexingJob struct {\n\tID             int        `json:\"id\"`\n\tState          string     `json:\"state\"`\n\tFailureMessage *string    `json:\"failureMessage\"`\n\tStartedAt      *time.Time `json:\"startedAt\"`\n\tFinishedAt     *time.Time `json:\"finishedAt\"`\n\tProcessAfter   *time.Time `json:\"processAfter\"`\n\tNumResets      int        `json:\"numResets\"`\n\tNumFailures    int        `json:\"numFailures\"`\n\tUploadID       int        `json:\"uploadId\"`\n}\n```\n\nDependencyIndexingJob is a subset of the lsif_dependency_indexing_jobs table and acts as the queue and execution record for indexing the dependencies of a particular completed upload. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#scanFirstDependencyIndexingJob",
                    "documentation": {
                      "identifier": "scanFirstDependencyIndexingJob",
                      "newPage": false,
                      "searchKey": "dbstore.scanFirstDependencyIndexingJob",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func scanFirstDependencyIndexingJob(rows *sql.Rows, err error) (DependencyIndexingJob, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc scanFirstDependencyIndexingJob(rows *sql.Rows, err error) (DependencyIndexingJob, bool, error)\n```\n\nscanFirstDependencyIndexingJob scans a slice of dependency indexing jobs from the return value of `*Store.query` and returns the first. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#DependencyIndexingJob.RecordID",
                    "documentation": {
                      "identifier": "DependencyIndexingJob.RecordID",
                      "newPage": false,
                      "searchKey": "dbstore.DependencyIndexingJob.RecordID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u DependencyIndexingJob) RecordID() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u DependencyIndexingJob) RecordID() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#DockerStep",
              "documentation": {
                "identifier": "DockerStep",
                "newPage": false,
                "searchKey": "dbstore.DockerStep",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DockerStep struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DockerStep struct {\n\tRoot     string   `json:\"root\"`\n\tImage    string   `json:\"image\"`\n\tCommands []string `json:\"commands\"`\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#DockerStep.Scan",
                    "documentation": {
                      "identifier": "DockerStep.Scan",
                      "newPage": false,
                      "searchKey": "dbstore.DockerStep.Scan",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *DockerStep) Scan(value interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *DockerStep) Scan(value interface{}) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#DockerStep.Value",
                    "documentation": {
                      "identifier": "DockerStep.Value",
                      "newPage": false,
                      "searchKey": "dbstore.DockerStep.Value",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s DockerStep) Value() (driver.Value, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s DockerStep) Value() (driver.Value, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#Dump",
              "documentation": {
                "identifier": "Dump",
                "newPage": false,
                "searchKey": "dbstore.Dump",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Dump struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Dump struct {\n\tID                int        `json:\"id\"`\n\tCommit            string     `json:\"commit\"`\n\tRoot              string     `json:\"root\"`\n\tVisibleAtTip      bool       `json:\"visibleAtTip\"`\n\tUploadedAt        time.Time  `json:\"uploadedAt\"`\n\tState             string     `json:\"state\"`\n\tFailureMessage    *string    `json:\"failureMessage\"`\n\tStartedAt         *time.Time `json:\"startedAt\"`\n\tFinishedAt        *time.Time `json:\"finishedAt\"`\n\tProcessAfter      *time.Time `json:\"processAfter\"`\n\tNumResets         int        `json:\"numResets\"`\n\tNumFailures       int        `json:\"numFailures\"`\n\tRepositoryID      int        `json:\"repositoryId\"`\n\tRepositoryName    string     `json:\"repositoryName\"`\n\tIndexer           string     `json:\"indexer\"`\n\tAssociatedIndexID *int       `json:\"associatedIndex\"`\n}\n```\n\nDump is a subset of the lsif_uploads table (queried via the lsif_dumps_with_repository_name view) and stores only processed records. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#FindClosestDumpsTestCase",
              "documentation": {
                "identifier": "FindClosestDumpsTestCase",
                "newPage": false,
                "searchKey": "dbstore.FindClosestDumpsTestCase",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FindClosestDumpsTestCase struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FindClosestDumpsTestCase struct {\n\tcommit              string\n\tfile                string\n\trootMustEnclosePath bool\n\tindexer             string\n\tgraph               *gitserver.CommitGraph\n\tgraphFragmentOnly   bool\n\tanyOfIDs            []int\n\tallOfIDs            []int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#GetIndexesOptions",
              "documentation": {
                "identifier": "GetIndexesOptions",
                "newPage": false,
                "searchKey": "dbstore.GetIndexesOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GetIndexesOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GetIndexesOptions struct {\n\tRepositoryID int\n\tState        string\n\tTerm         string\n\tLimit        int\n\tOffset       int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#GetUploadsOptions",
              "documentation": {
                "identifier": "GetUploadsOptions",
                "newPage": false,
                "searchKey": "dbstore.GetUploadsOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GetUploadsOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GetUploadsOptions struct {\n\tRepositoryID   int\n\tState          string\n\tTerm           string\n\tVisibleAtTip   bool\n\tUploadedBefore *time.Time\n\tUploadedAfter  *time.Time\n\tOldestFirst    bool\n\tLimit          int\n\tOffset         int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#Index",
              "documentation": {
                "identifier": "Index",
                "newPage": false,
                "searchKey": "dbstore.Index",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Index struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Index struct {\n\tID                 int                            `json:\"id\"`\n\tCommit             string                         `json:\"commit\"`\n\tQueuedAt           time.Time                      `json:\"queuedAt\"`\n\tState              string                         `json:\"state\"`\n\tFailureMessage     *string                        `json:\"failureMessage\"`\n\tStartedAt          *time.Time                     `json:\"startedAt\"`\n\tFinishedAt         *time.Time                     `json:\"finishedAt\"`\n\tProcessAfter       *time.Time                     `json:\"processAfter\"`\n\tNumResets          int                            `json:\"numResets\"`\n\tNumFailures        int                            `json:\"numFailures\"`\n\tRepositoryID       int                            `json:\"repositoryId\"`\n\tLocalSteps         []string                       `json:\"local_steps\"`\n\tRepositoryName     string                         `json:\"repositoryName\"`\n\tDockerSteps        []DockerStep                   `json:\"docker_steps\"`\n\tRoot               string                         `json:\"root\"`\n\tIndexer            string                         `json:\"indexer\"`\n\tIndexerArgs        []string                       `json:\"indexer_args\"` // TODO - convert this to `IndexCommand string`\n\tOutfile            string                         `json:\"outfile\"`\n\tExecutionLogs      []workerutil.ExecutionLogEntry `json:\"execution_logs\"`\n\tRank               *int                           `json:\"placeInQueue\"`\n\tAssociatedUploadID *int                           `json:\"associatedUpload\"`\n}\n```\n\nIndex is a subset of the lsif_indexes table and stores both processed and unprocessed records. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#scanFirstIndex",
                    "documentation": {
                      "identifier": "scanFirstIndex",
                      "newPage": false,
                      "searchKey": "dbstore.scanFirstIndex",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func scanFirstIndex(rows *sql.Rows, err error) (Index, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc scanFirstIndex(rows *sql.Rows, err error) (Index, bool, error)\n```\n\nscanFirstIndex scans a slice of indexes from the return value of `*Store.query` and returns the first. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Index.RecordID",
                    "documentation": {
                      "identifier": "Index.RecordID",
                      "newPage": false,
                      "searchKey": "dbstore.Index.RecordID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i Index) RecordID() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i Index) RecordID() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#IndexConfiguration",
              "documentation": {
                "identifier": "IndexConfiguration",
                "newPage": false,
                "searchKey": "dbstore.IndexConfiguration",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexConfiguration struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexConfiguration struct {\n\tID           int    `json:\"id\"`\n\tRepositoryID int    `json:\"repository_id\"`\n\tData         []byte `json:\"data\"`\n}\n```\n\nIndexConfiguration stores the index configuration for a repository. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#scanFirstIndexConfiguration",
                    "documentation": {
                      "identifier": "scanFirstIndexConfiguration",
                      "newPage": false,
                      "searchKey": "dbstore.scanFirstIndexConfiguration",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func scanFirstIndexConfiguration(rows *sql.Rows, err error) (IndexConfiguration, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc scanFirstIndexConfiguration(rows *sql.Rows, err error) (IndexConfiguration, bool, error)\n```\n\nscanFirstIndexConfiguration scans a slice of index configurations from the return value of `*Store.query` and returns the first. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#PackageReferenceScanner",
              "documentation": {
                "identifier": "PackageReferenceScanner",
                "newPage": false,
                "searchKey": "dbstore.PackageReferenceScanner",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PackageReferenceScanner interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PackageReferenceScanner interface {\n\t// Next reads the next package reference value from the database cursor.\n\tNext() (lsifstore.PackageReference, bool, error)\n\n\t// Close the underlying row object.\n\tClose() error\n}\n```\n\nPackageReferenceScanner allows for on-demand scanning of PackageReference values. \n\nA scanner for this type was introduced as a memory optimization. Instead of reading a large number of large byte arrays into memory at once, we allow the user to request the next filter value when they are ready to process it. This allows us to hold only a single bloom filter in memory at any give time during reference requests. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#PackageReferenceScannerFromSlice",
                    "documentation": {
                      "identifier": "PackageReferenceScannerFromSlice",
                      "newPage": false,
                      "searchKey": "dbstore.PackageReferenceScannerFromSlice",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func PackageReferenceScannerFromSlice(references ...lsifstore.PackageReference) PackageReferenceScanner"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc PackageReferenceScannerFromSlice(references ...lsifstore.PackageReference) PackageReferenceScanner\n```\n\nPackageReferenceScannerFromSlice creates a PackageReferenceScanner that feeds the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#packageReferenceScannerFromRows",
                    "documentation": {
                      "identifier": "packageReferenceScannerFromRows",
                      "newPage": false,
                      "searchKey": "dbstore.packageReferenceScannerFromRows",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func packageReferenceScannerFromRows(rows *sql.Rows) PackageReferenceScanner"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc packageReferenceScannerFromRows(rows *sql.Rows) PackageReferenceScanner\n```\n\npackageReferenceScannerFromRows creates a PackageReferenceScanner that feeds the given values. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#SourcedCommits",
              "documentation": {
                "identifier": "SourcedCommits",
                "newPage": false,
                "searchKey": "dbstore.SourcedCommits",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SourcedCommits struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SourcedCommits struct {\n\tRepositoryID   int\n\tRepositoryName string\n\tCommits        []string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store",
              "documentation": {
                "identifier": "Store",
                "newPage": false,
                "searchKey": "dbstore.Store",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Store struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Store struct {\n\t*basestore.Store\n\toperations *operations\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#NewWithDB",
                    "documentation": {
                      "identifier": "NewWithDB",
                      "newPage": false,
                      "searchKey": "dbstore.NewWithDB",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewWithDB(db dbutil.DB, observationContext *observation.Context) *Store"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewWithDB(db dbutil.DB, observationContext *observation.Context) *Store\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#testStore",
                    "documentation": {
                      "identifier": "testStore",
                      "newPage": false,
                      "searchKey": "dbstore.testStore",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func testStore(db dbutil.DB) *Store"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc testStore(db dbutil.DB) *Store\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.AddUploadPart",
                    "documentation": {
                      "identifier": "Store.AddUploadPart",
                      "newPage": false,
                      "searchKey": "dbstore.Store.AddUploadPart",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) AddUploadPart(ctx context.Context, uploadID, partIndex int) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) AddUploadPart(ctx context.Context, uploadID, partIndex int) (err error)\n```\n\nAddUploadPart adds the part index to the given upload's uploaded parts array. This method is idempotent (the resulting array is deduplicated on update). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.CalculateVisibleUploads",
                    "documentation": {
                      "identifier": "Store.CalculateVisibleUploads",
                      "newPage": false,
                      "searchKey": "dbstore.Store.CalculateVisibleUploads",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) CalculateVisibleUploads(ctx context.Context, repositoryID int, commitGraph *gitserver.CommitGraph, tipCommit string, dirtyToken int, now time.Time) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) CalculateVisibleUploads(ctx context.Context, repositoryID int, commitGraph *gitserver.CommitGraph, tipCommit string, dirtyToken int, now time.Time) (err error)\n```\n\nCalculateVisibleUploads uses the given commit graph and the tip commit of the default branch to determine the set of LSIF uploads that are visible for each commit, and the set of uploads which are visible at the tip. The decorated commit graph is serialized to Postgres for use by find closest dumps queries. \n\nIf dirtyToken is supplied, the repository will be unmarked when the supplied token does matches the most recent token stored in the database, the flag will not be cleared as another request for update has come in since this token has been read. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.CommitGraphMetadata",
                    "documentation": {
                      "identifier": "Store.CommitGraphMetadata",
                      "newPage": false,
                      "searchKey": "dbstore.Store.CommitGraphMetadata",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) CommitGraphMetadata(ctx context.Context, repositoryID int) (stale bool, updatedAt *time.Time, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) CommitGraphMetadata(ctx context.Context, repositoryID int) (stale bool, updatedAt *time.Time, err error)\n```\n\nCommitGraphMetadata returns whether or not the commit graph for the given repository is stale, along with the date of the most recent commit graph refresh for the given repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.DefinitionDumps",
                    "documentation": {
                      "identifier": "Store.DefinitionDumps",
                      "newPage": false,
                      "searchKey": "dbstore.Store.DefinitionDumps",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) DefinitionDumps(ctx context.Context, monikers []semantic.QualifiedMonikerData) (_ []Dump, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) DefinitionDumps(ctx context.Context, monikers []semantic.QualifiedMonikerData) (_ []Dump, err error)\n```\n\nDefinitionDumps returns the set of dumps that define at least one of the given monikers. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.DeleteIndexByID",
                    "documentation": {
                      "identifier": "Store.DeleteIndexByID",
                      "newPage": false,
                      "searchKey": "dbstore.Store.DeleteIndexByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) DeleteIndexByID(ctx context.Context, id int) (_ bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) DeleteIndexByID(ctx context.Context, id int) (_ bool, err error)\n```\n\nDeleteIndexByID deletes an index by its identifier. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.DeleteIndexesWithoutRepository",
                    "documentation": {
                      "identifier": "Store.DeleteIndexesWithoutRepository",
                      "newPage": false,
                      "searchKey": "dbstore.Store.DeleteIndexesWithoutRepository",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) DeleteIndexesWithoutRepository(ctx context.Context, now time.Time) (_ map[int]int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) DeleteIndexesWithoutRepository(ctx context.Context, now time.Time) (_ map[int]int, err error)\n```\n\nDeleteIndexesWithoutRepository deletes indexes associated with repositories that were deleted at least DeletedRepositoryGracePeriod ago. This returns the repository identifier mapped to the number of indexes that were removed for that repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.DeleteOldIndexes",
                    "documentation": {
                      "identifier": "Store.DeleteOldIndexes",
                      "newPage": false,
                      "searchKey": "dbstore.Store.DeleteOldIndexes",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) DeleteOldIndexes(ctx context.Context, maxAge time.Duration, now time.Time) (count int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) DeleteOldIndexes(ctx context.Context, maxAge time.Duration, now time.Time) (count int, err error)\n```\n\nDeleteOldIndexes deletes indexes older than the given age. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.DeleteOverlappingDumps",
                    "documentation": {
                      "identifier": "Store.DeleteOverlappingDumps",
                      "newPage": false,
                      "searchKey": "dbstore.Store.DeleteOverlappingDumps",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) DeleteOverlappingDumps(ctx context.Context, repositoryID int, commit, root, indexer string) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) DeleteOverlappingDumps(ctx context.Context, repositoryID int, commit, root, indexer string) (err error)\n```\n\nDeleteOverlapapingDumps deletes all completed uploads for the given repository with the same commit, root, and indexer. This is necessary to perform during conversions before changing the state of a processing upload to completed as there is a unique index on these four columns. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.DeleteUploadByID",
                    "documentation": {
                      "identifier": "Store.DeleteUploadByID",
                      "newPage": false,
                      "searchKey": "dbstore.Store.DeleteUploadByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) DeleteUploadByID(ctx context.Context, id int) (_ bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) DeleteUploadByID(ctx context.Context, id int) (_ bool, err error)\n```\n\nDeleteUploadByID deletes an upload by its identifier. This method returns a true-valued flag if a record was deleted. The associated repository will be marked as dirty so that its commit graph will be updated in the background. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.DeleteUploadsStuckUploading",
                    "documentation": {
                      "identifier": "Store.DeleteUploadsStuckUploading",
                      "newPage": false,
                      "searchKey": "dbstore.Store.DeleteUploadsStuckUploading",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) DeleteUploadsStuckUploading(ctx context.Context, uploadedBefore time.Time) (_ int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) DeleteUploadsStuckUploading(ctx context.Context, uploadedBefore time.Time) (_ int, err error)\n```\n\nDeleteUploadsStuckUploading soft deletes any upload record that has been uploading since the given time. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.DeleteUploadsWithoutRepository",
                    "documentation": {
                      "identifier": "Store.DeleteUploadsWithoutRepository",
                      "newPage": false,
                      "searchKey": "dbstore.Store.DeleteUploadsWithoutRepository",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) DeleteUploadsWithoutRepository(ctx context.Context, now time.Time) (_ map[int]int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) DeleteUploadsWithoutRepository(ctx context.Context, now time.Time) (_ map[int]int, err error)\n```\n\nDeleteUploadsWithoutRepository deletes uploads associated with repositories that were deleted at least DeletedRepositoryGracePeriod ago. This returns the repository identifier mapped to the number of uploads that were removed for that repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.DirtyRepositories",
                    "documentation": {
                      "identifier": "Store.DirtyRepositories",
                      "newPage": false,
                      "searchKey": "dbstore.Store.DirtyRepositories",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) DirtyRepositories(ctx context.Context) (_ map[int]int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) DirtyRepositories(ctx context.Context) (_ map[int]int, err error)\n```\n\nDirtyRepositories returns a map from repository identifiers to a dirty token for each repository whose commit graph is out of date. This token should be passed to CalculateVisibleUploads in order to unmark the repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.FindClosestDumps",
                    "documentation": {
                      "identifier": "Store.FindClosestDumps",
                      "newPage": false,
                      "searchKey": "dbstore.Store.FindClosestDumps",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) FindClosestDumps(ctx context.Context, repositoryID int, commit, path string, rootMustEnclosePath bool, indexer string) (_ []Dump, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) FindClosestDumps(ctx context.Context, repositoryID int, commit, path string, rootMustEnclosePath bool, indexer string) (_ []Dump, err error)\n```\n\nFindClosestDumps returns the set of dumps that can most accurately answer queries for the given repository, commit, path, and optional indexer. If rootMustEnclosePath is true, then only dumps with a root which is a prefix of path are returned. Otherwise, any dump with a root intersecting the given path is returned. \n\nThis method should be used when the commit is known to exist in the lsif_nearest_uploads table. If it doesn't, then this method will return no dumps (as the input commit is not reachable from anything with an upload). The nearest uploads table must be refreshed before calling this method when the commit is unknown. \n\nBecause refreshing the commit graph can be very expensive, we also provide FindClosestDumpsFromGraphFragment. That method should be used instead in low-latency paths. It should be supplied a small fragment of the commit graph that contains the input commit as well as a commit that is likely to exist in the lsif_nearest_uploads table. This is enough to propagate the correct upload visibility data down the graph fragment. \n\nThe graph supplied to FindClosestDumpsFromGraphFragment will also determine whether or not it is possible to produce a partial set of visible uploads (ideally, we'd like to return the complete set of visible uploads, or fail). If the graph fragment is complete by depth (e.g. if the graph contains an ancestor at depth d, then the graph also contains all other ancestors up to depth d), then we get the ideal behavior. Only if we contain a partial row of ancestors will we return partial results. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.FindClosestDumpsFromGraphFragment",
                    "documentation": {
                      "identifier": "Store.FindClosestDumpsFromGraphFragment",
                      "newPage": false,
                      "searchKey": "dbstore.Store.FindClosestDumpsFromGraphFragment",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) FindClosestDumpsFromGraphFragment(ctx context.Context, repositoryID int, commit, path string, rootMustEnclosePath bool, indexer string, commitGraph *gitserver.CommitGraph) (_ []Dump, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) FindClosestDumpsFromGraphFragment(ctx context.Context, repositoryID int, commit, path string, rootMustEnclosePath bool, indexer string, commitGraph *gitserver.CommitGraph) (_ []Dump, err error)\n```\n\nFindClosestDumpsFromGraphFragment returns the set of dumps that can most accurately answer queries for the given repository, commit, path, and optional indexer by only considering the given fragment of the full git graph. See FindClosestDumps for additional details. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.GetAutoindexDisabledRepositories",
                    "documentation": {
                      "identifier": "Store.GetAutoindexDisabledRepositories",
                      "newPage": false,
                      "searchKey": "dbstore.Store.GetAutoindexDisabledRepositories",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetAutoindexDisabledRepositories(ctx context.Context) (_ []int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetAutoindexDisabledRepositories(ctx context.Context) (_ []int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.GetDumpsByIDs",
                    "documentation": {
                      "identifier": "Store.GetDumpsByIDs",
                      "newPage": false,
                      "searchKey": "dbstore.Store.GetDumpsByIDs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetDumpsByIDs(ctx context.Context, ids []int) (_ []Dump, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetDumpsByIDs(ctx context.Context, ids []int) (_ []Dump, err error)\n```\n\nGetDumpsByIDs returns a set of dumps by identifiers. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.GetIndexByID",
                    "documentation": {
                      "identifier": "Store.GetIndexByID",
                      "newPage": false,
                      "searchKey": "dbstore.Store.GetIndexByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetIndexByID(ctx context.Context, id int) (_ Index, _ bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetIndexByID(ctx context.Context, id int) (_ Index, _ bool, err error)\n```\n\nGetIndexByID returns an index by its identifier and boolean flag indicating its existence. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.GetIndexConfigurationByRepositoryID",
                    "documentation": {
                      "identifier": "Store.GetIndexConfigurationByRepositoryID",
                      "newPage": false,
                      "searchKey": "dbstore.Store.GetIndexConfigurationByRepositoryID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetIndexConfigurationByRepositoryID(ctx context.Context, repositoryID int) (_ IndexConfiguration, _ bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetIndexConfigurationByRepositoryID(ctx context.Context, repositoryID int) (_ IndexConfiguration, _ bool, err error)\n```\n\nGetIndexConfigurationByRepositoryID returns the index configuration for a repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.GetIndexes",
                    "documentation": {
                      "identifier": "Store.GetIndexes",
                      "newPage": false,
                      "searchKey": "dbstore.Store.GetIndexes",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetIndexes(ctx context.Context, opts GetIndexesOptions) (_ []Index, _ int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetIndexes(ctx context.Context, opts GetIndexesOptions) (_ []Index, _ int, err error)\n```\n\nGetIndexes returns a list of indexes and the total count of records matching the given conditions. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.GetIndexesByIDs",
                    "documentation": {
                      "identifier": "Store.GetIndexesByIDs",
                      "newPage": false,
                      "searchKey": "dbstore.Store.GetIndexesByIDs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetIndexesByIDs(ctx context.Context, ids ...int) (_ []Index, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetIndexesByIDs(ctx context.Context, ids ...int) (_ []Index, err error)\n```\n\nGetIndexesByIDs returns an index for each of the given identifiers. Not all given ids will necessarily have a corresponding element in the returned list. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.GetOldestCommitDate",
                    "documentation": {
                      "identifier": "Store.GetOldestCommitDate",
                      "newPage": false,
                      "searchKey": "dbstore.Store.GetOldestCommitDate",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetOldestCommitDate(ctx context.Context, repositoryID int) (_ time.Time, _ bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetOldestCommitDate(ctx context.Context, repositoryID int) (_ time.Time, _ bool, err error)\n```\n\nGetOldestCommitDate returns the oldest commit date for all uploads for the given repository. If there are no non-nil values, a false-valued flag is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.GetRepositoriesWithIndexConfiguration",
                    "documentation": {
                      "identifier": "Store.GetRepositoriesWithIndexConfiguration",
                      "newPage": false,
                      "searchKey": "dbstore.Store.GetRepositoriesWithIndexConfiguration",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetRepositoriesWithIndexConfiguration(ctx context.Context) (_ []int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetRepositoriesWithIndexConfiguration(ctx context.Context) (_ []int, err error)\n```\n\nGetRepositoriesWithIndexConfiguration returns the ids of repositories explicit index configuration. This does NOT return repositories that are disabled for autoindexing \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.GetUploadByID",
                    "documentation": {
                      "identifier": "Store.GetUploadByID",
                      "newPage": false,
                      "searchKey": "dbstore.Store.GetUploadByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetUploadByID(ctx context.Context, id int) (_ Upload, _ bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetUploadByID(ctx context.Context, id int) (_ Upload, _ bool, err error)\n```\n\nGetUploadByID returns an upload by its identifier and boolean flag indicating its existence. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.GetUploads",
                    "documentation": {
                      "identifier": "Store.GetUploads",
                      "newPage": false,
                      "searchKey": "dbstore.Store.GetUploads",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetUploads(ctx context.Context, opts GetUploadsOptions) (_ []Upload, _ int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetUploads(ctx context.Context, opts GetUploadsOptions) (_ []Upload, _ int, err error)\n```\n\nGetUploads returns a list of uploads and the total count of records matching the given conditions. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.GetUploadsByIDs",
                    "documentation": {
                      "identifier": "Store.GetUploadsByIDs",
                      "newPage": false,
                      "searchKey": "dbstore.Store.GetUploadsByIDs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetUploadsByIDs(ctx context.Context, ids ...int) (_ []Upload, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetUploadsByIDs(ctx context.Context, ids ...int) (_ []Upload, err error)\n```\n\nGetUploadsByIDs returns an upload for each of the given identifiers. Not all given ids will necessarily have a corresponding element in the returned list. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.HardDeleteUploadByID",
                    "documentation": {
                      "identifier": "Store.HardDeleteUploadByID",
                      "newPage": false,
                      "searchKey": "dbstore.Store.HardDeleteUploadByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) HardDeleteUploadByID(ctx context.Context, ids ...int) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) HardDeleteUploadByID(ctx context.Context, ids ...int) (err error)\n```\n\nHardDeleteUploadByID deletes the upload record with the given identifier. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.HasCommit",
                    "documentation": {
                      "identifier": "Store.HasCommit",
                      "newPage": false,
                      "searchKey": "dbstore.Store.HasCommit",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) HasCommit(ctx context.Context, repositoryID int, commit string) (_ bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) HasCommit(ctx context.Context, repositoryID int, commit string) (_ bool, err error)\n```\n\nHasCommit determines if the given commit is known for the given repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.HasRepository",
                    "documentation": {
                      "identifier": "Store.HasRepository",
                      "newPage": false,
                      "searchKey": "dbstore.Store.HasRepository",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) HasRepository(ctx context.Context, repositoryID int) (_ bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) HasRepository(ctx context.Context, repositoryID int) (_ bool, err error)\n```\n\nHasRepository determines if there is LSIF data for the given repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.InsertDependencyIndexingJob",
                    "documentation": {
                      "identifier": "Store.InsertDependencyIndexingJob",
                      "newPage": false,
                      "searchKey": "dbstore.Store.InsertDependencyIndexingJob",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) InsertDependencyIndexingJob(ctx context.Context, uploadID int) (id int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) InsertDependencyIndexingJob(ctx context.Context, uploadID int) (id int, err error)\n```\n\nInsertDependencyIndexingJob inserts a new dependency indexing job and returns its identifier. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.InsertIndex",
                    "documentation": {
                      "identifier": "Store.InsertIndex",
                      "newPage": false,
                      "searchKey": "dbstore.Store.InsertIndex",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) InsertIndex(ctx context.Context, index Index) (id int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) InsertIndex(ctx context.Context, index Index) (id int, err error)\n```\n\nInsertIndex inserts a new index and returns its identifier. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.InsertUpload",
                    "documentation": {
                      "identifier": "Store.InsertUpload",
                      "newPage": false,
                      "searchKey": "dbstore.Store.InsertUpload",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) InsertUpload(ctx context.Context, upload Upload) (id int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) InsertUpload(ctx context.Context, upload Upload) (id int, err error)\n```\n\nInsertUpload inserts a new upload and returns its identifier. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.IsQueued",
                    "documentation": {
                      "identifier": "Store.IsQueued",
                      "newPage": false,
                      "searchKey": "dbstore.Store.IsQueued",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) IsQueued(ctx context.Context, repositoryID int, commit string) (_ bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) IsQueued(ctx context.Context, repositoryID int, commit string) (_ bool, err error)\n```\n\nIsQueued returns true if there is an index or an upload for the repository and commit. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.MarkFailed",
                    "documentation": {
                      "identifier": "Store.MarkFailed",
                      "newPage": false,
                      "searchKey": "dbstore.Store.MarkFailed",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) MarkFailed(ctx context.Context, id int, reason string) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) MarkFailed(ctx context.Context, id int, reason string) (err error)\n```\n\nMarkFailed updates the state of the upload to failed, increments the num_failures column and sets the finished_at time \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.MarkQueued",
                    "documentation": {
                      "identifier": "Store.MarkQueued",
                      "newPage": false,
                      "searchKey": "dbstore.Store.MarkQueued",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) MarkQueued(ctx context.Context, id int, uploadSize *int64) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) MarkQueued(ctx context.Context, id int, uploadSize *int64) (err error)\n```\n\nMarkQueued updates the state of the upload to queued and updates the upload size. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.MarkRepositoryAsDirty",
                    "documentation": {
                      "identifier": "Store.MarkRepositoryAsDirty",
                      "newPage": false,
                      "searchKey": "dbstore.Store.MarkRepositoryAsDirty",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) MarkRepositoryAsDirty(ctx context.Context, repositoryID int) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) MarkRepositoryAsDirty(ctx context.Context, repositoryID int) (err error)\n```\n\nMarkRepositoryAsDirty marks the given repository's commit graph as out of date. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.ReferenceIDsAndFilters",
                    "documentation": {
                      "identifier": "Store.ReferenceIDsAndFilters",
                      "newPage": false,
                      "searchKey": "dbstore.Store.ReferenceIDsAndFilters",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) ReferenceIDsAndFilters(ctx context.Context, repositoryID int, commit string, monikers []semantic.QualifiedMonikerData, limit, offset int) (_ PackageReferenceScanner, _ int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) ReferenceIDsAndFilters(ctx context.Context, repositoryID int, commit string, monikers []semantic.QualifiedMonikerData, limit, offset int) (_ PackageReferenceScanner, _ int, err error)\n```\n\nReferenceIDsAndFilters returns the total count of visible uploads that may refer to one of the given monikers. Each upload identifier in the result set is paired with one or more compressed bloom filters that encode more precisely the set of identifiers imported from dependent packages. \n\nVisibility is determined in two parts: if the index belongs to the given repository, it is visible if it can be seen from the given index; otherwise, an index is visible if it can be seen from the tip of the default branch of its own repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.ReferencesForUpload",
                    "documentation": {
                      "identifier": "Store.ReferencesForUpload",
                      "newPage": false,
                      "searchKey": "dbstore.Store.ReferencesForUpload",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) ReferencesForUpload(ctx context.Context, uploadID int) (_ PackageReferenceScanner, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) ReferencesForUpload(ctx context.Context, uploadID int) (_ PackageReferenceScanner, err error)\n```\n\nReferencesForUpload returns the set of import monikers attached to the given upload identifier. The scanner will return nulls for the Filter field as it's expected to be unused (and rather heavy) by callers. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.RefreshCommitResolvability",
                    "documentation": {
                      "identifier": "Store.RefreshCommitResolvability",
                      "newPage": false,
                      "searchKey": "dbstore.Store.RefreshCommitResolvability",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) RefreshCommitResolvability(ctx context.Context, repositoryID int, commit string, delete bool, now time.Time) (uploadsUpdated int, indexesUpdated int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) RefreshCommitResolvability(ctx context.Context, repositoryID int, commit string, delete bool, now time.Time) (uploadsUpdated int, indexesUpdated int, err error)\n```\n\nRefreshCommitResolvability will update each upload and index record belonging to the given repository identifier and commit. If the delete flag is true, then the state of each matching record will be soft-deleted. Regardless, the commit_last_checked_at value will be bumped to the current (given) time. This method returns the count of upload and index records modified, respectively. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.RepoName",
                    "documentation": {
                      "identifier": "Store.RepoName",
                      "newPage": false,
                      "searchKey": "dbstore.Store.RepoName",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) RepoName(ctx context.Context, repositoryID int) (_ string, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) RepoName(ctx context.Context, repositoryID int) (_ string, err error)\n```\n\nRepoName returns the name for the repo with the given identifier. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.SoftDeleteOldUploads",
                    "documentation": {
                      "identifier": "Store.SoftDeleteOldUploads",
                      "newPage": false,
                      "searchKey": "dbstore.Store.SoftDeleteOldUploads",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) SoftDeleteOldUploads(ctx context.Context, maxAge time.Duration, now time.Time) (count int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) SoftDeleteOldUploads(ctx context.Context, maxAge time.Duration, now time.Time) (count int, err error)\n```\n\nSoftDeleteOldUploads marks uploads older than the given age that are not visible at the tip of the default branch as deleted. The associated repositories will be marked as dirty so that their commit graphs are updated in the background. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.StaleSourcedCommits",
                    "documentation": {
                      "identifier": "Store.StaleSourcedCommits",
                      "newPage": false,
                      "searchKey": "dbstore.Store.StaleSourcedCommits",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) StaleSourcedCommits(ctx context.Context, minimumTimeSinceLastCheck time.Duration, limit int, now time.Time) (_ []SourcedCommits, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) StaleSourcedCommits(ctx context.Context, minimumTimeSinceLastCheck time.Duration, limit int, now time.Time) (_ []SourcedCommits, err error)\n```\n\nStaleSourcedCommits returns a set of commits attached to repositories that have been least recently checked for resolvability via gitserver. We do this periodically in order to determine which records in the database are unreachable by normal query paths and clean up that occupied (but useless) space. The output is of this method is ordered by repository ID then by commit. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.Transact",
                    "documentation": {
                      "identifier": "Store.Transact",
                      "newPage": false,
                      "searchKey": "dbstore.Store.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) Transact(ctx context.Context) (*Store, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) Transact(ctx context.Context) (*Store, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.UpdateCommitedAt",
                    "documentation": {
                      "identifier": "Store.UpdateCommitedAt",
                      "newPage": false,
                      "searchKey": "dbstore.Store.UpdateCommitedAt",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) UpdateCommitedAt(ctx context.Context, uploadID int, committedAt time.Time) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) UpdateCommitedAt(ctx context.Context, uploadID int, committedAt time.Time) (err error)\n```\n\nUpdateCommitedAt updates the commit date for the given repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.UpdateIndexConfigurationByRepositoryID",
                    "documentation": {
                      "identifier": "Store.UpdateIndexConfigurationByRepositoryID",
                      "newPage": false,
                      "searchKey": "dbstore.Store.UpdateIndexConfigurationByRepositoryID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) UpdateIndexConfigurationByRepositoryID(ctx context.Context, repositoryID int, data []byte) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) UpdateIndexConfigurationByRepositoryID(ctx context.Context, repositoryID int, data []byte) (err error)\n```\n\nUpdateIndexConfigurationByRepositoryID updates the index configuration for a repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.UpdatePackageReferences",
                    "documentation": {
                      "identifier": "Store.UpdatePackageReferences",
                      "newPage": false,
                      "searchKey": "dbstore.Store.UpdatePackageReferences",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) UpdatePackageReferences(ctx context.Context, dumpID int, references []semantic.PackageReference) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) UpdatePackageReferences(ctx context.Context, dumpID int, references []semantic.PackageReference) (err error)\n```\n\nUpdatePackageReferences inserts reference data tied to the given upload. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.UpdatePackages",
                    "documentation": {
                      "identifier": "Store.UpdatePackages",
                      "newPage": false,
                      "searchKey": "dbstore.Store.UpdatePackages",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) UpdatePackages(ctx context.Context, dumpID int, packages []semantic.Package) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) UpdatePackages(ctx context.Context, dumpID int, packages []semantic.Package) (err error)\n```\n\nUpdatePackages upserts package data tied to the given upload. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.With",
                    "documentation": {
                      "identifier": "Store.With",
                      "newPage": false,
                      "searchKey": "dbstore.Store.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) With(other basestore.ShareableStore) *Store"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) With(other basestore.ShareableStore) *Store\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.bulkTransfer",
                    "documentation": {
                      "identifier": "Store.bulkTransfer",
                      "newPage": false,
                      "searchKey": "dbstore.Store.bulkTransfer",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) bulkTransfer(ctx context.Context, insertQuery, updateQuery, deleteQuery *sqlf.Query) (rowsInserted int, rowsUpdated int, rowsDeleted int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) bulkTransfer(ctx context.Context, insertQuery, updateQuery, deleteQuery *sqlf.Query) (rowsInserted int, rowsUpdated int, rowsDeleted int, err error)\n```\n\nbulkTransfer performs the given insert, update, and delete queries and returns the number of records touched by each. If any query is nil, the returned count will be zero. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.createTemporaryNearestUploadsTables",
                    "documentation": {
                      "identifier": "Store.createTemporaryNearestUploadsTables",
                      "newPage": false,
                      "searchKey": "dbstore.Store.createTemporaryNearestUploadsTables",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) createTemporaryNearestUploadsTables(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) createTemporaryNearestUploadsTables(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.persistNearestUploads",
                    "documentation": {
                      "identifier": "Store.persistNearestUploads",
                      "newPage": false,
                      "searchKey": "dbstore.Store.persistNearestUploads",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) persistNearestUploads(ctx context.Context, repositoryID int) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) persistNearestUploads(ctx context.Context, repositoryID int) (err error)\n```\n\npersistNearestUploads modifies the lsif_nearest_uploads table so that it has same data as t_lsif_nearest_uploads for the given repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.persistNearestUploadsLinks",
                    "documentation": {
                      "identifier": "Store.persistNearestUploadsLinks",
                      "newPage": false,
                      "searchKey": "dbstore.Store.persistNearestUploadsLinks",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) persistNearestUploadsLinks(ctx context.Context, repositoryID int) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) persistNearestUploadsLinks(ctx context.Context, repositoryID int) (err error)\n```\n\npersistNearestUploadsLinks modifies the lsif_nearest_uploads_links table so that it has same data as t_lsif_nearest_uploads_links for the given repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.persistUploadsVisibleAtTip",
                    "documentation": {
                      "identifier": "Store.persistUploadsVisibleAtTip",
                      "newPage": false,
                      "searchKey": "dbstore.Store.persistUploadsVisibleAtTip",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) persistUploadsVisibleAtTip(ctx context.Context, repositoryID int) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) persistUploadsVisibleAtTip(ctx context.Context, repositoryID int) (err error)\n```\n\npersistUploadsVisibleAtTip modifies the lsif_uploads_visible_at_tip table so that it has same data as t_lsif_uploads_visible_at_tip for the given repository. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.transact",
                    "documentation": {
                      "identifier": "Store.transact",
                      "newPage": false,
                      "searchKey": "dbstore.Store.transact",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) transact(ctx context.Context) (*Store, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) transact(ctx context.Context) (*Store, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Store.writeVisibleUploads",
                    "documentation": {
                      "identifier": "Store.writeVisibleUploads",
                      "newPage": false,
                      "searchKey": "dbstore.Store.writeVisibleUploads",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) writeVisibleUploads(ctx context.Context, sanitizedInput *sanitizedCommitInput) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) writeVisibleUploads(ctx context.Context, sanitizedInput *sanitizedCommitInput) (err error)\n```\n\nwriteVisibleUploads serializes the given input into a the following set of temporary tables in the database. \n\n```\n- t_lsif_nearest_uploads        (mirroring lsif_nearest_uploads)\n- t_lsif_nearest_uploads_links  (mirroring lsif_nearest_uploads_links)\n- t_lsif_uploads_visible_at_tip (mirroring lsif_uploads_visible_at_tip)\n\n```\nThe data in these temporary tables can then be moved into a persisted/permanent table. We previously would perform a bulk delete of the records associated with a repository, then reinsert all of the data needed to be persisted. This caused massive table bloat on some instances. Storing into a temporary table and then inserting/updating/deleting records into the persisted table minimizes the number of tuples we need to touch and drastically reduces table bloat. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#Upload",
              "documentation": {
                "identifier": "Upload",
                "newPage": false,
                "searchKey": "dbstore.Upload",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Upload struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Upload struct {\n\tID                int        `json:\"id\"`\n\tCommit            string     `json:\"commit\"`\n\tRoot              string     `json:\"root\"`\n\tVisibleAtTip      bool       `json:\"visibleAtTip\"`\n\tUploadedAt        time.Time  `json:\"uploadedAt\"`\n\tState             string     `json:\"state\"`\n\tFailureMessage    *string    `json:\"failureMessage\"`\n\tStartedAt         *time.Time `json:\"startedAt\"`\n\tFinishedAt        *time.Time `json:\"finishedAt\"`\n\tProcessAfter      *time.Time `json:\"processAfter\"`\n\tNumResets         int        `json:\"numResets\"`\n\tNumFailures       int        `json:\"numFailures\"`\n\tRepositoryID      int        `json:\"repositoryId\"`\n\tRepositoryName    string     `json:\"repositoryName\"`\n\tIndexer           string     `json:\"indexer\"`\n\tNumParts          int        `json:\"numParts\"`\n\tUploadedParts     []int      `json:\"uploadedParts\"`\n\tUploadSize        *int64     `json:\"uploadSize\"`\n\tRank              *int       `json:\"placeInQueue\"`\n\tAssociatedIndexID *int       `json:\"associatedIndex\"`\n}\n```\n\nUpload is a subset of the lsif_uploads table and stores both processed and unprocessed records. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#dumpToUpload",
                    "documentation": {
                      "identifier": "dumpToUpload",
                      "newPage": false,
                      "searchKey": "dbstore.dumpToUpload",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func dumpToUpload(expected Dump) Upload"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc dumpToUpload(expected Dump) Upload\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#scanFirstUpload",
                    "documentation": {
                      "identifier": "scanFirstUpload",
                      "newPage": false,
                      "searchKey": "dbstore.scanFirstUpload",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func scanFirstUpload(rows *sql.Rows, err error) (Upload, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc scanFirstUpload(rows *sql.Rows, err error) (Upload, bool, error)\n```\n\nscanFirstUpload scans a slice of uploads from the return value of `*Store.query` and returns the first. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#Upload.RecordID",
                    "documentation": {
                      "identifier": "Upload.RecordID",
                      "newPage": false,
                      "searchKey": "dbstore.Upload.RecordID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u Upload) RecordID() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u Upload) RecordID() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#operations",
              "documentation": {
                "identifier": "operations",
                "newPage": false,
                "searchKey": "dbstore.operations",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type operations struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype operations struct {\n\taddUploadPart                          *observation.Operation\n\tcalculateVisibleUploads                *observation.Operation\n\tcommitGraphMetadata                    *observation.Operation\n\tdefinitionDumps                        *observation.Operation\n\tdeleteIndexByID                        *observation.Operation\n\tdeleteIndexesWithoutRepository         *observation.Operation\n\tdeleteOldIndexes                       *observation.Operation\n\tdeleteOverlappingDumps                 *observation.Operation\n\tdeleteUploadByID                       *observation.Operation\n\tdeleteUploadsStuckUploading            *observation.Operation\n\tdeleteUploadsWithoutRepository         *observation.Operation\n\tdequeue                                *observation.Operation\n\tdequeueIndex                           *observation.Operation\n\tdirtyRepositories                      *observation.Operation\n\tfindClosestDumps                       *observation.Operation\n\tfindClosestDumpsFromGraphFragment      *observation.Operation\n\tgetDumpsByIDs                          *observation.Operation\n\tgetIndexByID                           *observation.Operation\n\tgetIndexConfigurationByRepositoryID    *observation.Operation\n\tgetIndexes                             *observation.Operation\n\tgetIndexesByIDs                        *observation.Operation\n\tgetOldestCommitDate                    *observation.Operation\n\tgetRepositoriesWithIndexConfiguration  *observation.Operation\n\tgetAutoindexDisabledRepositories       *observation.Operation\n\tgetUploadByID                          *observation.Operation\n\tgetUploads                             *observation.Operation\n\tgetUploadsByIDs                        *observation.Operation\n\thardDeleteUploadByID                   *observation.Operation\n\thasCommit                              *observation.Operation\n\thasRepository                          *observation.Operation\n\tindexQueueSize                         *observation.Operation\n\tinsertDependencyIndexingJob            *observation.Operation\n\tinsertIndex                            *observation.Operation\n\tinsertUpload                           *observation.Operation\n\tisQueued                               *observation.Operation\n\tmarkComplete                           *observation.Operation\n\tmarkErrored                            *observation.Operation\n\tmarkFailed                             *observation.Operation\n\tmarkIndexComplete                      *observation.Operation\n\tmarkIndexErrored                       *observation.Operation\n\tmarkQueued                             *observation.Operation\n\tmarkRepositoryAsDirty                  *observation.Operation\n\tqueueSize                              *observation.Operation\n\treferenceIDsAndFilters                 *observation.Operation\n\treferencesForUpload                    *observation.Operation\n\trefreshCommitResolvability             *observation.Operation\n\trepoName                               *observation.Operation\n\trequeue                                *observation.Operation\n\trequeueIndex                           *observation.Operation\n\tsoftDeleteOldUploads                   *observation.Operation\n\tstaleSourcedCommits                    *observation.Operation\n\tupdateCommitedAt                       *observation.Operation\n\tupdateIndexConfigurationByRepositoryID *observation.Operation\n\tupdatePackageReferences                *observation.Operation\n\tupdatePackages                         *observation.Operation\n\n\twriteVisibleUploads        *observation.Operation\n\tpersistNearestUploads      *observation.Operation\n\tpersistNearestUploadsLinks *observation.Operation\n\tpersistUploadsVisibleAtTip *observation.Operation\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#newOperations",
                    "documentation": {
                      "identifier": "newOperations",
                      "newPage": false,
                      "searchKey": "dbstore.newOperations",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newOperations(observationContext *observation.Context) *operations"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newOperations(observationContext *observation.Context) *operations\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#printableRank",
              "documentation": {
                "identifier": "printableRank",
                "newPage": false,
                "searchKey": "dbstore.printableRank",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type printableRank struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype printableRank struct{ value *int }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#printableRank.String",
                    "documentation": {
                      "identifier": "printableRank.String",
                      "newPage": false,
                      "searchKey": "dbstore.printableRank.String",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r printableRank) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r printableRank) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#rowScanner",
              "documentation": {
                "identifier": "rowScanner",
                "newPage": false,
                "searchKey": "dbstore.rowScanner",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type rowScanner struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype rowScanner struct {\n\trows *sql.Rows\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#rowScanner.Close",
                    "documentation": {
                      "identifier": "rowScanner.Close",
                      "newPage": false,
                      "searchKey": "dbstore.rowScanner.Close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *rowScanner) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *rowScanner) Close() error\n```\n\nClose the underlying row object. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#rowScanner.Next",
                    "documentation": {
                      "identifier": "rowScanner.Next",
                      "newPage": false,
                      "searchKey": "dbstore.rowScanner.Next",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *rowScanner) Next() (reference lsifstore.PackageReference, _ bool, _ error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *rowScanner) Next() (reference lsifstore.PackageReference, _ bool, _ error)\n```\n\nNext reads the next package reference value from the database cursor. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#sanitizedCommitInput",
              "documentation": {
                "identifier": "sanitizedCommitInput",
                "newPage": false,
                "searchKey": "dbstore.sanitizedCommitInput",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type sanitizedCommitInput struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sanitizedCommitInput struct {\n\tnearestUploadsRowValues       <-chan []interface{}\n\tnearestUploadsLinksRowValues  <-chan []interface{}\n\tuploadsVisibleAtTipRowValues  <-chan []interface{}\n\tnumNearestUploadsRecords      uint32 // populated once nearestUploadsRowValues is exhausted\n\tnumNearestUploadsLinksRecords uint32 // populated once nearestUploadsLinksRowValues is exhausted\n\tnumUploadsVisibleAtTipRecords uint32 // populated once uploadsVisibleAtTipRowValues is exhausted\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#sanitizeCommitInput",
                    "documentation": {
                      "identifier": "sanitizeCommitInput",
                      "newPage": false,
                      "searchKey": "dbstore.sanitizeCommitInput",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func sanitizeCommitInput(ctx context.Context, graph *commitgraph.Graph, tipCommit string) *sanitizedCommitInput"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc sanitizeCommitInput(ctx context.Context, graph *commitgraph.Graph, tipCommit string) *sanitizedCommitInput\n```\n\nsanitizeCommitInput reads the data that needs to be persisted from the given graph and writes the sanitized values (ensures values match the column types) into channels for insertion into a particular table. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#sliceScanner",
              "documentation": {
                "identifier": "sliceScanner",
                "newPage": false,
                "searchKey": "dbstore.sliceScanner",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type sliceScanner struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sliceScanner struct {\n\treferences []lsifstore.PackageReference\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#sliceScanner.Close",
                    "documentation": {
                      "identifier": "sliceScanner.Close",
                      "newPage": false,
                      "searchKey": "dbstore.sliceScanner.Close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *sliceScanner) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *sliceScanner) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#sliceScanner.Next",
                    "documentation": {
                      "identifier": "sliceScanner.Next",
                      "newPage": false,
                      "searchKey": "dbstore.sliceScanner.Next",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *sliceScanner) Next() (lsifstore.PackageReference, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *sliceScanner) Next() (lsifstore.PackageReference, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#uploadMetaListSerializer",
              "documentation": {
                "identifier": "uploadMetaListSerializer",
                "newPage": false,
                "searchKey": "dbstore.uploadMetaListSerializer",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type uploadMetaListSerializer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype uploadMetaListSerializer struct {\n\tbuf     bytes.Buffer\n\tscratch []byte\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#NewUploadMetaListSerializer",
                    "documentation": {
                      "identifier": "NewUploadMetaListSerializer",
                      "newPage": false,
                      "searchKey": "dbstore.NewUploadMetaListSerializer",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewUploadMetaListSerializer() *uploadMetaListSerializer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewUploadMetaListSerializer() *uploadMetaListSerializer\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#uploadMetaListSerializer.Serialize",
                    "documentation": {
                      "identifier": "uploadMetaListSerializer.Serialize",
                      "newPage": false,
                      "searchKey": "dbstore.uploadMetaListSerializer.Serialize",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *uploadMetaListSerializer) Serialize(uploadMetas []commitgraph.UploadMeta) []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *uploadMetaListSerializer) Serialize(uploadMetas []commitgraph.UploadMeta) []byte\n```\n\nSerialize returns a new byte slice with the given upload metadata values encoded as a JSON object (keys being the upload_id and values being the distance field). \n\nOur original attempt just built a map[int]int and passed it to the JSON package to be marshalled into a byte array. Unfortunately that puts reflection over the map value in the hot path for commit graph processing. We also can't avoid the reflection by passing a struct without changing the shape of the data persisted in the database. \n\nBy serializing this value ourselves we minimize allocations. This change resulted in a 50% reduction of the memory required by BenchmarkCalculateVisibleUploads. \n\nThis method is not safe for concurrent use. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#uploadMetaListSerializer.take",
                    "documentation": {
                      "identifier": "uploadMetaListSerializer.take",
                      "newPage": false,
                      "searchKey": "dbstore.uploadMetaListSerializer.take",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *uploadMetaListSerializer) take() []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *uploadMetaListSerializer) take() []byte\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#uploadMetaListSerializer.write",
                    "documentation": {
                      "identifier": "uploadMetaListSerializer.write",
                      "newPage": false,
                      "searchKey": "dbstore.uploadMetaListSerializer.write",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *uploadMetaListSerializer) write(uploadMetas []commitgraph.UploadMeta)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *uploadMetaListSerializer) write(uploadMetas []commitgraph.UploadMeta)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#uploadMetaListSerializer.writeInteger",
                    "documentation": {
                      "identifier": "uploadMetaListSerializer.writeInteger",
                      "newPage": false,
                      "searchKey": "dbstore.uploadMetaListSerializer.writeInteger",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *uploadMetaListSerializer) writeInteger(value int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *uploadMetaListSerializer) writeInteger(value int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/dbstore#uploadMetaListSerializer.writeUploadMeta",
                    "documentation": {
                      "identifier": "uploadMetaListSerializer.writeUploadMeta",
                      "newPage": false,
                      "searchKey": "dbstore.uploadMetaListSerializer.writeUploadMeta",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *uploadMetaListSerializer) writeUploadMeta(uploadMeta commitgraph.UploadMeta)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *uploadMetaListSerializer) writeUploadMeta(uploadMeta commitgraph.UploadMeta)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/codeintel/stores/dbstore#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#BenchmarkCalculateVisibleUploads",
              "documentation": {
                "identifier": "BenchmarkCalculateVisibleUploads",
                "newPage": false,
                "searchKey": "dbstore.BenchmarkCalculateVisibleUploads",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCalculateVisibleUploads(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCalculateVisibleUploads(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#ScanSourcedCommits",
              "documentation": {
                "identifier": "ScanSourcedCommits",
                "newPage": false,
                "searchKey": "dbstore.ScanSourcedCommits",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ScanSourcedCommits(rows *sql.Rows, queryErr error) (_ []SourcedCommits, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ScanSourcedCommits(rows *sql.Rows, queryErr error) (_ []SourcedCommits, err error)\n```\n\nScanSourcedCommits scans triples of repository ids/repository names/commits from the return value of `*Store.query`. The output of this function is ordered by repository identifier, then by commit. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestAddUploadPart",
              "documentation": {
                "identifier": "TestAddUploadPart",
                "newPage": false,
                "searchKey": "dbstore.TestAddUploadPart",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddUploadPart(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddUploadPart(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestCalculateVisibleUploads",
              "documentation": {
                "identifier": "TestCalculateVisibleUploads",
                "newPage": false,
                "searchKey": "dbstore.TestCalculateVisibleUploads",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCalculateVisibleUploads(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCalculateVisibleUploads(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestCalculateVisibleUploadsAlternateCommitGraph",
              "documentation": {
                "identifier": "TestCalculateVisibleUploadsAlternateCommitGraph",
                "newPage": false,
                "searchKey": "dbstore.TestCalculateVisibleUploadsAlternateCommitGraph",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCalculateVisibleUploadsAlternateCommitGraph(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCalculateVisibleUploadsAlternateCommitGraph(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestCalculateVisibleUploadsDistinctRoots",
              "documentation": {
                "identifier": "TestCalculateVisibleUploadsDistinctRoots",
                "newPage": false,
                "searchKey": "dbstore.TestCalculateVisibleUploadsDistinctRoots",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCalculateVisibleUploadsDistinctRoots(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCalculateVisibleUploadsDistinctRoots(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestCalculateVisibleUploadsIndexerName",
              "documentation": {
                "identifier": "TestCalculateVisibleUploadsIndexerName",
                "newPage": false,
                "searchKey": "dbstore.TestCalculateVisibleUploadsIndexerName",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCalculateVisibleUploadsIndexerName(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCalculateVisibleUploadsIndexerName(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestCalculateVisibleUploadsOverlappingRoots",
              "documentation": {
                "identifier": "TestCalculateVisibleUploadsOverlappingRoots",
                "newPage": false,
                "searchKey": "dbstore.TestCalculateVisibleUploadsOverlappingRoots",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCalculateVisibleUploadsOverlappingRoots(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCalculateVisibleUploadsOverlappingRoots(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestCalculateVisibleUploadsResetsDirtyFlag",
              "documentation": {
                "identifier": "TestCalculateVisibleUploadsResetsDirtyFlag",
                "newPage": false,
                "searchKey": "dbstore.TestCalculateVisibleUploadsResetsDirtyFlag",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCalculateVisibleUploadsResetsDirtyFlag(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCalculateVisibleUploadsResetsDirtyFlag(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestCommitGraphMetadata",
              "documentation": {
                "identifier": "TestCommitGraphMetadata",
                "newPage": false,
                "searchKey": "dbstore.TestCommitGraphMetadata",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCommitGraphMetadata(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCommitGraphMetadata(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestDefinitionDumps",
              "documentation": {
                "identifier": "TestDefinitionDumps",
                "newPage": false,
                "searchKey": "dbstore.TestDefinitionDumps",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDefinitionDumps(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDefinitionDumps(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestDeleteIndexByID",
              "documentation": {
                "identifier": "TestDeleteIndexByID",
                "newPage": false,
                "searchKey": "dbstore.TestDeleteIndexByID",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteIndexByID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteIndexByID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestDeleteIndexByIDMissingRow",
              "documentation": {
                "identifier": "TestDeleteIndexByIDMissingRow",
                "newPage": false,
                "searchKey": "dbstore.TestDeleteIndexByIDMissingRow",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteIndexByIDMissingRow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteIndexByIDMissingRow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestDeleteIndexesWithoutRepository",
              "documentation": {
                "identifier": "TestDeleteIndexesWithoutRepository",
                "newPage": false,
                "searchKey": "dbstore.TestDeleteIndexesWithoutRepository",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteIndexesWithoutRepository(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteIndexesWithoutRepository(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestDeleteOldIndexes",
              "documentation": {
                "identifier": "TestDeleteOldIndexes",
                "newPage": false,
                "searchKey": "dbstore.TestDeleteOldIndexes",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteOldIndexes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteOldIndexes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestDeleteOverlappingDumps",
              "documentation": {
                "identifier": "TestDeleteOverlappingDumps",
                "newPage": false,
                "searchKey": "dbstore.TestDeleteOverlappingDumps",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteOverlappingDumps(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteOverlappingDumps(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestDeleteOverlappingDumpsIgnoresIncompleteUploads",
              "documentation": {
                "identifier": "TestDeleteOverlappingDumpsIgnoresIncompleteUploads",
                "newPage": false,
                "searchKey": "dbstore.TestDeleteOverlappingDumpsIgnoresIncompleteUploads",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteOverlappingDumpsIgnoresIncompleteUploads(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteOverlappingDumpsIgnoresIncompleteUploads(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestDeleteOverlappingDumpsNoMatches",
              "documentation": {
                "identifier": "TestDeleteOverlappingDumpsNoMatches",
                "newPage": false,
                "searchKey": "dbstore.TestDeleteOverlappingDumpsNoMatches",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteOverlappingDumpsNoMatches(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteOverlappingDumpsNoMatches(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestDeleteUploadByID",
              "documentation": {
                "identifier": "TestDeleteUploadByID",
                "newPage": false,
                "searchKey": "dbstore.TestDeleteUploadByID",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteUploadByID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteUploadByID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestDeleteUploadByIDMissingRow",
              "documentation": {
                "identifier": "TestDeleteUploadByIDMissingRow",
                "newPage": false,
                "searchKey": "dbstore.TestDeleteUploadByIDMissingRow",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteUploadByIDMissingRow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteUploadByIDMissingRow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestDeleteUploadsStuckUploading",
              "documentation": {
                "identifier": "TestDeleteUploadsStuckUploading",
                "newPage": false,
                "searchKey": "dbstore.TestDeleteUploadsStuckUploading",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteUploadsStuckUploading(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteUploadsStuckUploading(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestDeleteUploadsWithoutRepository",
              "documentation": {
                "identifier": "TestDeleteUploadsWithoutRepository",
                "newPage": false,
                "searchKey": "dbstore.TestDeleteUploadsWithoutRepository",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteUploadsWithoutRepository(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteUploadsWithoutRepository(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestFindClosestDumps",
              "documentation": {
                "identifier": "TestFindClosestDumps",
                "newPage": false,
                "searchKey": "dbstore.TestFindClosestDumps",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFindClosestDumps(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFindClosestDumps(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestFindClosestDumpsAlternateCommitGraph",
              "documentation": {
                "identifier": "TestFindClosestDumpsAlternateCommitGraph",
                "newPage": false,
                "searchKey": "dbstore.TestFindClosestDumpsAlternateCommitGraph",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFindClosestDumpsAlternateCommitGraph(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFindClosestDumpsAlternateCommitGraph(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestFindClosestDumpsAlternateCommitGraphWithOverwrittenVisibleUploads",
              "documentation": {
                "identifier": "TestFindClosestDumpsAlternateCommitGraphWithOverwrittenVisibleUploads",
                "newPage": false,
                "searchKey": "dbstore.TestFindClosestDumpsAlternateCommitGraphWithOverwrittenVisibleUploads",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFindClosestDumpsAlternateCommitGraphWithOverwrittenVisibleUploads(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFindClosestDumpsAlternateCommitGraphWithOverwrittenVisibleUploads(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestFindClosestDumpsDistinctRoots",
              "documentation": {
                "identifier": "TestFindClosestDumpsDistinctRoots",
                "newPage": false,
                "searchKey": "dbstore.TestFindClosestDumpsDistinctRoots",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFindClosestDumpsDistinctRoots(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFindClosestDumpsDistinctRoots(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestFindClosestDumpsFromGraphFragment",
              "documentation": {
                "identifier": "TestFindClosestDumpsFromGraphFragment",
                "newPage": false,
                "searchKey": "dbstore.TestFindClosestDumpsFromGraphFragment",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFindClosestDumpsFromGraphFragment(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFindClosestDumpsFromGraphFragment(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestFindClosestDumpsIndexerName",
              "documentation": {
                "identifier": "TestFindClosestDumpsIndexerName",
                "newPage": false,
                "searchKey": "dbstore.TestFindClosestDumpsIndexerName",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFindClosestDumpsIndexerName(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFindClosestDumpsIndexerName(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestFindClosestDumpsIntersectingPath",
              "documentation": {
                "identifier": "TestFindClosestDumpsIntersectingPath",
                "newPage": false,
                "searchKey": "dbstore.TestFindClosestDumpsIntersectingPath",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFindClosestDumpsIntersectingPath(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFindClosestDumpsIntersectingPath(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestFindClosestDumpsOverlappingRoots",
              "documentation": {
                "identifier": "TestFindClosestDumpsOverlappingRoots",
                "newPage": false,
                "searchKey": "dbstore.TestFindClosestDumpsOverlappingRoots",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFindClosestDumpsOverlappingRoots(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFindClosestDumpsOverlappingRoots(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestGetDumpsByIDs",
              "documentation": {
                "identifier": "TestGetDumpsByIDs",
                "newPage": false,
                "searchKey": "dbstore.TestGetDumpsByIDs",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetDumpsByIDs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetDumpsByIDs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestGetIndexByID",
              "documentation": {
                "identifier": "TestGetIndexByID",
                "newPage": false,
                "searchKey": "dbstore.TestGetIndexByID",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetIndexByID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetIndexByID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestGetIndexConfigurationByRepositoryID",
              "documentation": {
                "identifier": "TestGetIndexConfigurationByRepositoryID",
                "newPage": false,
                "searchKey": "dbstore.TestGetIndexConfigurationByRepositoryID",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetIndexConfigurationByRepositoryID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetIndexConfigurationByRepositoryID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestGetIndexes",
              "documentation": {
                "identifier": "TestGetIndexes",
                "newPage": false,
                "searchKey": "dbstore.TestGetIndexes",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetIndexes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetIndexes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestGetIndexesByIDs",
              "documentation": {
                "identifier": "TestGetIndexesByIDs",
                "newPage": false,
                "searchKey": "dbstore.TestGetIndexesByIDs",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetIndexesByIDs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetIndexesByIDs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestGetOldestCommitDate",
              "documentation": {
                "identifier": "TestGetOldestCommitDate",
                "newPage": false,
                "searchKey": "dbstore.TestGetOldestCommitDate",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetOldestCommitDate(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetOldestCommitDate(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestGetQueuedIndexRank",
              "documentation": {
                "identifier": "TestGetQueuedIndexRank",
                "newPage": false,
                "searchKey": "dbstore.TestGetQueuedIndexRank",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetQueuedIndexRank(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetQueuedIndexRank(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestGetQueuedUploadRank",
              "documentation": {
                "identifier": "TestGetQueuedUploadRank",
                "newPage": false,
                "searchKey": "dbstore.TestGetQueuedUploadRank",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetQueuedUploadRank(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetQueuedUploadRank(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestGetRepositoriesWithIndexConfiguration",
              "documentation": {
                "identifier": "TestGetRepositoriesWithIndexConfiguration",
                "newPage": false,
                "searchKey": "dbstore.TestGetRepositoriesWithIndexConfiguration",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetRepositoriesWithIndexConfiguration(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetRepositoriesWithIndexConfiguration(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestGetRepositoriesWithIndexConfigurationIgnoresDisabledRepos",
              "documentation": {
                "identifier": "TestGetRepositoriesWithIndexConfigurationIgnoresDisabledRepos",
                "newPage": false,
                "searchKey": "dbstore.TestGetRepositoriesWithIndexConfigurationIgnoresDisabledRepos",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetRepositoriesWithIndexConfigurationIgnoresDisabledRepos(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetRepositoriesWithIndexConfigurationIgnoresDisabledRepos(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestGetUploadByID",
              "documentation": {
                "identifier": "TestGetUploadByID",
                "newPage": false,
                "searchKey": "dbstore.TestGetUploadByID",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetUploadByID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetUploadByID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestGetUploadByIDDeleted",
              "documentation": {
                "identifier": "TestGetUploadByIDDeleted",
                "newPage": false,
                "searchKey": "dbstore.TestGetUploadByIDDeleted",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetUploadByIDDeleted(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetUploadByIDDeleted(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestGetUploads",
              "documentation": {
                "identifier": "TestGetUploads",
                "newPage": false,
                "searchKey": "dbstore.TestGetUploads",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetUploads(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetUploads(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestGetUploadsByIDs",
              "documentation": {
                "identifier": "TestGetUploadsByIDs",
                "newPage": false,
                "searchKey": "dbstore.TestGetUploadsByIDs",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetUploadsByIDs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetUploadsByIDs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestHardDeleteUploadByID",
              "documentation": {
                "identifier": "TestHardDeleteUploadByID",
                "newPage": false,
                "searchKey": "dbstore.TestHardDeleteUploadByID",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHardDeleteUploadByID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHardDeleteUploadByID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestHasCommit",
              "documentation": {
                "identifier": "TestHasCommit",
                "newPage": false,
                "searchKey": "dbstore.TestHasCommit",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHasCommit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHasCommit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestHasRepository",
              "documentation": {
                "identifier": "TestHasRepository",
                "newPage": false,
                "searchKey": "dbstore.TestHasRepository",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHasRepository(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHasRepository(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestInsertDependencyIndexingJob",
              "documentation": {
                "identifier": "TestInsertDependencyIndexingJob",
                "newPage": false,
                "searchKey": "dbstore.TestInsertDependencyIndexingJob",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInsertDependencyIndexingJob(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInsertDependencyIndexingJob(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestInsertIndex",
              "documentation": {
                "identifier": "TestInsertIndex",
                "newPage": false,
                "searchKey": "dbstore.TestInsertIndex",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInsertIndex(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInsertIndex(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestInsertUploadQueued",
              "documentation": {
                "identifier": "TestInsertUploadQueued",
                "newPage": false,
                "searchKey": "dbstore.TestInsertUploadQueued",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInsertUploadQueued(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInsertUploadQueued(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestInsertUploadUploading",
              "documentation": {
                "identifier": "TestInsertUploadUploading",
                "newPage": false,
                "searchKey": "dbstore.TestInsertUploadUploading",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInsertUploadUploading(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInsertUploadUploading(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestInsertUploadWithAssociatedIndexID",
              "documentation": {
                "identifier": "TestInsertUploadWithAssociatedIndexID",
                "newPage": false,
                "searchKey": "dbstore.TestInsertUploadWithAssociatedIndexID",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInsertUploadWithAssociatedIndexID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInsertUploadWithAssociatedIndexID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestIsQueued",
              "documentation": {
                "identifier": "TestIsQueued",
                "newPage": false,
                "searchKey": "dbstore.TestIsQueued",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIsQueued(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIsQueued(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestMarkFailed",
              "documentation": {
                "identifier": "TestMarkFailed",
                "newPage": false,
                "searchKey": "dbstore.TestMarkFailed",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarkFailed(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarkFailed(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestMarkQueued",
              "documentation": {
                "identifier": "TestMarkQueued",
                "newPage": false,
                "searchKey": "dbstore.TestMarkQueued",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarkQueued(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarkQueued(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestMarkRepositoryAsDirty",
              "documentation": {
                "identifier": "TestMarkRepositoryAsDirty",
                "newPage": false,
                "searchKey": "dbstore.TestMarkRepositoryAsDirty",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarkRepositoryAsDirty(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarkRepositoryAsDirty(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestReferenceIDsAndFilters",
              "documentation": {
                "identifier": "TestReferenceIDsAndFilters",
                "newPage": false,
                "searchKey": "dbstore.TestReferenceIDsAndFilters",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReferenceIDsAndFilters(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReferenceIDsAndFilters(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestReferenceIDsAndFiltersRemoteVisibility",
              "documentation": {
                "identifier": "TestReferenceIDsAndFiltersRemoteVisibility",
                "newPage": false,
                "searchKey": "dbstore.TestReferenceIDsAndFiltersRemoteVisibility",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReferenceIDsAndFiltersRemoteVisibility(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReferenceIDsAndFiltersRemoteVisibility(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestReferenceIDsAndFiltersVisibility",
              "documentation": {
                "identifier": "TestReferenceIDsAndFiltersVisibility",
                "newPage": false,
                "searchKey": "dbstore.TestReferenceIDsAndFiltersVisibility",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReferenceIDsAndFiltersVisibility(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReferenceIDsAndFiltersVisibility(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestReferencesForUpload",
              "documentation": {
                "identifier": "TestReferencesForUpload",
                "newPage": false,
                "searchKey": "dbstore.TestReferencesForUpload",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReferencesForUpload(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReferencesForUpload(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestRefreshCommitResolvability",
              "documentation": {
                "identifier": "TestRefreshCommitResolvability",
                "newPage": false,
                "searchKey": "dbstore.TestRefreshCommitResolvability",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRefreshCommitResolvability(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRefreshCommitResolvability(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestRepoName",
              "documentation": {
                "identifier": "TestRepoName",
                "newPage": false,
                "searchKey": "dbstore.TestRepoName",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepoName(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepoName(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestSkipsDeletedRepositories",
              "documentation": {
                "identifier": "TestSkipsDeletedRepositories",
                "newPage": false,
                "searchKey": "dbstore.TestSkipsDeletedRepositories",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSkipsDeletedRepositories(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSkipsDeletedRepositories(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestSoftDeleteOldUploads",
              "documentation": {
                "identifier": "TestSoftDeleteOldUploads",
                "newPage": false,
                "searchKey": "dbstore.TestSoftDeleteOldUploads",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSoftDeleteOldUploads(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSoftDeleteOldUploads(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestStaleSourcedCommits",
              "documentation": {
                "identifier": "TestStaleSourcedCommits",
                "newPage": false,
                "searchKey": "dbstore.TestStaleSourcedCommits",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStaleSourcedCommits(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStaleSourcedCommits(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestUpdateCommitedAt",
              "documentation": {
                "identifier": "TestUpdateCommitedAt",
                "newPage": false,
                "searchKey": "dbstore.TestUpdateCommitedAt",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUpdateCommitedAt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUpdateCommitedAt(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestUpdatePackageReferences",
              "documentation": {
                "identifier": "TestUpdatePackageReferences",
                "newPage": false,
                "searchKey": "dbstore.TestUpdatePackageReferences",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUpdatePackageReferences(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUpdatePackageReferences(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestUpdatePackageReferencesEmpty",
              "documentation": {
                "identifier": "TestUpdatePackageReferencesEmpty",
                "newPage": false,
                "searchKey": "dbstore.TestUpdatePackageReferencesEmpty",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUpdatePackageReferencesEmpty(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUpdatePackageReferencesEmpty(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestUpdatePackageReferencesWithDuplicates",
              "documentation": {
                "identifier": "TestUpdatePackageReferencesWithDuplicates",
                "newPage": false,
                "searchKey": "dbstore.TestUpdatePackageReferencesWithDuplicates",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUpdatePackageReferencesWithDuplicates(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUpdatePackageReferencesWithDuplicates(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestUpdatePackages",
              "documentation": {
                "identifier": "TestUpdatePackages",
                "newPage": false,
                "searchKey": "dbstore.TestUpdatePackages",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUpdatePackages(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUpdatePackages(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#TestUpdatePackagesEmpty",
              "documentation": {
                "identifier": "TestUpdatePackagesEmpty",
                "newPage": false,
                "searchKey": "dbstore.TestUpdatePackagesEmpty",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUpdatePackagesEmpty(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUpdatePackagesEmpty(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#WorkerutilDependencyIndexingJobStore",
              "documentation": {
                "identifier": "WorkerutilDependencyIndexingJobStore",
                "newPage": false,
                "searchKey": "dbstore.WorkerutilDependencyIndexingJobStore",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func WorkerutilDependencyIndexingJobStore(s basestore.ShareableStore, observationContext *observation.Context) dbworkerstore.Store"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc WorkerutilDependencyIndexingJobStore(s basestore.ShareableStore, observationContext *observation.Context) dbworkerstore.Store\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#WorkerutilIndexStore",
              "documentation": {
                "identifier": "WorkerutilIndexStore",
                "newPage": false,
                "searchKey": "dbstore.WorkerutilIndexStore",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func WorkerutilIndexStore(s basestore.ShareableStore, observationContext *observation.Context) dbworkerstore.Store"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc WorkerutilIndexStore(s basestore.ShareableStore, observationContext *observation.Context) dbworkerstore.Store\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#WorkerutilUploadStore",
              "documentation": {
                "identifier": "WorkerutilUploadStore",
                "newPage": false,
                "searchKey": "dbstore.WorkerutilUploadStore",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func WorkerutilUploadStore(s basestore.ShareableStore, observationContext *observation.Context) dbworkerstore.Store"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc WorkerutilUploadStore(s basestore.ShareableStore, observationContext *observation.Context) dbworkerstore.Store\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#consumeScanner",
              "documentation": {
                "identifier": "consumeScanner",
                "newPage": false,
                "searchKey": "dbstore.consumeScanner",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func consumeScanner(scanner PackageReferenceScanner) (references []lsifstore.PackageReference, _ error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc consumeScanner(scanner PackageReferenceScanner) (references []lsifstore.PackageReference, _ error)\n```\n\nconsumeScanner reads all values from the scanner into memory. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#countingWrite",
              "documentation": {
                "identifier": "countingWrite",
                "newPage": false,
                "searchKey": "dbstore.countingWrite",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func countingWrite(ctx context.Context, ch chan<- []interface{}, counter *uint32, values ...interface{}) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc countingWrite(ctx context.Context, ch chan<- []interface{}, counter *uint32, values ...interface{}) bool\n```\n\ncountingWrite writes the given slice of interfaces to the given channel. This function returns true if the write succeeded and false if the context was canceled. On success, the counter's underlying value will be incremented (non-atomically). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#deleteRepo",
              "documentation": {
                "identifier": "deleteRepo",
                "newPage": false,
                "searchKey": "dbstore.deleteRepo",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func deleteRepo(t testing.TB, db *sql.DB, id int, deleted_at time.Time)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc deleteRepo(t testing.TB, db *sql.DB, id int, deleted_at time.Time)\n```\n\nMarks a repo as deleted \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#getIndexStates",
              "documentation": {
                "identifier": "getIndexStates",
                "newPage": false,
                "searchKey": "dbstore.getIndexStates",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getIndexStates(db dbutil.DB, ids ...int) (map[int]string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getIndexStates(db dbutil.DB, ids ...int) (map[int]string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#getUploadStates",
              "documentation": {
                "identifier": "getUploadStates",
                "newPage": false,
                "searchKey": "dbstore.getUploadStates",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getUploadStates(db dbutil.DB, ids ...int) (map[int]string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getUploadStates(db dbutil.DB, ids ...int) (map[int]string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#getUploadsVisibleAtTip",
              "documentation": {
                "identifier": "getUploadsVisibleAtTip",
                "newPage": false,
                "searchKey": "dbstore.getUploadsVisibleAtTip",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getUploadsVisibleAtTip(t testing.TB, db *sql.DB, repositoryID int) []int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getUploadsVisibleAtTip(t testing.TB, db *sql.DB, repositoryID int) []int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#getVisibleUploads",
              "documentation": {
                "identifier": "getVisibleUploads",
                "newPage": false,
                "searchKey": "dbstore.getVisibleUploads",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getVisibleUploads(t testing.TB, db *sql.DB, repositoryID int, commits []string) map[string][]int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getVisibleUploads(t testing.TB, db *sql.DB, repositoryID int, commits []string) map[string][]int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#init.store_test.go",
              "documentation": {
                "identifier": "init.store_test.go",
                "newPage": false,
                "searchKey": "dbstore.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#insertIndexes",
              "documentation": {
                "identifier": "insertIndexes",
                "newPage": false,
                "searchKey": "dbstore.insertIndexes",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func insertIndexes(t testing.TB, db *sql.DB, indexes ...Index)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc insertIndexes(t testing.TB, db *sql.DB, indexes ...Index)\n```\n\ninsertIndexes populates the lsif_indexes table with the given index models. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#insertLinks",
              "documentation": {
                "identifier": "insertLinks",
                "newPage": false,
                "searchKey": "dbstore.insertLinks",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func insertLinks(t testing.TB, db *sql.DB, repositoryID int, links map[string]commitgraph.LinkRelationship)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc insertLinks(t testing.TB, db *sql.DB, repositoryID int, links map[string]commitgraph.LinkRelationship)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#insertNearestUploads",
              "documentation": {
                "identifier": "insertNearestUploads",
                "newPage": false,
                "searchKey": "dbstore.insertNearestUploads",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func insertNearestUploads(t testing.TB, db *sql.DB, repositoryID int, uploads map[string][]commitgraph.UploadMeta)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc insertNearestUploads(t testing.TB, db *sql.DB, repositoryID int, uploads map[string][]commitgraph.UploadMeta)\n```\n\ninsertNearestUploads populates the lsif_nearest_uploads table with the given upload metadata. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#insertPackageReferences",
              "documentation": {
                "identifier": "insertPackageReferences",
                "newPage": false,
                "searchKey": "dbstore.insertPackageReferences",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func insertPackageReferences(t testing.TB, store *Store, packageReferences []lsifstore.PackageReference)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc insertPackageReferences(t testing.TB, store *Store, packageReferences []lsifstore.PackageReference)\n```\n\ninsertPackageReferences populates the lsif_references table with the given package references. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#insertRepo",
              "documentation": {
                "identifier": "insertRepo",
                "newPage": false,
                "searchKey": "dbstore.insertRepo",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func insertRepo(t testing.TB, db *sql.DB, id int, name string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc insertRepo(t testing.TB, db *sql.DB, id int, name string)\n```\n\ninsertRepo creates a repository record with the given id and name. If there is already a repository with the given identifier, nothing happens \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#insertUploads",
              "documentation": {
                "identifier": "insertUploads",
                "newPage": false,
                "searchKey": "dbstore.insertUploads",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func insertUploads(t testing.TB, db *sql.DB, uploads ...Upload)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc insertUploads(t testing.TB, db *sql.DB, uploads ...Upload)\n```\n\ninsertUploads populates the lsif_uploads table with the given upload models. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#insertVisibleAtTip",
              "documentation": {
                "identifier": "insertVisibleAtTip",
                "newPage": false,
                "searchKey": "dbstore.insertVisibleAtTip",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func insertVisibleAtTip(t testing.TB, db *sql.DB, repositoryID int, uploadIDs ...int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc insertVisibleAtTip(t testing.TB, db *sql.DB, repositoryID int, uploadIDs ...int)\n```\n\ninsertVisibleAtTip populates rows of the lsif_uploads_visible_at_tip table for the given repository with the given identifiers. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#intsToQueries",
              "documentation": {
                "identifier": "intsToQueries",
                "newPage": false,
                "searchKey": "dbstore.intsToQueries",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func intsToQueries(values []int) []*sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc intsToQueries(values []int) []*sqlf.Query\n```\n\nintsToQueries converts a slice of ints into a slice of queries. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#intsToString",
              "documentation": {
                "identifier": "intsToString",
                "newPage": false,
                "searchKey": "dbstore.intsToString",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func intsToString(vs []int) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc intsToString(vs []int) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#keysOf",
              "documentation": {
                "identifier": "keysOf",
                "newPage": false,
                "searchKey": "dbstore.keysOf",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func keysOf(m map[string][]int) (keys []string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc keysOf(m map[string][]int) (keys []string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#loadPackagesChannel",
              "documentation": {
                "identifier": "loadPackagesChannel",
                "newPage": false,
                "searchKey": "dbstore.loadPackagesChannel",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func loadPackagesChannel(packages []semantic.Package) <-chan []interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc loadPackagesChannel(packages []semantic.Package) <-chan []interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#loadReferencesChannel",
              "documentation": {
                "identifier": "loadReferencesChannel",
                "newPage": false,
                "searchKey": "dbstore.loadReferencesChannel",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func loadReferencesChannel(references []semantic.PackageReference) <-chan []interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc loadReferencesChannel(references []semantic.PackageReference) <-chan []interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#makeCommit",
              "documentation": {
                "identifier": "makeCommit",
                "newPage": false,
                "searchKey": "dbstore.makeCommit",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeCommit(i int) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeCommit(i int) string\n```\n\nmakeCommit formats an integer as a 40-character git commit hash. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#makeFindClosestDumpConditions",
              "documentation": {
                "identifier": "makeFindClosestDumpConditions",
                "newPage": false,
                "searchKey": "dbstore.makeFindClosestDumpConditions",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeFindClosestDumpConditions(path string, rootMustEnclosePath bool, indexer string) (conds []*sqlf.Query)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeFindClosestDumpConditions(path string, rootMustEnclosePath bool, indexer string) (conds []*sqlf.Query)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#makeIndexSearchCondition",
              "documentation": {
                "identifier": "makeIndexSearchCondition",
                "newPage": false,
                "searchKey": "dbstore.makeIndexSearchCondition",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeIndexSearchCondition(term string) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeIndexSearchCondition(term string) *sqlf.Query\n```\n\nmakeIndexSearchCondition returns a disjunction of LIKE clauses against all searchable columns of an index. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#makeSearchCondition",
              "documentation": {
                "identifier": "makeSearchCondition",
                "newPage": false,
                "searchKey": "dbstore.makeSearchCondition",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeSearchCondition(term string) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeSearchCondition(term string) *sqlf.Query\n```\n\nmakeSearchCondition returns a disjunction of LIKE clauses against all searchable columns of an upload. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#makeVisibleUploadCandidatesQuery",
              "documentation": {
                "identifier": "makeVisibleUploadCandidatesQuery",
                "newPage": false,
                "searchKey": "dbstore.makeVisibleUploadCandidatesQuery",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeVisibleUploadCandidatesQuery(repositoryID int, commits ...string) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeVisibleUploadCandidatesQuery(repositoryID int, commits ...string) *sqlf.Query\n```\n\nmakeVisibleUploadCandidatesQuery returns a SQL query returning the set of uploads visible from the given commits. This is done by looking at each commit's row in the lsif_nearest_uploads, and the (adjusted) set of uploads visible from each commit's nearest ancestor according to data compressed in the links table. \n\nNB: A commit should be present in at most one of these tables. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#makeVisibleUploadsQuery",
              "documentation": {
                "identifier": "makeVisibleUploadsQuery",
                "newPage": false,
                "searchKey": "dbstore.makeVisibleUploadsQuery",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeVisibleUploadsQuery(repositoryID int, commit string) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeVisibleUploadsQuery(repositoryID int, commit string) *sqlf.Query\n```\n\nmakeVisibleUploadsQuery returns a SQL query returning the set of identifiers of uploads visible from the given commit. This is done by removing the \"shadowed\" values created by looking at a commit and it's ancestors visible commits. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#monikersToString",
              "documentation": {
                "identifier": "monikersToString",
                "newPage": false,
                "searchKey": "dbstore.monikersToString",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func monikersToString(vs []semantic.QualifiedMonikerData) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc monikersToString(vs []semantic.QualifiedMonikerData) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#nilTimeToString",
              "documentation": {
                "identifier": "nilTimeToString",
                "newPage": false,
                "searchKey": "dbstore.nilTimeToString",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func nilTimeToString(t *time.Time) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nilTimeToString(t *time.Time) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#normalizeVisibleUploads",
              "documentation": {
                "identifier": "normalizeVisibleUploads",
                "newPage": false,
                "searchKey": "dbstore.normalizeVisibleUploads",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func normalizeVisibleUploads(uploadMetas map[string][]commitgraph.UploadMeta) map[string][]commitgraph.UploadMeta"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc normalizeVisibleUploads(uploadMetas map[string][]commitgraph.UploadMeta) map[string][]commitgraph.UploadMeta\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#readBenchmarkCommitGraph",
              "documentation": {
                "identifier": "readBenchmarkCommitGraph",
                "newPage": false,
                "searchKey": "dbstore.readBenchmarkCommitGraph",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readBenchmarkCommitGraph() (*gitserver.CommitGraph, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readBenchmarkCommitGraph() (*gitserver.CommitGraph, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#readBenchmarkCommitGraphView",
              "documentation": {
                "identifier": "readBenchmarkCommitGraphView",
                "newPage": false,
                "searchKey": "dbstore.readBenchmarkCommitGraphView",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readBenchmarkCommitGraphView() ([]Upload, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readBenchmarkCommitGraphView() ([]Upload, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#readBenchmarkFile",
              "documentation": {
                "identifier": "readBenchmarkFile",
                "newPage": false,
                "searchKey": "dbstore.readBenchmarkFile",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readBenchmarkFile(path string) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readBenchmarkFile(path string) ([]byte, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#scanCommitGraphMetadata",
              "documentation": {
                "identifier": "scanCommitGraphMetadata",
                "newPage": false,
                "searchKey": "dbstore.scanCommitGraphMetadata",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanCommitGraphMetadata(rows *sql.Rows, queryErr error) (updateToken, dirtyToken int, updatedAt *time.Time, _ bool, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanCommitGraphMetadata(rows *sql.Rows, queryErr error) (updateToken, dirtyToken int, updatedAt *time.Time, _ bool, err error)\n```\n\nscanCommitGraphMetadata scans a a commit graph metadata row from the return value of `*Store.query`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#scanCommitGraphView",
              "documentation": {
                "identifier": "scanCommitGraphView",
                "newPage": false,
                "searchKey": "dbstore.scanCommitGraphView",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanCommitGraphView(rows *sql.Rows, queryErr error) (_ *commitgraph.CommitGraphView, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanCommitGraphView(rows *sql.Rows, queryErr error) (_ *commitgraph.CommitGraphView, err error)\n```\n\nscanCommitGraphView scans a commit graph view from the return value of `*Store.query`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#scanCounts",
              "documentation": {
                "identifier": "scanCounts",
                "newPage": false,
                "searchKey": "dbstore.scanCounts",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanCounts(rows *sql.Rows, queryErr error) (_ map[int]int, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanCounts(rows *sql.Rows, queryErr error) (_ map[int]int, err error)\n```\n\nscanCounts scans pairs of id/counts from the return value of `*Store.query`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#scanDependencyIndexingJobs",
              "documentation": {
                "identifier": "scanDependencyIndexingJobs",
                "newPage": false,
                "searchKey": "dbstore.scanDependencyIndexingJobs",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanDependencyIndexingJobs(rows *sql.Rows, queryErr error) (_ []DependencyIndexingJob, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanDependencyIndexingJobs(rows *sql.Rows, queryErr error) (_ []DependencyIndexingJob, err error)\n```\n\nscanDependencyIndexingJob scans a slice of dependency indexing jobs from the return value of `*Store.query`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#scanDumps",
              "documentation": {
                "identifier": "scanDumps",
                "newPage": false,
                "searchKey": "dbstore.scanDumps",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanDumps(rows *sql.Rows, queryErr error) (_ []Dump, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanDumps(rows *sql.Rows, queryErr error) (_ []Dump, err error)\n```\n\nscanDumps scans a slice of dumps from the return value of `*Store.query`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#scanFirstDependencyIndexingJobRecord",
              "documentation": {
                "identifier": "scanFirstDependencyIndexingJobRecord",
                "newPage": false,
                "searchKey": "dbstore.scanFirstDependencyIndexingJobRecord",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanFirstDependencyIndexingJobRecord(rows *sql.Rows, err error) (workerutil.Record, bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanFirstDependencyIndexingJobRecord(rows *sql.Rows, err error) (workerutil.Record, bool, error)\n```\n\nscanFirstDependencyIndexingJobRecord scans a slice of dependency indexing jobs from the return value of `*Store.query` and returns the first. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#scanFirstIndexRecord",
              "documentation": {
                "identifier": "scanFirstIndexRecord",
                "newPage": false,
                "searchKey": "dbstore.scanFirstIndexRecord",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanFirstIndexRecord(rows *sql.Rows, err error) (workerutil.Record, bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanFirstIndexRecord(rows *sql.Rows, err error) (workerutil.Record, bool, error)\n```\n\nscanFirstIndexInterface scans a slice of indexes from the return value of `*Store.query` and returns the first. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#scanFirstUploadRecord",
              "documentation": {
                "identifier": "scanFirstUploadRecord",
                "newPage": false,
                "searchKey": "dbstore.scanFirstUploadRecord",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanFirstUploadRecord(rows *sql.Rows, err error) (workerutil.Record, bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanFirstUploadRecord(rows *sql.Rows, err error) (workerutil.Record, bool, error)\n```\n\nscanFirstUploadRecord scans a slice of uploads from the return value of `*Store.query` and returns the first. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#scanIndexConfigurations",
              "documentation": {
                "identifier": "scanIndexConfigurations",
                "newPage": false,
                "searchKey": "dbstore.scanIndexConfigurations",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanIndexConfigurations(rows *sql.Rows, queryErr error) (_ []IndexConfiguration, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanIndexConfigurations(rows *sql.Rows, queryErr error) (_ []IndexConfiguration, err error)\n```\n\nscanIndexConfigurations scans a slice of index configurations from the return value of `*Store.query`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#scanIndexes",
              "documentation": {
                "identifier": "scanIndexes",
                "newPage": false,
                "searchKey": "dbstore.scanIndexes",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanIndexes(rows *sql.Rows, queryErr error) (_ []Index, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanIndexes(rows *sql.Rows, queryErr error) (_ []Index, err error)\n```\n\nscanIndexes scans a slice of indexes from the return value of `*Store.query`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#scanIntPairs",
              "documentation": {
                "identifier": "scanIntPairs",
                "newPage": false,
                "searchKey": "dbstore.scanIntPairs",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanIntPairs(rows *sql.Rows, queryErr error) (_ map[int]int, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanIntPairs(rows *sql.Rows, queryErr error) (_ map[int]int, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#scanStates",
              "documentation": {
                "identifier": "scanStates",
                "newPage": false,
                "searchKey": "dbstore.scanStates",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanStates(rows *sql.Rows, queryErr error) (_ map[int]string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanStates(rows *sql.Rows, queryErr error) (_ map[int]string, err error)\n```\n\nscanStates scans pairs of id/states from the return value of `*Store.query`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#scanUploads",
              "documentation": {
                "identifier": "scanUploads",
                "newPage": false,
                "searchKey": "dbstore.scanUploads",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanUploads(rows *sql.Rows, queryErr error) (_ []Upload, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanUploads(rows *sql.Rows, queryErr error) (_ []Upload, err error)\n```\n\nscanUploads scans a slice of uploads from the return value of `*Store.query`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#testAllOf",
              "documentation": {
                "identifier": "testAllOf",
                "newPage": false,
                "searchKey": "dbstore.testAllOf",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testAllOf(t *testing.T, dumps []Dump, expectedIDs []int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testAllOf(t *testing.T, dumps []Dump, expectedIDs []int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#testAnyOf",
              "documentation": {
                "identifier": "testAnyOf",
                "newPage": false,
                "searchKey": "dbstore.testAnyOf",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testAnyOf(t *testing.T, dumps []Dump, expectedIDs []int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testAnyOf(t *testing.T, dumps []Dump, expectedIDs []int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#testFindClosestDumps",
              "documentation": {
                "identifier": "testFindClosestDumps",
                "newPage": false,
                "searchKey": "dbstore.testFindClosestDumps",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testFindClosestDumps(t *testing.T, store *Store, testCases []FindClosestDumpsTestCase)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testFindClosestDumps(t *testing.T, store *Store, testCases []FindClosestDumpsTestCase)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#testPresence",
              "documentation": {
                "identifier": "testPresence",
                "newPage": false,
                "searchKey": "dbstore.testPresence",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testPresence(needle int, haystack []int) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testPresence(needle int, haystack []int) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/dbstore#toCommitGraphView",
              "documentation": {
                "identifier": "toCommitGraphView",
                "newPage": false,
                "searchKey": "dbstore.toCommitGraphView",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func toCommitGraphView(uploads []Upload) *commitgraph.CommitGraphView"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc toCommitGraphView(uploads []Upload) *commitgraph.CommitGraphView\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/enterprise/internal/codeintel/stores/dbstore/migration"
    }
  ]
}
