{
  "pathID": "/enterprise/internal/codeintel/stores/lsifstore",
  "documentation": {
    "identifier": "lsifstore",
    "newPage": true,
    "searchKey": "enterprise/internal/codeintel/stores/lsifstore",
    "tags": [
      "package",
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package lsifstore"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/internal/codeintel/stores/lsifstore#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#CurrentDefinitionsSchemaVersion",
              "documentation": {
                "identifier": "CurrentDefinitionsSchemaVersion",
                "newPage": false,
                "searchKey": "lsifstore.CurrentDefinitionsSchemaVersion",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const CurrentDefinitionsSchemaVersion"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst CurrentDefinitionsSchemaVersion = 2\n```\n\nCurrentDefinitionsSchemaVersion is the schema version used for new lsif_data_definitions rows. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#CurrentDocumentSchemaVersion",
              "documentation": {
                "identifier": "CurrentDocumentSchemaVersion",
                "newPage": false,
                "searchKey": "lsifstore.CurrentDocumentSchemaVersion",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const CurrentDocumentSchemaVersion"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst CurrentDocumentSchemaVersion = 3\n```\n\nCurrentDocumentSchemaVersion is the schema version used for new lsif_data_documents rows. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#CurrentReferencesSchemaVersion",
              "documentation": {
                "identifier": "CurrentReferencesSchemaVersion",
                "newPage": false,
                "searchKey": "lsifstore.CurrentReferencesSchemaVersion",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const CurrentReferencesSchemaVersion"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst CurrentReferencesSchemaVersion = 2\n```\n\nCurrentReferencesSchemaVersion is the schema version used for new lsif_data_references rows. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#MaximumRangesDefinitionLocations",
              "documentation": {
                "identifier": "MaximumRangesDefinitionLocations",
                "newPage": false,
                "searchKey": "lsifstore.MaximumRangesDefinitionLocations",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MaximumRangesDefinitionLocations"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MaximumRangesDefinitionLocations = 10000\n```\n\nMaximumRangesDefinitionLocations is the maximum limit when querying definition locations for a Ranges request. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#bulkMonikerResultsQuery",
              "documentation": {
                "identifier": "bulkMonikerResultsQuery",
                "newPage": false,
                "searchKey": "lsifstore.bulkMonikerResultsQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const bulkMonikerResultsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst bulkMonikerResultsQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#clearQuery",
              "documentation": {
                "identifier": "clearQuery",
                "newPage": false,
                "searchKey": "lsifstore.clearQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const clearQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst clearQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#diagnosticsQuery",
              "documentation": {
                "identifier": "diagnosticsQuery",
                "newPage": false,
                "searchKey": "lsifstore.diagnosticsQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const diagnosticsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst diagnosticsQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#documentBatchSize",
              "documentation": {
                "identifier": "documentBatchSize",
                "newPage": false,
                "searchKey": "lsifstore.documentBatchSize",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const documentBatchSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst documentBatchSize = 50\n```\n\ndocumentBatchSize is the maximum number of documents we will query at once to resolve a single locations request. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#documentationPageDataQuery",
              "documentation": {
                "identifier": "documentationPageDataQuery",
                "newPage": false,
                "searchKey": "lsifstore.documentationPageDataQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const documentationPageDataQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst documentationPageDataQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#existsQuery",
              "documentation": {
                "identifier": "existsQuery",
                "newPage": false,
                "searchKey": "lsifstore.existsQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const existsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst existsQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#hoverDocumentQuery",
              "documentation": {
                "identifier": "hoverDocumentQuery",
                "newPage": false,
                "searchKey": "lsifstore.hoverDocumentQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const hoverDocumentQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst hoverDocumentQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#locationsDocumentQuery",
              "documentation": {
                "identifier": "locationsDocumentQuery",
                "newPage": false,
                "searchKey": "lsifstore.locationsDocumentQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const locationsDocumentQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst locationsDocumentQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#monikersDocumentQuery",
              "documentation": {
                "identifier": "monikersDocumentQuery",
                "newPage": false,
                "searchKey": "lsifstore.monikersDocumentQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const monikersDocumentQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst monikersDocumentQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#packageInformationQuery",
              "documentation": {
                "identifier": "packageInformationQuery",
                "newPage": false,
                "searchKey": "lsifstore.packageInformationQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const packageInformationQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst packageInformationQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#rangesDocumentQuery",
              "documentation": {
                "identifier": "rangesDocumentQuery",
                "newPage": false,
                "searchKey": "lsifstore.rangesDocumentQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const rangesDocumentQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rangesDocumentQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#readLocationsFromResultChunksQuery",
              "documentation": {
                "identifier": "readLocationsFromResultChunksQuery",
                "newPage": false,
                "searchKey": "lsifstore.readLocationsFromResultChunksQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const readLocationsFromResultChunksQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst readLocationsFromResultChunksQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#readRangesFromDocumentsQuery",
              "documentation": {
                "identifier": "readRangesFromDocumentsQuery",
                "newPage": false,
                "searchKey": "lsifstore.readRangesFromDocumentsQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const readRangesFromDocumentsQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst readRangesFromDocumentsQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#resultChunkBatchSize",
              "documentation": {
                "identifier": "resultChunkBatchSize",
                "newPage": false,
                "searchKey": "lsifstore.resultChunkBatchSize",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const resultChunkBatchSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst resultChunkBatchSize = 50\n```\n\nresultChunkBatchSize is the maximum number of result chunks we will query at once to resolve a single locations request. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#testBundleID",
              "documentation": {
                "identifier": "testBundleID",
                "newPage": false,
                "searchKey": "lsifstore.testBundleID",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const testBundleID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst testBundleID = 39162\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#translateIDsToResultChunkIndexesQuery",
              "documentation": {
                "identifier": "translateIDsToResultChunkIndexesQuery",
                "newPage": false,
                "searchKey": "lsifstore.translateIDsToResultChunkIndexesQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const translateIDsToResultChunkIndexesQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst translateIDsToResultChunkIndexesQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#writeDefinitionReferencesInsertQuery",
              "documentation": {
                "identifier": "writeDefinitionReferencesInsertQuery",
                "newPage": false,
                "searchKey": "lsifstore.writeDefinitionReferencesInsertQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const writeDefinitionReferencesInsertQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst writeDefinitionReferencesInsertQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#writeDefinitionsReferencesTemporaryTableQuery",
              "documentation": {
                "identifier": "writeDefinitionsReferencesTemporaryTableQuery",
                "newPage": false,
                "searchKey": "lsifstore.writeDefinitionsReferencesTemporaryTableQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const writeDefinitionsReferencesTemporaryTableQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst writeDefinitionsReferencesTemporaryTableQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#writeDocumentationPagesInsertQuery",
              "documentation": {
                "identifier": "writeDocumentationPagesInsertQuery",
                "newPage": false,
                "searchKey": "lsifstore.writeDocumentationPagesInsertQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const writeDocumentationPagesInsertQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst writeDocumentationPagesInsertQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#writeDocumentationPagesTemporaryTableQuery",
              "documentation": {
                "identifier": "writeDocumentationPagesTemporaryTableQuery",
                "newPage": false,
                "searchKey": "lsifstore.writeDocumentationPagesTemporaryTableQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const writeDocumentationPagesTemporaryTableQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst writeDocumentationPagesTemporaryTableQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#writeDocumentsInsertQuery",
              "documentation": {
                "identifier": "writeDocumentsInsertQuery",
                "newPage": false,
                "searchKey": "lsifstore.writeDocumentsInsertQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const writeDocumentsInsertQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst writeDocumentsInsertQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#writeDocumentsTemporaryTableQuery",
              "documentation": {
                "identifier": "writeDocumentsTemporaryTableQuery",
                "newPage": false,
                "searchKey": "lsifstore.writeDocumentsTemporaryTableQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const writeDocumentsTemporaryTableQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst writeDocumentsTemporaryTableQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#writeResultChunksInsertQuery",
              "documentation": {
                "identifier": "writeResultChunksInsertQuery",
                "newPage": false,
                "searchKey": "lsifstore.writeResultChunksInsertQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const writeResultChunksInsertQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst writeResultChunksInsertQuery = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#writeResultChunksTemporaryTableQuery",
              "documentation": {
                "identifier": "writeResultChunksTemporaryTableQuery",
                "newPage": false,
                "searchKey": "lsifstore.writeResultChunksTemporaryTableQuery",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const writeResultChunksTemporaryTableQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst writeResultChunksTemporaryTableQuery = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/codeintel/stores/lsifstore#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#ErrNoMetadata",
              "documentation": {
                "identifier": "ErrNoMetadata",
                "newPage": false,
                "searchKey": "lsifstore.ErrNoMetadata",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrNoMetadata"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrNoMetadata = errors.New(\"no rows in meta table\")\n```\n\nErrNoMetadata occurs if we can't determine the number of result chunks for an index. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#tableNames",
              "documentation": {
                "identifier": "tableNames",
                "newPage": false,
                "searchKey": "lsifstore.tableNames",
                "tags": [
                  "variable",
                  "array",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var tableNames"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tableNames = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/codeintel/stores/lsifstore#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#CodeIntelligenceRange",
              "documentation": {
                "identifier": "CodeIntelligenceRange",
                "newPage": false,
                "searchKey": "lsifstore.CodeIntelligenceRange",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CodeIntelligenceRange struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CodeIntelligenceRange struct {\n\tRange       Range\n\tDefinitions []Location\n\tReferences  []Location\n\tHoverText   string\n}\n```\n\nCodeIntelligenceRange pairs a range with its definitions, reference, and hover text. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Diagnostic",
              "documentation": {
                "identifier": "Diagnostic",
                "newPage": false,
                "searchKey": "lsifstore.Diagnostic",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Diagnostic struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Diagnostic struct {\n\tDumpID int\n\tPath   string\n\tsemantic.DiagnosticData\n}\n```\n\nDiagnostic describes diagnostic information attached to a location within a particular dump. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Location",
              "documentation": {
                "identifier": "Location",
                "newPage": false,
                "searchKey": "lsifstore.Location",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Location struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Location struct {\n\tDumpID int\n\tPath   string\n\tRange  Range\n}\n```\n\nLocation is an LSP-like location scoped to a dump. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#MarshalledDocumentData",
              "documentation": {
                "identifier": "MarshalledDocumentData",
                "newPage": false,
                "searchKey": "lsifstore.MarshalledDocumentData",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MarshalledDocumentData struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MarshalledDocumentData struct {\n\tRanges             []byte\n\tHoverResults       []byte\n\tMonikers           []byte\n\tPackageInformation []byte\n\tDiagnostics        []byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Package",
              "documentation": {
                "identifier": "Package",
                "newPage": false,
                "searchKey": "lsifstore.Package",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Package struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Package struct {\n\tDumpID  int\n\tScheme  string\n\tName    string\n\tVersion string\n}\n```\n\nPackage pairs a package name and the dump that provides it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#PackageReference",
              "documentation": {
                "identifier": "PackageReference",
                "newPage": false,
                "searchKey": "lsifstore.PackageReference",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PackageReference struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PackageReference struct {\n\tPackage\n\tFilter []byte // a bloom filter of identifiers imported by this dependent\n}\n```\n\nPackageReferences pairs a package name/version with a dump that depends on it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Position",
              "documentation": {
                "identifier": "Position",
                "newPage": false,
                "searchKey": "lsifstore.Position",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Position struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Position struct {\n\tLine      int\n\tCharacter int\n}\n```\n\nPosition is a unique position within a file. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#QualifiedDocumentData",
              "documentation": {
                "identifier": "QualifiedDocumentData",
                "newPage": false,
                "searchKey": "lsifstore.QualifiedDocumentData",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type QualifiedDocumentData struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QualifiedDocumentData struct {\n\tUploadID int\n\tsemantic.KeyedDocumentData\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#QualifiedMonikerLocations",
              "documentation": {
                "identifier": "QualifiedMonikerLocations",
                "newPage": false,
                "searchKey": "lsifstore.QualifiedMonikerLocations",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type QualifiedMonikerLocations struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QualifiedMonikerLocations struct {\n\tDumpID int\n\tsemantic.MonikerLocations\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Range",
              "documentation": {
                "identifier": "Range",
                "newPage": false,
                "searchKey": "lsifstore.Range",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Range struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Range struct {\n\tStart Position\n\tEnd   Position\n}\n```\n\nRange is an inclusive bounds within a file. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#newRange",
                    "documentation": {
                      "identifier": "newRange",
                      "newPage": false,
                      "searchKey": "lsifstore.newRange",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newRange(startLine, startCharacter, endLine, endCharacter int) Range"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newRange(startLine, startCharacter, endLine, endCharacter int) Range\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Serializer",
              "documentation": {
                "identifier": "Serializer",
                "newPage": false,
                "searchKey": "lsifstore.Serializer",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Serializer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Serializer struct {\n\treaders sync.Pool\n\twriters sync.Pool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#NewSerializer",
                    "documentation": {
                      "identifier": "NewSerializer",
                      "newPage": false,
                      "searchKey": "lsifstore.NewSerializer",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewSerializer() *Serializer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewSerializer() *Serializer\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Serializer.MarshalDocumentData",
                    "documentation": {
                      "identifier": "Serializer.MarshalDocumentData",
                      "newPage": false,
                      "searchKey": "lsifstore.Serializer.MarshalDocumentData",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Serializer) MarshalDocumentData(document semantic.DocumentData) (data MarshalledDocumentData, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Serializer) MarshalDocumentData(document semantic.DocumentData) (data MarshalledDocumentData, err error)\n```\n\nMarshalDocumentData transforms the fields of the given document data payload into a set of string of bytes writable to disk. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Serializer.MarshalDocumentationPageData",
                    "documentation": {
                      "identifier": "Serializer.MarshalDocumentationPageData",
                      "newPage": false,
                      "searchKey": "lsifstore.Serializer.MarshalDocumentationPageData",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Serializer) MarshalDocumentationPageData(documentationPage *semantic.DocumentationPageData) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Serializer) MarshalDocumentationPageData(documentationPage *semantic.DocumentationPageData) ([]byte, error)\n```\n\nMarshalDocumentationPageData transforms documentation page data into a string of bytes writable to disk. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Serializer.MarshalLegacyDocumentData",
                    "documentation": {
                      "identifier": "Serializer.MarshalLegacyDocumentData",
                      "newPage": false,
                      "searchKey": "lsifstore.Serializer.MarshalLegacyDocumentData",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Serializer) MarshalLegacyDocumentData(document semantic.DocumentData) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Serializer) MarshalLegacyDocumentData(document semantic.DocumentData) ([]byte, error)\n```\n\nMarshalLegacyDocumentData encodes a legacy-formatted document (the value in the `data` column). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Serializer.MarshalLocations",
                    "documentation": {
                      "identifier": "Serializer.MarshalLocations",
                      "newPage": false,
                      "searchKey": "lsifstore.Serializer.MarshalLocations",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Serializer) MarshalLocations(locations []semantic.LocationData) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Serializer) MarshalLocations(locations []semantic.LocationData) ([]byte, error)\n```\n\nMarshalLocations transforms a slice of locations into a string of bytes writable to disk. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Serializer.MarshalResultChunkData",
                    "documentation": {
                      "identifier": "Serializer.MarshalResultChunkData",
                      "newPage": false,
                      "searchKey": "lsifstore.Serializer.MarshalResultChunkData",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Serializer) MarshalResultChunkData(resultChunks semantic.ResultChunkData) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Serializer) MarshalResultChunkData(resultChunks semantic.ResultChunkData) ([]byte, error)\n```\n\nMarshalResultChunkData transforms result chunk data into a string of bytes writable to disk. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Serializer.UnmarshalDocumentData",
                    "documentation": {
                      "identifier": "Serializer.UnmarshalDocumentData",
                      "newPage": false,
                      "searchKey": "lsifstore.Serializer.UnmarshalDocumentData",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Serializer) UnmarshalDocumentData(data MarshalledDocumentData) (document semantic.DocumentData, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Serializer) UnmarshalDocumentData(data MarshalledDocumentData) (document semantic.DocumentData, err error)\n```\n\nUnmarshalDocumentData is the inverse of MarshalDocumentData. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Serializer.UnmarshalDocumentationPageData",
                    "documentation": {
                      "identifier": "Serializer.UnmarshalDocumentationPageData",
                      "newPage": false,
                      "searchKey": "lsifstore.Serializer.UnmarshalDocumentationPageData",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Serializer) UnmarshalDocumentationPageData(data []byte) (documentationPage *semantic.DocumentationPageData, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Serializer) UnmarshalDocumentationPageData(data []byte) (documentationPage *semantic.DocumentationPageData, err error)\n```\n\nUnmarshalDocumentationPageData is the inverse of MarshalDocumentationPageData. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Serializer.UnmarshalLegacyDocumentData",
                    "documentation": {
                      "identifier": "Serializer.UnmarshalLegacyDocumentData",
                      "newPage": false,
                      "searchKey": "lsifstore.Serializer.UnmarshalLegacyDocumentData",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Serializer) UnmarshalLegacyDocumentData(data []byte) (document semantic.DocumentData, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Serializer) UnmarshalLegacyDocumentData(data []byte) (document semantic.DocumentData, err error)\n```\n\nUnmarshalLegacyDocumentData unmarshals a legacy-formatted document (the value in the `data` column). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Serializer.UnmarshalLocations",
                    "documentation": {
                      "identifier": "Serializer.UnmarshalLocations",
                      "newPage": false,
                      "searchKey": "lsifstore.Serializer.UnmarshalLocations",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Serializer) UnmarshalLocations(data []byte) (locations []semantic.LocationData, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Serializer) UnmarshalLocations(data []byte) (locations []semantic.LocationData, err error)\n```\n\nUnmarshalLocations is the inverse of MarshalLocations. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Serializer.UnmarshalResultChunkData",
                    "documentation": {
                      "identifier": "Serializer.UnmarshalResultChunkData",
                      "newPage": false,
                      "searchKey": "lsifstore.Serializer.UnmarshalResultChunkData",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Serializer) UnmarshalResultChunkData(data []byte) (resultChunk semantic.ResultChunkData, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Serializer) UnmarshalResultChunkData(data []byte) (resultChunk semantic.ResultChunkData, err error)\n```\n\nUnmarshalResultChunkData is the inverse of MarshalResultChunkData. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Serializer.decode",
                    "documentation": {
                      "identifier": "Serializer.decode",
                      "newPage": false,
                      "searchKey": "lsifstore.Serializer.decode",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Serializer) decode(data []byte, target interface{}) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Serializer) decode(data []byte, target interface{}) (err error)\n```\n\nencode decompresses gob-decodes the given data and sets the given pointer. If the given data is empty, the pointer will not be assigned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Serializer.encode",
                    "documentation": {
                      "identifier": "Serializer.encode",
                      "newPage": false,
                      "searchKey": "lsifstore.Serializer.encode",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Serializer) encode(payload interface{}) (_ []byte, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Serializer) encode(payload interface{}) (_ []byte, err error)\n```\n\nencode gob-encodes and compresses the given payload. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store",
              "documentation": {
                "identifier": "Store",
                "newPage": false,
                "searchKey": "lsifstore.Store",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Store struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Store struct {\n\t*basestore.Store\n\tserializer *Serializer\n\toperations *operations\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#NewStore",
                    "documentation": {
                      "identifier": "NewStore",
                      "newPage": false,
                      "searchKey": "lsifstore.NewStore",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewStore(db dbutil.DB, observationContext *observation.Context) *Store"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewStore(db dbutil.DB, observationContext *observation.Context) *Store\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#populateTestStore",
                    "documentation": {
                      "identifier": "populateTestStore",
                      "newPage": false,
                      "searchKey": "lsifstore.populateTestStore",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func populateTestStore(t testing.TB) *Store"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc populateTestStore(t testing.TB) *Store\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.BulkMonikerResults",
                    "documentation": {
                      "identifier": "Store.BulkMonikerResults",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.BulkMonikerResults",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) BulkMonikerResults(ctx context.Context, tableName string, uploadIDs []int, monikers []semantic.MonikerData, limit, offset int) (_ []Location, _ int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) BulkMonikerResults(ctx context.Context, tableName string, uploadIDs []int, monikers []semantic.MonikerData, limit, offset int) (_ []Location, _ int, err error)\n```\n\nBulkMonikerResults returns the locations within one of the given bundles that define or reference one of the given monikers. This method also returns the size of the complete result set to aid in pagination. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.Clear",
                    "documentation": {
                      "identifier": "Store.Clear",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.Clear",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) Clear(ctx context.Context, bundleIDs ...int) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) Clear(ctx context.Context, bundleIDs ...int) (err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.Definitions",
                    "documentation": {
                      "identifier": "Store.Definitions",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.Definitions",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) Definitions(ctx context.Context, bundleID int, path string, line, character, limit, offset int) (_ []Location, _ int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) Definitions(ctx context.Context, bundleID int, path string, line, character, limit, offset int) (_ []Location, _ int, err error)\n```\n\nDefinitions returns the set of locations defining the symbol at the given position. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.Diagnostics",
                    "documentation": {
                      "identifier": "Store.Diagnostics",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.Diagnostics",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) Diagnostics(ctx context.Context, bundleID int, prefix string, limit, offset int) (_ []Diagnostic, _ int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) Diagnostics(ctx context.Context, bundleID int, prefix string, limit, offset int) (_ []Diagnostic, _ int, err error)\n```\n\nDiagnostics returns the diagnostics for the documents that have the given path prefix. This method also returns the size of the complete result set to aid in pagination. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.DocumentationPage",
                    "documentation": {
                      "identifier": "Store.DocumentationPage",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.DocumentationPage",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) DocumentationPage(ctx context.Context, bundleID int, pathID string) (_ *semantic.DocumentationPageData, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) DocumentationPage(ctx context.Context, bundleID int, pathID string) (_ *semantic.DocumentationPageData, err error)\n```\n\nDocumentationPage returns the documentation page with the given PathID. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.Done",
                    "documentation": {
                      "identifier": "Store.Done",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.Done",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) Done(err error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) Done(err error) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.Exists",
                    "documentation": {
                      "identifier": "Store.Exists",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.Exists",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) Exists(ctx context.Context, bundleID int, path string) (_ bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) Exists(ctx context.Context, bundleID int, path string) (_ bool, err error)\n```\n\nExists determines if the path exists in the database. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.Hover",
                    "documentation": {
                      "identifier": "Store.Hover",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.Hover",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) Hover(ctx context.Context, bundleID int, path string, line, character int) (_ string, _ Range, _ bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) Hover(ctx context.Context, bundleID int, path string, line, character int) (_ string, _ Range, _ bool, err error)\n```\n\nHover returns the hover text of the symbol at the given position. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.MonikersByPosition",
                    "documentation": {
                      "identifier": "Store.MonikersByPosition",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.MonikersByPosition",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) MonikersByPosition(ctx context.Context, bundleID int, path string, line, character int) (_ [][]semantic.MonikerData, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) MonikersByPosition(ctx context.Context, bundleID int, path string, line, character int) (_ [][]semantic.MonikerData, err error)\n```\n\nMonikersByPosition returns all monikers attached ranges containing the given position. If multiple ranges contain the position, then this method will return multiple sets of monikers. Each slice of monikers are attached to a single range. The order of the output slice is \"outside-in\", so that the range attached to earlier monikers enclose the range attached to later monikers. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.PackageInformation",
                    "documentation": {
                      "identifier": "Store.PackageInformation",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.PackageInformation",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) PackageInformation(ctx context.Context, bundleID int, path, packageInformationID string) (_ semantic.PackageInformationData, _ bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) PackageInformation(ctx context.Context, bundleID int, path, packageInformationID string) (_ semantic.PackageInformationData, _ bool, err error)\n```\n\nPackageInformation looks up package information data by identifier. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.Ranges",
                    "documentation": {
                      "identifier": "Store.Ranges",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.Ranges",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) Ranges(ctx context.Context, bundleID int, path string, startLine, endLine int) (_ []CodeIntelligenceRange, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) Ranges(ctx context.Context, bundleID int, path string, startLine, endLine int) (_ []CodeIntelligenceRange, err error)\n```\n\nRanges returns definition, reference, and hover data for each range within the given span of lines. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.References",
                    "documentation": {
                      "identifier": "Store.References",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.References",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) References(ctx context.Context, bundleID int, path string, line, character, limit, offset int) (_ []Location, _ int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) References(ctx context.Context, bundleID int, path string, line, character, limit, offset int) (_ []Location, _ int, err error)\n```\n\nReferences returns the set of locations referencing the symbol at the given position. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.Transact",
                    "documentation": {
                      "identifier": "Store.Transact",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) Transact(ctx context.Context) (*Store, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) Transact(ctx context.Context) (*Store, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.WriteDefinitions",
                    "documentation": {
                      "identifier": "Store.WriteDefinitions",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.WriteDefinitions",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) WriteDefinitions(ctx context.Context, bundleID int, monikerLocations chan semantic.MonikerLocations) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) WriteDefinitions(ctx context.Context, bundleID int, monikerLocations chan semantic.MonikerLocations) (err error)\n```\n\nWriteDefinitions is called (transactionally) from the precise-code-intel-worker. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.WriteDocumentationPages",
                    "documentation": {
                      "identifier": "Store.WriteDocumentationPages",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.WriteDocumentationPages",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) WriteDocumentationPages(ctx context.Context, bundleID int, documentationPages chan *semantic.DocumentationPageData) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) WriteDocumentationPages(ctx context.Context, bundleID int, documentationPages chan *semantic.DocumentationPageData) (err error)\n```\n\nWriteDocumentationPages is called (transactionally) from the precise-code-intel-worker. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.WriteDocuments",
                    "documentation": {
                      "identifier": "Store.WriteDocuments",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.WriteDocuments",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) WriteDocuments(ctx context.Context, bundleID int, documents chan semantic.KeyedDocumentData) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) WriteDocuments(ctx context.Context, bundleID int, documents chan semantic.KeyedDocumentData) (err error)\n```\n\nWriteDocuments is called (transactionally) from the precise-code-intel-worker. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.WriteMeta",
                    "documentation": {
                      "identifier": "Store.WriteMeta",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.WriteMeta",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) WriteMeta(ctx context.Context, bundleID int, meta semantic.MetaData) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) WriteMeta(ctx context.Context, bundleID int, meta semantic.MetaData) (err error)\n```\n\nWriteMeta is called (transactionally) from the precise-code-intel-worker. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.WriteReferences",
                    "documentation": {
                      "identifier": "Store.WriteReferences",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.WriteReferences",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) WriteReferences(ctx context.Context, bundleID int, monikerLocations chan semantic.MonikerLocations) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) WriteReferences(ctx context.Context, bundleID int, monikerLocations chan semantic.MonikerLocations) (err error)\n```\n\nWriteReferences is called (transactionally) from the precise-code-intel-worker. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.WriteResultChunks",
                    "documentation": {
                      "identifier": "Store.WriteResultChunks",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.WriteResultChunks",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) WriteResultChunks(ctx context.Context, bundleID int, resultChunks chan semantic.IndexedResultChunkData) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) WriteResultChunks(ctx context.Context, bundleID int, resultChunks chan semantic.IndexedResultChunkData) (err error)\n```\n\nWriteResultChunks is called (transactionally) from the precise-code-intel-worker. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.definitionsReferences",
                    "documentation": {
                      "identifier": "Store.definitionsReferences",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.definitionsReferences",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) definitionsReferences(ctx context.Context, extractor func(r semantic.RangeData) semantic.ID, operation *observation.Operation, bundleID int, path string, line, character, limit, offset int) (_ []Location, _ int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) definitionsReferences(ctx context.Context, extractor func(r semantic.RangeData) semantic.ID, operation *observation.Operation, bundleID int, path string, line, character, limit, offset int) (_ []Location, _ int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.locations",
                    "documentation": {
                      "identifier": "Store.locations",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.locations",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) locations(ctx context.Context, bundleID int, ids []semantic.ID, limit, offset int) (_ map[semantic.ID][]Location, _ int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) locations(ctx context.Context, bundleID int, ids []semantic.ID, limit, offset int) (_ map[semantic.ID][]Location, _ int, err error)\n```\n\nlocations queries the locations associated with the given definition or reference identifiers. This method returns a map from result set identifiers to another map from document paths to locations within that document, as well as a total count of locations within the map. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.locationsWithinFile",
                    "documentation": {
                      "identifier": "Store.locationsWithinFile",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.locationsWithinFile",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) locationsWithinFile(ctx context.Context, bundleID int, ids []semantic.ID, path string, documentData semantic.DocumentData) (_ map[semantic.ID][]Location, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) locationsWithinFile(ctx context.Context, bundleID int, ids []semantic.ID, path string, documentData semantic.DocumentData) (_ map[semantic.ID][]Location, err error)\n```\n\nlocationsWithinFile queries the file-local locations associated with the given definition or reference identifiers. Like locations, this method returns a map from result set identifiers to another map from document paths to locations within that document. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.makeDocumentVisitor",
                    "documentation": {
                      "identifier": "Store.makeDocumentVisitor",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.makeDocumentVisitor",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) makeDocumentVisitor(f func(string, semantic.DocumentData)) func(rows *sql.Rows, queryErr error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) makeDocumentVisitor(f func(string, semantic.DocumentData)) func(rows *sql.Rows, queryErr error) error\n```\n\nmakeDocumentVisitor returns a function that calls the given visitor function over each matching decoded document value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.makeResultChunkVisitor",
                    "documentation": {
                      "identifier": "Store.makeResultChunkVisitor",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.makeResultChunkVisitor",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) makeResultChunkVisitor(rows *sql.Rows, queryErr error) func(func(int, semantic.ResultChunkData)) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) makeResultChunkVisitor(rows *sql.Rows, queryErr error) func(func(int, semantic.ResultChunkData)) error\n```\n\nmakeResultChunkVisitor returns a function that accepts a mapping function, reads result chunk values from the given row object and calls the mapping function on each decoded result set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.readLocationsFromResultChunks",
                    "documentation": {
                      "identifier": "Store.readLocationsFromResultChunks",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.readLocationsFromResultChunks",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) readLocationsFromResultChunks(ctx context.Context, bundleID int, ids []semantic.ID, indexes []int, targetPath string) (map[semantic.ID]map[string][]semantic.ID, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) readLocationsFromResultChunks(ctx context.Context, bundleID int, ids []semantic.ID, indexes []int, targetPath string) (map[semantic.ID]map[string][]semantic.ID, int, error)\n```\n\nreadLocationsFromResultChunks reads the given result chunk indexes for a given bundle. This method returns a map from documents to range identifiers that compose each of the given input result set identifiers. If a non-empty target path is supplied, then any range falling outside that document path will be omitted from the output. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.readRangesFromDocument",
                    "documentation": {
                      "identifier": "Store.readRangesFromDocument",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.readRangesFromDocument",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) readRangesFromDocument(bundleID int, rangeIDsByResultID map[semantic.ID]map[string][]semantic.ID, locationsByResultID map[semantic.ID][]Location, path string, document semantic.DocumentData, traceLog observation.TraceLogger) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) readRangesFromDocument(bundleID int, rangeIDsByResultID map[semantic.ID]map[string][]semantic.ID, locationsByResultID map[semantic.ID][]Location, path string, document semantic.DocumentData, traceLog observation.TraceLogger) int\n```\n\nreadRangesFromDocument extracts range data from the given document. This method populates the given locationsByResultId map, which resolves the missing data given via the rangeIDsByResultID parameter. This method returns a total count of ranges in the result set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.readRangesFromDocuments",
                    "documentation": {
                      "identifier": "Store.readRangesFromDocuments",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.readRangesFromDocuments",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) readRangesFromDocuments(ctx context.Context, bundleID int, ids []semantic.ID, paths []string, rangeIDsByResultID map[semantic.ID]map[string][]semantic.ID, traceLog observation.TraceLogger) (map[semantic.ID][]Location, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) readRangesFromDocuments(ctx context.Context, bundleID int, ids []semantic.ID, paths []string, rangeIDsByResultID map[semantic.ID]map[string][]semantic.ID, traceLog observation.TraceLogger) (map[semantic.ID][]Location, int, error)\n```\n\nreadRangesFromDocuments extracts range data from the documents with the given paths. This method returns a map from result set identifiers to the set of locations composing that result set. The output resolves the missing data given via the rangeIDsByResultID parameter. This method also returns a total count of ranges in the result set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.scanDocumentData",
                    "documentation": {
                      "identifier": "Store.scanDocumentData",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.scanDocumentData",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) scanDocumentData(rows *sql.Rows, queryErr error) (_ []QualifiedDocumentData, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) scanDocumentData(rows *sql.Rows, queryErr error) (_ []QualifiedDocumentData, err error)\n```\n\nscanDocumentData reads qualified document data from the given row object. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.scanFirstDocumentData",
                    "documentation": {
                      "identifier": "Store.scanFirstDocumentData",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.scanFirstDocumentData",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) scanFirstDocumentData(rows *sql.Rows, queryErr error) (_ QualifiedDocumentData, _ bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) scanFirstDocumentData(rows *sql.Rows, queryErr error) (_ QualifiedDocumentData, _ bool, err error)\n```\n\nscanFirstDocumentData reads qualified document data from its given row object and returns the first one. If no rows match the query, a false-valued flag is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.scanFirstDocumentationPageData",
                    "documentation": {
                      "identifier": "Store.scanFirstDocumentationPageData",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.scanFirstDocumentationPageData",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) scanFirstDocumentationPageData(rows *sql.Rows, queryErr error) (_ *semantic.DocumentationPageData, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) scanFirstDocumentationPageData(rows *sql.Rows, queryErr error) (_ *semantic.DocumentationPageData, err error)\n```\n\nscanFirstDocumentationPageData reads the first DocumentationPageData row. If no rows match the query, a nil is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.scanQualifiedMonikerLocations",
                    "documentation": {
                      "identifier": "Store.scanQualifiedMonikerLocations",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.scanQualifiedMonikerLocations",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) scanQualifiedMonikerLocations(rows *sql.Rows, queryErr error) (_ []QualifiedMonikerLocations, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) scanQualifiedMonikerLocations(rows *sql.Rows, queryErr error) (_ []QualifiedMonikerLocations, err error)\n```\n\nscanQualifiedMonikerLocations reads moniker locations values from the given row object. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.scanSingleDocumentDataObject",
                    "documentation": {
                      "identifier": "Store.scanSingleDocumentDataObject",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.scanSingleDocumentDataObject",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) scanSingleDocumentDataObject(rows *sql.Rows) (QualifiedDocumentData, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) scanSingleDocumentDataObject(rows *sql.Rows) (QualifiedDocumentData, error)\n```\n\nscanSingleDocumentDataObject populates a qualified document data value from the given cursor. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.scanSingleQualifiedMonikerLocationsObject",
                    "documentation": {
                      "identifier": "Store.scanSingleQualifiedMonikerLocationsObject",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.scanSingleQualifiedMonikerLocationsObject",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) scanSingleQualifiedMonikerLocationsObject(rows *sql.Rows) (QualifiedMonikerLocations, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) scanSingleQualifiedMonikerLocationsObject(rows *sql.Rows) (QualifiedMonikerLocations, error)\n```\n\nscanSingleQualifiedMonikerLocationsObject populates a qualified moniker locations value from the given cursor. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.translateIDsToResultChunkIndexes",
                    "documentation": {
                      "identifier": "Store.translateIDsToResultChunkIndexes",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.translateIDsToResultChunkIndexes",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) translateIDsToResultChunkIndexes(ctx context.Context, bundleID int, ids []semantic.ID) ([]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) translateIDsToResultChunkIndexes(ctx context.Context, bundleID int, ids []semantic.ID) ([]int, error)\n```\n\ntranslateIDsToResultChunkIndexes converts a set of result set identifiers within a given bundle into a deduplicated and sorted set of result chunk indexes that compoletely cover those identifiers. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#Store.writeDefinitionReferences",
                    "documentation": {
                      "identifier": "Store.writeDefinitionReferences",
                      "newPage": false,
                      "searchKey": "lsifstore.Store.writeDefinitionReferences",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) writeDefinitionReferences(ctx context.Context, bundleID int, tableName string, version int, monikerLocations chan semantic.MonikerLocations, traceLog observation.TraceLogger) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) writeDefinitionReferences(ctx context.Context, bundleID int, tableName string, version int, monikerLocations chan semantic.MonikerLocations, traceLog observation.TraceLogger) (err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#operations",
              "documentation": {
                "identifier": "operations",
                "newPage": false,
                "searchKey": "lsifstore.operations",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type operations struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype operations struct {\n\tbulkMonikerResults      *observation.Operation\n\tclear                   *observation.Operation\n\tdefinitions             *observation.Operation\n\tdiagnostics             *observation.Operation\n\texists                  *observation.Operation\n\thover                   *observation.Operation\n\tmonikerResults          *observation.Operation\n\tmonikersByPosition      *observation.Operation\n\tpackageInformation      *observation.Operation\n\tranges                  *observation.Operation\n\treferences              *observation.Operation\n\tdocumentationPage       *observation.Operation\n\twriteDefinitions        *observation.Operation\n\twriteDocuments          *observation.Operation\n\twriteMeta               *observation.Operation\n\twriteReferences         *observation.Operation\n\twriteResultChunks       *observation.Operation\n\twriteDocumentationPages *observation.Operation\n\n\tlocations           *observation.Operation\n\tlocationsWithinFile *observation.Operation\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/lsifstore#newOperations",
                    "documentation": {
                      "identifier": "newOperations",
                      "newPage": false,
                      "searchKey": "lsifstore.newOperations",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newOperations(observationContext *observation.Context) *operations"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newOperations(observationContext *observation.Context) *operations\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/codeintel/stores/lsifstore#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#TestClear",
              "documentation": {
                "identifier": "TestClear",
                "newPage": false,
                "searchKey": "lsifstore.TestClear",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClear(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClear(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#TestDatabaseBulkMonikerResults",
              "documentation": {
                "identifier": "TestDatabaseBulkMonikerResults",
                "newPage": false,
                "searchKey": "lsifstore.TestDatabaseBulkMonikerResults",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDatabaseBulkMonikerResults(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDatabaseBulkMonikerResults(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#TestDatabaseDefinitions",
              "documentation": {
                "identifier": "TestDatabaseDefinitions",
                "newPage": false,
                "searchKey": "lsifstore.TestDatabaseDefinitions",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDatabaseDefinitions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDatabaseDefinitions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#TestDatabaseExists",
              "documentation": {
                "identifier": "TestDatabaseExists",
                "newPage": false,
                "searchKey": "lsifstore.TestDatabaseExists",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDatabaseExists(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDatabaseExists(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#TestDatabaseHover",
              "documentation": {
                "identifier": "TestDatabaseHover",
                "newPage": false,
                "searchKey": "lsifstore.TestDatabaseHover",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDatabaseHover(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDatabaseHover(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#TestDatabaseMonikersByPosition",
              "documentation": {
                "identifier": "TestDatabaseMonikersByPosition",
                "newPage": false,
                "searchKey": "lsifstore.TestDatabaseMonikersByPosition",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDatabaseMonikersByPosition(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDatabaseMonikersByPosition(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#TestDatabasePackageInformation",
              "documentation": {
                "identifier": "TestDatabasePackageInformation",
                "newPage": false,
                "searchKey": "lsifstore.TestDatabasePackageInformation",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDatabasePackageInformation(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDatabasePackageInformation(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#TestDatabaseRanges",
              "documentation": {
                "identifier": "TestDatabaseRanges",
                "newPage": false,
                "searchKey": "lsifstore.TestDatabaseRanges",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDatabaseRanges(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDatabaseRanges(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#TestDatabaseReferences",
              "documentation": {
                "identifier": "TestDatabaseReferences",
                "newPage": false,
                "searchKey": "lsifstore.TestDatabaseReferences",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDatabaseReferences(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDatabaseReferences(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#TestDocumentData",
              "documentation": {
                "identifier": "TestDocumentData",
                "newPage": false,
                "searchKey": "lsifstore.TestDocumentData",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDocumentData(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDocumentData(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#TestLocations",
              "documentation": {
                "identifier": "TestLocations",
                "newPage": false,
                "searchKey": "lsifstore.TestLocations",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLocations(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLocations(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#TestResultChunkData",
              "documentation": {
                "identifier": "TestResultChunkData",
                "newPage": false,
                "searchKey": "lsifstore.TestResultChunkData",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResultChunkData(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResultChunkData(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#compareBundleRanges",
              "documentation": {
                "identifier": "compareBundleRanges",
                "newPage": false,
                "searchKey": "lsifstore.compareBundleRanges",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func compareBundleRanges(r1, r2 Range) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc compareBundleRanges(r1, r2 Range) bool\n```\n\ncompareBundleRanges returns true if r1's start position occurs before r2's start position. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#extractResultIDs",
              "documentation": {
                "identifier": "extractResultIDs",
                "newPage": false,
                "searchKey": "lsifstore.extractResultIDs",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func extractResultIDs(ranges []semantic.RangeData, fn func(r semantic.RangeData) semantic.ID) []semantic.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc extractResultIDs(ranges []semantic.RangeData, fn func(r semantic.RangeData) semantic.ID) []semantic.ID\n```\n\nextractResultIDs extracts result identifiers from each range in the given list. The output list is relative to the input range list, but with duplicates removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#idsToString",
              "documentation": {
                "identifier": "idsToString",
                "newPage": false,
                "searchKey": "lsifstore.idsToString",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func idsToString(vs []semantic.ID) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc idsToString(vs []semantic.ID) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#init.serializer.go",
              "documentation": {
                "identifier": "init.serializer.go",
                "newPage": false,
                "searchKey": "lsifstore.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#init.serializer_documentation.go",
              "documentation": {
                "identifier": "init.serializer_documentation.go",
                "newPage": false,
                "searchKey": "lsifstore.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#init.store_test.go",
              "documentation": {
                "identifier": "init.store_test.go",
                "newPage": false,
                "searchKey": "lsifstore.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#intsToString",
              "documentation": {
                "identifier": "intsToString",
                "newPage": false,
                "searchKey": "lsifstore.intsToString",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func intsToString(vs []int) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc intsToString(vs []int) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#limitResultMap",
              "documentation": {
                "identifier": "limitResultMap",
                "newPage": false,
                "searchKey": "lsifstore.limitResultMap",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func limitResultMap(ids []semantic.ID, rangeIDsByResultID map[semantic.ID]map[string][]semantic.ID, limit, offset int) (limited map[semantic.ID]map[string][]semantic.ID, referencedPaths []string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc limitResultMap(ids []semantic.ID, rangeIDsByResultID map[semantic.ID]map[string][]semantic.ID, limit, offset int) (limited map[semantic.ID]map[string][]semantic.ID, referencedPaths []string)\n```\n\nlimitResultMap returns a map symmetric to the given rangeIDsByResultID that includes only the location results on the current page specified by limit and offset, as well as a deduplicated and sorted list of paths that exist in the second-level of the returned map. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#monikersToString",
              "documentation": {
                "identifier": "monikersToString",
                "newPage": false,
                "searchKey": "lsifstore.monikersToString",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func monikersToString(vs []semantic.MonikerData) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc monikersToString(vs []semantic.MonikerData) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#pathsFromResultMap",
              "documentation": {
                "identifier": "pathsFromResultMap",
                "newPage": false,
                "searchKey": "lsifstore.pathsFromResultMap",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func pathsFromResultMap(rangeIDsByResultID map[semantic.ID]map[string][]semantic.ID) []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc pathsFromResultMap(rangeIDsByResultID map[semantic.ID]map[string][]semantic.ID) []string\n```\n\npathsFromResultMap returns a deduplicated and sorted set of document paths present in the given map. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#sortLocations",
              "documentation": {
                "identifier": "sortLocations",
                "newPage": false,
                "searchKey": "lsifstore.sortLocations",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sortLocations(locations []Location)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sortLocations(locations []Location)\n```\n\nsortLocations sorts locations by document, then by offset within a document. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/lsifstore#withBatchInserter",
              "documentation": {
                "identifier": "withBatchInserter",
                "newPage": false,
                "searchKey": "lsifstore.withBatchInserter",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func withBatchInserter(ctx context.Context, db dbutil.DB, tableName string, columns []string, f func(inserter *batch.Inserter) error) (err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc withBatchInserter(ctx context.Context, db dbutil.DB, tableName string, columns []string, f func(inserter *batch.Inserter) error) (err error)\n```\n\nwithBatchInserter runs batch.WithInserter in a number of goroutines proportional to the maximum number of CPUs that can be executing simultaneously. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/enterprise/internal/codeintel/stores/lsifstore/migration"
    }
  ]
}
