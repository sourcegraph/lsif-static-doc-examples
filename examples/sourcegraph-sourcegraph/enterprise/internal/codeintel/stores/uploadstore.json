{
  "pathID": "/enterprise/internal/codeintel/stores/uploadstore",
  "documentation": {
    "identifier": "uploadstore",
    "newPage": true,
    "searchKey": "enterprise/internal/codeintel/stores/uploadstore",
    "tags": [
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package uploadstore"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/internal/codeintel/stores/uploadstore#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#maxZeroReads",
              "documentation": {
                "identifier": "maxZeroReads",
                "newPage": false,
                "searchKey": "uploadstore.maxZeroReads",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const maxZeroReads"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst maxZeroReads = 3\n```\n\nmaxZeroReads is the maximum number of no-progress iterations (due to connection reset errors) in Get that can occur in a row before returning an error. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/codeintel/stores/uploadstore#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#errNoDownloadProgress",
              "documentation": {
                "identifier": "errNoDownloadProgress",
                "newPage": false,
                "searchKey": "uploadstore.errNoDownloadProgress",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errNoDownloadProgress"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errNoDownloadProgress = errors.New(\"no download progress\")\n```\n\nerrNoDownloadProgress is returned from Get after multiple connection reset errors occur in a row. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#ioCopyHook",
              "documentation": {
                "identifier": "ioCopyHook",
                "newPage": false,
                "searchKey": "uploadstore.ioCopyHook",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ioCopyHook"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ioCopyHook = io.Copy\n```\n\nioCopyHook is a pointer to io.Copy. This function is replaced in unit tests so that we can easily inject errors when reading from the backing S3 store. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#storeConstructors",
              "documentation": {
                "identifier": "storeConstructors",
                "newPage": false,
                "searchKey": "uploadstore.storeConstructors",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var storeConstructors"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar storeConstructors = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#bytesPattern",
              "documentation": {
                "identifier": "bytesPattern",
                "newPage": false,
                "searchKey": "uploadstore.bytesPattern",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bytesPattern"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bytesPattern = regexp.MustCompile(`bytes=(\\d+)-`)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#fullContents",
              "documentation": {
                "identifier": "fullContents",
                "newPage": false,
                "searchKey": "uploadstore.fullContents",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var fullContents"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fullContents = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/codeintel/stores/uploadstore#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#Config",
              "documentation": {
                "identifier": "Config",
                "newPage": false,
                "searchKey": "uploadstore.Config",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Config struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Config struct {\n\tenv.BaseConfig\n\n\tBackend      string\n\tManageBucket bool\n\tBucket       string\n\tTTL          time.Duration\n\tS3           S3Config\n\tGCS          GCSConfig\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#Config.Load",
                    "documentation": {
                      "identifier": "Config.Load",
                      "newPage": false,
                      "searchKey": "uploadstore.Config.Load",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Config) Load()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Config) Load()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#loader",
              "documentation": {
                "identifier": "loader",
                "newPage": false,
                "searchKey": "uploadstore.loader",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type loader interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype loader interface {\n\tload(parent *env.BaseConfig)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#gcsAPI",
              "documentation": {
                "identifier": "gcsAPI",
                "newPage": false,
                "searchKey": "uploadstore.gcsAPI",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type gcsAPI interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gcsAPI interface {\n\tBucket(name string) gcsBucketHandle\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#gcsBucketHandle",
              "documentation": {
                "identifier": "gcsBucketHandle",
                "newPage": false,
                "searchKey": "uploadstore.gcsBucketHandle",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type gcsBucketHandle interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gcsBucketHandle interface {\n\tAttrs(ctx context.Context) (*storage.BucketAttrs, error)\n\tCreate(ctx context.Context, projectID string, attrs *storage.BucketAttrs) error\n\tUpdate(ctx context.Context, attrs storage.BucketAttrsToUpdate) error\n\tObject(name string) gcsObjectHandle\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#gcsObjectHandle",
              "documentation": {
                "identifier": "gcsObjectHandle",
                "newPage": false,
                "searchKey": "uploadstore.gcsObjectHandle",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type gcsObjectHandle interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gcsObjectHandle interface {\n\tDelete(ctx context.Context) error\n\tNewRangeReader(ctx context.Context, offset, length int64) (io.ReadCloser, error)\n\tNewWriter(ctx context.Context) io.WriteCloser\n\tComposerFrom(sources ...gcsObjectHandle) gcsComposer\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#gcsComposer",
              "documentation": {
                "identifier": "gcsComposer",
                "newPage": false,
                "searchKey": "uploadstore.gcsComposer",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type gcsComposer interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gcsComposer interface {\n\tRun(ctx context.Context) (*storage.ObjectAttrs, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#gcsAPIShim",
              "documentation": {
                "identifier": "gcsAPIShim",
                "newPage": false,
                "searchKey": "uploadstore.gcsAPIShim",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type gcsAPIShim struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gcsAPIShim struct{ client *storage.Client }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#gcsAPIShim.Bucket",
                    "documentation": {
                      "identifier": "gcsAPIShim.Bucket",
                      "newPage": false,
                      "searchKey": "uploadstore.gcsAPIShim.Bucket",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *gcsAPIShim) Bucket(name string) gcsBucketHandle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *gcsAPIShim) Bucket(name string) gcsBucketHandle\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#bucketHandleShim",
              "documentation": {
                "identifier": "bucketHandleShim",
                "newPage": false,
                "searchKey": "uploadstore.bucketHandleShim",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type bucketHandleShim struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype bucketHandleShim struct{ handle *storage.BucketHandle }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#bucketHandleShim.Attrs",
                    "documentation": {
                      "identifier": "bucketHandleShim.Attrs",
                      "newPage": false,
                      "searchKey": "uploadstore.bucketHandleShim.Attrs",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *bucketHandleShim) Attrs(ctx context.Context) (*storage.BucketAttrs, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *bucketHandleShim) Attrs(ctx context.Context) (*storage.BucketAttrs, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#bucketHandleShim.Create",
                    "documentation": {
                      "identifier": "bucketHandleShim.Create",
                      "newPage": false,
                      "searchKey": "uploadstore.bucketHandleShim.Create",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *bucketHandleShim) Create(ctx context.Context, projectID string, attrs *storage.BucketAttrs) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *bucketHandleShim) Create(ctx context.Context, projectID string, attrs *storage.BucketAttrs) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#bucketHandleShim.Update",
                    "documentation": {
                      "identifier": "bucketHandleShim.Update",
                      "newPage": false,
                      "searchKey": "uploadstore.bucketHandleShim.Update",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *bucketHandleShim) Update(ctx context.Context, attrs storage.BucketAttrsToUpdate) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *bucketHandleShim) Update(ctx context.Context, attrs storage.BucketAttrsToUpdate) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#bucketHandleShim.Object",
                    "documentation": {
                      "identifier": "bucketHandleShim.Object",
                      "newPage": false,
                      "searchKey": "uploadstore.bucketHandleShim.Object",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *bucketHandleShim) Object(name string) gcsObjectHandle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *bucketHandleShim) Object(name string) gcsObjectHandle\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#objectHandleShim",
              "documentation": {
                "identifier": "objectHandleShim",
                "newPage": false,
                "searchKey": "uploadstore.objectHandleShim",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type objectHandleShim struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype objectHandleShim struct{ handle *storage.ObjectHandle }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#objectHandleShim.Delete",
                    "documentation": {
                      "identifier": "objectHandleShim.Delete",
                      "newPage": false,
                      "searchKey": "uploadstore.objectHandleShim.Delete",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *objectHandleShim) Delete(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *objectHandleShim) Delete(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#objectHandleShim.NewRangeReader",
                    "documentation": {
                      "identifier": "objectHandleShim.NewRangeReader",
                      "newPage": false,
                      "searchKey": "uploadstore.objectHandleShim.NewRangeReader",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *objectHandleShim) NewRangeReader(ctx context.Context, offset, length int64) (io.ReadCloser, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *objectHandleShim) NewRangeReader(ctx context.Context, offset, length int64) (io.ReadCloser, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#objectHandleShim.NewWriter",
                    "documentation": {
                      "identifier": "objectHandleShim.NewWriter",
                      "newPage": false,
                      "searchKey": "uploadstore.objectHandleShim.NewWriter",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *objectHandleShim) NewWriter(ctx context.Context) io.WriteCloser"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *objectHandleShim) NewWriter(ctx context.Context) io.WriteCloser\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#objectHandleShim.ComposerFrom",
                    "documentation": {
                      "identifier": "objectHandleShim.ComposerFrom",
                      "newPage": false,
                      "searchKey": "uploadstore.objectHandleShim.ComposerFrom",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *objectHandleShim) ComposerFrom(sources ...gcsObjectHandle) gcsComposer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *objectHandleShim) ComposerFrom(sources ...gcsObjectHandle) gcsComposer\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#composerShim",
              "documentation": {
                "identifier": "composerShim",
                "newPage": false,
                "searchKey": "uploadstore.composerShim",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type composerShim struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype composerShim struct {\n\thandle  *storage.ObjectHandle\n\tsources []*storage.ObjectHandle\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#composerShim.Run",
                    "documentation": {
                      "identifier": "composerShim.Run",
                      "newPage": false,
                      "searchKey": "uploadstore.composerShim.Run",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *composerShim) Run(ctx context.Context) (*storage.ObjectAttrs, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *composerShim) Run(ctx context.Context) (*storage.ObjectAttrs, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#gcsStore",
              "documentation": {
                "identifier": "gcsStore",
                "newPage": false,
                "searchKey": "uploadstore.gcsStore",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type gcsStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gcsStore struct {\n\tbucket       string\n\tttl          time.Duration\n\tmanageBucket bool\n\tconfig       GCSConfig\n\tclient       gcsAPI\n\toperations   *operations\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#newGCSWithClient",
                    "documentation": {
                      "identifier": "newGCSWithClient",
                      "newPage": false,
                      "searchKey": "uploadstore.newGCSWithClient",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newGCSWithClient(client gcsAPI, bucket string, ttl time.Duration, manageBucket bool, config GCSConfig, operations *operations) *gcsStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newGCSWithClient(client gcsAPI, bucket string, ttl time.Duration, manageBucket bool, config GCSConfig, operations *operations) *gcsStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#rawGCSClient",
                    "documentation": {
                      "identifier": "rawGCSClient",
                      "newPage": false,
                      "searchKey": "uploadstore.rawGCSClient",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func rawGCSClient(client gcsAPI, manageBucket bool) *gcsStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc rawGCSClient(client gcsAPI, manageBucket bool) *gcsStore\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#gcsStore.Init",
                    "documentation": {
                      "identifier": "gcsStore.Init",
                      "newPage": false,
                      "searchKey": "uploadstore.gcsStore.Init",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *gcsStore) Init(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *gcsStore) Init(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#gcsStore.Get",
                    "documentation": {
                      "identifier": "gcsStore.Get",
                      "newPage": false,
                      "searchKey": "uploadstore.gcsStore.Get",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *gcsStore) Get(ctx context.Context, key string) (_ io.ReadCloser, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *gcsStore) Get(ctx context.Context, key string) (_ io.ReadCloser, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#gcsStore.Upload",
                    "documentation": {
                      "identifier": "gcsStore.Upload",
                      "newPage": false,
                      "searchKey": "uploadstore.gcsStore.Upload",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *gcsStore) Upload(ctx context.Context, key string, r io.Reader) (_ int64, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *gcsStore) Upload(ctx context.Context, key string, r io.Reader) (_ int64, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#gcsStore.Compose",
                    "documentation": {
                      "identifier": "gcsStore.Compose",
                      "newPage": false,
                      "searchKey": "uploadstore.gcsStore.Compose",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *gcsStore) Compose(ctx context.Context, destination string, sources ...string) (_ int64, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *gcsStore) Compose(ctx context.Context, destination string, sources ...string) (_ int64, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#gcsStore.Delete",
                    "documentation": {
                      "identifier": "gcsStore.Delete",
                      "newPage": false,
                      "searchKey": "uploadstore.gcsStore.Delete",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *gcsStore) Delete(ctx context.Context, key string) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *gcsStore) Delete(ctx context.Context, key string) (err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#gcsStore.create",
                    "documentation": {
                      "identifier": "gcsStore.create",
                      "newPage": false,
                      "searchKey": "uploadstore.gcsStore.create",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *gcsStore) create(ctx context.Context, bucket gcsBucketHandle) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *gcsStore) create(ctx context.Context, bucket gcsBucketHandle) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#gcsStore.update",
                    "documentation": {
                      "identifier": "gcsStore.update",
                      "newPage": false,
                      "searchKey": "uploadstore.gcsStore.update",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *gcsStore) update(ctx context.Context, bucket gcsBucketHandle) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *gcsStore) update(ctx context.Context, bucket gcsBucketHandle) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#gcsStore.lifecycle",
                    "documentation": {
                      "identifier": "gcsStore.lifecycle",
                      "newPage": false,
                      "searchKey": "uploadstore.gcsStore.lifecycle",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *gcsStore) lifecycle() storage.Lifecycle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *gcsStore) lifecycle() storage.Lifecycle\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#gcsStore.deleteSources",
                    "documentation": {
                      "identifier": "gcsStore.deleteSources",
                      "newPage": false,
                      "searchKey": "uploadstore.gcsStore.deleteSources",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *gcsStore) deleteSources(ctx context.Context, bucket gcsBucketHandle, sources []string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *gcsStore) deleteSources(ctx context.Context, bucket gcsBucketHandle, sources []string) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GCSConfig",
              "documentation": {
                "identifier": "GCSConfig",
                "newPage": false,
                "searchKey": "uploadstore.GCSConfig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type GCSConfig struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GCSConfig struct {\n\tProjectID               string\n\tCredentialsFile         string\n\tCredentialsFileContents string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GCSConfig.load",
                    "documentation": {
                      "identifier": "GCSConfig.load",
                      "newPage": false,
                      "searchKey": "uploadstore.GCSConfig.load",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *GCSConfig) load(parent *env.BaseConfig)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *GCSConfig) load(parent *env.BaseConfig)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#lazyStore",
              "documentation": {
                "identifier": "lazyStore",
                "newPage": false,
                "searchKey": "uploadstore.lazyStore",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type lazyStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype lazyStore struct {\n\tstore       Store\n\tm           sync.RWMutex\n\tinitialized bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#lazyStore.Init",
                    "documentation": {
                      "identifier": "lazyStore.Init",
                      "newPage": false,
                      "searchKey": "uploadstore.lazyStore.Init",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *lazyStore) Init(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *lazyStore) Init(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#lazyStore.Get",
                    "documentation": {
                      "identifier": "lazyStore.Get",
                      "newPage": false,
                      "searchKey": "uploadstore.lazyStore.Get",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *lazyStore) Get(ctx context.Context, key string) (io.ReadCloser, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *lazyStore) Get(ctx context.Context, key string) (io.ReadCloser, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#lazyStore.Upload",
                    "documentation": {
                      "identifier": "lazyStore.Upload",
                      "newPage": false,
                      "searchKey": "uploadstore.lazyStore.Upload",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *lazyStore) Upload(ctx context.Context, key string, r io.Reader) (int64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *lazyStore) Upload(ctx context.Context, key string, r io.Reader) (int64, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#lazyStore.Compose",
                    "documentation": {
                      "identifier": "lazyStore.Compose",
                      "newPage": false,
                      "searchKey": "uploadstore.lazyStore.Compose",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *lazyStore) Compose(ctx context.Context, destination string, sources ...string) (int64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *lazyStore) Compose(ctx context.Context, destination string, sources ...string) (int64, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#lazyStore.Delete",
                    "documentation": {
                      "identifier": "lazyStore.Delete",
                      "newPage": false,
                      "searchKey": "uploadstore.lazyStore.Delete",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *lazyStore) Delete(ctx context.Context, key string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *lazyStore) Delete(ctx context.Context, key string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#lazyStore.initOnce",
                    "documentation": {
                      "identifier": "lazyStore.initOnce",
                      "newPage": false,
                      "searchKey": "uploadstore.lazyStore.initOnce",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *lazyStore) initOnce(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *lazyStore) initOnce(ctx context.Context) error\n```\n\ninitOnce serializes access to the underlying store's Init method. If the Init method completes successfully, all future calls to this function will no-op. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#operations",
              "documentation": {
                "identifier": "operations",
                "newPage": false,
                "searchKey": "uploadstore.operations",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type operations struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype operations struct {\n\tget     *observation.Operation\n\tupload  *observation.Operation\n\tcompose *observation.Operation\n\tdelete  *observation.Operation\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#newOperations",
                    "documentation": {
                      "identifier": "newOperations",
                      "newPage": false,
                      "searchKey": "uploadstore.newOperations",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newOperations(observationContext *observation.Context) *operations"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newOperations(observationContext *observation.Context) *operations\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3API",
              "documentation": {
                "identifier": "s3API",
                "newPage": false,
                "searchKey": "uploadstore.s3API",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type s3API interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype s3API interface {\n\tHeadObject(ctx context.Context, input *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)\n\tGetObject(ctx context.Context, input *s3.GetObjectInput) (*s3.GetObjectOutput, error)\n\tCreateMultipartUpload(ctx context.Context, input *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)\n\tAbortMultipartUpload(ctx context.Context, input *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)\n\tDeleteObject(ctx context.Context, input *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)\n\tUploadPartCopy(ctx context.Context, input *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)\n\tCompleteMultipartUpload(ctx context.Context, input *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)\n\tCreateBucket(ctx context.Context, input *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)\n\tPutBucketLifecycleConfiguration(ctx context.Context, input *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3Uploader",
              "documentation": {
                "identifier": "s3Uploader",
                "newPage": false,
                "searchKey": "uploadstore.s3Uploader",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type s3Uploader interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype s3Uploader interface {\n\tUpload(ctx context.Context, input *s3.PutObjectInput) error\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3APIShim",
              "documentation": {
                "identifier": "s3APIShim",
                "newPage": false,
                "searchKey": "uploadstore.s3APIShim",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type s3APIShim struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype s3APIShim struct{ *s3.Client }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3APIShim.CreateBucket",
                    "documentation": {
                      "identifier": "s3APIShim.CreateBucket",
                      "newPage": false,
                      "searchKey": "uploadstore.s3APIShim.CreateBucket",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3APIShim) CreateBucket(ctx context.Context, input *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3APIShim) CreateBucket(ctx context.Context, input *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3APIShim.PutBucketLifecycleConfiguration",
                    "documentation": {
                      "identifier": "s3APIShim.PutBucketLifecycleConfiguration",
                      "newPage": false,
                      "searchKey": "uploadstore.s3APIShim.PutBucketLifecycleConfiguration",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3APIShim) PutBucketLifecycleConfiguration(ctx context.Context, input *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3APIShim) PutBucketLifecycleConfiguration(ctx context.Context, input *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3APIShim.HeadObject",
                    "documentation": {
                      "identifier": "s3APIShim.HeadObject",
                      "newPage": false,
                      "searchKey": "uploadstore.s3APIShim.HeadObject",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3APIShim) HeadObject(ctx context.Context, input *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3APIShim) HeadObject(ctx context.Context, input *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3APIShim.GetObject",
                    "documentation": {
                      "identifier": "s3APIShim.GetObject",
                      "newPage": false,
                      "searchKey": "uploadstore.s3APIShim.GetObject",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3APIShim) GetObject(ctx context.Context, input *s3.GetObjectInput) (*s3.GetObjectOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3APIShim) GetObject(ctx context.Context, input *s3.GetObjectInput) (*s3.GetObjectOutput, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3APIShim.DeleteObject",
                    "documentation": {
                      "identifier": "s3APIShim.DeleteObject",
                      "newPage": false,
                      "searchKey": "uploadstore.s3APIShim.DeleteObject",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3APIShim) DeleteObject(ctx context.Context, input *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3APIShim) DeleteObject(ctx context.Context, input *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3APIShim.CreateMultipartUpload",
                    "documentation": {
                      "identifier": "s3APIShim.CreateMultipartUpload",
                      "newPage": false,
                      "searchKey": "uploadstore.s3APIShim.CreateMultipartUpload",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3APIShim) CreateMultipartUpload(ctx context.Context, input *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3APIShim) CreateMultipartUpload(ctx context.Context, input *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3APIShim.AbortMultipartUpload",
                    "documentation": {
                      "identifier": "s3APIShim.AbortMultipartUpload",
                      "newPage": false,
                      "searchKey": "uploadstore.s3APIShim.AbortMultipartUpload",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3APIShim) AbortMultipartUpload(ctx context.Context, input *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3APIShim) AbortMultipartUpload(ctx context.Context, input *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3APIShim.UploadPartCopy",
                    "documentation": {
                      "identifier": "s3APIShim.UploadPartCopy",
                      "newPage": false,
                      "searchKey": "uploadstore.s3APIShim.UploadPartCopy",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3APIShim) UploadPartCopy(ctx context.Context, input *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3APIShim) UploadPartCopy(ctx context.Context, input *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3APIShim.CompleteMultipartUpload",
                    "documentation": {
                      "identifier": "s3APIShim.CompleteMultipartUpload",
                      "newPage": false,
                      "searchKey": "uploadstore.s3APIShim.CompleteMultipartUpload",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3APIShim) CompleteMultipartUpload(ctx context.Context, input *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3APIShim) CompleteMultipartUpload(ctx context.Context, input *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3UploaderShim",
              "documentation": {
                "identifier": "s3UploaderShim",
                "newPage": false,
                "searchKey": "uploadstore.s3UploaderShim",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type s3UploaderShim struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype s3UploaderShim struct{ *manager.Uploader }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3UploaderShim.Upload",
                    "documentation": {
                      "identifier": "s3UploaderShim.Upload",
                      "newPage": false,
                      "searchKey": "uploadstore.s3UploaderShim.Upload",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3UploaderShim) Upload(ctx context.Context, input *s3.PutObjectInput) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3UploaderShim) Upload(ctx context.Context, input *s3.PutObjectInput) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3Store",
              "documentation": {
                "identifier": "s3Store",
                "newPage": false,
                "searchKey": "uploadstore.s3Store",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type s3Store struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype s3Store struct {\n\tbucket                       string\n\tmanageBucket                 bool\n\tclient                       s3API\n\tuploader                     s3Uploader\n\tbucketLifecycleConfiguration *s3types.BucketLifecycleConfiguration\n\toperations                   *operations\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#newS3WithClients",
                    "documentation": {
                      "identifier": "newS3WithClients",
                      "newPage": false,
                      "searchKey": "uploadstore.newS3WithClients",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newS3WithClients(client s3API, uploader s3Uploader, bucket string, manageBucket bool, lifecycleConfiguration *s3types.BucketLifecycleConfiguration, operations *operations) *s3Store"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newS3WithClients(client s3API, uploader s3Uploader, bucket string, manageBucket bool, lifecycleConfiguration *s3types.BucketLifecycleConfiguration, operations *operations) *s3Store\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#rawS3Client",
                    "documentation": {
                      "identifier": "rawS3Client",
                      "newPage": false,
                      "searchKey": "uploadstore.rawS3Client",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func rawS3Client(client s3API, uploader s3Uploader) *s3Store"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc rawS3Client(client s3API, uploader s3Uploader) *s3Store\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3Store.Init",
                    "documentation": {
                      "identifier": "s3Store.Init",
                      "newPage": false,
                      "searchKey": "uploadstore.s3Store.Init",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3Store) Init(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3Store) Init(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3Store.Get",
                    "documentation": {
                      "identifier": "s3Store.Get",
                      "newPage": false,
                      "searchKey": "uploadstore.s3Store.Get",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3Store) Get(ctx context.Context, key string) (_ io.ReadCloser, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3Store) Get(ctx context.Context, key string) (_ io.ReadCloser, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3Store.readObjectInto",
                    "documentation": {
                      "identifier": "s3Store.readObjectInto",
                      "newPage": false,
                      "searchKey": "uploadstore.s3Store.readObjectInto",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3Store) readObjectInto(ctx context.Context, w io.Writer, key string, byteOffset int64) (int64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3Store) readObjectInto(ctx context.Context, w io.Writer, key string, byteOffset int64) (int64, error)\n```\n\nreadObjectInto reads the content of the given key starting at the given byte offset into the given writer. The number of bytes read is returned. On successful read, the error value is nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3Store.Upload",
                    "documentation": {
                      "identifier": "s3Store.Upload",
                      "newPage": false,
                      "searchKey": "uploadstore.s3Store.Upload",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3Store) Upload(ctx context.Context, key string, r io.Reader) (_ int64, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3Store) Upload(ctx context.Context, key string, r io.Reader) (_ int64, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3Store.Compose",
                    "documentation": {
                      "identifier": "s3Store.Compose",
                      "newPage": false,
                      "searchKey": "uploadstore.s3Store.Compose",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3Store) Compose(ctx context.Context, destination string, sources ...string) (_ int64, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3Store) Compose(ctx context.Context, destination string, sources ...string) (_ int64, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3Store.Delete",
                    "documentation": {
                      "identifier": "s3Store.Delete",
                      "newPage": false,
                      "searchKey": "uploadstore.s3Store.Delete",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3Store) Delete(ctx context.Context, key string) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3Store) Delete(ctx context.Context, key string) (err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3Store.create",
                    "documentation": {
                      "identifier": "s3Store.create",
                      "newPage": false,
                      "searchKey": "uploadstore.s3Store.create",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3Store) create(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3Store) create(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3Store.update",
                    "documentation": {
                      "identifier": "s3Store.update",
                      "newPage": false,
                      "searchKey": "uploadstore.s3Store.update",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3Store) update(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3Store) update(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3Store.deleteSources",
                    "documentation": {
                      "identifier": "s3Store.deleteSources",
                      "newPage": false,
                      "searchKey": "uploadstore.s3Store.deleteSources",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *s3Store) deleteSources(ctx context.Context, bucket string, sources []string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *s3Store) deleteSources(ctx context.Context, bucket string, sources []string) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3Config",
              "documentation": {
                "identifier": "S3Config",
                "newPage": false,
                "searchKey": "uploadstore.S3Config",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3Config struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3Config struct {\n\tRegion          string\n\tEndpoint        string\n\tAccessKeyID     string\n\tSecretAccessKey string\n\tSessionToken    string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3Config.load",
                    "documentation": {
                      "identifier": "S3Config.load",
                      "newPage": false,
                      "searchKey": "uploadstore.S3Config.load",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *S3Config) load(parent *env.BaseConfig)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *S3Config) load(parent *env.BaseConfig)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#countingReader",
              "documentation": {
                "identifier": "countingReader",
                "newPage": false,
                "searchKey": "uploadstore.countingReader",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type countingReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype countingReader struct {\n\tr io.Reader\n\tn int\n}\n```\n\ncountingReader is an io.Reader that counts the number of bytes sent back to the caller. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#countingReader.Read",
                    "documentation": {
                      "identifier": "countingReader.Read",
                      "newPage": false,
                      "searchKey": "uploadstore.countingReader.Read",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *countingReader) Read(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *countingReader) Read(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#Store",
              "documentation": {
                "identifier": "Store",
                "newPage": false,
                "searchKey": "uploadstore.Store",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Store interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Store interface {\n\t// Init ensures that the underlying target bucket exists and has the expected ACL\n\t// and lifecycle configuration.\n\tInit(ctx context.Context) error\n\n\t// Get returns a reader that streams the content of the object at the given key.\n\tGet(ctx context.Context, key string) (io.ReadCloser, error)\n\n\t// Upload writes the content in the given reader to the object at the given key.\n\tUpload(ctx context.Context, key string, r io.Reader) (int64, error)\n\n\t// Compose will concatenate the given source objects together and write to the given\n\t// destination object. The source objects will be removed if the composed write is\n\t// successful.\n\tCompose(ctx context.Context, destination string, sources ...string) (int64, error)\n\n\t// Delete removes the content at the given key.\n\tDelete(ctx context.Context, key string) error\n}\n```\n\nStore is an expiring key/value store backed by a managed blob store. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#newGCSFromConfig",
                    "documentation": {
                      "identifier": "newGCSFromConfig",
                      "newPage": false,
                      "searchKey": "uploadstore.newGCSFromConfig",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newGCSFromConfig(ctx context.Context, config *Config, operations *operations) (Store, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newGCSFromConfig(ctx context.Context, config *Config, operations *operations) (Store, error)\n```\n\nnewGCSFromConfig creates a new store backed by GCP storage. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#newLazyStore",
                    "documentation": {
                      "identifier": "newLazyStore",
                      "newPage": false,
                      "searchKey": "uploadstore.newLazyStore",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newLazyStore(store Store) Store"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newLazyStore(store Store) Store\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#newS3FromConfig",
                    "documentation": {
                      "identifier": "newS3FromConfig",
                      "newPage": false,
                      "searchKey": "uploadstore.newS3FromConfig",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newS3FromConfig(ctx context.Context, config *Config, operations *operations) (Store, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newS3FromConfig(ctx context.Context, config *Config, operations *operations) (Store, error)\n```\n\nnewS3FromConfig creates a new store backed by AWS Simple Storage Service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#CreateLazy",
                    "documentation": {
                      "identifier": "CreateLazy",
                      "newPage": false,
                      "searchKey": "uploadstore.CreateLazy",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func CreateLazy(ctx context.Context, config *Config, observationContext *observation.Context) (Store, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc CreateLazy(ctx context.Context, config *Config, observationContext *observation.Context) (Store, error)\n```\n\nCreateLazy initialize a new store from the given configuration that is initialized on it first method call. If initialization fails, all methods calls will return a the initialization error. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#create",
                    "documentation": {
                      "identifier": "create",
                      "newPage": false,
                      "searchKey": "uploadstore.create",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func create(ctx context.Context, config *Config, observationContext *observation.Context) (Store, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc create(ctx context.Context, config *Config, observationContext *observation.Context) (Store, error)\n```\n\ncreate creates but does not initialize a new store from the given configuration. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#testGCSClient",
                    "documentation": {
                      "identifier": "testGCSClient",
                      "newPage": false,
                      "searchKey": "uploadstore.testGCSClient",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func testGCSClient(client gcsAPI, manageBucket bool) Store"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc testGCSClient(client gcsAPI, manageBucket bool) Store\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#testS3Client",
                    "documentation": {
                      "identifier": "testS3Client",
                      "newPage": false,
                      "searchKey": "uploadstore.testS3Client",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func testS3Client(client s3API, uploader s3Uploader) Store"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc testS3Client(client s3API, uploader s3Uploader) Store\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#nopCloser",
              "documentation": {
                "identifier": "nopCloser",
                "newPage": false,
                "searchKey": "uploadstore.nopCloser",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type nopCloser struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype nopCloser struct {\n\tio.Writer\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#nopCloser.Close",
                    "documentation": {
                      "identifier": "nopCloser.Close",
                      "newPage": false,
                      "searchKey": "uploadstore.nopCloser.Close",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (nopCloser) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (nopCloser) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockGcsAPI",
              "documentation": {
                "identifier": "MockGcsAPI",
                "newPage": false,
                "searchKey": "uploadstore.MockGcsAPI",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockGcsAPI struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockGcsAPI struct {\n\t// BucketFunc is an instance of a mock function object controlling the\n\t// behavior of the method Bucket.\n\tBucketFunc *GcsAPIBucketFunc\n}\n```\n\nMockGcsAPI is a mock implementation of the gcsAPI interface (from the package github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/stores/uploadstore) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#NewMockGcsAPI",
                    "documentation": {
                      "identifier": "NewMockGcsAPI",
                      "newPage": false,
                      "searchKey": "uploadstore.NewMockGcsAPI",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockGcsAPI() *MockGcsAPI"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockGcsAPI() *MockGcsAPI\n```\n\nNewMockGcsAPI creates a new mock of the gcsAPI interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#NewMockGcsAPIFrom",
                    "documentation": {
                      "identifier": "NewMockGcsAPIFrom",
                      "newPage": false,
                      "searchKey": "uploadstore.NewMockGcsAPIFrom",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockGcsAPIFrom(i surrogateMockGcsAPI) *MockGcsAPI"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockGcsAPIFrom(i surrogateMockGcsAPI) *MockGcsAPI\n```\n\nNewMockGcsAPIFrom creates a new mock of the MockGcsAPI interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockGcsAPI.Bucket",
                    "documentation": {
                      "identifier": "MockGcsAPI.Bucket",
                      "newPage": false,
                      "searchKey": "uploadstore.MockGcsAPI.Bucket",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGcsAPI) Bucket(v0 string) gcsBucketHandle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGcsAPI) Bucket(v0 string) gcsBucketHandle\n```\n\nBucket delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#surrogateMockGcsAPI",
              "documentation": {
                "identifier": "surrogateMockGcsAPI",
                "newPage": false,
                "searchKey": "uploadstore.surrogateMockGcsAPI",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type surrogateMockGcsAPI interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype surrogateMockGcsAPI interface {\n\tBucket(string) gcsBucketHandle\n}\n```\n\nsurrogateMockGcsAPI is a copy of the gcsAPI interface (from the package github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/stores/uploadstore). It is redefined here as it is unexported in the source package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsAPIBucketFunc",
              "documentation": {
                "identifier": "GcsAPIBucketFunc",
                "newPage": false,
                "searchKey": "uploadstore.GcsAPIBucketFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsAPIBucketFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsAPIBucketFunc struct {\n\tdefaultHook func(string) gcsBucketHandle\n\thooks       []func(string) gcsBucketHandle\n\thistory     []GcsAPIBucketFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGcsAPIBucketFunc describes the behavior when the Bucket method of the parent MockGcsAPI instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsAPIBucketFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GcsAPIBucketFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsAPIBucketFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsAPIBucketFunc) SetDefaultHook(hook func(string) gcsBucketHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsAPIBucketFunc) SetDefaultHook(hook func(string) gcsBucketHandle)\n```\n\nSetDefaultHook sets function that is called when the Bucket method of the parent MockGcsAPI instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsAPIBucketFunc.PushHook",
                    "documentation": {
                      "identifier": "GcsAPIBucketFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsAPIBucketFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsAPIBucketFunc) PushHook(hook func(string) gcsBucketHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsAPIBucketFunc) PushHook(hook func(string) gcsBucketHandle)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Bucket method of the parent MockGcsAPI instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsAPIBucketFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GcsAPIBucketFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsAPIBucketFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsAPIBucketFunc) SetDefaultReturn(r0 gcsBucketHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsAPIBucketFunc) SetDefaultReturn(r0 gcsBucketHandle)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsAPIBucketFunc.PushReturn",
                    "documentation": {
                      "identifier": "GcsAPIBucketFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsAPIBucketFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsAPIBucketFunc) PushReturn(r0 gcsBucketHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsAPIBucketFunc) PushReturn(r0 gcsBucketHandle)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsAPIBucketFunc.nextHook",
                    "documentation": {
                      "identifier": "GcsAPIBucketFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsAPIBucketFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsAPIBucketFunc) nextHook() func(string) gcsBucketHandle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsAPIBucketFunc) nextHook() func(string) gcsBucketHandle\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsAPIBucketFunc.appendCall",
                    "documentation": {
                      "identifier": "GcsAPIBucketFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsAPIBucketFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsAPIBucketFunc) appendCall(r0 GcsAPIBucketFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsAPIBucketFunc) appendCall(r0 GcsAPIBucketFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsAPIBucketFunc.History",
                    "documentation": {
                      "identifier": "GcsAPIBucketFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsAPIBucketFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsAPIBucketFunc) History() []GcsAPIBucketFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsAPIBucketFunc) History() []GcsAPIBucketFuncCall\n```\n\nHistory returns a sequence of GcsAPIBucketFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsAPIBucketFuncCall",
              "documentation": {
                "identifier": "GcsAPIBucketFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.GcsAPIBucketFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsAPIBucketFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsAPIBucketFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 gcsBucketHandle\n}\n```\n\nGcsAPIBucketFuncCall is an object that describes an invocation of method Bucket on an instance of MockGcsAPI. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsAPIBucketFuncCall.Args",
                    "documentation": {
                      "identifier": "GcsAPIBucketFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsAPIBucketFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsAPIBucketFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsAPIBucketFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsAPIBucketFuncCall.Results",
                    "documentation": {
                      "identifier": "GcsAPIBucketFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsAPIBucketFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsAPIBucketFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsAPIBucketFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockGcsBucketHandle",
              "documentation": {
                "identifier": "MockGcsBucketHandle",
                "newPage": false,
                "searchKey": "uploadstore.MockGcsBucketHandle",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockGcsBucketHandle struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockGcsBucketHandle struct {\n\t// AttrsFunc is an instance of a mock function object controlling the\n\t// behavior of the method Attrs.\n\tAttrsFunc *GcsBucketHandleAttrsFunc\n\t// CreateFunc is an instance of a mock function object controlling the\n\t// behavior of the method Create.\n\tCreateFunc *GcsBucketHandleCreateFunc\n\t// ObjectFunc is an instance of a mock function object controlling the\n\t// behavior of the method Object.\n\tObjectFunc *GcsBucketHandleObjectFunc\n\t// UpdateFunc is an instance of a mock function object controlling the\n\t// behavior of the method Update.\n\tUpdateFunc *GcsBucketHandleUpdateFunc\n}\n```\n\nMockGcsBucketHandle is a mock implementation of the gcsBucketHandle interface (from the package github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/stores/uploadstore) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#NewMockGcsBucketHandle",
                    "documentation": {
                      "identifier": "NewMockGcsBucketHandle",
                      "newPage": false,
                      "searchKey": "uploadstore.NewMockGcsBucketHandle",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockGcsBucketHandle() *MockGcsBucketHandle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockGcsBucketHandle() *MockGcsBucketHandle\n```\n\nNewMockGcsBucketHandle creates a new mock of the gcsBucketHandle interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#NewMockGcsBucketHandleFrom",
                    "documentation": {
                      "identifier": "NewMockGcsBucketHandleFrom",
                      "newPage": false,
                      "searchKey": "uploadstore.NewMockGcsBucketHandleFrom",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockGcsBucketHandleFrom(i surrogateMockGcsBucketHandle) *MockGcsBucketHandle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockGcsBucketHandleFrom(i surrogateMockGcsBucketHandle) *MockGcsBucketHandle\n```\n\nNewMockGcsBucketHandleFrom creates a new mock of the MockGcsBucketHandle interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockGcsBucketHandle.Attrs",
                    "documentation": {
                      "identifier": "MockGcsBucketHandle.Attrs",
                      "newPage": false,
                      "searchKey": "uploadstore.MockGcsBucketHandle.Attrs",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGcsBucketHandle) Attrs(v0 context.Context) (*storage.BucketAttrs, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGcsBucketHandle) Attrs(v0 context.Context) (*storage.BucketAttrs, error)\n```\n\nAttrs delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockGcsBucketHandle.Create",
                    "documentation": {
                      "identifier": "MockGcsBucketHandle.Create",
                      "newPage": false,
                      "searchKey": "uploadstore.MockGcsBucketHandle.Create",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGcsBucketHandle) Create(v0 context.Context, v1 string, v2 *storage.BucketAttrs) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGcsBucketHandle) Create(v0 context.Context, v1 string, v2 *storage.BucketAttrs) error\n```\n\nCreate delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockGcsBucketHandle.Object",
                    "documentation": {
                      "identifier": "MockGcsBucketHandle.Object",
                      "newPage": false,
                      "searchKey": "uploadstore.MockGcsBucketHandle.Object",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGcsBucketHandle) Object(v0 string) gcsObjectHandle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGcsBucketHandle) Object(v0 string) gcsObjectHandle\n```\n\nObject delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockGcsBucketHandle.Update",
                    "documentation": {
                      "identifier": "MockGcsBucketHandle.Update",
                      "newPage": false,
                      "searchKey": "uploadstore.MockGcsBucketHandle.Update",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGcsBucketHandle) Update(v0 context.Context, v1 storage.BucketAttrsToUpdate) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGcsBucketHandle) Update(v0 context.Context, v1 storage.BucketAttrsToUpdate) error\n```\n\nUpdate delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#surrogateMockGcsBucketHandle",
              "documentation": {
                "identifier": "surrogateMockGcsBucketHandle",
                "newPage": false,
                "searchKey": "uploadstore.surrogateMockGcsBucketHandle",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type surrogateMockGcsBucketHandle interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype surrogateMockGcsBucketHandle interface {\n\tAttrs(context.Context) (*storage.BucketAttrs, error)\n\tCreate(context.Context, string, *storage.BucketAttrs) error\n\tObject(string) gcsObjectHandle\n\tUpdate(context.Context, storage.BucketAttrsToUpdate) error\n}\n```\n\nsurrogateMockGcsBucketHandle is a copy of the gcsBucketHandle interface (from the package github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/stores/uploadstore). It is redefined here as it is unexported in the source package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleAttrsFunc",
              "documentation": {
                "identifier": "GcsBucketHandleAttrsFunc",
                "newPage": false,
                "searchKey": "uploadstore.GcsBucketHandleAttrsFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsBucketHandleAttrsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsBucketHandleAttrsFunc struct {\n\tdefaultHook func(context.Context) (*storage.BucketAttrs, error)\n\thooks       []func(context.Context) (*storage.BucketAttrs, error)\n\thistory     []GcsBucketHandleAttrsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGcsBucketHandleAttrsFunc describes the behavior when the Attrs method of the parent MockGcsBucketHandle instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleAttrsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GcsBucketHandleAttrsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleAttrsFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleAttrsFunc) SetDefaultHook(hook func(context.Context) (*storage.BucketAttrs, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleAttrsFunc) SetDefaultHook(hook func(context.Context) (*storage.BucketAttrs, error))\n```\n\nSetDefaultHook sets function that is called when the Attrs method of the parent MockGcsBucketHandle instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleAttrsFunc.PushHook",
                    "documentation": {
                      "identifier": "GcsBucketHandleAttrsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleAttrsFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleAttrsFunc) PushHook(hook func(context.Context) (*storage.BucketAttrs, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleAttrsFunc) PushHook(hook func(context.Context) (*storage.BucketAttrs, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Attrs method of the parent MockGcsBucketHandle instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleAttrsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GcsBucketHandleAttrsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleAttrsFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleAttrsFunc) SetDefaultReturn(r0 *storage.BucketAttrs, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleAttrsFunc) SetDefaultReturn(r0 *storage.BucketAttrs, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleAttrsFunc.PushReturn",
                    "documentation": {
                      "identifier": "GcsBucketHandleAttrsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleAttrsFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleAttrsFunc) PushReturn(r0 *storage.BucketAttrs, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleAttrsFunc) PushReturn(r0 *storage.BucketAttrs, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleAttrsFunc.nextHook",
                    "documentation": {
                      "identifier": "GcsBucketHandleAttrsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleAttrsFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleAttrsFunc) nextHook() func(context.Context) (*storage.BucketAttrs, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleAttrsFunc) nextHook() func(context.Context) (*storage.BucketAttrs, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleAttrsFunc.appendCall",
                    "documentation": {
                      "identifier": "GcsBucketHandleAttrsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleAttrsFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleAttrsFunc) appendCall(r0 GcsBucketHandleAttrsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleAttrsFunc) appendCall(r0 GcsBucketHandleAttrsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleAttrsFunc.History",
                    "documentation": {
                      "identifier": "GcsBucketHandleAttrsFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleAttrsFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleAttrsFunc) History() []GcsBucketHandleAttrsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleAttrsFunc) History() []GcsBucketHandleAttrsFuncCall\n```\n\nHistory returns a sequence of GcsBucketHandleAttrsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleAttrsFuncCall",
              "documentation": {
                "identifier": "GcsBucketHandleAttrsFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.GcsBucketHandleAttrsFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsBucketHandleAttrsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsBucketHandleAttrsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *storage.BucketAttrs\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nGcsBucketHandleAttrsFuncCall is an object that describes an invocation of method Attrs on an instance of MockGcsBucketHandle. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleAttrsFuncCall.Args",
                    "documentation": {
                      "identifier": "GcsBucketHandleAttrsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleAttrsFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsBucketHandleAttrsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsBucketHandleAttrsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleAttrsFuncCall.Results",
                    "documentation": {
                      "identifier": "GcsBucketHandleAttrsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleAttrsFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsBucketHandleAttrsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsBucketHandleAttrsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleCreateFunc",
              "documentation": {
                "identifier": "GcsBucketHandleCreateFunc",
                "newPage": false,
                "searchKey": "uploadstore.GcsBucketHandleCreateFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsBucketHandleCreateFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsBucketHandleCreateFunc struct {\n\tdefaultHook func(context.Context, string, *storage.BucketAttrs) error\n\thooks       []func(context.Context, string, *storage.BucketAttrs) error\n\thistory     []GcsBucketHandleCreateFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGcsBucketHandleCreateFunc describes the behavior when the Create method of the parent MockGcsBucketHandle instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleCreateFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GcsBucketHandleCreateFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleCreateFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleCreateFunc) SetDefaultHook(hook func(context.Context, string, *storage.BucketAttrs) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleCreateFunc) SetDefaultHook(hook func(context.Context, string, *storage.BucketAttrs) error)\n```\n\nSetDefaultHook sets function that is called when the Create method of the parent MockGcsBucketHandle instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleCreateFunc.PushHook",
                    "documentation": {
                      "identifier": "GcsBucketHandleCreateFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleCreateFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleCreateFunc) PushHook(hook func(context.Context, string, *storage.BucketAttrs) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleCreateFunc) PushHook(hook func(context.Context, string, *storage.BucketAttrs) error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Create method of the parent MockGcsBucketHandle instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleCreateFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GcsBucketHandleCreateFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleCreateFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleCreateFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleCreateFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleCreateFunc.PushReturn",
                    "documentation": {
                      "identifier": "GcsBucketHandleCreateFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleCreateFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleCreateFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleCreateFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleCreateFunc.nextHook",
                    "documentation": {
                      "identifier": "GcsBucketHandleCreateFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleCreateFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleCreateFunc) nextHook() func(context.Context, string, *storage.BucketAttrs) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleCreateFunc) nextHook() func(context.Context, string, *storage.BucketAttrs) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleCreateFunc.appendCall",
                    "documentation": {
                      "identifier": "GcsBucketHandleCreateFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleCreateFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleCreateFunc) appendCall(r0 GcsBucketHandleCreateFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleCreateFunc) appendCall(r0 GcsBucketHandleCreateFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleCreateFunc.History",
                    "documentation": {
                      "identifier": "GcsBucketHandleCreateFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleCreateFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleCreateFunc) History() []GcsBucketHandleCreateFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleCreateFunc) History() []GcsBucketHandleCreateFuncCall\n```\n\nHistory returns a sequence of GcsBucketHandleCreateFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleCreateFuncCall",
              "documentation": {
                "identifier": "GcsBucketHandleCreateFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.GcsBucketHandleCreateFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsBucketHandleCreateFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsBucketHandleCreateFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 string\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 *storage.BucketAttrs\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nGcsBucketHandleCreateFuncCall is an object that describes an invocation of method Create on an instance of MockGcsBucketHandle. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleCreateFuncCall.Args",
                    "documentation": {
                      "identifier": "GcsBucketHandleCreateFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleCreateFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsBucketHandleCreateFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsBucketHandleCreateFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleCreateFuncCall.Results",
                    "documentation": {
                      "identifier": "GcsBucketHandleCreateFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleCreateFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsBucketHandleCreateFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsBucketHandleCreateFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleObjectFunc",
              "documentation": {
                "identifier": "GcsBucketHandleObjectFunc",
                "newPage": false,
                "searchKey": "uploadstore.GcsBucketHandleObjectFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsBucketHandleObjectFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsBucketHandleObjectFunc struct {\n\tdefaultHook func(string) gcsObjectHandle\n\thooks       []func(string) gcsObjectHandle\n\thistory     []GcsBucketHandleObjectFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGcsBucketHandleObjectFunc describes the behavior when the Object method of the parent MockGcsBucketHandle instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleObjectFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GcsBucketHandleObjectFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleObjectFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleObjectFunc) SetDefaultHook(hook func(string) gcsObjectHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleObjectFunc) SetDefaultHook(hook func(string) gcsObjectHandle)\n```\n\nSetDefaultHook sets function that is called when the Object method of the parent MockGcsBucketHandle instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleObjectFunc.PushHook",
                    "documentation": {
                      "identifier": "GcsBucketHandleObjectFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleObjectFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleObjectFunc) PushHook(hook func(string) gcsObjectHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleObjectFunc) PushHook(hook func(string) gcsObjectHandle)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Object method of the parent MockGcsBucketHandle instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleObjectFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GcsBucketHandleObjectFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleObjectFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleObjectFunc) SetDefaultReturn(r0 gcsObjectHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleObjectFunc) SetDefaultReturn(r0 gcsObjectHandle)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleObjectFunc.PushReturn",
                    "documentation": {
                      "identifier": "GcsBucketHandleObjectFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleObjectFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleObjectFunc) PushReturn(r0 gcsObjectHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleObjectFunc) PushReturn(r0 gcsObjectHandle)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleObjectFunc.nextHook",
                    "documentation": {
                      "identifier": "GcsBucketHandleObjectFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleObjectFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleObjectFunc) nextHook() func(string) gcsObjectHandle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleObjectFunc) nextHook() func(string) gcsObjectHandle\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleObjectFunc.appendCall",
                    "documentation": {
                      "identifier": "GcsBucketHandleObjectFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleObjectFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleObjectFunc) appendCall(r0 GcsBucketHandleObjectFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleObjectFunc) appendCall(r0 GcsBucketHandleObjectFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleObjectFunc.History",
                    "documentation": {
                      "identifier": "GcsBucketHandleObjectFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleObjectFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleObjectFunc) History() []GcsBucketHandleObjectFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleObjectFunc) History() []GcsBucketHandleObjectFuncCall\n```\n\nHistory returns a sequence of GcsBucketHandleObjectFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleObjectFuncCall",
              "documentation": {
                "identifier": "GcsBucketHandleObjectFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.GcsBucketHandleObjectFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsBucketHandleObjectFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsBucketHandleObjectFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 gcsObjectHandle\n}\n```\n\nGcsBucketHandleObjectFuncCall is an object that describes an invocation of method Object on an instance of MockGcsBucketHandle. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleObjectFuncCall.Args",
                    "documentation": {
                      "identifier": "GcsBucketHandleObjectFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleObjectFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsBucketHandleObjectFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsBucketHandleObjectFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleObjectFuncCall.Results",
                    "documentation": {
                      "identifier": "GcsBucketHandleObjectFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleObjectFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsBucketHandleObjectFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsBucketHandleObjectFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleUpdateFunc",
              "documentation": {
                "identifier": "GcsBucketHandleUpdateFunc",
                "newPage": false,
                "searchKey": "uploadstore.GcsBucketHandleUpdateFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsBucketHandleUpdateFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsBucketHandleUpdateFunc struct {\n\tdefaultHook func(context.Context, storage.BucketAttrsToUpdate) error\n\thooks       []func(context.Context, storage.BucketAttrsToUpdate) error\n\thistory     []GcsBucketHandleUpdateFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGcsBucketHandleUpdateFunc describes the behavior when the Update method of the parent MockGcsBucketHandle instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleUpdateFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GcsBucketHandleUpdateFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleUpdateFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleUpdateFunc) SetDefaultHook(hook func(context.Context, storage.BucketAttrsToUpdate) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleUpdateFunc) SetDefaultHook(hook func(context.Context, storage.BucketAttrsToUpdate) error)\n```\n\nSetDefaultHook sets function that is called when the Update method of the parent MockGcsBucketHandle instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleUpdateFunc.PushHook",
                    "documentation": {
                      "identifier": "GcsBucketHandleUpdateFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleUpdateFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleUpdateFunc) PushHook(hook func(context.Context, storage.BucketAttrsToUpdate) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleUpdateFunc) PushHook(hook func(context.Context, storage.BucketAttrsToUpdate) error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Update method of the parent MockGcsBucketHandle instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleUpdateFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GcsBucketHandleUpdateFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleUpdateFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleUpdateFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleUpdateFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleUpdateFunc.PushReturn",
                    "documentation": {
                      "identifier": "GcsBucketHandleUpdateFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleUpdateFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleUpdateFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleUpdateFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleUpdateFunc.nextHook",
                    "documentation": {
                      "identifier": "GcsBucketHandleUpdateFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleUpdateFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleUpdateFunc) nextHook() func(context.Context, storage.BucketAttrsToUpdate) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleUpdateFunc) nextHook() func(context.Context, storage.BucketAttrsToUpdate) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleUpdateFunc.appendCall",
                    "documentation": {
                      "identifier": "GcsBucketHandleUpdateFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleUpdateFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleUpdateFunc) appendCall(r0 GcsBucketHandleUpdateFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleUpdateFunc) appendCall(r0 GcsBucketHandleUpdateFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleUpdateFunc.History",
                    "documentation": {
                      "identifier": "GcsBucketHandleUpdateFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleUpdateFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsBucketHandleUpdateFunc) History() []GcsBucketHandleUpdateFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsBucketHandleUpdateFunc) History() []GcsBucketHandleUpdateFuncCall\n```\n\nHistory returns a sequence of GcsBucketHandleUpdateFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleUpdateFuncCall",
              "documentation": {
                "identifier": "GcsBucketHandleUpdateFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.GcsBucketHandleUpdateFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsBucketHandleUpdateFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsBucketHandleUpdateFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 storage.BucketAttrsToUpdate\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nGcsBucketHandleUpdateFuncCall is an object that describes an invocation of method Update on an instance of MockGcsBucketHandle. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleUpdateFuncCall.Args",
                    "documentation": {
                      "identifier": "GcsBucketHandleUpdateFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleUpdateFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsBucketHandleUpdateFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsBucketHandleUpdateFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsBucketHandleUpdateFuncCall.Results",
                    "documentation": {
                      "identifier": "GcsBucketHandleUpdateFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsBucketHandleUpdateFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsBucketHandleUpdateFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsBucketHandleUpdateFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockGcsComposer",
              "documentation": {
                "identifier": "MockGcsComposer",
                "newPage": false,
                "searchKey": "uploadstore.MockGcsComposer",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockGcsComposer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockGcsComposer struct {\n\t// RunFunc is an instance of a mock function object controlling the\n\t// behavior of the method Run.\n\tRunFunc *GcsComposerRunFunc\n}\n```\n\nMockGcsComposer is a mock implementation of the gcsComposer interface (from the package github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/stores/uploadstore) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#NewMockGcsComposer",
                    "documentation": {
                      "identifier": "NewMockGcsComposer",
                      "newPage": false,
                      "searchKey": "uploadstore.NewMockGcsComposer",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockGcsComposer() *MockGcsComposer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockGcsComposer() *MockGcsComposer\n```\n\nNewMockGcsComposer creates a new mock of the gcsComposer interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#NewMockGcsComposerFrom",
                    "documentation": {
                      "identifier": "NewMockGcsComposerFrom",
                      "newPage": false,
                      "searchKey": "uploadstore.NewMockGcsComposerFrom",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockGcsComposerFrom(i surrogateMockGcsComposer) *MockGcsComposer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockGcsComposerFrom(i surrogateMockGcsComposer) *MockGcsComposer\n```\n\nNewMockGcsComposerFrom creates a new mock of the MockGcsComposer interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockGcsComposer.Run",
                    "documentation": {
                      "identifier": "MockGcsComposer.Run",
                      "newPage": false,
                      "searchKey": "uploadstore.MockGcsComposer.Run",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGcsComposer) Run(v0 context.Context) (*storage.ObjectAttrs, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGcsComposer) Run(v0 context.Context) (*storage.ObjectAttrs, error)\n```\n\nRun delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#surrogateMockGcsComposer",
              "documentation": {
                "identifier": "surrogateMockGcsComposer",
                "newPage": false,
                "searchKey": "uploadstore.surrogateMockGcsComposer",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type surrogateMockGcsComposer interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype surrogateMockGcsComposer interface {\n\tRun(context.Context) (*storage.ObjectAttrs, error)\n}\n```\n\nsurrogateMockGcsComposer is a copy of the gcsComposer interface (from the package github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/stores/uploadstore). It is redefined here as it is unexported in the source package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsComposerRunFunc",
              "documentation": {
                "identifier": "GcsComposerRunFunc",
                "newPage": false,
                "searchKey": "uploadstore.GcsComposerRunFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsComposerRunFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsComposerRunFunc struct {\n\tdefaultHook func(context.Context) (*storage.ObjectAttrs, error)\n\thooks       []func(context.Context) (*storage.ObjectAttrs, error)\n\thistory     []GcsComposerRunFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGcsComposerRunFunc describes the behavior when the Run method of the parent MockGcsComposer instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsComposerRunFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GcsComposerRunFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsComposerRunFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsComposerRunFunc) SetDefaultHook(hook func(context.Context) (*storage.ObjectAttrs, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsComposerRunFunc) SetDefaultHook(hook func(context.Context) (*storage.ObjectAttrs, error))\n```\n\nSetDefaultHook sets function that is called when the Run method of the parent MockGcsComposer instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsComposerRunFunc.PushHook",
                    "documentation": {
                      "identifier": "GcsComposerRunFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsComposerRunFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsComposerRunFunc) PushHook(hook func(context.Context) (*storage.ObjectAttrs, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsComposerRunFunc) PushHook(hook func(context.Context) (*storage.ObjectAttrs, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Run method of the parent MockGcsComposer instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsComposerRunFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GcsComposerRunFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsComposerRunFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsComposerRunFunc) SetDefaultReturn(r0 *storage.ObjectAttrs, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsComposerRunFunc) SetDefaultReturn(r0 *storage.ObjectAttrs, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsComposerRunFunc.PushReturn",
                    "documentation": {
                      "identifier": "GcsComposerRunFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsComposerRunFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsComposerRunFunc) PushReturn(r0 *storage.ObjectAttrs, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsComposerRunFunc) PushReturn(r0 *storage.ObjectAttrs, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsComposerRunFunc.nextHook",
                    "documentation": {
                      "identifier": "GcsComposerRunFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsComposerRunFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsComposerRunFunc) nextHook() func(context.Context) (*storage.ObjectAttrs, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsComposerRunFunc) nextHook() func(context.Context) (*storage.ObjectAttrs, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsComposerRunFunc.appendCall",
                    "documentation": {
                      "identifier": "GcsComposerRunFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsComposerRunFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsComposerRunFunc) appendCall(r0 GcsComposerRunFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsComposerRunFunc) appendCall(r0 GcsComposerRunFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsComposerRunFunc.History",
                    "documentation": {
                      "identifier": "GcsComposerRunFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsComposerRunFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsComposerRunFunc) History() []GcsComposerRunFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsComposerRunFunc) History() []GcsComposerRunFuncCall\n```\n\nHistory returns a sequence of GcsComposerRunFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsComposerRunFuncCall",
              "documentation": {
                "identifier": "GcsComposerRunFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.GcsComposerRunFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsComposerRunFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsComposerRunFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *storage.ObjectAttrs\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nGcsComposerRunFuncCall is an object that describes an invocation of method Run on an instance of MockGcsComposer. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsComposerRunFuncCall.Args",
                    "documentation": {
                      "identifier": "GcsComposerRunFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsComposerRunFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsComposerRunFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsComposerRunFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsComposerRunFuncCall.Results",
                    "documentation": {
                      "identifier": "GcsComposerRunFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsComposerRunFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsComposerRunFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsComposerRunFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockGcsObjectHandle",
              "documentation": {
                "identifier": "MockGcsObjectHandle",
                "newPage": false,
                "searchKey": "uploadstore.MockGcsObjectHandle",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockGcsObjectHandle struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockGcsObjectHandle struct {\n\t// ComposerFromFunc is an instance of a mock function object controlling\n\t// the behavior of the method ComposerFrom.\n\tComposerFromFunc *GcsObjectHandleComposerFromFunc\n\t// DeleteFunc is an instance of a mock function object controlling the\n\t// behavior of the method Delete.\n\tDeleteFunc *GcsObjectHandleDeleteFunc\n\t// NewRangeReaderFunc is an instance of a mock function object\n\t// controlling the behavior of the method NewRangeReader.\n\tNewRangeReaderFunc *GcsObjectHandleNewRangeReaderFunc\n\t// NewWriterFunc is an instance of a mock function object controlling\n\t// the behavior of the method NewWriter.\n\tNewWriterFunc *GcsObjectHandleNewWriterFunc\n}\n```\n\nMockGcsObjectHandle is a mock implementation of the gcsObjectHandle interface (from the package github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/stores/uploadstore) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#NewMockGcsObjectHandle",
                    "documentation": {
                      "identifier": "NewMockGcsObjectHandle",
                      "newPage": false,
                      "searchKey": "uploadstore.NewMockGcsObjectHandle",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockGcsObjectHandle() *MockGcsObjectHandle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockGcsObjectHandle() *MockGcsObjectHandle\n```\n\nNewMockGcsObjectHandle creates a new mock of the gcsObjectHandle interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#NewMockGcsObjectHandleFrom",
                    "documentation": {
                      "identifier": "NewMockGcsObjectHandleFrom",
                      "newPage": false,
                      "searchKey": "uploadstore.NewMockGcsObjectHandleFrom",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockGcsObjectHandleFrom(i surrogateMockGcsObjectHandle) *MockGcsObjectHandle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockGcsObjectHandleFrom(i surrogateMockGcsObjectHandle) *MockGcsObjectHandle\n```\n\nNewMockGcsObjectHandleFrom creates a new mock of the MockGcsObjectHandle interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockGcsObjectHandle.ComposerFrom",
                    "documentation": {
                      "identifier": "MockGcsObjectHandle.ComposerFrom",
                      "newPage": false,
                      "searchKey": "uploadstore.MockGcsObjectHandle.ComposerFrom",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGcsObjectHandle) ComposerFrom(v0 ...gcsObjectHandle) gcsComposer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGcsObjectHandle) ComposerFrom(v0 ...gcsObjectHandle) gcsComposer\n```\n\nComposerFrom delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockGcsObjectHandle.Delete",
                    "documentation": {
                      "identifier": "MockGcsObjectHandle.Delete",
                      "newPage": false,
                      "searchKey": "uploadstore.MockGcsObjectHandle.Delete",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGcsObjectHandle) Delete(v0 context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGcsObjectHandle) Delete(v0 context.Context) error\n```\n\nDelete delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockGcsObjectHandle.NewRangeReader",
                    "documentation": {
                      "identifier": "MockGcsObjectHandle.NewRangeReader",
                      "newPage": false,
                      "searchKey": "uploadstore.MockGcsObjectHandle.NewRangeReader",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGcsObjectHandle) NewRangeReader(v0 context.Context, v1 int64, v2 int64) (io.ReadCloser, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGcsObjectHandle) NewRangeReader(v0 context.Context, v1 int64, v2 int64) (io.ReadCloser, error)\n```\n\nNewRangeReader delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockGcsObjectHandle.NewWriter",
                    "documentation": {
                      "identifier": "MockGcsObjectHandle.NewWriter",
                      "newPage": false,
                      "searchKey": "uploadstore.MockGcsObjectHandle.NewWriter",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGcsObjectHandle) NewWriter(v0 context.Context) io.WriteCloser"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGcsObjectHandle) NewWriter(v0 context.Context) io.WriteCloser\n```\n\nNewWriter delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#surrogateMockGcsObjectHandle",
              "documentation": {
                "identifier": "surrogateMockGcsObjectHandle",
                "newPage": false,
                "searchKey": "uploadstore.surrogateMockGcsObjectHandle",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type surrogateMockGcsObjectHandle interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype surrogateMockGcsObjectHandle interface {\n\tComposerFrom(...gcsObjectHandle) gcsComposer\n\tDelete(context.Context) error\n\tNewRangeReader(context.Context, int64, int64) (io.ReadCloser, error)\n\tNewWriter(context.Context) io.WriteCloser\n}\n```\n\nsurrogateMockGcsObjectHandle is a copy of the gcsObjectHandle interface (from the package github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/stores/uploadstore). It is redefined here as it is unexported in the source package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleComposerFromFunc",
              "documentation": {
                "identifier": "GcsObjectHandleComposerFromFunc",
                "newPage": false,
                "searchKey": "uploadstore.GcsObjectHandleComposerFromFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsObjectHandleComposerFromFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsObjectHandleComposerFromFunc struct {\n\tdefaultHook func(...gcsObjectHandle) gcsComposer\n\thooks       []func(...gcsObjectHandle) gcsComposer\n\thistory     []GcsObjectHandleComposerFromFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGcsObjectHandleComposerFromFunc describes the behavior when the ComposerFrom method of the parent MockGcsObjectHandle instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleComposerFromFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GcsObjectHandleComposerFromFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleComposerFromFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleComposerFromFunc) SetDefaultHook(hook func(...gcsObjectHandle) gcsComposer)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleComposerFromFunc) SetDefaultHook(hook func(...gcsObjectHandle) gcsComposer)\n```\n\nSetDefaultHook sets function that is called when the ComposerFrom method of the parent MockGcsObjectHandle instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleComposerFromFunc.PushHook",
                    "documentation": {
                      "identifier": "GcsObjectHandleComposerFromFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleComposerFromFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleComposerFromFunc) PushHook(hook func(...gcsObjectHandle) gcsComposer)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleComposerFromFunc) PushHook(hook func(...gcsObjectHandle) gcsComposer)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the ComposerFrom method of the parent MockGcsObjectHandle instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleComposerFromFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GcsObjectHandleComposerFromFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleComposerFromFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleComposerFromFunc) SetDefaultReturn(r0 gcsComposer)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleComposerFromFunc) SetDefaultReturn(r0 gcsComposer)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleComposerFromFunc.PushReturn",
                    "documentation": {
                      "identifier": "GcsObjectHandleComposerFromFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleComposerFromFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleComposerFromFunc) PushReturn(r0 gcsComposer)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleComposerFromFunc) PushReturn(r0 gcsComposer)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleComposerFromFunc.nextHook",
                    "documentation": {
                      "identifier": "GcsObjectHandleComposerFromFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleComposerFromFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleComposerFromFunc) nextHook() func(...gcsObjectHandle) gcsComposer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleComposerFromFunc) nextHook() func(...gcsObjectHandle) gcsComposer\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleComposerFromFunc.appendCall",
                    "documentation": {
                      "identifier": "GcsObjectHandleComposerFromFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleComposerFromFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleComposerFromFunc) appendCall(r0 GcsObjectHandleComposerFromFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleComposerFromFunc) appendCall(r0 GcsObjectHandleComposerFromFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleComposerFromFunc.History",
                    "documentation": {
                      "identifier": "GcsObjectHandleComposerFromFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleComposerFromFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleComposerFromFunc) History() []GcsObjectHandleComposerFromFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleComposerFromFunc) History() []GcsObjectHandleComposerFromFuncCall\n```\n\nHistory returns a sequence of GcsObjectHandleComposerFromFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleComposerFromFuncCall",
              "documentation": {
                "identifier": "GcsObjectHandleComposerFromFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.GcsObjectHandleComposerFromFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsObjectHandleComposerFromFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsObjectHandleComposerFromFuncCall struct {\n\t// Arg0 is a slice containing the values of the variadic arguments\n\t// passed to this method invocation.\n\tArg0 []gcsObjectHandle\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 gcsComposer\n}\n```\n\nGcsObjectHandleComposerFromFuncCall is an object that describes an invocation of method ComposerFrom on an instance of MockGcsObjectHandle. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleComposerFromFuncCall.Args",
                    "documentation": {
                      "identifier": "GcsObjectHandleComposerFromFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleComposerFromFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsObjectHandleComposerFromFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsObjectHandleComposerFromFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. The variadic slice argument is flattened in this array such that one positional argument and three variadic arguments would result in a slice of four, not two. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleComposerFromFuncCall.Results",
                    "documentation": {
                      "identifier": "GcsObjectHandleComposerFromFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleComposerFromFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsObjectHandleComposerFromFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsObjectHandleComposerFromFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleDeleteFunc",
              "documentation": {
                "identifier": "GcsObjectHandleDeleteFunc",
                "newPage": false,
                "searchKey": "uploadstore.GcsObjectHandleDeleteFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsObjectHandleDeleteFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsObjectHandleDeleteFunc struct {\n\tdefaultHook func(context.Context) error\n\thooks       []func(context.Context) error\n\thistory     []GcsObjectHandleDeleteFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGcsObjectHandleDeleteFunc describes the behavior when the Delete method of the parent MockGcsObjectHandle instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleDeleteFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GcsObjectHandleDeleteFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleDeleteFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleDeleteFunc) SetDefaultHook(hook func(context.Context) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleDeleteFunc) SetDefaultHook(hook func(context.Context) error)\n```\n\nSetDefaultHook sets function that is called when the Delete method of the parent MockGcsObjectHandle instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleDeleteFunc.PushHook",
                    "documentation": {
                      "identifier": "GcsObjectHandleDeleteFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleDeleteFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleDeleteFunc) PushHook(hook func(context.Context) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleDeleteFunc) PushHook(hook func(context.Context) error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Delete method of the parent MockGcsObjectHandle instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleDeleteFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GcsObjectHandleDeleteFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleDeleteFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleDeleteFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleDeleteFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleDeleteFunc.PushReturn",
                    "documentation": {
                      "identifier": "GcsObjectHandleDeleteFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleDeleteFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleDeleteFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleDeleteFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleDeleteFunc.nextHook",
                    "documentation": {
                      "identifier": "GcsObjectHandleDeleteFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleDeleteFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleDeleteFunc) nextHook() func(context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleDeleteFunc) nextHook() func(context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleDeleteFunc.appendCall",
                    "documentation": {
                      "identifier": "GcsObjectHandleDeleteFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleDeleteFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleDeleteFunc) appendCall(r0 GcsObjectHandleDeleteFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleDeleteFunc) appendCall(r0 GcsObjectHandleDeleteFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleDeleteFunc.History",
                    "documentation": {
                      "identifier": "GcsObjectHandleDeleteFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleDeleteFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleDeleteFunc) History() []GcsObjectHandleDeleteFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleDeleteFunc) History() []GcsObjectHandleDeleteFuncCall\n```\n\nHistory returns a sequence of GcsObjectHandleDeleteFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleDeleteFuncCall",
              "documentation": {
                "identifier": "GcsObjectHandleDeleteFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.GcsObjectHandleDeleteFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsObjectHandleDeleteFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsObjectHandleDeleteFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nGcsObjectHandleDeleteFuncCall is an object that describes an invocation of method Delete on an instance of MockGcsObjectHandle. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleDeleteFuncCall.Args",
                    "documentation": {
                      "identifier": "GcsObjectHandleDeleteFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleDeleteFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsObjectHandleDeleteFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsObjectHandleDeleteFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleDeleteFuncCall.Results",
                    "documentation": {
                      "identifier": "GcsObjectHandleDeleteFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleDeleteFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsObjectHandleDeleteFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsObjectHandleDeleteFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewRangeReaderFunc",
              "documentation": {
                "identifier": "GcsObjectHandleNewRangeReaderFunc",
                "newPage": false,
                "searchKey": "uploadstore.GcsObjectHandleNewRangeReaderFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsObjectHandleNewRangeReaderFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsObjectHandleNewRangeReaderFunc struct {\n\tdefaultHook func(context.Context, int64, int64) (io.ReadCloser, error)\n\thooks       []func(context.Context, int64, int64) (io.ReadCloser, error)\n\thistory     []GcsObjectHandleNewRangeReaderFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGcsObjectHandleNewRangeReaderFunc describes the behavior when the NewRangeReader method of the parent MockGcsObjectHandle instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewRangeReaderFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GcsObjectHandleNewRangeReaderFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleNewRangeReaderFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleNewRangeReaderFunc) SetDefaultHook(hook func(context.Context, int64, int64) (io.ReadCloser, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleNewRangeReaderFunc) SetDefaultHook(hook func(context.Context, int64, int64) (io.ReadCloser, error))\n```\n\nSetDefaultHook sets function that is called when the NewRangeReader method of the parent MockGcsObjectHandle instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewRangeReaderFunc.PushHook",
                    "documentation": {
                      "identifier": "GcsObjectHandleNewRangeReaderFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleNewRangeReaderFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleNewRangeReaderFunc) PushHook(hook func(context.Context, int64, int64) (io.ReadCloser, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleNewRangeReaderFunc) PushHook(hook func(context.Context, int64, int64) (io.ReadCloser, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the NewRangeReader method of the parent MockGcsObjectHandle instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewRangeReaderFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GcsObjectHandleNewRangeReaderFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleNewRangeReaderFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleNewRangeReaderFunc) SetDefaultReturn(r0 io.ReadCloser, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleNewRangeReaderFunc) SetDefaultReturn(r0 io.ReadCloser, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewRangeReaderFunc.PushReturn",
                    "documentation": {
                      "identifier": "GcsObjectHandleNewRangeReaderFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleNewRangeReaderFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleNewRangeReaderFunc) PushReturn(r0 io.ReadCloser, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleNewRangeReaderFunc) PushReturn(r0 io.ReadCloser, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewRangeReaderFunc.nextHook",
                    "documentation": {
                      "identifier": "GcsObjectHandleNewRangeReaderFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleNewRangeReaderFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleNewRangeReaderFunc) nextHook() func(context.Context, int64, int64) (io.ReadCloser, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleNewRangeReaderFunc) nextHook() func(context.Context, int64, int64) (io.ReadCloser, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewRangeReaderFunc.appendCall",
                    "documentation": {
                      "identifier": "GcsObjectHandleNewRangeReaderFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleNewRangeReaderFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleNewRangeReaderFunc) appendCall(r0 GcsObjectHandleNewRangeReaderFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleNewRangeReaderFunc) appendCall(r0 GcsObjectHandleNewRangeReaderFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewRangeReaderFunc.History",
                    "documentation": {
                      "identifier": "GcsObjectHandleNewRangeReaderFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleNewRangeReaderFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleNewRangeReaderFunc) History() []GcsObjectHandleNewRangeReaderFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleNewRangeReaderFunc) History() []GcsObjectHandleNewRangeReaderFuncCall\n```\n\nHistory returns a sequence of GcsObjectHandleNewRangeReaderFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewRangeReaderFuncCall",
              "documentation": {
                "identifier": "GcsObjectHandleNewRangeReaderFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.GcsObjectHandleNewRangeReaderFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsObjectHandleNewRangeReaderFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsObjectHandleNewRangeReaderFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int64\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 int64\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 io.ReadCloser\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nGcsObjectHandleNewRangeReaderFuncCall is an object that describes an invocation of method NewRangeReader on an instance of MockGcsObjectHandle. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewRangeReaderFuncCall.Args",
                    "documentation": {
                      "identifier": "GcsObjectHandleNewRangeReaderFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleNewRangeReaderFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsObjectHandleNewRangeReaderFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsObjectHandleNewRangeReaderFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewRangeReaderFuncCall.Results",
                    "documentation": {
                      "identifier": "GcsObjectHandleNewRangeReaderFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleNewRangeReaderFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsObjectHandleNewRangeReaderFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsObjectHandleNewRangeReaderFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewWriterFunc",
              "documentation": {
                "identifier": "GcsObjectHandleNewWriterFunc",
                "newPage": false,
                "searchKey": "uploadstore.GcsObjectHandleNewWriterFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsObjectHandleNewWriterFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsObjectHandleNewWriterFunc struct {\n\tdefaultHook func(context.Context) io.WriteCloser\n\thooks       []func(context.Context) io.WriteCloser\n\thistory     []GcsObjectHandleNewWriterFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGcsObjectHandleNewWriterFunc describes the behavior when the NewWriter method of the parent MockGcsObjectHandle instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewWriterFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GcsObjectHandleNewWriterFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleNewWriterFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleNewWriterFunc) SetDefaultHook(hook func(context.Context) io.WriteCloser)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleNewWriterFunc) SetDefaultHook(hook func(context.Context) io.WriteCloser)\n```\n\nSetDefaultHook sets function that is called when the NewWriter method of the parent MockGcsObjectHandle instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewWriterFunc.PushHook",
                    "documentation": {
                      "identifier": "GcsObjectHandleNewWriterFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleNewWriterFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleNewWriterFunc) PushHook(hook func(context.Context) io.WriteCloser)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleNewWriterFunc) PushHook(hook func(context.Context) io.WriteCloser)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the NewWriter method of the parent MockGcsObjectHandle instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewWriterFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GcsObjectHandleNewWriterFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleNewWriterFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleNewWriterFunc) SetDefaultReturn(r0 io.WriteCloser)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleNewWriterFunc) SetDefaultReturn(r0 io.WriteCloser)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewWriterFunc.PushReturn",
                    "documentation": {
                      "identifier": "GcsObjectHandleNewWriterFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleNewWriterFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleNewWriterFunc) PushReturn(r0 io.WriteCloser)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleNewWriterFunc) PushReturn(r0 io.WriteCloser)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewWriterFunc.nextHook",
                    "documentation": {
                      "identifier": "GcsObjectHandleNewWriterFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleNewWriterFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleNewWriterFunc) nextHook() func(context.Context) io.WriteCloser"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleNewWriterFunc) nextHook() func(context.Context) io.WriteCloser\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewWriterFunc.appendCall",
                    "documentation": {
                      "identifier": "GcsObjectHandleNewWriterFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleNewWriterFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleNewWriterFunc) appendCall(r0 GcsObjectHandleNewWriterFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleNewWriterFunc) appendCall(r0 GcsObjectHandleNewWriterFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewWriterFunc.History",
                    "documentation": {
                      "identifier": "GcsObjectHandleNewWriterFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleNewWriterFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GcsObjectHandleNewWriterFunc) History() []GcsObjectHandleNewWriterFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GcsObjectHandleNewWriterFunc) History() []GcsObjectHandleNewWriterFuncCall\n```\n\nHistory returns a sequence of GcsObjectHandleNewWriterFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewWriterFuncCall",
              "documentation": {
                "identifier": "GcsObjectHandleNewWriterFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.GcsObjectHandleNewWriterFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GcsObjectHandleNewWriterFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GcsObjectHandleNewWriterFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 io.WriteCloser\n}\n```\n\nGcsObjectHandleNewWriterFuncCall is an object that describes an invocation of method NewWriter on an instance of MockGcsObjectHandle. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewWriterFuncCall.Args",
                    "documentation": {
                      "identifier": "GcsObjectHandleNewWriterFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleNewWriterFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsObjectHandleNewWriterFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsObjectHandleNewWriterFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#GcsObjectHandleNewWriterFuncCall.Results",
                    "documentation": {
                      "identifier": "GcsObjectHandleNewWriterFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.GcsObjectHandleNewWriterFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GcsObjectHandleNewWriterFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GcsObjectHandleNewWriterFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockS3API",
              "documentation": {
                "identifier": "MockS3API",
                "newPage": false,
                "searchKey": "uploadstore.MockS3API",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockS3API struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockS3API struct {\n\t// AbortMultipartUploadFunc is an instance of a mock function object\n\t// controlling the behavior of the method AbortMultipartUpload.\n\tAbortMultipartUploadFunc *S3APIAbortMultipartUploadFunc\n\t// CompleteMultipartUploadFunc is an instance of a mock function object\n\t// controlling the behavior of the method CompleteMultipartUpload.\n\tCompleteMultipartUploadFunc *S3APICompleteMultipartUploadFunc\n\t// CreateBucketFunc is an instance of a mock function object controlling\n\t// the behavior of the method CreateBucket.\n\tCreateBucketFunc *S3APICreateBucketFunc\n\t// CreateMultipartUploadFunc is an instance of a mock function object\n\t// controlling the behavior of the method CreateMultipartUpload.\n\tCreateMultipartUploadFunc *S3APICreateMultipartUploadFunc\n\t// DeleteObjectFunc is an instance of a mock function object controlling\n\t// the behavior of the method DeleteObject.\n\tDeleteObjectFunc *S3APIDeleteObjectFunc\n\t// GetObjectFunc is an instance of a mock function object controlling\n\t// the behavior of the method GetObject.\n\tGetObjectFunc *S3APIGetObjectFunc\n\t// HeadObjectFunc is an instance of a mock function object controlling\n\t// the behavior of the method HeadObject.\n\tHeadObjectFunc *S3APIHeadObjectFunc\n\t// PutBucketLifecycleConfigurationFunc is an instance of a mock function\n\t// object controlling the behavior of the method\n\t// PutBucketLifecycleConfiguration.\n\tPutBucketLifecycleConfigurationFunc *S3APIPutBucketLifecycleConfigurationFunc\n\t// UploadPartCopyFunc is an instance of a mock function object\n\t// controlling the behavior of the method UploadPartCopy.\n\tUploadPartCopyFunc *S3APIUploadPartCopyFunc\n}\n```\n\nMockS3API is a mock implementation of the s3API interface (from the package github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/stores/uploadstore) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#NewMockS3API",
                    "documentation": {
                      "identifier": "NewMockS3API",
                      "newPage": false,
                      "searchKey": "uploadstore.NewMockS3API",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockS3API() *MockS3API"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockS3API() *MockS3API\n```\n\nNewMockS3API creates a new mock of the s3API interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#NewMockS3APIFrom",
                    "documentation": {
                      "identifier": "NewMockS3APIFrom",
                      "newPage": false,
                      "searchKey": "uploadstore.NewMockS3APIFrom",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockS3APIFrom(i surrogateMockS3API) *MockS3API"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockS3APIFrom(i surrogateMockS3API) *MockS3API\n```\n\nNewMockS3APIFrom creates a new mock of the MockS3API interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#fullContentsS3API",
                    "documentation": {
                      "identifier": "fullContentsS3API",
                      "newPage": false,
                      "searchKey": "uploadstore.fullContentsS3API",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fullContentsS3API() *MockS3API"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fullContentsS3API() *MockS3API\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockS3API.AbortMultipartUpload",
                    "documentation": {
                      "identifier": "MockS3API.AbortMultipartUpload",
                      "newPage": false,
                      "searchKey": "uploadstore.MockS3API.AbortMultipartUpload",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockS3API) AbortMultipartUpload(v0 context.Context, v1 *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockS3API) AbortMultipartUpload(v0 context.Context, v1 *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)\n```\n\nAbortMultipartUpload delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockS3API.CompleteMultipartUpload",
                    "documentation": {
                      "identifier": "MockS3API.CompleteMultipartUpload",
                      "newPage": false,
                      "searchKey": "uploadstore.MockS3API.CompleteMultipartUpload",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockS3API) CompleteMultipartUpload(v0 context.Context, v1 *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockS3API) CompleteMultipartUpload(v0 context.Context, v1 *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)\n```\n\nCompleteMultipartUpload delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockS3API.CreateBucket",
                    "documentation": {
                      "identifier": "MockS3API.CreateBucket",
                      "newPage": false,
                      "searchKey": "uploadstore.MockS3API.CreateBucket",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockS3API) CreateBucket(v0 context.Context, v1 *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockS3API) CreateBucket(v0 context.Context, v1 *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)\n```\n\nCreateBucket delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockS3API.CreateMultipartUpload",
                    "documentation": {
                      "identifier": "MockS3API.CreateMultipartUpload",
                      "newPage": false,
                      "searchKey": "uploadstore.MockS3API.CreateMultipartUpload",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockS3API) CreateMultipartUpload(v0 context.Context, v1 *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockS3API) CreateMultipartUpload(v0 context.Context, v1 *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)\n```\n\nCreateMultipartUpload delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockS3API.DeleteObject",
                    "documentation": {
                      "identifier": "MockS3API.DeleteObject",
                      "newPage": false,
                      "searchKey": "uploadstore.MockS3API.DeleteObject",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockS3API) DeleteObject(v0 context.Context, v1 *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockS3API) DeleteObject(v0 context.Context, v1 *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)\n```\n\nDeleteObject delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockS3API.GetObject",
                    "documentation": {
                      "identifier": "MockS3API.GetObject",
                      "newPage": false,
                      "searchKey": "uploadstore.MockS3API.GetObject",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockS3API) GetObject(v0 context.Context, v1 *s3.GetObjectInput) (*s3.GetObjectOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockS3API) GetObject(v0 context.Context, v1 *s3.GetObjectInput) (*s3.GetObjectOutput, error)\n```\n\nGetObject delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockS3API.HeadObject",
                    "documentation": {
                      "identifier": "MockS3API.HeadObject",
                      "newPage": false,
                      "searchKey": "uploadstore.MockS3API.HeadObject",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockS3API) HeadObject(v0 context.Context, v1 *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockS3API) HeadObject(v0 context.Context, v1 *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)\n```\n\nHeadObject delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockS3API.PutBucketLifecycleConfiguration",
                    "documentation": {
                      "identifier": "MockS3API.PutBucketLifecycleConfiguration",
                      "newPage": false,
                      "searchKey": "uploadstore.MockS3API.PutBucketLifecycleConfiguration",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockS3API) PutBucketLifecycleConfiguration(v0 context.Context, v1 *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockS3API) PutBucketLifecycleConfiguration(v0 context.Context, v1 *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)\n```\n\nPutBucketLifecycleConfiguration delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockS3API.UploadPartCopy",
                    "documentation": {
                      "identifier": "MockS3API.UploadPartCopy",
                      "newPage": false,
                      "searchKey": "uploadstore.MockS3API.UploadPartCopy",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockS3API) UploadPartCopy(v0 context.Context, v1 *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockS3API) UploadPartCopy(v0 context.Context, v1 *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)\n```\n\nUploadPartCopy delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#surrogateMockS3API",
              "documentation": {
                "identifier": "surrogateMockS3API",
                "newPage": false,
                "searchKey": "uploadstore.surrogateMockS3API",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type surrogateMockS3API interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype surrogateMockS3API interface {\n\tAbortMultipartUpload(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)\n\tCompleteMultipartUpload(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)\n\tCreateBucket(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)\n\tCreateMultipartUpload(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)\n\tDeleteObject(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)\n\tGetObject(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error)\n\tHeadObject(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)\n\tPutBucketLifecycleConfiguration(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)\n\tUploadPartCopy(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)\n}\n```\n\nsurrogateMockS3API is a copy of the s3API interface (from the package github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/stores/uploadstore). It is redefined here as it is unexported in the source package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIAbortMultipartUploadFunc",
              "documentation": {
                "identifier": "S3APIAbortMultipartUploadFunc",
                "newPage": false,
                "searchKey": "uploadstore.S3APIAbortMultipartUploadFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3APIAbortMultipartUploadFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3APIAbortMultipartUploadFunc struct {\n\tdefaultHook func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)\n\thooks       []func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)\n\thistory     []S3APIAbortMultipartUploadFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nS3APIAbortMultipartUploadFunc describes the behavior when the AbortMultipartUpload method of the parent MockS3API instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIAbortMultipartUploadFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "S3APIAbortMultipartUploadFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIAbortMultipartUploadFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIAbortMultipartUploadFunc) SetDefaultHook(hook func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIAbortMultipartUploadFunc) SetDefaultHook(hook func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error))\n```\n\nSetDefaultHook sets function that is called when the AbortMultipartUpload method of the parent MockS3API instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIAbortMultipartUploadFunc.PushHook",
                    "documentation": {
                      "identifier": "S3APIAbortMultipartUploadFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIAbortMultipartUploadFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIAbortMultipartUploadFunc) PushHook(hook func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIAbortMultipartUploadFunc) PushHook(hook func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the AbortMultipartUpload method of the parent MockS3API instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIAbortMultipartUploadFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "S3APIAbortMultipartUploadFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIAbortMultipartUploadFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIAbortMultipartUploadFunc) SetDefaultReturn(r0 *s3.AbortMultipartUploadOutput, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIAbortMultipartUploadFunc) SetDefaultReturn(r0 *s3.AbortMultipartUploadOutput, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIAbortMultipartUploadFunc.PushReturn",
                    "documentation": {
                      "identifier": "S3APIAbortMultipartUploadFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIAbortMultipartUploadFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIAbortMultipartUploadFunc) PushReturn(r0 *s3.AbortMultipartUploadOutput, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIAbortMultipartUploadFunc) PushReturn(r0 *s3.AbortMultipartUploadOutput, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIAbortMultipartUploadFunc.nextHook",
                    "documentation": {
                      "identifier": "S3APIAbortMultipartUploadFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIAbortMultipartUploadFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIAbortMultipartUploadFunc) nextHook() func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIAbortMultipartUploadFunc) nextHook() func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIAbortMultipartUploadFunc.appendCall",
                    "documentation": {
                      "identifier": "S3APIAbortMultipartUploadFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIAbortMultipartUploadFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIAbortMultipartUploadFunc) appendCall(r0 S3APIAbortMultipartUploadFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIAbortMultipartUploadFunc) appendCall(r0 S3APIAbortMultipartUploadFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIAbortMultipartUploadFunc.History",
                    "documentation": {
                      "identifier": "S3APIAbortMultipartUploadFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIAbortMultipartUploadFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIAbortMultipartUploadFunc) History() []S3APIAbortMultipartUploadFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIAbortMultipartUploadFunc) History() []S3APIAbortMultipartUploadFuncCall\n```\n\nHistory returns a sequence of S3APIAbortMultipartUploadFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIAbortMultipartUploadFuncCall",
              "documentation": {
                "identifier": "S3APIAbortMultipartUploadFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.S3APIAbortMultipartUploadFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3APIAbortMultipartUploadFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3APIAbortMultipartUploadFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 *s3.AbortMultipartUploadInput\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *s3.AbortMultipartUploadOutput\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nS3APIAbortMultipartUploadFuncCall is an object that describes an invocation of method AbortMultipartUpload on an instance of MockS3API. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIAbortMultipartUploadFuncCall.Args",
                    "documentation": {
                      "identifier": "S3APIAbortMultipartUploadFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIAbortMultipartUploadFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3APIAbortMultipartUploadFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3APIAbortMultipartUploadFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIAbortMultipartUploadFuncCall.Results",
                    "documentation": {
                      "identifier": "S3APIAbortMultipartUploadFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIAbortMultipartUploadFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3APIAbortMultipartUploadFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3APIAbortMultipartUploadFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICompleteMultipartUploadFunc",
              "documentation": {
                "identifier": "S3APICompleteMultipartUploadFunc",
                "newPage": false,
                "searchKey": "uploadstore.S3APICompleteMultipartUploadFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3APICompleteMultipartUploadFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3APICompleteMultipartUploadFunc struct {\n\tdefaultHook func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)\n\thooks       []func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)\n\thistory     []S3APICompleteMultipartUploadFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nS3APICompleteMultipartUploadFunc describes the behavior when the CompleteMultipartUpload method of the parent MockS3API instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICompleteMultipartUploadFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "S3APICompleteMultipartUploadFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICompleteMultipartUploadFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICompleteMultipartUploadFunc) SetDefaultHook(hook func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICompleteMultipartUploadFunc) SetDefaultHook(hook func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error))\n```\n\nSetDefaultHook sets function that is called when the CompleteMultipartUpload method of the parent MockS3API instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICompleteMultipartUploadFunc.PushHook",
                    "documentation": {
                      "identifier": "S3APICompleteMultipartUploadFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICompleteMultipartUploadFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICompleteMultipartUploadFunc) PushHook(hook func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICompleteMultipartUploadFunc) PushHook(hook func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the CompleteMultipartUpload method of the parent MockS3API instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICompleteMultipartUploadFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "S3APICompleteMultipartUploadFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICompleteMultipartUploadFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICompleteMultipartUploadFunc) SetDefaultReturn(r0 *s3.CompleteMultipartUploadOutput, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICompleteMultipartUploadFunc) SetDefaultReturn(r0 *s3.CompleteMultipartUploadOutput, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICompleteMultipartUploadFunc.PushReturn",
                    "documentation": {
                      "identifier": "S3APICompleteMultipartUploadFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICompleteMultipartUploadFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICompleteMultipartUploadFunc) PushReturn(r0 *s3.CompleteMultipartUploadOutput, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICompleteMultipartUploadFunc) PushReturn(r0 *s3.CompleteMultipartUploadOutput, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICompleteMultipartUploadFunc.nextHook",
                    "documentation": {
                      "identifier": "S3APICompleteMultipartUploadFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICompleteMultipartUploadFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICompleteMultipartUploadFunc) nextHook() func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICompleteMultipartUploadFunc) nextHook() func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICompleteMultipartUploadFunc.appendCall",
                    "documentation": {
                      "identifier": "S3APICompleteMultipartUploadFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICompleteMultipartUploadFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICompleteMultipartUploadFunc) appendCall(r0 S3APICompleteMultipartUploadFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICompleteMultipartUploadFunc) appendCall(r0 S3APICompleteMultipartUploadFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICompleteMultipartUploadFunc.History",
                    "documentation": {
                      "identifier": "S3APICompleteMultipartUploadFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICompleteMultipartUploadFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICompleteMultipartUploadFunc) History() []S3APICompleteMultipartUploadFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICompleteMultipartUploadFunc) History() []S3APICompleteMultipartUploadFuncCall\n```\n\nHistory returns a sequence of S3APICompleteMultipartUploadFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICompleteMultipartUploadFuncCall",
              "documentation": {
                "identifier": "S3APICompleteMultipartUploadFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.S3APICompleteMultipartUploadFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3APICompleteMultipartUploadFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3APICompleteMultipartUploadFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 *s3.CompleteMultipartUploadInput\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *s3.CompleteMultipartUploadOutput\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nS3APICompleteMultipartUploadFuncCall is an object that describes an invocation of method CompleteMultipartUpload on an instance of MockS3API. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICompleteMultipartUploadFuncCall.Args",
                    "documentation": {
                      "identifier": "S3APICompleteMultipartUploadFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICompleteMultipartUploadFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3APICompleteMultipartUploadFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3APICompleteMultipartUploadFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICompleteMultipartUploadFuncCall.Results",
                    "documentation": {
                      "identifier": "S3APICompleteMultipartUploadFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICompleteMultipartUploadFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3APICompleteMultipartUploadFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3APICompleteMultipartUploadFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateBucketFunc",
              "documentation": {
                "identifier": "S3APICreateBucketFunc",
                "newPage": false,
                "searchKey": "uploadstore.S3APICreateBucketFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3APICreateBucketFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3APICreateBucketFunc struct {\n\tdefaultHook func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)\n\thooks       []func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)\n\thistory     []S3APICreateBucketFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nS3APICreateBucketFunc describes the behavior when the CreateBucket method of the parent MockS3API instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateBucketFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "S3APICreateBucketFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICreateBucketFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICreateBucketFunc) SetDefaultHook(hook func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICreateBucketFunc) SetDefaultHook(hook func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error))\n```\n\nSetDefaultHook sets function that is called when the CreateBucket method of the parent MockS3API instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateBucketFunc.PushHook",
                    "documentation": {
                      "identifier": "S3APICreateBucketFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICreateBucketFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICreateBucketFunc) PushHook(hook func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICreateBucketFunc) PushHook(hook func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the CreateBucket method of the parent MockS3API instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateBucketFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "S3APICreateBucketFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICreateBucketFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICreateBucketFunc) SetDefaultReturn(r0 *s3.CreateBucketOutput, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICreateBucketFunc) SetDefaultReturn(r0 *s3.CreateBucketOutput, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateBucketFunc.PushReturn",
                    "documentation": {
                      "identifier": "S3APICreateBucketFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICreateBucketFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICreateBucketFunc) PushReturn(r0 *s3.CreateBucketOutput, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICreateBucketFunc) PushReturn(r0 *s3.CreateBucketOutput, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateBucketFunc.nextHook",
                    "documentation": {
                      "identifier": "S3APICreateBucketFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICreateBucketFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICreateBucketFunc) nextHook() func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICreateBucketFunc) nextHook() func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateBucketFunc.appendCall",
                    "documentation": {
                      "identifier": "S3APICreateBucketFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICreateBucketFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICreateBucketFunc) appendCall(r0 S3APICreateBucketFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICreateBucketFunc) appendCall(r0 S3APICreateBucketFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateBucketFunc.History",
                    "documentation": {
                      "identifier": "S3APICreateBucketFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICreateBucketFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICreateBucketFunc) History() []S3APICreateBucketFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICreateBucketFunc) History() []S3APICreateBucketFuncCall\n```\n\nHistory returns a sequence of S3APICreateBucketFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateBucketFuncCall",
              "documentation": {
                "identifier": "S3APICreateBucketFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.S3APICreateBucketFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3APICreateBucketFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3APICreateBucketFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 *s3.CreateBucketInput\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *s3.CreateBucketOutput\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nS3APICreateBucketFuncCall is an object that describes an invocation of method CreateBucket on an instance of MockS3API. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateBucketFuncCall.Args",
                    "documentation": {
                      "identifier": "S3APICreateBucketFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICreateBucketFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3APICreateBucketFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3APICreateBucketFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateBucketFuncCall.Results",
                    "documentation": {
                      "identifier": "S3APICreateBucketFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICreateBucketFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3APICreateBucketFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3APICreateBucketFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateMultipartUploadFunc",
              "documentation": {
                "identifier": "S3APICreateMultipartUploadFunc",
                "newPage": false,
                "searchKey": "uploadstore.S3APICreateMultipartUploadFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3APICreateMultipartUploadFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3APICreateMultipartUploadFunc struct {\n\tdefaultHook func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)\n\thooks       []func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)\n\thistory     []S3APICreateMultipartUploadFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nS3APICreateMultipartUploadFunc describes the behavior when the CreateMultipartUpload method of the parent MockS3API instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateMultipartUploadFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "S3APICreateMultipartUploadFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICreateMultipartUploadFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICreateMultipartUploadFunc) SetDefaultHook(hook func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICreateMultipartUploadFunc) SetDefaultHook(hook func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error))\n```\n\nSetDefaultHook sets function that is called when the CreateMultipartUpload method of the parent MockS3API instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateMultipartUploadFunc.PushHook",
                    "documentation": {
                      "identifier": "S3APICreateMultipartUploadFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICreateMultipartUploadFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICreateMultipartUploadFunc) PushHook(hook func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICreateMultipartUploadFunc) PushHook(hook func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the CreateMultipartUpload method of the parent MockS3API instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateMultipartUploadFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "S3APICreateMultipartUploadFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICreateMultipartUploadFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICreateMultipartUploadFunc) SetDefaultReturn(r0 *s3.CreateMultipartUploadOutput, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICreateMultipartUploadFunc) SetDefaultReturn(r0 *s3.CreateMultipartUploadOutput, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateMultipartUploadFunc.PushReturn",
                    "documentation": {
                      "identifier": "S3APICreateMultipartUploadFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICreateMultipartUploadFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICreateMultipartUploadFunc) PushReturn(r0 *s3.CreateMultipartUploadOutput, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICreateMultipartUploadFunc) PushReturn(r0 *s3.CreateMultipartUploadOutput, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateMultipartUploadFunc.nextHook",
                    "documentation": {
                      "identifier": "S3APICreateMultipartUploadFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICreateMultipartUploadFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICreateMultipartUploadFunc) nextHook() func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICreateMultipartUploadFunc) nextHook() func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateMultipartUploadFunc.appendCall",
                    "documentation": {
                      "identifier": "S3APICreateMultipartUploadFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICreateMultipartUploadFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICreateMultipartUploadFunc) appendCall(r0 S3APICreateMultipartUploadFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICreateMultipartUploadFunc) appendCall(r0 S3APICreateMultipartUploadFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateMultipartUploadFunc.History",
                    "documentation": {
                      "identifier": "S3APICreateMultipartUploadFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICreateMultipartUploadFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APICreateMultipartUploadFunc) History() []S3APICreateMultipartUploadFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APICreateMultipartUploadFunc) History() []S3APICreateMultipartUploadFuncCall\n```\n\nHistory returns a sequence of S3APICreateMultipartUploadFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateMultipartUploadFuncCall",
              "documentation": {
                "identifier": "S3APICreateMultipartUploadFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.S3APICreateMultipartUploadFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3APICreateMultipartUploadFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3APICreateMultipartUploadFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 *s3.CreateMultipartUploadInput\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *s3.CreateMultipartUploadOutput\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nS3APICreateMultipartUploadFuncCall is an object that describes an invocation of method CreateMultipartUpload on an instance of MockS3API. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateMultipartUploadFuncCall.Args",
                    "documentation": {
                      "identifier": "S3APICreateMultipartUploadFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICreateMultipartUploadFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3APICreateMultipartUploadFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3APICreateMultipartUploadFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APICreateMultipartUploadFuncCall.Results",
                    "documentation": {
                      "identifier": "S3APICreateMultipartUploadFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APICreateMultipartUploadFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3APICreateMultipartUploadFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3APICreateMultipartUploadFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIDeleteObjectFunc",
              "documentation": {
                "identifier": "S3APIDeleteObjectFunc",
                "newPage": false,
                "searchKey": "uploadstore.S3APIDeleteObjectFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3APIDeleteObjectFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3APIDeleteObjectFunc struct {\n\tdefaultHook func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)\n\thooks       []func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)\n\thistory     []S3APIDeleteObjectFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nS3APIDeleteObjectFunc describes the behavior when the DeleteObject method of the parent MockS3API instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIDeleteObjectFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "S3APIDeleteObjectFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIDeleteObjectFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIDeleteObjectFunc) SetDefaultHook(hook func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIDeleteObjectFunc) SetDefaultHook(hook func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error))\n```\n\nSetDefaultHook sets function that is called when the DeleteObject method of the parent MockS3API instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIDeleteObjectFunc.PushHook",
                    "documentation": {
                      "identifier": "S3APIDeleteObjectFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIDeleteObjectFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIDeleteObjectFunc) PushHook(hook func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIDeleteObjectFunc) PushHook(hook func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the DeleteObject method of the parent MockS3API instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIDeleteObjectFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "S3APIDeleteObjectFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIDeleteObjectFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIDeleteObjectFunc) SetDefaultReturn(r0 *s3.DeleteObjectOutput, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIDeleteObjectFunc) SetDefaultReturn(r0 *s3.DeleteObjectOutput, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIDeleteObjectFunc.PushReturn",
                    "documentation": {
                      "identifier": "S3APIDeleteObjectFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIDeleteObjectFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIDeleteObjectFunc) PushReturn(r0 *s3.DeleteObjectOutput, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIDeleteObjectFunc) PushReturn(r0 *s3.DeleteObjectOutput, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIDeleteObjectFunc.nextHook",
                    "documentation": {
                      "identifier": "S3APIDeleteObjectFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIDeleteObjectFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIDeleteObjectFunc) nextHook() func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIDeleteObjectFunc) nextHook() func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIDeleteObjectFunc.appendCall",
                    "documentation": {
                      "identifier": "S3APIDeleteObjectFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIDeleteObjectFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIDeleteObjectFunc) appendCall(r0 S3APIDeleteObjectFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIDeleteObjectFunc) appendCall(r0 S3APIDeleteObjectFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIDeleteObjectFunc.History",
                    "documentation": {
                      "identifier": "S3APIDeleteObjectFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIDeleteObjectFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIDeleteObjectFunc) History() []S3APIDeleteObjectFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIDeleteObjectFunc) History() []S3APIDeleteObjectFuncCall\n```\n\nHistory returns a sequence of S3APIDeleteObjectFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIDeleteObjectFuncCall",
              "documentation": {
                "identifier": "S3APIDeleteObjectFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.S3APIDeleteObjectFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3APIDeleteObjectFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3APIDeleteObjectFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 *s3.DeleteObjectInput\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *s3.DeleteObjectOutput\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nS3APIDeleteObjectFuncCall is an object that describes an invocation of method DeleteObject on an instance of MockS3API. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIDeleteObjectFuncCall.Args",
                    "documentation": {
                      "identifier": "S3APIDeleteObjectFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIDeleteObjectFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3APIDeleteObjectFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3APIDeleteObjectFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIDeleteObjectFuncCall.Results",
                    "documentation": {
                      "identifier": "S3APIDeleteObjectFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIDeleteObjectFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3APIDeleteObjectFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3APIDeleteObjectFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIGetObjectFunc",
              "documentation": {
                "identifier": "S3APIGetObjectFunc",
                "newPage": false,
                "searchKey": "uploadstore.S3APIGetObjectFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3APIGetObjectFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3APIGetObjectFunc struct {\n\tdefaultHook func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error)\n\thooks       []func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error)\n\thistory     []S3APIGetObjectFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nS3APIGetObjectFunc describes the behavior when the GetObject method of the parent MockS3API instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIGetObjectFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "S3APIGetObjectFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIGetObjectFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIGetObjectFunc) SetDefaultHook(hook func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIGetObjectFunc) SetDefaultHook(hook func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error))\n```\n\nSetDefaultHook sets function that is called when the GetObject method of the parent MockS3API instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIGetObjectFunc.PushHook",
                    "documentation": {
                      "identifier": "S3APIGetObjectFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIGetObjectFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIGetObjectFunc) PushHook(hook func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIGetObjectFunc) PushHook(hook func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetObject method of the parent MockS3API instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIGetObjectFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "S3APIGetObjectFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIGetObjectFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIGetObjectFunc) SetDefaultReturn(r0 *s3.GetObjectOutput, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIGetObjectFunc) SetDefaultReturn(r0 *s3.GetObjectOutput, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIGetObjectFunc.PushReturn",
                    "documentation": {
                      "identifier": "S3APIGetObjectFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIGetObjectFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIGetObjectFunc) PushReturn(r0 *s3.GetObjectOutput, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIGetObjectFunc) PushReturn(r0 *s3.GetObjectOutput, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIGetObjectFunc.nextHook",
                    "documentation": {
                      "identifier": "S3APIGetObjectFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIGetObjectFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIGetObjectFunc) nextHook() func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIGetObjectFunc) nextHook() func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIGetObjectFunc.appendCall",
                    "documentation": {
                      "identifier": "S3APIGetObjectFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIGetObjectFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIGetObjectFunc) appendCall(r0 S3APIGetObjectFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIGetObjectFunc) appendCall(r0 S3APIGetObjectFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIGetObjectFunc.History",
                    "documentation": {
                      "identifier": "S3APIGetObjectFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIGetObjectFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIGetObjectFunc) History() []S3APIGetObjectFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIGetObjectFunc) History() []S3APIGetObjectFuncCall\n```\n\nHistory returns a sequence of S3APIGetObjectFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIGetObjectFuncCall",
              "documentation": {
                "identifier": "S3APIGetObjectFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.S3APIGetObjectFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3APIGetObjectFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3APIGetObjectFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 *s3.GetObjectInput\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *s3.GetObjectOutput\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nS3APIGetObjectFuncCall is an object that describes an invocation of method GetObject on an instance of MockS3API. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIGetObjectFuncCall.Args",
                    "documentation": {
                      "identifier": "S3APIGetObjectFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIGetObjectFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3APIGetObjectFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3APIGetObjectFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIGetObjectFuncCall.Results",
                    "documentation": {
                      "identifier": "S3APIGetObjectFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIGetObjectFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3APIGetObjectFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3APIGetObjectFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIHeadObjectFunc",
              "documentation": {
                "identifier": "S3APIHeadObjectFunc",
                "newPage": false,
                "searchKey": "uploadstore.S3APIHeadObjectFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3APIHeadObjectFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3APIHeadObjectFunc struct {\n\tdefaultHook func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)\n\thooks       []func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)\n\thistory     []S3APIHeadObjectFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nS3APIHeadObjectFunc describes the behavior when the HeadObject method of the parent MockS3API instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIHeadObjectFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "S3APIHeadObjectFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIHeadObjectFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIHeadObjectFunc) SetDefaultHook(hook func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIHeadObjectFunc) SetDefaultHook(hook func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error))\n```\n\nSetDefaultHook sets function that is called when the HeadObject method of the parent MockS3API instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIHeadObjectFunc.PushHook",
                    "documentation": {
                      "identifier": "S3APIHeadObjectFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIHeadObjectFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIHeadObjectFunc) PushHook(hook func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIHeadObjectFunc) PushHook(hook func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the HeadObject method of the parent MockS3API instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIHeadObjectFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "S3APIHeadObjectFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIHeadObjectFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIHeadObjectFunc) SetDefaultReturn(r0 *s3.HeadObjectOutput, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIHeadObjectFunc) SetDefaultReturn(r0 *s3.HeadObjectOutput, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIHeadObjectFunc.PushReturn",
                    "documentation": {
                      "identifier": "S3APIHeadObjectFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIHeadObjectFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIHeadObjectFunc) PushReturn(r0 *s3.HeadObjectOutput, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIHeadObjectFunc) PushReturn(r0 *s3.HeadObjectOutput, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIHeadObjectFunc.nextHook",
                    "documentation": {
                      "identifier": "S3APIHeadObjectFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIHeadObjectFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIHeadObjectFunc) nextHook() func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIHeadObjectFunc) nextHook() func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIHeadObjectFunc.appendCall",
                    "documentation": {
                      "identifier": "S3APIHeadObjectFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIHeadObjectFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIHeadObjectFunc) appendCall(r0 S3APIHeadObjectFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIHeadObjectFunc) appendCall(r0 S3APIHeadObjectFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIHeadObjectFunc.History",
                    "documentation": {
                      "identifier": "S3APIHeadObjectFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIHeadObjectFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIHeadObjectFunc) History() []S3APIHeadObjectFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIHeadObjectFunc) History() []S3APIHeadObjectFuncCall\n```\n\nHistory returns a sequence of S3APIHeadObjectFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIHeadObjectFuncCall",
              "documentation": {
                "identifier": "S3APIHeadObjectFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.S3APIHeadObjectFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3APIHeadObjectFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3APIHeadObjectFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 *s3.HeadObjectInput\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *s3.HeadObjectOutput\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nS3APIHeadObjectFuncCall is an object that describes an invocation of method HeadObject on an instance of MockS3API. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIHeadObjectFuncCall.Args",
                    "documentation": {
                      "identifier": "S3APIHeadObjectFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIHeadObjectFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3APIHeadObjectFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3APIHeadObjectFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIHeadObjectFuncCall.Results",
                    "documentation": {
                      "identifier": "S3APIHeadObjectFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIHeadObjectFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3APIHeadObjectFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3APIHeadObjectFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIPutBucketLifecycleConfigurationFunc",
              "documentation": {
                "identifier": "S3APIPutBucketLifecycleConfigurationFunc",
                "newPage": false,
                "searchKey": "uploadstore.S3APIPutBucketLifecycleConfigurationFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3APIPutBucketLifecycleConfigurationFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3APIPutBucketLifecycleConfigurationFunc struct {\n\tdefaultHook func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)\n\thooks       []func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)\n\thistory     []S3APIPutBucketLifecycleConfigurationFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nS3APIPutBucketLifecycleConfigurationFunc describes the behavior when the PutBucketLifecycleConfiguration method of the parent MockS3API instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIPutBucketLifecycleConfigurationFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "S3APIPutBucketLifecycleConfigurationFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIPutBucketLifecycleConfigurationFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIPutBucketLifecycleConfigurationFunc) SetDefaultHook(hook func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIPutBucketLifecycleConfigurationFunc) SetDefaultHook(hook func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error))\n```\n\nSetDefaultHook sets function that is called when the PutBucketLifecycleConfiguration method of the parent MockS3API instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIPutBucketLifecycleConfigurationFunc.PushHook",
                    "documentation": {
                      "identifier": "S3APIPutBucketLifecycleConfigurationFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIPutBucketLifecycleConfigurationFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIPutBucketLifecycleConfigurationFunc) PushHook(hook func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIPutBucketLifecycleConfigurationFunc) PushHook(hook func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the PutBucketLifecycleConfiguration method of the parent MockS3API instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIPutBucketLifecycleConfigurationFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "S3APIPutBucketLifecycleConfigurationFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIPutBucketLifecycleConfigurationFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIPutBucketLifecycleConfigurationFunc) SetDefaultReturn(r0 *s3.PutBucketLifecycleConfigurationOutput, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIPutBucketLifecycleConfigurationFunc) SetDefaultReturn(r0 *s3.PutBucketLifecycleConfigurationOutput, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIPutBucketLifecycleConfigurationFunc.PushReturn",
                    "documentation": {
                      "identifier": "S3APIPutBucketLifecycleConfigurationFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIPutBucketLifecycleConfigurationFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIPutBucketLifecycleConfigurationFunc) PushReturn(r0 *s3.PutBucketLifecycleConfigurationOutput, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIPutBucketLifecycleConfigurationFunc) PushReturn(r0 *s3.PutBucketLifecycleConfigurationOutput, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIPutBucketLifecycleConfigurationFunc.nextHook",
                    "documentation": {
                      "identifier": "S3APIPutBucketLifecycleConfigurationFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIPutBucketLifecycleConfigurationFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIPutBucketLifecycleConfigurationFunc) nextHook() func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIPutBucketLifecycleConfigurationFunc) nextHook() func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIPutBucketLifecycleConfigurationFunc.appendCall",
                    "documentation": {
                      "identifier": "S3APIPutBucketLifecycleConfigurationFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIPutBucketLifecycleConfigurationFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIPutBucketLifecycleConfigurationFunc) appendCall(r0 S3APIPutBucketLifecycleConfigurationFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIPutBucketLifecycleConfigurationFunc) appendCall(r0 S3APIPutBucketLifecycleConfigurationFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIPutBucketLifecycleConfigurationFunc.History",
                    "documentation": {
                      "identifier": "S3APIPutBucketLifecycleConfigurationFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIPutBucketLifecycleConfigurationFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIPutBucketLifecycleConfigurationFunc) History() []S3APIPutBucketLifecycleConfigurationFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIPutBucketLifecycleConfigurationFunc) History() []S3APIPutBucketLifecycleConfigurationFuncCall\n```\n\nHistory returns a sequence of S3APIPutBucketLifecycleConfigurationFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIPutBucketLifecycleConfigurationFuncCall",
              "documentation": {
                "identifier": "S3APIPutBucketLifecycleConfigurationFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.S3APIPutBucketLifecycleConfigurationFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3APIPutBucketLifecycleConfigurationFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3APIPutBucketLifecycleConfigurationFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 *s3.PutBucketLifecycleConfigurationInput\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *s3.PutBucketLifecycleConfigurationOutput\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nS3APIPutBucketLifecycleConfigurationFuncCall is an object that describes an invocation of method PutBucketLifecycleConfiguration on an instance of MockS3API. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIPutBucketLifecycleConfigurationFuncCall.Args",
                    "documentation": {
                      "identifier": "S3APIPutBucketLifecycleConfigurationFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIPutBucketLifecycleConfigurationFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3APIPutBucketLifecycleConfigurationFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3APIPutBucketLifecycleConfigurationFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIPutBucketLifecycleConfigurationFuncCall.Results",
                    "documentation": {
                      "identifier": "S3APIPutBucketLifecycleConfigurationFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIPutBucketLifecycleConfigurationFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3APIPutBucketLifecycleConfigurationFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3APIPutBucketLifecycleConfigurationFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIUploadPartCopyFunc",
              "documentation": {
                "identifier": "S3APIUploadPartCopyFunc",
                "newPage": false,
                "searchKey": "uploadstore.S3APIUploadPartCopyFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3APIUploadPartCopyFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3APIUploadPartCopyFunc struct {\n\tdefaultHook func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)\n\thooks       []func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)\n\thistory     []S3APIUploadPartCopyFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nS3APIUploadPartCopyFunc describes the behavior when the UploadPartCopy method of the parent MockS3API instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIUploadPartCopyFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "S3APIUploadPartCopyFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIUploadPartCopyFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIUploadPartCopyFunc) SetDefaultHook(hook func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIUploadPartCopyFunc) SetDefaultHook(hook func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error))\n```\n\nSetDefaultHook sets function that is called when the UploadPartCopy method of the parent MockS3API instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIUploadPartCopyFunc.PushHook",
                    "documentation": {
                      "identifier": "S3APIUploadPartCopyFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIUploadPartCopyFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIUploadPartCopyFunc) PushHook(hook func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIUploadPartCopyFunc) PushHook(hook func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the UploadPartCopy method of the parent MockS3API instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIUploadPartCopyFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "S3APIUploadPartCopyFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIUploadPartCopyFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIUploadPartCopyFunc) SetDefaultReturn(r0 *s3.UploadPartCopyOutput, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIUploadPartCopyFunc) SetDefaultReturn(r0 *s3.UploadPartCopyOutput, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIUploadPartCopyFunc.PushReturn",
                    "documentation": {
                      "identifier": "S3APIUploadPartCopyFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIUploadPartCopyFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIUploadPartCopyFunc) PushReturn(r0 *s3.UploadPartCopyOutput, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIUploadPartCopyFunc) PushReturn(r0 *s3.UploadPartCopyOutput, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIUploadPartCopyFunc.nextHook",
                    "documentation": {
                      "identifier": "S3APIUploadPartCopyFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIUploadPartCopyFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIUploadPartCopyFunc) nextHook() func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIUploadPartCopyFunc) nextHook() func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIUploadPartCopyFunc.appendCall",
                    "documentation": {
                      "identifier": "S3APIUploadPartCopyFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIUploadPartCopyFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIUploadPartCopyFunc) appendCall(r0 S3APIUploadPartCopyFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIUploadPartCopyFunc) appendCall(r0 S3APIUploadPartCopyFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIUploadPartCopyFunc.History",
                    "documentation": {
                      "identifier": "S3APIUploadPartCopyFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIUploadPartCopyFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3APIUploadPartCopyFunc) History() []S3APIUploadPartCopyFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3APIUploadPartCopyFunc) History() []S3APIUploadPartCopyFuncCall\n```\n\nHistory returns a sequence of S3APIUploadPartCopyFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIUploadPartCopyFuncCall",
              "documentation": {
                "identifier": "S3APIUploadPartCopyFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.S3APIUploadPartCopyFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3APIUploadPartCopyFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3APIUploadPartCopyFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 *s3.UploadPartCopyInput\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *s3.UploadPartCopyOutput\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nS3APIUploadPartCopyFuncCall is an object that describes an invocation of method UploadPartCopy on an instance of MockS3API. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIUploadPartCopyFuncCall.Args",
                    "documentation": {
                      "identifier": "S3APIUploadPartCopyFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIUploadPartCopyFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3APIUploadPartCopyFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3APIUploadPartCopyFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3APIUploadPartCopyFuncCall.Results",
                    "documentation": {
                      "identifier": "S3APIUploadPartCopyFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.S3APIUploadPartCopyFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3APIUploadPartCopyFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3APIUploadPartCopyFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockS3Uploader",
              "documentation": {
                "identifier": "MockS3Uploader",
                "newPage": false,
                "searchKey": "uploadstore.MockS3Uploader",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockS3Uploader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockS3Uploader struct {\n\t// UploadFunc is an instance of a mock function object controlling the\n\t// behavior of the method Upload.\n\tUploadFunc *S3UploaderUploadFunc\n}\n```\n\nMockS3Uploader is a mock implementation of the s3Uploader interface (from the package github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/stores/uploadstore) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#NewMockS3Uploader",
                    "documentation": {
                      "identifier": "NewMockS3Uploader",
                      "newPage": false,
                      "searchKey": "uploadstore.NewMockS3Uploader",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockS3Uploader() *MockS3Uploader"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockS3Uploader() *MockS3Uploader\n```\n\nNewMockS3Uploader creates a new mock of the s3Uploader interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#NewMockS3UploaderFrom",
                    "documentation": {
                      "identifier": "NewMockS3UploaderFrom",
                      "newPage": false,
                      "searchKey": "uploadstore.NewMockS3UploaderFrom",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockS3UploaderFrom(i surrogateMockS3Uploader) *MockS3Uploader"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockS3UploaderFrom(i surrogateMockS3Uploader) *MockS3Uploader\n```\n\nNewMockS3UploaderFrom creates a new mock of the MockS3Uploader interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#MockS3Uploader.Upload",
                    "documentation": {
                      "identifier": "MockS3Uploader.Upload",
                      "newPage": false,
                      "searchKey": "uploadstore.MockS3Uploader.Upload",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockS3Uploader) Upload(v0 context.Context, v1 *s3.PutObjectInput) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockS3Uploader) Upload(v0 context.Context, v1 *s3.PutObjectInput) error\n```\n\nUpload delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#surrogateMockS3Uploader",
              "documentation": {
                "identifier": "surrogateMockS3Uploader",
                "newPage": false,
                "searchKey": "uploadstore.surrogateMockS3Uploader",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type surrogateMockS3Uploader interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype surrogateMockS3Uploader interface {\n\tUpload(context.Context, *s3.PutObjectInput) error\n}\n```\n\nsurrogateMockS3Uploader is a copy of the s3Uploader interface (from the package github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/stores/uploadstore). It is redefined here as it is unexported in the source package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3UploaderUploadFunc",
              "documentation": {
                "identifier": "S3UploaderUploadFunc",
                "newPage": false,
                "searchKey": "uploadstore.S3UploaderUploadFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3UploaderUploadFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3UploaderUploadFunc struct {\n\tdefaultHook func(context.Context, *s3.PutObjectInput) error\n\thooks       []func(context.Context, *s3.PutObjectInput) error\n\thistory     []S3UploaderUploadFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nS3UploaderUploadFunc describes the behavior when the Upload method of the parent MockS3Uploader instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3UploaderUploadFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "S3UploaderUploadFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3UploaderUploadFunc.SetDefaultHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3UploaderUploadFunc) SetDefaultHook(hook func(context.Context, *s3.PutObjectInput) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3UploaderUploadFunc) SetDefaultHook(hook func(context.Context, *s3.PutObjectInput) error)\n```\n\nSetDefaultHook sets function that is called when the Upload method of the parent MockS3Uploader instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3UploaderUploadFunc.PushHook",
                    "documentation": {
                      "identifier": "S3UploaderUploadFunc.PushHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3UploaderUploadFunc.PushHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3UploaderUploadFunc) PushHook(hook func(context.Context, *s3.PutObjectInput) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3UploaderUploadFunc) PushHook(hook func(context.Context, *s3.PutObjectInput) error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Upload method of the parent MockS3Uploader instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3UploaderUploadFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "S3UploaderUploadFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3UploaderUploadFunc.SetDefaultReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3UploaderUploadFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3UploaderUploadFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3UploaderUploadFunc.PushReturn",
                    "documentation": {
                      "identifier": "S3UploaderUploadFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "uploadstore.S3UploaderUploadFunc.PushReturn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3UploaderUploadFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3UploaderUploadFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3UploaderUploadFunc.nextHook",
                    "documentation": {
                      "identifier": "S3UploaderUploadFunc.nextHook",
                      "newPage": false,
                      "searchKey": "uploadstore.S3UploaderUploadFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3UploaderUploadFunc) nextHook() func(context.Context, *s3.PutObjectInput) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3UploaderUploadFunc) nextHook() func(context.Context, *s3.PutObjectInput) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3UploaderUploadFunc.appendCall",
                    "documentation": {
                      "identifier": "S3UploaderUploadFunc.appendCall",
                      "newPage": false,
                      "searchKey": "uploadstore.S3UploaderUploadFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3UploaderUploadFunc) appendCall(r0 S3UploaderUploadFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3UploaderUploadFunc) appendCall(r0 S3UploaderUploadFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3UploaderUploadFunc.History",
                    "documentation": {
                      "identifier": "S3UploaderUploadFunc.History",
                      "newPage": false,
                      "searchKey": "uploadstore.S3UploaderUploadFunc.History",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *S3UploaderUploadFunc) History() []S3UploaderUploadFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *S3UploaderUploadFunc) History() []S3UploaderUploadFuncCall\n```\n\nHistory returns a sequence of S3UploaderUploadFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3UploaderUploadFuncCall",
              "documentation": {
                "identifier": "S3UploaderUploadFuncCall",
                "newPage": false,
                "searchKey": "uploadstore.S3UploaderUploadFuncCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3UploaderUploadFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3UploaderUploadFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 *s3.PutObjectInput\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nS3UploaderUploadFuncCall is an object that describes an invocation of method Upload on an instance of MockS3Uploader. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3UploaderUploadFuncCall.Args",
                    "documentation": {
                      "identifier": "S3UploaderUploadFuncCall.Args",
                      "newPage": false,
                      "searchKey": "uploadstore.S3UploaderUploadFuncCall.Args",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3UploaderUploadFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3UploaderUploadFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/codeintel/stores/uploadstore#S3UploaderUploadFuncCall.Results",
                    "documentation": {
                      "identifier": "S3UploaderUploadFuncCall.Results",
                      "newPage": false,
                      "searchKey": "uploadstore.S3UploaderUploadFuncCall.Results",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c S3UploaderUploadFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c S3UploaderUploadFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/codeintel/stores/uploadstore#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#gcsClientOptions",
              "documentation": {
                "identifier": "gcsClientOptions",
                "newPage": false,
                "searchKey": "uploadstore.gcsClientOptions",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func gcsClientOptions(config GCSConfig) []option.ClientOption"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc gcsClientOptions(config GCSConfig) []option.ClientOption\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3ClientConfig",
              "documentation": {
                "identifier": "s3ClientConfig",
                "newPage": false,
                "searchKey": "uploadstore.s3ClientConfig",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func s3ClientConfig(ctx context.Context, s3config S3Config) (aws.Config, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc s3ClientConfig(ctx context.Context, s3config S3Config) (aws.Config, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3ClientOptions",
              "documentation": {
                "identifier": "s3ClientOptions",
                "newPage": false,
                "searchKey": "uploadstore.s3ClientOptions",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func s3ClientOptions(backend string, config S3Config) func(o *s3.Options)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc s3ClientOptions(backend string, config S3Config) func(o *s3.Options)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#writeToPipe",
              "documentation": {
                "identifier": "writeToPipe",
                "newPage": false,
                "searchKey": "uploadstore.writeToPipe",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func writeToPipe(fn func(w io.Writer) error) io.Reader"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc writeToPipe(fn func(w io.Writer) error) io.Reader\n```\n\nwriteToPipe invokes the given function with a pipe writer in a goroutine and returns the associated pipe reader. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#isConnectionResetError",
              "documentation": {
                "identifier": "isConnectionResetError",
                "newPage": false,
                "searchKey": "uploadstore.isConnectionResetError",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isConnectionResetError(err error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isConnectionResetError(err error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#s3BucketLifecycleConfiguration",
              "documentation": {
                "identifier": "s3BucketLifecycleConfiguration",
                "newPage": false,
                "searchKey": "uploadstore.s3BucketLifecycleConfiguration",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func s3BucketLifecycleConfiguration(backend string, ttl time.Duration) *s3types.BucketLifecycleConfiguration"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc s3BucketLifecycleConfiguration(backend string, ttl time.Duration) *s3types.BucketLifecycleConfiguration\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestConfigDefaults",
              "documentation": {
                "identifier": "TestConfigDefaults",
                "newPage": false,
                "searchKey": "uploadstore.TestConfigDefaults",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConfigDefaults(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConfigDefaults(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestConfigS3",
              "documentation": {
                "identifier": "TestConfigS3",
                "newPage": false,
                "searchKey": "uploadstore.TestConfigS3",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConfigS3(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConfigS3(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestS3ClientOptions",
              "documentation": {
                "identifier": "TestS3ClientOptions",
                "newPage": false,
                "searchKey": "uploadstore.TestS3ClientOptions",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestS3ClientOptions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestS3ClientOptions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestS3ClientConfig",
              "documentation": {
                "identifier": "TestS3ClientConfig",
                "newPage": false,
                "searchKey": "uploadstore.TestS3ClientConfig",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestS3ClientConfig(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestS3ClientConfig(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestConfigGCS",
              "documentation": {
                "identifier": "TestConfigGCS",
                "newPage": false,
                "searchKey": "uploadstore.TestConfigGCS",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConfigGCS(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConfigGCS(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#mapGetter",
              "documentation": {
                "identifier": "mapGetter",
                "newPage": false,
                "searchKey": "uploadstore.mapGetter",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func mapGetter(env map[string]string) func(name, defaultValue, description string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mapGetter(env map[string]string) func(name, defaultValue, description string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestGCSInit",
              "documentation": {
                "identifier": "TestGCSInit",
                "newPage": false,
                "searchKey": "uploadstore.TestGCSInit",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGCSInit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGCSInit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestGCSInitBucketExists",
              "documentation": {
                "identifier": "TestGCSInitBucketExists",
                "newPage": false,
                "searchKey": "uploadstore.TestGCSInitBucketExists",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGCSInitBucketExists(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGCSInitBucketExists(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestGCSUnmanagedInit",
              "documentation": {
                "identifier": "TestGCSUnmanagedInit",
                "newPage": false,
                "searchKey": "uploadstore.TestGCSUnmanagedInit",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGCSUnmanagedInit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGCSUnmanagedInit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestGCSGet",
              "documentation": {
                "identifier": "TestGCSGet",
                "newPage": false,
                "searchKey": "uploadstore.TestGCSGet",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGCSGet(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGCSGet(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestGCSUpload",
              "documentation": {
                "identifier": "TestGCSUpload",
                "newPage": false,
                "searchKey": "uploadstore.TestGCSUpload",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGCSUpload(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGCSUpload(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestGCSCombine",
              "documentation": {
                "identifier": "TestGCSCombine",
                "newPage": false,
                "searchKey": "uploadstore.TestGCSCombine",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGCSCombine(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGCSCombine(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestGCSDelete",
              "documentation": {
                "identifier": "TestGCSDelete",
                "newPage": false,
                "searchKey": "uploadstore.TestGCSDelete",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGCSDelete(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGCSDelete(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestGCSLifecycle",
              "documentation": {
                "identifier": "TestGCSLifecycle",
                "newPage": false,
                "searchKey": "uploadstore.TestGCSLifecycle",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGCSLifecycle(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGCSLifecycle(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestS3Init",
              "documentation": {
                "identifier": "TestS3Init",
                "newPage": false,
                "searchKey": "uploadstore.TestS3Init",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestS3Init(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestS3Init(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestS3InitBucketExists",
              "documentation": {
                "identifier": "TestS3InitBucketExists",
                "newPage": false,
                "searchKey": "uploadstore.TestS3InitBucketExists",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestS3InitBucketExists(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestS3InitBucketExists(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestS3UnmanagedInit",
              "documentation": {
                "identifier": "TestS3UnmanagedInit",
                "newPage": false,
                "searchKey": "uploadstore.TestS3UnmanagedInit",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestS3UnmanagedInit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestS3UnmanagedInit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestS3Get",
              "documentation": {
                "identifier": "TestS3Get",
                "newPage": false,
                "searchKey": "uploadstore.TestS3Get",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestS3Get(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestS3Get(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestS3GetTransientErrors",
              "documentation": {
                "identifier": "TestS3GetTransientErrors",
                "newPage": false,
                "searchKey": "uploadstore.TestS3GetTransientErrors",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestS3GetTransientErrors(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestS3GetTransientErrors(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestS3GetReadNothingLoop",
              "documentation": {
                "identifier": "TestS3GetReadNothingLoop",
                "newPage": false,
                "searchKey": "uploadstore.TestS3GetReadNothingLoop",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestS3GetReadNothingLoop(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestS3GetReadNothingLoop(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestS3Upload",
              "documentation": {
                "identifier": "TestS3Upload",
                "newPage": false,
                "searchKey": "uploadstore.TestS3Upload",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestS3Upload(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestS3Upload(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestS3Combine",
              "documentation": {
                "identifier": "TestS3Combine",
                "newPage": false,
                "searchKey": "uploadstore.TestS3Combine",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestS3Combine(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestS3Combine(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestS3Delete",
              "documentation": {
                "identifier": "TestS3Delete",
                "newPage": false,
                "searchKey": "uploadstore.TestS3Delete",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestS3Delete(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestS3Delete(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestS3BucketLifecycleConfiguration",
              "documentation": {
                "identifier": "TestS3BucketLifecycleConfiguration",
                "newPage": false,
                "searchKey": "uploadstore.TestS3BucketLifecycleConfiguration",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestS3BucketLifecycleConfiguration(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestS3BucketLifecycleConfiguration(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/codeintel/stores/uploadstore#TestMain",
              "documentation": {
                "identifier": "TestMain",
                "newPage": false,
                "searchKey": "uploadstore.TestMain",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMain(m *testing.M)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMain(m *testing.M)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/enterprise/internal/codeintel/stores/uploadstore/mocks"
    }
  ]
}
