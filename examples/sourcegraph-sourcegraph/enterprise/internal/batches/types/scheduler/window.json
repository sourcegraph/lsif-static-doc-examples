{
  "pathID": "/enterprise/internal/batches/types/scheduler/window",
  "documentation": {
    "identifier": "window",
    "newPage": true,
    "searchKey": "enterprise/internal/batches/types/scheduler/window",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package window"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/internal/batches/types/scheduler/window#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#ratePerHour",
              "documentation": {
                "identifier": "ratePerHour",
                "newPage": false,
                "searchKey": "window.ratePerHour",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ratePerHour"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ratePerHour\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#ratePerMinute",
              "documentation": {
                "identifier": "ratePerMinute",
                "newPage": false,
                "searchKey": "window.ratePerMinute",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ratePerMinute"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ratePerMinute\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#ratePerSecond",
              "documentation": {
                "identifier": "ratePerSecond",
                "newPage": false,
                "searchKey": "window.ratePerSecond",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ratePerSecond"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ratePerSecond = iota\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/batches/types/scheduler/window#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#ErrZeroSchedule",
              "documentation": {
                "identifier": "ErrZeroSchedule",
                "newPage": false,
                "searchKey": "window.ErrZeroSchedule",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrZeroSchedule"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrZeroSchedule = errors.New(\"schedule will never yield\")\n```\n\nErrZeroSchedule indicates a Schedule that has a zero rate limit, and for which Take() will never succeed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#allWeekdays",
              "documentation": {
                "identifier": "allWeekdays",
                "newPage": false,
                "searchKey": "window.allWeekdays",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var allWeekdays"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar allWeekdays = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#cmpAllowUnexported",
              "documentation": {
                "identifier": "cmpAllowUnexported",
                "newPage": false,
                "searchKey": "window.cmpAllowUnexported",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var cmpAllowUnexported"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar cmpAllowUnexported = cmp.AllowUnexported(Window{}, rate{})\n```\n\nWe have a bunch of tests in here that rely on unexported fields in the window structs. Since we control all of this, we're going to provide a common set of options that will allow that. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#cmpOptions",
              "documentation": {
                "identifier": "cmpOptions",
                "newPage": false,
                "searchKey": "window.cmpOptions",
                "tags": [
                  "variable",
                  "array",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var cmpOptions"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar cmpOptions = cmp.Options{cmpAllowUnexported}\n```\n\nWe have a bunch of tests in here that rely on unexported fields in the window structs. Since we control all of this, we're going to provide a common set of options that will allow that. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/batches/types/scheduler/window#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#Configuration",
              "documentation": {
                "identifier": "Configuration",
                "newPage": false,
                "searchKey": "window.Configuration",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Configuration struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Configuration struct {\n\twindows []Window\n}\n```\n\nConfiguration represents the rollout windows configured on the site. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#NewConfiguration",
                    "documentation": {
                      "identifier": "NewConfiguration",
                      "newPage": false,
                      "searchKey": "window.NewConfiguration",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewConfiguration(raw *[]*schema.BatchChangeRolloutWindow) (*Configuration, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewConfiguration(raw *[]*schema.BatchChangeRolloutWindow) (*Configuration, error)\n```\n\nNewConfiguration constructs a Configuration based on the given site configuration. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#Configuration.Estimate",
                    "documentation": {
                      "identifier": "Configuration.Estimate",
                      "newPage": false,
                      "searchKey": "window.Configuration.Estimate",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cfg *Configuration) Estimate(now time.Time, n int) *time.Time"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cfg *Configuration) Estimate(now time.Time, n int) *time.Time\n```\n\nEstimate attempts to estimate when the given entry in a queue of changesets to be reconciled would be reconciled. nil indicates that there is no reasonable estimate, either because all windows are zero or the estimate is too far in the future to be reliable. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#Configuration.HasRolloutWindows",
                    "documentation": {
                      "identifier": "Configuration.HasRolloutWindows",
                      "newPage": false,
                      "searchKey": "window.Configuration.HasRolloutWindows",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cfg *Configuration) HasRolloutWindows() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cfg *Configuration) HasRolloutWindows() bool\n```\n\nHasRolloutWindows returns true if one or more windows have been defined. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#Configuration.Schedule",
                    "documentation": {
                      "identifier": "Configuration.Schedule",
                      "newPage": false,
                      "searchKey": "window.Configuration.Schedule",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cfg *Configuration) Schedule() *Schedule"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cfg *Configuration) Schedule() *Schedule\n```\n\nSchedule returns the currently active schedule. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#Configuration.scheduleAt",
                    "documentation": {
                      "identifier": "Configuration.scheduleAt",
                      "newPage": false,
                      "searchKey": "window.Configuration.scheduleAt",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cfg *Configuration) scheduleAt(at time.Time) *Schedule"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cfg *Configuration) scheduleAt(at time.Time) *Schedule\n```\n\nscheduleAt constructs a schedule that is valid at the given time. Note that scheduleAt does _not_ check if there are rollout windows configured at all: the caller must do this. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#Configuration.windowFor",
                    "documentation": {
                      "identifier": "Configuration.windowFor",
                      "newPage": false,
                      "searchKey": "window.Configuration.windowFor",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cfg *Configuration) windowFor(now time.Time) (*Window, *time.Duration)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cfg *Configuration) windowFor(now time.Time) (*Window, *time.Duration)\n```\n\nwindowFor returns the rollout window for the given time, if any, and the duration for which that window applies. The duration will be nil if the current window applies indefinitely. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#Schedule",
              "documentation": {
                "identifier": "Schedule",
                "newPage": false,
                "searchKey": "window.Schedule",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Schedule struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Schedule struct {\n\tlimiter ratelimit.Limiter\n\n\t// until really needs to contain a monotonic time, which means that care\n\t// must be taken to construct the schedule without a time zone in production\n\t// use. (Testing doesn't really matter.) time.Now() is OK.\n\tuntil time.Time\n\n\t// Fields we need to keep around for total calculation.\n\tduration time.Duration\n\trate     rate\n}\n```\n\nSchedule represents a single Schedule in time: for a certain amount of time, this particular rate limit will be in enforced. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#newSchedule",
                    "documentation": {
                      "identifier": "newSchedule",
                      "newPage": false,
                      "searchKey": "window.newSchedule",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newSchedule(base time.Time, d time.Duration, rate rate) *Schedule"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newSchedule(base time.Time, d time.Duration, rate rate) *Schedule\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#Schedule.Take",
                    "documentation": {
                      "identifier": "Schedule.Take",
                      "newPage": false,
                      "searchKey": "window.Schedule.Take",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Schedule) Take() (time.Time, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Schedule) Take() (time.Time, error)\n```\n\nTake blocks until a scheduling event can occur, and returns the time the event occurred. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#Schedule.ValidUntil",
                    "documentation": {
                      "identifier": "Schedule.ValidUntil",
                      "newPage": false,
                      "searchKey": "window.Schedule.ValidUntil",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Schedule) ValidUntil() time.Time"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Schedule) ValidUntil() time.Time\n```\n\nValidUntil returns the time the schedule is valid until. After that time, a new Schedule must be created and used. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#Schedule.total",
                    "documentation": {
                      "identifier": "Schedule.total",
                      "newPage": false,
                      "searchKey": "window.Schedule.total",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Schedule) total() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Schedule) total() int\n```\n\ntotal returns the total number of events the schedule expects to be able to handle while valid. If the schedule does not apply any rate limiting, then this will be -1. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#Window",
              "documentation": {
                "identifier": "Window",
                "newPage": false,
                "searchKey": "window.Window",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Window struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Window struct {\n\tdays  weekdaySet\n\tstart *timeOfDay\n\tend   *timeOfDay\n\trate  rate\n}\n```\n\nWindow represents a single rollout window configured on a site. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#parseWindow",
                    "documentation": {
                      "identifier": "parseWindow",
                      "newPage": false,
                      "searchKey": "window.parseWindow",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseWindow(raw *schema.BatchChangeRolloutWindow) (Window, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseWindow(raw *schema.BatchChangeRolloutWindow) (Window, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#Window.IsOpen",
                    "documentation": {
                      "identifier": "Window.IsOpen",
                      "newPage": false,
                      "searchKey": "window.Window.IsOpen",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Window) IsOpen(at time.Time) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Window) IsOpen(at time.Time) bool\n```\n\nIsOpen checks if this window is currently open. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#Window.NextOpenAfter",
                    "documentation": {
                      "identifier": "Window.NextOpenAfter",
                      "newPage": false,
                      "searchKey": "window.Window.NextOpenAfter",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Window) NextOpenAfter(after time.Time) time.Time"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Window) NextOpenAfter(after time.Time) time.Time\n```\n\nNextOpenAfter returns the time that this window will next be open. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#Window.covers",
                    "documentation": {
                      "identifier": "Window.covers",
                      "newPage": false,
                      "searchKey": "window.Window.covers",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Window) covers(when timeOfDay) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Window) covers(when timeOfDay) bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#rate",
              "documentation": {
                "identifier": "rate",
                "newPage": false,
                "searchKey": "window.rate",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type rate struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype rate struct {\n\tn    int\n\tunit rateUnit\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#makeUnlimitedRate",
                    "documentation": {
                      "identifier": "makeUnlimitedRate",
                      "newPage": false,
                      "searchKey": "window.makeUnlimitedRate",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makeUnlimitedRate() rate"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makeUnlimitedRate() rate\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#parseRate",
                    "documentation": {
                      "identifier": "parseRate",
                      "newPage": false,
                      "searchKey": "window.parseRate",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseRate(raw interface{}) (rate, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseRate(raw interface{}) (rate, error)\n```\n\nparseRate parses a rate given either as a raw integer (which will be interpreted as a rate per second), a string \"unlimited\" (which will be interpreted, surprisingly, as unlimited), or a string in the form \"N/UNIT\". \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#rate.IsUnlimited",
                    "documentation": {
                      "identifier": "rate.IsUnlimited",
                      "newPage": false,
                      "searchKey": "window.rate.IsUnlimited",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r rate) IsUnlimited() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r rate) IsUnlimited() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#rateUnit",
              "documentation": {
                "identifier": "rateUnit",
                "newPage": false,
                "searchKey": "window.rateUnit",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type rateUnit int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype rateUnit int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#parseRateUnit",
                    "documentation": {
                      "identifier": "parseRateUnit",
                      "newPage": false,
                      "searchKey": "window.parseRateUnit",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseRateUnit(raw string) (rateUnit, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseRateUnit(raw string) (rateUnit, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#rateUnit.AsDuration",
                    "documentation": {
                      "identifier": "rateUnit.AsDuration",
                      "newPage": false,
                      "searchKey": "window.rateUnit.AsDuration",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ru rateUnit) AsDuration() time.Duration"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ru rateUnit) AsDuration() time.Duration\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#timeOfDay",
              "documentation": {
                "identifier": "timeOfDay",
                "newPage": false,
                "searchKey": "window.timeOfDay",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type timeOfDay struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype timeOfDay struct {\n\thour   int8\n\tminute int8\n\n\tcmp int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#parseWindowTime",
                    "documentation": {
                      "identifier": "parseWindowTime",
                      "newPage": false,
                      "searchKey": "window.parseWindowTime",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseWindowTime(raw string) (*timeOfDay, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseWindowTime(raw string) (*timeOfDay, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#timeOfDayFromParts",
                    "documentation": {
                      "identifier": "timeOfDayFromParts",
                      "newPage": false,
                      "searchKey": "window.timeOfDayFromParts",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func timeOfDayFromParts(hour, minute int8) timeOfDay"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc timeOfDayFromParts(hour, minute int8) timeOfDay\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#timeOfDayFromTime",
                    "documentation": {
                      "identifier": "timeOfDayFromTime",
                      "newPage": false,
                      "searchKey": "window.timeOfDayFromTime",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func timeOfDayFromTime(t time.Time) timeOfDay"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc timeOfDayFromTime(t time.Time) timeOfDay\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#timeOfDayPtr",
                    "documentation": {
                      "identifier": "timeOfDayPtr",
                      "newPage": false,
                      "searchKey": "window.timeOfDayPtr",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func timeOfDayPtr(hour, minute int8) *timeOfDay"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc timeOfDayPtr(hour, minute int8) *timeOfDay\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#timeOfDay.Equal",
                    "documentation": {
                      "identifier": "timeOfDay.Equal",
                      "newPage": false,
                      "searchKey": "window.timeOfDay.Equal",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t timeOfDay) Equal(other timeOfDay) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t timeOfDay) Equal(other timeOfDay) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#timeOfDay.after",
                    "documentation": {
                      "identifier": "timeOfDay.after",
                      "newPage": false,
                      "searchKey": "window.timeOfDay.after",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t timeOfDay) after(other timeOfDay) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t timeOfDay) after(other timeOfDay) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#timeOfDay.before",
                    "documentation": {
                      "identifier": "timeOfDay.before",
                      "newPage": false,
                      "searchKey": "window.timeOfDay.before",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t timeOfDay) before(other timeOfDay) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t timeOfDay) before(other timeOfDay) bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#weekdaySet",
              "documentation": {
                "identifier": "weekdaySet",
                "newPage": false,
                "searchKey": "window.weekdaySet",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type weekdaySet int8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype weekdaySet int8\n```\n\nweekdaySet represents a set of weekdays. As a special case, if no weekdays are set (ie the default value), then _all_ weekdays are considered to be set; there's no concept of a zero weekdaySet, since a rollout window must always be valid for at least one weekday. \n\nIn terms of the implementation, since there are only seven possible weekdays, we can store them as bits in an int8. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#newWeekdaySet",
                    "documentation": {
                      "identifier": "newWeekdaySet",
                      "newPage": false,
                      "searchKey": "window.newWeekdaySet",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newWeekdaySet(days ...time.Weekday) weekdaySet"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newWeekdaySet(days ...time.Weekday) weekdaySet\n```\n\nnewWeekdaySet instantiates a new weekdaySet and returns it. If one or more days are provided, they will be added to the initial state of the set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#weekdayToBit",
                    "documentation": {
                      "identifier": "weekdayToBit",
                      "newPage": false,
                      "searchKey": "window.weekdayToBit",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func weekdayToBit(day time.Weekday) weekdaySet"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc weekdayToBit(day time.Weekday) weekdaySet\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#weekdaySet.Equal",
                    "documentation": {
                      "identifier": "weekdaySet.Equal",
                      "newPage": false,
                      "searchKey": "window.weekdaySet.Equal",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ws *weekdaySet) Equal(other *weekdaySet) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ws *weekdaySet) Equal(other *weekdaySet) bool\n```\n\nEqual is needed for test purposes, but not in normal use. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#weekdaySet.add",
                    "documentation": {
                      "identifier": "weekdaySet.add",
                      "newPage": false,
                      "searchKey": "window.weekdaySet.add",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ws *weekdaySet) add(day time.Weekday)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ws *weekdaySet) add(day time.Weekday)\n```\n\nadd adds a day to the weekdaySet. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#weekdaySet.all",
                    "documentation": {
                      "identifier": "weekdaySet.all",
                      "newPage": false,
                      "searchKey": "window.weekdaySet.all",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ws weekdaySet) all() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ws weekdaySet) all() bool\n```\n\nall returns true if the weekdaySet matches all days. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types/scheduler/window#weekdaySet.includes",
                    "documentation": {
                      "identifier": "weekdaySet.includes",
                      "newPage": false,
                      "searchKey": "window.weekdaySet.includes",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ws weekdaySet) includes(day time.Weekday) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ws weekdaySet) includes(day time.Weekday) bool\n```\n\nincludes returns true if the given day is included in the weekdaySet. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/batches/types/scheduler/window#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestConfiguration_Estimate",
              "documentation": {
                "identifier": "TestConfiguration_Estimate",
                "newPage": false,
                "searchKey": "window.TestConfiguration_Estimate",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConfiguration_Estimate(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConfiguration_Estimate(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestConfiguration_Schedule",
              "documentation": {
                "identifier": "TestConfiguration_Schedule",
                "newPage": false,
                "searchKey": "window.TestConfiguration_Schedule",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConfiguration_Schedule(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConfiguration_Schedule(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestConfiguration_currentFor",
              "documentation": {
                "identifier": "TestConfiguration_currentFor",
                "newPage": false,
                "searchKey": "window.TestConfiguration_currentFor",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConfiguration_currentFor(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConfiguration_currentFor(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestParseConfiguration",
              "documentation": {
                "identifier": "TestParseConfiguration",
                "newPage": false,
                "searchKey": "window.TestParseConfiguration",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseConfiguration(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseConfiguration(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestParseRate",
              "documentation": {
                "identifier": "TestParseRate",
                "newPage": false,
                "searchKey": "window.TestParseRate",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseRate(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseRate(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestParseRateUnit",
              "documentation": {
                "identifier": "TestParseRateUnit",
                "newPage": false,
                "searchKey": "window.TestParseRateUnit",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseRateUnit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseRateUnit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestParseWeekday",
              "documentation": {
                "identifier": "TestParseWeekday",
                "newPage": false,
                "searchKey": "window.TestParseWeekday",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseWeekday(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseWeekday(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestParseWindow",
              "documentation": {
                "identifier": "TestParseWindow",
                "newPage": false,
                "searchKey": "window.TestParseWindow",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseWindow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseWindow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestParseWindowTime",
              "documentation": {
                "identifier": "TestParseWindowTime",
                "newPage": false,
                "searchKey": "window.TestParseWindowTime",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseWindowTime(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseWindowTime(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestRateUnit_AsDuration",
              "documentation": {
                "identifier": "TestRateUnit_AsDuration",
                "newPage": false,
                "searchKey": "window.TestRateUnit_AsDuration",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRateUnit_AsDuration(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRateUnit_AsDuration(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestScheduleLimited",
              "documentation": {
                "identifier": "TestScheduleLimited",
                "newPage": false,
                "searchKey": "window.TestScheduleLimited",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScheduleLimited(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScheduleLimited(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestScheduleUnlimited",
              "documentation": {
                "identifier": "TestScheduleUnlimited",
                "newPage": false,
                "searchKey": "window.TestScheduleUnlimited",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScheduleUnlimited(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScheduleUnlimited(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestScheduleZero",
              "documentation": {
                "identifier": "TestScheduleZero",
                "newPage": false,
                "searchKey": "window.TestScheduleZero",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScheduleZero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScheduleZero(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestTimeOfDay",
              "documentation": {
                "identifier": "TestTimeOfDay",
                "newPage": false,
                "searchKey": "window.TestTimeOfDay",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTimeOfDay(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTimeOfDay(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestWeekdayBitSanity",
              "documentation": {
                "identifier": "TestWeekdayBitSanity",
                "newPage": false,
                "searchKey": "window.TestWeekdayBitSanity",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWeekdayBitSanity(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWeekdayBitSanity(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestWeekday_All",
              "documentation": {
                "identifier": "TestWeekday_All",
                "newPage": false,
                "searchKey": "window.TestWeekday_All",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWeekday_All(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWeekday_All(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestWeekday_Includes",
              "documentation": {
                "identifier": "TestWeekday_Includes",
                "newPage": false,
                "searchKey": "window.TestWeekday_Includes",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWeekday_Includes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWeekday_Includes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestWindow_IsOpen",
              "documentation": {
                "identifier": "TestWindow_IsOpen",
                "newPage": false,
                "searchKey": "window.TestWindow_IsOpen",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWindow_IsOpen(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWindow_IsOpen(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#TestWindow_NextOpenAfter",
              "documentation": {
                "identifier": "TestWindow_NextOpenAfter",
                "newPage": false,
                "searchKey": "window.TestWindow_NextOpenAfter",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWindow_NextOpenAfter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWindow_NextOpenAfter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#parseConfiguration",
              "documentation": {
                "identifier": "parseConfiguration",
                "newPage": false,
                "searchKey": "window.parseConfiguration",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseConfiguration(raw *[]*schema.BatchChangeRolloutWindow) ([]Window, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseConfiguration(raw *[]*schema.BatchChangeRolloutWindow) ([]Window, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#parseTimePart",
              "documentation": {
                "identifier": "parseTimePart",
                "newPage": false,
                "searchKey": "window.parseTimePart",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseTimePart(s string) (int8, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseTimePart(s string) (int8, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types/scheduler/window#parseWeekday",
              "documentation": {
                "identifier": "parseWeekday",
                "newPage": false,
                "searchKey": "window.parseWeekday",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseWeekday(raw string) (time.Weekday, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseWeekday(raw string) (time.Weekday, error)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
