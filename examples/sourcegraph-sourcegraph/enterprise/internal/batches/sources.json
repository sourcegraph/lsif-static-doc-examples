{
  "pathID": "/enterprise/internal/batches/sources",
  "documentation": {
    "identifier": "sources",
    "newPage": true,
    "searchKey": "enterprise/internal/batches/sources",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package sources"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/internal/batches/sources#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#ErrMissingCredentials",
              "documentation": {
                "identifier": "ErrMissingCredentials",
                "newPage": false,
                "searchKey": "sources.ErrMissingCredentials",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrMissingCredentials"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrMissingCredentials = errors.New(\"no credential found to authenticate ChangesetSource\")\n```\n\nErrMissingCredentials is returned by WithAuthenticatorForUser, if the user that applied the last batch change/changeset spec doesn't have UserCredentials for the given repository and is not a site-admin (so no fallback to the global credentials is possible). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#ErrNoSSHCredential",
              "documentation": {
                "identifier": "ErrNoSSHCredential",
                "newPage": false,
                "searchKey": "sources.ErrNoSSHCredential",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrNoSSHCredential"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrNoSSHCredential = errors.New(\"authenticator doesn't support SSH\")\n```\n\nErrNoSSHCredential is returned by gitserverPushConfig, if the clone URL of the repository uses the ssh:// scheme, but the authenticator doesn't support SSH pushes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#NoReposErr",
              "documentation": {
                "identifier": "NoReposErr",
                "newPage": false,
                "searchKey": "sources.NoReposErr",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var NoReposErr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar NoReposErr = errors.New(\"no repository set on Changeset\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#fakeNotImplemented",
              "documentation": {
                "identifier": "fakeNotImplemented",
                "newPage": false,
                "searchKey": "sources.fakeNotImplemented",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var fakeNotImplemented"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fakeNotImplemented = errors.New(\"not implemented in FakeChangesetSource\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#updateRegex",
              "documentation": {
                "identifier": "updateRegex",
                "newPage": false,
                "searchKey": "sources.updateRegex",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var updateRegex"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar updateRegex = flag.String(\"update\", \"\", \"Update testdata of tests matching the given regex\")\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/batches/sources#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#BitbucketServerSource",
              "documentation": {
                "identifier": "BitbucketServerSource",
                "newPage": false,
                "searchKey": "sources.BitbucketServerSource",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BitbucketServerSource struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BitbucketServerSource struct {\n\tclient *bitbucketserver.Client\n\tau     auth.Authenticator\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#NewBitbucketServerSource",
                    "documentation": {
                      "identifier": "NewBitbucketServerSource",
                      "newPage": false,
                      "searchKey": "sources.NewBitbucketServerSource",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewBitbucketServerSource(svc *types.ExternalService, cf *httpcli.Factory) (*BitbucketServerSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewBitbucketServerSource(svc *types.ExternalService, cf *httpcli.Factory) (*BitbucketServerSource, error)\n```\n\nNewBitbucketServerSource returns a new BitbucketServerSource from the given external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#newBitbucketServerSource",
                    "documentation": {
                      "identifier": "newBitbucketServerSource",
                      "newPage": false,
                      "searchKey": "sources.newBitbucketServerSource",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newBitbucketServerSource(c *schema.BitbucketServerConnection, cf *httpcli.Factory, au auth.Authenticator) (*BitbucketServerSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newBitbucketServerSource(c *schema.BitbucketServerConnection, cf *httpcli.Factory, au auth.Authenticator) (*BitbucketServerSource, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#BitbucketServerSource.AuthenticatedUsername",
                    "documentation": {
                      "identifier": "BitbucketServerSource.AuthenticatedUsername",
                      "newPage": false,
                      "searchKey": "sources.BitbucketServerSource.AuthenticatedUsername",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketServerSource) AuthenticatedUsername(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketServerSource) AuthenticatedUsername(ctx context.Context) (string, error)\n```\n\nAuthenticatedUsername uses the underlying bitbucketserver.Client to get the username belonging to the credentials associated with the BitbucketServerSource. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#BitbucketServerSource.CloseChangeset",
                    "documentation": {
                      "identifier": "BitbucketServerSource.CloseChangeset",
                      "newPage": false,
                      "searchKey": "sources.BitbucketServerSource.CloseChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketServerSource) CloseChangeset(ctx context.Context, c *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketServerSource) CloseChangeset(ctx context.Context, c *Changeset) error\n```\n\nCloseChangeset closes the given *Changeset on the code host and updates the Metadata column in the *batches.Changeset to the newly closed pull request. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#BitbucketServerSource.CreateChangeset",
                    "documentation": {
                      "identifier": "BitbucketServerSource.CreateChangeset",
                      "newPage": false,
                      "searchKey": "sources.BitbucketServerSource.CreateChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketServerSource) CreateChangeset(ctx context.Context, c *Changeset) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketServerSource) CreateChangeset(ctx context.Context, c *Changeset) (bool, error)\n```\n\nCreateChangeset creates the given *Changeset in the code host. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#BitbucketServerSource.CreateComment",
                    "documentation": {
                      "identifier": "BitbucketServerSource.CreateComment",
                      "newPage": false,
                      "searchKey": "sources.BitbucketServerSource.CreateComment",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketServerSource) CreateComment(ctx context.Context, c *Changeset, text string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketServerSource) CreateComment(ctx context.Context, c *Changeset, text string) error\n```\n\nCreateComment posts a comment on the Changeset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#BitbucketServerSource.GitserverPushConfig",
                    "documentation": {
                      "identifier": "BitbucketServerSource.GitserverPushConfig",
                      "newPage": false,
                      "searchKey": "sources.BitbucketServerSource.GitserverPushConfig",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketServerSource) GitserverPushConfig(ctx context.Context, store *database.ExternalServiceStore, repo *types.Repo) (*protocol.PushConfig, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketServerSource) GitserverPushConfig(ctx context.Context, store *database.ExternalServiceStore, repo *types.Repo) (*protocol.PushConfig, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#BitbucketServerSource.LoadChangeset",
                    "documentation": {
                      "identifier": "BitbucketServerSource.LoadChangeset",
                      "newPage": false,
                      "searchKey": "sources.BitbucketServerSource.LoadChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketServerSource) LoadChangeset(ctx context.Context, cs *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketServerSource) LoadChangeset(ctx context.Context, cs *Changeset) error\n```\n\nLoadChangeset loads the latest state of the given Changeset from the codehost. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#BitbucketServerSource.MergeChangeset",
                    "documentation": {
                      "identifier": "BitbucketServerSource.MergeChangeset",
                      "newPage": false,
                      "searchKey": "sources.BitbucketServerSource.MergeChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketServerSource) MergeChangeset(ctx context.Context, c *Changeset, squash bool) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketServerSource) MergeChangeset(ctx context.Context, c *Changeset, squash bool) error\n```\n\nMergeChangeset merges a Changeset on the code host, if in a mergeable state. The squash parameter is ignored, as Bitbucket Server does not support squash merges. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#BitbucketServerSource.ReopenChangeset",
                    "documentation": {
                      "identifier": "BitbucketServerSource.ReopenChangeset",
                      "newPage": false,
                      "searchKey": "sources.BitbucketServerSource.ReopenChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketServerSource) ReopenChangeset(ctx context.Context, c *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketServerSource) ReopenChangeset(ctx context.Context, c *Changeset) error\n```\n\nReopenChangeset reopens the *Changeset on the code host and updates the Metadata column in the *batches.Changeset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#BitbucketServerSource.UpdateChangeset",
                    "documentation": {
                      "identifier": "BitbucketServerSource.UpdateChangeset",
                      "newPage": false,
                      "searchKey": "sources.BitbucketServerSource.UpdateChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketServerSource) UpdateChangeset(ctx context.Context, c *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketServerSource) UpdateChangeset(ctx context.Context, c *Changeset) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#BitbucketServerSource.ValidateAuthenticator",
                    "documentation": {
                      "identifier": "BitbucketServerSource.ValidateAuthenticator",
                      "newPage": false,
                      "searchKey": "sources.BitbucketServerSource.ValidateAuthenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketServerSource) ValidateAuthenticator(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketServerSource) ValidateAuthenticator(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#BitbucketServerSource.WithAuthenticator",
                    "documentation": {
                      "identifier": "BitbucketServerSource.WithAuthenticator",
                      "newPage": false,
                      "searchKey": "sources.BitbucketServerSource.WithAuthenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketServerSource) WithAuthenticator(a auth.Authenticator) (ChangesetSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketServerSource) WithAuthenticator(a auth.Authenticator) (ChangesetSource, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#BitbucketServerSource.loadPullRequestData",
                    "documentation": {
                      "identifier": "BitbucketServerSource.loadPullRequestData",
                      "newPage": false,
                      "searchKey": "sources.BitbucketServerSource.loadPullRequestData",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BitbucketServerSource) loadPullRequestData(ctx context.Context, pr *bitbucketserver.PullRequest) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BitbucketServerSource) loadPullRequestData(ctx context.Context, pr *bitbucketserver.PullRequest) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#Changeset",
              "documentation": {
                "identifier": "Changeset",
                "newPage": false,
                "searchKey": "sources.Changeset",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Changeset struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Changeset struct {\n\tTitle   string\n\tBody    string\n\tHeadRef string\n\tBaseRef string\n\n\t*btypes.Changeset\n\t*types.Repo\n}\n```\n\nA Changeset of an existing Repo. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#Changeset.IsOutdated",
                    "documentation": {
                      "identifier": "Changeset.IsOutdated",
                      "newPage": false,
                      "searchKey": "sources.Changeset.IsOutdated",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) IsOutdated() (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) IsOutdated() (bool, error)\n```\n\nIsOutdated returns true when the attributes of the nested batches.Changeset do not match the attributes (title, body, ...) set on the Changeset. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#ChangesetNotFoundError",
              "documentation": {
                "identifier": "ChangesetNotFoundError",
                "newPage": false,
                "searchKey": "sources.ChangesetNotFoundError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetNotFoundError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetNotFoundError struct {\n\tChangeset *Changeset\n}\n```\n\nChangesetNotFoundError is returned by LoadChangeset if the changeset could not be found on the codehost. This is only returned, if the changeset is actually not found. Other not found errors, such as repo not found should NOT raise this error, since it will cause the changeset to be marked as deleted. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#ChangesetNotFoundError.Error",
                    "documentation": {
                      "identifier": "ChangesetNotFoundError.Error",
                      "newPage": false,
                      "searchKey": "sources.ChangesetNotFoundError.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ChangesetNotFoundError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ChangesetNotFoundError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#ChangesetNotFoundError.NonRetryable",
                    "documentation": {
                      "identifier": "ChangesetNotFoundError.NonRetryable",
                      "newPage": false,
                      "searchKey": "sources.ChangesetNotFoundError.NonRetryable",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ChangesetNotFoundError) NonRetryable() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ChangesetNotFoundError) NonRetryable() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#ChangesetNotMergeableError",
              "documentation": {
                "identifier": "ChangesetNotMergeableError",
                "newPage": false,
                "searchKey": "sources.ChangesetNotMergeableError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetNotMergeableError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetNotMergeableError struct {\n\tErrorMsg string\n}\n```\n\nChangesetNotMergeableError is returned by MergeChangeset if the changeset could not be merged on the codehost, because some precondition is not met. This is only returned, if the changeset is not mergeable. Other errors, such as network or auth errors should NOT raise this error. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#ChangesetNotMergeableError.Error",
                    "documentation": {
                      "identifier": "ChangesetNotMergeableError.Error",
                      "newPage": false,
                      "searchKey": "sources.ChangesetNotMergeableError.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ChangesetNotMergeableError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ChangesetNotMergeableError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#ChangesetNotMergeableError.NonRetryable",
                    "documentation": {
                      "identifier": "ChangesetNotMergeableError.NonRetryable",
                      "newPage": false,
                      "searchKey": "sources.ChangesetNotMergeableError.NonRetryable",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ChangesetNotMergeableError) NonRetryable() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ChangesetNotMergeableError) NonRetryable() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#ChangesetSource",
              "documentation": {
                "identifier": "ChangesetSource",
                "newPage": false,
                "searchKey": "sources.ChangesetSource",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetSource interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetSource interface {\n\t// GitserverPushConfig returns an authenticated push config used for pushing\n\t// commits to the code host.\n\tGitserverPushConfig(context.Context, *database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)\n\t// WithAuthenticator returns a copy of the original Source configured to use\n\t// the given authenticator, provided that authenticator type is supported by\n\t// the code host.\n\tWithAuthenticator(auth.Authenticator) (ChangesetSource, error)\n\t// ValidateAuthenticator validates the currently set authenticator is usable.\n\t// Returns an error, when validating the Authenticator yielded an error.\n\tValidateAuthenticator(ctx context.Context) error\n\n\t// LoadChangeset loads the given Changeset from the source and updates it.\n\t// If the Changeset could not be found on the source, a ChangesetNotFoundError is returned.\n\tLoadChangeset(context.Context, *Changeset) error\n\t// CreateChangeset will create the Changeset on the source. If it already\n\t// exists, *Changeset will be populated and the return value will be\n\t// true.\n\tCreateChangeset(context.Context, *Changeset) (bool, error)\n\t// CloseChangeset will close the Changeset on the source, where \"close\"\n\t// means the appropriate final state on the codehost (e.g. \"declined\" on\n\t// Bitbucket Server).\n\tCloseChangeset(context.Context, *Changeset) error\n\t// UpdateChangeset can update Changesets.\n\tUpdateChangeset(context.Context, *Changeset) error\n\t// ReopenChangeset will reopen the Changeset on the source, if it's closed.\n\t// If not, it's a noop.\n\tReopenChangeset(context.Context, *Changeset) error\n\t// CreateComment posts a comment on the Changeset.\n\tCreateComment(context.Context, *Changeset, string) error\n\t// MergeChangeset merges a Changeset on the code host, if in a mergeable state.\n\t// If squash is true, and the code host supports squash merges, the source\n\t// must attempt a squash merge. Otherwise, it is expected to perform a regular\n\t// merge. If the changeset cannot be merged, because it is in an unmergeable\n\t// state, ChangesetNotMergeableError must be returned.\n\tMergeChangeset(ctx context.Context, ch *Changeset, squash bool) error\n}\n```\n\nA ChangesetSource can load the latest state of a list of Changesets. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#WithAuthenticatorForUser",
                    "documentation": {
                      "identifier": "WithAuthenticatorForUser",
                      "newPage": false,
                      "searchKey": "sources.WithAuthenticatorForUser",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func WithAuthenticatorForUser(ctx context.Context, tx SourcerStore, css ChangesetSource, userID int32, repo *types.Repo) (ChangesetSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc WithAuthenticatorForUser(ctx context.Context, tx SourcerStore, css ChangesetSource, userID int32, repo *types.Repo) (ChangesetSource, error)\n```\n\nWithAuthenticatorForUser authenticates the given ChangesetSource with a credential usable by the given user with userID. User credentials are preferred, with a fallback to site credentials. If none of these exist, ErrMissingCredentials is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#WithSiteAuthenticator",
                    "documentation": {
                      "identifier": "WithSiteAuthenticator",
                      "newPage": false,
                      "searchKey": "sources.WithSiteAuthenticator",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func WithSiteAuthenticator(ctx context.Context, tx SourcerStore, css ChangesetSource, repo *types.Repo) (ChangesetSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc WithSiteAuthenticator(ctx context.Context, tx SourcerStore, css ChangesetSource, repo *types.Repo) (ChangesetSource, error)\n```\n\nWithSiteAuthenticator uses the site credential of the code host of the passed-in repo. If no credential is found, the original source is returned and uses the external service config. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#buildChangesetSource",
                    "documentation": {
                      "identifier": "buildChangesetSource",
                      "newPage": false,
                      "searchKey": "sources.buildChangesetSource",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func buildChangesetSource(store SourcerStore, cf *httpcli.Factory, externalService *types.ExternalService) (ChangesetSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc buildChangesetSource(store SourcerStore, cf *httpcli.Factory, externalService *types.ExternalService) (ChangesetSource, error)\n```\n\nbuildChangesetSource get an authenticated ChangesetSource for the given repo to load the changeset state from. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#DraftChangesetSource",
              "documentation": {
                "identifier": "DraftChangesetSource",
                "newPage": false,
                "searchKey": "sources.DraftChangesetSource",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DraftChangesetSource interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DraftChangesetSource interface {\n\t// CreateDraftChangeset will create the Changeset on the source. If it already\n\t// exists, *Changeset will be populated and the return value will be\n\t// true.\n\tCreateDraftChangeset(context.Context, *Changeset) (bool, error)\n\t// UndraftChangeset will update the Changeset on the source to be not in draft mode anymore.\n\tUndraftChangeset(context.Context, *Changeset) error\n}\n```\n\nA DraftChangesetSource can create draft changesets and undraft them. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#ToDraftChangesetSource",
                    "documentation": {
                      "identifier": "ToDraftChangesetSource",
                      "newPage": false,
                      "searchKey": "sources.ToDraftChangesetSource",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func ToDraftChangesetSource(css ChangesetSource) (DraftChangesetSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc ToDraftChangesetSource(css ChangesetSource) (DraftChangesetSource, error)\n```\n\nDraftChangesetSource returns a DraftChangesetSource, if the underlying source supports it. Returns an error if not. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#ErrNoPushCredentials",
              "documentation": {
                "identifier": "ErrNoPushCredentials",
                "newPage": false,
                "searchKey": "sources.ErrNoPushCredentials",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ErrNoPushCredentials struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ErrNoPushCredentials struct{ CredentialsType string }\n```\n\nErrNoPushCredentials is returned by gitserverPushConfig if the authenticator cannot be used by git to authenticate a `git push`. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#ErrNoPushCredentials.Error",
                    "documentation": {
                      "identifier": "ErrNoPushCredentials.Error",
                      "newPage": false,
                      "searchKey": "sources.ErrNoPushCredentials.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e ErrNoPushCredentials) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e ErrNoPushCredentials) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#FakeChangesetSource",
              "documentation": {
                "identifier": "FakeChangesetSource",
                "newPage": false,
                "searchKey": "sources.FakeChangesetSource",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FakeChangesetSource struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FakeChangesetSource struct {\n\tSvc *types.ExternalService\n\n\tCurrentAuthenticator auth.Authenticator\n\n\tCreateDraftChangesetCalled  bool\n\tUndraftedChangesetsCalled   bool\n\tCreateChangesetCalled       bool\n\tUpdateChangesetCalled       bool\n\tListReposCalled             bool\n\tExternalServicesCalled      bool\n\tLoadChangesetCalled         bool\n\tCloseChangesetCalled        bool\n\tReopenChangesetCalled       bool\n\tCreateCommentCalled         bool\n\tAuthenticatedUsernameCalled bool\n\tValidateAuthenticatorCalled bool\n\tMergeChangesetCalled        bool\n\n\t// The Changeset.HeadRef to be expected in CreateChangeset/UpdateChangeset calls.\n\tWantHeadRef string\n\t// The Changeset.BaseRef to be expected in CreateChangeset/UpdateChangeset calls.\n\tWantBaseRef string\n\n\t// The metadata the FakeChangesetSource should set on the created/updated\n\t// Changeset with changeset.SetMetadata.\n\tFakeMetadata interface{}\n\n\t// Whether or not the changeset already ChangesetExists on the code host at the time\n\t// when CreateChangeset is called.\n\tChangesetExists bool\n\n\t// When true, ValidateAuthenticator will return no error.\n\tAuthenticatorIsValid bool\n\n\t// error to be returned from every method\n\tErr error\n\n\t// ClosedChangesets contains the changesets that were passed to CloseChangeset\n\tClosedChangesets []*Changeset\n\n\t// CreatedChangesets contains the changesets that were passed to\n\t// CreateChangeset\n\tCreatedChangesets []*Changeset\n\n\t// LoadedChangesets contains the changesets that were passed to LoadChangeset\n\tLoadedChangesets []*Changeset\n\n\t// UpdateChangesets contains the changesets that were passed to\n\t// UpdateChangeset\n\tUpdatedChangesets []*Changeset\n\n\t// ReopenedChangesets contains the changesets that were passed to ReopenedChangeset\n\tReopenedChangesets []*Changeset\n\n\t// UndraftedChangesets contains the changesets that were passed to UndraftChangeset\n\tUndraftedChangesets []*Changeset\n\n\t// Username is the username returned by AuthenticatedUsername\n\tUsername string\n}\n```\n\nFakeChangesetSource is a fake implementation of the ChangesetSource interface to be used in tests. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#FakeChangesetSource.AuthenticatedUsername",
                    "documentation": {
                      "identifier": "FakeChangesetSource.AuthenticatedUsername",
                      "newPage": false,
                      "searchKey": "sources.FakeChangesetSource.AuthenticatedUsername",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FakeChangesetSource) AuthenticatedUsername(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FakeChangesetSource) AuthenticatedUsername(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#FakeChangesetSource.CloseChangeset",
                    "documentation": {
                      "identifier": "FakeChangesetSource.CloseChangeset",
                      "newPage": false,
                      "searchKey": "sources.FakeChangesetSource.CloseChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FakeChangesetSource) CloseChangeset(ctx context.Context, c *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FakeChangesetSource) CloseChangeset(ctx context.Context, c *Changeset) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#FakeChangesetSource.CreateChangeset",
                    "documentation": {
                      "identifier": "FakeChangesetSource.CreateChangeset",
                      "newPage": false,
                      "searchKey": "sources.FakeChangesetSource.CreateChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FakeChangesetSource) CreateChangeset(ctx context.Context, c *Changeset) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FakeChangesetSource) CreateChangeset(ctx context.Context, c *Changeset) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#FakeChangesetSource.CreateComment",
                    "documentation": {
                      "identifier": "FakeChangesetSource.CreateComment",
                      "newPage": false,
                      "searchKey": "sources.FakeChangesetSource.CreateComment",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FakeChangesetSource) CreateComment(ctx context.Context, c *Changeset, body string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FakeChangesetSource) CreateComment(ctx context.Context, c *Changeset, body string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#FakeChangesetSource.CreateDraftChangeset",
                    "documentation": {
                      "identifier": "FakeChangesetSource.CreateDraftChangeset",
                      "newPage": false,
                      "searchKey": "sources.FakeChangesetSource.CreateDraftChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FakeChangesetSource) CreateDraftChangeset(ctx context.Context, c *Changeset) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FakeChangesetSource) CreateDraftChangeset(ctx context.Context, c *Changeset) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#FakeChangesetSource.ExternalServices",
                    "documentation": {
                      "identifier": "FakeChangesetSource.ExternalServices",
                      "newPage": false,
                      "searchKey": "sources.FakeChangesetSource.ExternalServices",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FakeChangesetSource) ExternalServices() types.ExternalServices"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FakeChangesetSource) ExternalServices() types.ExternalServices\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#FakeChangesetSource.GitserverPushConfig",
                    "documentation": {
                      "identifier": "FakeChangesetSource.GitserverPushConfig",
                      "newPage": false,
                      "searchKey": "sources.FakeChangesetSource.GitserverPushConfig",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FakeChangesetSource) GitserverPushConfig(ctx context.Context, store *database.ExternalServiceStore, repo *types.Repo) (*protocol.PushConfig, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FakeChangesetSource) GitserverPushConfig(ctx context.Context, store *database.ExternalServiceStore, repo *types.Repo) (*protocol.PushConfig, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#FakeChangesetSource.ListRepos",
                    "documentation": {
                      "identifier": "FakeChangesetSource.ListRepos",
                      "newPage": false,
                      "searchKey": "sources.FakeChangesetSource.ListRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FakeChangesetSource) ListRepos(ctx context.Context, results chan repos.SourceResult)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FakeChangesetSource) ListRepos(ctx context.Context, results chan repos.SourceResult)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#FakeChangesetSource.LoadChangeset",
                    "documentation": {
                      "identifier": "FakeChangesetSource.LoadChangeset",
                      "newPage": false,
                      "searchKey": "sources.FakeChangesetSource.LoadChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FakeChangesetSource) LoadChangeset(ctx context.Context, c *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FakeChangesetSource) LoadChangeset(ctx context.Context, c *Changeset) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#FakeChangesetSource.MergeChangeset",
                    "documentation": {
                      "identifier": "FakeChangesetSource.MergeChangeset",
                      "newPage": false,
                      "searchKey": "sources.FakeChangesetSource.MergeChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FakeChangesetSource) MergeChangeset(ctx context.Context, c *Changeset, squash bool) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FakeChangesetSource) MergeChangeset(ctx context.Context, c *Changeset, squash bool) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#FakeChangesetSource.ReopenChangeset",
                    "documentation": {
                      "identifier": "FakeChangesetSource.ReopenChangeset",
                      "newPage": false,
                      "searchKey": "sources.FakeChangesetSource.ReopenChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FakeChangesetSource) ReopenChangeset(ctx context.Context, c *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FakeChangesetSource) ReopenChangeset(ctx context.Context, c *Changeset) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#FakeChangesetSource.UndraftChangeset",
                    "documentation": {
                      "identifier": "FakeChangesetSource.UndraftChangeset",
                      "newPage": false,
                      "searchKey": "sources.FakeChangesetSource.UndraftChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FakeChangesetSource) UndraftChangeset(ctx context.Context, c *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FakeChangesetSource) UndraftChangeset(ctx context.Context, c *Changeset) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#FakeChangesetSource.UpdateChangeset",
                    "documentation": {
                      "identifier": "FakeChangesetSource.UpdateChangeset",
                      "newPage": false,
                      "searchKey": "sources.FakeChangesetSource.UpdateChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FakeChangesetSource) UpdateChangeset(ctx context.Context, c *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FakeChangesetSource) UpdateChangeset(ctx context.Context, c *Changeset) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#FakeChangesetSource.ValidateAuthenticator",
                    "documentation": {
                      "identifier": "FakeChangesetSource.ValidateAuthenticator",
                      "newPage": false,
                      "searchKey": "sources.FakeChangesetSource.ValidateAuthenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FakeChangesetSource) ValidateAuthenticator(context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FakeChangesetSource) ValidateAuthenticator(context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#FakeChangesetSource.WithAuthenticator",
                    "documentation": {
                      "identifier": "FakeChangesetSource.WithAuthenticator",
                      "newPage": false,
                      "searchKey": "sources.FakeChangesetSource.WithAuthenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FakeChangesetSource) WithAuthenticator(a auth.Authenticator) (ChangesetSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FakeChangesetSource) WithAuthenticator(a auth.Authenticator) (ChangesetSource, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#GitLabSource",
              "documentation": {
                "identifier": "GitLabSource",
                "newPage": false,
                "searchKey": "sources.GitLabSource",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitLabSource struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitLabSource struct {\n\tclient *gitlab.Client\n\tau     auth.Authenticator\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#NewGitLabSource",
                    "documentation": {
                      "identifier": "NewGitLabSource",
                      "newPage": false,
                      "searchKey": "sources.NewGitLabSource",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewGitLabSource(svc *types.ExternalService, cf *httpcli.Factory) (*GitLabSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewGitLabSource(svc *types.ExternalService, cf *httpcli.Factory) (*GitLabSource, error)\n```\n\nNewGitLabSource returns a new GitLabSource from the given external service. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#newGitLabSource",
                    "documentation": {
                      "identifier": "newGitLabSource",
                      "newPage": false,
                      "searchKey": "sources.newGitLabSource",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newGitLabSource(c *schema.GitLabConnection, cf *httpcli.Factory, au auth.Authenticator) (*GitLabSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newGitLabSource(c *schema.GitLabConnection, cf *httpcli.Factory, au auth.Authenticator) (*GitLabSource, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GitLabSource.CloseChangeset",
                    "documentation": {
                      "identifier": "GitLabSource.CloseChangeset",
                      "newPage": false,
                      "searchKey": "sources.GitLabSource.CloseChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitLabSource) CloseChangeset(ctx context.Context, c *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitLabSource) CloseChangeset(ctx context.Context, c *Changeset) error\n```\n\nCloseChangeset closes the merge request on GitLab, leaving it unlocked. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GitLabSource.CreateChangeset",
                    "documentation": {
                      "identifier": "GitLabSource.CreateChangeset",
                      "newPage": false,
                      "searchKey": "sources.GitLabSource.CreateChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitLabSource) CreateChangeset(ctx context.Context, c *Changeset) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitLabSource) CreateChangeset(ctx context.Context, c *Changeset) (bool, error)\n```\n\nCreateChangeset creates a GitLab merge request. If it already exists, *Changeset will be populated and the return value will be true. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GitLabSource.CreateComment",
                    "documentation": {
                      "identifier": "GitLabSource.CreateComment",
                      "newPage": false,
                      "searchKey": "sources.GitLabSource.CreateComment",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitLabSource) CreateComment(ctx context.Context, c *Changeset, text string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitLabSource) CreateComment(ctx context.Context, c *Changeset, text string) error\n```\n\nCreateComment posts a comment on the Changeset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GitLabSource.CreateDraftChangeset",
                    "documentation": {
                      "identifier": "GitLabSource.CreateDraftChangeset",
                      "newPage": false,
                      "searchKey": "sources.GitLabSource.CreateDraftChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitLabSource) CreateDraftChangeset(ctx context.Context, c *Changeset) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitLabSource) CreateDraftChangeset(ctx context.Context, c *Changeset) (bool, error)\n```\n\nCreateDraftChangeset creates a GitLab merge request. If it already exists, *Changeset will be populated and the return value will be true. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GitLabSource.GitserverPushConfig",
                    "documentation": {
                      "identifier": "GitLabSource.GitserverPushConfig",
                      "newPage": false,
                      "searchKey": "sources.GitLabSource.GitserverPushConfig",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GitLabSource) GitserverPushConfig(ctx context.Context, store *database.ExternalServiceStore, repo *types.Repo) (*protocol.PushConfig, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GitLabSource) GitserverPushConfig(ctx context.Context, store *database.ExternalServiceStore, repo *types.Repo) (*protocol.PushConfig, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GitLabSource.LoadChangeset",
                    "documentation": {
                      "identifier": "GitLabSource.LoadChangeset",
                      "newPage": false,
                      "searchKey": "sources.GitLabSource.LoadChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitLabSource) LoadChangeset(ctx context.Context, cs *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitLabSource) LoadChangeset(ctx context.Context, cs *Changeset) error\n```\n\nLoadChangeset loads the given merge request from GitLab and updates it. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GitLabSource.MergeChangeset",
                    "documentation": {
                      "identifier": "GitLabSource.MergeChangeset",
                      "newPage": false,
                      "searchKey": "sources.GitLabSource.MergeChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitLabSource) MergeChangeset(ctx context.Context, c *Changeset, squash bool) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitLabSource) MergeChangeset(ctx context.Context, c *Changeset, squash bool) error\n```\n\nMergeChangeset merges a Changeset on the code host, if in a mergeable state. If squash is true, a squash-then-merge merge will be performed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GitLabSource.ReopenChangeset",
                    "documentation": {
                      "identifier": "GitLabSource.ReopenChangeset",
                      "newPage": false,
                      "searchKey": "sources.GitLabSource.ReopenChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitLabSource) ReopenChangeset(ctx context.Context, c *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitLabSource) ReopenChangeset(ctx context.Context, c *Changeset) error\n```\n\nReopenChangeset closes the merge request on GitLab, leaving it unlocked. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GitLabSource.UndraftChangeset",
                    "documentation": {
                      "identifier": "GitLabSource.UndraftChangeset",
                      "newPage": false,
                      "searchKey": "sources.GitLabSource.UndraftChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitLabSource) UndraftChangeset(ctx context.Context, c *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitLabSource) UndraftChangeset(ctx context.Context, c *Changeset) error\n```\n\nUndraftChangeset marks the changeset as *not* work in progress anymore. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GitLabSource.UpdateChangeset",
                    "documentation": {
                      "identifier": "GitLabSource.UpdateChangeset",
                      "newPage": false,
                      "searchKey": "sources.GitLabSource.UpdateChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitLabSource) UpdateChangeset(ctx context.Context, c *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitLabSource) UpdateChangeset(ctx context.Context, c *Changeset) error\n```\n\nUpdateChangeset updates the merge request on GitLab to reflect the local state of the Changeset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GitLabSource.ValidateAuthenticator",
                    "documentation": {
                      "identifier": "GitLabSource.ValidateAuthenticator",
                      "newPage": false,
                      "searchKey": "sources.GitLabSource.ValidateAuthenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GitLabSource) ValidateAuthenticator(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GitLabSource) ValidateAuthenticator(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GitLabSource.WithAuthenticator",
                    "documentation": {
                      "identifier": "GitLabSource.WithAuthenticator",
                      "newPage": false,
                      "searchKey": "sources.GitLabSource.WithAuthenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GitLabSource) WithAuthenticator(a auth.Authenticator) (ChangesetSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GitLabSource) WithAuthenticator(a auth.Authenticator) (ChangesetSource, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GitLabSource.decorateMergeRequestData",
                    "documentation": {
                      "identifier": "GitLabSource.decorateMergeRequestData",
                      "newPage": false,
                      "searchKey": "sources.GitLabSource.decorateMergeRequestData",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitLabSource) decorateMergeRequestData(ctx context.Context, project *gitlab.Project, mr *gitlab.MergeRequest) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitLabSource) decorateMergeRequestData(ctx context.Context, project *gitlab.Project, mr *gitlab.MergeRequest) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GitLabSource.getMergeRequestNotes",
                    "documentation": {
                      "identifier": "GitLabSource.getMergeRequestNotes",
                      "newPage": false,
                      "searchKey": "sources.GitLabSource.getMergeRequestNotes",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitLabSource) getMergeRequestNotes(ctx context.Context, project *gitlab.Project, mr *gitlab.MergeRequest) ([]*gitlab.Note, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitLabSource) getMergeRequestNotes(ctx context.Context, project *gitlab.Project, mr *gitlab.MergeRequest) ([]*gitlab.Note, error)\n```\n\ngetMergeRequestNotes retrieves the notes attached to a merge request in descending time order. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GitLabSource.getMergeRequestPipelines",
                    "documentation": {
                      "identifier": "GitLabSource.getMergeRequestPipelines",
                      "newPage": false,
                      "searchKey": "sources.GitLabSource.getMergeRequestPipelines",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitLabSource) getMergeRequestPipelines(ctx context.Context, project *gitlab.Project, mr *gitlab.MergeRequest) ([]*gitlab.Pipeline, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitLabSource) getMergeRequestPipelines(ctx context.Context, project *gitlab.Project, mr *gitlab.MergeRequest) ([]*gitlab.Pipeline, error)\n```\n\ngetMergeRequestPipelines retrieves the pipelines attached to a merge request in descending time order. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GitLabSource.getMergeRequestResourceStateEvents",
                    "documentation": {
                      "identifier": "GitLabSource.getMergeRequestResourceStateEvents",
                      "newPage": false,
                      "searchKey": "sources.GitLabSource.getMergeRequestResourceStateEvents",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GitLabSource) getMergeRequestResourceStateEvents(ctx context.Context, project *gitlab.Project, mr *gitlab.MergeRequest) ([]*gitlab.ResourceStateEvent, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GitLabSource) getMergeRequestResourceStateEvents(ctx context.Context, project *gitlab.Project, mr *gitlab.MergeRequest) ([]*gitlab.ResourceStateEvent, error)\n```\n\ngetMergeRequestResourceStateEvents retrieves the events attached to a merge request in descending time order. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#GithubSource",
              "documentation": {
                "identifier": "GithubSource",
                "newPage": false,
                "searchKey": "sources.GithubSource",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GithubSource struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GithubSource struct {\n\tclient *github.V4Client\n\tau     auth.Authenticator\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#NewGithubSource",
                    "documentation": {
                      "identifier": "NewGithubSource",
                      "newPage": false,
                      "searchKey": "sources.NewGithubSource",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewGithubSource(svc *types.ExternalService, cf *httpcli.Factory) (*GithubSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewGithubSource(svc *types.ExternalService, cf *httpcli.Factory) (*GithubSource, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#newGithubSource",
                    "documentation": {
                      "identifier": "newGithubSource",
                      "newPage": false,
                      "searchKey": "sources.newGithubSource",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newGithubSource(c *schema.GitHubConnection, cf *httpcli.Factory, au auth.Authenticator) (*GithubSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newGithubSource(c *schema.GitHubConnection, cf *httpcli.Factory, au auth.Authenticator) (*GithubSource, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GithubSource.CloseChangeset",
                    "documentation": {
                      "identifier": "GithubSource.CloseChangeset",
                      "newPage": false,
                      "searchKey": "sources.GithubSource.CloseChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) CloseChangeset(ctx context.Context, c *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) CloseChangeset(ctx context.Context, c *Changeset) error\n```\n\nCloseChangeset closes the given *Changeset on the code host and updates the Metadata column in the *batches.Changeset to the newly closed pull request. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GithubSource.CreateChangeset",
                    "documentation": {
                      "identifier": "GithubSource.CreateChangeset",
                      "newPage": false,
                      "searchKey": "sources.GithubSource.CreateChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) CreateChangeset(ctx context.Context, c *Changeset) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) CreateChangeset(ctx context.Context, c *Changeset) (bool, error)\n```\n\nCreateChangeset creates the given changeset on the code host. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GithubSource.CreateComment",
                    "documentation": {
                      "identifier": "GithubSource.CreateComment",
                      "newPage": false,
                      "searchKey": "sources.GithubSource.CreateComment",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) CreateComment(ctx context.Context, c *Changeset, text string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) CreateComment(ctx context.Context, c *Changeset, text string) error\n```\n\nCreateComment posts a comment on the Changeset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GithubSource.CreateDraftChangeset",
                    "documentation": {
                      "identifier": "GithubSource.CreateDraftChangeset",
                      "newPage": false,
                      "searchKey": "sources.GithubSource.CreateDraftChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) CreateDraftChangeset(ctx context.Context, c *Changeset) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) CreateDraftChangeset(ctx context.Context, c *Changeset) (bool, error)\n```\n\nCreateDraftChangeset creates the given changeset on the code host in draft mode. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GithubSource.GitserverPushConfig",
                    "documentation": {
                      "identifier": "GithubSource.GitserverPushConfig",
                      "newPage": false,
                      "searchKey": "sources.GithubSource.GitserverPushConfig",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) GitserverPushConfig(ctx context.Context, store *database.ExternalServiceStore, repo *types.Repo) (*protocol.PushConfig, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) GitserverPushConfig(ctx context.Context, store *database.ExternalServiceStore, repo *types.Repo) (*protocol.PushConfig, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GithubSource.LoadChangeset",
                    "documentation": {
                      "identifier": "GithubSource.LoadChangeset",
                      "newPage": false,
                      "searchKey": "sources.GithubSource.LoadChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) LoadChangeset(ctx context.Context, cs *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) LoadChangeset(ctx context.Context, cs *Changeset) error\n```\n\nLoadChangeset loads the latest state of the given Changeset from the codehost. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GithubSource.MergeChangeset",
                    "documentation": {
                      "identifier": "GithubSource.MergeChangeset",
                      "newPage": false,
                      "searchKey": "sources.GithubSource.MergeChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) MergeChangeset(ctx context.Context, c *Changeset, squash bool) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) MergeChangeset(ctx context.Context, c *Changeset, squash bool) error\n```\n\nMergeChangeset merges a Changeset on the code host, if in a mergeable state. If squash is true, a squash-then-merge merge will be performed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GithubSource.ReopenChangeset",
                    "documentation": {
                      "identifier": "GithubSource.ReopenChangeset",
                      "newPage": false,
                      "searchKey": "sources.GithubSource.ReopenChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) ReopenChangeset(ctx context.Context, c *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) ReopenChangeset(ctx context.Context, c *Changeset) error\n```\n\nReopenChangeset reopens the given *Changeset on the code host. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GithubSource.UndraftChangeset",
                    "documentation": {
                      "identifier": "GithubSource.UndraftChangeset",
                      "newPage": false,
                      "searchKey": "sources.GithubSource.UndraftChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) UndraftChangeset(ctx context.Context, c *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) UndraftChangeset(ctx context.Context, c *Changeset) error\n```\n\nUndraftChangeset will update the Changeset on the source to be not in draft mode anymore. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GithubSource.UpdateChangeset",
                    "documentation": {
                      "identifier": "GithubSource.UpdateChangeset",
                      "newPage": false,
                      "searchKey": "sources.GithubSource.UpdateChangeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) UpdateChangeset(ctx context.Context, c *Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) UpdateChangeset(ctx context.Context, c *Changeset) error\n```\n\nUpdateChangeset updates the given *Changeset in the code host. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GithubSource.ValidateAuthenticator",
                    "documentation": {
                      "identifier": "GithubSource.ValidateAuthenticator",
                      "newPage": false,
                      "searchKey": "sources.GithubSource.ValidateAuthenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) ValidateAuthenticator(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) ValidateAuthenticator(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GithubSource.WithAuthenticator",
                    "documentation": {
                      "identifier": "GithubSource.WithAuthenticator",
                      "newPage": false,
                      "searchKey": "sources.GithubSource.WithAuthenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) WithAuthenticator(a auth.Authenticator) (ChangesetSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) WithAuthenticator(a auth.Authenticator) (ChangesetSource, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#GithubSource.createChangeset",
                    "documentation": {
                      "identifier": "GithubSource.createChangeset",
                      "newPage": false,
                      "searchKey": "sources.GithubSource.createChangeset",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GithubSource) createChangeset(ctx context.Context, c *Changeset, prInput *github.CreatePullRequestInput) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GithubSource) createChangeset(ctx context.Context, c *Changeset, prInput *github.CreatePullRequestInput) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#Sourcer",
              "documentation": {
                "identifier": "Sourcer",
                "newPage": false,
                "searchKey": "sources.Sourcer",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Sourcer interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Sourcer interface {\n\tForChangeset(ctx context.Context, tx SourcerStore, ch *btypes.Changeset) (ChangesetSource, error)\n\tForRepo(ctx context.Context, tx SourcerStore, repo *types.Repo) (ChangesetSource, error)\n\tForExternalService(ctx context.Context, tx SourcerStore, opts store.GetExternalServiceIDsOpts) (ChangesetSource, error)\n}\n```\n\nSourcer exposes methods to get a ChangesetSource based on a changeset, repo or external service. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#NewFakeSourcer",
                    "documentation": {
                      "identifier": "NewFakeSourcer",
                      "newPage": false,
                      "searchKey": "sources.NewFakeSourcer",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewFakeSourcer(err error, source ChangesetSource) Sourcer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewFakeSourcer(err error, source ChangesetSource) Sourcer\n```\n\nNewFakeSourcer returns a new faked Sourcer to be used for testing Batch Changes. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#NewSourcer",
                    "documentation": {
                      "identifier": "NewSourcer",
                      "newPage": false,
                      "searchKey": "sources.NewSourcer",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewSourcer(cf *httpcli.Factory) Sourcer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewSourcer(cf *httpcli.Factory) Sourcer\n```\n\nNewSourcer returns a new Sourcer to be used in Batch Changes. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#SourcerStore",
              "documentation": {
                "identifier": "SourcerStore",
                "newPage": false,
                "searchKey": "sources.SourcerStore",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SourcerStore interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SourcerStore interface {\n\tDB() dbutil.DB\n\tGetSiteCredential(ctx context.Context, opts store.GetSiteCredentialOpts) (*btypes.SiteCredential, error)\n\tGetExternalServiceIDs(ctx context.Context, opts store.GetExternalServiceIDsOpts) ([]int64, error)\n\tRepos() *database.RepoStore\n\tExternalServices() *database.ExternalServiceStore\n\tUserCredentials() *database.UserCredentialsStore\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#UnsupportedAuthenticatorError",
              "documentation": {
                "identifier": "UnsupportedAuthenticatorError",
                "newPage": false,
                "searchKey": "sources.UnsupportedAuthenticatorError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnsupportedAuthenticatorError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnsupportedAuthenticatorError struct {\n\thave   string\n\tsource string\n}\n```\n\nUnsupportedAuthenticatorError is returned by WithAuthenticator if the authenticator isn't supported on that code host. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#newUnsupportedAuthenticatorError",
                    "documentation": {
                      "identifier": "newUnsupportedAuthenticatorError",
                      "newPage": false,
                      "searchKey": "sources.newUnsupportedAuthenticatorError",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newUnsupportedAuthenticatorError(source string, a auth.Authenticator) UnsupportedAuthenticatorError"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newUnsupportedAuthenticatorError(source string, a auth.Authenticator) UnsupportedAuthenticatorError\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#UnsupportedAuthenticatorError.Error",
                    "documentation": {
                      "identifier": "UnsupportedAuthenticatorError.Error",
                      "newPage": false,
                      "searchKey": "sources.UnsupportedAuthenticatorError.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e UnsupportedAuthenticatorError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e UnsupportedAuthenticatorError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#fakeSourcer",
              "documentation": {
                "identifier": "fakeSourcer",
                "newPage": false,
                "searchKey": "sources.fakeSourcer",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type fakeSourcer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fakeSourcer struct {\n\terr    error\n\tsource ChangesetSource\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#fakeSourcer.ForChangeset",
                    "documentation": {
                      "identifier": "fakeSourcer.ForChangeset",
                      "newPage": false,
                      "searchKey": "sources.fakeSourcer.ForChangeset",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *fakeSourcer) ForChangeset(ctx context.Context, tx SourcerStore, ch *btypes.Changeset) (ChangesetSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *fakeSourcer) ForChangeset(ctx context.Context, tx SourcerStore, ch *btypes.Changeset) (ChangesetSource, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#fakeSourcer.ForExternalService",
                    "documentation": {
                      "identifier": "fakeSourcer.ForExternalService",
                      "newPage": false,
                      "searchKey": "sources.fakeSourcer.ForExternalService",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *fakeSourcer) ForExternalService(ctx context.Context, tx SourcerStore, opts store.GetExternalServiceIDsOpts) (ChangesetSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *fakeSourcer) ForExternalService(ctx context.Context, tx SourcerStore, opts store.GetExternalServiceIDsOpts) (ChangesetSource, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#fakeSourcer.ForRepo",
                    "documentation": {
                      "identifier": "fakeSourcer.ForRepo",
                      "newPage": false,
                      "searchKey": "sources.fakeSourcer.ForRepo",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *fakeSourcer) ForRepo(ctx context.Context, tx SourcerStore, repo *types.Repo) (ChangesetSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *fakeSourcer) ForRepo(ctx context.Context, tx SourcerStore, repo *types.Repo) (ChangesetSource, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#gitLabChangesetSourceTestProvider",
              "documentation": {
                "identifier": "gitLabChangesetSourceTestProvider",
                "newPage": false,
                "searchKey": "sources.gitLabChangesetSourceTestProvider",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type gitLabChangesetSourceTestProvider struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gitLabChangesetSourceTestProvider struct {\n\tchangeset *Changeset\n\tctx       context.Context\n\tmr        *gitlab.MergeRequest\n\tsource    *GitLabSource\n\tt         *testing.T\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#newGitLabChangesetSourceTestProvider",
                    "documentation": {
                      "identifier": "newGitLabChangesetSourceTestProvider",
                      "newPage": false,
                      "searchKey": "sources.newGitLabChangesetSourceTestProvider",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newGitLabChangesetSourceTestProvider(t *testing.T) *gitLabChangesetSourceTestProvider"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newGitLabChangesetSourceTestProvider(t *testing.T) *gitLabChangesetSourceTestProvider\n```\n\nnewGitLabChangesetSourceTestProvider provides a set of useful pre-canned objects, along with a handful of methods to mock underlying internal/extsvc/gitlab functions. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#gitLabChangesetSourceTestProvider.mockCreateComment",
                    "documentation": {
                      "identifier": "gitLabChangesetSourceTestProvider.mockCreateComment",
                      "newPage": false,
                      "searchKey": "sources.gitLabChangesetSourceTestProvider.mockCreateComment",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *gitLabChangesetSourceTestProvider) mockCreateComment(expected string, mr *gitlab.MergeRequest, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *gitLabChangesetSourceTestProvider) mockCreateComment(expected string, mr *gitlab.MergeRequest, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#gitLabChangesetSourceTestProvider.mockCreateMergeRequest",
                    "documentation": {
                      "identifier": "gitLabChangesetSourceTestProvider.mockCreateMergeRequest",
                      "newPage": false,
                      "searchKey": "sources.gitLabChangesetSourceTestProvider.mockCreateMergeRequest",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *gitLabChangesetSourceTestProvider) mockCreateMergeRequest(expected gitlab.CreateMergeRequestOpts, mr *gitlab.MergeRequest, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *gitLabChangesetSourceTestProvider) mockCreateMergeRequest(expected gitlab.CreateMergeRequestOpts, mr *gitlab.MergeRequest, err error)\n```\n\nmockCreateMergeRequest mocks a gitlab.CreateMergeRequest call. Note that only the SourceBranch and TargetBranch fields of the expected options are checked. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#gitLabChangesetSourceTestProvider.mockGetMergeRequest",
                    "documentation": {
                      "identifier": "gitLabChangesetSourceTestProvider.mockGetMergeRequest",
                      "newPage": false,
                      "searchKey": "sources.gitLabChangesetSourceTestProvider.mockGetMergeRequest",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *gitLabChangesetSourceTestProvider) mockGetMergeRequest(expected gitlab.ID, mr *gitlab.MergeRequest, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *gitLabChangesetSourceTestProvider) mockGetMergeRequest(expected gitlab.ID, mr *gitlab.MergeRequest, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#gitLabChangesetSourceTestProvider.mockGetMergeRequestNotes",
                    "documentation": {
                      "identifier": "gitLabChangesetSourceTestProvider.mockGetMergeRequestNotes",
                      "newPage": false,
                      "searchKey": "sources.gitLabChangesetSourceTestProvider.mockGetMergeRequestNotes",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *gitLabChangesetSourceTestProvider) mockGetMergeRequestNotes(expectedIID gitlab.ID, notes []*gitlab.Note, pageSize int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *gitLabChangesetSourceTestProvider) mockGetMergeRequestNotes(expectedIID gitlab.ID, notes []*gitlab.Note, pageSize int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#gitLabChangesetSourceTestProvider.mockGetMergeRequestPipelines",
                    "documentation": {
                      "identifier": "gitLabChangesetSourceTestProvider.mockGetMergeRequestPipelines",
                      "newPage": false,
                      "searchKey": "sources.gitLabChangesetSourceTestProvider.mockGetMergeRequestPipelines",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *gitLabChangesetSourceTestProvider) mockGetMergeRequestPipelines(expectedIID gitlab.ID, pipelines []*gitlab.Pipeline, pageSize int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *gitLabChangesetSourceTestProvider) mockGetMergeRequestPipelines(expectedIID gitlab.ID, pipelines []*gitlab.Pipeline, pageSize int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#gitLabChangesetSourceTestProvider.mockGetMergeRequestResourceStateEvents",
                    "documentation": {
                      "identifier": "gitLabChangesetSourceTestProvider.mockGetMergeRequestResourceStateEvents",
                      "newPage": false,
                      "searchKey": "sources.gitLabChangesetSourceTestProvider.mockGetMergeRequestResourceStateEvents",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *gitLabChangesetSourceTestProvider) mockGetMergeRequestResourceStateEvents(expectedIID gitlab.ID, events []*gitlab.ResourceStateEvent, pageSize int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *gitLabChangesetSourceTestProvider) mockGetMergeRequestResourceStateEvents(expectedIID gitlab.ID, events []*gitlab.ResourceStateEvent, pageSize int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#gitLabChangesetSourceTestProvider.mockGetOpenMergeRequestByRefs",
                    "documentation": {
                      "identifier": "gitLabChangesetSourceTestProvider.mockGetOpenMergeRequestByRefs",
                      "newPage": false,
                      "searchKey": "sources.gitLabChangesetSourceTestProvider.mockGetOpenMergeRequestByRefs",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *gitLabChangesetSourceTestProvider) mockGetOpenMergeRequestByRefs(mr *gitlab.MergeRequest, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *gitLabChangesetSourceTestProvider) mockGetOpenMergeRequestByRefs(mr *gitlab.MergeRequest, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#gitLabChangesetSourceTestProvider.mockUpdateMergeRequest",
                    "documentation": {
                      "identifier": "gitLabChangesetSourceTestProvider.mockUpdateMergeRequest",
                      "newPage": false,
                      "searchKey": "sources.gitLabChangesetSourceTestProvider.mockUpdateMergeRequest",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *gitLabChangesetSourceTestProvider) mockUpdateMergeRequest(expectedMR, updated *gitlab.MergeRequest, expectedStateEvent gitlab.UpdateMergeRequestStateEvent, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *gitLabChangesetSourceTestProvider) mockUpdateMergeRequest(expectedMR, updated *gitlab.MergeRequest, expectedStateEvent gitlab.UpdateMergeRequestStateEvent, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#gitLabChangesetSourceTestProvider.testCommonParams",
                    "documentation": {
                      "identifier": "gitLabChangesetSourceTestProvider.testCommonParams",
                      "newPage": false,
                      "searchKey": "sources.gitLabChangesetSourceTestProvider.testCommonParams",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *gitLabChangesetSourceTestProvider) testCommonParams(ctx context.Context, client *gitlab.Client, project *gitlab.Project)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *gitLabChangesetSourceTestProvider) testCommonParams(ctx context.Context, client *gitlab.Client, project *gitlab.Project)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#gitLabChangesetSourceTestProvider.unmock",
                    "documentation": {
                      "identifier": "gitLabChangesetSourceTestProvider.unmock",
                      "newPage": false,
                      "searchKey": "sources.gitLabChangesetSourceTestProvider.unmock",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *gitLabChangesetSourceTestProvider) unmock()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *gitLabChangesetSourceTestProvider) unmock()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#panicDoer",
              "documentation": {
                "identifier": "panicDoer",
                "newPage": false,
                "searchKey": "sources.panicDoer",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type panicDoer struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype panicDoer struct{}\n```\n\npanicDoer provides a httpcli.Doer implementation that panics if any attempt is made to issue a HTTP request; thereby ensuring that our unit tests don't actually try to talk to GitLab. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#panicDoer.Do",
                    "documentation": {
                      "identifier": "panicDoer.Do",
                      "newPage": false,
                      "searchKey": "sources.panicDoer.Do",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *panicDoer) Do(r *http.Request) (*http.Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *panicDoer) Do(r *http.Request) (*http.Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#sourcer",
              "documentation": {
                "identifier": "sourcer",
                "newPage": false,
                "searchKey": "sources.sourcer",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type sourcer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sourcer struct {\n\tcf *httpcli.Factory\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#sourcer.ForChangeset",
                    "documentation": {
                      "identifier": "sourcer.ForChangeset",
                      "newPage": false,
                      "searchKey": "sources.sourcer.ForChangeset",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *sourcer) ForChangeset(ctx context.Context, tx SourcerStore, ch *btypes.Changeset) (ChangesetSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *sourcer) ForChangeset(ctx context.Context, tx SourcerStore, ch *btypes.Changeset) (ChangesetSource, error)\n```\n\nForChangeset returns a ChangesetSource for the given changeset. The changeset.RepoID is used to find the matching code host. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#sourcer.ForExternalService",
                    "documentation": {
                      "identifier": "sourcer.ForExternalService",
                      "newPage": false,
                      "searchKey": "sources.sourcer.ForExternalService",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *sourcer) ForExternalService(ctx context.Context, tx SourcerStore, opts store.GetExternalServiceIDsOpts) (ChangesetSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *sourcer) ForExternalService(ctx context.Context, tx SourcerStore, opts store.GetExternalServiceIDsOpts) (ChangesetSource, error)\n```\n\nForExternalService returns a ChangesetSource based on the provided external service opts. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#sourcer.ForRepo",
                    "documentation": {
                      "identifier": "sourcer.ForRepo",
                      "newPage": false,
                      "searchKey": "sources.sourcer.ForRepo",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *sourcer) ForRepo(ctx context.Context, tx SourcerStore, repo *types.Repo) (ChangesetSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *sourcer) ForRepo(ctx context.Context, tx SourcerStore, repo *types.Repo) (ChangesetSource, error)\n```\n\nForRepo returns a ChangesetSource for the given repo. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/sources#sourcer.loadBatchesSource",
                    "documentation": {
                      "identifier": "sourcer.loadBatchesSource",
                      "newPage": false,
                      "searchKey": "sources.sourcer.loadBatchesSource",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *sourcer) loadBatchesSource(ctx context.Context, tx SourcerStore, externalServiceIDs []int64) (ChangesetSource, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *sourcer) loadBatchesSource(ctx context.Context, tx SourcerStore, externalServiceIDs []int64) (ChangesetSource, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/batches/sources#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestBitbucketServerSource_CloseChangeset",
              "documentation": {
                "identifier": "TestBitbucketServerSource_CloseChangeset",
                "newPage": false,
                "searchKey": "sources.TestBitbucketServerSource_CloseChangeset",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBitbucketServerSource_CloseChangeset(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBitbucketServerSource_CloseChangeset(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestBitbucketServerSource_CreateChangeset",
              "documentation": {
                "identifier": "TestBitbucketServerSource_CreateChangeset",
                "newPage": false,
                "searchKey": "sources.TestBitbucketServerSource_CreateChangeset",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBitbucketServerSource_CreateChangeset(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBitbucketServerSource_CreateChangeset(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestBitbucketServerSource_CreateComment",
              "documentation": {
                "identifier": "TestBitbucketServerSource_CreateComment",
                "newPage": false,
                "searchKey": "sources.TestBitbucketServerSource_CreateComment",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBitbucketServerSource_CreateComment(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBitbucketServerSource_CreateComment(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestBitbucketServerSource_LoadChangeset",
              "documentation": {
                "identifier": "TestBitbucketServerSource_LoadChangeset",
                "newPage": false,
                "searchKey": "sources.TestBitbucketServerSource_LoadChangeset",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBitbucketServerSource_LoadChangeset(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBitbucketServerSource_LoadChangeset(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestBitbucketServerSource_ReopenChangeset",
              "documentation": {
                "identifier": "TestBitbucketServerSource_ReopenChangeset",
                "newPage": false,
                "searchKey": "sources.TestBitbucketServerSource_ReopenChangeset",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBitbucketServerSource_ReopenChangeset(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBitbucketServerSource_ReopenChangeset(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestBitbucketServerSource_UpdateChangeset",
              "documentation": {
                "identifier": "TestBitbucketServerSource_UpdateChangeset",
                "newPage": false,
                "searchKey": "sources.TestBitbucketServerSource_UpdateChangeset",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBitbucketServerSource_UpdateChangeset(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBitbucketServerSource_UpdateChangeset(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestBitbucketServerSource_WithAuthenticator",
              "documentation": {
                "identifier": "TestBitbucketServerSource_WithAuthenticator",
                "newPage": false,
                "searchKey": "sources.TestBitbucketServerSource_WithAuthenticator",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBitbucketServerSource_WithAuthenticator(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBitbucketServerSource_WithAuthenticator(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestExtractCloneURL",
              "documentation": {
                "identifier": "TestExtractCloneURL",
                "newPage": false,
                "searchKey": "sources.TestExtractCloneURL",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExtractCloneURL(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExtractCloneURL(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestGitLabSource_ChangesetSource",
              "documentation": {
                "identifier": "TestGitLabSource_ChangesetSource",
                "newPage": false,
                "searchKey": "sources.TestGitLabSource_ChangesetSource",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGitLabSource_ChangesetSource(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGitLabSource_ChangesetSource(t *testing.T)\n```\n\nTestGitLabSource_ChangesetSource tests the various Changeset functions that implement the ChangesetSource interface. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestGitLabSource_WithAuthenticator",
              "documentation": {
                "identifier": "TestGitLabSource_WithAuthenticator",
                "newPage": false,
                "searchKey": "sources.TestGitLabSource_WithAuthenticator",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGitLabSource_WithAuthenticator(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGitLabSource_WithAuthenticator(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestGithubSource_CloseChangeset",
              "documentation": {
                "identifier": "TestGithubSource_CloseChangeset",
                "newPage": false,
                "searchKey": "sources.TestGithubSource_CloseChangeset",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGithubSource_CloseChangeset(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGithubSource_CloseChangeset(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestGithubSource_CreateChangeset",
              "documentation": {
                "identifier": "TestGithubSource_CreateChangeset",
                "newPage": false,
                "searchKey": "sources.TestGithubSource_CreateChangeset",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGithubSource_CreateChangeset(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGithubSource_CreateChangeset(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestGithubSource_CreateComment",
              "documentation": {
                "identifier": "TestGithubSource_CreateComment",
                "newPage": false,
                "searchKey": "sources.TestGithubSource_CreateComment",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGithubSource_CreateComment(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGithubSource_CreateComment(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestGithubSource_LoadChangeset",
              "documentation": {
                "identifier": "TestGithubSource_LoadChangeset",
                "newPage": false,
                "searchKey": "sources.TestGithubSource_LoadChangeset",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGithubSource_LoadChangeset(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGithubSource_LoadChangeset(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestGithubSource_ReopenChangeset",
              "documentation": {
                "identifier": "TestGithubSource_ReopenChangeset",
                "newPage": false,
                "searchKey": "sources.TestGithubSource_ReopenChangeset",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGithubSource_ReopenChangeset(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGithubSource_ReopenChangeset(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestGithubSource_UpdateChangeset",
              "documentation": {
                "identifier": "TestGithubSource_UpdateChangeset",
                "newPage": false,
                "searchKey": "sources.TestGithubSource_UpdateChangeset",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGithubSource_UpdateChangeset(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGithubSource_UpdateChangeset(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestGithubSource_WithAuthenticator",
              "documentation": {
                "identifier": "TestGithubSource_WithAuthenticator",
                "newPage": false,
                "searchKey": "sources.TestGithubSource_WithAuthenticator",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGithubSource_WithAuthenticator(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGithubSource_WithAuthenticator(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestGitserverPushConfig",
              "documentation": {
                "identifier": "TestGitserverPushConfig",
                "newPage": false,
                "searchKey": "sources.TestGitserverPushConfig",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGitserverPushConfig(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGitserverPushConfig(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestLoadExternalService",
              "documentation": {
                "identifier": "TestLoadExternalService",
                "newPage": false,
                "searchKey": "sources.TestLoadExternalService",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLoadExternalService(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLoadExternalService(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestMain",
              "documentation": {
                "identifier": "TestMain",
                "newPage": false,
                "searchKey": "sources.TestMain",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMain(m *testing.M)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMain(m *testing.M)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestReadNotesUntilSeen",
              "documentation": {
                "identifier": "TestReadNotesUntilSeen",
                "newPage": false,
                "searchKey": "sources.TestReadNotesUntilSeen",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadNotesUntilSeen(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadNotesUntilSeen(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#TestReadPipelinesUntilSeen",
              "documentation": {
                "identifier": "TestReadPipelinesUntilSeen",
                "newPage": false,
                "searchKey": "sources.TestReadPipelinesUntilSeen",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadPipelinesUntilSeen(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadPipelinesUntilSeen(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#buildCreatePullRequestInput",
              "documentation": {
                "identifier": "buildCreatePullRequestInput",
                "newPage": false,
                "searchKey": "sources.buildCreatePullRequestInput",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func buildCreatePullRequestInput(c *Changeset) *github.CreatePullRequestInput"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc buildCreatePullRequestInput(c *Changeset) *github.CreatePullRequestInput\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#extractCloneURL",
              "documentation": {
                "identifier": "extractCloneURL",
                "newPage": false,
                "searchKey": "sources.extractCloneURL",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func extractCloneURL(ctx context.Context, s *database.ExternalServiceStore, repo *types.Repo) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc extractCloneURL(ctx context.Context, s *database.ExternalServiceStore, repo *types.Repo) (string, error)\n```\n\nextractCloneURL returns a remote URL from the repo, preferring HTTPS over SSH. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#gitserverPushConfig",
              "documentation": {
                "identifier": "gitserverPushConfig",
                "newPage": false,
                "searchKey": "sources.gitserverPushConfig",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func gitserverPushConfig(ctx context.Context, store *database.ExternalServiceStore, repo *types.Repo, au auth.Authenticator) (*protocol.PushConfig, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc gitserverPushConfig(ctx context.Context, store *database.ExternalServiceStore, repo *types.Repo, au auth.Authenticator) (*protocol.PushConfig, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#gitserverRedirectMiddleware",
              "documentation": {
                "identifier": "gitserverRedirectMiddleware",
                "newPage": false,
                "searchKey": "sources.gitserverRedirectMiddleware",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func gitserverRedirectMiddleware(cli httpcli.Doer) httpcli.Doer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc gitserverRedirectMiddleware(cli httpcli.Doer) httpcli.Doer\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#loadExternalService",
              "documentation": {
                "identifier": "loadExternalService",
                "newPage": false,
                "searchKey": "sources.loadExternalService",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func loadExternalService(ctx context.Context, s *database.ExternalServiceStore, opts database.ExternalServicesListOptions) (*types.ExternalService, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc loadExternalService(ctx context.Context, s *database.ExternalServiceStore, opts database.ExternalServicesListOptions) (*types.ExternalService, error)\n```\n\nloadExternalService looks up all external services that are connected to the given repo. The first external service to have a token configured will be returned then. If no external service matching the above criteria is found, an error is returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#loadSiteCredential",
              "documentation": {
                "identifier": "loadSiteCredential",
                "newPage": false,
                "searchKey": "sources.loadSiteCredential",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func loadSiteCredential(ctx context.Context, s SourcerStore, repo *types.Repo) (auth.Authenticator, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc loadSiteCredential(ctx context.Context, s SourcerStore, repo *types.Repo) (auth.Authenticator, error)\n```\n\nloadSiteCredential attempts to find a site credential for the given repo. When no credential is found, nil is returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#loadUserCredential",
              "documentation": {
                "identifier": "loadUserCredential",
                "newPage": false,
                "searchKey": "sources.loadUserCredential",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func loadUserCredential(ctx context.Context, s SourcerStore, userID int32, repo *types.Repo) (auth.Authenticator, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc loadUserCredential(ctx context.Context, s SourcerStore, userID int32, repo *types.Repo) (auth.Authenticator, error)\n```\n\nloadUserCredential attempts to find a user credential for the given repo. When no credential is found, nil is returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#marshalJSON",
              "documentation": {
                "identifier": "marshalJSON",
                "newPage": false,
                "searchKey": "sources.marshalJSON",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalJSON(t testing.TB, v interface{}) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalJSON(t testing.TB, v interface{}) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#newClientFactory",
              "documentation": {
                "identifier": "newClientFactory",
                "newPage": false,
                "searchKey": "sources.newClientFactory",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newClientFactory(t testing.TB, name string, mws ...httpcli.Middleware) (*httpcli.Factory, func(testing.TB))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newClientFactory(t testing.TB, name string, mws ...httpcli.Middleware) (*httpcli.Factory, func(testing.TB))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#newRecorder",
              "documentation": {
                "identifier": "newRecorder",
                "newPage": false,
                "searchKey": "sources.newRecorder",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newRecorder(t testing.TB, file string, record bool) *recorder.Recorder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newRecorder(t testing.TB, file string, record bool) *recorder.Recorder\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#paginatedNoteIterator",
              "documentation": {
                "identifier": "paginatedNoteIterator",
                "newPage": false,
                "searchKey": "sources.paginatedNoteIterator",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func paginatedNoteIterator(notes []*gitlab.Note, pageSize int) func() ([]*gitlab.Note, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc paginatedNoteIterator(notes []*gitlab.Note, pageSize int) func() ([]*gitlab.Note, error)\n```\n\npaginatedNoteIterator essentially fakes the pagination behaviour implemented by gitlab.GetMergeRequestNotes with a canned notes list. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#paginatedPipelineIterator",
              "documentation": {
                "identifier": "paginatedPipelineIterator",
                "newPage": false,
                "searchKey": "sources.paginatedPipelineIterator",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func paginatedPipelineIterator(pipelines []*gitlab.Pipeline, pageSize int) func() ([]*gitlab.Pipeline, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc paginatedPipelineIterator(pipelines []*gitlab.Pipeline, pageSize int) func() ([]*gitlab.Pipeline, error)\n```\n\npaginatedPipelineIterator essentially fakes the pagination behaviour implemented by gitlab.GetMergeRequestPipelines with a canned pipelines list. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#paginatedResourceStateEventIterator",
              "documentation": {
                "identifier": "paginatedResourceStateEventIterator",
                "newPage": false,
                "searchKey": "sources.paginatedResourceStateEventIterator",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func paginatedResourceStateEventIterator(events []*gitlab.ResourceStateEvent, pageSize int) func() ([]*gitlab.ResourceStateEvent, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc paginatedResourceStateEventIterator(events []*gitlab.ResourceStateEvent, pageSize int) func() ([]*gitlab.ResourceStateEvent, error)\n```\n\npaginatedResourceStateEventIterator essentially fakes the pagination behaviour implemented by gitlab.GetMergeRequestResourceStateEvents with a canned resource state events list. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#readMergeRequestResourceStateEvents",
              "documentation": {
                "identifier": "readMergeRequestResourceStateEvents",
                "newPage": false,
                "searchKey": "sources.readMergeRequestResourceStateEvents",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readMergeRequestResourceStateEvents(it func() ([]*gitlab.ResourceStateEvent, error)) ([]*gitlab.ResourceStateEvent, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readMergeRequestResourceStateEvents(it func() ([]*gitlab.ResourceStateEvent, error)) ([]*gitlab.ResourceStateEvent, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#readPipelines",
              "documentation": {
                "identifier": "readPipelines",
                "newPage": false,
                "searchKey": "sources.readPipelines",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readPipelines(it func() ([]*gitlab.Pipeline, error)) ([]*gitlab.Pipeline, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readPipelines(it func() ([]*gitlab.Pipeline, error)) ([]*gitlab.Pipeline, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#readSystemNotes",
              "documentation": {
                "identifier": "readSystemNotes",
                "newPage": false,
                "searchKey": "sources.readSystemNotes",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readSystemNotes(it func() ([]*gitlab.Note, error)) ([]*gitlab.Note, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readSystemNotes(it func() ([]*gitlab.Note, error)) ([]*gitlab.Note, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#save",
              "documentation": {
                "identifier": "save",
                "newPage": false,
                "searchKey": "sources.save",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func save(t testing.TB, rec *recorder.Recorder)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc save(t testing.TB, rec *recorder.Recorder)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#setBasicAuth",
              "documentation": {
                "identifier": "setBasicAuth",
                "newPage": false,
                "searchKey": "sources.setBasicAuth",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func setBasicAuth(u *vcs.URL, extSvcType, username, password string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc setBasicAuth(u *vcs.URL, extSvcType, username, password string) error\n```\n\nsetBasicAuth sets the user part of the given URL to use the provided username/ password combination, with the specific quirks per code host. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#setOAuthTokenAuth",
              "documentation": {
                "identifier": "setOAuthTokenAuth",
                "newPage": false,
                "searchKey": "sources.setOAuthTokenAuth",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func setOAuthTokenAuth(u *vcs.URL, extSvcType, token string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc setOAuthTokenAuth(u *vcs.URL, extSvcType, token string) error\n```\n\nsetOAuthTokenAuth sets the user part of the given URL to use the provided OAuth token, with the specific quirks per code host. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/sources#update",
              "documentation": {
                "identifier": "update",
                "newPage": false,
                "searchKey": "sources.update",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func update(name string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc update(name string) bool\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
