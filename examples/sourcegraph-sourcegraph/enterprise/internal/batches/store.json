{
  "pathID": "/enterprise/internal/batches/store",
  "documentation": {
    "identifier": "store",
    "newPage": true,
    "searchKey": "enterprise/internal/batches/store",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package store"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/internal/batches/store#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#batchSpecInsertColsFmt",
              "documentation": {
                "identifier": "batchSpecInsertColsFmt",
                "newPage": false,
                "searchKey": "store.batchSpecInsertColsFmt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const batchSpecInsertColsFmt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst batchSpecInsertColsFmt = `(%s, %s, %s, %s, %s, %s, %s, %s)`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getNewestBatchSpecQueryFmtstr",
              "documentation": {
                "identifier": "getNewestBatchSpecQueryFmtstr",
                "newPage": false,
                "searchKey": "store.getNewestBatchSpecQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const getNewestBatchSpecQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst getNewestBatchSpecQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#changesetEventsBatchQueryPrefix",
              "documentation": {
                "identifier": "changesetEventsBatchQueryPrefix",
                "newPage": false,
                "searchKey": "store.changesetEventsBatchQueryPrefix",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const changesetEventsBatchQueryPrefix"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst changesetEventsBatchQueryPrefix = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#batchChangesetEventsQuerySuffix",
              "documentation": {
                "identifier": "batchChangesetEventsQuerySuffix",
                "newPage": false,
                "searchKey": "store.batchChangesetEventsQuerySuffix",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const batchChangesetEventsQuerySuffix"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst batchChangesetEventsQuerySuffix = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listChangesetSyncDataQueryFmtstr",
              "documentation": {
                "identifier": "listChangesetSyncDataQueryFmtstr",
                "newPage": false,
                "searchKey": "store.listChangesetSyncDataQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const listChangesetSyncDataQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst listChangesetSyncDataQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#cancelQueuedBatchChangeChangesetsFmtstr",
              "documentation": {
                "identifier": "cancelQueuedBatchChangeChangesetsFmtstr",
                "newPage": false,
                "searchKey": "store.cancelQueuedBatchChangeChangesetsFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const cancelQueuedBatchChangeChangesetsFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst cancelQueuedBatchChangeChangesetsFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#enqueueChangesetsToCloseFmtstr",
              "documentation": {
                "identifier": "enqueueChangesetsToCloseFmtstr",
                "newPage": false,
                "searchKey": "store.enqueueChangesetsToCloseFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const enqueueChangesetsToCloseFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst enqueueChangesetsToCloseFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getChangesetStatsFmtstr",
              "documentation": {
                "identifier": "getChangesetStatsFmtstr",
                "newPage": false,
                "searchKey": "store.getChangesetStatsFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const getChangesetStatsFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst getChangesetStatsFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#enqueueNextScheduledChangesetFmtstr",
              "documentation": {
                "identifier": "enqueueNextScheduledChangesetFmtstr",
                "newPage": false,
                "searchKey": "store.enqueueNextScheduledChangesetFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const enqueueNextScheduledChangesetFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst enqueueNextScheduledChangesetFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getChangesetPlaceInSchedulerQueueFmtstr",
              "documentation": {
                "identifier": "getChangesetPlaceInSchedulerQueueFmtstr",
                "newPage": false,
                "searchKey": "store.getChangesetPlaceInSchedulerQueueFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const getChangesetPlaceInSchedulerQueueFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst getChangesetPlaceInSchedulerQueueFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getExternalServiceIDsQueryFmtstr",
              "documentation": {
                "identifier": "getExternalServiceIDsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.getExternalServiceIDsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const getExternalServiceIDsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst getExternalServiceIDsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#updateSiteCredentialQueryFmtstr",
              "documentation": {
                "identifier": "updateSiteCredentialQueryFmtstr",
                "newPage": false,
                "searchKey": "store.updateSiteCredentialQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const updateSiteCredentialQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst updateSiteCredentialQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/batches/store#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#batchChangeColumns",
              "documentation": {
                "identifier": "batchChangeColumns",
                "newPage": false,
                "searchKey": "store.batchChangeColumns",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var batchChangeColumns"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar batchChangeColumns = ...\n```\n\nbatchChangeColumns are used by the batch change related Store methods to insert, update and query batches. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#batchChangeInsertColumns",
              "documentation": {
                "identifier": "batchChangeInsertColumns",
                "newPage": false,
                "searchKey": "store.batchChangeInsertColumns",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var batchChangeInsertColumns"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar batchChangeInsertColumns = ...\n```\n\nbatchChangeInsertColumns is the list of batch changes columns that are modified in CreateBatchChange and UpdateBatchChange. update and query batches. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#createBatchChangeQueryFmtstr",
              "documentation": {
                "identifier": "createBatchChangeQueryFmtstr",
                "newPage": false,
                "searchKey": "store.createBatchChangeQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var createBatchChangeQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar createBatchChangeQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#updateBatchChangeQueryFmtstr",
              "documentation": {
                "identifier": "updateBatchChangeQueryFmtstr",
                "newPage": false,
                "searchKey": "store.updateBatchChangeQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var updateBatchChangeQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar updateBatchChangeQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#deleteBatchChangeQueryFmtstr",
              "documentation": {
                "identifier": "deleteBatchChangeQueryFmtstr",
                "newPage": false,
                "searchKey": "store.deleteBatchChangeQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var deleteBatchChangeQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar deleteBatchChangeQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#countBatchChangesQueryFmtstr",
              "documentation": {
                "identifier": "countBatchChangesQueryFmtstr",
                "newPage": false,
                "searchKey": "store.countBatchChangesQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var countBatchChangesQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar countBatchChangesQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getBatchChangesQueryFmtstr",
              "documentation": {
                "identifier": "getBatchChangesQueryFmtstr",
                "newPage": false,
                "searchKey": "store.getBatchChangesQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var getBatchChangesQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar getBatchChangesQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getBatchChangeDiffStatQueryFmtstr",
              "documentation": {
                "identifier": "getBatchChangeDiffStatQueryFmtstr",
                "newPage": false,
                "searchKey": "store.getBatchChangeDiffStatQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var getBatchChangeDiffStatQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar getBatchChangeDiffStatQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listBatchChangesQueryFmtstr",
              "documentation": {
                "identifier": "listBatchChangesQueryFmtstr",
                "newPage": false,
                "searchKey": "store.listBatchChangesQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var listBatchChangesQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar listBatchChangesQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#batchSpecColumns",
              "documentation": {
                "identifier": "batchSpecColumns",
                "newPage": false,
                "searchKey": "store.batchSpecColumns",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var batchSpecColumns"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar batchSpecColumns = ...\n```\n\nbatchSpecColumns are used by the batchSpec related Store methods to insert, update and query batch specs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#batchSpecInsertColumns",
              "documentation": {
                "identifier": "batchSpecInsertColumns",
                "newPage": false,
                "searchKey": "store.batchSpecInsertColumns",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var batchSpecInsertColumns"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar batchSpecInsertColumns = ...\n```\n\nbatchSpecInsertColumns is the list of batch_specs columns that are modified when updating/inserting batch specs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#createBatchSpecQueryFmtstr",
              "documentation": {
                "identifier": "createBatchSpecQueryFmtstr",
                "newPage": false,
                "searchKey": "store.createBatchSpecQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var createBatchSpecQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar createBatchSpecQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#updateBatchSpecQueryFmtstr",
              "documentation": {
                "identifier": "updateBatchSpecQueryFmtstr",
                "newPage": false,
                "searchKey": "store.updateBatchSpecQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var updateBatchSpecQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar updateBatchSpecQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#deleteBatchSpecQueryFmtstr",
              "documentation": {
                "identifier": "deleteBatchSpecQueryFmtstr",
                "newPage": false,
                "searchKey": "store.deleteBatchSpecQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var deleteBatchSpecQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar deleteBatchSpecQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#countBatchSpecsQueryFmtstr",
              "documentation": {
                "identifier": "countBatchSpecsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.countBatchSpecsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var countBatchSpecsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar countBatchSpecsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getBatchSpecsQueryFmtstr",
              "documentation": {
                "identifier": "getBatchSpecsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.getBatchSpecsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var getBatchSpecsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar getBatchSpecsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listBatchSpecsQueryFmtstr",
              "documentation": {
                "identifier": "listBatchSpecsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.listBatchSpecsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var listBatchSpecsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar listBatchSpecsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#deleteExpiredBatchSpecsQueryFmtstr",
              "documentation": {
                "identifier": "deleteExpiredBatchSpecsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.deleteExpiredBatchSpecsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var deleteExpiredBatchSpecsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar deleteExpiredBatchSpecsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#bulkOperationColumns",
              "documentation": {
                "identifier": "bulkOperationColumns",
                "newPage": false,
                "searchKey": "store.bulkOperationColumns",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var bulkOperationColumns"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bulkOperationColumns = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getBulkOperationQueryFmtstr",
              "documentation": {
                "identifier": "getBulkOperationQueryFmtstr",
                "newPage": false,
                "searchKey": "store.getBulkOperationQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var getBulkOperationQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar getBulkOperationQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listBulkOperationsQueryFmtstr",
              "documentation": {
                "identifier": "listBulkOperationsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.listBulkOperationsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var listBulkOperationsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar listBulkOperationsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#countBulkOperationsQueryFmtstr",
              "documentation": {
                "identifier": "countBulkOperationsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.countBulkOperationsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var countBulkOperationsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar countBulkOperationsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listBulkOperationErrorsQueryFmtstr",
              "documentation": {
                "identifier": "listBulkOperationErrorsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.listBulkOperationErrorsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var listBulkOperationErrorsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar listBulkOperationErrorsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getChangesetEventsQueryFmtstr",
              "documentation": {
                "identifier": "getChangesetEventsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.getChangesetEventsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var getChangesetEventsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar getChangesetEventsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listChangesetEventsQueryFmtstr",
              "documentation": {
                "identifier": "listChangesetEventsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.listChangesetEventsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var listChangesetEventsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar listChangesetEventsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#countChangesetEventsQueryFmtstr",
              "documentation": {
                "identifier": "countChangesetEventsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.countChangesetEventsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var countChangesetEventsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar countChangesetEventsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#upsertChangesetEventsQueryFmtstr",
              "documentation": {
                "identifier": "upsertChangesetEventsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.upsertChangesetEventsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var upsertChangesetEventsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar upsertChangesetEventsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#changesetJobInsertColumns",
              "documentation": {
                "identifier": "changesetJobInsertColumns",
                "newPage": false,
                "searchKey": "store.changesetJobInsertColumns",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var changesetJobInsertColumns"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar changesetJobInsertColumns = ...\n```\n\nchangesetJobInsertColumns is the list of changeset_jobs columns that are modified in CreateChangesetJob. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#ChangesetJobColumns",
              "documentation": {
                "identifier": "ChangesetJobColumns",
                "newPage": false,
                "searchKey": "store.ChangesetJobColumns",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ChangesetJobColumns"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ChangesetJobColumns = ...\n```\n\nChangesetJobColumns are used by the changeset job related Store methods to query and create changeset jobs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getChangesetJobsQueryFmtstr",
              "documentation": {
                "identifier": "getChangesetJobsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.getChangesetJobsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var getChangesetJobsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar getChangesetJobsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#changesetSpecInsertColumns",
              "documentation": {
                "identifier": "changesetSpecInsertColumns",
                "newPage": false,
                "searchKey": "store.changesetSpecInsertColumns",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var changesetSpecInsertColumns"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar changesetSpecInsertColumns = ...\n```\n\nchangesetSpecInsertColumns is the list of changeset_specs columns that are modified when inserting or updating a changeset spec. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#changesetSpecColumns",
              "documentation": {
                "identifier": "changesetSpecColumns",
                "newPage": false,
                "searchKey": "store.changesetSpecColumns",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var changesetSpecColumns"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar changesetSpecColumns = ...\n```\n\nchangesetSpecColumns are used by the changeset spec related Store methods to insert, update and query changeset specs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#createChangesetSpecQueryFmtstr",
              "documentation": {
                "identifier": "createChangesetSpecQueryFmtstr",
                "newPage": false,
                "searchKey": "store.createChangesetSpecQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var createChangesetSpecQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar createChangesetSpecQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#updateChangesetSpecQueryFmtstr",
              "documentation": {
                "identifier": "updateChangesetSpecQueryFmtstr",
                "newPage": false,
                "searchKey": "store.updateChangesetSpecQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var updateChangesetSpecQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar updateChangesetSpecQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#deleteChangesetSpecQueryFmtstr",
              "documentation": {
                "identifier": "deleteChangesetSpecQueryFmtstr",
                "newPage": false,
                "searchKey": "store.deleteChangesetSpecQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var deleteChangesetSpecQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar deleteChangesetSpecQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#countChangesetSpecsQueryFmtstr",
              "documentation": {
                "identifier": "countChangesetSpecsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.countChangesetSpecsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var countChangesetSpecsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar countChangesetSpecsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getChangesetSpecsQueryFmtstr",
              "documentation": {
                "identifier": "getChangesetSpecsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.getChangesetSpecsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var getChangesetSpecsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar getChangesetSpecsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listChangesetSpecsQueryFmtstr",
              "documentation": {
                "identifier": "listChangesetSpecsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.listChangesetSpecsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var listChangesetSpecsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar listChangesetSpecsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#deleteExpiredChangesetSpecsQueryFmtstr",
              "documentation": {
                "identifier": "deleteExpiredChangesetSpecsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.deleteExpiredChangesetSpecsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var deleteExpiredChangesetSpecsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar deleteExpiredChangesetSpecsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getRewirerMappingsQueryFmtstr",
              "documentation": {
                "identifier": "getRewirerMappingsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.getRewirerMappingsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var getRewirerMappingsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar getRewirerMappingsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#ChangesetColumns",
              "documentation": {
                "identifier": "ChangesetColumns",
                "newPage": false,
                "searchKey": "store.ChangesetColumns",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ChangesetColumns"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ChangesetColumns = ...\n```\n\nChangesetColumns are used by by the changeset related Store methods and by workerutil.Worker to load changesets from the database for processing by the reconciler. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#changesetInsertColumns",
              "documentation": {
                "identifier": "changesetInsertColumns",
                "newPage": false,
                "searchKey": "store.changesetInsertColumns",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var changesetInsertColumns"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar changesetInsertColumns = ...\n```\n\nchangesetInsertColumns is the list of changeset columns that are modified in CreateChangeset and UpdateChangeset. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#createChangesetQueryFmtstr",
              "documentation": {
                "identifier": "createChangesetQueryFmtstr",
                "newPage": false,
                "searchKey": "store.createChangesetQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var createChangesetQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar createChangesetQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#deleteChangesetQueryFmtstr",
              "documentation": {
                "identifier": "deleteChangesetQueryFmtstr",
                "newPage": false,
                "searchKey": "store.deleteChangesetQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var deleteChangesetQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar deleteChangesetQueryFmtstr = `\nDELETE FROM changesets WHERE id = %s\n`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#countChangesetsQueryFmtstr",
              "documentation": {
                "identifier": "countChangesetsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.countChangesetsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var countChangesetsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar countChangesetsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getChangesetsQueryFmtstr",
              "documentation": {
                "identifier": "getChangesetsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.getChangesetsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var getChangesetsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar getChangesetsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listChangesetsQueryFmtstr",
              "documentation": {
                "identifier": "listChangesetsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.listChangesetsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var listChangesetsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar listChangesetsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#updateChangesetQueryFmtstr",
              "documentation": {
                "identifier": "updateChangesetQueryFmtstr",
                "newPage": false,
                "searchKey": "store.updateChangesetQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var updateChangesetQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar updateChangesetQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#CanceledChangesetFailureMessage",
              "documentation": {
                "identifier": "CanceledChangesetFailureMessage",
                "newPage": false,
                "searchKey": "store.CanceledChangesetFailureMessage",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var CanceledChangesetFailureMessage"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar CanceledChangesetFailureMessage = \"Canceled\"\n```\n\nCanceledChangesetFailureMessage is set on changesets as the FailureMessage by CancelQueuedBatchChangeChangesets which is called at the beginning of ApplyBatchChange to stop enqueued changesets being processed while we're applying the new batch spec. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listCodeHostsQueryFmtstr",
              "documentation": {
                "identifier": "listCodeHostsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.listCodeHostsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var listCodeHostsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar listCodeHostsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#createSiteCredentialQueryFmtstr",
              "documentation": {
                "identifier": "createSiteCredentialQueryFmtstr",
                "newPage": false,
                "searchKey": "store.createSiteCredentialQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var createSiteCredentialQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar createSiteCredentialQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#deleteSiteCredentialQueryFmtstr",
              "documentation": {
                "identifier": "deleteSiteCredentialQueryFmtstr",
                "newPage": false,
                "searchKey": "store.deleteSiteCredentialQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var deleteSiteCredentialQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar deleteSiteCredentialQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getSiteCredentialQueryFmtstr",
              "documentation": {
                "identifier": "getSiteCredentialQueryFmtstr",
                "newPage": false,
                "searchKey": "store.getSiteCredentialQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var getSiteCredentialQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar getSiteCredentialQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listSiteCredentialsQueryFmtstr",
              "documentation": {
                "identifier": "listSiteCredentialsQueryFmtstr",
                "newPage": false,
                "searchKey": "store.listSiteCredentialsQueryFmtstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var listSiteCredentialsQueryFmtstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar listSiteCredentialsQueryFmtstr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#siteCredentialColumns",
              "documentation": {
                "identifier": "siteCredentialColumns",
                "newPage": false,
                "searchKey": "store.siteCredentialColumns",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var siteCredentialColumns"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar siteCredentialColumns = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#seededRand",
              "documentation": {
                "identifier": "seededRand",
                "newPage": false,
                "searchKey": "store.seededRand",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var seededRand"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar seededRand = rand.New(rand.NewSource(timeutil.Now().UnixNano()))\n```\n\nseededRand is used in RandomID() to generate a \"random\" number. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#ErrNoResults",
              "documentation": {
                "identifier": "ErrNoResults",
                "newPage": false,
                "searchKey": "store.ErrNoResults",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrNoResults"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrNoResults = errors.New(\"no results\")\n```\n\nErrNoResults is returned by Store method calls that found no results. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#cmtRewirerMappingsOpts",
              "documentation": {
                "identifier": "cmtRewirerMappingsOpts",
                "newPage": false,
                "searchKey": "store.cmtRewirerMappingsOpts",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var cmtRewirerMappingsOpts"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar cmtRewirerMappingsOpts = ...\n```\n\nComparing the IDs is good enough, no need to bloat the tests here. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/batches/store#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#CountBatchChangesOpts",
              "documentation": {
                "identifier": "CountBatchChangesOpts",
                "newPage": false,
                "searchKey": "store.CountBatchChangesOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CountBatchChangesOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CountBatchChangesOpts struct {\n\tChangesetID int64\n\tState       btypes.BatchChangeState\n\n\tInitialApplierID int32\n\n\tNamespaceUserID int32\n\tNamespaceOrgID  int32\n}\n```\n\nCountBatchChangesOpts captures the query options needed for counting batches. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#GetBatchChangeOpts",
              "documentation": {
                "identifier": "GetBatchChangeOpts",
                "newPage": false,
                "searchKey": "store.GetBatchChangeOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GetBatchChangeOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GetBatchChangeOpts struct {\n\tID int64\n\n\tNamespaceUserID int32\n\tNamespaceOrgID  int32\n\n\tBatchSpecID int64\n\tName        string\n}\n```\n\nGetBatchChangeOpts captures the query options needed for getting a batch change \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#GetBatchChangeDiffStatOpts",
              "documentation": {
                "identifier": "GetBatchChangeDiffStatOpts",
                "newPage": false,
                "searchKey": "store.GetBatchChangeDiffStatOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GetBatchChangeDiffStatOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GetBatchChangeDiffStatOpts struct {\n\tBatchChangeID int64\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#ListBatchChangesOpts",
              "documentation": {
                "identifier": "ListBatchChangesOpts",
                "newPage": false,
                "searchKey": "store.ListBatchChangesOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListBatchChangesOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListBatchChangesOpts struct {\n\tLimitOpts\n\tChangesetID int64\n\tCursor      int64\n\tState       btypes.BatchChangeState\n\n\tInitialApplierID int32\n\n\tNamespaceUserID int32\n\tNamespaceOrgID  int32\n}\n```\n\nListBatchChangesOpts captures the query options needed for listing batches. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#GetBatchSpecOpts",
              "documentation": {
                "identifier": "GetBatchSpecOpts",
                "newPage": false,
                "searchKey": "store.GetBatchSpecOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GetBatchSpecOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GetBatchSpecOpts struct {\n\tID     int64\n\tRandID string\n}\n```\n\nGetBatchSpecOpts captures the query options needed for getting a BatchSpec \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#GetNewestBatchSpecOpts",
              "documentation": {
                "identifier": "GetNewestBatchSpecOpts",
                "newPage": false,
                "searchKey": "store.GetNewestBatchSpecOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GetNewestBatchSpecOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GetNewestBatchSpecOpts struct {\n\tNamespaceUserID int32\n\tNamespaceOrgID  int32\n\tUserID          int32\n\tName            string\n}\n```\n\nGetNewestBatchSpecOpts captures the query options needed to get the latest batch spec for the given parameters. One of the namespace fields and all the others must be defined. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#ListBatchSpecsOpts",
              "documentation": {
                "identifier": "ListBatchSpecsOpts",
                "newPage": false,
                "searchKey": "store.ListBatchSpecsOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListBatchSpecsOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListBatchSpecsOpts struct {\n\tLimitOpts\n\tCursor int64\n}\n```\n\nListBatchSpecsOpts captures the query options needed for listing batch specs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#GetBulkOperationOpts",
              "documentation": {
                "identifier": "GetBulkOperationOpts",
                "newPage": false,
                "searchKey": "store.GetBulkOperationOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GetBulkOperationOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GetBulkOperationOpts struct {\n\tID string\n}\n```\n\nGetBulkOperationOpts captures the query options needed for getting a BulkOperation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#ListBulkOperationsOpts",
              "documentation": {
                "identifier": "ListBulkOperationsOpts",
                "newPage": false,
                "searchKey": "store.ListBulkOperationsOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListBulkOperationsOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListBulkOperationsOpts struct {\n\tLimitOpts\n\tCursor       int64\n\tCreatedAfter time.Time\n\n\tBatchChangeID int64\n}\n```\n\nListBulkOperationsOpts captures the query options needed for getting a list of bulk operations. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#CountBulkOperationsOpts",
              "documentation": {
                "identifier": "CountBulkOperationsOpts",
                "newPage": false,
                "searchKey": "store.CountBulkOperationsOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CountBulkOperationsOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CountBulkOperationsOpts struct {\n\tCreatedAfter  time.Time\n\tBatchChangeID int64\n}\n```\n\nCountBulkOperationsOpts captures the query options needed when counting BulkOperations. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#ListBulkOperationErrorsOpts",
              "documentation": {
                "identifier": "ListBulkOperationErrorsOpts",
                "newPage": false,
                "searchKey": "store.ListBulkOperationErrorsOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListBulkOperationErrorsOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListBulkOperationErrorsOpts struct {\n\tBulkOperationID string\n}\n```\n\nListBulkOperationErrorsOpts captures the query options needed for getting a list of BulkOperationErrors. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#GetChangesetEventOpts",
              "documentation": {
                "identifier": "GetChangesetEventOpts",
                "newPage": false,
                "searchKey": "store.GetChangesetEventOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GetChangesetEventOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GetChangesetEventOpts struct {\n\tID          int64\n\tChangesetID int64\n\tKind        btypes.ChangesetEventKind\n\tKey         string\n}\n```\n\nGetChangesetEventOpts captures the query options needed for getting a ChangesetEvent \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#ListChangesetEventsOpts",
              "documentation": {
                "identifier": "ListChangesetEventsOpts",
                "newPage": false,
                "searchKey": "store.ListChangesetEventsOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListChangesetEventsOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListChangesetEventsOpts struct {\n\tLimitOpts\n\tChangesetIDs []int64\n\tKinds        []btypes.ChangesetEventKind\n\tCursor       int64\n}\n```\n\nListChangesetEventsOpts captures the query options needed for listing changeset events. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#CountChangesetEventsOpts",
              "documentation": {
                "identifier": "CountChangesetEventsOpts",
                "newPage": false,
                "searchKey": "store.CountChangesetEventsOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CountChangesetEventsOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CountChangesetEventsOpts struct {\n\tChangesetID int64\n}\n```\n\nCountChangesetEventsOpts captures the query options needed for counting changeset events. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#GetChangesetJobOpts",
              "documentation": {
                "identifier": "GetChangesetJobOpts",
                "newPage": false,
                "searchKey": "store.GetChangesetJobOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GetChangesetJobOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GetChangesetJobOpts struct {\n\tID int64\n}\n```\n\nGetChangesetJobOpts captures the query options needed for getting a ChangesetJob \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#CountChangesetSpecsOpts",
              "documentation": {
                "identifier": "CountChangesetSpecsOpts",
                "newPage": false,
                "searchKey": "store.CountChangesetSpecsOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CountChangesetSpecsOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CountChangesetSpecsOpts struct {\n\tBatchSpecID int64\n}\n```\n\nCountChangesetSpecsOpts captures the query options needed for counting ChangesetSpecs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#GetChangesetSpecOpts",
              "documentation": {
                "identifier": "GetChangesetSpecOpts",
                "newPage": false,
                "searchKey": "store.GetChangesetSpecOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GetChangesetSpecOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GetChangesetSpecOpts struct {\n\tID     int64\n\tRandID string\n}\n```\n\nGetChangesetSpecOpts captures the query options needed for getting a ChangesetSpec \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#ListChangesetSpecsOpts",
              "documentation": {
                "identifier": "ListChangesetSpecsOpts",
                "newPage": false,
                "searchKey": "store.ListChangesetSpecsOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListChangesetSpecsOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListChangesetSpecsOpts struct {\n\tLimitOpts\n\tCursor int64\n\n\tBatchSpecID int64\n\tRandIDs     []string\n\tIDs         []int64\n}\n```\n\nListChangesetSpecsOpts captures the query options needed for listing code mods. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#GetRewirerMappingsOpts",
              "documentation": {
                "identifier": "GetRewirerMappingsOpts",
                "newPage": false,
                "searchKey": "store.GetRewirerMappingsOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GetRewirerMappingsOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GetRewirerMappingsOpts struct {\n\tBatchSpecID   int64\n\tBatchChangeID int64\n\n\tLimitOffset  *database.LimitOffset\n\tTextSearch   []search.TextSearchTerm\n\tCurrentState *btypes.ChangesetState\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#CountChangesetsOpts",
              "documentation": {
                "identifier": "CountChangesetsOpts",
                "newPage": false,
                "searchKey": "store.CountChangesetsOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CountChangesetsOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CountChangesetsOpts struct {\n\tBatchChangeID        int64\n\tOnlyArchived         bool\n\tIncludeArchived      bool\n\tExternalState        *btypes.ChangesetExternalState\n\tExternalReviewState  *btypes.ChangesetReviewState\n\tExternalCheckState   *btypes.ChangesetCheckState\n\tReconcilerStates     []btypes.ReconcilerState\n\tOwnedByBatchChangeID int64\n\tPublicationState     *btypes.ChangesetPublicationState\n\tTextSearch           []search.TextSearchTerm\n\tEnforceAuthz         bool\n}\n```\n\nCountChangesetsOpts captures the query options needed for counting changesets. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#GetChangesetOpts",
              "documentation": {
                "identifier": "GetChangesetOpts",
                "newPage": false,
                "searchKey": "store.GetChangesetOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GetChangesetOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GetChangesetOpts struct {\n\tID                  int64\n\tRepoID              api.RepoID\n\tExternalID          string\n\tExternalServiceType string\n\tExternalBranch      string\n\tReconcilerState     btypes.ReconcilerState\n\tPublicationState    btypes.ChangesetPublicationState\n}\n```\n\nGetChangesetOpts captures the query options needed for getting a Changeset \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#ListChangesetSyncDataOpts",
              "documentation": {
                "identifier": "ListChangesetSyncDataOpts",
                "newPage": false,
                "searchKey": "store.ListChangesetSyncDataOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListChangesetSyncDataOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListChangesetSyncDataOpts struct {\n\t// Return only the supplied changesets. If empty, all changesets are returned\n\tChangesetIDs []int64\n\n\tExternalServiceID string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#ListChangesetsOpts",
              "documentation": {
                "identifier": "ListChangesetsOpts",
                "newPage": false,
                "searchKey": "store.ListChangesetsOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListChangesetsOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListChangesetsOpts struct {\n\tLimitOpts\n\tCursor               int64\n\tBatchChangeID        int64\n\tOnlyArchived         bool\n\tIncludeArchived      bool\n\tIDs                  []int64\n\tPublicationState     *btypes.ChangesetPublicationState\n\tReconcilerStates     []btypes.ReconcilerState\n\tExternalState        *btypes.ChangesetExternalState\n\tExternalReviewState  *btypes.ChangesetReviewState\n\tExternalCheckState   *btypes.ChangesetCheckState\n\tOwnedByBatchChangeID int64\n\tTextSearch           []search.TextSearchTerm\n\tEnforceAuthz         bool\n}\n```\n\nListChangesetsOpts captures the query options needed for listing changesets. \n\nNote that TextSearch is potentially expensive, and should only be specified in conjunction with at least one other option (most likely, BatchChangeID). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#jsonBatchChangeChangesetSet",
              "documentation": {
                "identifier": "jsonBatchChangeChangesetSet",
                "newPage": false,
                "searchKey": "store.jsonBatchChangeChangesetSet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type jsonBatchChangeChangesetSet struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype jsonBatchChangeChangesetSet struct {\n\tAssocs *[]btypes.BatchChangeAssoc\n}\n```\n\njsonBatchChangeChangesetSet represents a \"join table\" set as a JSONB object where the keys are the ids and the values are json objects holding the properties. It implements the sql.Scanner interface so it can be used as a scan destination, similar to sql.NullString. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#jsonBatchChangeChangesetSet.Scan",
                    "documentation": {
                      "identifier": "jsonBatchChangeChangesetSet.Scan",
                      "newPage": false,
                      "searchKey": "store.jsonBatchChangeChangesetSet.Scan",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *jsonBatchChangeChangesetSet) Scan(value interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *jsonBatchChangeChangesetSet) Scan(value interface{}) error\n```\n\nScan implements the Scanner interface. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#jsonBatchChangeChangesetSet.Value",
                    "documentation": {
                      "identifier": "jsonBatchChangeChangesetSet.Value",
                      "newPage": false,
                      "searchKey": "store.jsonBatchChangeChangesetSet.Value",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n jsonBatchChangeChangesetSet) Value() (driver.Value, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n jsonBatchChangeChangesetSet) Value() (driver.Value, error)\n```\n\nValue implements the driver Valuer interface. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#ListCodeHostsOpts",
              "documentation": {
                "identifier": "ListCodeHostsOpts",
                "newPage": false,
                "searchKey": "store.ListCodeHostsOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListCodeHostsOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListCodeHostsOpts struct {\n\tRepoIDs []api.RepoID\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#GetExternalServiceIDsOpts",
              "documentation": {
                "identifier": "GetExternalServiceIDsOpts",
                "newPage": false,
                "searchKey": "store.GetExternalServiceIDsOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GetExternalServiceIDsOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GetExternalServiceIDsOpts struct {\n\tExternalServiceType string\n\tExternalServiceID   string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#GetSiteCredentialOpts",
              "documentation": {
                "identifier": "GetSiteCredentialOpts",
                "newPage": false,
                "searchKey": "store.GetSiteCredentialOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GetSiteCredentialOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GetSiteCredentialOpts struct {\n\tID                  int64\n\tExternalServiceType string\n\tExternalServiceID   string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#ListSiteCredentialsOpts",
              "documentation": {
                "identifier": "ListSiteCredentialsOpts",
                "newPage": false,
                "searchKey": "store.ListSiteCredentialsOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListSiteCredentialsOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListSiteCredentialsOpts struct {\n\tLimitOpts\n\tForUpdate bool\n\n\t// TODO(batch-changes-site-credential-encryption): remove when no longer\n\t// needed.\n\tRequiresMigration bool\n\n\t// TODO(batch-changes-site-credential-encryption): remove when no longer\n\t// needed.\n\tOnlyEncrypted bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#SQLColumns",
              "documentation": {
                "identifier": "SQLColumns",
                "newPage": false,
                "searchKey": "store.SQLColumns",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SQLColumns []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SQLColumns []string\n```\n\nSQLColumns is a slice of column names, that can be converted to a slice of *sqlf.Query. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#SQLColumns.ToSqlf",
                    "documentation": {
                      "identifier": "SQLColumns.ToSqlf",
                      "newPage": false,
                      "searchKey": "store.SQLColumns.ToSqlf",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s SQLColumns) ToSqlf() []*sqlf.Query"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s SQLColumns) ToSqlf() []*sqlf.Query\n```\n\nToSqlf returns all the columns wrapped in a *sqlf.Query. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#Store",
              "documentation": {
                "identifier": "Store",
                "newPage": false,
                "searchKey": "store.Store",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Store struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Store struct {\n\t*basestore.Store\n\tkey encryption.Key\n\tnow func() time.Time\n}\n```\n\nStore exposes methods to read and write batches domain models from persistent storage. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#New",
                    "documentation": {
                      "identifier": "New",
                      "newPage": false,
                      "searchKey": "store.New",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func New(db dbutil.DB, key encryption.Key) *Store"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc New(db dbutil.DB, key encryption.Key) *Store\n```\n\nNew returns a new Store backed by the given database. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#NewWithClock",
                    "documentation": {
                      "identifier": "NewWithClock",
                      "newPage": false,
                      "searchKey": "store.NewWithClock",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewWithClock(db dbutil.DB, key encryption.Key, clock func() time.Time) *Store"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewWithClock(db dbutil.DB, key encryption.Key, clock func() time.Time) *Store\n```\n\nNewWithClock returns a new Store backed by the given database and clock for timestamps. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.CreateBatchChange",
                    "documentation": {
                      "identifier": "Store.CreateBatchChange",
                      "newPage": false,
                      "searchKey": "store.Store.CreateBatchChange",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) CreateBatchChange(ctx context.Context, c *btypes.BatchChange) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) CreateBatchChange(ctx context.Context, c *btypes.BatchChange) error\n```\n\nCreateBatchChange creates the given batch change. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.createBatchChangeQuery",
                    "documentation": {
                      "identifier": "Store.createBatchChangeQuery",
                      "newPage": false,
                      "searchKey": "store.Store.createBatchChangeQuery",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) createBatchChangeQuery(c *btypes.BatchChange) *sqlf.Query"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) createBatchChangeQuery(c *btypes.BatchChange) *sqlf.Query\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.UpdateBatchChange",
                    "documentation": {
                      "identifier": "Store.UpdateBatchChange",
                      "newPage": false,
                      "searchKey": "store.Store.UpdateBatchChange",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) UpdateBatchChange(ctx context.Context, c *btypes.BatchChange) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) UpdateBatchChange(ctx context.Context, c *btypes.BatchChange) error\n```\n\nUpdateBatchChange updates the given bach change. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.updateBatchChangeQuery",
                    "documentation": {
                      "identifier": "Store.updateBatchChangeQuery",
                      "newPage": false,
                      "searchKey": "store.Store.updateBatchChangeQuery",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) updateBatchChangeQuery(c *btypes.BatchChange) *sqlf.Query"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) updateBatchChangeQuery(c *btypes.BatchChange) *sqlf.Query\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.DeleteBatchChange",
                    "documentation": {
                      "identifier": "Store.DeleteBatchChange",
                      "newPage": false,
                      "searchKey": "store.Store.DeleteBatchChange",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) DeleteBatchChange(ctx context.Context, id int64) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) DeleteBatchChange(ctx context.Context, id int64) error\n```\n\nDeleteBatchChange deletes the batch change with the given ID. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.CountBatchChanges",
                    "documentation": {
                      "identifier": "Store.CountBatchChanges",
                      "newPage": false,
                      "searchKey": "store.Store.CountBatchChanges",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) CountBatchChanges(ctx context.Context, opts CountBatchChangesOpts) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) CountBatchChanges(ctx context.Context, opts CountBatchChangesOpts) (int, error)\n```\n\nCountBatchChanges returns the number of batch changes in the database. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.GetBatchChange",
                    "documentation": {
                      "identifier": "Store.GetBatchChange",
                      "newPage": false,
                      "searchKey": "store.Store.GetBatchChange",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetBatchChange(ctx context.Context, opts GetBatchChangeOpts) (*btypes.BatchChange, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetBatchChange(ctx context.Context, opts GetBatchChangeOpts) (*btypes.BatchChange, error)\n```\n\nGetBatchChange gets a batch change matching the given options. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.GetBatchChangeDiffStat",
                    "documentation": {
                      "identifier": "Store.GetBatchChangeDiffStat",
                      "newPage": false,
                      "searchKey": "store.Store.GetBatchChangeDiffStat",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetBatchChangeDiffStat(ctx context.Context, opts GetBatchChangeDiffStatOpts) (*diff.Stat, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetBatchChangeDiffStat(ctx context.Context, opts GetBatchChangeDiffStatOpts) (*diff.Stat, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.ListBatchChanges",
                    "documentation": {
                      "identifier": "Store.ListBatchChanges",
                      "newPage": false,
                      "searchKey": "store.Store.ListBatchChanges",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) ListBatchChanges(ctx context.Context, opts ListBatchChangesOpts) (cs []*btypes.BatchChange, next int64, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) ListBatchChanges(ctx context.Context, opts ListBatchChangesOpts) (cs []*btypes.BatchChange, next int64, err error)\n```\n\nListBatchChanges lists batch changes with the given filters. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.CreateBatchSpec",
                    "documentation": {
                      "identifier": "Store.CreateBatchSpec",
                      "newPage": false,
                      "searchKey": "store.Store.CreateBatchSpec",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) CreateBatchSpec(ctx context.Context, c *btypes.BatchSpec) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) CreateBatchSpec(ctx context.Context, c *btypes.BatchSpec) error\n```\n\nCreateBatchSpec creates the given BatchSpec. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.createBatchSpecQuery",
                    "documentation": {
                      "identifier": "Store.createBatchSpecQuery",
                      "newPage": false,
                      "searchKey": "store.Store.createBatchSpecQuery",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) createBatchSpecQuery(c *btypes.BatchSpec) (*sqlf.Query, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) createBatchSpecQuery(c *btypes.BatchSpec) (*sqlf.Query, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.UpdateBatchSpec",
                    "documentation": {
                      "identifier": "Store.UpdateBatchSpec",
                      "newPage": false,
                      "searchKey": "store.Store.UpdateBatchSpec",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) UpdateBatchSpec(ctx context.Context, c *btypes.BatchSpec) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) UpdateBatchSpec(ctx context.Context, c *btypes.BatchSpec) error\n```\n\nUpdateBatchSpec updates the given BatchSpec. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.updateBatchSpecQuery",
                    "documentation": {
                      "identifier": "Store.updateBatchSpecQuery",
                      "newPage": false,
                      "searchKey": "store.Store.updateBatchSpecQuery",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) updateBatchSpecQuery(c *btypes.BatchSpec) (*sqlf.Query, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) updateBatchSpecQuery(c *btypes.BatchSpec) (*sqlf.Query, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.DeleteBatchSpec",
                    "documentation": {
                      "identifier": "Store.DeleteBatchSpec",
                      "newPage": false,
                      "searchKey": "store.Store.DeleteBatchSpec",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) DeleteBatchSpec(ctx context.Context, id int64) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) DeleteBatchSpec(ctx context.Context, id int64) error\n```\n\nDeleteBatchSpec deletes the BatchSpec with the given ID. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.CountBatchSpecs",
                    "documentation": {
                      "identifier": "Store.CountBatchSpecs",
                      "newPage": false,
                      "searchKey": "store.Store.CountBatchSpecs",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) CountBatchSpecs(ctx context.Context) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) CountBatchSpecs(ctx context.Context) (int, error)\n```\n\nCountBatchSpecs returns the number of code mods in the database. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.GetBatchSpec",
                    "documentation": {
                      "identifier": "Store.GetBatchSpec",
                      "newPage": false,
                      "searchKey": "store.Store.GetBatchSpec",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetBatchSpec(ctx context.Context, opts GetBatchSpecOpts) (*btypes.BatchSpec, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetBatchSpec(ctx context.Context, opts GetBatchSpecOpts) (*btypes.BatchSpec, error)\n```\n\nGetBatchSpec gets a BatchSpec matching the given options. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.GetNewestBatchSpec",
                    "documentation": {
                      "identifier": "Store.GetNewestBatchSpec",
                      "newPage": false,
                      "searchKey": "store.Store.GetNewestBatchSpec",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetNewestBatchSpec(ctx context.Context, opts GetNewestBatchSpecOpts) (*btypes.BatchSpec, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetNewestBatchSpec(ctx context.Context, opts GetNewestBatchSpecOpts) (*btypes.BatchSpec, error)\n```\n\nGetNewestBatchSpec returns the newest batch spec that matches the given options. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.ListBatchSpecs",
                    "documentation": {
                      "identifier": "Store.ListBatchSpecs",
                      "newPage": false,
                      "searchKey": "store.Store.ListBatchSpecs",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) ListBatchSpecs(ctx context.Context, opts ListBatchSpecsOpts) (cs []*btypes.BatchSpec, next int64, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) ListBatchSpecs(ctx context.Context, opts ListBatchSpecsOpts) (cs []*btypes.BatchSpec, next int64, err error)\n```\n\nListBatchSpecs lists BatchSpecs with the given filters. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.DeleteExpiredBatchSpecs",
                    "documentation": {
                      "identifier": "Store.DeleteExpiredBatchSpecs",
                      "newPage": false,
                      "searchKey": "store.Store.DeleteExpiredBatchSpecs",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) DeleteExpiredBatchSpecs(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) DeleteExpiredBatchSpecs(ctx context.Context) error\n```\n\nDeleteExpiredBatchSpecs deletes BatchSpecs that have not been attached to a Batch change within BatchSpecTTL. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.GetBulkOperation",
                    "documentation": {
                      "identifier": "Store.GetBulkOperation",
                      "newPage": false,
                      "searchKey": "store.Store.GetBulkOperation",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetBulkOperation(ctx context.Context, opts GetBulkOperationOpts) (*btypes.BulkOperation, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetBulkOperation(ctx context.Context, opts GetBulkOperationOpts) (*btypes.BulkOperation, error)\n```\n\nGetBulkOperation gets a BulkOperation matching the given options. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.ListBulkOperations",
                    "documentation": {
                      "identifier": "Store.ListBulkOperations",
                      "newPage": false,
                      "searchKey": "store.Store.ListBulkOperations",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) ListBulkOperations(ctx context.Context, opts ListBulkOperationsOpts) (bs []*btypes.BulkOperation, next int64, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) ListBulkOperations(ctx context.Context, opts ListBulkOperationsOpts) (bs []*btypes.BulkOperation, next int64, err error)\n```\n\nListBulkOperations gets a list of BulkOperations matching the given options. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.CountBulkOperations",
                    "documentation": {
                      "identifier": "Store.CountBulkOperations",
                      "newPage": false,
                      "searchKey": "store.Store.CountBulkOperations",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) CountBulkOperations(ctx context.Context, opts CountBulkOperationsOpts) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) CountBulkOperations(ctx context.Context, opts CountBulkOperationsOpts) (int, error)\n```\n\nCountBulkOperations gets the count of BulkOperations in the given batch change. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.ListBulkOperationErrors",
                    "documentation": {
                      "identifier": "Store.ListBulkOperationErrors",
                      "newPage": false,
                      "searchKey": "store.Store.ListBulkOperationErrors",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) ListBulkOperationErrors(ctx context.Context, opts ListBulkOperationErrorsOpts) (es []*btypes.BulkOperationError, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) ListBulkOperationErrors(ctx context.Context, opts ListBulkOperationErrorsOpts) (es []*btypes.BulkOperationError, err error)\n```\n\nListBulkOperationErrors gets a list of BulkOperationErrors in a given BulkOperation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.GetChangesetEvent",
                    "documentation": {
                      "identifier": "Store.GetChangesetEvent",
                      "newPage": false,
                      "searchKey": "store.Store.GetChangesetEvent",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetChangesetEvent(ctx context.Context, opts GetChangesetEventOpts) (*btypes.ChangesetEvent, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetChangesetEvent(ctx context.Context, opts GetChangesetEventOpts) (*btypes.ChangesetEvent, error)\n```\n\nGetChangesetEvent gets a changeset matching the given options. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.ListChangesetEvents",
                    "documentation": {
                      "identifier": "Store.ListChangesetEvents",
                      "newPage": false,
                      "searchKey": "store.Store.ListChangesetEvents",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) ListChangesetEvents(ctx context.Context, opts ListChangesetEventsOpts) (cs []*btypes.ChangesetEvent, next int64, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) ListChangesetEvents(ctx context.Context, opts ListChangesetEventsOpts) (cs []*btypes.ChangesetEvent, next int64, err error)\n```\n\nListChangesetEvents lists ChangesetEvents with the given filters. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.CountChangesetEvents",
                    "documentation": {
                      "identifier": "Store.CountChangesetEvents",
                      "newPage": false,
                      "searchKey": "store.Store.CountChangesetEvents",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) CountChangesetEvents(ctx context.Context, opts CountChangesetEventsOpts) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) CountChangesetEvents(ctx context.Context, opts CountChangesetEventsOpts) (int, error)\n```\n\nCountChangesetEvents returns the number of changeset events in the database. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.UpsertChangesetEvents",
                    "documentation": {
                      "identifier": "Store.UpsertChangesetEvents",
                      "newPage": false,
                      "searchKey": "store.Store.UpsertChangesetEvents",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) UpsertChangesetEvents(ctx context.Context, cs ...*btypes.ChangesetEvent) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) UpsertChangesetEvents(ctx context.Context, cs ...*btypes.ChangesetEvent) (err error)\n```\n\nUpsertChangesetEvents creates or updates the given ChangesetEvents. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.upsertChangesetEventsQuery",
                    "documentation": {
                      "identifier": "Store.upsertChangesetEventsQuery",
                      "newPage": false,
                      "searchKey": "store.Store.upsertChangesetEventsQuery",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) upsertChangesetEventsQuery(es []*btypes.ChangesetEvent) (*sqlf.Query, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) upsertChangesetEventsQuery(es []*btypes.ChangesetEvent) (*sqlf.Query, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.CreateChangesetJob",
                    "documentation": {
                      "identifier": "Store.CreateChangesetJob",
                      "newPage": false,
                      "searchKey": "store.Store.CreateChangesetJob",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) CreateChangesetJob(ctx context.Context, cs ...*btypes.ChangesetJob) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) CreateChangesetJob(ctx context.Context, cs ...*btypes.ChangesetJob) error\n```\n\nCreateChangesetJob creates the given changeset jobs. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.GetChangesetJob",
                    "documentation": {
                      "identifier": "Store.GetChangesetJob",
                      "newPage": false,
                      "searchKey": "store.Store.GetChangesetJob",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetChangesetJob(ctx context.Context, opts GetChangesetJobOpts) (*btypes.ChangesetJob, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetChangesetJob(ctx context.Context, opts GetChangesetJobOpts) (*btypes.ChangesetJob, error)\n```\n\nGetChangesetJob gets a ChangesetJob matching the given options. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.CreateChangesetSpec",
                    "documentation": {
                      "identifier": "Store.CreateChangesetSpec",
                      "newPage": false,
                      "searchKey": "store.Store.CreateChangesetSpec",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) CreateChangesetSpec(ctx context.Context, c *btypes.ChangesetSpec) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) CreateChangesetSpec(ctx context.Context, c *btypes.ChangesetSpec) error\n```\n\nCreateChangesetSpec creates the given ChangesetSpec. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.createChangesetSpecQuery",
                    "documentation": {
                      "identifier": "Store.createChangesetSpecQuery",
                      "newPage": false,
                      "searchKey": "store.Store.createChangesetSpecQuery",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) createChangesetSpecQuery(c *btypes.ChangesetSpec) (*sqlf.Query, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) createChangesetSpecQuery(c *btypes.ChangesetSpec) (*sqlf.Query, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.UpdateChangesetSpec",
                    "documentation": {
                      "identifier": "Store.UpdateChangesetSpec",
                      "newPage": false,
                      "searchKey": "store.Store.UpdateChangesetSpec",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) UpdateChangesetSpec(ctx context.Context, c *btypes.ChangesetSpec) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) UpdateChangesetSpec(ctx context.Context, c *btypes.ChangesetSpec) error\n```\n\nUpdateChangesetSpec updates the given ChangesetSpec. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.updateChangesetSpecQuery",
                    "documentation": {
                      "identifier": "Store.updateChangesetSpecQuery",
                      "newPage": false,
                      "searchKey": "store.Store.updateChangesetSpecQuery",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) updateChangesetSpecQuery(c *btypes.ChangesetSpec) (*sqlf.Query, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) updateChangesetSpecQuery(c *btypes.ChangesetSpec) (*sqlf.Query, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.DeleteChangesetSpec",
                    "documentation": {
                      "identifier": "Store.DeleteChangesetSpec",
                      "newPage": false,
                      "searchKey": "store.Store.DeleteChangesetSpec",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) DeleteChangesetSpec(ctx context.Context, id int64) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) DeleteChangesetSpec(ctx context.Context, id int64) error\n```\n\nDeleteChangesetSpec deletes the ChangesetSpec with the given ID. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.CountChangesetSpecs",
                    "documentation": {
                      "identifier": "Store.CountChangesetSpecs",
                      "newPage": false,
                      "searchKey": "store.Store.CountChangesetSpecs",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) CountChangesetSpecs(ctx context.Context, opts CountChangesetSpecsOpts) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) CountChangesetSpecs(ctx context.Context, opts CountChangesetSpecsOpts) (int, error)\n```\n\nCountChangesetSpecs returns the number of changeset specs in the database. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.GetChangesetSpec",
                    "documentation": {
                      "identifier": "Store.GetChangesetSpec",
                      "newPage": false,
                      "searchKey": "store.Store.GetChangesetSpec",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetChangesetSpec(ctx context.Context, opts GetChangesetSpecOpts) (*btypes.ChangesetSpec, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetChangesetSpec(ctx context.Context, opts GetChangesetSpecOpts) (*btypes.ChangesetSpec, error)\n```\n\nGetChangesetSpec gets a changeset spec matching the given options. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.GetChangesetSpecByID",
                    "documentation": {
                      "identifier": "Store.GetChangesetSpecByID",
                      "newPage": false,
                      "searchKey": "store.Store.GetChangesetSpecByID",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetChangesetSpecByID(ctx context.Context, id int64) (*btypes.ChangesetSpec, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetChangesetSpecByID(ctx context.Context, id int64) (*btypes.ChangesetSpec, error)\n```\n\nGetChangesetSpecByID gets a changeset spec with the given ID. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.ListChangesetSpecs",
                    "documentation": {
                      "identifier": "Store.ListChangesetSpecs",
                      "newPage": false,
                      "searchKey": "store.Store.ListChangesetSpecs",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) ListChangesetSpecs(ctx context.Context, opts ListChangesetSpecsOpts) (cs btypes.ChangesetSpecs, next int64, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) ListChangesetSpecs(ctx context.Context, opts ListChangesetSpecsOpts) (cs btypes.ChangesetSpecs, next int64, err error)\n```\n\nListChangesetSpecs lists ChangesetSpecs with the given filters. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.DeleteExpiredChangesetSpecs",
                    "documentation": {
                      "identifier": "Store.DeleteExpiredChangesetSpecs",
                      "newPage": false,
                      "searchKey": "store.Store.DeleteExpiredChangesetSpecs",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) DeleteExpiredChangesetSpecs(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) DeleteExpiredChangesetSpecs(ctx context.Context) error\n```\n\nDeleteExpiredChangesetSpecs deletes each ChangesetSpec that has not been attached to a BatchSpec within ChangesetSpecTTL, OR that is attached to a BatchSpec that is not applied and is not attached to a Changeset within BatchSpecTTL \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.GetRewirerMappings",
                    "documentation": {
                      "identifier": "Store.GetRewirerMappings",
                      "newPage": false,
                      "searchKey": "store.Store.GetRewirerMappings",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetRewirerMappings(ctx context.Context, opts GetRewirerMappingsOpts) (mappings btypes.RewirerMappings, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetRewirerMappings(ctx context.Context, opts GetRewirerMappingsOpts) (mappings btypes.RewirerMappings, err error)\n```\n\nGetRewirerMappings returns RewirerMappings between changeset specs and changesets. \n\nWe have two imaginary lists, the current changesets in the batch change and the new changeset specs: \n\n┌───────────────────────────────────────┐   ┌───────────────────────────────┐ │Changeset 1 | Repo A | #111 | run-gofmt│   │  Spec 1 | Repo A | run-gofmt  │ └───────────────────────────────────────┘   └───────────────────────────────┘ ┌───────────────────────────────────────┐   ┌───────────────────────────────┐ │Changeset 2 | Repo B |      | run-gofmt│   │  Spec 2 | Repo B | run-gofmt  │ └───────────────────────────────────────┘   └───────────────────────────────┘ ┌───────────────────────────────────────┐   ┌───────────────────────────────────┐ │Changeset 3 | Repo C | #222 | run-gofmt│   │  Spec 3 | Repo C | run-goimports  │ └───────────────────────────────────────┘   └───────────────────────────────────┘ ┌───────────────────────────────────────┐   ┌───────────────────────────────┐ │Changeset 4 | Repo C | #333 | older-pr │   │    Spec 4 | Repo C | #333     │ └───────────────────────────────────────┘   └───────────────────────────────┘ \n\nWe need to: 1. Find out whether our new specs should _update_ an existing \n\n```\nchangeset (ChangesetSpec != 0, Changeset != 0), or whether we need to create a new one.\n\n```\n2. Since we can have multiple changesets per repository, we need to match \n\n```\nbased on repo and external ID for imported changesets and on repo and head_ref for 'branch' changesets.\n\n```\n3. If a changeset wasn't published yet, it doesn't have an external ID nor does it have an external head_ref. \n\n```\nIn that case, we need to check whether the branch on which we _might_\npush the commit (because the changeset might not be published\nyet) is the same or compare the external IDs in the current and new specs.\n\n```\nWhat we want: \n\n┌───────────────────────────────────────┐    ┌───────────────────────────────┐ │Changeset 1 | Repo A | #111 | run-gofmt│───▶│  Spec 1 | Repo A | run-gofmt  │ └───────────────────────────────────────┘    └───────────────────────────────┘ ┌───────────────────────────────────────┐    ┌───────────────────────────────┐ │Changeset 2 | Repo B |      | run-gofmt│───▶│  Spec 2 | Repo B | run-gofmt  │ └───────────────────────────────────────┘    └───────────────────────────────┘ ┌───────────────────────────────────────┐ │Changeset 3 | Repo C | #222 | run-gofmt│ └───────────────────────────────────────┘ ┌───────────────────────────────────────┐    ┌───────────────────────────────┐ │Changeset 4 | Repo C | #333 | older-pr │───▶│    Spec 4 | Repo C | #333     │ └───────────────────────────────────────┘    └───────────────────────────────┘ ┌───────────────────────────────────────┐    ┌───────────────────────────────────┐ │Changeset 5 | Repo C | | run-goimports │───▶│  Spec 3 | Repo C | run-goimports  │ └───────────────────────────────────────┘    └───────────────────────────────────┘ \n\nSpec 1 should be attached to Changeset 1 and (possibly) update its title/body/diff. (ChangesetSpec = 1, Changeset = 1) Spec 2 should be attached to Changeset 2 and publish it on the code host. (ChangesetSpec = 2, Changeset = 2) Spec 3 should get a new Changeset, since its branch doesn't match Changeset 3's branch. (ChangesetSpec = 3, Changeset = 0) Spec 4 should be attached to Changeset 4, since it tracks PR #333 in Repo C. (ChangesetSpec = 4, Changeset = 4) Changeset 3 doesn't have a matching spec and should be detached from the batch change (and closed) (ChangesetSpec == 0, Changeset = 3). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.changesetWriteQuery",
                    "documentation": {
                      "identifier": "Store.changesetWriteQuery",
                      "newPage": false,
                      "searchKey": "store.Store.changesetWriteQuery",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) changesetWriteQuery(q string, includeID bool, c *btypes.Changeset) (*sqlf.Query, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) changesetWriteQuery(q string, includeID bool, c *btypes.Changeset) (*sqlf.Query, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.UpsertChangeset",
                    "documentation": {
                      "identifier": "Store.UpsertChangeset",
                      "newPage": false,
                      "searchKey": "store.Store.UpsertChangeset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) UpsertChangeset(ctx context.Context, c *btypes.Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) UpsertChangeset(ctx context.Context, c *btypes.Changeset) error\n```\n\nUpsertChangeset creates or updates the given Changeset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.CreateChangeset",
                    "documentation": {
                      "identifier": "Store.CreateChangeset",
                      "newPage": false,
                      "searchKey": "store.Store.CreateChangeset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) CreateChangeset(ctx context.Context, c *btypes.Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) CreateChangeset(ctx context.Context, c *btypes.Changeset) error\n```\n\nCreateChangeset creates the given Changeset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.DeleteChangeset",
                    "documentation": {
                      "identifier": "Store.DeleteChangeset",
                      "newPage": false,
                      "searchKey": "store.Store.DeleteChangeset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) DeleteChangeset(ctx context.Context, id int64) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) DeleteChangeset(ctx context.Context, id int64) error\n```\n\nDeleteChangeset deletes the Changeset with the given ID. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.CountChangesets",
                    "documentation": {
                      "identifier": "Store.CountChangesets",
                      "newPage": false,
                      "searchKey": "store.Store.CountChangesets",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) CountChangesets(ctx context.Context, opts CountChangesetsOpts) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) CountChangesets(ctx context.Context, opts CountChangesetsOpts) (int, error)\n```\n\nCountChangesets returns the number of changesets in the database. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.GetChangesetByID",
                    "documentation": {
                      "identifier": "Store.GetChangesetByID",
                      "newPage": false,
                      "searchKey": "store.Store.GetChangesetByID",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetChangesetByID(ctx context.Context, id int64) (*btypes.Changeset, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetChangesetByID(ctx context.Context, id int64) (*btypes.Changeset, error)\n```\n\nGetChangesetByID is a convenience method if only the ID needs to be passed in. It's also used for abstraction in the testing package. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.GetChangeset",
                    "documentation": {
                      "identifier": "Store.GetChangeset",
                      "newPage": false,
                      "searchKey": "store.Store.GetChangeset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetChangeset(ctx context.Context, opts GetChangesetOpts) (*btypes.Changeset, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetChangeset(ctx context.Context, opts GetChangesetOpts) (*btypes.Changeset, error)\n```\n\nGetChangeset gets a changeset matching the given options. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.ListChangesetSyncData",
                    "documentation": {
                      "identifier": "Store.ListChangesetSyncData",
                      "newPage": false,
                      "searchKey": "store.Store.ListChangesetSyncData",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) ListChangesetSyncData(ctx context.Context, opts ListChangesetSyncDataOpts) ([]*btypes.ChangesetSyncData, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) ListChangesetSyncData(ctx context.Context, opts ListChangesetSyncDataOpts) ([]*btypes.ChangesetSyncData, error)\n```\n\nListChangesetSyncData returns sync data on all non-externally-deleted changesets that are part of at least one open batch change. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.ListChangesets",
                    "documentation": {
                      "identifier": "Store.ListChangesets",
                      "newPage": false,
                      "searchKey": "store.Store.ListChangesets",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) ListChangesets(ctx context.Context, opts ListChangesetsOpts) (cs btypes.Changesets, next int64, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) ListChangesets(ctx context.Context, opts ListChangesetsOpts) (cs btypes.Changesets, next int64, err error)\n```\n\nListChangesets lists Changesets with the given filters. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.UpdateChangeset",
                    "documentation": {
                      "identifier": "Store.UpdateChangeset",
                      "newPage": false,
                      "searchKey": "store.Store.UpdateChangeset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) UpdateChangeset(ctx context.Context, cs *btypes.Changeset) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) UpdateChangeset(ctx context.Context, cs *btypes.Changeset) error\n```\n\nUpdateChangeset updates the given Changeset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.GetChangesetExternalIDs",
                    "documentation": {
                      "identifier": "Store.GetChangesetExternalIDs",
                      "newPage": false,
                      "searchKey": "store.Store.GetChangesetExternalIDs",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetChangesetExternalIDs(ctx context.Context, spec api.ExternalRepoSpec, refs []string) ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetChangesetExternalIDs(ctx context.Context, spec api.ExternalRepoSpec, refs []string) ([]string, error)\n```\n\nGetChangesetExternalIDs allows us to find the external ids for pull requests based on a slice of head refs. We need this in order to match incoming webhooks to pull requests as the only information they provide is the remote branch \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.CancelQueuedBatchChangeChangesets",
                    "documentation": {
                      "identifier": "Store.CancelQueuedBatchChangeChangesets",
                      "newPage": false,
                      "searchKey": "store.Store.CancelQueuedBatchChangeChangesets",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) CancelQueuedBatchChangeChangesets(ctx context.Context, batchChangeID int64) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) CancelQueuedBatchChangeChangesets(ctx context.Context, batchChangeID int64) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.EnqueueChangesetsToClose",
                    "documentation": {
                      "identifier": "Store.EnqueueChangesetsToClose",
                      "newPage": false,
                      "searchKey": "store.Store.EnqueueChangesetsToClose",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) EnqueueChangesetsToClose(ctx context.Context, batchChangeID int64) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) EnqueueChangesetsToClose(ctx context.Context, batchChangeID int64) error\n```\n\nEnqueueChangesetsToClose updates all changesets that are owned by the given batch change to set their reconciler status to 'queued' and the Closing boolean to true. \n\nIt does not update the changesets that are fully processed and already closed/merged. \n\nThis method will *block* if some of the changesets are currently being processed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.GetChangesetsStats",
                    "documentation": {
                      "identifier": "Store.GetChangesetsStats",
                      "newPage": false,
                      "searchKey": "store.Store.GetChangesetsStats",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetChangesetsStats(ctx context.Context, batchChangeID int64) (stats btypes.ChangesetsStats, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetChangesetsStats(ctx context.Context, batchChangeID int64) (stats btypes.ChangesetsStats, err error)\n```\n\nGetChangesetsStats returns statistics on all the changesets associated to the given batch change, or all changesets across the instance. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.EnqueueNextScheduledChangeset",
                    "documentation": {
                      "identifier": "Store.EnqueueNextScheduledChangeset",
                      "newPage": false,
                      "searchKey": "store.Store.EnqueueNextScheduledChangeset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) EnqueueNextScheduledChangeset(ctx context.Context) (*btypes.Changeset, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) EnqueueNextScheduledChangeset(ctx context.Context) (*btypes.Changeset, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.GetChangesetPlaceInSchedulerQueue",
                    "documentation": {
                      "identifier": "Store.GetChangesetPlaceInSchedulerQueue",
                      "newPage": false,
                      "searchKey": "store.Store.GetChangesetPlaceInSchedulerQueue",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetChangesetPlaceInSchedulerQueue(ctx context.Context, id int64) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetChangesetPlaceInSchedulerQueue(ctx context.Context, id int64) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.ListCodeHosts",
                    "documentation": {
                      "identifier": "Store.ListCodeHosts",
                      "newPage": false,
                      "searchKey": "store.Store.ListCodeHosts",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) ListCodeHosts(ctx context.Context, opts ListCodeHostsOpts) ([]*btypes.CodeHost, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) ListCodeHosts(ctx context.Context, opts ListCodeHostsOpts) ([]*btypes.CodeHost, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.GetExternalServiceIDs",
                    "documentation": {
                      "identifier": "Store.GetExternalServiceIDs",
                      "newPage": false,
                      "searchKey": "store.Store.GetExternalServiceIDs",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetExternalServiceIDs(ctx context.Context, opts GetExternalServiceIDsOpts) (ids []int64, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetExternalServiceIDs(ctx context.Context, opts GetExternalServiceIDsOpts) (ids []int64, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.CreateSiteCredential",
                    "documentation": {
                      "identifier": "Store.CreateSiteCredential",
                      "newPage": false,
                      "searchKey": "store.Store.CreateSiteCredential",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) CreateSiteCredential(ctx context.Context, c *btypes.SiteCredential, credential auth.Authenticator) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) CreateSiteCredential(ctx context.Context, c *btypes.SiteCredential, credential auth.Authenticator) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.DeleteSiteCredential",
                    "documentation": {
                      "identifier": "Store.DeleteSiteCredential",
                      "newPage": false,
                      "searchKey": "store.Store.DeleteSiteCredential",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) DeleteSiteCredential(ctx context.Context, id int64) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) DeleteSiteCredential(ctx context.Context, id int64) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.GetSiteCredential",
                    "documentation": {
                      "identifier": "Store.GetSiteCredential",
                      "newPage": false,
                      "searchKey": "store.Store.GetSiteCredential",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) GetSiteCredential(ctx context.Context, opts GetSiteCredentialOpts) (*btypes.SiteCredential, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) GetSiteCredential(ctx context.Context, opts GetSiteCredentialOpts) (*btypes.SiteCredential, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.ListSiteCredentials",
                    "documentation": {
                      "identifier": "Store.ListSiteCredentials",
                      "newPage": false,
                      "searchKey": "store.Store.ListSiteCredentials",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) ListSiteCredentials(ctx context.Context, opts ListSiteCredentialsOpts) (cs []*btypes.SiteCredential, next int64, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) ListSiteCredentials(ctx context.Context, opts ListSiteCredentialsOpts) (cs []*btypes.SiteCredential, next int64, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.UpdateSiteCredential",
                    "documentation": {
                      "identifier": "Store.UpdateSiteCredential",
                      "newPage": false,
                      "searchKey": "store.Store.UpdateSiteCredential",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) UpdateSiteCredential(ctx context.Context, c *btypes.SiteCredential) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) UpdateSiteCredential(ctx context.Context, c *btypes.SiteCredential) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.updateSiteCredentialQuery",
                    "documentation": {
                      "identifier": "Store.updateSiteCredentialQuery",
                      "newPage": false,
                      "searchKey": "store.Store.updateSiteCredentialQuery",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) updateSiteCredentialQuery(c *btypes.SiteCredential) *sqlf.Query"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) updateSiteCredentialQuery(c *btypes.SiteCredential) *sqlf.Query\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.Clock",
                    "documentation": {
                      "identifier": "Store.Clock",
                      "newPage": false,
                      "searchKey": "store.Store.Clock",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) Clock() func() time.Time"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) Clock() func() time.Time\n```\n\nClock returns the clock used by the Store. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.DB",
                    "documentation": {
                      "identifier": "Store.DB",
                      "newPage": false,
                      "searchKey": "store.Store.DB",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) DB() dbutil.DB"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) DB() dbutil.DB\n```\n\nDB returns the underlying dbutil.DB that this Store was instantiated with. It's here for legacy reason to pass the dbutil.DB to a repos.Store while repos.Store doesn't accept a basestore.TransactableHandle yet. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.Handle",
                    "documentation": {
                      "identifier": "Store.Handle",
                      "newPage": false,
                      "searchKey": "store.Store.Handle",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) Handle() *basestore.TransactableHandle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) Handle() *basestore.TransactableHandle\n```\n\nHandle returns the underlying transactable database handle. Needed to implement the ShareableStore interface. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.With",
                    "documentation": {
                      "identifier": "Store.With",
                      "newPage": false,
                      "searchKey": "store.Store.With",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) With(other basestore.ShareableStore) *Store"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) With(other basestore.ShareableStore) *Store\n```\n\nWith creates a new Store with the given basestore.Shareable store as the underlying basestore.Store. Needed to implement the basestore.Store interface \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.Transact",
                    "documentation": {
                      "identifier": "Store.Transact",
                      "newPage": false,
                      "searchKey": "store.Store.Transact",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) Transact(ctx context.Context) (*Store, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) Transact(ctx context.Context) (*Store, error)\n```\n\nTransact creates a new transaction. It's required to implement this method and wrap the Transact method of the underlying basestore.Store. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.Repos",
                    "documentation": {
                      "identifier": "Store.Repos",
                      "newPage": false,
                      "searchKey": "store.Store.Repos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) Repos() *database.RepoStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) Repos() *database.RepoStore\n```\n\nRepos returns a database.RepoStore using the same connection as this store. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.ExternalServices",
                    "documentation": {
                      "identifier": "Store.ExternalServices",
                      "newPage": false,
                      "searchKey": "store.Store.ExternalServices",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) ExternalServices() *database.ExternalServiceStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) ExternalServices() *database.ExternalServiceStore\n```\n\nExternalServices returns a database.ExternalServiceStore using the same connection as this store. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.UserCredentials",
                    "documentation": {
                      "identifier": "Store.UserCredentials",
                      "newPage": false,
                      "searchKey": "store.Store.UserCredentials",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) UserCredentials() *database.UserCredentialsStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) UserCredentials() *database.UserCredentialsStore\n```\n\nUserCredentials returns a database.UserCredentialsStore using the same connection as this store. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.query",
                    "documentation": {
                      "identifier": "Store.query",
                      "newPage": false,
                      "searchKey": "store.Store.query",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) query(ctx context.Context, q *sqlf.Query, sc scanFunc) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) query(ctx context.Context, q *sqlf.Query, sc scanFunc) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#Store.queryCount",
                    "documentation": {
                      "identifier": "Store.queryCount",
                      "newPage": false,
                      "searchKey": "store.Store.queryCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Store) queryCount(ctx context.Context, q *sqlf.Query) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Store) queryCount(ctx context.Context, q *sqlf.Query) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#scanner",
              "documentation": {
                "identifier": "scanner",
                "newPage": false,
                "searchKey": "store.scanner",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type scanner interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype scanner interface {\n\tScan(dst ...interface{}) error\n}\n```\n\nscanner captures the Scan method of sql.Rows and sql.Row \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#scanFunc",
              "documentation": {
                "identifier": "scanFunc",
                "newPage": false,
                "searchKey": "store.scanFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type scanFunc func(github.com/sourcegraph/sourcegraph/enterprise/internal/batches/store.scanner) (err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype scanFunc func(scanner) (err error)\n```\n\na scanFunc scans one or more rows from a scanner, returning the last id column scanned and the count of scanned rows. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#LimitOpts",
              "documentation": {
                "identifier": "LimitOpts",
                "newPage": false,
                "searchKey": "store.LimitOpts",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LimitOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LimitOpts struct {\n\tLimit int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#LimitOpts.DBLimit",
                    "documentation": {
                      "identifier": "LimitOpts.DBLimit",
                      "newPage": false,
                      "searchKey": "store.LimitOpts.DBLimit",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o LimitOpts) DBLimit() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o LimitOpts) DBLimit() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/store#LimitOpts.ToDB",
                    "documentation": {
                      "identifier": "LimitOpts.ToDB",
                      "newPage": false,
                      "searchKey": "store.LimitOpts.ToDB",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o LimitOpts) ToDB() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o LimitOpts) ToDB() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#storeTestFunc",
              "documentation": {
                "identifier": "storeTestFunc",
                "newPage": false,
                "searchKey": "store.storeTestFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type storeTestFunc func(*testing.T, context.Context, *github.com/sourcegraph/sourcegraph/enterprise/internal/batches/store.Store, github.com/sourcegraph/sourcegraph/enterprise/internal/batches/testing.Clock)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype storeTestFunc func(*testing.T, context.Context, *Store, ct.Clock)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/batches/store#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#countBatchChangesQuery",
              "documentation": {
                "identifier": "countBatchChangesQuery",
                "newPage": false,
                "searchKey": "store.countBatchChangesQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func countBatchChangesQuery(opts *CountBatchChangesOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc countBatchChangesQuery(opts *CountBatchChangesOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getBatchChangeQuery",
              "documentation": {
                "identifier": "getBatchChangeQuery",
                "newPage": false,
                "searchKey": "store.getBatchChangeQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getBatchChangeQuery(opts *GetBatchChangeOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getBatchChangeQuery(opts *GetBatchChangeOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getBatchChangeDiffStatQuery",
              "documentation": {
                "identifier": "getBatchChangeDiffStatQuery",
                "newPage": false,
                "searchKey": "store.getBatchChangeDiffStatQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getBatchChangeDiffStatQuery(opts GetBatchChangeDiffStatOpts, authzConds *sqlf.Query) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getBatchChangeDiffStatQuery(opts GetBatchChangeDiffStatOpts, authzConds *sqlf.Query) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listBatchChangesQuery",
              "documentation": {
                "identifier": "listBatchChangesQuery",
                "newPage": false,
                "searchKey": "store.listBatchChangesQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func listBatchChangesQuery(opts *ListBatchChangesOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc listBatchChangesQuery(opts *ListBatchChangesOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#scanBatchChange",
              "documentation": {
                "identifier": "scanBatchChange",
                "newPage": false,
                "searchKey": "store.scanBatchChange",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanBatchChange(c *btypes.BatchChange, s scanner) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanBatchChange(c *btypes.BatchChange, s scanner) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getBatchSpecQuery",
              "documentation": {
                "identifier": "getBatchSpecQuery",
                "newPage": false,
                "searchKey": "store.getBatchSpecQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getBatchSpecQuery(opts *GetBatchSpecOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getBatchSpecQuery(opts *GetBatchSpecOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getNewestBatchSpecQuery",
              "documentation": {
                "identifier": "getNewestBatchSpecQuery",
                "newPage": false,
                "searchKey": "store.getNewestBatchSpecQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getNewestBatchSpecQuery(opts *GetNewestBatchSpecOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getNewestBatchSpecQuery(opts *GetNewestBatchSpecOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listBatchSpecsQuery",
              "documentation": {
                "identifier": "listBatchSpecsQuery",
                "newPage": false,
                "searchKey": "store.listBatchSpecsQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func listBatchSpecsQuery(opts *ListBatchSpecsOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc listBatchSpecsQuery(opts *ListBatchSpecsOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#scanBatchSpec",
              "documentation": {
                "identifier": "scanBatchSpec",
                "newPage": false,
                "searchKey": "store.scanBatchSpec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanBatchSpec(c *btypes.BatchSpec, s scanner) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanBatchSpec(c *btypes.BatchSpec, s scanner) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getBulkOperationQuery",
              "documentation": {
                "identifier": "getBulkOperationQuery",
                "newPage": false,
                "searchKey": "store.getBulkOperationQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getBulkOperationQuery(opts *GetBulkOperationOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getBulkOperationQuery(opts *GetBulkOperationOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listBulkOperationsQuery",
              "documentation": {
                "identifier": "listBulkOperationsQuery",
                "newPage": false,
                "searchKey": "store.listBulkOperationsQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func listBulkOperationsQuery(opts *ListBulkOperationsOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc listBulkOperationsQuery(opts *ListBulkOperationsOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#countBulkOperationsQuery",
              "documentation": {
                "identifier": "countBulkOperationsQuery",
                "newPage": false,
                "searchKey": "store.countBulkOperationsQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func countBulkOperationsQuery(opts *CountBulkOperationsOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc countBulkOperationsQuery(opts *CountBulkOperationsOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listBulkOperationErrorsQuery",
              "documentation": {
                "identifier": "listBulkOperationErrorsQuery",
                "newPage": false,
                "searchKey": "store.listBulkOperationErrorsQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func listBulkOperationErrorsQuery(opts *ListBulkOperationErrorsOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc listBulkOperationErrorsQuery(opts *ListBulkOperationErrorsOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#scanBulkOperation",
              "documentation": {
                "identifier": "scanBulkOperation",
                "newPage": false,
                "searchKey": "store.scanBulkOperation",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanBulkOperation(b *btypes.BulkOperation, s scanner) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanBulkOperation(b *btypes.BulkOperation, s scanner) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#scanBulkOperationError",
              "documentation": {
                "identifier": "scanBulkOperationError",
                "newPage": false,
                "searchKey": "store.scanBulkOperationError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanBulkOperationError(b *btypes.BulkOperationError, s scanner) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanBulkOperationError(b *btypes.BulkOperationError, s scanner) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getChangesetEventQuery",
              "documentation": {
                "identifier": "getChangesetEventQuery",
                "newPage": false,
                "searchKey": "store.getChangesetEventQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getChangesetEventQuery(opts *GetChangesetEventOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getChangesetEventQuery(opts *GetChangesetEventOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listChangesetEventsQuery",
              "documentation": {
                "identifier": "listChangesetEventsQuery",
                "newPage": false,
                "searchKey": "store.listChangesetEventsQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func listChangesetEventsQuery(opts *ListChangesetEventsOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc listChangesetEventsQuery(opts *ListChangesetEventsOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#countChangesetEventsQuery",
              "documentation": {
                "identifier": "countChangesetEventsQuery",
                "newPage": false,
                "searchKey": "store.countChangesetEventsQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func countChangesetEventsQuery(opts *CountChangesetEventsOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc countChangesetEventsQuery(opts *CountChangesetEventsOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#batchChangesetEventsQuery",
              "documentation": {
                "identifier": "batchChangesetEventsQuery",
                "newPage": false,
                "searchKey": "store.batchChangesetEventsQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func batchChangesetEventsQuery(fmtstr string, es []*btypes.ChangesetEvent) (*sqlf.Query, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc batchChangesetEventsQuery(fmtstr string, es []*btypes.ChangesetEvent) (*sqlf.Query, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#scanChangesetEvent",
              "documentation": {
                "identifier": "scanChangesetEvent",
                "newPage": false,
                "searchKey": "store.scanChangesetEvent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanChangesetEvent(e *btypes.ChangesetEvent, s scanner) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanChangesetEvent(e *btypes.ChangesetEvent, s scanner) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getChangesetJobQuery",
              "documentation": {
                "identifier": "getChangesetJobQuery",
                "newPage": false,
                "searchKey": "store.getChangesetJobQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getChangesetJobQuery(opts *GetChangesetJobOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getChangesetJobQuery(opts *GetChangesetJobOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#scanChangesetJob",
              "documentation": {
                "identifier": "scanChangesetJob",
                "newPage": false,
                "searchKey": "store.scanChangesetJob",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanChangesetJob(c *btypes.ChangesetJob, s scanner) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanChangesetJob(c *btypes.ChangesetJob, s scanner) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#ScanFirstChangesetJob",
              "documentation": {
                "identifier": "ScanFirstChangesetJob",
                "newPage": false,
                "searchKey": "store.ScanFirstChangesetJob",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ScanFirstChangesetJob(rows *sql.Rows, err error) (*btypes.ChangesetJob, bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ScanFirstChangesetJob(rows *sql.Rows, err error) (*btypes.ChangesetJob, bool, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#scanChangesetJobs",
              "documentation": {
                "identifier": "scanChangesetJobs",
                "newPage": false,
                "searchKey": "store.scanChangesetJobs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanChangesetJobs(rows *sql.Rows, queryErr error) ([]*btypes.ChangesetJob, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanChangesetJobs(rows *sql.Rows, queryErr error) ([]*btypes.ChangesetJob, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#countChangesetSpecsQuery",
              "documentation": {
                "identifier": "countChangesetSpecsQuery",
                "newPage": false,
                "searchKey": "store.countChangesetSpecsQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func countChangesetSpecsQuery(opts *CountChangesetSpecsOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc countChangesetSpecsQuery(opts *CountChangesetSpecsOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getChangesetSpecQuery",
              "documentation": {
                "identifier": "getChangesetSpecQuery",
                "newPage": false,
                "searchKey": "store.getChangesetSpecQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getChangesetSpecQuery(opts *GetChangesetSpecOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getChangesetSpecQuery(opts *GetChangesetSpecOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listChangesetSpecsQuery",
              "documentation": {
                "identifier": "listChangesetSpecsQuery",
                "newPage": false,
                "searchKey": "store.listChangesetSpecsQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func listChangesetSpecsQuery(opts *ListChangesetSpecsOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc listChangesetSpecsQuery(opts *ListChangesetSpecsOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#scanChangesetSpec",
              "documentation": {
                "identifier": "scanChangesetSpec",
                "newPage": false,
                "searchKey": "store.scanChangesetSpec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanChangesetSpec(c *btypes.ChangesetSpec, s scanner) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanChangesetSpec(c *btypes.ChangesetSpec, s scanner) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getRewirerMappingsQuery",
              "documentation": {
                "identifier": "getRewirerMappingsQuery",
                "newPage": false,
                "searchKey": "store.getRewirerMappingsQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getRewirerMappingsQuery(opts GetRewirerMappingsOpts) (*sqlf.Query, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getRewirerMappingsQuery(opts GetRewirerMappingsOpts) (*sqlf.Query, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getRewirerMappingCurrentState",
              "documentation": {
                "identifier": "getRewirerMappingCurrentState",
                "newPage": false,
                "searchKey": "store.getRewirerMappingCurrentState",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getRewirerMappingCurrentState(state *btypes.ChangesetState) (*sqlf.Query, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getRewirerMappingCurrentState(state *btypes.ChangesetState) (*sqlf.Query, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getRewirerMappingTextSearch",
              "documentation": {
                "identifier": "getRewirerMappingTextSearch",
                "newPage": false,
                "searchKey": "store.getRewirerMappingTextSearch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getRewirerMappingTextSearch(terms []search.TextSearchTerm) (detachTextSearch, viewTextSearch *sqlf.Query)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getRewirerMappingTextSearch(terms []search.TextSearchTerm) (detachTextSearch, viewTextSearch *sqlf.Query)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#countChangesetsQuery",
              "documentation": {
                "identifier": "countChangesetsQuery",
                "newPage": false,
                "searchKey": "store.countChangesetsQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func countChangesetsQuery(opts *CountChangesetsOpts, authzConds *sqlf.Query) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc countChangesetsQuery(opts *CountChangesetsOpts, authzConds *sqlf.Query) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getChangesetQuery",
              "documentation": {
                "identifier": "getChangesetQuery",
                "newPage": false,
                "searchKey": "store.getChangesetQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getChangesetQuery(opts *GetChangesetOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getChangesetQuery(opts *GetChangesetOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#scanChangesetSyncData",
              "documentation": {
                "identifier": "scanChangesetSyncData",
                "newPage": false,
                "searchKey": "store.scanChangesetSyncData",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanChangesetSyncData(h *btypes.ChangesetSyncData, s scanner) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanChangesetSyncData(h *btypes.ChangesetSyncData, s scanner) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listChangesetSyncDataQuery",
              "documentation": {
                "identifier": "listChangesetSyncDataQuery",
                "newPage": false,
                "searchKey": "store.listChangesetSyncDataQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func listChangesetSyncDataQuery(opts ListChangesetSyncDataOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc listChangesetSyncDataQuery(opts ListChangesetSyncDataOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listChangesetsQuery",
              "documentation": {
                "identifier": "listChangesetsQuery",
                "newPage": false,
                "searchKey": "store.listChangesetsQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func listChangesetsQuery(opts *ListChangesetsOpts, authzConds *sqlf.Query) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc listChangesetsQuery(opts *ListChangesetsOpts, authzConds *sqlf.Query) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#ScanFirstChangeset",
              "documentation": {
                "identifier": "ScanFirstChangeset",
                "newPage": false,
                "searchKey": "store.ScanFirstChangeset",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ScanFirstChangeset(rows *sql.Rows, err error) (*btypes.Changeset, bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ScanFirstChangeset(rows *sql.Rows, err error) (*btypes.Changeset, bool, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#scanChangesets",
              "documentation": {
                "identifier": "scanChangesets",
                "newPage": false,
                "searchKey": "store.scanChangesets",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanChangesets(rows *sql.Rows, queryErr error) ([]*btypes.Changeset, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanChangesets(rows *sql.Rows, queryErr error) ([]*btypes.Changeset, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#scanChangeset",
              "documentation": {
                "identifier": "scanChangeset",
                "newPage": false,
                "searchKey": "store.scanChangeset",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanChangeset(t *btypes.Changeset, s scanner) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanChangeset(t *btypes.Changeset, s scanner) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#archivedInBatchChange",
              "documentation": {
                "identifier": "archivedInBatchChange",
                "newPage": false,
                "searchKey": "store.archivedInBatchChange",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archivedInBatchChange(batchChangeID string) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archivedInBatchChange(batchChangeID string) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getChangesetsStatsQuery",
              "documentation": {
                "identifier": "getChangesetsStatsQuery",
                "newPage": false,
                "searchKey": "store.getChangesetsStatsQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getChangesetsStatsQuery(batchChangeID int64) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getChangesetsStatsQuery(batchChangeID int64) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listCodeHostsQuery",
              "documentation": {
                "identifier": "listCodeHostsQuery",
                "newPage": false,
                "searchKey": "store.listCodeHostsQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func listCodeHostsQuery(opts ListCodeHostsOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc listCodeHostsQuery(opts ListCodeHostsOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#scanCodeHost",
              "documentation": {
                "identifier": "scanCodeHost",
                "newPage": false,
                "searchKey": "store.scanCodeHost",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanCodeHost(c *btypes.CodeHost, sc scanner) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanCodeHost(c *btypes.CodeHost, sc scanner) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getExternalServiceIDsQuery",
              "documentation": {
                "identifier": "getExternalServiceIDsQuery",
                "newPage": false,
                "searchKey": "store.getExternalServiceIDsQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getExternalServiceIDsQuery(opts GetExternalServiceIDsOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getExternalServiceIDsQuery(opts GetExternalServiceIDsOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#createSiteCredentialQuery",
              "documentation": {
                "identifier": "createSiteCredentialQuery",
                "newPage": false,
                "searchKey": "store.createSiteCredentialQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func createSiteCredentialQuery(c *btypes.SiteCredential) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc createSiteCredentialQuery(c *btypes.SiteCredential) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#deleteSiteCredentialQuery",
              "documentation": {
                "identifier": "deleteSiteCredentialQuery",
                "newPage": false,
                "searchKey": "store.deleteSiteCredentialQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func deleteSiteCredentialQuery(id int64) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc deleteSiteCredentialQuery(id int64) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#getSiteCredentialQuery",
              "documentation": {
                "identifier": "getSiteCredentialQuery",
                "newPage": false,
                "searchKey": "store.getSiteCredentialQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getSiteCredentialQuery(opts GetSiteCredentialOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getSiteCredentialQuery(opts GetSiteCredentialOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#listSiteCredentialsQuery",
              "documentation": {
                "identifier": "listSiteCredentialsQuery",
                "newPage": false,
                "searchKey": "store.listSiteCredentialsQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func listSiteCredentialsQuery(opts ListSiteCredentialsOpts) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc listSiteCredentialsQuery(opts ListSiteCredentialsOpts) *sqlf.Query\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#scanSiteCredential",
              "documentation": {
                "identifier": "scanSiteCredential",
                "newPage": false,
                "searchKey": "store.scanSiteCredential",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanSiteCredential(c *btypes.SiteCredential, sc scanner) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanSiteCredential(c *btypes.SiteCredential, sc scanner) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#RandomID",
              "documentation": {
                "identifier": "RandomID",
                "newPage": false,
                "searchKey": "store.RandomID",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RandomID() (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RandomID() (string, error)\n```\n\nRandomID generates a random ID to be used for identifiers in the database. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#scanAll",
              "documentation": {
                "identifier": "scanAll",
                "newPage": false,
                "searchKey": "store.scanAll",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanAll(rows *sql.Rows, scan scanFunc) (err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanAll(rows *sql.Rows, scan scanFunc) (err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#jsonbColumn",
              "documentation": {
                "identifier": "jsonbColumn",
                "newPage": false,
                "searchKey": "store.jsonbColumn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func jsonbColumn(metadata interface{}) (msg json.RawMessage, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc jsonbColumn(metadata interface{}) (msg json.RawMessage, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#nullInt32Column",
              "documentation": {
                "identifier": "nullInt32Column",
                "newPage": false,
                "searchKey": "store.nullInt32Column",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func nullInt32Column(n int32) *int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nullInt32Column(n int32) *int32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#nullInt64Column",
              "documentation": {
                "identifier": "nullInt64Column",
                "newPage": false,
                "searchKey": "store.nullInt64Column",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func nullInt64Column(n int64) *int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nullInt64Column(n int64) *int64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#nullTimeColumn",
              "documentation": {
                "identifier": "nullTimeColumn",
                "newPage": false,
                "searchKey": "store.nullTimeColumn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func nullTimeColumn(t time.Time) *time.Time"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nullTimeColumn(t time.Time) *time.Time\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#nullStringColumn",
              "documentation": {
                "identifier": "nullStringColumn",
                "newPage": false,
                "searchKey": "store.nullStringColumn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func nullStringColumn(s string) *string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nullStringColumn(s string) *string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#textSearchTermToClause",
              "documentation": {
                "identifier": "textSearchTermToClause",
                "newPage": false,
                "searchKey": "store.textSearchTermToClause",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func textSearchTermToClause(term search.TextSearchTerm, fields ...*sqlf.Query) *sqlf.Query"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc textSearchTermToClause(term search.TextSearchTerm, fields ...*sqlf.Query) *sqlf.Query\n```\n\ntextSearchTermToClause generates a WHERE clause that can be used in a query to represent searching for the given term over the given fields. \n\nNote that there must be at least one field: failing to include any fields will likely result in broken queries! \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#testStoreBatchChanges",
              "documentation": {
                "identifier": "testStoreBatchChanges",
                "newPage": false,
                "searchKey": "store.testStoreBatchChanges",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStoreBatchChanges(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStoreBatchChanges(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#testUserDeleteCascades",
              "documentation": {
                "identifier": "testUserDeleteCascades",
                "newPage": false,
                "searchKey": "store.testUserDeleteCascades",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testUserDeleteCascades(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testUserDeleteCascades(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#testStoreBatchSpecs",
              "documentation": {
                "identifier": "testStoreBatchSpecs",
                "newPage": false,
                "searchKey": "store.testStoreBatchSpecs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStoreBatchSpecs(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStoreBatchSpecs(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#testStoreBulkOperations",
              "documentation": {
                "identifier": "testStoreBulkOperations",
                "newPage": false,
                "searchKey": "store.testStoreBulkOperations",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStoreBulkOperations(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStoreBulkOperations(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#testStoreChangesetEvents",
              "documentation": {
                "identifier": "testStoreChangesetEvents",
                "newPage": false,
                "searchKey": "store.testStoreChangesetEvents",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStoreChangesetEvents(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStoreChangesetEvents(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#testStoreChangesetJobs",
              "documentation": {
                "identifier": "testStoreChangesetJobs",
                "newPage": false,
                "searchKey": "store.testStoreChangesetJobs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStoreChangesetJobs(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStoreChangesetJobs(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#testStoreChangesetSpecs",
              "documentation": {
                "identifier": "testStoreChangesetSpecs",
                "newPage": false,
                "searchKey": "store.testStoreChangesetSpecs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStoreChangesetSpecs(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStoreChangesetSpecs(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#testStoreChangesetSpecsCurrentState",
              "documentation": {
                "identifier": "testStoreChangesetSpecsCurrentState",
                "newPage": false,
                "searchKey": "store.testStoreChangesetSpecsCurrentState",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStoreChangesetSpecsCurrentState(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStoreChangesetSpecsCurrentState(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#testStoreChangesetSpecsCurrentStateAndTextSearch",
              "documentation": {
                "identifier": "testStoreChangesetSpecsCurrentStateAndTextSearch",
                "newPage": false,
                "searchKey": "store.testStoreChangesetSpecsCurrentStateAndTextSearch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStoreChangesetSpecsCurrentStateAndTextSearch(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStoreChangesetSpecsCurrentStateAndTextSearch(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#testStoreChangesetSpecsTextSearch",
              "documentation": {
                "identifier": "testStoreChangesetSpecsTextSearch",
                "newPage": false,
                "searchKey": "store.testStoreChangesetSpecsTextSearch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStoreChangesetSpecsTextSearch(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStoreChangesetSpecsTextSearch(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#testStoreChangesets",
              "documentation": {
                "identifier": "testStoreChangesets",
                "newPage": false,
                "searchKey": "store.testStoreChangesets",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStoreChangesets(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStoreChangesets(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#testStoreListChangesetSyncData",
              "documentation": {
                "identifier": "testStoreListChangesetSyncData",
                "newPage": false,
                "searchKey": "store.testStoreListChangesetSyncData",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStoreListChangesetSyncData(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStoreListChangesetSyncData(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#testStoreListChangesetsTextSearch",
              "documentation": {
                "identifier": "testStoreListChangesetsTextSearch",
                "newPage": false,
                "searchKey": "store.testStoreListChangesetsTextSearch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStoreListChangesetsTextSearch(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStoreListChangesetsTextSearch(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#testStoreChangesetScheduling",
              "documentation": {
                "identifier": "testStoreChangesetScheduling",
                "newPage": false,
                "searchKey": "store.testStoreChangesetScheduling",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStoreChangesetScheduling(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStoreChangesetScheduling(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)\n```\n\ntestStoreChangesetScheduling provides tests for schedule-related methods on the Store. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#testStoreCodeHost",
              "documentation": {
                "identifier": "testStoreCodeHost",
                "newPage": false,
                "searchKey": "store.testStoreCodeHost",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStoreCodeHost(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStoreCodeHost(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#TestIntegration",
              "documentation": {
                "identifier": "TestIntegration",
                "newPage": false,
                "searchKey": "store.TestIntegration",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIntegration(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIntegration(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#testStoreSiteCredentials",
              "documentation": {
                "identifier": "testStoreSiteCredentials",
                "newPage": false,
                "searchKey": "store.testStoreSiteCredentials",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStoreSiteCredentials(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStoreSiteCredentials(t *testing.T, ctx context.Context, s *Store, clock ct.Clock)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#storeTest",
              "documentation": {
                "identifier": "storeTest",
                "newPage": false,
                "searchKey": "store.storeTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func storeTest(db *sql.DB, key encryption.Key, f storeTestFunc) func(*testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc storeTest(db *sql.DB, key encryption.Key, f storeTestFunc) func(*testing.T)\n```\n\nstoreTest converts a storeTestFunc into a func(*testing.T) in which all dependencies are set up and injected into the storeTestFunc. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/store#TestTextSearchTermToClause",
              "documentation": {
                "identifier": "TestTextSearchTermToClause",
                "newPage": false,
                "searchKey": "store.TestTextSearchTermToClause",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTextSearchTermToClause(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTextSearchTermToClause(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
