{
  "pathID": "/enterprise/internal/batches/types",
  "documentation": {
    "identifier": "types",
    "newPage": true,
    "searchKey": "enterprise/internal/batches/types",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package types"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "pathID": "/enterprise/internal/batches/types/scheduler"
    },
    {
      "node": {
        "pathID": "/enterprise/internal/batches/types#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#BatchChangeStateAny",
              "documentation": {
                "identifier": "BatchChangeStateAny",
                "newPage": false,
                "searchKey": "types.BatchChangeStateAny",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const BatchChangeStateAny"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst BatchChangeStateAny BatchChangeState = \"ANY\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#BatchChangeStateClosed",
              "documentation": {
                "identifier": "BatchChangeStateClosed",
                "newPage": false,
                "searchKey": "types.BatchChangeStateClosed",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const BatchChangeStateClosed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst BatchChangeStateClosed BatchChangeState = \"CLOSED\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#BatchChangeStateOpen",
              "documentation": {
                "identifier": "BatchChangeStateOpen",
                "newPage": false,
                "searchKey": "types.BatchChangeStateOpen",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const BatchChangeStateOpen"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst BatchChangeStateOpen BatchChangeState = \"OPEN\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#BatchSpecTTL",
              "documentation": {
                "identifier": "BatchSpecTTL",
                "newPage": false,
                "searchKey": "types.BatchSpecTTL",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const BatchSpecTTL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst BatchSpecTTL = 7 * 24 * time.Hour\n```\n\nBatchSpecTTL specifies the TTL of BatchSpecs that haven't been applied yet. It's set to 1 week. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#BulkOperationStateCompleted",
              "documentation": {
                "identifier": "BulkOperationStateCompleted",
                "newPage": false,
                "searchKey": "types.BulkOperationStateCompleted",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const BulkOperationStateCompleted"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst BulkOperationStateCompleted BulkOperationState = \"COMPLETED\"\n```\n\nBulkOperationState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#BulkOperationStateFailed",
              "documentation": {
                "identifier": "BulkOperationStateFailed",
                "newPage": false,
                "searchKey": "types.BulkOperationStateFailed",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const BulkOperationStateFailed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst BulkOperationStateFailed BulkOperationState = \"FAILED\"\n```\n\nBulkOperationState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#BulkOperationStateProcessing",
              "documentation": {
                "identifier": "BulkOperationStateProcessing",
                "newPage": false,
                "searchKey": "types.BulkOperationStateProcessing",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const BulkOperationStateProcessing"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst BulkOperationStateProcessing BulkOperationState = \"PROCESSING\"\n```\n\nBulkOperationState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetCheckStateFailed",
              "documentation": {
                "identifier": "ChangesetCheckStateFailed",
                "newPage": false,
                "searchKey": "types.ChangesetCheckStateFailed",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetCheckStateFailed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetCheckStateFailed ChangesetCheckState = \"FAILED\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetCheckStatePassed",
              "documentation": {
                "identifier": "ChangesetCheckStatePassed",
                "newPage": false,
                "searchKey": "types.ChangesetCheckStatePassed",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetCheckStatePassed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetCheckStatePassed ChangesetCheckState = \"PASSED\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetCheckStatePending",
              "documentation": {
                "identifier": "ChangesetCheckStatePending",
                "newPage": false,
                "searchKey": "types.ChangesetCheckStatePending",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetCheckStatePending"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetCheckStatePending ChangesetCheckState = \"PENDING\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetCheckStateUnknown",
              "documentation": {
                "identifier": "ChangesetCheckStateUnknown",
                "newPage": false,
                "searchKey": "types.ChangesetCheckStateUnknown",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetCheckStateUnknown"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetCheckStateUnknown ChangesetCheckState = \"UNKNOWN\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindBitbucketServerApproved",
              "documentation": {
                "identifier": "ChangesetEventKindBitbucketServerApproved",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindBitbucketServerApproved",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindBitbucketServerApproved"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindBitbucketServerApproved ChangesetEventKind = \"bitbucketserver:approved\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindBitbucketServerCommented",
              "documentation": {
                "identifier": "ChangesetEventKindBitbucketServerCommented",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindBitbucketServerCommented",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindBitbucketServerCommented"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindBitbucketServerCommented ChangesetEventKind = \"bitbucketserver:commented\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindBitbucketServerCommitStatus",
              "documentation": {
                "identifier": "ChangesetEventKindBitbucketServerCommitStatus",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindBitbucketServerCommitStatus",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindBitbucketServerCommitStatus"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindBitbucketServerCommitStatus ChangesetEventKind = ...\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindBitbucketServerDeclined",
              "documentation": {
                "identifier": "ChangesetEventKindBitbucketServerDeclined",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindBitbucketServerDeclined",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindBitbucketServerDeclined"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindBitbucketServerDeclined ChangesetEventKind = \"bitbucketserver:declined\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindBitbucketServerDismissed",
              "documentation": {
                "identifier": "ChangesetEventKindBitbucketServerDismissed",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindBitbucketServerDismissed",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindBitbucketServerDismissed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindBitbucketServerDismissed ChangesetEventKind = ...\n```\n\nValid ChangesetEvent kinds \n\nBitbucketServer calls this an Unapprove event but we've called it Dismissed to more clearly convey that it only occurs when a request for changes has been dismissed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindBitbucketServerMerged",
              "documentation": {
                "identifier": "ChangesetEventKindBitbucketServerMerged",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindBitbucketServerMerged",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindBitbucketServerMerged"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindBitbucketServerMerged ChangesetEventKind = \"bitbucketserver:merged\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindBitbucketServerOpened",
              "documentation": {
                "identifier": "ChangesetEventKindBitbucketServerOpened",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindBitbucketServerOpened",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindBitbucketServerOpened"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindBitbucketServerOpened ChangesetEventKind = \"bitbucketserver:opened\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindBitbucketServerReopened",
              "documentation": {
                "identifier": "ChangesetEventKindBitbucketServerReopened",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindBitbucketServerReopened",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindBitbucketServerReopened"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindBitbucketServerReopened ChangesetEventKind = \"bitbucketserver:reopened\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindBitbucketServerRescoped",
              "documentation": {
                "identifier": "ChangesetEventKindBitbucketServerRescoped",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindBitbucketServerRescoped",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindBitbucketServerRescoped"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindBitbucketServerRescoped ChangesetEventKind = \"bitbucketserver:rescoped\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindBitbucketServerReviewed",
              "documentation": {
                "identifier": "ChangesetEventKindBitbucketServerReviewed",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindBitbucketServerReviewed",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindBitbucketServerReviewed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindBitbucketServerReviewed ChangesetEventKind = \"bitbucketserver:reviewed\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindBitbucketServerUnapproved",
              "documentation": {
                "identifier": "ChangesetEventKindBitbucketServerUnapproved",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindBitbucketServerUnapproved",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindBitbucketServerUnapproved"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindBitbucketServerUnapproved ChangesetEventKind = \"bitbucketserver:unapproved\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindBitbucketServerUpdated",
              "documentation": {
                "identifier": "ChangesetEventKindBitbucketServerUpdated",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindBitbucketServerUpdated",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindBitbucketServerUpdated"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindBitbucketServerUpdated ChangesetEventKind = \"bitbucketserver:updated\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindCheckRun",
              "documentation": {
                "identifier": "ChangesetEventKindCheckRun",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindCheckRun",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindCheckRun"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindCheckRun ChangesetEventKind = \"github:check_run\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindCheckSuite",
              "documentation": {
                "identifier": "ChangesetEventKindCheckSuite",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindCheckSuite",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindCheckSuite"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindCheckSuite ChangesetEventKind = \"github:check_suite\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindCommitStatus",
              "documentation": {
                "identifier": "ChangesetEventKindCommitStatus",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindCommitStatus",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindCommitStatus"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindCommitStatus ChangesetEventKind = \"github:commit_status\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitHubAssigned",
              "documentation": {
                "identifier": "ChangesetEventKindGitHubAssigned",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitHubAssigned",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitHubAssigned"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitHubAssigned ChangesetEventKind = \"github:assigned\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitHubClosed",
              "documentation": {
                "identifier": "ChangesetEventKindGitHubClosed",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitHubClosed",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitHubClosed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitHubClosed ChangesetEventKind = \"github:closed\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitHubCommented",
              "documentation": {
                "identifier": "ChangesetEventKindGitHubCommented",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitHubCommented",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitHubCommented"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitHubCommented ChangesetEventKind = \"github:commented\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitHubCommit",
              "documentation": {
                "identifier": "ChangesetEventKindGitHubCommit",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitHubCommit",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitHubCommit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitHubCommit ChangesetEventKind = \"github:commit\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitHubConvertToDraft",
              "documentation": {
                "identifier": "ChangesetEventKindGitHubConvertToDraft",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitHubConvertToDraft",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitHubConvertToDraft"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitHubConvertToDraft ChangesetEventKind = \"github:convert_to_draft\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitHubLabeled",
              "documentation": {
                "identifier": "ChangesetEventKindGitHubLabeled",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitHubLabeled",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitHubLabeled"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitHubLabeled ChangesetEventKind = \"github:labeled\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitHubMerged",
              "documentation": {
                "identifier": "ChangesetEventKindGitHubMerged",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitHubMerged",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitHubMerged"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitHubMerged ChangesetEventKind = \"github:merged\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitHubReadyForReview",
              "documentation": {
                "identifier": "ChangesetEventKindGitHubReadyForReview",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitHubReadyForReview",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitHubReadyForReview"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitHubReadyForReview ChangesetEventKind = \"github:ready_for_review\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitHubRenamedTitle",
              "documentation": {
                "identifier": "ChangesetEventKindGitHubRenamedTitle",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitHubRenamedTitle",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitHubRenamedTitle"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitHubRenamedTitle ChangesetEventKind = \"github:renamed\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitHubReopened",
              "documentation": {
                "identifier": "ChangesetEventKindGitHubReopened",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitHubReopened",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitHubReopened"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitHubReopened ChangesetEventKind = \"github:reopened\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitHubReviewCommented",
              "documentation": {
                "identifier": "ChangesetEventKindGitHubReviewCommented",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitHubReviewCommented",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitHubReviewCommented"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitHubReviewCommented ChangesetEventKind = \"github:review_commented\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitHubReviewDismissed",
              "documentation": {
                "identifier": "ChangesetEventKindGitHubReviewDismissed",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitHubReviewDismissed",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitHubReviewDismissed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitHubReviewDismissed ChangesetEventKind = \"github:review_dismissed\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitHubReviewRequestRemoved",
              "documentation": {
                "identifier": "ChangesetEventKindGitHubReviewRequestRemoved",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitHubReviewRequestRemoved",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitHubReviewRequestRemoved"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitHubReviewRequestRemoved ChangesetEventKind = ...\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitHubReviewRequested",
              "documentation": {
                "identifier": "ChangesetEventKindGitHubReviewRequested",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitHubReviewRequested",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitHubReviewRequested"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitHubReviewRequested ChangesetEventKind = \"github:review_requested\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitHubReviewed",
              "documentation": {
                "identifier": "ChangesetEventKindGitHubReviewed",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitHubReviewed",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitHubReviewed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitHubReviewed ChangesetEventKind = \"github:reviewed\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitHubUnassigned",
              "documentation": {
                "identifier": "ChangesetEventKindGitHubUnassigned",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitHubUnassigned",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitHubUnassigned"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitHubUnassigned ChangesetEventKind = \"github:unassigned\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitHubUnlabeled",
              "documentation": {
                "identifier": "ChangesetEventKindGitHubUnlabeled",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitHubUnlabeled",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitHubUnlabeled"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitHubUnlabeled ChangesetEventKind = \"github:unlabeled\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitLabApproved",
              "documentation": {
                "identifier": "ChangesetEventKindGitLabApproved",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitLabApproved",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitLabApproved"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitLabApproved ChangesetEventKind = \"gitlab:approved\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitLabClosed",
              "documentation": {
                "identifier": "ChangesetEventKindGitLabClosed",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitLabClosed",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitLabClosed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitLabClosed ChangesetEventKind = \"gitlab:closed\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitLabMarkWorkInProgress",
              "documentation": {
                "identifier": "ChangesetEventKindGitLabMarkWorkInProgress",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitLabMarkWorkInProgress",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitLabMarkWorkInProgress"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitLabMarkWorkInProgress ChangesetEventKind = \"gitlab:mark_wip\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitLabMerged",
              "documentation": {
                "identifier": "ChangesetEventKindGitLabMerged",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitLabMerged",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitLabMerged"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitLabMerged ChangesetEventKind = \"gitlab:merged\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitLabPipeline",
              "documentation": {
                "identifier": "ChangesetEventKindGitLabPipeline",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitLabPipeline",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitLabPipeline"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitLabPipeline ChangesetEventKind = \"gitlab:pipeline\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitLabReopened",
              "documentation": {
                "identifier": "ChangesetEventKindGitLabReopened",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitLabReopened",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitLabReopened"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitLabReopened ChangesetEventKind = \"gitlab:reopened\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitLabUnapproved",
              "documentation": {
                "identifier": "ChangesetEventKindGitLabUnapproved",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitLabUnapproved",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitLabUnapproved"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitLabUnapproved ChangesetEventKind = \"gitlab:unapproved\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindGitLabUnmarkWorkInProgress",
              "documentation": {
                "identifier": "ChangesetEventKindGitLabUnmarkWorkInProgress",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindGitLabUnmarkWorkInProgress",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindGitLabUnmarkWorkInProgress"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindGitLabUnmarkWorkInProgress ChangesetEventKind = \"gitlab:unmark_wip\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKindInvalid",
              "documentation": {
                "identifier": "ChangesetEventKindInvalid",
                "newPage": false,
                "searchKey": "types.ChangesetEventKindInvalid",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetEventKindInvalid"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetEventKindInvalid ChangesetEventKind = \"invalid\"\n```\n\nValid ChangesetEvent kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetExternalStateClosed",
              "documentation": {
                "identifier": "ChangesetExternalStateClosed",
                "newPage": false,
                "searchKey": "types.ChangesetExternalStateClosed",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetExternalStateClosed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetExternalStateClosed ChangesetExternalState = \"CLOSED\"\n```\n\nChangesetExternalState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetExternalStateDeleted",
              "documentation": {
                "identifier": "ChangesetExternalStateDeleted",
                "newPage": false,
                "searchKey": "types.ChangesetExternalStateDeleted",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetExternalStateDeleted"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetExternalStateDeleted ChangesetExternalState = \"DELETED\"\n```\n\nChangesetExternalState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetExternalStateDraft",
              "documentation": {
                "identifier": "ChangesetExternalStateDraft",
                "newPage": false,
                "searchKey": "types.ChangesetExternalStateDraft",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetExternalStateDraft"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetExternalStateDraft ChangesetExternalState = \"DRAFT\"\n```\n\nChangesetExternalState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetExternalStateMerged",
              "documentation": {
                "identifier": "ChangesetExternalStateMerged",
                "newPage": false,
                "searchKey": "types.ChangesetExternalStateMerged",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetExternalStateMerged"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetExternalStateMerged ChangesetExternalState = \"MERGED\"\n```\n\nChangesetExternalState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetExternalStateOpen",
              "documentation": {
                "identifier": "ChangesetExternalStateOpen",
                "newPage": false,
                "searchKey": "types.ChangesetExternalStateOpen",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetExternalStateOpen"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetExternalStateOpen ChangesetExternalState = \"OPEN\"\n```\n\nChangesetExternalState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetJobStateCompleted",
              "documentation": {
                "identifier": "ChangesetJobStateCompleted",
                "newPage": false,
                "searchKey": "types.ChangesetJobStateCompleted",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetJobStateCompleted"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetJobStateCompleted ChangesetJobState = \"COMPLETED\"\n```\n\nChangesetJobState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetJobStateErrored",
              "documentation": {
                "identifier": "ChangesetJobStateErrored",
                "newPage": false,
                "searchKey": "types.ChangesetJobStateErrored",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetJobStateErrored"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetJobStateErrored ChangesetJobState = \"ERRORED\"\n```\n\nChangesetJobState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetJobStateFailed",
              "documentation": {
                "identifier": "ChangesetJobStateFailed",
                "newPage": false,
                "searchKey": "types.ChangesetJobStateFailed",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetJobStateFailed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetJobStateFailed ChangesetJobState = \"FAILED\"\n```\n\nChangesetJobState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetJobStateProcessing",
              "documentation": {
                "identifier": "ChangesetJobStateProcessing",
                "newPage": false,
                "searchKey": "types.ChangesetJobStateProcessing",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetJobStateProcessing"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetJobStateProcessing ChangesetJobState = \"PROCESSING\"\n```\n\nChangesetJobState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetJobStateQueued",
              "documentation": {
                "identifier": "ChangesetJobStateQueued",
                "newPage": false,
                "searchKey": "types.ChangesetJobStateQueued",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetJobStateQueued"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetJobStateQueued ChangesetJobState = \"QUEUED\"\n```\n\nChangesetJobState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetPublicationStatePublished",
              "documentation": {
                "identifier": "ChangesetPublicationStatePublished",
                "newPage": false,
                "searchKey": "types.ChangesetPublicationStatePublished",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetPublicationStatePublished"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetPublicationStatePublished ChangesetPublicationState = \"PUBLISHED\"\n```\n\nChangesetPublicationState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetPublicationStateUnpublished",
              "documentation": {
                "identifier": "ChangesetPublicationStateUnpublished",
                "newPage": false,
                "searchKey": "types.ChangesetPublicationStateUnpublished",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetPublicationStateUnpublished"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetPublicationStateUnpublished ChangesetPublicationState = \"UNPUBLISHED\"\n```\n\nChangesetPublicationState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetReviewStateApproved",
              "documentation": {
                "identifier": "ChangesetReviewStateApproved",
                "newPage": false,
                "searchKey": "types.ChangesetReviewStateApproved",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetReviewStateApproved"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetReviewStateApproved ChangesetReviewState = \"APPROVED\"\n```\n\nChangesetReviewState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetReviewStateChangesRequested",
              "documentation": {
                "identifier": "ChangesetReviewStateChangesRequested",
                "newPage": false,
                "searchKey": "types.ChangesetReviewStateChangesRequested",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetReviewStateChangesRequested"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetReviewStateChangesRequested ChangesetReviewState = \"CHANGES_REQUESTED\"\n```\n\nChangesetReviewState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetReviewStateCommented",
              "documentation": {
                "identifier": "ChangesetReviewStateCommented",
                "newPage": false,
                "searchKey": "types.ChangesetReviewStateCommented",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetReviewStateCommented"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetReviewStateCommented ChangesetReviewState = \"COMMENTED\"\n```\n\nChangesetReviewState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetReviewStateDismissed",
              "documentation": {
                "identifier": "ChangesetReviewStateDismissed",
                "newPage": false,
                "searchKey": "types.ChangesetReviewStateDismissed",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetReviewStateDismissed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetReviewStateDismissed ChangesetReviewState = \"DISMISSED\"\n```\n\nChangesetReviewState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetReviewStatePending",
              "documentation": {
                "identifier": "ChangesetReviewStatePending",
                "newPage": false,
                "searchKey": "types.ChangesetReviewStatePending",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetReviewStatePending"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetReviewStatePending ChangesetReviewState = \"PENDING\"\n```\n\nChangesetReviewState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetSpecDescriptionTypeBranch",
              "documentation": {
                "identifier": "ChangesetSpecDescriptionTypeBranch",
                "newPage": false,
                "searchKey": "types.ChangesetSpecDescriptionTypeBranch",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetSpecDescriptionTypeBranch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetSpecDescriptionTypeBranch ChangesetSpecDescriptionType = \"BRANCH\"\n```\n\nValid ChangesetSpecDescriptionTypes kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetSpecDescriptionTypeExisting",
              "documentation": {
                "identifier": "ChangesetSpecDescriptionTypeExisting",
                "newPage": false,
                "searchKey": "types.ChangesetSpecDescriptionTypeExisting",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetSpecDescriptionTypeExisting"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetSpecDescriptionTypeExisting ChangesetSpecDescriptionType = \"EXISTING\"\n```\n\nValid ChangesetSpecDescriptionTypes kinds \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetSpecTTL",
              "documentation": {
                "identifier": "ChangesetSpecTTL",
                "newPage": false,
                "searchKey": "types.ChangesetSpecTTL",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetSpecTTL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetSpecTTL = 2 * 24 * time.Hour\n```\n\nChangesetSpecTTL specifies the TTL of ChangesetSpecs that haven't been attached to a BatchSpec. It's lower than BatchSpecTTL because ChangesetSpecs should be attached to a BatchSpec immediately after having been created, whereas a BatchSpec might take a while to be complete and might also go through a lengthy review phase. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetStateClosed",
              "documentation": {
                "identifier": "ChangesetStateClosed",
                "newPage": false,
                "searchKey": "types.ChangesetStateClosed",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetStateClosed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetStateClosed ChangesetState = \"CLOSED\"\n```\n\nChangesetState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetStateDeleted",
              "documentation": {
                "identifier": "ChangesetStateDeleted",
                "newPage": false,
                "searchKey": "types.ChangesetStateDeleted",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetStateDeleted"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetStateDeleted ChangesetState = \"DELETED\"\n```\n\nChangesetState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetStateDraft",
              "documentation": {
                "identifier": "ChangesetStateDraft",
                "newPage": false,
                "searchKey": "types.ChangesetStateDraft",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetStateDraft"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetStateDraft ChangesetState = \"DRAFT\"\n```\n\nChangesetState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetStateFailed",
              "documentation": {
                "identifier": "ChangesetStateFailed",
                "newPage": false,
                "searchKey": "types.ChangesetStateFailed",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetStateFailed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetStateFailed ChangesetState = \"FAILED\"\n```\n\nChangesetState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetStateMerged",
              "documentation": {
                "identifier": "ChangesetStateMerged",
                "newPage": false,
                "searchKey": "types.ChangesetStateMerged",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetStateMerged"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetStateMerged ChangesetState = \"MERGED\"\n```\n\nChangesetState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetStateOpen",
              "documentation": {
                "identifier": "ChangesetStateOpen",
                "newPage": false,
                "searchKey": "types.ChangesetStateOpen",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetStateOpen"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetStateOpen ChangesetState = \"OPEN\"\n```\n\nChangesetState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetStateProcessing",
              "documentation": {
                "identifier": "ChangesetStateProcessing",
                "newPage": false,
                "searchKey": "types.ChangesetStateProcessing",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetStateProcessing"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetStateProcessing ChangesetState = \"PROCESSING\"\n```\n\nChangesetState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetStateRetrying",
              "documentation": {
                "identifier": "ChangesetStateRetrying",
                "newPage": false,
                "searchKey": "types.ChangesetStateRetrying",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetStateRetrying"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetStateRetrying ChangesetState = \"RETRYING\"\n```\n\nChangesetState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetStateScheduled",
              "documentation": {
                "identifier": "ChangesetStateScheduled",
                "newPage": false,
                "searchKey": "types.ChangesetStateScheduled",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetStateScheduled"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetStateScheduled ChangesetState = \"SCHEDULED\"\n```\n\nChangesetState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetStateUnpublished",
              "documentation": {
                "identifier": "ChangesetStateUnpublished",
                "newPage": false,
                "searchKey": "types.ChangesetStateUnpublished",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ChangesetStateUnpublished"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ChangesetStateUnpublished ChangesetState = \"UNPUBLISHED\"\n```\n\nChangesetState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#CodehostCapabilityDraftChangesets",
              "documentation": {
                "identifier": "CodehostCapabilityDraftChangesets",
                "newPage": false,
                "searchKey": "types.CodehostCapabilityDraftChangesets",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const CodehostCapabilityDraftChangesets"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst CodehostCapabilityDraftChangesets CodehostCapability = \"DraftChangesets\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#CodehostCapabilityLabels",
              "documentation": {
                "identifier": "CodehostCapabilityLabels",
                "newPage": false,
                "searchKey": "types.CodehostCapabilityLabels",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const CodehostCapabilityLabels"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst CodehostCapabilityLabels CodehostCapability = \"Labels\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerOperationArchive",
              "documentation": {
                "identifier": "ReconcilerOperationArchive",
                "newPage": false,
                "searchKey": "types.ReconcilerOperationArchive",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReconcilerOperationArchive"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReconcilerOperationArchive ReconcilerOperation = \"ARCHIVE\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerOperationClose",
              "documentation": {
                "identifier": "ReconcilerOperationClose",
                "newPage": false,
                "searchKey": "types.ReconcilerOperationClose",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReconcilerOperationClose"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReconcilerOperationClose ReconcilerOperation = \"CLOSE\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerOperationDetach",
              "documentation": {
                "identifier": "ReconcilerOperationDetach",
                "newPage": false,
                "searchKey": "types.ReconcilerOperationDetach",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReconcilerOperationDetach"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReconcilerOperationDetach ReconcilerOperation = \"DETACH\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerOperationImport",
              "documentation": {
                "identifier": "ReconcilerOperationImport",
                "newPage": false,
                "searchKey": "types.ReconcilerOperationImport",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReconcilerOperationImport"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReconcilerOperationImport ReconcilerOperation = \"IMPORT\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerOperationPublish",
              "documentation": {
                "identifier": "ReconcilerOperationPublish",
                "newPage": false,
                "searchKey": "types.ReconcilerOperationPublish",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReconcilerOperationPublish"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReconcilerOperationPublish ReconcilerOperation = \"PUBLISH\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerOperationPublishDraft",
              "documentation": {
                "identifier": "ReconcilerOperationPublishDraft",
                "newPage": false,
                "searchKey": "types.ReconcilerOperationPublishDraft",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReconcilerOperationPublishDraft"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReconcilerOperationPublishDraft ReconcilerOperation = \"PUBLISH_DRAFT\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerOperationPush",
              "documentation": {
                "identifier": "ReconcilerOperationPush",
                "newPage": false,
                "searchKey": "types.ReconcilerOperationPush",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReconcilerOperationPush"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReconcilerOperationPush ReconcilerOperation = \"PUSH\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerOperationReopen",
              "documentation": {
                "identifier": "ReconcilerOperationReopen",
                "newPage": false,
                "searchKey": "types.ReconcilerOperationReopen",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReconcilerOperationReopen"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReconcilerOperationReopen ReconcilerOperation = \"REOPEN\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerOperationSleep",
              "documentation": {
                "identifier": "ReconcilerOperationSleep",
                "newPage": false,
                "searchKey": "types.ReconcilerOperationSleep",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReconcilerOperationSleep"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReconcilerOperationSleep ReconcilerOperation = \"SLEEP\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerOperationSync",
              "documentation": {
                "identifier": "ReconcilerOperationSync",
                "newPage": false,
                "searchKey": "types.ReconcilerOperationSync",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReconcilerOperationSync"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReconcilerOperationSync ReconcilerOperation = \"SYNC\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerOperationUndraft",
              "documentation": {
                "identifier": "ReconcilerOperationUndraft",
                "newPage": false,
                "searchKey": "types.ReconcilerOperationUndraft",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReconcilerOperationUndraft"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReconcilerOperationUndraft ReconcilerOperation = \"UNDRAFT\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerOperationUpdate",
              "documentation": {
                "identifier": "ReconcilerOperationUpdate",
                "newPage": false,
                "searchKey": "types.ReconcilerOperationUpdate",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReconcilerOperationUpdate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReconcilerOperationUpdate ReconcilerOperation = \"UPDATE\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerStateCompleted",
              "documentation": {
                "identifier": "ReconcilerStateCompleted",
                "newPage": false,
                "searchKey": "types.ReconcilerStateCompleted",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReconcilerStateCompleted"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReconcilerStateCompleted ReconcilerState = \"COMPLETED\"\n```\n\nReconcilerState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerStateErrored",
              "documentation": {
                "identifier": "ReconcilerStateErrored",
                "newPage": false,
                "searchKey": "types.ReconcilerStateErrored",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReconcilerStateErrored"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReconcilerStateErrored ReconcilerState = \"ERRORED\"\n```\n\nReconcilerState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerStateFailed",
              "documentation": {
                "identifier": "ReconcilerStateFailed",
                "newPage": false,
                "searchKey": "types.ReconcilerStateFailed",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReconcilerStateFailed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReconcilerStateFailed ReconcilerState = \"FAILED\"\n```\n\nReconcilerState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerStateProcessing",
              "documentation": {
                "identifier": "ReconcilerStateProcessing",
                "newPage": false,
                "searchKey": "types.ReconcilerStateProcessing",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReconcilerStateProcessing"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReconcilerStateProcessing ReconcilerState = \"PROCESSING\"\n```\n\nReconcilerState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerStateQueued",
              "documentation": {
                "identifier": "ReconcilerStateQueued",
                "newPage": false,
                "searchKey": "types.ReconcilerStateQueued",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReconcilerStateQueued"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReconcilerStateQueued ReconcilerState = \"QUEUED\"\n```\n\nReconcilerState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerStateScheduled",
              "documentation": {
                "identifier": "ReconcilerStateScheduled",
                "newPage": false,
                "searchKey": "types.ReconcilerStateScheduled",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReconcilerStateScheduled"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReconcilerStateScheduled ReconcilerState = \"SCHEDULED\"\n```\n\nReconcilerState constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#SiteCredentialPlaceholderEncryptionKeyID",
              "documentation": {
                "identifier": "SiteCredentialPlaceholderEncryptionKeyID",
                "newPage": false,
                "searchKey": "types.SiteCredentialPlaceholderEncryptionKeyID",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SiteCredentialPlaceholderEncryptionKeyID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SiteCredentialPlaceholderEncryptionKeyID = \"previously-migrated\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/batches/types#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetJobTypeComment",
              "documentation": {
                "identifier": "ChangesetJobTypeComment",
                "newPage": false,
                "searchKey": "types.ChangesetJobTypeComment",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ChangesetJobTypeComment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ChangesetJobTypeComment ChangesetJobType = \"commentatore\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetJobTypeDetach",
              "documentation": {
                "identifier": "ChangesetJobTypeDetach",
                "newPage": false,
                "searchKey": "types.ChangesetJobTypeDetach",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ChangesetJobTypeDetach"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ChangesetJobTypeDetach ChangesetJobType = \"detach\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetJobTypeMerge",
              "documentation": {
                "identifier": "ChangesetJobTypeMerge",
                "newPage": false,
                "searchKey": "types.ChangesetJobTypeMerge",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ChangesetJobTypeMerge"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ChangesetJobTypeMerge ChangesetJobType = \"merge\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetJobTypeReenqueue",
              "documentation": {
                "identifier": "ChangesetJobTypeReenqueue",
                "newPage": false,
                "searchKey": "types.ChangesetJobTypeReenqueue",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ChangesetJobTypeReenqueue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ChangesetJobTypeReenqueue ChangesetJobType = \"reenqueue\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ErrHeadBaseMismatch",
              "documentation": {
                "identifier": "ErrHeadBaseMismatch",
                "newPage": false,
                "searchKey": "types.ErrHeadBaseMismatch",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrHeadBaseMismatch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrHeadBaseMismatch = errors.New(\"headRepository does not match baseRepository\")\n```\n\nErrHeadBaseMismatch is returned by (*ChangesetSpec).UnmarshalValidate() if the head and base repositories do not match (a case which we do not support yet). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ErrNoCommits",
              "documentation": {
                "identifier": "ErrNoCommits",
                "newPage": false,
                "searchKey": "types.ErrNoCommits",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrNoCommits"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrNoCommits = errors.New(\"changeset description doesn't contain commit descriptions\")\n```\n\nErrNoCommits is returned by (*ChangesetSpecDescription).Diff if the description doesn't have any commits descriptions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#SupportedExternalServices",
              "documentation": {
                "identifier": "SupportedExternalServices",
                "newPage": false,
                "searchKey": "types.SupportedExternalServices",
                "tags": [
                  "variable",
                  "object"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var SupportedExternalServices"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar SupportedExternalServices = ...\n```\n\nSupportedExternalServices are the external service types currently supported by the batch changes feature. Repos that are associated with external services whose type is not in this list will simply be filtered out from the search results. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/batches/types#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#BatchChange",
              "documentation": {
                "identifier": "BatchChange",
                "newPage": false,
                "searchKey": "types.BatchChange",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchChange struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchChange struct {\n\tID          int64\n\tName        string\n\tDescription string\n\n\tBatchSpecID int64\n\n\tInitialApplierID int32\n\tLastApplierID    int32\n\tLastAppliedAt    time.Time\n\n\tNamespaceUserID int32\n\tNamespaceOrgID  int32\n\n\tClosedAt time.Time\n\n\tCreatedAt time.Time\n\tUpdatedAt time.Time\n}\n```\n\nA BatchChange of changesets over multiple Repos over time. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#BatchChange.Clone",
                    "documentation": {
                      "identifier": "BatchChange.Clone",
                      "newPage": false,
                      "searchKey": "types.BatchChange.Clone",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *BatchChange) Clone() *BatchChange"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *BatchChange) Clone() *BatchChange\n```\n\nClone returns a clone of a BatchChange. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#BatchChange.Closed",
                    "documentation": {
                      "identifier": "BatchChange.Closed",
                      "newPage": false,
                      "searchKey": "types.BatchChange.Closed",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *BatchChange) Closed() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *BatchChange) Closed() bool\n```\n\nClosed returns true when the ClosedAt timestamp has been set. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#BatchChangeAssoc",
              "documentation": {
                "identifier": "BatchChangeAssoc",
                "newPage": false,
                "searchKey": "types.BatchChangeAssoc",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchChangeAssoc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchChangeAssoc struct {\n\tBatchChangeID int64 `json:\"-\"`\n\tDetach        bool  `json:\"detach,omitempty\"`\n\tArchive       bool  `json:\"archive,omitempty\"`\n\tIsArchived    bool  `json:\"isArchived,omitempty\"`\n}\n```\n\nBatchChangeAssoc stores the details of a association to a BatchChange. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#BatchChangeImportChangeset",
              "documentation": {
                "identifier": "BatchChangeImportChangeset",
                "newPage": false,
                "searchKey": "types.BatchChangeImportChangeset",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchChangeImportChangeset struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchChangeImportChangeset struct {\n\tRepository  string        `json:\"repository\" yaml:\"repository\"`\n\tExternalIDs []interface{} `json:\"externalIDs\" yaml:\"externalIDs\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#BatchChangeState",
              "documentation": {
                "identifier": "BatchChangeState",
                "newPage": false,
                "searchKey": "types.BatchChangeState",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchChangeState string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchChangeState string\n```\n\nBatchChangeState defines the possible states of a BatchChange \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#BatchSpec",
              "documentation": {
                "identifier": "BatchSpec",
                "newPage": false,
                "searchKey": "types.BatchSpec",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchSpec struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchSpec struct {\n\tID     int64\n\tRandID string\n\n\tRawSpec string\n\tSpec    BatchSpecFields\n\n\tNamespaceUserID int32\n\tNamespaceOrgID  int32\n\n\tUserID int32\n\n\tCreatedAt time.Time\n\tUpdatedAt time.Time\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#NewBatchSpecFromRaw",
                    "documentation": {
                      "identifier": "NewBatchSpecFromRaw",
                      "newPage": false,
                      "searchKey": "types.NewBatchSpecFromRaw",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewBatchSpecFromRaw(rawSpec string) (*BatchSpec, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewBatchSpecFromRaw(rawSpec string) (*BatchSpec, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#BatchSpec.Clone",
                    "documentation": {
                      "identifier": "BatchSpec.Clone",
                      "newPage": false,
                      "searchKey": "types.BatchSpec.Clone",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cs *BatchSpec) Clone() *BatchSpec"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cs *BatchSpec) Clone() *BatchSpec\n```\n\nClone returns a clone of a BatchSpec. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#BatchSpec.ExpiresAt",
                    "documentation": {
                      "identifier": "BatchSpec.ExpiresAt",
                      "newPage": false,
                      "searchKey": "types.BatchSpec.ExpiresAt",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cs *BatchSpec) ExpiresAt() time.Time"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cs *BatchSpec) ExpiresAt() time.Time\n```\n\nExpiresAt returns the time when the BatchSpec will be deleted if not applied. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#BatchSpec.UnmarshalValidate",
                    "documentation": {
                      "identifier": "BatchSpec.UnmarshalValidate",
                      "newPage": false,
                      "searchKey": "types.BatchSpec.UnmarshalValidate",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cs *BatchSpec) UnmarshalValidate() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cs *BatchSpec) UnmarshalValidate() error\n```\n\nUnmarshalValidate unmarshals the RawSpec into Spec and validates it against the BatchSpec schema and does additional semantic validation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#BatchSpecFields",
              "documentation": {
                "identifier": "BatchSpecFields",
                "newPage": false,
                "searchKey": "types.BatchSpecFields",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchSpecFields struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchSpecFields struct {\n\tName              string                       `json:\"name\" yaml:\"name\"`\n\tDescription       string                       `json:\"description,omitempty\" yaml:\"description,omitempty\"`\n\tOn                []BatchSpecOn                `json:\"on,omitempty\" yaml:\"on,omitempty\"`\n\tSteps             []BatchSpecStep              `json:\"steps,omitempty\" yaml:\"steps,omitempty\"`\n\tImportChangeset   []BatchChangeImportChangeset `json:\"importChangesets,omitempty\" yaml:\"importChangesets,omitempty\"`\n\tChangesetTemplate ChangesetTemplate            `json:\"changesetTemplate,omitempty\" yaml:\"changesetTemplate,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#BatchSpecOn",
              "documentation": {
                "identifier": "BatchSpecOn",
                "newPage": false,
                "searchKey": "types.BatchSpecOn",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchSpecOn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchSpecOn struct {\n\tRepositoriesMatchingQuery string `json:\"repositoriesMatchingQuery,omitempty\" yaml:\"repositoriesMatchingQuery,omitempty\"`\n\tRepository                string `json:\"repository,omitempty\" yaml:\"repository,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#BatchSpecStep",
              "documentation": {
                "identifier": "BatchSpecStep",
                "newPage": false,
                "searchKey": "types.BatchSpecStep",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchSpecStep struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchSpecStep struct {\n\tRun       string          `json:\"run\" yaml:\"run\"`\n\tContainer string          `json:\"container\" yaml:\"container\"`\n\tEnv       env.Environment `json:\"env,omitempty\" yaml:\"env,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#BulkOperation",
              "documentation": {
                "identifier": "BulkOperation",
                "newPage": false,
                "searchKey": "types.BulkOperation",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BulkOperation struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BulkOperation struct {\n\tID string\n\t// DBID is only used internally for pagination. Don't make any assumptions\n\t// about this field.\n\tDBID           int64\n\tType           ChangesetJobType\n\tState          BulkOperationState\n\tProgress       float64\n\tUserID         int32\n\tChangesetCount int32\n\tCreatedAt      time.Time\n\tFinishedAt     time.Time\n}\n```\n\nBulkOperation represents a virtual entity of a bulk operation, as represented in the database. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#BulkOperationError",
              "documentation": {
                "identifier": "BulkOperationError",
                "newPage": false,
                "searchKey": "types.BulkOperationError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BulkOperationError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BulkOperationError struct {\n\tChangesetID int64\n\tError       string\n}\n```\n\nBulkOperationError represents an error on a changeset that occurred within a bulk job while executing. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#BulkOperationState",
              "documentation": {
                "identifier": "BulkOperationState",
                "newPage": false,
                "searchKey": "types.BulkOperationState",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BulkOperationState string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BulkOperationState string\n```\n\nBulkOperationState defines the possible states of a bulk operation. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#BulkOperationState.Valid",
                    "documentation": {
                      "identifier": "BulkOperationState.Valid",
                      "newPage": false,
                      "searchKey": "types.BulkOperationState.Valid",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s BulkOperationState) Valid() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s BulkOperationState) Valid() bool\n```\n\nValid returns true if the given BulkOperationState is valid. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#Changeset",
              "documentation": {
                "identifier": "Changeset",
                "newPage": false,
                "searchKey": "types.Changeset",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Changeset struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Changeset struct {\n\tID                  int64\n\tRepoID              api.RepoID\n\tCreatedAt           time.Time\n\tUpdatedAt           time.Time\n\tMetadata            interface{}\n\tBatchChanges        []BatchChangeAssoc\n\tExternalID          string\n\tExternalServiceType string\n\t// ExternalBranch should always be prefixed with refs/heads/. Call git.EnsureRefPrefix before setting this value.\n\tExternalBranch      string\n\tExternalDeletedAt   time.Time\n\tExternalUpdatedAt   time.Time\n\tExternalState       ChangesetExternalState\n\tExternalReviewState ChangesetReviewState\n\tExternalCheckState  ChangesetCheckState\n\tDiffStatAdded       *int32\n\tDiffStatChanged     *int32\n\tDiffStatDeleted     *int32\n\tSyncState           ChangesetSyncState\n\n\t// The batch change that \"owns\" this changeset: it can create/close\n\t// it on code host. If this is 0, it is imported/tracked by a batch change.\n\tOwnedByBatchChangeID int64\n\n\t// This is 0 if the Changeset isn't owned by Sourcegraph.\n\tCurrentSpecID  int64\n\tPreviousSpecID int64\n\n\tPublicationState ChangesetPublicationState // \"unpublished\", \"published\"\n\n\t// All of the following fields are used by workerutil.Worker.\n\tReconcilerState  ReconcilerState\n\tFailureMessage   *string\n\tStartedAt        time.Time\n\tFinishedAt       time.Time\n\tProcessAfter     time.Time\n\tNumResets        int64\n\tNumFailures      int64\n\tSyncErrorMessage *string\n\n\t// Closing is set to true (along with the ReocncilerState) when the\n\t// reconciler should close the changeset.\n\tClosing bool\n}\n```\n\nA Changeset is a changeset on a code host belonging to a Repository and many BatchChanges. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.Archive",
                    "documentation": {
                      "identifier": "Changeset.Archive",
                      "newPage": false,
                      "searchKey": "types.Changeset.Archive",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) Archive(batchChangeID int64) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) Archive(batchChangeID int64) bool\n```\n\nArchive marks the given batch change as to-be-archived. Returns true, if the batch change currently is attached to the batch change and *not* archived. This function is a noop, if the given changeset was already archived. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.ArchivedIn",
                    "documentation": {
                      "identifier": "Changeset.ArchivedIn",
                      "newPage": false,
                      "searchKey": "types.Changeset.ArchivedIn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) ArchivedIn(batchChangeID int64) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) ArchivedIn(batchChangeID int64) bool\n```\n\nArchivedIn checks whether the changeset is archived in the given batch change. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.Attach",
                    "documentation": {
                      "identifier": "Changeset.Attach",
                      "newPage": false,
                      "searchKey": "types.Changeset.Attach",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) Attach(batchChangeID int64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) Attach(batchChangeID int64)\n```\n\nAttach attaches the batch change with the given ID to the changeset. If the batch change is already attached, this is a noop. If the batch change is still attached but is marked as to be detached, the detach flag is removed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.AttachedTo",
                    "documentation": {
                      "identifier": "Changeset.AttachedTo",
                      "newPage": false,
                      "searchKey": "types.Changeset.AttachedTo",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) AttachedTo(batchChangeID int64) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) AttachedTo(batchChangeID int64) bool\n```\n\nAttachedTo returns true if the changeset is currently attached to the batch change with the given batchChangeID. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.AuthorEmail",
                    "documentation": {
                      "identifier": "Changeset.AuthorEmail",
                      "newPage": false,
                      "searchKey": "types.Changeset.AuthorEmail",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) AuthorEmail() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) AuthorEmail() (string, error)\n```\n\nAuthorEmail of the Changeset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.AuthorName",
                    "documentation": {
                      "identifier": "Changeset.AuthorName",
                      "newPage": false,
                      "searchKey": "types.Changeset.AuthorName",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) AuthorName() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) AuthorName() (string, error)\n```\n\nAuthorName of the Changeset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.BaseRef",
                    "documentation": {
                      "identifier": "Changeset.BaseRef",
                      "newPage": false,
                      "searchKey": "types.Changeset.BaseRef",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) BaseRef() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) BaseRef() (string, error)\n```\n\nBaseRef returns the full ref (e.g. `refs/heads/my-branch`) of the base ref associated with the Changeset on the codehost. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.BaseRefOid",
                    "documentation": {
                      "identifier": "Changeset.BaseRefOid",
                      "newPage": false,
                      "searchKey": "types.Changeset.BaseRefOid",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) BaseRefOid() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) BaseRefOid() (string, error)\n```\n\nBaseRefOid returns the git ObjectID of the base reference associated with the Changeset on the codehost. If the codehost doesn't include the ObjectID, an empty string is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.Body",
                    "documentation": {
                      "identifier": "Changeset.Body",
                      "newPage": false,
                      "searchKey": "types.Changeset.Body",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) Body() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) Body() (string, error)\n```\n\nBody of the Changeset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.Clone",
                    "documentation": {
                      "identifier": "Changeset.Clone",
                      "newPage": false,
                      "searchKey": "types.Changeset.Clone",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) Clone() *Changeset"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) Clone() *Changeset\n```\n\nClone returns a clone of a Changeset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.Closeable",
                    "documentation": {
                      "identifier": "Changeset.Closeable",
                      "newPage": false,
                      "searchKey": "types.Changeset.Closeable",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) Closeable() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) Closeable() bool\n```\n\nCloseable returns whether the Changeset is already closed or merged. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.Complete",
                    "documentation": {
                      "identifier": "Changeset.Complete",
                      "newPage": false,
                      "searchKey": "types.Changeset.Complete",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) Complete() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) Complete() bool\n```\n\nComplete returns whether the Changeset has been published and its ExternalState is in a final state. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.Detach",
                    "documentation": {
                      "identifier": "Changeset.Detach",
                      "newPage": false,
                      "searchKey": "types.Changeset.Detach",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) Detach(batchChangeID int64) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) Detach(batchChangeID int64) bool\n```\n\nDetach marks the given batch change as to-be-detached. Returns true, if the batch change currently is attached to the batch change. This function is a noop, if the given batch change was not attached to the changeset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.DiffStat",
                    "documentation": {
                      "identifier": "Changeset.DiffStat",
                      "newPage": false,
                      "searchKey": "types.Changeset.DiffStat",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) DiffStat() *diff.Stat"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) DiffStat() *diff.Stat\n```\n\nDiffStat returns a *diff.Stat if DiffStatAdded, DiffStatChanged, and DiffStatDeleted are set, or nil if one or more is not. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.Events",
                    "documentation": {
                      "identifier": "Changeset.Events",
                      "newPage": false,
                      "searchKey": "types.Changeset.Events",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) Events() (events []*ChangesetEvent, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) Events() (events []*ChangesetEvent, err error)\n```\n\nEvents returns the deduplicated list of ChangesetEvents from the Changeset's metadata. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.ExternalCreatedAt",
                    "documentation": {
                      "identifier": "Changeset.ExternalCreatedAt",
                      "newPage": false,
                      "searchKey": "types.Changeset.ExternalCreatedAt",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) ExternalCreatedAt() time.Time"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) ExternalCreatedAt() time.Time\n```\n\nExternalCreatedAt is when the Changeset was created on the codehost. When it cannot be determined when the changeset was created, a zero-value timestamp is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.HasDiff",
                    "documentation": {
                      "identifier": "Changeset.HasDiff",
                      "newPage": false,
                      "searchKey": "types.Changeset.HasDiff",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) HasDiff() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) HasDiff() bool\n```\n\nHasDiff returns true when the changeset is in an open state. That is because currently we do not support diff rendering for historic branches, because we can't guarantee that we have the refs on gitserver. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.HeadRef",
                    "documentation": {
                      "identifier": "Changeset.HeadRef",
                      "newPage": false,
                      "searchKey": "types.Changeset.HeadRef",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) HeadRef() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) HeadRef() (string, error)\n```\n\nHeadRef returns the full ref (e.g. `refs/heads/my-branch`) of the HEAD reference associated with the Changeset on the codehost. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.HeadRefOid",
                    "documentation": {
                      "identifier": "Changeset.HeadRefOid",
                      "newPage": false,
                      "searchKey": "types.Changeset.HeadRefOid",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) HeadRefOid() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) HeadRefOid() (string, error)\n```\n\nHeadRefOid returns the git ObjectID of the HEAD reference associated with Changeset on the codehost. If the codehost doesn't include the ObjectID, an empty string is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.IsDeleted",
                    "documentation": {
                      "identifier": "Changeset.IsDeleted",
                      "newPage": false,
                      "searchKey": "types.Changeset.IsDeleted",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) IsDeleted() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) IsDeleted() bool\n```\n\nIsDeleted returns true when the Changeset's ExternalDeletedAt is a non-zero timestamp. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.IsImporting",
                    "documentation": {
                      "identifier": "Changeset.IsImporting",
                      "newPage": false,
                      "searchKey": "types.Changeset.IsImporting",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) IsImporting() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) IsImporting() bool\n```\n\nIsImporting returns whether the Changeset is being imported but it's not finished yet. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.Labels",
                    "documentation": {
                      "identifier": "Changeset.Labels",
                      "newPage": false,
                      "searchKey": "types.Changeset.Labels",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) Labels() []ChangesetLabel"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) Labels() []ChangesetLabel\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.Published",
                    "documentation": {
                      "identifier": "Changeset.Published",
                      "newPage": false,
                      "searchKey": "types.Changeset.Published",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) Published() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) Published() bool\n```\n\nPublished returns whether the Changeset's PublicationState is Published. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.RecordID",
                    "documentation": {
                      "identifier": "Changeset.RecordID",
                      "newPage": false,
                      "searchKey": "types.Changeset.RecordID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) RecordID() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) RecordID() int\n```\n\nRecordID is needed to implement the workerutil.Record interface. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.RemoveBatchChangeID",
                    "documentation": {
                      "identifier": "Changeset.RemoveBatchChangeID",
                      "newPage": false,
                      "searchKey": "types.Changeset.RemoveBatchChangeID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) RemoveBatchChangeID(id int64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) RemoveBatchChangeID(id int64)\n```\n\nRemoveBatchChangeID removes the given id from the Changesets BatchChangesIDs slice. If the id is not in BatchChangesIDs calling this method doesn't have an effect. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.ResetReconcilerState",
                    "documentation": {
                      "identifier": "Changeset.ResetReconcilerState",
                      "newPage": false,
                      "searchKey": "types.Changeset.ResetReconcilerState",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) ResetReconcilerState(state ReconcilerState)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) ResetReconcilerState(state ReconcilerState)\n```\n\nResetReconcilerState resets the failure message and reset count and sets the changeset's ReconcilerState to the given value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.SetCurrentSpec",
                    "documentation": {
                      "identifier": "Changeset.SetCurrentSpec",
                      "newPage": false,
                      "searchKey": "types.Changeset.SetCurrentSpec",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) SetCurrentSpec(spec *ChangesetSpec)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) SetCurrentSpec(spec *ChangesetSpec)\n```\n\nSetCurrentSpec sets the CurrentSpecID field and copies the diff stat over from the spec. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.SetDeleted",
                    "documentation": {
                      "identifier": "Changeset.SetDeleted",
                      "newPage": false,
                      "searchKey": "types.Changeset.SetDeleted",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) SetDeleted()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) SetDeleted()\n```\n\nSetDeleted sets the internal state of a Changeset so that its State is ChangesetStateDeleted. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.SetDiffStat",
                    "documentation": {
                      "identifier": "Changeset.SetDiffStat",
                      "newPage": false,
                      "searchKey": "types.Changeset.SetDiffStat",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) SetDiffStat(stat *diff.Stat)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) SetDiffStat(stat *diff.Stat)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.SetMetadata",
                    "documentation": {
                      "identifier": "Changeset.SetMetadata",
                      "newPage": false,
                      "searchKey": "types.Changeset.SetMetadata",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) SetMetadata(meta interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) SetMetadata(meta interface{}) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.SupportsDraft",
                    "documentation": {
                      "identifier": "Changeset.SupportsDraft",
                      "newPage": false,
                      "searchKey": "types.Changeset.SupportsDraft",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) SupportsDraft() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) SupportsDraft() bool\n```\n\nSupportsDraft returns whether the code host on which the changeset is hosted supports draft changesets. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.SupportsLabels",
                    "documentation": {
                      "identifier": "Changeset.SupportsLabels",
                      "newPage": false,
                      "searchKey": "types.Changeset.SupportsLabels",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) SupportsLabels() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) SupportsLabels() bool\n```\n\nSupportsLabels returns whether the code host on which the changeset is hosted supports labels and whether it's safe to call the (*Changeset).Labels() method. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.Title",
                    "documentation": {
                      "identifier": "Changeset.Title",
                      "newPage": false,
                      "searchKey": "types.Changeset.Title",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) Title() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) Title() (string, error)\n```\n\nTitle of the Changeset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.URL",
                    "documentation": {
                      "identifier": "Changeset.URL",
                      "newPage": false,
                      "searchKey": "types.Changeset.URL",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) URL() (s string, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) URL() (s string, err error)\n```\n\nURL of a Changeset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changeset.Unpublished",
                    "documentation": {
                      "identifier": "Changeset.Unpublished",
                      "newPage": false,
                      "searchKey": "types.Changeset.Unpublished",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Changeset) Unpublished() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Changeset) Unpublished() bool\n```\n\nUnpublished returns whether the Changeset's PublicationState is Unpublished. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetCheckState",
              "documentation": {
                "identifier": "ChangesetCheckState",
                "newPage": false,
                "searchKey": "types.ChangesetCheckState",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetCheckState string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetCheckState string\n```\n\nChangesetCheckState constants. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetCheckState.Valid",
                    "documentation": {
                      "identifier": "ChangesetCheckState.Valid",
                      "newPage": false,
                      "searchKey": "types.ChangesetCheckState.Valid",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s ChangesetCheckState) Valid() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s ChangesetCheckState) Valid() bool\n```\n\nValid returns true if the given Changeset check state is valid. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEvent",
              "documentation": {
                "identifier": "ChangesetEvent",
                "newPage": false,
                "searchKey": "types.ChangesetEvent",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetEvent struct {\n\tID          int64\n\tChangesetID int64\n\tKind        ChangesetEventKind\n\tKey         string // Deduplication key\n\tCreatedAt   time.Time\n\tUpdatedAt   time.Time\n\tMetadata    interface{}\n}\n```\n\nA ChangesetEvent is an event that happened in the lifetime and context of a Changeset. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetEvent.Changeset",
                    "documentation": {
                      "identifier": "ChangesetEvent.Changeset",
                      "newPage": false,
                      "searchKey": "types.ChangesetEvent.Changeset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ChangesetEvent) Changeset() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ChangesetEvent) Changeset() int64\n```\n\nChangeset returns the changeset ID of the ChangesetEvent. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetEvent.Clone",
                    "documentation": {
                      "identifier": "ChangesetEvent.Clone",
                      "newPage": false,
                      "searchKey": "types.ChangesetEvent.Clone",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ChangesetEvent) Clone() *ChangesetEvent"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ChangesetEvent) Clone() *ChangesetEvent\n```\n\nClone returns a clone of a ChangesetEvent. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetEvent.ReviewAuthor",
                    "documentation": {
                      "identifier": "ChangesetEvent.ReviewAuthor",
                      "newPage": false,
                      "searchKey": "types.ChangesetEvent.ReviewAuthor",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ChangesetEvent) ReviewAuthor() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ChangesetEvent) ReviewAuthor() string\n```\n\nReviewAuthor returns the author of the review if the ChangesetEvent is related to a review. Returns an empty string if not a review event or the author has been deleted. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetEvent.ReviewState",
                    "documentation": {
                      "identifier": "ChangesetEvent.ReviewState",
                      "newPage": false,
                      "searchKey": "types.ChangesetEvent.ReviewState",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ChangesetEvent) ReviewState() (ChangesetReviewState, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ChangesetEvent) ReviewState() (ChangesetReviewState, error)\n```\n\nReviewState returns the review state of the ChangesetEvent if it is a review event. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetEvent.Timestamp",
                    "documentation": {
                      "identifier": "ChangesetEvent.Timestamp",
                      "newPage": false,
                      "searchKey": "types.ChangesetEvent.Timestamp",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ChangesetEvent) Timestamp() time.Time"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ChangesetEvent) Timestamp() time.Time\n```\n\nTimestamp returns the time when the ChangesetEvent happened (or was updated) on the codehost, not when it was created in Sourcegraph's database. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetEvent.Type",
                    "documentation": {
                      "identifier": "ChangesetEvent.Type",
                      "newPage": false,
                      "searchKey": "types.ChangesetEvent.Type",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ChangesetEvent) Type() ChangesetEventKind"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ChangesetEvent) Type() ChangesetEventKind\n```\n\nType returns the ChangesetEventKind of the ChangesetEvent. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetEvent.Update",
                    "documentation": {
                      "identifier": "ChangesetEvent.Update",
                      "newPage": false,
                      "searchKey": "types.ChangesetEvent.Update",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ChangesetEvent) Update(o *ChangesetEvent) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ChangesetEvent) Update(o *ChangesetEvent) error\n```\n\nUpdate updates the metadata of e with new metadata in o. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetEventKind",
              "documentation": {
                "identifier": "ChangesetEventKind",
                "newPage": false,
                "searchKey": "types.ChangesetEventKind",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetEventKind string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetEventKind string\n```\n\nChangesetEventKind defines the kind of a ChangesetEvent. This type is unexported so that users of ChangesetEvent can't instantiate it with a Kind being an arbitrary string. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetEventKindFor",
                    "documentation": {
                      "identifier": "ChangesetEventKindFor",
                      "newPage": false,
                      "searchKey": "types.ChangesetEventKindFor",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func ChangesetEventKindFor(e interface{}) (ChangesetEventKind, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc ChangesetEventKindFor(e interface{}) (ChangesetEventKind, error)\n```\n\nChangesetEventKindFor returns the ChangesetEventKind for the given specific code host event. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetExternalState",
              "documentation": {
                "identifier": "ChangesetExternalState",
                "newPage": false,
                "searchKey": "types.ChangesetExternalState",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetExternalState string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetExternalState string\n```\n\nChangesetExternalState defines the possible states of a Changeset on a code host. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetExternalState.Valid",
                    "documentation": {
                      "identifier": "ChangesetExternalState.Valid",
                      "newPage": false,
                      "searchKey": "types.ChangesetExternalState.Valid",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s ChangesetExternalState) Valid() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s ChangesetExternalState) Valid() bool\n```\n\nValid returns true if the given ChangesetExternalState is valid. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetJob",
              "documentation": {
                "identifier": "ChangesetJob",
                "newPage": false,
                "searchKey": "types.ChangesetJob",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetJob struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetJob struct {\n\tID int64\n\t// BulkGroup is a random string that can be used to group jobs together in a\n\t// single invocation.\n\tBulkGroup     string\n\tBatchChangeID int64\n\tUserID        int32\n\tChangesetID   int64\n\tJobType       ChangesetJobType\n\tPayload       interface{}\n\n\tState          ChangesetJobState\n\tFailureMessage *string\n\tStartedAt      time.Time\n\tFinishedAt     time.Time\n\tProcessAfter   time.Time\n\tNumResets      int64\n\tNumFailures    int64\n\n\tCreatedAt time.Time\n\tUpdatedAt time.Time\n}\n```\n\nChangesetJob describes a one-time action to be taken on a changeset. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetJob.RecordID",
                    "documentation": {
                      "identifier": "ChangesetJob.RecordID",
                      "newPage": false,
                      "searchKey": "types.ChangesetJob.RecordID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *ChangesetJob) RecordID() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *ChangesetJob) RecordID() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetJobCommentPayload",
              "documentation": {
                "identifier": "ChangesetJobCommentPayload",
                "newPage": false,
                "searchKey": "types.ChangesetJobCommentPayload",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetJobCommentPayload struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetJobCommentPayload struct {\n\tMessage string `json:\"message\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetJobDetachPayload",
              "documentation": {
                "identifier": "ChangesetJobDetachPayload",
                "newPage": false,
                "searchKey": "types.ChangesetJobDetachPayload",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetJobDetachPayload struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetJobDetachPayload struct{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetJobMergePayload",
              "documentation": {
                "identifier": "ChangesetJobMergePayload",
                "newPage": false,
                "searchKey": "types.ChangesetJobMergePayload",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetJobMergePayload struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetJobMergePayload struct {\n\tSquash bool `json:\"squash,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetJobReenqueuePayload",
              "documentation": {
                "identifier": "ChangesetJobReenqueuePayload",
                "newPage": false,
                "searchKey": "types.ChangesetJobReenqueuePayload",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetJobReenqueuePayload struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetJobReenqueuePayload struct{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetJobState",
              "documentation": {
                "identifier": "ChangesetJobState",
                "newPage": false,
                "searchKey": "types.ChangesetJobState",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetJobState string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetJobState string\n```\n\nChangesetJobState defines the possible states of a changeset job. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetJobState.ToDB",
                    "documentation": {
                      "identifier": "ChangesetJobState.ToDB",
                      "newPage": false,
                      "searchKey": "types.ChangesetJobState.ToDB",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s ChangesetJobState) ToDB() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s ChangesetJobState) ToDB() string\n```\n\nToDB returns the database representation of the worker state. That's needed because we want to use UPPERCASE in the application and GraphQL layer, but need to use lowercase in the database to make it work with workerutil.Worker. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetJobState.Valid",
                    "documentation": {
                      "identifier": "ChangesetJobState.Valid",
                      "newPage": false,
                      "searchKey": "types.ChangesetJobState.Valid",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s ChangesetJobState) Valid() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s ChangesetJobState) Valid() bool\n```\n\nValid returns true if the given ChangesetJobState is valid. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetJobType",
              "documentation": {
                "identifier": "ChangesetJobType",
                "newPage": false,
                "searchKey": "types.ChangesetJobType",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetJobType string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetJobType string\n```\n\nChangesetJobType specifies all valid type of jobs that the bulk processor understands. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetLabel",
              "documentation": {
                "identifier": "ChangesetLabel",
                "newPage": false,
                "searchKey": "types.ChangesetLabel",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetLabel struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetLabel struct {\n\tName        string\n\tColor       string\n\tDescription string\n}\n```\n\nChangesetLabel represents a label applied to a changeset \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetPublicationState",
              "documentation": {
                "identifier": "ChangesetPublicationState",
                "newPage": false,
                "searchKey": "types.ChangesetPublicationState",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetPublicationState string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetPublicationState string\n```\n\nChangesetPublicationState defines the possible publication states of a Changeset. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetPublicationState.Published",
                    "documentation": {
                      "identifier": "ChangesetPublicationState.Published",
                      "newPage": false,
                      "searchKey": "types.ChangesetPublicationState.Published",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s ChangesetPublicationState) Published() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s ChangesetPublicationState) Published() bool\n```\n\nPublished returns true if the given state is ChangesetPublicationStatePublished. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetPublicationState.Unpublished",
                    "documentation": {
                      "identifier": "ChangesetPublicationState.Unpublished",
                      "newPage": false,
                      "searchKey": "types.ChangesetPublicationState.Unpublished",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s ChangesetPublicationState) Unpublished() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s ChangesetPublicationState) Unpublished() bool\n```\n\nUnpublished returns true if the given state is ChangesetPublicationStateUnpublished. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetPublicationState.Valid",
                    "documentation": {
                      "identifier": "ChangesetPublicationState.Valid",
                      "newPage": false,
                      "searchKey": "types.ChangesetPublicationState.Valid",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s ChangesetPublicationState) Valid() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s ChangesetPublicationState) Valid() bool\n```\n\nValid returns true if the given ChangesetPublicationState is valid. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetReviewState",
              "documentation": {
                "identifier": "ChangesetReviewState",
                "newPage": false,
                "searchKey": "types.ChangesetReviewState",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetReviewState string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetReviewState string\n```\n\nChangesetReviewState defines the possible states of a Changeset's review. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetReviewState.Valid",
                    "documentation": {
                      "identifier": "ChangesetReviewState.Valid",
                      "newPage": false,
                      "searchKey": "types.ChangesetReviewState.Valid",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s ChangesetReviewState) Valid() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s ChangesetReviewState) Valid() bool\n```\n\nValid returns true if the given Changeset review state is valid. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetSpec",
              "documentation": {
                "identifier": "ChangesetSpec",
                "newPage": false,
                "searchKey": "types.ChangesetSpec",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetSpec struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetSpec struct {\n\tID     int64\n\tRandID string\n\n\tRawSpec string\n\t// TODO(mrnugget): should we rename the \"spec\" column to \"description\"?\n\tSpec *ChangesetSpecDescription\n\n\tDiffStatAdded   int32\n\tDiffStatChanged int32\n\tDiffStatDeleted int32\n\n\tBatchSpecID int64\n\tRepoID      api.RepoID\n\tUserID      int32\n\n\tCreatedAt time.Time\n\tUpdatedAt time.Time\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#NewChangesetSpecFromRaw",
                    "documentation": {
                      "identifier": "NewChangesetSpecFromRaw",
                      "newPage": false,
                      "searchKey": "types.NewChangesetSpecFromRaw",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewChangesetSpecFromRaw(rawSpec string) (*ChangesetSpec, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewChangesetSpecFromRaw(rawSpec string) (*ChangesetSpec, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetSpec.Clone",
                    "documentation": {
                      "identifier": "ChangesetSpec.Clone",
                      "newPage": false,
                      "searchKey": "types.ChangesetSpec.Clone",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cs *ChangesetSpec) Clone() *ChangesetSpec"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cs *ChangesetSpec) Clone() *ChangesetSpec\n```\n\nClone returns a clone of a ChangesetSpec. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetSpec.DiffStat",
                    "documentation": {
                      "identifier": "ChangesetSpec.DiffStat",
                      "newPage": false,
                      "searchKey": "types.ChangesetSpec.DiffStat",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cs *ChangesetSpec) DiffStat() diff.Stat"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cs *ChangesetSpec) DiffStat() diff.Stat\n```\n\nDiffStat returns a *diff.Stat. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetSpec.ExpiresAt",
                    "documentation": {
                      "identifier": "ChangesetSpec.ExpiresAt",
                      "newPage": false,
                      "searchKey": "types.ChangesetSpec.ExpiresAt",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cs *ChangesetSpec) ExpiresAt() time.Time"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cs *ChangesetSpec) ExpiresAt() time.Time\n```\n\nExpiresAt returns the time when the ChangesetSpec will be deleted if not attached to a BatchSpec. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetSpec.UnmarshalValidate",
                    "documentation": {
                      "identifier": "ChangesetSpec.UnmarshalValidate",
                      "newPage": false,
                      "searchKey": "types.ChangesetSpec.UnmarshalValidate",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cs *ChangesetSpec) UnmarshalValidate() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cs *ChangesetSpec) UnmarshalValidate() error\n```\n\nUnmarshalValidate unmarshals the RawSpec into Spec and validates it against the ChangesetSpec schema and does additional semantic validation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetSpec.computeDiffStat",
                    "documentation": {
                      "identifier": "ChangesetSpec.computeDiffStat",
                      "newPage": false,
                      "searchKey": "types.ChangesetSpec.computeDiffStat",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cs *ChangesetSpec) computeDiffStat() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cs *ChangesetSpec) computeDiffStat() error\n```\n\ncomputeDiffStat parses the Diff of the ChangesetSpecDescription and sets the diff stat fields that can be retrieved with DiffStat(). If the Diff is invalid or parsing failed, an error is returned. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetSpecDescription",
              "documentation": {
                "identifier": "ChangesetSpecDescription",
                "newPage": false,
                "searchKey": "types.ChangesetSpecDescription",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetSpecDescription struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetSpecDescription struct {\n\tBaseRepository graphql.ID `json:\"baseRepository,omitempty\"`\n\n\t// If this is not empty, the description is a reference to an existing\n\t// changeset and the rest of these fields are empty.\n\tExternalID string `json:\"externalID,omitempty\"`\n\n\tBaseRev string `json:\"baseRev,omitempty\"`\n\tBaseRef string `json:\"baseRef,omitempty\"`\n\n\tHeadRepository graphql.ID `json:\"headRepository,omitempty\"`\n\tHeadRef        string     `json:\"headRef,omitempty\"`\n\n\tTitle string `json:\"title,omitempty\"`\n\tBody  string `json:\"body,omitempty\"`\n\n\tCommits []GitCommitDescription `json:\"commits,omitempty\"`\n\n\tPublished batches.PublishedValue `json:\"published,omitempty\"`\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetSpecDescription.AuthorEmail",
                    "documentation": {
                      "identifier": "ChangesetSpecDescription.AuthorEmail",
                      "newPage": false,
                      "searchKey": "types.ChangesetSpecDescription.AuthorEmail",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *ChangesetSpecDescription) AuthorEmail() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *ChangesetSpecDescription) AuthorEmail() (string, error)\n```\n\nAuthorEmail returns the author email of the first GitCommitDescription in Commits. If the ChangesetSpecDescription doesn't have Commits it returns ErrNoCommits. \n\nWe currently only support a single commit in Commits. Once we support more, this method will need to be revisited. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetSpecDescription.AuthorName",
                    "documentation": {
                      "identifier": "ChangesetSpecDescription.AuthorName",
                      "newPage": false,
                      "searchKey": "types.ChangesetSpecDescription.AuthorName",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *ChangesetSpecDescription) AuthorName() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *ChangesetSpecDescription) AuthorName() (string, error)\n```\n\nAuthorName returns the author name of the first GitCommitDescription in Commits. If the ChangesetSpecDescription doesn't have Commits it returns ErrNoCommits. \n\nWe currently only support a single commit in Commits. Once we support more, this method will need to be revisited. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetSpecDescription.CommitMessage",
                    "documentation": {
                      "identifier": "ChangesetSpecDescription.CommitMessage",
                      "newPage": false,
                      "searchKey": "types.ChangesetSpecDescription.CommitMessage",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *ChangesetSpecDescription) CommitMessage() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *ChangesetSpecDescription) CommitMessage() (string, error)\n```\n\nCommitMessage returns the Message of the first GitCommitDescription in Commits. If the ChangesetSpecDescription doesn't have Commits it returns ErrNoCommits. \n\nWe currently only support a single commit in Commits. Once we support more, this method will need to be revisited. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetSpecDescription.Diff",
                    "documentation": {
                      "identifier": "ChangesetSpecDescription.Diff",
                      "newPage": false,
                      "searchKey": "types.ChangesetSpecDescription.Diff",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *ChangesetSpecDescription) Diff() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *ChangesetSpecDescription) Diff() (string, error)\n```\n\nDiff returns the Diff of the first GitCommitDescription in Commits. If the ChangesetSpecDescription doesn't have Commits it returns ErrNoCommits. \n\nWe currently only support a single commit in Commits. Once we support more, this method will need to be revisited. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetSpecDescription.IsBranch",
                    "documentation": {
                      "identifier": "ChangesetSpecDescription.IsBranch",
                      "newPage": false,
                      "searchKey": "types.ChangesetSpecDescription.IsBranch",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *ChangesetSpecDescription) IsBranch() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *ChangesetSpecDescription) IsBranch() bool\n```\n\nIsBranch returns whether the description is of type ChangesetSpecDescriptionTypeBranch. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetSpecDescription.IsImportingExisting",
                    "documentation": {
                      "identifier": "ChangesetSpecDescription.IsImportingExisting",
                      "newPage": false,
                      "searchKey": "types.ChangesetSpecDescription.IsImportingExisting",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *ChangesetSpecDescription) IsImportingExisting() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *ChangesetSpecDescription) IsImportingExisting() bool\n```\n\nIsExisting returns whether the description is of type ChangesetSpecDescriptionTypeExisting. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetSpecDescription.Type",
                    "documentation": {
                      "identifier": "ChangesetSpecDescription.Type",
                      "newPage": false,
                      "searchKey": "types.ChangesetSpecDescription.Type",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *ChangesetSpecDescription) Type() ChangesetSpecDescriptionType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *ChangesetSpecDescription) Type() ChangesetSpecDescriptionType\n```\n\nType returns the ChangesetSpecDescriptionType of the ChangesetSpecDescription. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetSpecDescriptionType",
              "documentation": {
                "identifier": "ChangesetSpecDescriptionType",
                "newPage": false,
                "searchKey": "types.ChangesetSpecDescriptionType",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetSpecDescriptionType string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetSpecDescriptionType string\n```\n\nChangesetSpecDescriptionType tells the consumer what the type of a ChangesetSpecDescription is without having to look into the description. Useful in the GraphQL when a HiddenChangesetSpec is returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetSpecs",
              "documentation": {
                "identifier": "ChangesetSpecs",
                "newPage": false,
                "searchKey": "types.ChangesetSpecs",
                "tags": [
                  "array",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetSpecs []*types.ChangesetSpec"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetSpecs []*ChangesetSpec\n```\n\nChangesetSpecs is a slice of *ChangesetSpecs. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetSpecs.RepoIDs",
                    "documentation": {
                      "identifier": "ChangesetSpecs.RepoIDs",
                      "newPage": false,
                      "searchKey": "types.ChangesetSpecs.RepoIDs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cs ChangesetSpecs) RepoIDs() []api.RepoID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cs ChangesetSpecs) RepoIDs() []api.RepoID\n```\n\nIDs returns the unique RepoIDs of all changeset specs in the slice. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetState",
              "documentation": {
                "identifier": "ChangesetState",
                "newPage": false,
                "searchKey": "types.ChangesetState",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetState string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetState string\n```\n\nChangesetState defines the possible states of a Changeset. These are displayed in the UI as well. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetState.Valid",
                    "documentation": {
                      "identifier": "ChangesetState.Valid",
                      "newPage": false,
                      "searchKey": "types.ChangesetState.Valid",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s ChangesetState) Valid() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s ChangesetState) Valid() bool\n```\n\nValid returns true if the given ChangesetState is valid. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetSyncData",
              "documentation": {
                "identifier": "ChangesetSyncData",
                "newPage": false,
                "searchKey": "types.ChangesetSyncData",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetSyncData struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetSyncData struct {\n\tChangesetID int64\n\t// UpdatedAt is the time we last updated / synced the changeset in our DB\n\tUpdatedAt time.Time\n\t// LatestEvent is the time we received the most recent changeset event\n\tLatestEvent time.Time\n\t// ExternalUpdatedAt is the time the external changeset last changed\n\tExternalUpdatedAt time.Time\n\t// RepoExternalServiceID is the external_service_id in the repo table, usually\n\t// represented by the code host URL\n\tRepoExternalServiceID string\n}\n```\n\nChangesetSyncData represents data about the sync status of a changeset \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetSyncState",
              "documentation": {
                "identifier": "ChangesetSyncState",
                "newPage": false,
                "searchKey": "types.ChangesetSyncState",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetSyncState struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetSyncState struct {\n\tBaseRefOid string\n\tHeadRefOid string\n\n\t// This is essentially the result of c.ExternalState != BatchChangeStateOpen\n\t// the last time a sync occured. We use this to short circuit computing the\n\t// sync state if the changeset remains closed.\n\tIsComplete bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ChangesetSyncState.Equals",
                    "documentation": {
                      "identifier": "ChangesetSyncState.Equals",
                      "newPage": false,
                      "searchKey": "types.ChangesetSyncState.Equals",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (state *ChangesetSyncState) Equals(old *ChangesetSyncState) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (state *ChangesetSyncState) Equals(old *ChangesetSyncState) bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetTemplate",
              "documentation": {
                "identifier": "ChangesetTemplate",
                "newPage": false,
                "searchKey": "types.ChangesetTemplate",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetTemplate struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetTemplate struct {\n\tTitle     string                   `json:\"title,omitempty\" yaml:\"title,omitempty\"`\n\tBody      string                   `json:\"body,omitempty\" yaml:\"body,omitempty\"`\n\tBranch    string                   `json:\"branch,omitempty\" yaml:\"branch,omitempty\"`\n\tCommit    CommitTemplate           `json:\"commit,omitempty\" yaml:\"commit,omitempty\"`\n\tPublished overridable.BoolOrString `json:\"published,omitempty\" yaml:\"published,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#Changesets",
              "documentation": {
                "identifier": "Changesets",
                "newPage": false,
                "searchKey": "types.Changesets",
                "tags": [
                  "array",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Changesets []*types.Changeset"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Changesets []*Changeset\n```\n\nChangesets is a slice of *Changesets. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changesets.Filter",
                    "documentation": {
                      "identifier": "Changesets.Filter",
                      "newPage": false,
                      "searchKey": "types.Changesets.Filter",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cs Changesets) Filter(predicate func(*Changeset) bool) (filtered Changesets)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cs Changesets) Filter(predicate func(*Changeset) bool) (filtered Changesets)\n```\n\nFilter returns a new Changesets slice in which changesets have been filtered out for which the predicate didn't return true. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changesets.Find",
                    "documentation": {
                      "identifier": "Changesets.Find",
                      "newPage": false,
                      "searchKey": "types.Changesets.Find",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cs Changesets) Find(predicate func(*Changeset) bool) *Changeset"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cs Changesets) Find(predicate func(*Changeset) bool) *Changeset\n```\n\nFind returns the first changeset in the slice for which the predicate returned true. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changesets.IDs",
                    "documentation": {
                      "identifier": "Changesets.IDs",
                      "newPage": false,
                      "searchKey": "types.Changesets.IDs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cs Changesets) IDs() []int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cs Changesets) IDs() []int64\n```\n\nIDs returns the IDs of all changesets in the slice. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#Changesets.RepoIDs",
                    "documentation": {
                      "identifier": "Changesets.RepoIDs",
                      "newPage": false,
                      "searchKey": "types.Changesets.RepoIDs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cs Changesets) RepoIDs() []api.RepoID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cs Changesets) RepoIDs() []api.RepoID\n```\n\nIDs returns the unique RepoIDs of all changesets in the slice. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ChangesetsStats",
              "documentation": {
                "identifier": "ChangesetsStats",
                "newPage": false,
                "searchKey": "types.ChangesetsStats",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetsStats struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetsStats struct {\n\tRetrying    int32\n\tFailed      int32\n\tScheduled   int32\n\tProcessing  int32\n\tUnpublished int32\n\tDraft       int32\n\tOpen        int32\n\tMerged      int32\n\tClosed      int32\n\tDeleted     int32\n\tArchived    int32\n\tTotal       int32\n}\n```\n\nChangesetsStats holds stats information on a list of changesets. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#CodeHost",
              "documentation": {
                "identifier": "CodeHost",
                "newPage": false,
                "searchKey": "types.CodeHost",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CodeHost struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CodeHost struct {\n\tExternalServiceType string\n\tExternalServiceID   string\n\tRequiresSSH         bool\n}\n```\n\nCodeHost represents one configured external code host available on this Sourcegraph instance. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#CodeHost.IsSupported",
                    "documentation": {
                      "identifier": "CodeHost.IsSupported",
                      "newPage": false,
                      "searchKey": "types.CodeHost.IsSupported",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *CodeHost) IsSupported() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *CodeHost) IsSupported() bool\n```\n\nIsSupported returns true, when this code host is supported by the batch changes feature. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#CodehostCapabilities",
              "documentation": {
                "identifier": "CodehostCapabilities",
                "newPage": false,
                "searchKey": "types.CodehostCapabilities",
                "tags": [
                  "object"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CodehostCapabilities map[types.CodehostCapability]bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CodehostCapabilities map[CodehostCapability]bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#CodehostCapability",
              "documentation": {
                "identifier": "CodehostCapability",
                "newPage": false,
                "searchKey": "types.CodehostCapability",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CodehostCapability string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CodehostCapability string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#CommitTemplate",
              "documentation": {
                "identifier": "CommitTemplate",
                "newPage": false,
                "searchKey": "types.CommitTemplate",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CommitTemplate struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CommitTemplate struct {\n\tMessage string `json:\"message,omitempty\" yaml:\"message,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#GitCommitDescription",
              "documentation": {
                "identifier": "GitCommitDescription",
                "newPage": false,
                "searchKey": "types.GitCommitDescription",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitCommitDescription struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitCommitDescription struct {\n\tMessage     string `json:\"message,omitempty\"`\n\tDiff        string `json:\"diff,omitempty\"`\n\tAuthorName  string `json:\"authorName,omitempty\"`\n\tAuthorEmail string `json:\"authorEmail,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#Keyer",
              "documentation": {
                "identifier": "Keyer",
                "newPage": false,
                "searchKey": "types.Keyer",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Keyer interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Keyer interface {\n\tKey() string\n}\n```\n\nKeyer represents items that return a unique key \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerOperation",
              "documentation": {
                "identifier": "ReconcilerOperation",
                "newPage": false,
                "searchKey": "types.ReconcilerOperation",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ReconcilerOperation string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ReconcilerOperation string\n```\n\nReconcilerOperation is an enum to distinguish between different reconciler operations. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ReconcilerOperation.Valid",
                    "documentation": {
                      "identifier": "ReconcilerOperation.Valid",
                      "newPage": false,
                      "searchKey": "types.ReconcilerOperation.Valid",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r ReconcilerOperation) Valid() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r ReconcilerOperation) Valid() bool\n```\n\nValid returns true if the given ReconcilerOperation is valid. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ReconcilerState",
              "documentation": {
                "identifier": "ReconcilerState",
                "newPage": false,
                "searchKey": "types.ReconcilerState",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ReconcilerState string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ReconcilerState string\n```\n\nReconcilerState defines the possible states of a Reconciler. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ReconcilerState.ToDB",
                    "documentation": {
                      "identifier": "ReconcilerState.ToDB",
                      "newPage": false,
                      "searchKey": "types.ReconcilerState.ToDB",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s ReconcilerState) ToDB() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s ReconcilerState) ToDB() string\n```\n\nToDB returns the database representation of the reconciler state. That's needed because we want to use UPPERCASE ReconcilerStates in the application and GraphQL layer, but need to use lowercase in the database to make it work with workerutil.Worker. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#ReconcilerState.Valid",
                    "documentation": {
                      "identifier": "ReconcilerState.Valid",
                      "newPage": false,
                      "searchKey": "types.ReconcilerState.Valid",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s ReconcilerState) Valid() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s ReconcilerState) Valid() bool\n```\n\nValid returns true if the given ReconcilerState is valid. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#RewirerMapping",
              "documentation": {
                "identifier": "RewirerMapping",
                "newPage": false,
                "searchKey": "types.RewirerMapping",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RewirerMapping struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RewirerMapping struct {\n\tChangesetSpecID int64\n\tChangesetSpec   *ChangesetSpec\n\tChangesetID     int64\n\tChangeset       *Changeset\n\tRepoID          api.RepoID\n\tRepo            *types.Repo\n}\n```\n\nRewirerMapping maps a connection between ChangesetSpec and Changeset. If the ChangesetSpec doesn't match a Changeset (ie. it describes a to-be-created Changeset), ChangesetID is 0. If the ChangesetSpec is 0, the Changeset will be non-zero and means \"to be closed\". If both are non-zero values, the changeset should be updated with the changeset spec in the mapping. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#RewirerMappings",
              "documentation": {
                "identifier": "RewirerMappings",
                "newPage": false,
                "searchKey": "types.RewirerMappings",
                "tags": [
                  "array",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RewirerMappings []*types.RewirerMapping"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RewirerMappings []*RewirerMapping\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#RewirerMappings.ChangesetIDs",
                    "documentation": {
                      "identifier": "RewirerMappings.ChangesetIDs",
                      "newPage": false,
                      "searchKey": "types.RewirerMappings.ChangesetIDs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rm RewirerMappings) ChangesetIDs() []int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rm RewirerMappings) ChangesetIDs() []int64\n```\n\nChangesetIDs returns a list of unique changeset IDs in the slice of mappings. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#RewirerMappings.ChangesetSpecIDs",
                    "documentation": {
                      "identifier": "RewirerMappings.ChangesetSpecIDs",
                      "newPage": false,
                      "searchKey": "types.RewirerMappings.ChangesetSpecIDs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rm RewirerMappings) ChangesetSpecIDs() []int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rm RewirerMappings) ChangesetSpecIDs() []int64\n```\n\nChangesetSpecIDs returns a list of unique changeset spec IDs in the slice of mappings. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#RewirerMappings.RepoIDs",
                    "documentation": {
                      "identifier": "RewirerMappings.RepoIDs",
                      "newPage": false,
                      "searchKey": "types.RewirerMappings.RepoIDs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rm RewirerMappings) RepoIDs() []api.RepoID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rm RewirerMappings) RepoIDs() []api.RepoID\n```\n\nRepoIDs returns a list of unique repo IDs in the slice of mappings. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#SiteCredential",
              "documentation": {
                "identifier": "SiteCredential",
                "newPage": false,
                "searchKey": "types.SiteCredential",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SiteCredential struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SiteCredential struct {\n\tID                  int64\n\tExternalServiceType string\n\tExternalServiceID   string\n\tEncryptedCredential []byte\n\tEncryptionKeyID     string\n\tCreatedAt           time.Time\n\tUpdatedAt           time.Time\n\n\tKey encryption.Key\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#SiteCredential.Authenticator",
                    "documentation": {
                      "identifier": "SiteCredential.Authenticator",
                      "newPage": false,
                      "searchKey": "types.SiteCredential.Authenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sc *SiteCredential) Authenticator(ctx context.Context) (auth.Authenticator, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sc *SiteCredential) Authenticator(ctx context.Context) (auth.Authenticator, error)\n```\n\nAuthenticator decrypts and creates the authenticator associated with the site credential. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#SiteCredential.SetAuthenticator",
                    "documentation": {
                      "identifier": "SiteCredential.SetAuthenticator",
                      "newPage": false,
                      "searchKey": "types.SiteCredential.SetAuthenticator",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sc *SiteCredential) SetAuthenticator(ctx context.Context, a auth.Authenticator) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sc *SiteCredential) SetAuthenticator(ctx context.Context, a auth.Authenticator) error\n```\n\nSetAuthenticator encrypts and sets the authenticator within the site credential. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#changesetEventUpdateMismatchError",
              "documentation": {
                "identifier": "changesetEventUpdateMismatchError",
                "newPage": false,
                "searchKey": "types.changesetEventUpdateMismatchError",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type changesetEventUpdateMismatchError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype changesetEventUpdateMismatchError struct {\n\tfield    string\n\toriginal interface{}\n\trevised  interface{}\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/internal/batches/types#changesetEventUpdateMismatchError.Error",
                    "documentation": {
                      "identifier": "changesetEventUpdateMismatchError.Error",
                      "newPage": false,
                      "searchKey": "types.changesetEventUpdateMismatchError.Error",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *changesetEventUpdateMismatchError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *changesetEventUpdateMismatchError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#changesetSyncStateTestCase",
              "documentation": {
                "identifier": "changesetSyncStateTestCase",
                "newPage": false,
                "searchKey": "types.changesetSyncStateTestCase",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type changesetSyncStateTestCase struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype changesetSyncStateTestCase struct {\n\tstate [2]ChangesetSyncState\n\twant  bool\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/internal/batches/types#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#ExternalServiceSupports",
              "documentation": {
                "identifier": "ExternalServiceSupports",
                "newPage": false,
                "searchKey": "types.ExternalServiceSupports",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExternalServiceSupports(extSvcType string, capability CodehostCapability) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExternalServiceSupports(extSvcType string, capability CodehostCapability) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#IsKindSupported",
              "documentation": {
                "identifier": "IsKindSupported",
                "newPage": false,
                "searchKey": "types.IsKindSupported",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsKindSupported(extSvcKind string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsKindSupported(extSvcKind string) bool\n```\n\nIsKindSupported returns whether the given extsvc Kind is supported by batch changes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#IsRepoSupported",
              "documentation": {
                "identifier": "IsRepoSupported",
                "newPage": false,
                "searchKey": "types.IsRepoSupported",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsRepoSupported(spec *api.ExternalRepoSpec) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsRepoSupported(spec *api.ExternalRepoSpec) bool\n```\n\nIsRepoSupported returns whether the given ExternalRepoSpec is supported by the batch changes feature, based on the external service type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#NewChangesetEventMetadata",
              "documentation": {
                "identifier": "NewChangesetEventMetadata",
                "newPage": false,
                "searchKey": "types.NewChangesetEventMetadata",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewChangesetEventMetadata(k ChangesetEventKind) (interface{}, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewChangesetEventMetadata(k ChangesetEventKind) (interface{}, error)\n```\n\nNewChangesetEventMetadata returns a new metadata object for the given ChangesetEventKind. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#TestBatchSpecUnmarshalValidate",
              "documentation": {
                "identifier": "TestBatchSpecUnmarshalValidate",
                "newPage": false,
                "searchKey": "types.TestBatchSpecUnmarshalValidate",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBatchSpecUnmarshalValidate(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBatchSpecUnmarshalValidate(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#TestChangesetEvent",
              "documentation": {
                "identifier": "TestChangesetEvent",
                "newPage": false,
                "searchKey": "types.TestChangesetEvent",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChangesetEvent(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChangesetEvent(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#TestChangesetMetadata",
              "documentation": {
                "identifier": "TestChangesetMetadata",
                "newPage": false,
                "searchKey": "types.TestChangesetMetadata",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChangesetMetadata(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChangesetMetadata(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#TestChangesetSpecUnmarshalValidate",
              "documentation": {
                "identifier": "TestChangesetSpecUnmarshalValidate",
                "newPage": false,
                "searchKey": "types.TestChangesetSpecUnmarshalValidate",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChangesetSpecUnmarshalValidate(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChangesetSpecUnmarshalValidate(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#TestChangesetSyncStateEquals",
              "documentation": {
                "identifier": "TestChangesetSyncStateEquals",
                "newPage": false,
                "searchKey": "types.TestChangesetSyncStateEquals",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChangesetSyncStateEquals(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChangesetSyncStateEquals(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#TestChangeset_BaseRef",
              "documentation": {
                "identifier": "TestChangeset_BaseRef",
                "newPage": false,
                "searchKey": "types.TestChangeset_BaseRef",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChangeset_BaseRef(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChangeset_BaseRef(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#TestChangeset_BaseRefOid",
              "documentation": {
                "identifier": "TestChangeset_BaseRefOid",
                "newPage": false,
                "searchKey": "types.TestChangeset_BaseRefOid",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChangeset_BaseRefOid(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChangeset_BaseRefOid(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#TestChangeset_Body",
              "documentation": {
                "identifier": "TestChangeset_Body",
                "newPage": false,
                "searchKey": "types.TestChangeset_Body",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChangeset_Body(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChangeset_Body(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#TestChangeset_Clone",
              "documentation": {
                "identifier": "TestChangeset_Clone",
                "newPage": false,
                "searchKey": "types.TestChangeset_Clone",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChangeset_Clone(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChangeset_Clone(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#TestChangeset_DiffStat",
              "documentation": {
                "identifier": "TestChangeset_DiffStat",
                "newPage": false,
                "searchKey": "types.TestChangeset_DiffStat",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChangeset_DiffStat(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChangeset_DiffStat(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#TestChangeset_ExternalCreatedAt",
              "documentation": {
                "identifier": "TestChangeset_ExternalCreatedAt",
                "newPage": false,
                "searchKey": "types.TestChangeset_ExternalCreatedAt",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChangeset_ExternalCreatedAt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChangeset_ExternalCreatedAt(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#TestChangeset_HeadRef",
              "documentation": {
                "identifier": "TestChangeset_HeadRef",
                "newPage": false,
                "searchKey": "types.TestChangeset_HeadRef",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChangeset_HeadRef(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChangeset_HeadRef(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#TestChangeset_HeadRefOid",
              "documentation": {
                "identifier": "TestChangeset_HeadRefOid",
                "newPage": false,
                "searchKey": "types.TestChangeset_HeadRefOid",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChangeset_HeadRefOid(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChangeset_HeadRefOid(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#TestChangeset_Labels",
              "documentation": {
                "identifier": "TestChangeset_Labels",
                "newPage": false,
                "searchKey": "types.TestChangeset_Labels",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChangeset_Labels(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChangeset_Labels(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#TestChangeset_ResetReconcilerState",
              "documentation": {
                "identifier": "TestChangeset_ResetReconcilerState",
                "newPage": false,
                "searchKey": "types.TestChangeset_ResetReconcilerState",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChangeset_ResetReconcilerState(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChangeset_ResetReconcilerState(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#TestChangeset_SetMetadata",
              "documentation": {
                "identifier": "TestChangeset_SetMetadata",
                "newPage": false,
                "searchKey": "types.TestChangeset_SetMetadata",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChangeset_SetMetadata(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChangeset_SetMetadata(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#TestChangeset_Title",
              "documentation": {
                "identifier": "TestChangeset_Title",
                "newPage": false,
                "searchKey": "types.TestChangeset_Title",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChangeset_Title(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChangeset_Title(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#TestChangeset_URL",
              "documentation": {
                "identifier": "TestChangeset_URL",
                "newPage": false,
                "searchKey": "types.TestChangeset_URL",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChangeset_URL(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChangeset_URL(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#WithCurrentSpecID",
              "documentation": {
                "identifier": "WithCurrentSpecID",
                "newPage": false,
                "searchKey": "types.WithCurrentSpecID",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func WithCurrentSpecID(id int64) func(*Changeset) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc WithCurrentSpecID(id int64) func(*Changeset) bool\n```\n\nWithCurrentSpecID returns a predicate function that can be passed to Changesets.Filter/Find, etc. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#WithExternalID",
              "documentation": {
                "identifier": "WithExternalID",
                "newPage": false,
                "searchKey": "types.WithExternalID",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func WithExternalID(id string) func(*Changeset) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc WithExternalID(id string) func(*Changeset) bool\n```\n\nWithExternalID returns a predicate function that can be passed to Changesets.Filter/Find, etc. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#init.config.go",
              "documentation": {
                "identifier": "init.config.go",
                "newPage": false,
                "searchKey": "types.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#keyID",
              "documentation": {
                "identifier": "keyID",
                "newPage": false,
                "searchKey": "types.keyID",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func keyID(ctx context.Context, key encryption.Key) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc keyID(ctx context.Context, key encryption.Key) (string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#unixMilliToTime",
              "documentation": {
                "identifier": "unixMilliToTime",
                "newPage": false,
                "searchKey": "types.unixMilliToTime",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func unixMilliToTime(ms int64) time.Time"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unixMilliToTime(ms int64) time.Time\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#updateGitHubCommit",
              "documentation": {
                "identifier": "updateGitHubCommit",
                "newPage": false,
                "searchKey": "types.updateGitHubCommit",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func updateGitHubCommit(e, o *github.Commit)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc updateGitHubCommit(e, o *github.Commit)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/internal/batches/types#updateGitHubPullRequestReview",
              "documentation": {
                "identifier": "updateGitHubPullRequestReview",
                "newPage": false,
                "searchKey": "types.updateGitHubPullRequestReview",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func updateGitHubPullRequestReview(e, o *github.PullRequestReview)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc updateGitHubPullRequestReview(e, o *github.PullRequestReview)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
