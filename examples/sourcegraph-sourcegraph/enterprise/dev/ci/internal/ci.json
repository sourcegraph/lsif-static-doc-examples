{
  "pathID": "/enterprise/dev/ci/internal/ci",
  "documentation": {
    "identifier": "ci",
    "newPage": true,
    "searchKey": "enterprise/dev/ci/internal/ci",
    "tags": [
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package ci"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package ci is responsible for generating a Buildkite pipeline configuration. It is invoked by the gen-pipeline.go command. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/dev/ci/internal/ci#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#ignoredRootFiles",
              "documentation": {
                "identifier": "ignoredRootFiles",
                "newPage": false,
                "searchKey": "ci.ignoredRootFiles",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ignoredRootFiles"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ignoredRootFiles = ...\n```\n\nChanges in the files below will be ignored by the Storybook workflow. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/dev/ci/internal/ci#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#Config",
              "documentation": {
                "identifier": "Config",
                "newPage": false,
                "searchKey": "ci.Config",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Config struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Config struct {\n\tnow         time.Time\n\tbranch      string\n\tversion     string\n\tcommit      string\n\tbuildNumber int\n\n\t// mustIncludeCommit, if non-empty, is a list of commits at least one of which must be present\n\t// in the branch. If empty, then no check is enforced.\n\tmustIncludeCommit []string\n\n\t// changedFiles is the list of files that have changed since the\n\t// merge-base with origin/master.\n\tchangedFiles []string\n\n\ttaggedRelease         bool\n\treleaseBranch         bool\n\tisBextReleaseBranch   bool\n\tisBextNightly         bool\n\tisRenovateBranch      bool\n\tpatch                 bool\n\tpatchNoTest           bool\n\tbuildCandidatesNoTest bool\n\tisQuick               bool\n\tisMainDryRun          bool\n\tisBackendDryRun       bool\n\n\t// profilingEnabled, if true, tells buildkite to print timing and resource utilization information\n\t// for each command\n\tprofilingEnabled bool\n}\n```\n\nConfig is the set of configuration parameters that determine the structure of the CI build. These parameters are extracted from the build environment (branch name, commit hash, timestamp, etc.) \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/dev/ci/internal/ci#ComputeConfig",
                    "documentation": {
                      "identifier": "ComputeConfig",
                      "newPage": false,
                      "searchKey": "ci.ComputeConfig",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func ComputeConfig() Config"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc ComputeConfig() Config\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/dev/ci/internal/ci#Config.shortCommit",
                    "documentation": {
                      "identifier": "Config.shortCommit",
                      "newPage": false,
                      "searchKey": "ci.Config.shortCommit",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c Config) shortCommit() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c Config) shortCommit() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/dev/ci/internal/ci#Config.isMainBranch",
                    "documentation": {
                      "identifier": "Config.isMainBranch",
                      "newPage": false,
                      "searchKey": "ci.Config.isMainBranch",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Config) isMainBranch() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Config) isMainBranch() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/dev/ci/internal/ci#Config.ensureCommit",
                    "documentation": {
                      "identifier": "Config.ensureCommit",
                      "newPage": false,
                      "searchKey": "ci.Config.ensureCommit",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c Config) ensureCommit() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c Config) ensureCommit() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/dev/ci/internal/ci#Config.isPR",
                    "documentation": {
                      "identifier": "Config.isPR",
                      "newPage": false,
                      "searchKey": "ci.Config.isPR",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c Config) isPR() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c Config) isPR() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/dev/ci/internal/ci#Config.isDocsOnly",
                    "documentation": {
                      "identifier": "Config.isDocsOnly",
                      "newPage": false,
                      "searchKey": "ci.Config.isDocsOnly",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c Config) isDocsOnly() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c Config) isDocsOnly() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/dev/ci/internal/ci#Config.isSgOnly",
                    "documentation": {
                      "identifier": "Config.isSgOnly",
                      "newPage": false,
                      "searchKey": "ci.Config.isSgOnly",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c Config) isSgOnly() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c Config) isSgOnly() bool\n```\n\nisSgOnly returns whether the changedFiles are only in the ./dev/sg folder. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/dev/ci/internal/ci#Config.isGoOnly",
                    "documentation": {
                      "identifier": "Config.isGoOnly",
                      "newPage": false,
                      "searchKey": "ci.Config.isGoOnly",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c Config) isGoOnly() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c Config) isGoOnly() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/dev/ci/internal/ci#Config.shouldRunE2EandQA",
                    "documentation": {
                      "identifier": "Config.shouldRunE2EandQA",
                      "newPage": false,
                      "searchKey": "ci.Config.shouldRunE2EandQA",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c Config) shouldRunE2EandQA() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c Config) shouldRunE2EandQA() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/dev/ci/internal/ci#Config.candidateImageTag",
                    "documentation": {
                      "identifier": "Config.candidateImageTag",
                      "newPage": false,
                      "searchKey": "ci.Config.candidateImageTag",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c Config) candidateImageTag() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c Config) candidateImageTag() string\n```\n\ncandidateImageTag provides the tag for a candidate image built for this Buildkite run. \n\nNote that the availability of this image depends on whether a candidate gets built, as determined in `addDockerImages()`. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/dev/ci/internal/ci#Config.isStorybookAffected",
                    "documentation": {
                      "identifier": "Config.isStorybookAffected",
                      "newPage": false,
                      "searchKey": "ci.Config.isStorybookAffected",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c Config) isStorybookAffected() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c Config) isStorybookAffected() bool\n```\n\nRun Storybook workflow only if related files were changed. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/dev/ci/internal/ci#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#contains",
              "documentation": {
                "identifier": "contains",
                "newPage": false,
                "searchKey": "ci.contains",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func contains(s []string, str string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc contains(s []string, str string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#isAllowedRootFile",
              "documentation": {
                "identifier": "isAllowedRootFile",
                "newPage": false,
                "searchKey": "ci.isAllowedRootFile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isAllowedRootFile(p string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isAllowedRootFile(p string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#addDocs",
              "documentation": {
                "identifier": "addDocs",
                "newPage": false,
                "searchKey": "ci.addDocs",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addDocs(pipeline *bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addDocs(pipeline *bk.Pipeline)\n```\n\nVerifies the docs formatting and builds the `docsite` command. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#addCheck",
              "documentation": {
                "identifier": "addCheck",
                "newPage": false,
                "searchKey": "ci.addCheck",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addCheck(pipeline *bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addCheck(pipeline *bk.Pipeline)\n```\n\nAdds the static check test step. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#addLint",
              "documentation": {
                "identifier": "addLint",
                "newPage": false,
                "searchKey": "ci.addLint",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addLint(pipeline *bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addLint(pipeline *bk.Pipeline)\n```\n\nAdds the lint test step. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#addWebApp",
              "documentation": {
                "identifier": "addWebApp",
                "newPage": false,
                "searchKey": "ci.addWebApp",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addWebApp(pipeline *bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addWebApp(pipeline *bk.Pipeline)\n```\n\nAdds steps for the OSS and Enterprise web app builds. Runs the web app tests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#addBrowserExt",
              "documentation": {
                "identifier": "addBrowserExt",
                "newPage": false,
                "searchKey": "ci.addBrowserExt",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addBrowserExt(pipeline *bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addBrowserExt(pipeline *bk.Pipeline)\n```\n\nBuilds and tests the browser extension. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#addSharedTests",
              "documentation": {
                "identifier": "addSharedTests",
                "newPage": false,
                "searchKey": "ci.addSharedTests",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addSharedTests(c Config) func(pipeline *bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addSharedTests(c Config) func(pipeline *bk.Pipeline)\n```\n\nAdds the shared frontend tests (shared between the web app and browser extension). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#addBrandedTests",
              "documentation": {
                "identifier": "addBrandedTests",
                "newPage": false,
                "searchKey": "ci.addBrandedTests",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addBrandedTests(pipeline *bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addBrandedTests(pipeline *bk.Pipeline)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#addPostgresBackcompat",
              "documentation": {
                "identifier": "addPostgresBackcompat",
                "newPage": false,
                "searchKey": "ci.addPostgresBackcompat",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addPostgresBackcompat(pipeline *bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addPostgresBackcompat(pipeline *bk.Pipeline)\n```\n\nAdds PostgreSQL backcompat tests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#addGoTests",
              "documentation": {
                "identifier": "addGoTests",
                "newPage": false,
                "searchKey": "ci.addGoTests",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addGoTests(pipeline *bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addGoTests(pipeline *bk.Pipeline)\n```\n\nAdds the Go test step. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#addGoBuild",
              "documentation": {
                "identifier": "addGoBuild",
                "newPage": false,
                "searchKey": "ci.addGoBuild",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addGoBuild(pipeline *bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addGoBuild(pipeline *bk.Pipeline)\n```\n\nBuilds the OSS and Enterprise Go commands. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#addDockerfileLint",
              "documentation": {
                "identifier": "addDockerfileLint",
                "newPage": false,
                "searchKey": "ci.addDockerfileLint",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addDockerfileLint(pipeline *bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addDockerfileLint(pipeline *bk.Pipeline)\n```\n\nLints the Dockerfiles. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#addBackendIntegrationTests",
              "documentation": {
                "identifier": "addBackendIntegrationTests",
                "newPage": false,
                "searchKey": "ci.addBackendIntegrationTests",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addBackendIntegrationTests(c Config) func(*bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addBackendIntegrationTests(c Config) func(*bk.Pipeline)\n```\n\nAdds backend integration tests step. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#addBrowserExtensionE2ESteps",
              "documentation": {
                "identifier": "addBrowserExtensionE2ESteps",
                "newPage": false,
                "searchKey": "ci.addBrowserExtensionE2ESteps",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addBrowserExtensionE2ESteps(pipeline *bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addBrowserExtensionE2ESteps(pipeline *bk.Pipeline)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#addBrowserExtensionReleaseSteps",
              "documentation": {
                "identifier": "addBrowserExtensionReleaseSteps",
                "newPage": false,
                "searchKey": "ci.addBrowserExtensionReleaseSteps",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addBrowserExtensionReleaseSteps(pipeline *bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addBrowserExtensionReleaseSteps(pipeline *bk.Pipeline)\n```\n\nRelease the browser extension. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#wait",
              "documentation": {
                "identifier": "wait",
                "newPage": false,
                "searchKey": "ci.wait",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func wait(pipeline *bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc wait(pipeline *bk.Pipeline)\n```\n\nAdds a Buildkite pipeline \"Wait\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#triggerAsync",
              "documentation": {
                "identifier": "triggerAsync",
                "newPage": false,
                "searchKey": "ci.triggerAsync",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func triggerAsync(c Config) func(*bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc triggerAsync(c Config) func(*bk.Pipeline)\n```\n\nTrigger the async pipeline to run. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#triggerUpdaterPipeline",
              "documentation": {
                "identifier": "triggerUpdaterPipeline",
                "newPage": false,
                "searchKey": "ci.triggerUpdaterPipeline",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func triggerUpdaterPipeline(c Config) func(*bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc triggerUpdaterPipeline(c Config) func(*bk.Pipeline)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#clusterDockerImages",
              "documentation": {
                "identifier": "clusterDockerImages",
                "newPage": false,
                "searchKey": "ci.clusterDockerImages",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func clusterDockerImages(images []string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc clusterDockerImages(images []string) string\n```\n\nimages used by cluster-qa test \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#triggerE2EandQA",
              "documentation": {
                "identifier": "triggerE2EandQA",
                "newPage": false,
                "searchKey": "ci.triggerE2EandQA",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func triggerE2EandQA(c Config, commonEnv map[string]string) func(*bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc triggerE2EandQA(c Config, commonEnv map[string]string) func(*bk.Pipeline)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#copyEnv",
              "documentation": {
                "identifier": "copyEnv",
                "newPage": false,
                "searchKey": "ci.copyEnv",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func copyEnv(keys ...string) map[string]string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc copyEnv(keys ...string) map[string]string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#addDockerImages",
              "documentation": {
                "identifier": "addDockerImages",
                "newPage": false,
                "searchKey": "ci.addDockerImages",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addDockerImages(c Config, final bool) func(*bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addDockerImages(c Config, final bool) func(*bk.Pipeline)\n```\n\nBuild all relevant Docker images for Sourcegraph (for example, candidates and final images), given the current CI case (e.g., \"tagged release\", \"release branch\", \"master branch\", etc.) \n\nNotes: \n\n- Publishing of `insiders` implies deployment - See `images.go` for more details on what images get built and where they get published \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#addCandidateDockerImage",
              "documentation": {
                "identifier": "addCandidateDockerImage",
                "newPage": false,
                "searchKey": "ci.addCandidateDockerImage",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addCandidateDockerImage(c Config, app string) func(*bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addCandidateDockerImage(c Config, app string) func(*bk.Pipeline)\n```\n\nBuild a candidate docker image that will re-tagged with the final tags once the e2e tests pass. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#addFinalDockerImage",
              "documentation": {
                "identifier": "addFinalDockerImage",
                "newPage": false,
                "searchKey": "ci.addFinalDockerImage",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addFinalDockerImage(c Config, app string, insiders bool) func(*bk.Pipeline)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addFinalDockerImage(c Config, app string, insiders bool) func(*bk.Pipeline)\n```\n\nTag and push final Docker image for the service defined by `app` after the e2e tests pass. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/dev/ci/internal/ci#GeneratePipeline",
              "documentation": {
                "identifier": "GeneratePipeline",
                "newPage": false,
                "searchKey": "ci.GeneratePipeline",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func GeneratePipeline(c Config) (*bk.Pipeline, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc GeneratePipeline(c Config) (*bk.Pipeline, error)\n```\n\nGeneratePipeline is the main pipeline generation function. It defines the build pipeline for each of the main CI cases, which are defined in the main switch statement in the function. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
