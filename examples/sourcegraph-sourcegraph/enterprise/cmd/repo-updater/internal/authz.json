{
  "pathID": "/enterprise/cmd/repo-updater/internal/authz",
  "documentation": {
    "identifier": "authz",
    "newPage": true,
    "searchKey": "enterprise/cmd/repo-updater/internal/authz",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package authz"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/cmd/repo-updater/internal/authz#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#priorityLow",
              "documentation": {
                "identifier": "priorityLow",
                "newPage": false,
                "searchKey": "authz.priorityLow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const priorityLow"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst priorityLow priority = iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#priorityHigh",
              "documentation": {
                "identifier": "priorityHigh",
                "newPage": false,
                "searchKey": "authz.priorityHigh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const priorityHigh"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst priorityHigh\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#requestTypeRepo",
              "documentation": {
                "identifier": "requestTypeRepo",
                "newPage": false,
                "searchKey": "authz.requestTypeRepo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const requestTypeRepo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst requestTypeRepo requestType = iota + 1\n```\n\nA list of request types, the larger the value, the higher the priority. requestTypeUser had the highest because it is often triggered by a user action (e.g. sign up, log in). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#requestTypeUser",
              "documentation": {
                "identifier": "requestTypeUser",
                "newPage": false,
                "searchKey": "authz.requestTypeUser",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const requestTypeUser"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst requestTypeUser\n```\n\nA list of request types, the larger the value, the higher the priority. requestTypeUser had the highest because it is often triggered by a user action (e.g. sign up, log in). \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/repo-updater/internal/authz#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#metricsNoPerms",
              "documentation": {
                "identifier": "metricsNoPerms",
                "newPage": false,
                "searchKey": "authz.metricsNoPerms",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var metricsNoPerms"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar metricsNoPerms = ...\n```\n\nThe metrics that are exposed to Prometheus. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#metricsStalePerms",
              "documentation": {
                "identifier": "metricsStalePerms",
                "newPage": false,
                "searchKey": "authz.metricsStalePerms",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var metricsStalePerms"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar metricsStalePerms = ...\n```\n\nThe metrics that are exposed to Prometheus. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#metricsPermsGap",
              "documentation": {
                "identifier": "metricsPermsGap",
                "newPage": false,
                "searchKey": "authz.metricsPermsGap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var metricsPermsGap"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar metricsPermsGap = ...\n```\n\nThe metrics that are exposed to Prometheus. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#metricsSyncDuration",
              "documentation": {
                "identifier": "metricsSyncDuration",
                "newPage": false,
                "searchKey": "authz.metricsSyncDuration",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var metricsSyncDuration"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar metricsSyncDuration = ...\n```\n\nThe metrics that are exposed to Prometheus. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#metricsSyncErrors",
              "documentation": {
                "identifier": "metricsSyncErrors",
                "newPage": false,
                "searchKey": "authz.metricsSyncErrors",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var metricsSyncErrors"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar metricsSyncErrors = ...\n```\n\nThe metrics that are exposed to Prometheus. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#metricsQueueSize",
              "documentation": {
                "identifier": "metricsQueueSize",
                "newPage": false,
                "searchKey": "authz.metricsQueueSize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var metricsQueueSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar metricsQueueSize = ...\n```\n\nThe metrics that are exposed to Prometheus. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#updateRegex",
              "documentation": {
                "identifier": "updateRegex",
                "newPage": false,
                "searchKey": "authz.updateRegex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var updateRegex"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar updateRegex = flag.String(\"update\", \"\", \"Update testdata of tests matching the given regex\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#dsn",
              "documentation": {
                "identifier": "dsn",
                "newPage": false,
                "searchKey": "authz.dsn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var dsn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dsn = flag.String(\"dsn\", \"\", \"Database connection string to use in integration tests\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#cmpOpts",
              "documentation": {
                "identifier": "cmpOpts",
                "newPage": false,
                "searchKey": "authz.cmpOpts",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var cmpOpts"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar cmpOpts = cmp.AllowUnexported(syncRequest{}, requestMeta{}, requestQueueKey{})\n```\n\nThe options to allow cmp to compare unexported fields. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/repo-updater/internal/authz#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer",
              "documentation": {
                "identifier": "PermsSyncer",
                "newPage": false,
                "searchKey": "authz.PermsSyncer",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PermsSyncer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PermsSyncer struct {\n\t// The priority queue to maintain the permissions syncing requests.\n\tqueue *requestQueue\n\t// The database interface for any repos and external services operations.\n\treposStore *repos.Store\n\t// The database interface for any permissions operations.\n\tpermsStore *edb.PermsStore\n\t// The mockable function to return the current time.\n\tclock func() time.Time\n\t// The rate limit registry for code hosts.\n\trateLimiterRegistry *ratelimit.Registry\n\t// The time duration of how often to re-compute schedule for users and repositories.\n\tscheduleInterval time.Duration\n}\n```\n\nPermsSyncer is a permissions syncing manager that is in charge of keeping permissions up-to-date for users and repositories. \n\nIt is meant to be running in the background. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#NewPermsSyncer",
                    "documentation": {
                      "identifier": "NewPermsSyncer",
                      "newPage": false,
                      "searchKey": "authz.NewPermsSyncer",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewPermsSyncer(reposStore *repos.Store,..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewPermsSyncer(\n\treposStore *repos.Store,\n\tpermsStore *edb.PermsStore,\n\tclock func() time.Time,\n\trateLimiterRegistry *ratelimit.Registry,\n) *PermsSyncer\n```\n\nNewPermsSyncer returns a new permissions syncing manager. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.ScheduleUsers",
                    "documentation": {
                      "identifier": "PermsSyncer.ScheduleUsers",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.ScheduleUsers",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) ScheduleUsers(ctx context.Context, userIDs ...int32)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) ScheduleUsers(ctx context.Context, userIDs ...int32)\n```\n\nScheduleUsers schedules new permissions syncing requests for given users. By design, all schedules triggered by user actions are in high priority. \n\nThis method implements the repoupdater.Server.PermsSyncer in the OSS namespace. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.scheduleUsers",
                    "documentation": {
                      "identifier": "PermsSyncer.scheduleUsers",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.scheduleUsers",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) scheduleUsers(ctx context.Context, users ...scheduledUser)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) scheduleUsers(ctx context.Context, users ...scheduledUser)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.ScheduleRepos",
                    "documentation": {
                      "identifier": "PermsSyncer.ScheduleRepos",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.ScheduleRepos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) ScheduleRepos(ctx context.Context, repoIDs ...api.RepoID)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) ScheduleRepos(ctx context.Context, repoIDs ...api.RepoID)\n```\n\nScheduleRepos schedules new permissions syncing requests for given repositories. By design, all schedules triggered by user actions are in high priority. \n\nThis method implements the repoupdater.Server.PermsSyncer in the OSS namespace. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.scheduleRepos",
                    "documentation": {
                      "identifier": "PermsSyncer.scheduleRepos",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.scheduleRepos",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) scheduleRepos(ctx context.Context, repos ...scheduledRepo)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) scheduleRepos(ctx context.Context, repos ...scheduledRepo)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.providersByServiceID",
                    "documentation": {
                      "identifier": "PermsSyncer.providersByServiceID",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.providersByServiceID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) providersByServiceID() map[string]authz.Provider"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) providersByServiceID() map[string]authz.Provider\n```\n\nprovidersByServiceID returns a list of authz.Provider configured in the external services. Keys are ServiceID, e.g. \"[https://github.com/](https://github.com/)\". \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.providersByURNs",
                    "documentation": {
                      "identifier": "PermsSyncer.providersByURNs",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.providersByURNs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) providersByURNs() map[string]authz.Provider"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) providersByURNs() map[string]authz.Provider\n```\n\nprovidersByURNs returns a list of authz.Provider configured in the external services. Keys are URN, e.g. \"extsvc:github:1\". \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.syncUserPerms",
                    "documentation": {
                      "identifier": "PermsSyncer.syncUserPerms",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.syncUserPerms",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) syncUserPerms(ctx context.Context, userID int32, noPerms bool) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) syncUserPerms(ctx context.Context, userID int32, noPerms bool) (err error)\n```\n\nsyncUserPerms processes permissions syncing request in user-centric way. When `noPerms` is true, the method will use partial results to update permissions tables even when error occurs. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.syncRepoPerms",
                    "documentation": {
                      "identifier": "PermsSyncer.syncRepoPerms",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.syncRepoPerms",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) syncRepoPerms(ctx context.Context, repoID api.RepoID, noPerms bool) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) syncRepoPerms(ctx context.Context, repoID api.RepoID, noPerms bool) (err error)\n```\n\nsyncRepoPerms processes permissions syncing request in repository-centric way. When `noPerms` is true, the method will use partial results to update permissions tables even when error occurs. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.waitForRateLimit",
                    "documentation": {
                      "identifier": "PermsSyncer.waitForRateLimit",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.waitForRateLimit",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) waitForRateLimit(ctx context.Context, serviceID string, n int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) waitForRateLimit(ctx context.Context, serviceID string, n int) error\n```\n\nwaitForRateLimit blocks until rate limit permits n events to happen. It returns an error if n exceeds the limiter's burst size, the context is canceled, or the expected wait time exceeds the context's deadline. The burst limit is ignored if the rate limit is Inf. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.syncPerms",
                    "documentation": {
                      "identifier": "PermsSyncer.syncPerms",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.syncPerms",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) syncPerms(ctx context.Context, request *syncRequest) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) syncPerms(ctx context.Context, request *syncRequest) error\n```\n\nsyncPerms processes the permissions syncing request and remove the request from the queue once it is done (independent of success or failure). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.runSync",
                    "documentation": {
                      "identifier": "PermsSyncer.runSync",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.runSync",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) runSync(ctx context.Context)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) runSync(ctx context.Context)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.scheduleUsersWithNoPerms",
                    "documentation": {
                      "identifier": "PermsSyncer.scheduleUsersWithNoPerms",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.scheduleUsersWithNoPerms",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) scheduleUsersWithNoPerms(ctx context.Context) ([]scheduledUser, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) scheduleUsersWithNoPerms(ctx context.Context) ([]scheduledUser, error)\n```\n\nscheduleUsersWithNoPerms returns computed schedules for users who have no permissions found in database. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.scheduleReposWithNoPerms",
                    "documentation": {
                      "identifier": "PermsSyncer.scheduleReposWithNoPerms",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.scheduleReposWithNoPerms",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) scheduleReposWithNoPerms(ctx context.Context) ([]scheduledRepo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) scheduleReposWithNoPerms(ctx context.Context) ([]scheduledRepo, error)\n```\n\nscheduleReposWithNoPerms returns computed schedules for private repositories that have no permissions found in database. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.scheduleUsersWithOldestPerms",
                    "documentation": {
                      "identifier": "PermsSyncer.scheduleUsersWithOldestPerms",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.scheduleUsersWithOldestPerms",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) scheduleUsersWithOldestPerms(ctx context.Context, limit int) ([]scheduledUser, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) scheduleUsersWithOldestPerms(ctx context.Context, limit int) ([]scheduledUser, error)\n```\n\nscheduleUsersWithOldestPerms returns computed schedules for users who have oldest permissions in database and capped results by the limit. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.scheduleReposWithOldestPerms",
                    "documentation": {
                      "identifier": "PermsSyncer.scheduleReposWithOldestPerms",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.scheduleReposWithOldestPerms",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) scheduleReposWithOldestPerms(ctx context.Context, limit int) ([]scheduledRepo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) scheduleReposWithOldestPerms(ctx context.Context, limit int) ([]scheduledRepo, error)\n```\n\nscheduleReposWithOldestPerms returns computed schedules for private repositories that have oldest permissions in database. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.schedule",
                    "documentation": {
                      "identifier": "PermsSyncer.schedule",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.schedule",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) schedule(ctx context.Context) (*schedule, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) schedule(ctx context.Context) (*schedule, error)\n```\n\nschedule computes schedule four lists in the following order: \n\n```\n1. Users with no permissions, because they can't do anything meaningful (e.g. not able to search).\n2. Private repositories with no permissions, because those can't be viewed by anyone except site admins.\n3. Rolling updating user permissions over time from oldest ones.\n4. Rolling updating repository permissions over time from oldest ones.\n\n```\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.isDisabled",
                    "documentation": {
                      "identifier": "PermsSyncer.isDisabled",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.isDisabled",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) isDisabled() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) isDisabled() bool\n```\n\nisDisabled returns true if the background permissions syncing is not enabled. It is not enabled if: \n\n```\n- Permissions user mapping is enabled\n- No authz provider is configured\n- Not purchased with the current license\n- `disableAutoCodeHostSyncs` site setting is set to true\n\n```\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.runSchedule",
                    "documentation": {
                      "identifier": "PermsSyncer.runSchedule",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.runSchedule",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) runSchedule(ctx context.Context)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) runSchedule(ctx context.Context)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.DebugDump",
                    "documentation": {
                      "identifier": "PermsSyncer.DebugDump",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.DebugDump",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) DebugDump() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) DebugDump() interface{}\n```\n\nDebugDump returns the state of the permissions syncer for debugging. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.observe",
                    "documentation": {
                      "identifier": "PermsSyncer.observe",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.observe",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) observe(ctx context.Context, family, title string) (context.Context, func(requestType, int32, *error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) observe(ctx context.Context, family, title string) (context.Context, func(requestType, int32, *error))\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.collectMetrics",
                    "documentation": {
                      "identifier": "PermsSyncer.collectMetrics",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.collectMetrics",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) collectMetrics(ctx context.Context)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) collectMetrics(ctx context.Context)\n```\n\ncollectMetrics periodically collecting metrics values from both database and memory objects. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#PermsSyncer.Run",
                    "documentation": {
                      "identifier": "PermsSyncer.Run",
                      "newPage": false,
                      "searchKey": "authz.PermsSyncer.Run",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *PermsSyncer) Run(ctx context.Context)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *PermsSyncer) Run(ctx context.Context)\n```\n\nRun kicks off the permissions syncing process, this method is blocking and should be called as a goroutine. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#schedule",
              "documentation": {
                "identifier": "schedule",
                "newPage": false,
                "searchKey": "authz.schedule",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type schedule struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype schedule struct {\n\tUsers []scheduledUser\n\tRepos []scheduledRepo\n}\n```\n\nschedule contains information for scheduling users and repositories. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#scheduledUser",
              "documentation": {
                "identifier": "scheduledUser",
                "newPage": false,
                "searchKey": "authz.scheduledUser",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type scheduledUser struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype scheduledUser struct {\n\tpriority   priority\n\tuserID     int32\n\tnextSyncAt time.Time\n\n\t// Whether the user has no permissions when scheduled. Currently used to\n\t// accept partial results from authz provider in case of error.\n\tnoPerms bool\n}\n```\n\nscheduledUser contains information for scheduling a user. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#scheduledRepo",
              "documentation": {
                "identifier": "scheduledRepo",
                "newPage": false,
                "searchKey": "authz.scheduledRepo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type scheduledRepo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype scheduledRepo struct {\n\tpriority   priority\n\trepoID     api.RepoID\n\tnextSyncAt time.Time\n\n\t// Whether the repository has no permissions when scheduled. Currently used\n\t// to accept partial results from authz provider in case of error.\n\tnoPerms bool\n}\n```\n\nscheduledRepo contains for scheduling a repository. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#priority",
              "documentation": {
                "identifier": "priority",
                "newPage": false,
                "searchKey": "authz.priority",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type priority int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype priority int\n```\n\npriority defines how urgent the permissions syncing request is. Generally, if the request is driven from a user action (e.g. sign up, log in) then it should be priorityHigh. All other cases should be priorityLow. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#requestType",
              "documentation": {
                "identifier": "requestType",
                "newPage": false,
                "searchKey": "authz.requestType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type requestType int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype requestType int\n```\n\nrequestType is the type of the permissions syncing request. It defines the permissions syncing is either repository-centric or user-centric. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#requestType.higherPriorityThan",
                    "documentation": {
                      "identifier": "requestType.higherPriorityThan",
                      "newPage": false,
                      "searchKey": "authz.requestType.higherPriorityThan",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t1 requestType) higherPriorityThan(t2 requestType) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t1 requestType) higherPriorityThan(t2 requestType) bool\n```\n\nhigherPriorityThan returns true if the current request type has higher priority than the other one. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#requestMeta",
              "documentation": {
                "identifier": "requestMeta",
                "newPage": false,
                "searchKey": "authz.requestMeta",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type requestMeta struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype requestMeta struct {\n\tPriority   priority\n\tType       requestType\n\tID         int32\n\tNextSyncAt time.Time\n\tNoPerms    bool\n}\n```\n\nrequestMeta contains metadata of a permissions syncing request. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#syncRequest",
              "documentation": {
                "identifier": "syncRequest",
                "newPage": false,
                "searchKey": "authz.syncRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type syncRequest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype syncRequest struct {\n\t*requestMeta\n\n\tacquired bool // Whether the request has been acquired\n\tindex    int  // The index in the heap\n}\n```\n\nsyncRequest is a permissions syncing request with its current status in the queue. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#requestQueueKey",
              "documentation": {
                "identifier": "requestQueueKey",
                "newPage": false,
                "searchKey": "authz.requestQueueKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type requestQueueKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype requestQueueKey struct {\n\ttyp requestType\n\tid  int32\n}\n```\n\nrequestQueueKey is the key type for index in a requestQueue. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#requestQueue",
              "documentation": {
                "identifier": "requestQueue",
                "newPage": false,
                "searchKey": "authz.requestQueue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type requestQueue struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype requestQueue struct {\n\tmu    sync.RWMutex\n\theap  []*syncRequest\n\tindex map[requestQueueKey]*syncRequest\n\n\t// The queue performs a non-blocking send on this channel\n\t// when a new value is enqueued so that the update loop\n\t// can wake up if it is idle.\n\tnotifyEnqueue chan struct{}\n}\n```\n\nrequestQueue is a priority queue of permissions syncing requests. Requests with same requestType and id are guaranteed to only have one instance in the queue. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#newRequestQueue",
                    "documentation": {
                      "identifier": "newRequestQueue",
                      "newPage": false,
                      "searchKey": "authz.newRequestQueue",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newRequestQueue() *requestQueue"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newRequestQueue() *requestQueue\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#requestQueue.enqueue",
                    "documentation": {
                      "identifier": "requestQueue.enqueue",
                      "newPage": false,
                      "searchKey": "authz.requestQueue.enqueue",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *requestQueue) enqueue(meta *requestMeta) (updated bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *requestQueue) enqueue(meta *requestMeta) (updated bool)\n```\n\nenqueue adds a sync request to the queue with the given metadata. \n\nIf the sync request is already in the queue and it isn't yet acquired, the request is updated. \n\nIf the given priority is higher than the one in the queue, the sync request's position in the queue is updated accordingly. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#requestQueue.remove",
                    "documentation": {
                      "identifier": "requestQueue.remove",
                      "newPage": false,
                      "searchKey": "authz.requestQueue.remove",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *requestQueue) remove(typ requestType, id int32, acquired bool) (removed bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *requestQueue) remove(typ requestType, id int32, acquired bool) (removed bool)\n```\n\nremove removes the sync request from the queue if the request.acquired matches the acquired argument. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#requestQueue.acquireNext",
                    "documentation": {
                      "identifier": "requestQueue.acquireNext",
                      "newPage": false,
                      "searchKey": "authz.requestQueue.acquireNext",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *requestQueue) acquireNext() *syncRequest"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *requestQueue) acquireNext() *syncRequest\n```\n\nacquireNext acquires the next sync request. The acquired request must be removed from the queue when the request finishes (independent of success or failure). This is to prevent enqueuing a new request while an earlier and identical one is being processed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#requestQueue.release",
                    "documentation": {
                      "identifier": "requestQueue.release",
                      "newPage": false,
                      "searchKey": "authz.requestQueue.release",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *requestQueue) release(typ requestType, id int32)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *requestQueue) release(typ requestType, id int32)\n```\n\nrelease releases the acquired sync request from the queue (i.e. sets the acquired state back to false). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#requestQueue.Len",
                    "documentation": {
                      "identifier": "requestQueue.Len",
                      "newPage": false,
                      "searchKey": "authz.requestQueue.Len",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *requestQueue) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *requestQueue) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#requestQueue.Less",
                    "documentation": {
                      "identifier": "requestQueue.Less",
                      "newPage": false,
                      "searchKey": "authz.requestQueue.Less",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *requestQueue) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *requestQueue) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#requestQueue.Swap",
                    "documentation": {
                      "identifier": "requestQueue.Swap",
                      "newPage": false,
                      "searchKey": "authz.requestQueue.Swap",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *requestQueue) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *requestQueue) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#requestQueue.Push",
                    "documentation": {
                      "identifier": "requestQueue.Push",
                      "newPage": false,
                      "searchKey": "authz.requestQueue.Push",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *requestQueue) Push(x interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *requestQueue) Push(x interface{})\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#requestQueue.Pop",
                    "documentation": {
                      "identifier": "requestQueue.Pop",
                      "newPage": false,
                      "searchKey": "authz.requestQueue.Pop",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (q *requestQueue) Pop() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (q *requestQueue) Pop() interface{}\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#mockProvider",
              "documentation": {
                "identifier": "mockProvider",
                "newPage": false,
                "searchKey": "authz.mockProvider",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type mockProvider struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mockProvider struct {\n\tid          int64\n\tserviceType string\n\tserviceID   string\n\n\tfetchUserPerms func(context.Context, *extsvc.Account) (*authz.ExternalUserPermissions, error)\n\tfetchRepoPerms func(ctx context.Context, repo *extsvc.Repository) ([]extsvc.AccountID, error)\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#mockProvider.FetchAccount",
                    "documentation": {
                      "identifier": "mockProvider.FetchAccount",
                      "newPage": false,
                      "searchKey": "authz.mockProvider.FetchAccount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*mockProvider) FetchAccount(context.Context, *types.User, []*extsvc.Account, []string) (*extsvc.Account, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*mockProvider) FetchAccount(context.Context, *types.User, []*extsvc.Account, []string) (*extsvc.Account, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#mockProvider.ServiceType",
                    "documentation": {
                      "identifier": "mockProvider.ServiceType",
                      "newPage": false,
                      "searchKey": "authz.mockProvider.ServiceType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *mockProvider) ServiceType() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *mockProvider) ServiceType() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#mockProvider.ServiceID",
                    "documentation": {
                      "identifier": "mockProvider.ServiceID",
                      "newPage": false,
                      "searchKey": "authz.mockProvider.ServiceID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *mockProvider) ServiceID() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *mockProvider) ServiceID() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#mockProvider.URN",
                    "documentation": {
                      "identifier": "mockProvider.URN",
                      "newPage": false,
                      "searchKey": "authz.mockProvider.URN",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *mockProvider) URN() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *mockProvider) URN() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#mockProvider.Validate",
                    "documentation": {
                      "identifier": "mockProvider.Validate",
                      "newPage": false,
                      "searchKey": "authz.mockProvider.Validate",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*mockProvider) Validate() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*mockProvider) Validate() []string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#mockProvider.FetchUserPerms",
                    "documentation": {
                      "identifier": "mockProvider.FetchUserPerms",
                      "newPage": false,
                      "searchKey": "authz.mockProvider.FetchUserPerms",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *mockProvider) FetchUserPerms(ctx context.Context, acct *extsvc.Account) (*authz.ExternalUserPermissions, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *mockProvider) FetchUserPerms(ctx context.Context, acct *extsvc.Account) (*authz.ExternalUserPermissions, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/repo-updater/internal/authz#mockProvider.FetchRepoPerms",
                    "documentation": {
                      "identifier": "mockProvider.FetchRepoPerms",
                      "newPage": false,
                      "searchKey": "authz.mockProvider.FetchRepoPerms",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *mockProvider) FetchRepoPerms(ctx context.Context, repo *extsvc.Repository) ([]extsvc.AccountID, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *mockProvider) FetchRepoPerms(ctx context.Context, repo *extsvc.Repository) ([]extsvc.AccountID, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/repo-updater/internal/authz#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#notify",
              "documentation": {
                "identifier": "notify",
                "newPage": false,
                "searchKey": "authz.notify",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func notify(ch chan struct{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc notify(ch chan struct{})\n```\n\nnotify performs a non-blocking send to the channel, so the channel must be buffered. When the channel is blocked (i.e. buffer is full), it skips the notify thus will not send anything to the channel. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#update",
              "documentation": {
                "identifier": "update",
                "newPage": false,
                "searchKey": "authz.update",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func update(name string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc update(name string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#TestIntegration_GitHubPermissions",
              "documentation": {
                "identifier": "TestIntegration_GitHubPermissions",
                "newPage": false,
                "searchKey": "authz.TestIntegration_GitHubPermissions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIntegration_GitHubPermissions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIntegration_GitHubPermissions(t *testing.T)\n```\n\nThis integration test performs a repository-centric permissions syncing against [https://github.com](https://github.com), then check if permissions are correctly granted for the test user \"sourcegraph-vcr-bob\", who is a outside collaborator of the repository \"sourcegraph-vcr-repos/private-org-repo-1\". \n\nNOTE: To update VCR for this test, please use the token of \"sourcegraph-vcr\" for GITHUB_TOKEN, which can be found in 1Password. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#TestMain",
              "documentation": {
                "identifier": "TestMain",
                "newPage": false,
                "searchKey": "authz.TestMain",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMain(m *testing.M)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMain(m *testing.M)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#TestPermsSyncer_ScheduleUsers",
              "documentation": {
                "identifier": "TestPermsSyncer_ScheduleUsers",
                "newPage": false,
                "searchKey": "authz.TestPermsSyncer_ScheduleUsers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPermsSyncer_ScheduleUsers(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPermsSyncer_ScheduleUsers(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#TestPermsSyncer_ScheduleRepos",
              "documentation": {
                "identifier": "TestPermsSyncer_ScheduleRepos",
                "newPage": false,
                "searchKey": "authz.TestPermsSyncer_ScheduleRepos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPermsSyncer_ScheduleRepos(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPermsSyncer_ScheduleRepos(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#TestPermsSyncer_syncUserPerms",
              "documentation": {
                "identifier": "TestPermsSyncer_syncUserPerms",
                "newPage": false,
                "searchKey": "authz.TestPermsSyncer_syncUserPerms",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPermsSyncer_syncUserPerms(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPermsSyncer_syncUserPerms(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#TestPermsSyncer_syncUserPerms_tokenExpire",
              "documentation": {
                "identifier": "TestPermsSyncer_syncUserPerms_tokenExpire",
                "newPage": false,
                "searchKey": "authz.TestPermsSyncer_syncUserPerms_tokenExpire",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPermsSyncer_syncUserPerms_tokenExpire(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPermsSyncer_syncUserPerms_tokenExpire(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#TestPermsSyncer_syncUserPerms_prefixSpecs",
              "documentation": {
                "identifier": "TestPermsSyncer_syncUserPerms_prefixSpecs",
                "newPage": false,
                "searchKey": "authz.TestPermsSyncer_syncUserPerms_prefixSpecs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPermsSyncer_syncUserPerms_prefixSpecs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPermsSyncer_syncUserPerms_prefixSpecs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#TestPermsSyncer_syncRepoPerms",
              "documentation": {
                "identifier": "TestPermsSyncer_syncRepoPerms",
                "newPage": false,
                "searchKey": "authz.TestPermsSyncer_syncRepoPerms",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPermsSyncer_syncRepoPerms(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPermsSyncer_syncRepoPerms(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#TestPermsSyncer_waitForRateLimit",
              "documentation": {
                "identifier": "TestPermsSyncer_waitForRateLimit",
                "newPage": false,
                "searchKey": "authz.TestPermsSyncer_waitForRateLimit",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPermsSyncer_waitForRateLimit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPermsSyncer_waitForRateLimit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#TestPermsSyncer_syncPerms",
              "documentation": {
                "identifier": "TestPermsSyncer_syncPerms",
                "newPage": false,
                "searchKey": "authz.TestPermsSyncer_syncPerms",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPermsSyncer_syncPerms(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPermsSyncer_syncPerms(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#Test_requestQueue_enqueue",
              "documentation": {
                "identifier": "Test_requestQueue_enqueue",
                "newPage": false,
                "searchKey": "authz.Test_requestQueue_enqueue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test_requestQueue_enqueue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test_requestQueue_enqueue(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#Test_requestQueue_remove",
              "documentation": {
                "identifier": "Test_requestQueue_remove",
                "newPage": false,
                "searchKey": "authz.Test_requestQueue_remove",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test_requestQueue_remove(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test_requestQueue_remove(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#Test_requestQueue_acquireNext",
              "documentation": {
                "identifier": "Test_requestQueue_acquireNext",
                "newPage": false,
                "searchKey": "authz.Test_requestQueue_acquireNext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test_requestQueue_acquireNext(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test_requestQueue_acquireNext(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#Test_requestQueue_release",
              "documentation": {
                "identifier": "Test_requestQueue_release",
                "newPage": false,
                "searchKey": "authz.Test_requestQueue_release",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test_requestQueue_release(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test_requestQueue_release(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/repo-updater/internal/authz#Test_requestQueue_Less",
              "documentation": {
                "identifier": "Test_requestQueue_Less",
                "newPage": false,
                "searchKey": "authz.Test_requestQueue_Less",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test_requestQueue_Less(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test_requestQueue_Less(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
