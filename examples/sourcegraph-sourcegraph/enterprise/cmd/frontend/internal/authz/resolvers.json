{
  "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers",
  "documentation": {
    "identifier": "resolvers",
    "newPage": true,
    "searchKey": "enterprise/cmd/frontend/internal/authz/resolvers",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package resolvers"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#errDisabledSourcegraphDotCom",
              "documentation": {
                "identifier": "errDisabledSourcegraphDotCom",
                "newPage": false,
                "searchKey": "resolvers.errDisabledSourcegraphDotCom",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errDisabledSourcegraphDotCom"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errDisabledSourcegraphDotCom = errors.New(\"not enabled on sourcegraph.com\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#now",
              "documentation": {
                "identifier": "now",
                "newPage": false,
                "searchKey": "resolvers.now",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var now"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar now = timeutil.Now().UnixNano()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#parseSchemaOnce",
              "documentation": {
                "identifier": "parseSchemaOnce",
                "newPage": false,
                "searchKey": "resolvers.parseSchemaOnce",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var parseSchemaOnce"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar parseSchemaOnce sync.Once\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#parseSchemaErr",
              "documentation": {
                "identifier": "parseSchemaErr",
                "newPage": false,
                "searchKey": "resolvers.parseSchemaErr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var parseSchemaErr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar parseSchemaErr error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#parsedSchema",
              "documentation": {
                "identifier": "parsedSchema",
                "newPage": false,
                "searchKey": "resolvers.parsedSchema",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var parsedSchema"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar parsedSchema *graphql.Schema\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#repositoryConnectionResolver",
              "documentation": {
                "identifier": "repositoryConnectionResolver",
                "newPage": false,
                "searchKey": "resolvers.repositoryConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repositoryConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repositoryConnectionResolver struct {\n\tdb  dbutil.DB\n\tids *roaring.Bitmap\n\n\tfirst int32\n\tafter *string\n\n\t// cache results because they are used by multiple fields\n\tonce     sync.Once\n\trepos    []*types.Repo\n\tpageInfo *graphqlutil.PageInfo\n\terr      error\n}\n```\n\nrepositoryConnectionResolver resolves a list of repositories from the roaring bitmap with pagination. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#repositoryConnectionResolver.compute",
                    "documentation": {
                      "identifier": "repositoryConnectionResolver.compute",
                      "newPage": false,
                      "searchKey": "resolvers.repositoryConnectionResolver.compute",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryConnectionResolver) compute(ctx context.Context) ([]*types.Repo, *graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryConnectionResolver) compute(ctx context.Context) ([]*types.Repo, *graphqlutil.PageInfo, error)\n```\n\nðŸš¨ SECURITY: It is the caller's responsibility to ensure the current authenticated user is the site admin because this method computes data from all available information in the database. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#repositoryConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "repositoryConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "resolvers.repositoryConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryConnectionResolver) Nodes(ctx context.Context) ([]*graphqlbackend.RepositoryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryConnectionResolver) Nodes(ctx context.Context) ([]*graphqlbackend.RepositoryResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#repositoryConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "repositoryConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "resolvers.repositoryConnectionResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryConnectionResolver) TotalCount(ctx context.Context, args *graphqlbackend.TotalCountArgs) (*int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryConnectionResolver) TotalCount(ctx context.Context, args *graphqlbackend.TotalCountArgs) (*int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#repositoryConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "repositoryConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "resolvers.repositoryConnectionResolver.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repositoryConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repositoryConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#Resolver",
              "documentation": {
                "identifier": "Resolver",
                "newPage": false,
                "searchKey": "resolvers.Resolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Resolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Resolver struct {\n\tstore             *edb.PermsStore\n\trepoupdaterClient interface {\n\t\tSchedulePermsSync(ctx context.Context, args protocol.PermsSyncRequest) error\n\t}\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#Resolver.checkLicense",
                    "documentation": {
                      "identifier": "Resolver.checkLicense",
                      "newPage": false,
                      "searchKey": "resolvers.Resolver.checkLicense",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) checkLicense() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) checkLicense() error\n```\n\ncheckLicense returns a user-facing error if the ACLs feature is not purchased with the current license or any error occurred while validating the licence. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#Resolver.SetRepositoryPermissionsForUsers",
                    "documentation": {
                      "identifier": "Resolver.SetRepositoryPermissionsForUsers",
                      "newPage": false,
                      "searchKey": "resolvers.Resolver.SetRepositoryPermissionsForUsers",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) SetRepositoryPermissionsForUsers(ctx context.Context, args *graphqlbackend.RepoPermsArgs) (resp *graphqlbackend.EmptyResponse, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) SetRepositoryPermissionsForUsers(ctx context.Context, args *graphqlbackend.RepoPermsArgs) (resp *graphqlbackend.EmptyResponse, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#Resolver.ScheduleRepositoryPermissionsSync",
                    "documentation": {
                      "identifier": "Resolver.ScheduleRepositoryPermissionsSync",
                      "newPage": false,
                      "searchKey": "resolvers.Resolver.ScheduleRepositoryPermissionsSync",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) ScheduleRepositoryPermissionsSync(ctx context.Context, args *graphqlbackend.RepositoryIDArgs) (*graphqlbackend.EmptyResponse, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) ScheduleRepositoryPermissionsSync(ctx context.Context, args *graphqlbackend.RepositoryIDArgs) (*graphqlbackend.EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#Resolver.ScheduleUserPermissionsSync",
                    "documentation": {
                      "identifier": "Resolver.ScheduleUserPermissionsSync",
                      "newPage": false,
                      "searchKey": "resolvers.Resolver.ScheduleUserPermissionsSync",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) ScheduleUserPermissionsSync(ctx context.Context, args *graphqlbackend.UserIDArgs) (*graphqlbackend.EmptyResponse, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) ScheduleUserPermissionsSync(ctx context.Context, args *graphqlbackend.UserIDArgs) (*graphqlbackend.EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#Resolver.AuthorizedUserRepositories",
                    "documentation": {
                      "identifier": "Resolver.AuthorizedUserRepositories",
                      "newPage": false,
                      "searchKey": "resolvers.Resolver.AuthorizedUserRepositories",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) AuthorizedUserRepositories(ctx context.Context, args *graphqlbackend.AuthorizedRepoArgs) (graphqlbackend.RepositoryConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) AuthorizedUserRepositories(ctx context.Context, args *graphqlbackend.AuthorizedRepoArgs) (graphqlbackend.RepositoryConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#Resolver.UsersWithPendingPermissions",
                    "documentation": {
                      "identifier": "Resolver.UsersWithPendingPermissions",
                      "newPage": false,
                      "searchKey": "resolvers.Resolver.UsersWithPendingPermissions",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) UsersWithPendingPermissions(ctx context.Context) ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) UsersWithPendingPermissions(ctx context.Context) ([]string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#Resolver.AuthorizedUsers",
                    "documentation": {
                      "identifier": "Resolver.AuthorizedUsers",
                      "newPage": false,
                      "searchKey": "resolvers.Resolver.AuthorizedUsers",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) AuthorizedUsers(ctx context.Context, args *graphqlbackend.RepoAuthorizedUserArgs) (graphqlbackend.UserConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) AuthorizedUsers(ctx context.Context, args *graphqlbackend.RepoAuthorizedUserArgs) (graphqlbackend.UserConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#Resolver.RepositoryPermissionsInfo",
                    "documentation": {
                      "identifier": "Resolver.RepositoryPermissionsInfo",
                      "newPage": false,
                      "searchKey": "resolvers.Resolver.RepositoryPermissionsInfo",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) RepositoryPermissionsInfo(ctx context.Context, id graphql.ID) (graphqlbackend.PermissionsInfoResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) RepositoryPermissionsInfo(ctx context.Context, id graphql.ID) (graphqlbackend.PermissionsInfoResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#Resolver.UserPermissionsInfo",
                    "documentation": {
                      "identifier": "Resolver.UserPermissionsInfo",
                      "newPage": false,
                      "searchKey": "resolvers.Resolver.UserPermissionsInfo",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) UserPermissionsInfo(ctx context.Context, id graphql.ID) (graphqlbackend.PermissionsInfoResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) UserPermissionsInfo(ctx context.Context, id graphql.ID) (graphqlbackend.PermissionsInfoResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#permissionsInfoResolver",
              "documentation": {
                "identifier": "permissionsInfoResolver",
                "newPage": false,
                "searchKey": "resolvers.permissionsInfoResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type permissionsInfoResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype permissionsInfoResolver struct {\n\tperms     authz.Perms\n\tsyncedAt  time.Time\n\tupdatedAt time.Time\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#permissionsInfoResolver.Permissions",
                    "documentation": {
                      "identifier": "permissionsInfoResolver.Permissions",
                      "newPage": false,
                      "searchKey": "resolvers.permissionsInfoResolver.Permissions",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *permissionsInfoResolver) Permissions() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *permissionsInfoResolver) Permissions() []string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#permissionsInfoResolver.SyncedAt",
                    "documentation": {
                      "identifier": "permissionsInfoResolver.SyncedAt",
                      "newPage": false,
                      "searchKey": "resolvers.permissionsInfoResolver.SyncedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *permissionsInfoResolver) SyncedAt() *graphqlbackend.DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *permissionsInfoResolver) SyncedAt() *graphqlbackend.DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#permissionsInfoResolver.UpdatedAt",
                    "documentation": {
                      "identifier": "permissionsInfoResolver.UpdatedAt",
                      "newPage": false,
                      "searchKey": "resolvers.permissionsInfoResolver.UpdatedAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *permissionsInfoResolver) UpdatedAt() graphqlbackend.DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *permissionsInfoResolver) UpdatedAt() graphqlbackend.DateTime\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#userConnectionResolver",
              "documentation": {
                "identifier": "userConnectionResolver",
                "newPage": false,
                "searchKey": "resolvers.userConnectionResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type userConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype userConnectionResolver struct {\n\tids *roaring.Bitmap\n\tdb  dbutil.DB\n\n\tfirst int32\n\tafter *string\n\n\t// cache results because they are used by multiple fields\n\tonce     sync.Once\n\tusers    []*types.User\n\tpageInfo *graphqlutil.PageInfo\n\terr      error\n}\n```\n\nuserConnectionResolver resolves a list of user from the roaring bitmap with pagination. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#userConnectionResolver.compute",
                    "documentation": {
                      "identifier": "userConnectionResolver.compute",
                      "newPage": false,
                      "searchKey": "resolvers.userConnectionResolver.compute",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *userConnectionResolver) compute(ctx context.Context) ([]*types.User, *graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *userConnectionResolver) compute(ctx context.Context) ([]*types.User, *graphqlutil.PageInfo, error)\n```\n\nðŸš¨ SECURITY: It is the caller's responsibility to ensure the current authenticated user is the site admin because this method computes data from all available information in the database. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#userConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "userConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "resolvers.userConnectionResolver.Nodes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *userConnectionResolver) Nodes(ctx context.Context) ([]*graphqlbackend.UserResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *userConnectionResolver) Nodes(ctx context.Context) ([]*graphqlbackend.UserResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#userConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "userConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "resolvers.userConnectionResolver.TotalCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *userConnectionResolver) TotalCount(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *userConnectionResolver) TotalCount(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#userConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "userConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "resolvers.userConnectionResolver.PageInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *userConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *userConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#fakeRepoupdaterClient",
              "documentation": {
                "identifier": "fakeRepoupdaterClient",
                "newPage": false,
                "searchKey": "resolvers.fakeRepoupdaterClient",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type fakeRepoupdaterClient struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fakeRepoupdaterClient struct {\n\tmockSchedulePermsSync func(ctx context.Context, args protocol.PermsSyncRequest) error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#fakeRepoupdaterClient.SchedulePermsSync",
                    "documentation": {
                      "identifier": "fakeRepoupdaterClient.SchedulePermsSync",
                      "newPage": false,
                      "searchKey": "resolvers.fakeRepoupdaterClient.SchedulePermsSync",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeRepoupdaterClient) SchedulePermsSync(ctx context.Context, args protocol.PermsSyncRequest) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeRepoupdaterClient) SchedulePermsSync(ctx context.Context, args protocol.PermsSyncRequest) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#NewResolver",
              "documentation": {
                "identifier": "NewResolver",
                "newPage": false,
                "searchKey": "resolvers.NewResolver",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewResolver(db dbutil.DB, clock func() time.Time) graphqlbackend.AuthzResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewResolver(db dbutil.DB, clock func() time.Time) graphqlbackend.AuthzResolver\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#clock",
              "documentation": {
                "identifier": "clock",
                "newPage": false,
                "searchKey": "resolvers.clock",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func clock() time.Time"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc clock() time.Time\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#mustParseGraphQLSchema",
              "documentation": {
                "identifier": "mustParseGraphQLSchema",
                "newPage": false,
                "searchKey": "resolvers.mustParseGraphQLSchema",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func mustParseGraphQLSchema(t *testing.T, db dbutil.DB) *graphql.Schema"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mustParseGraphQLSchema(t *testing.T, db dbutil.DB) *graphql.Schema\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#TestResolver_SetRepositoryPermissionsForUsers",
              "documentation": {
                "identifier": "TestResolver_SetRepositoryPermissionsForUsers",
                "newPage": false,
                "searchKey": "resolvers.TestResolver_SetRepositoryPermissionsForUsers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResolver_SetRepositoryPermissionsForUsers(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResolver_SetRepositoryPermissionsForUsers(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#TestResolver_ScheduleRepositoryPermissionsSync",
              "documentation": {
                "identifier": "TestResolver_ScheduleRepositoryPermissionsSync",
                "newPage": false,
                "searchKey": "resolvers.TestResolver_ScheduleRepositoryPermissionsSync",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResolver_ScheduleRepositoryPermissionsSync(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResolver_ScheduleRepositoryPermissionsSync(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#TestResolver_ScheduleUserPermissionsSync",
              "documentation": {
                "identifier": "TestResolver_ScheduleUserPermissionsSync",
                "newPage": false,
                "searchKey": "resolvers.TestResolver_ScheduleUserPermissionsSync",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResolver_ScheduleUserPermissionsSync(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResolver_ScheduleUserPermissionsSync(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#TestResolver_AuthorizedUserRepositories",
              "documentation": {
                "identifier": "TestResolver_AuthorizedUserRepositories",
                "newPage": false,
                "searchKey": "resolvers.TestResolver_AuthorizedUserRepositories",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResolver_AuthorizedUserRepositories(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResolver_AuthorizedUserRepositories(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#TestResolver_UsersWithPendingPermissions",
              "documentation": {
                "identifier": "TestResolver_UsersWithPendingPermissions",
                "newPage": false,
                "searchKey": "resolvers.TestResolver_UsersWithPendingPermissions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResolver_UsersWithPendingPermissions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResolver_UsersWithPendingPermissions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#TestResolver_AuthorizedUsers",
              "documentation": {
                "identifier": "TestResolver_AuthorizedUsers",
                "newPage": false,
                "searchKey": "resolvers.TestResolver_AuthorizedUsers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResolver_AuthorizedUsers(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResolver_AuthorizedUsers(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#TestResolver_RepositoryPermissionsInfo",
              "documentation": {
                "identifier": "TestResolver_RepositoryPermissionsInfo",
                "newPage": false,
                "searchKey": "resolvers.TestResolver_RepositoryPermissionsInfo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResolver_RepositoryPermissionsInfo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResolver_RepositoryPermissionsInfo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/authz/resolvers#TestResolver_UserPermissionsInfo",
              "documentation": {
                "identifier": "TestResolver_UserPermissionsInfo",
                "newPage": false,
                "searchKey": "resolvers.TestResolver_UserPermissionsInfo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResolver_UserPermissionsInfo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResolver_UserPermissionsInfo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
