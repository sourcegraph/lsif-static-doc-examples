{
  "pathID": "/enterprise/cmd/frontend/internal/executor",
  "documentation": {
    "identifier": "executor",
    "newPage": true,
    "searchKey": "enterprise/cmd/frontend/internal/executor",
    "tags": [
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package executor"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/executor#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/executor#queueURL",
              "documentation": {
                "identifier": "queueURL",
                "newPage": false,
                "searchKey": "executor.queueURL",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var queueURL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar queueURL = env.Get(\"EXECUTOR_QUEUE_URL\", \"\", \"HTTP address for the internal executor-queue.\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/executor#sharedUsername",
              "documentation": {
                "identifier": "sharedUsername",
                "newPage": false,
                "searchKey": "executor.sharedUsername",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var sharedUsername"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sharedUsername = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/executor#sharedPassword",
              "documentation": {
                "identifier": "sharedPassword",
                "newPage": false,
                "searchKey": "executor.sharedPassword",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var sharedPassword"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sharedPassword = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/executor#client",
              "documentation": {
                "identifier": "client",
                "newPage": false,
                "searchKey": "executor.client",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var client"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar client = http.DefaultClient\n```\n\nTODO(efritz) - add tracing, metrics \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/executor#getRest",
              "documentation": {
                "identifier": "getRest",
                "newPage": false,
                "searchKey": "executor.getRest",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var getRest"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar getRest = func(r *http.Request) string {\n\treturn mux.Vars(r)[\"rest\"]\n}\n```\n\ngetRest returns the \"rest\" segment of the request's URL. This is a function variable so we can swap it out easily during testing. The gorilla/mux does have a testing function to set variables on a request context, but the context gets lost somewhere between construction of the request and the default client's handling of the request. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/executor#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/executor#Init",
              "documentation": {
                "identifier": "Init",
                "newPage": false,
                "searchKey": "executor.Init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Init(ctx context.Context, db dbutil.DB, outOfBandMigrationRunner *oobmigration.Runner, enterpriseServices *enterprise.Services) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Init(ctx context.Context, db dbutil.DB, outOfBandMigrationRunner *oobmigration.Runner, enterpriseServices *enterprise.Services) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/executor#newInternalProxyHandler",
              "documentation": {
                "identifier": "newInternalProxyHandler",
                "newPage": false,
                "searchKey": "executor.newInternalProxyHandler",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newInternalProxyHandler(uploadHandler http.Handler) (func() http.Handler, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newInternalProxyHandler(uploadHandler http.Handler) (func() http.Handler, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/executor#basicAuthMiddleware",
              "documentation": {
                "identifier": "basicAuthMiddleware",
                "newPage": false,
                "searchKey": "executor.basicAuthMiddleware",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func basicAuthMiddleware(next http.Handler) http.Handler"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc basicAuthMiddleware(next http.Handler) http.Handler\n```\n\nbasicAuthMiddleware rejects requests that do not have a basic auth username and password matching the expected username and password. This should only be used for internal _services_, not users, in which a shared key exchange can be done so safely. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/executor#reverseProxy",
              "documentation": {
                "identifier": "reverseProxy",
                "newPage": false,
                "searchKey": "executor.reverseProxy",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func reverseProxy(target *url.URL) http.Handler"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc reverseProxy(target *url.URL) http.Handler\n```\n\nreverseProxy creates an HTTP handler that will proxy requests to the given target URL. See makeProxyRequest for details on how the request URI is constructed. \n\nNote that we do not use httputil.ReverseProxy. We need to ensure that there are no redirect requests to unreachable (internal) routes sent back to the client, and the built-in reverse proxy does not give sufficient control over redirects. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/executor#makeProxyRequest",
              "documentation": {
                "identifier": "makeProxyRequest",
                "newPage": false,
                "searchKey": "executor.makeProxyRequest",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeProxyRequest(r *http.Request, target *url.URL) (*http.Request, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeProxyRequest(r *http.Request, target *url.URL) (*http.Request, error)\n```\n\nmakeProxyRequest returns a new HTTP request object with the given HTTP request's headers and body. The resulting request's URL is a URL constructed with the given target URL as a base, and the text matching the \"{rest:.*}\" portion of the given request's route as the additional path segment. The resulting request's GetBody field is populated so that a 307 Temporary Redirect can be followed when making POST requests. This is necessary to properly proxy git service operations without being redirected to an inaccessible API. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/executor#copyHeader",
              "documentation": {
                "identifier": "copyHeader",
                "newPage": false,
                "searchKey": "executor.copyHeader",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func copyHeader(dst, src http.Header)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc copyHeader(dst, src http.Header)\n```\n\ncopyHeader adds the header values from src to dst. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/executor#init.internal_proxy_handler_test.go",
              "documentation": {
                "identifier": "init.internal_proxy_handler_test.go",
                "newPage": false,
                "searchKey": "executor.init",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/executor#TestInternalProxyAuthTokenMiddleware",
              "documentation": {
                "identifier": "TestInternalProxyAuthTokenMiddleware",
                "newPage": false,
                "searchKey": "executor.TestInternalProxyAuthTokenMiddleware",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInternalProxyAuthTokenMiddleware(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInternalProxyAuthTokenMiddleware(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/executor#TestReverseProxySimple",
              "documentation": {
                "identifier": "TestReverseProxySimple",
                "newPage": false,
                "searchKey": "executor.TestReverseProxySimple",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxySimple(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxySimple(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/executor#TestReverseProxyTargetPath",
              "documentation": {
                "identifier": "TestReverseProxyTargetPath",
                "newPage": false,
                "searchKey": "executor.TestReverseProxyTargetPath",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxyTargetPath(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxyTargetPath(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/executor#TestReverseProxyHeaders",
              "documentation": {
                "identifier": "TestReverseProxyHeaders",
                "newPage": false,
                "searchKey": "executor.TestReverseProxyHeaders",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxyHeaders(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxyHeaders(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/executor#TestReverseProxyRedirectWithPayload",
              "documentation": {
                "identifier": "TestReverseProxyRedirectWithPayload",
                "newPage": false,
                "searchKey": "executor.TestReverseProxyRedirectWithPayload",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxyRedirectWithPayload(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxyRedirectWithPayload(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
