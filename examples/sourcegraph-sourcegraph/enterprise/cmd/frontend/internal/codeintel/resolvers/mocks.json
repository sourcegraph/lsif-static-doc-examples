{
  "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks",
  "documentation": {
    "identifier": "mocks",
    "newPage": true,
    "searchKey": "enterprise/cmd/frontend/internal/codeintel/resolvers/mocks",
    "tags": [
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package mocks"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockQueryResolver",
              "documentation": {
                "identifier": "MockQueryResolver",
                "newPage": false,
                "searchKey": "mocks.MockQueryResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockQueryResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockQueryResolver struct {\n\t// DefinitionsFunc is an instance of a mock function object controlling\n\t// the behavior of the method Definitions.\n\tDefinitionsFunc *QueryResolverDefinitionsFunc\n\t// DiagnosticsFunc is an instance of a mock function object controlling\n\t// the behavior of the method Diagnostics.\n\tDiagnosticsFunc *QueryResolverDiagnosticsFunc\n\t// DocumentationPageFunc is an instance of a mock function object\n\t// controlling the behavior of the method DocumentationPage.\n\tDocumentationPageFunc *QueryResolverDocumentationPageFunc\n\t// HoverFunc is an instance of a mock function object controlling the\n\t// behavior of the method Hover.\n\tHoverFunc *QueryResolverHoverFunc\n\t// RangesFunc is an instance of a mock function object controlling the\n\t// behavior of the method Ranges.\n\tRangesFunc *QueryResolverRangesFunc\n\t// ReferencesFunc is an instance of a mock function object controlling\n\t// the behavior of the method References.\n\tReferencesFunc *QueryResolverReferencesFunc\n}\n```\n\nMockQueryResolver is a mock implementation of the QueryResolver interface (from the package github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/codeintel/resolvers) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#NewMockQueryResolver",
                    "documentation": {
                      "identifier": "NewMockQueryResolver",
                      "newPage": false,
                      "searchKey": "mocks.NewMockQueryResolver",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockQueryResolver() *MockQueryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockQueryResolver() *MockQueryResolver\n```\n\nNewMockQueryResolver creates a new mock of the QueryResolver interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#NewMockQueryResolverFrom",
                    "documentation": {
                      "identifier": "NewMockQueryResolverFrom",
                      "newPage": false,
                      "searchKey": "mocks.NewMockQueryResolverFrom",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockQueryResolverFrom(i resolvers.QueryResolver) *MockQueryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockQueryResolverFrom(i resolvers.QueryResolver) *MockQueryResolver\n```\n\nNewMockQueryResolverFrom creates a new mock of the MockQueryResolver interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockQueryResolver.Definitions",
                    "documentation": {
                      "identifier": "MockQueryResolver.Definitions",
                      "newPage": false,
                      "searchKey": "mocks.MockQueryResolver.Definitions",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockQueryResolver) Definitions(v0 context.Context, v1 int, v2 int) ([]resolvers.AdjustedLocation, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockQueryResolver) Definitions(v0 context.Context, v1 int, v2 int) ([]resolvers.AdjustedLocation, error)\n```\n\nDefinitions delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockQueryResolver.Diagnostics",
                    "documentation": {
                      "identifier": "MockQueryResolver.Diagnostics",
                      "newPage": false,
                      "searchKey": "mocks.MockQueryResolver.Diagnostics",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockQueryResolver) Diagnostics(v0 context.Context, v1 int) ([]resolvers.AdjustedDiagnostic, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockQueryResolver) Diagnostics(v0 context.Context, v1 int) ([]resolvers.AdjustedDiagnostic, int, error)\n```\n\nDiagnostics delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockQueryResolver.DocumentationPage",
                    "documentation": {
                      "identifier": "MockQueryResolver.DocumentationPage",
                      "newPage": false,
                      "searchKey": "mocks.MockQueryResolver.DocumentationPage",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockQueryResolver) DocumentationPage(v0 context.Context, v1 string) (*semantic.DocumentationPageData, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockQueryResolver) DocumentationPage(v0 context.Context, v1 string) (*semantic.DocumentationPageData, error)\n```\n\nDocumentationPage delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockQueryResolver.Hover",
                    "documentation": {
                      "identifier": "MockQueryResolver.Hover",
                      "newPage": false,
                      "searchKey": "mocks.MockQueryResolver.Hover",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockQueryResolver) Hover(v0 context.Context, v1 int, v2 int) (string, lsifstore.Range, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockQueryResolver) Hover(v0 context.Context, v1 int, v2 int) (string, lsifstore.Range, bool, error)\n```\n\nHover delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockQueryResolver.Ranges",
                    "documentation": {
                      "identifier": "MockQueryResolver.Ranges",
                      "newPage": false,
                      "searchKey": "mocks.MockQueryResolver.Ranges",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockQueryResolver) Ranges(v0 context.Context, v1 int, v2 int) ([]resolvers.AdjustedCodeIntelligenceRange, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockQueryResolver) Ranges(v0 context.Context, v1 int, v2 int) ([]resolvers.AdjustedCodeIntelligenceRange, error)\n```\n\nRanges delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockQueryResolver.References",
                    "documentation": {
                      "identifier": "MockQueryResolver.References",
                      "newPage": false,
                      "searchKey": "mocks.MockQueryResolver.References",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockQueryResolver) References(v0 context.Context, v1 int, v2 int, v3 int, v4 string) ([]resolvers.AdjustedLocation, string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockQueryResolver) References(v0 context.Context, v1 int, v2 int, v3 int, v4 string) ([]resolvers.AdjustedLocation, string, error)\n```\n\nReferences delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDefinitionsFunc",
              "documentation": {
                "identifier": "QueryResolverDefinitionsFunc",
                "newPage": false,
                "searchKey": "mocks.QueryResolverDefinitionsFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueryResolverDefinitionsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueryResolverDefinitionsFunc struct {\n\tdefaultHook func(context.Context, int, int) ([]resolvers.AdjustedLocation, error)\n\thooks       []func(context.Context, int, int) ([]resolvers.AdjustedLocation, error)\n\thistory     []QueryResolverDefinitionsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nQueryResolverDefinitionsFunc describes the behavior when the Definitions method of the parent MockQueryResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDefinitionsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "QueryResolverDefinitionsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDefinitionsFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDefinitionsFunc) SetDefaultHook(hook func(context.Context, int, int) ([]resolvers.AdjustedLocation, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDefinitionsFunc) SetDefaultHook(hook func(context.Context, int, int) ([]resolvers.AdjustedLocation, error))\n```\n\nSetDefaultHook sets function that is called when the Definitions method of the parent MockQueryResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDefinitionsFunc.PushHook",
                    "documentation": {
                      "identifier": "QueryResolverDefinitionsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDefinitionsFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDefinitionsFunc) PushHook(hook func(context.Context, int, int) ([]resolvers.AdjustedLocation, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDefinitionsFunc) PushHook(hook func(context.Context, int, int) ([]resolvers.AdjustedLocation, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Definitions method of the parent MockQueryResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDefinitionsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "QueryResolverDefinitionsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDefinitionsFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDefinitionsFunc) SetDefaultReturn(r0 []resolvers.AdjustedLocation, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDefinitionsFunc) SetDefaultReturn(r0 []resolvers.AdjustedLocation, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDefinitionsFunc.PushReturn",
                    "documentation": {
                      "identifier": "QueryResolverDefinitionsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDefinitionsFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDefinitionsFunc) PushReturn(r0 []resolvers.AdjustedLocation, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDefinitionsFunc) PushReturn(r0 []resolvers.AdjustedLocation, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDefinitionsFunc.nextHook",
                    "documentation": {
                      "identifier": "QueryResolverDefinitionsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDefinitionsFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDefinitionsFunc) nextHook() func(context.Context, int, int) ([]resolvers.AdjustedLocation, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDefinitionsFunc) nextHook() func(context.Context, int, int) ([]resolvers.AdjustedLocation, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDefinitionsFunc.appendCall",
                    "documentation": {
                      "identifier": "QueryResolverDefinitionsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDefinitionsFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDefinitionsFunc) appendCall(r0 QueryResolverDefinitionsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDefinitionsFunc) appendCall(r0 QueryResolverDefinitionsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDefinitionsFunc.History",
                    "documentation": {
                      "identifier": "QueryResolverDefinitionsFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDefinitionsFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDefinitionsFunc) History() []QueryResolverDefinitionsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDefinitionsFunc) History() []QueryResolverDefinitionsFuncCall\n```\n\nHistory returns a sequence of QueryResolverDefinitionsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDefinitionsFuncCall",
              "documentation": {
                "identifier": "QueryResolverDefinitionsFuncCall",
                "newPage": false,
                "searchKey": "mocks.QueryResolverDefinitionsFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueryResolverDefinitionsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueryResolverDefinitionsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []resolvers.AdjustedLocation\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nQueryResolverDefinitionsFuncCall is an object that describes an invocation of method Definitions on an instance of MockQueryResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDefinitionsFuncCall.Args",
                    "documentation": {
                      "identifier": "QueryResolverDefinitionsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDefinitionsFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c QueryResolverDefinitionsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c QueryResolverDefinitionsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDefinitionsFuncCall.Results",
                    "documentation": {
                      "identifier": "QueryResolverDefinitionsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDefinitionsFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c QueryResolverDefinitionsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c QueryResolverDefinitionsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDiagnosticsFunc",
              "documentation": {
                "identifier": "QueryResolverDiagnosticsFunc",
                "newPage": false,
                "searchKey": "mocks.QueryResolverDiagnosticsFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueryResolverDiagnosticsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueryResolverDiagnosticsFunc struct {\n\tdefaultHook func(context.Context, int) ([]resolvers.AdjustedDiagnostic, int, error)\n\thooks       []func(context.Context, int) ([]resolvers.AdjustedDiagnostic, int, error)\n\thistory     []QueryResolverDiagnosticsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nQueryResolverDiagnosticsFunc describes the behavior when the Diagnostics method of the parent MockQueryResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDiagnosticsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "QueryResolverDiagnosticsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDiagnosticsFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDiagnosticsFunc) SetDefaultHook(hook func(context.Context, int) ([]resolvers.AdjustedDiagnostic, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDiagnosticsFunc) SetDefaultHook(hook func(context.Context, int) ([]resolvers.AdjustedDiagnostic, int, error))\n```\n\nSetDefaultHook sets function that is called when the Diagnostics method of the parent MockQueryResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDiagnosticsFunc.PushHook",
                    "documentation": {
                      "identifier": "QueryResolverDiagnosticsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDiagnosticsFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDiagnosticsFunc) PushHook(hook func(context.Context, int) ([]resolvers.AdjustedDiagnostic, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDiagnosticsFunc) PushHook(hook func(context.Context, int) ([]resolvers.AdjustedDiagnostic, int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Diagnostics method of the parent MockQueryResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDiagnosticsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "QueryResolverDiagnosticsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDiagnosticsFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDiagnosticsFunc) SetDefaultReturn(r0 []resolvers.AdjustedDiagnostic, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDiagnosticsFunc) SetDefaultReturn(r0 []resolvers.AdjustedDiagnostic, r1 int, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDiagnosticsFunc.PushReturn",
                    "documentation": {
                      "identifier": "QueryResolverDiagnosticsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDiagnosticsFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDiagnosticsFunc) PushReturn(r0 []resolvers.AdjustedDiagnostic, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDiagnosticsFunc) PushReturn(r0 []resolvers.AdjustedDiagnostic, r1 int, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDiagnosticsFunc.nextHook",
                    "documentation": {
                      "identifier": "QueryResolverDiagnosticsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDiagnosticsFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDiagnosticsFunc) nextHook() func(context.Context, int) ([]resolvers.AdjustedDiagnostic, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDiagnosticsFunc) nextHook() func(context.Context, int) ([]resolvers.AdjustedDiagnostic, int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDiagnosticsFunc.appendCall",
                    "documentation": {
                      "identifier": "QueryResolverDiagnosticsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDiagnosticsFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDiagnosticsFunc) appendCall(r0 QueryResolverDiagnosticsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDiagnosticsFunc) appendCall(r0 QueryResolverDiagnosticsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDiagnosticsFunc.History",
                    "documentation": {
                      "identifier": "QueryResolverDiagnosticsFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDiagnosticsFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDiagnosticsFunc) History() []QueryResolverDiagnosticsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDiagnosticsFunc) History() []QueryResolverDiagnosticsFuncCall\n```\n\nHistory returns a sequence of QueryResolverDiagnosticsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDiagnosticsFuncCall",
              "documentation": {
                "identifier": "QueryResolverDiagnosticsFuncCall",
                "newPage": false,
                "searchKey": "mocks.QueryResolverDiagnosticsFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueryResolverDiagnosticsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueryResolverDiagnosticsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []resolvers.AdjustedDiagnostic\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 int\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nQueryResolverDiagnosticsFuncCall is an object that describes an invocation of method Diagnostics on an instance of MockQueryResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDiagnosticsFuncCall.Args",
                    "documentation": {
                      "identifier": "QueryResolverDiagnosticsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDiagnosticsFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c QueryResolverDiagnosticsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c QueryResolverDiagnosticsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDiagnosticsFuncCall.Results",
                    "documentation": {
                      "identifier": "QueryResolverDiagnosticsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDiagnosticsFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c QueryResolverDiagnosticsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c QueryResolverDiagnosticsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDocumentationPageFunc",
              "documentation": {
                "identifier": "QueryResolverDocumentationPageFunc",
                "newPage": false,
                "searchKey": "mocks.QueryResolverDocumentationPageFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueryResolverDocumentationPageFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueryResolverDocumentationPageFunc struct {\n\tdefaultHook func(context.Context, string) (*semantic.DocumentationPageData, error)\n\thooks       []func(context.Context, string) (*semantic.DocumentationPageData, error)\n\thistory     []QueryResolverDocumentationPageFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nQueryResolverDocumentationPageFunc describes the behavior when the DocumentationPage method of the parent MockQueryResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDocumentationPageFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "QueryResolverDocumentationPageFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDocumentationPageFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDocumentationPageFunc) SetDefaultHook(hook func(context.Context, string) (*semantic.DocumentationPageData, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDocumentationPageFunc) SetDefaultHook(hook func(context.Context, string) (*semantic.DocumentationPageData, error))\n```\n\nSetDefaultHook sets function that is called when the DocumentationPage method of the parent MockQueryResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDocumentationPageFunc.PushHook",
                    "documentation": {
                      "identifier": "QueryResolverDocumentationPageFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDocumentationPageFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDocumentationPageFunc) PushHook(hook func(context.Context, string) (*semantic.DocumentationPageData, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDocumentationPageFunc) PushHook(hook func(context.Context, string) (*semantic.DocumentationPageData, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the DocumentationPage method of the parent MockQueryResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDocumentationPageFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "QueryResolverDocumentationPageFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDocumentationPageFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDocumentationPageFunc) SetDefaultReturn(r0 *semantic.DocumentationPageData, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDocumentationPageFunc) SetDefaultReturn(r0 *semantic.DocumentationPageData, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDocumentationPageFunc.PushReturn",
                    "documentation": {
                      "identifier": "QueryResolverDocumentationPageFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDocumentationPageFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDocumentationPageFunc) PushReturn(r0 *semantic.DocumentationPageData, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDocumentationPageFunc) PushReturn(r0 *semantic.DocumentationPageData, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDocumentationPageFunc.nextHook",
                    "documentation": {
                      "identifier": "QueryResolverDocumentationPageFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDocumentationPageFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDocumentationPageFunc) nextHook() func(context.Context, string) (*semantic.DocumentationPageData, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDocumentationPageFunc) nextHook() func(context.Context, string) (*semantic.DocumentationPageData, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDocumentationPageFunc.appendCall",
                    "documentation": {
                      "identifier": "QueryResolverDocumentationPageFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDocumentationPageFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDocumentationPageFunc) appendCall(r0 QueryResolverDocumentationPageFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDocumentationPageFunc) appendCall(r0 QueryResolverDocumentationPageFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDocumentationPageFunc.History",
                    "documentation": {
                      "identifier": "QueryResolverDocumentationPageFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDocumentationPageFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverDocumentationPageFunc) History() []QueryResolverDocumentationPageFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverDocumentationPageFunc) History() []QueryResolverDocumentationPageFuncCall\n```\n\nHistory returns a sequence of QueryResolverDocumentationPageFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDocumentationPageFuncCall",
              "documentation": {
                "identifier": "QueryResolverDocumentationPageFuncCall",
                "newPage": false,
                "searchKey": "mocks.QueryResolverDocumentationPageFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueryResolverDocumentationPageFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueryResolverDocumentationPageFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *semantic.DocumentationPageData\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nQueryResolverDocumentationPageFuncCall is an object that describes an invocation of method DocumentationPage on an instance of MockQueryResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDocumentationPageFuncCall.Args",
                    "documentation": {
                      "identifier": "QueryResolverDocumentationPageFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDocumentationPageFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c QueryResolverDocumentationPageFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c QueryResolverDocumentationPageFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverDocumentationPageFuncCall.Results",
                    "documentation": {
                      "identifier": "QueryResolverDocumentationPageFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverDocumentationPageFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c QueryResolverDocumentationPageFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c QueryResolverDocumentationPageFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverHoverFunc",
              "documentation": {
                "identifier": "QueryResolverHoverFunc",
                "newPage": false,
                "searchKey": "mocks.QueryResolverHoverFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueryResolverHoverFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueryResolverHoverFunc struct {\n\tdefaultHook func(context.Context, int, int) (string, lsifstore.Range, bool, error)\n\thooks       []func(context.Context, int, int) (string, lsifstore.Range, bool, error)\n\thistory     []QueryResolverHoverFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nQueryResolverHoverFunc describes the behavior when the Hover method of the parent MockQueryResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverHoverFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "QueryResolverHoverFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverHoverFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverHoverFunc) SetDefaultHook(hook func(context.Context, int, int) (string, lsifstore.Range, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverHoverFunc) SetDefaultHook(hook func(context.Context, int, int) (string, lsifstore.Range, bool, error))\n```\n\nSetDefaultHook sets function that is called when the Hover method of the parent MockQueryResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverHoverFunc.PushHook",
                    "documentation": {
                      "identifier": "QueryResolverHoverFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverHoverFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverHoverFunc) PushHook(hook func(context.Context, int, int) (string, lsifstore.Range, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverHoverFunc) PushHook(hook func(context.Context, int, int) (string, lsifstore.Range, bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Hover method of the parent MockQueryResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverHoverFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "QueryResolverHoverFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverHoverFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverHoverFunc) SetDefaultReturn(r0 string, r1 lsifstore.Range, r2 bool, r3 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverHoverFunc) SetDefaultReturn(r0 string, r1 lsifstore.Range, r2 bool, r3 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverHoverFunc.PushReturn",
                    "documentation": {
                      "identifier": "QueryResolverHoverFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverHoverFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverHoverFunc) PushReturn(r0 string, r1 lsifstore.Range, r2 bool, r3 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverHoverFunc) PushReturn(r0 string, r1 lsifstore.Range, r2 bool, r3 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverHoverFunc.nextHook",
                    "documentation": {
                      "identifier": "QueryResolverHoverFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverHoverFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverHoverFunc) nextHook() func(context.Context, int, int) (string, lsifstore.Range, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverHoverFunc) nextHook() func(context.Context, int, int) (string, lsifstore.Range, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverHoverFunc.appendCall",
                    "documentation": {
                      "identifier": "QueryResolverHoverFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverHoverFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverHoverFunc) appendCall(r0 QueryResolverHoverFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverHoverFunc) appendCall(r0 QueryResolverHoverFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverHoverFunc.History",
                    "documentation": {
                      "identifier": "QueryResolverHoverFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverHoverFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverHoverFunc) History() []QueryResolverHoverFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverHoverFunc) History() []QueryResolverHoverFuncCall\n```\n\nHistory returns a sequence of QueryResolverHoverFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverHoverFuncCall",
              "documentation": {
                "identifier": "QueryResolverHoverFuncCall",
                "newPage": false,
                "searchKey": "mocks.QueryResolverHoverFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueryResolverHoverFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueryResolverHoverFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 string\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 lsifstore.Range\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 bool\n\t// Result3 is the value of the 4th result returned from this method\n\t// invocation.\n\tResult3 error\n}\n```\n\nQueryResolverHoverFuncCall is an object that describes an invocation of method Hover on an instance of MockQueryResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverHoverFuncCall.Args",
                    "documentation": {
                      "identifier": "QueryResolverHoverFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverHoverFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c QueryResolverHoverFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c QueryResolverHoverFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverHoverFuncCall.Results",
                    "documentation": {
                      "identifier": "QueryResolverHoverFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverHoverFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c QueryResolverHoverFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c QueryResolverHoverFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverRangesFunc",
              "documentation": {
                "identifier": "QueryResolverRangesFunc",
                "newPage": false,
                "searchKey": "mocks.QueryResolverRangesFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueryResolverRangesFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueryResolverRangesFunc struct {\n\tdefaultHook func(context.Context, int, int) ([]resolvers.AdjustedCodeIntelligenceRange, error)\n\thooks       []func(context.Context, int, int) ([]resolvers.AdjustedCodeIntelligenceRange, error)\n\thistory     []QueryResolverRangesFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nQueryResolverRangesFunc describes the behavior when the Ranges method of the parent MockQueryResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverRangesFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "QueryResolverRangesFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverRangesFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverRangesFunc) SetDefaultHook(hook func(context.Context, int, int) ([]resolvers.AdjustedCodeIntelligenceRange, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverRangesFunc) SetDefaultHook(hook func(context.Context, int, int) ([]resolvers.AdjustedCodeIntelligenceRange, error))\n```\n\nSetDefaultHook sets function that is called when the Ranges method of the parent MockQueryResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverRangesFunc.PushHook",
                    "documentation": {
                      "identifier": "QueryResolverRangesFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverRangesFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverRangesFunc) PushHook(hook func(context.Context, int, int) ([]resolvers.AdjustedCodeIntelligenceRange, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverRangesFunc) PushHook(hook func(context.Context, int, int) ([]resolvers.AdjustedCodeIntelligenceRange, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Ranges method of the parent MockQueryResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverRangesFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "QueryResolverRangesFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverRangesFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverRangesFunc) SetDefaultReturn(r0 []resolvers.AdjustedCodeIntelligenceRange, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverRangesFunc) SetDefaultReturn(r0 []resolvers.AdjustedCodeIntelligenceRange, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverRangesFunc.PushReturn",
                    "documentation": {
                      "identifier": "QueryResolverRangesFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverRangesFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverRangesFunc) PushReturn(r0 []resolvers.AdjustedCodeIntelligenceRange, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverRangesFunc) PushReturn(r0 []resolvers.AdjustedCodeIntelligenceRange, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverRangesFunc.nextHook",
                    "documentation": {
                      "identifier": "QueryResolverRangesFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverRangesFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverRangesFunc) nextHook() func(context.Context, int, int) ([]resolvers.AdjustedCodeIntelligenceRange, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverRangesFunc) nextHook() func(context.Context, int, int) ([]resolvers.AdjustedCodeIntelligenceRange, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverRangesFunc.appendCall",
                    "documentation": {
                      "identifier": "QueryResolverRangesFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverRangesFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverRangesFunc) appendCall(r0 QueryResolverRangesFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverRangesFunc) appendCall(r0 QueryResolverRangesFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverRangesFunc.History",
                    "documentation": {
                      "identifier": "QueryResolverRangesFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverRangesFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverRangesFunc) History() []QueryResolverRangesFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverRangesFunc) History() []QueryResolverRangesFuncCall\n```\n\nHistory returns a sequence of QueryResolverRangesFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverRangesFuncCall",
              "documentation": {
                "identifier": "QueryResolverRangesFuncCall",
                "newPage": false,
                "searchKey": "mocks.QueryResolverRangesFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueryResolverRangesFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueryResolverRangesFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []resolvers.AdjustedCodeIntelligenceRange\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nQueryResolverRangesFuncCall is an object that describes an invocation of method Ranges on an instance of MockQueryResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverRangesFuncCall.Args",
                    "documentation": {
                      "identifier": "QueryResolverRangesFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverRangesFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c QueryResolverRangesFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c QueryResolverRangesFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverRangesFuncCall.Results",
                    "documentation": {
                      "identifier": "QueryResolverRangesFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverRangesFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c QueryResolverRangesFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c QueryResolverRangesFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverReferencesFunc",
              "documentation": {
                "identifier": "QueryResolverReferencesFunc",
                "newPage": false,
                "searchKey": "mocks.QueryResolverReferencesFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueryResolverReferencesFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueryResolverReferencesFunc struct {\n\tdefaultHook func(context.Context, int, int, int, string) ([]resolvers.AdjustedLocation, string, error)\n\thooks       []func(context.Context, int, int, int, string) ([]resolvers.AdjustedLocation, string, error)\n\thistory     []QueryResolverReferencesFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nQueryResolverReferencesFunc describes the behavior when the References method of the parent MockQueryResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverReferencesFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "QueryResolverReferencesFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverReferencesFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverReferencesFunc) SetDefaultHook(hook func(context.Context, int, int, int, string) ([]resolvers.AdjustedLocation, string, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverReferencesFunc) SetDefaultHook(hook func(context.Context, int, int, int, string) ([]resolvers.AdjustedLocation, string, error))\n```\n\nSetDefaultHook sets function that is called when the References method of the parent MockQueryResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverReferencesFunc.PushHook",
                    "documentation": {
                      "identifier": "QueryResolverReferencesFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverReferencesFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverReferencesFunc) PushHook(hook func(context.Context, int, int, int, string) ([]resolvers.AdjustedLocation, string, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverReferencesFunc) PushHook(hook func(context.Context, int, int, int, string) ([]resolvers.AdjustedLocation, string, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the References method of the parent MockQueryResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverReferencesFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "QueryResolverReferencesFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverReferencesFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverReferencesFunc) SetDefaultReturn(r0 []resolvers.AdjustedLocation, r1 string, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverReferencesFunc) SetDefaultReturn(r0 []resolvers.AdjustedLocation, r1 string, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverReferencesFunc.PushReturn",
                    "documentation": {
                      "identifier": "QueryResolverReferencesFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverReferencesFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverReferencesFunc) PushReturn(r0 []resolvers.AdjustedLocation, r1 string, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverReferencesFunc) PushReturn(r0 []resolvers.AdjustedLocation, r1 string, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverReferencesFunc.nextHook",
                    "documentation": {
                      "identifier": "QueryResolverReferencesFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverReferencesFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverReferencesFunc) nextHook() func(context.Context, int, int, int, string) ([]resolvers.AdjustedLocation, string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverReferencesFunc) nextHook() func(context.Context, int, int, int, string) ([]resolvers.AdjustedLocation, string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverReferencesFunc.appendCall",
                    "documentation": {
                      "identifier": "QueryResolverReferencesFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverReferencesFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverReferencesFunc) appendCall(r0 QueryResolverReferencesFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverReferencesFunc) appendCall(r0 QueryResolverReferencesFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverReferencesFunc.History",
                    "documentation": {
                      "identifier": "QueryResolverReferencesFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverReferencesFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *QueryResolverReferencesFunc) History() []QueryResolverReferencesFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *QueryResolverReferencesFunc) History() []QueryResolverReferencesFuncCall\n```\n\nHistory returns a sequence of QueryResolverReferencesFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverReferencesFuncCall",
              "documentation": {
                "identifier": "QueryResolverReferencesFuncCall",
                "newPage": false,
                "searchKey": "mocks.QueryResolverReferencesFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueryResolverReferencesFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueryResolverReferencesFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 int\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 int\n\t// Arg4 is the value of the 5th argument passed to this method\n\t// invocation.\n\tArg4 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []resolvers.AdjustedLocation\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 string\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nQueryResolverReferencesFuncCall is an object that describes an invocation of method References on an instance of MockQueryResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverReferencesFuncCall.Args",
                    "documentation": {
                      "identifier": "QueryResolverReferencesFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverReferencesFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c QueryResolverReferencesFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c QueryResolverReferencesFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#QueryResolverReferencesFuncCall.Results",
                    "documentation": {
                      "identifier": "QueryResolverReferencesFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.QueryResolverReferencesFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c QueryResolverReferencesFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c QueryResolverReferencesFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockResolver",
              "documentation": {
                "identifier": "MockResolver",
                "newPage": false,
                "searchKey": "mocks.MockResolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockResolver struct {\n\t// CommitGraphFunc is an instance of a mock function object controlling\n\t// the behavior of the method CommitGraph.\n\tCommitGraphFunc *ResolverCommitGraphFunc\n\t// DeleteIndexByIDFunc is an instance of a mock function object\n\t// controlling the behavior of the method DeleteIndexByID.\n\tDeleteIndexByIDFunc *ResolverDeleteIndexByIDFunc\n\t// DeleteUploadByIDFunc is an instance of a mock function object\n\t// controlling the behavior of the method DeleteUploadByID.\n\tDeleteUploadByIDFunc *ResolverDeleteUploadByIDFunc\n\t// GetIndexByIDFunc is an instance of a mock function object controlling\n\t// the behavior of the method GetIndexByID.\n\tGetIndexByIDFunc *ResolverGetIndexByIDFunc\n\t// GetIndexesByIDsFunc is an instance of a mock function object\n\t// controlling the behavior of the method GetIndexesByIDs.\n\tGetIndexesByIDsFunc *ResolverGetIndexesByIDsFunc\n\t// GetUploadByIDFunc is an instance of a mock function object\n\t// controlling the behavior of the method GetUploadByID.\n\tGetUploadByIDFunc *ResolverGetUploadByIDFunc\n\t// GetUploadsByIDsFunc is an instance of a mock function object\n\t// controlling the behavior of the method GetUploadsByIDs.\n\tGetUploadsByIDsFunc *ResolverGetUploadsByIDsFunc\n\t// IndexConfigurationFunc is an instance of a mock function object\n\t// controlling the behavior of the method IndexConfiguration.\n\tIndexConfigurationFunc *ResolverIndexConfigurationFunc\n\t// IndexConnectionResolverFunc is an instance of a mock function object\n\t// controlling the behavior of the method IndexConnectionResolver.\n\tIndexConnectionResolverFunc *ResolverIndexConnectionResolverFunc\n\t// QueryResolverFunc is an instance of a mock function object\n\t// controlling the behavior of the method QueryResolver.\n\tQueryResolverFunc *ResolverQueryResolverFunc\n\t// QueueAutoIndexJobForRepoFunc is an instance of a mock function object\n\t// controlling the behavior of the method QueueAutoIndexJobForRepo.\n\tQueueAutoIndexJobForRepoFunc *ResolverQueueAutoIndexJobForRepoFunc\n\t// UpdateIndexConfigurationByRepositoryIDFunc is an instance of a mock\n\t// function object controlling the behavior of the method\n\t// UpdateIndexConfigurationByRepositoryID.\n\tUpdateIndexConfigurationByRepositoryIDFunc *ResolverUpdateIndexConfigurationByRepositoryIDFunc\n\t// UploadConnectionResolverFunc is an instance of a mock function object\n\t// controlling the behavior of the method UploadConnectionResolver.\n\tUploadConnectionResolverFunc *ResolverUploadConnectionResolverFunc\n}\n```\n\nMockResolver is a mock implementation of the Resolver interface (from the package github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/codeintel/resolvers) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#NewMockResolver",
                    "documentation": {
                      "identifier": "NewMockResolver",
                      "newPage": false,
                      "searchKey": "mocks.NewMockResolver",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockResolver() *MockResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockResolver() *MockResolver\n```\n\nNewMockResolver creates a new mock of the Resolver interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#NewMockResolverFrom",
                    "documentation": {
                      "identifier": "NewMockResolverFrom",
                      "newPage": false,
                      "searchKey": "mocks.NewMockResolverFrom",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockResolverFrom(i resolvers.Resolver) *MockResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockResolverFrom(i resolvers.Resolver) *MockResolver\n```\n\nNewMockResolverFrom creates a new mock of the MockResolver interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockResolver.CommitGraph",
                    "documentation": {
                      "identifier": "MockResolver.CommitGraph",
                      "newPage": false,
                      "searchKey": "mocks.MockResolver.CommitGraph",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockResolver) CommitGraph(v0 context.Context, v1 int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockResolver) CommitGraph(v0 context.Context, v1 int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error)\n```\n\nCommitGraph delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockResolver.DeleteIndexByID",
                    "documentation": {
                      "identifier": "MockResolver.DeleteIndexByID",
                      "newPage": false,
                      "searchKey": "mocks.MockResolver.DeleteIndexByID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockResolver) DeleteIndexByID(v0 context.Context, v1 int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockResolver) DeleteIndexByID(v0 context.Context, v1 int) error\n```\n\nDeleteIndexByID delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockResolver.DeleteUploadByID",
                    "documentation": {
                      "identifier": "MockResolver.DeleteUploadByID",
                      "newPage": false,
                      "searchKey": "mocks.MockResolver.DeleteUploadByID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockResolver) DeleteUploadByID(v0 context.Context, v1 int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockResolver) DeleteUploadByID(v0 context.Context, v1 int) error\n```\n\nDeleteUploadByID delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockResolver.GetIndexByID",
                    "documentation": {
                      "identifier": "MockResolver.GetIndexByID",
                      "newPage": false,
                      "searchKey": "mocks.MockResolver.GetIndexByID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockResolver) GetIndexByID(v0 context.Context, v1 int) (dbstore.Index, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockResolver) GetIndexByID(v0 context.Context, v1 int) (dbstore.Index, bool, error)\n```\n\nGetIndexByID delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockResolver.GetIndexesByIDs",
                    "documentation": {
                      "identifier": "MockResolver.GetIndexesByIDs",
                      "newPage": false,
                      "searchKey": "mocks.MockResolver.GetIndexesByIDs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockResolver) GetIndexesByIDs(v0 context.Context, v1 ...int) ([]dbstore.Index, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockResolver) GetIndexesByIDs(v0 context.Context, v1 ...int) ([]dbstore.Index, error)\n```\n\nGetIndexesByIDs delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockResolver.GetUploadByID",
                    "documentation": {
                      "identifier": "MockResolver.GetUploadByID",
                      "newPage": false,
                      "searchKey": "mocks.MockResolver.GetUploadByID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockResolver) GetUploadByID(v0 context.Context, v1 int) (dbstore.Upload, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockResolver) GetUploadByID(v0 context.Context, v1 int) (dbstore.Upload, bool, error)\n```\n\nGetUploadByID delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockResolver.GetUploadsByIDs",
                    "documentation": {
                      "identifier": "MockResolver.GetUploadsByIDs",
                      "newPage": false,
                      "searchKey": "mocks.MockResolver.GetUploadsByIDs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockResolver) GetUploadsByIDs(v0 context.Context, v1 ...int) ([]dbstore.Upload, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockResolver) GetUploadsByIDs(v0 context.Context, v1 ...int) ([]dbstore.Upload, error)\n```\n\nGetUploadsByIDs delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockResolver.IndexConfiguration",
                    "documentation": {
                      "identifier": "MockResolver.IndexConfiguration",
                      "newPage": false,
                      "searchKey": "mocks.MockResolver.IndexConfiguration",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockResolver) IndexConfiguration(v0 context.Context, v1 int) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockResolver) IndexConfiguration(v0 context.Context, v1 int) ([]byte, error)\n```\n\nIndexConfiguration delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockResolver.IndexConnectionResolver",
                    "documentation": {
                      "identifier": "MockResolver.IndexConnectionResolver",
                      "newPage": false,
                      "searchKey": "mocks.MockResolver.IndexConnectionResolver",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockResolver) IndexConnectionResolver(v0 dbstore.GetIndexesOptions) *resolvers.IndexesResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockResolver) IndexConnectionResolver(v0 dbstore.GetIndexesOptions) *resolvers.IndexesResolver\n```\n\nIndexConnectionResolver delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockResolver.QueryResolver",
                    "documentation": {
                      "identifier": "MockResolver.QueryResolver",
                      "newPage": false,
                      "searchKey": "mocks.MockResolver.QueryResolver",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockResolver) QueryResolver(v0 context.Context, v1 *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockResolver) QueryResolver(v0 context.Context, v1 *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error)\n```\n\nQueryResolver delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockResolver.QueueAutoIndexJobForRepo",
                    "documentation": {
                      "identifier": "MockResolver.QueueAutoIndexJobForRepo",
                      "newPage": false,
                      "searchKey": "mocks.MockResolver.QueueAutoIndexJobForRepo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockResolver) QueueAutoIndexJobForRepo(v0 context.Context, v1 int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockResolver) QueueAutoIndexJobForRepo(v0 context.Context, v1 int) error\n```\n\nQueueAutoIndexJobForRepo delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockResolver.UpdateIndexConfigurationByRepositoryID",
                    "documentation": {
                      "identifier": "MockResolver.UpdateIndexConfigurationByRepositoryID",
                      "newPage": false,
                      "searchKey": "mocks.MockResolver.UpdateIndexConfigurationByRepositoryID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockResolver) UpdateIndexConfigurationByRepositoryID(v0 context.Context, v1 int, v2 string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockResolver) UpdateIndexConfigurationByRepositoryID(v0 context.Context, v1 int, v2 string) error\n```\n\nUpdateIndexConfigurationByRepositoryID delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#MockResolver.UploadConnectionResolver",
                    "documentation": {
                      "identifier": "MockResolver.UploadConnectionResolver",
                      "newPage": false,
                      "searchKey": "mocks.MockResolver.UploadConnectionResolver",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockResolver) UploadConnectionResolver(v0 dbstore.GetUploadsOptions) *resolvers.UploadsResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockResolver) UploadConnectionResolver(v0 dbstore.GetUploadsOptions) *resolvers.UploadsResolver\n```\n\nUploadConnectionResolver delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverCommitGraphFunc",
              "documentation": {
                "identifier": "ResolverCommitGraphFunc",
                "newPage": false,
                "searchKey": "mocks.ResolverCommitGraphFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverCommitGraphFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverCommitGraphFunc struct {\n\tdefaultHook func(context.Context, int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error)\n\thooks       []func(context.Context, int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error)\n\thistory     []ResolverCommitGraphFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nResolverCommitGraphFunc describes the behavior when the CommitGraph method of the parent MockResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverCommitGraphFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "ResolverCommitGraphFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverCommitGraphFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverCommitGraphFunc) SetDefaultHook(hook func(context.Context, int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverCommitGraphFunc) SetDefaultHook(hook func(context.Context, int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error))\n```\n\nSetDefaultHook sets function that is called when the CommitGraph method of the parent MockResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverCommitGraphFunc.PushHook",
                    "documentation": {
                      "identifier": "ResolverCommitGraphFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverCommitGraphFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverCommitGraphFunc) PushHook(hook func(context.Context, int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverCommitGraphFunc) PushHook(hook func(context.Context, int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the CommitGraph method of the parent MockResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverCommitGraphFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "ResolverCommitGraphFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverCommitGraphFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverCommitGraphFunc) SetDefaultReturn(r0 graphqlbackend.CodeIntelligenceCommitGraphResolver, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverCommitGraphFunc) SetDefaultReturn(r0 graphqlbackend.CodeIntelligenceCommitGraphResolver, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverCommitGraphFunc.PushReturn",
                    "documentation": {
                      "identifier": "ResolverCommitGraphFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverCommitGraphFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverCommitGraphFunc) PushReturn(r0 graphqlbackend.CodeIntelligenceCommitGraphResolver, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverCommitGraphFunc) PushReturn(r0 graphqlbackend.CodeIntelligenceCommitGraphResolver, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverCommitGraphFunc.nextHook",
                    "documentation": {
                      "identifier": "ResolverCommitGraphFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverCommitGraphFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverCommitGraphFunc) nextHook() func(context.Context, int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverCommitGraphFunc) nextHook() func(context.Context, int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverCommitGraphFunc.appendCall",
                    "documentation": {
                      "identifier": "ResolverCommitGraphFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.ResolverCommitGraphFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverCommitGraphFunc) appendCall(r0 ResolverCommitGraphFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverCommitGraphFunc) appendCall(r0 ResolverCommitGraphFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverCommitGraphFunc.History",
                    "documentation": {
                      "identifier": "ResolverCommitGraphFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.ResolverCommitGraphFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverCommitGraphFunc) History() []ResolverCommitGraphFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverCommitGraphFunc) History() []ResolverCommitGraphFuncCall\n```\n\nHistory returns a sequence of ResolverCommitGraphFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverCommitGraphFuncCall",
              "documentation": {
                "identifier": "ResolverCommitGraphFuncCall",
                "newPage": false,
                "searchKey": "mocks.ResolverCommitGraphFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverCommitGraphFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverCommitGraphFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 graphqlbackend.CodeIntelligenceCommitGraphResolver\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nResolverCommitGraphFuncCall is an object that describes an invocation of method CommitGraph on an instance of MockResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverCommitGraphFuncCall.Args",
                    "documentation": {
                      "identifier": "ResolverCommitGraphFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.ResolverCommitGraphFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverCommitGraphFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverCommitGraphFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverCommitGraphFuncCall.Results",
                    "documentation": {
                      "identifier": "ResolverCommitGraphFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.ResolverCommitGraphFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverCommitGraphFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverCommitGraphFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteIndexByIDFunc",
              "documentation": {
                "identifier": "ResolverDeleteIndexByIDFunc",
                "newPage": false,
                "searchKey": "mocks.ResolverDeleteIndexByIDFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverDeleteIndexByIDFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverDeleteIndexByIDFunc struct {\n\tdefaultHook func(context.Context, int) error\n\thooks       []func(context.Context, int) error\n\thistory     []ResolverDeleteIndexByIDFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nResolverDeleteIndexByIDFunc describes the behavior when the DeleteIndexByID method of the parent MockResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteIndexByIDFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "ResolverDeleteIndexByIDFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverDeleteIndexByIDFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverDeleteIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverDeleteIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) error)\n```\n\nSetDefaultHook sets function that is called when the DeleteIndexByID method of the parent MockResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteIndexByIDFunc.PushHook",
                    "documentation": {
                      "identifier": "ResolverDeleteIndexByIDFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverDeleteIndexByIDFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverDeleteIndexByIDFunc) PushHook(hook func(context.Context, int) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverDeleteIndexByIDFunc) PushHook(hook func(context.Context, int) error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the DeleteIndexByID method of the parent MockResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteIndexByIDFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "ResolverDeleteIndexByIDFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverDeleteIndexByIDFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverDeleteIndexByIDFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverDeleteIndexByIDFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteIndexByIDFunc.PushReturn",
                    "documentation": {
                      "identifier": "ResolverDeleteIndexByIDFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverDeleteIndexByIDFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverDeleteIndexByIDFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverDeleteIndexByIDFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteIndexByIDFunc.nextHook",
                    "documentation": {
                      "identifier": "ResolverDeleteIndexByIDFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverDeleteIndexByIDFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverDeleteIndexByIDFunc) nextHook() func(context.Context, int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverDeleteIndexByIDFunc) nextHook() func(context.Context, int) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteIndexByIDFunc.appendCall",
                    "documentation": {
                      "identifier": "ResolverDeleteIndexByIDFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.ResolverDeleteIndexByIDFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverDeleteIndexByIDFunc) appendCall(r0 ResolverDeleteIndexByIDFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverDeleteIndexByIDFunc) appendCall(r0 ResolverDeleteIndexByIDFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteIndexByIDFunc.History",
                    "documentation": {
                      "identifier": "ResolverDeleteIndexByIDFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.ResolverDeleteIndexByIDFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverDeleteIndexByIDFunc) History() []ResolverDeleteIndexByIDFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverDeleteIndexByIDFunc) History() []ResolverDeleteIndexByIDFuncCall\n```\n\nHistory returns a sequence of ResolverDeleteIndexByIDFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteIndexByIDFuncCall",
              "documentation": {
                "identifier": "ResolverDeleteIndexByIDFuncCall",
                "newPage": false,
                "searchKey": "mocks.ResolverDeleteIndexByIDFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverDeleteIndexByIDFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverDeleteIndexByIDFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nResolverDeleteIndexByIDFuncCall is an object that describes an invocation of method DeleteIndexByID on an instance of MockResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteIndexByIDFuncCall.Args",
                    "documentation": {
                      "identifier": "ResolverDeleteIndexByIDFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.ResolverDeleteIndexByIDFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverDeleteIndexByIDFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverDeleteIndexByIDFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteIndexByIDFuncCall.Results",
                    "documentation": {
                      "identifier": "ResolverDeleteIndexByIDFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.ResolverDeleteIndexByIDFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverDeleteIndexByIDFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverDeleteIndexByIDFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteUploadByIDFunc",
              "documentation": {
                "identifier": "ResolverDeleteUploadByIDFunc",
                "newPage": false,
                "searchKey": "mocks.ResolverDeleteUploadByIDFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverDeleteUploadByIDFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverDeleteUploadByIDFunc struct {\n\tdefaultHook func(context.Context, int) error\n\thooks       []func(context.Context, int) error\n\thistory     []ResolverDeleteUploadByIDFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nResolverDeleteUploadByIDFunc describes the behavior when the DeleteUploadByID method of the parent MockResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteUploadByIDFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "ResolverDeleteUploadByIDFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverDeleteUploadByIDFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverDeleteUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverDeleteUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) error)\n```\n\nSetDefaultHook sets function that is called when the DeleteUploadByID method of the parent MockResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteUploadByIDFunc.PushHook",
                    "documentation": {
                      "identifier": "ResolverDeleteUploadByIDFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverDeleteUploadByIDFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverDeleteUploadByIDFunc) PushHook(hook func(context.Context, int) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverDeleteUploadByIDFunc) PushHook(hook func(context.Context, int) error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the DeleteUploadByID method of the parent MockResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteUploadByIDFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "ResolverDeleteUploadByIDFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverDeleteUploadByIDFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverDeleteUploadByIDFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverDeleteUploadByIDFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteUploadByIDFunc.PushReturn",
                    "documentation": {
                      "identifier": "ResolverDeleteUploadByIDFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverDeleteUploadByIDFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverDeleteUploadByIDFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverDeleteUploadByIDFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteUploadByIDFunc.nextHook",
                    "documentation": {
                      "identifier": "ResolverDeleteUploadByIDFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverDeleteUploadByIDFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverDeleteUploadByIDFunc) nextHook() func(context.Context, int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverDeleteUploadByIDFunc) nextHook() func(context.Context, int) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteUploadByIDFunc.appendCall",
                    "documentation": {
                      "identifier": "ResolverDeleteUploadByIDFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.ResolverDeleteUploadByIDFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverDeleteUploadByIDFunc) appendCall(r0 ResolverDeleteUploadByIDFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverDeleteUploadByIDFunc) appendCall(r0 ResolverDeleteUploadByIDFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteUploadByIDFunc.History",
                    "documentation": {
                      "identifier": "ResolverDeleteUploadByIDFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.ResolverDeleteUploadByIDFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverDeleteUploadByIDFunc) History() []ResolverDeleteUploadByIDFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverDeleteUploadByIDFunc) History() []ResolverDeleteUploadByIDFuncCall\n```\n\nHistory returns a sequence of ResolverDeleteUploadByIDFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteUploadByIDFuncCall",
              "documentation": {
                "identifier": "ResolverDeleteUploadByIDFuncCall",
                "newPage": false,
                "searchKey": "mocks.ResolverDeleteUploadByIDFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverDeleteUploadByIDFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverDeleteUploadByIDFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nResolverDeleteUploadByIDFuncCall is an object that describes an invocation of method DeleteUploadByID on an instance of MockResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteUploadByIDFuncCall.Args",
                    "documentation": {
                      "identifier": "ResolverDeleteUploadByIDFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.ResolverDeleteUploadByIDFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverDeleteUploadByIDFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverDeleteUploadByIDFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverDeleteUploadByIDFuncCall.Results",
                    "documentation": {
                      "identifier": "ResolverDeleteUploadByIDFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.ResolverDeleteUploadByIDFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverDeleteUploadByIDFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverDeleteUploadByIDFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexByIDFunc",
              "documentation": {
                "identifier": "ResolverGetIndexByIDFunc",
                "newPage": false,
                "searchKey": "mocks.ResolverGetIndexByIDFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverGetIndexByIDFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverGetIndexByIDFunc struct {\n\tdefaultHook func(context.Context, int) (dbstore.Index, bool, error)\n\thooks       []func(context.Context, int) (dbstore.Index, bool, error)\n\thistory     []ResolverGetIndexByIDFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nResolverGetIndexByIDFunc describes the behavior when the GetIndexByID method of the parent MockResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexByIDFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "ResolverGetIndexByIDFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetIndexByIDFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.Index, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.Index, bool, error))\n```\n\nSetDefaultHook sets function that is called when the GetIndexByID method of the parent MockResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexByIDFunc.PushHook",
                    "documentation": {
                      "identifier": "ResolverGetIndexByIDFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetIndexByIDFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetIndexByIDFunc) PushHook(hook func(context.Context, int) (dbstore.Index, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetIndexByIDFunc) PushHook(hook func(context.Context, int) (dbstore.Index, bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetIndexByID method of the parent MockResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexByIDFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "ResolverGetIndexByIDFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetIndexByIDFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetIndexByIDFunc) SetDefaultReturn(r0 dbstore.Index, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetIndexByIDFunc) SetDefaultReturn(r0 dbstore.Index, r1 bool, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexByIDFunc.PushReturn",
                    "documentation": {
                      "identifier": "ResolverGetIndexByIDFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetIndexByIDFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetIndexByIDFunc) PushReturn(r0 dbstore.Index, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetIndexByIDFunc) PushReturn(r0 dbstore.Index, r1 bool, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexByIDFunc.nextHook",
                    "documentation": {
                      "identifier": "ResolverGetIndexByIDFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetIndexByIDFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetIndexByIDFunc) nextHook() func(context.Context, int) (dbstore.Index, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetIndexByIDFunc) nextHook() func(context.Context, int) (dbstore.Index, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexByIDFunc.appendCall",
                    "documentation": {
                      "identifier": "ResolverGetIndexByIDFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetIndexByIDFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetIndexByIDFunc) appendCall(r0 ResolverGetIndexByIDFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetIndexByIDFunc) appendCall(r0 ResolverGetIndexByIDFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexByIDFunc.History",
                    "documentation": {
                      "identifier": "ResolverGetIndexByIDFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetIndexByIDFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetIndexByIDFunc) History() []ResolverGetIndexByIDFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetIndexByIDFunc) History() []ResolverGetIndexByIDFuncCall\n```\n\nHistory returns a sequence of ResolverGetIndexByIDFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexByIDFuncCall",
              "documentation": {
                "identifier": "ResolverGetIndexByIDFuncCall",
                "newPage": false,
                "searchKey": "mocks.ResolverGetIndexByIDFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverGetIndexByIDFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverGetIndexByIDFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 dbstore.Index\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 bool\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nResolverGetIndexByIDFuncCall is an object that describes an invocation of method GetIndexByID on an instance of MockResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexByIDFuncCall.Args",
                    "documentation": {
                      "identifier": "ResolverGetIndexByIDFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetIndexByIDFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverGetIndexByIDFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverGetIndexByIDFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexByIDFuncCall.Results",
                    "documentation": {
                      "identifier": "ResolverGetIndexByIDFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetIndexByIDFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverGetIndexByIDFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverGetIndexByIDFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexesByIDsFunc",
              "documentation": {
                "identifier": "ResolverGetIndexesByIDsFunc",
                "newPage": false,
                "searchKey": "mocks.ResolverGetIndexesByIDsFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverGetIndexesByIDsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverGetIndexesByIDsFunc struct {\n\tdefaultHook func(context.Context, ...int) ([]dbstore.Index, error)\n\thooks       []func(context.Context, ...int) ([]dbstore.Index, error)\n\thistory     []ResolverGetIndexesByIDsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nResolverGetIndexesByIDsFunc describes the behavior when the GetIndexesByIDs method of the parent MockResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexesByIDsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "ResolverGetIndexesByIDsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetIndexesByIDsFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetIndexesByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]dbstore.Index, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetIndexesByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]dbstore.Index, error))\n```\n\nSetDefaultHook sets function that is called when the GetIndexesByIDs method of the parent MockResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexesByIDsFunc.PushHook",
                    "documentation": {
                      "identifier": "ResolverGetIndexesByIDsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetIndexesByIDsFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetIndexesByIDsFunc) PushHook(hook func(context.Context, ...int) ([]dbstore.Index, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetIndexesByIDsFunc) PushHook(hook func(context.Context, ...int) ([]dbstore.Index, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetIndexesByIDs method of the parent MockResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexesByIDsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "ResolverGetIndexesByIDsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetIndexesByIDsFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetIndexesByIDsFunc) SetDefaultReturn(r0 []dbstore.Index, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetIndexesByIDsFunc) SetDefaultReturn(r0 []dbstore.Index, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexesByIDsFunc.PushReturn",
                    "documentation": {
                      "identifier": "ResolverGetIndexesByIDsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetIndexesByIDsFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetIndexesByIDsFunc) PushReturn(r0 []dbstore.Index, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetIndexesByIDsFunc) PushReturn(r0 []dbstore.Index, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexesByIDsFunc.nextHook",
                    "documentation": {
                      "identifier": "ResolverGetIndexesByIDsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetIndexesByIDsFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetIndexesByIDsFunc) nextHook() func(context.Context, ...int) ([]dbstore.Index, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetIndexesByIDsFunc) nextHook() func(context.Context, ...int) ([]dbstore.Index, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexesByIDsFunc.appendCall",
                    "documentation": {
                      "identifier": "ResolverGetIndexesByIDsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetIndexesByIDsFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetIndexesByIDsFunc) appendCall(r0 ResolverGetIndexesByIDsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetIndexesByIDsFunc) appendCall(r0 ResolverGetIndexesByIDsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexesByIDsFunc.History",
                    "documentation": {
                      "identifier": "ResolverGetIndexesByIDsFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetIndexesByIDsFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetIndexesByIDsFunc) History() []ResolverGetIndexesByIDsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetIndexesByIDsFunc) History() []ResolverGetIndexesByIDsFuncCall\n```\n\nHistory returns a sequence of ResolverGetIndexesByIDsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexesByIDsFuncCall",
              "documentation": {
                "identifier": "ResolverGetIndexesByIDsFuncCall",
                "newPage": false,
                "searchKey": "mocks.ResolverGetIndexesByIDsFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverGetIndexesByIDsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverGetIndexesByIDsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is a slice containing the values of the variadic arguments\n\t// passed to this method invocation.\n\tArg1 []int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []dbstore.Index\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nResolverGetIndexesByIDsFuncCall is an object that describes an invocation of method GetIndexesByIDs on an instance of MockResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexesByIDsFuncCall.Args",
                    "documentation": {
                      "identifier": "ResolverGetIndexesByIDsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetIndexesByIDsFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverGetIndexesByIDsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverGetIndexesByIDsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. The variadic slice argument is flattened in this array such that one positional argument and three variadic arguments would result in a slice of four, not two. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetIndexesByIDsFuncCall.Results",
                    "documentation": {
                      "identifier": "ResolverGetIndexesByIDsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetIndexesByIDsFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverGetIndexesByIDsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverGetIndexesByIDsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadByIDFunc",
              "documentation": {
                "identifier": "ResolverGetUploadByIDFunc",
                "newPage": false,
                "searchKey": "mocks.ResolverGetUploadByIDFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverGetUploadByIDFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverGetUploadByIDFunc struct {\n\tdefaultHook func(context.Context, int) (dbstore.Upload, bool, error)\n\thooks       []func(context.Context, int) (dbstore.Upload, bool, error)\n\thistory     []ResolverGetUploadByIDFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nResolverGetUploadByIDFunc describes the behavior when the GetUploadByID method of the parent MockResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadByIDFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "ResolverGetUploadByIDFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetUploadByIDFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.Upload, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.Upload, bool, error))\n```\n\nSetDefaultHook sets function that is called when the GetUploadByID method of the parent MockResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadByIDFunc.PushHook",
                    "documentation": {
                      "identifier": "ResolverGetUploadByIDFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetUploadByIDFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetUploadByIDFunc) PushHook(hook func(context.Context, int) (dbstore.Upload, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetUploadByIDFunc) PushHook(hook func(context.Context, int) (dbstore.Upload, bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetUploadByID method of the parent MockResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadByIDFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "ResolverGetUploadByIDFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetUploadByIDFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetUploadByIDFunc) SetDefaultReturn(r0 dbstore.Upload, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetUploadByIDFunc) SetDefaultReturn(r0 dbstore.Upload, r1 bool, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadByIDFunc.PushReturn",
                    "documentation": {
                      "identifier": "ResolverGetUploadByIDFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetUploadByIDFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetUploadByIDFunc) PushReturn(r0 dbstore.Upload, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetUploadByIDFunc) PushReturn(r0 dbstore.Upload, r1 bool, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadByIDFunc.nextHook",
                    "documentation": {
                      "identifier": "ResolverGetUploadByIDFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetUploadByIDFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetUploadByIDFunc) nextHook() func(context.Context, int) (dbstore.Upload, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetUploadByIDFunc) nextHook() func(context.Context, int) (dbstore.Upload, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadByIDFunc.appendCall",
                    "documentation": {
                      "identifier": "ResolverGetUploadByIDFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetUploadByIDFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetUploadByIDFunc) appendCall(r0 ResolverGetUploadByIDFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetUploadByIDFunc) appendCall(r0 ResolverGetUploadByIDFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadByIDFunc.History",
                    "documentation": {
                      "identifier": "ResolverGetUploadByIDFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetUploadByIDFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetUploadByIDFunc) History() []ResolverGetUploadByIDFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetUploadByIDFunc) History() []ResolverGetUploadByIDFuncCall\n```\n\nHistory returns a sequence of ResolverGetUploadByIDFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadByIDFuncCall",
              "documentation": {
                "identifier": "ResolverGetUploadByIDFuncCall",
                "newPage": false,
                "searchKey": "mocks.ResolverGetUploadByIDFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverGetUploadByIDFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverGetUploadByIDFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 dbstore.Upload\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 bool\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nResolverGetUploadByIDFuncCall is an object that describes an invocation of method GetUploadByID on an instance of MockResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadByIDFuncCall.Args",
                    "documentation": {
                      "identifier": "ResolverGetUploadByIDFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetUploadByIDFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverGetUploadByIDFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverGetUploadByIDFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadByIDFuncCall.Results",
                    "documentation": {
                      "identifier": "ResolverGetUploadByIDFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetUploadByIDFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverGetUploadByIDFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverGetUploadByIDFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadsByIDsFunc",
              "documentation": {
                "identifier": "ResolverGetUploadsByIDsFunc",
                "newPage": false,
                "searchKey": "mocks.ResolverGetUploadsByIDsFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverGetUploadsByIDsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverGetUploadsByIDsFunc struct {\n\tdefaultHook func(context.Context, ...int) ([]dbstore.Upload, error)\n\thooks       []func(context.Context, ...int) ([]dbstore.Upload, error)\n\thistory     []ResolverGetUploadsByIDsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nResolverGetUploadsByIDsFunc describes the behavior when the GetUploadsByIDs method of the parent MockResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadsByIDsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "ResolverGetUploadsByIDsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetUploadsByIDsFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetUploadsByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]dbstore.Upload, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetUploadsByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]dbstore.Upload, error))\n```\n\nSetDefaultHook sets function that is called when the GetUploadsByIDs method of the parent MockResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadsByIDsFunc.PushHook",
                    "documentation": {
                      "identifier": "ResolverGetUploadsByIDsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetUploadsByIDsFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetUploadsByIDsFunc) PushHook(hook func(context.Context, ...int) ([]dbstore.Upload, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetUploadsByIDsFunc) PushHook(hook func(context.Context, ...int) ([]dbstore.Upload, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetUploadsByIDs method of the parent MockResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadsByIDsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "ResolverGetUploadsByIDsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetUploadsByIDsFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetUploadsByIDsFunc) SetDefaultReturn(r0 []dbstore.Upload, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetUploadsByIDsFunc) SetDefaultReturn(r0 []dbstore.Upload, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadsByIDsFunc.PushReturn",
                    "documentation": {
                      "identifier": "ResolverGetUploadsByIDsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetUploadsByIDsFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetUploadsByIDsFunc) PushReturn(r0 []dbstore.Upload, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetUploadsByIDsFunc) PushReturn(r0 []dbstore.Upload, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadsByIDsFunc.nextHook",
                    "documentation": {
                      "identifier": "ResolverGetUploadsByIDsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetUploadsByIDsFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetUploadsByIDsFunc) nextHook() func(context.Context, ...int) ([]dbstore.Upload, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetUploadsByIDsFunc) nextHook() func(context.Context, ...int) ([]dbstore.Upload, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadsByIDsFunc.appendCall",
                    "documentation": {
                      "identifier": "ResolverGetUploadsByIDsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetUploadsByIDsFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetUploadsByIDsFunc) appendCall(r0 ResolverGetUploadsByIDsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetUploadsByIDsFunc) appendCall(r0 ResolverGetUploadsByIDsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadsByIDsFunc.History",
                    "documentation": {
                      "identifier": "ResolverGetUploadsByIDsFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetUploadsByIDsFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverGetUploadsByIDsFunc) History() []ResolverGetUploadsByIDsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverGetUploadsByIDsFunc) History() []ResolverGetUploadsByIDsFuncCall\n```\n\nHistory returns a sequence of ResolverGetUploadsByIDsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadsByIDsFuncCall",
              "documentation": {
                "identifier": "ResolverGetUploadsByIDsFuncCall",
                "newPage": false,
                "searchKey": "mocks.ResolverGetUploadsByIDsFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverGetUploadsByIDsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverGetUploadsByIDsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is a slice containing the values of the variadic arguments\n\t// passed to this method invocation.\n\tArg1 []int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []dbstore.Upload\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nResolverGetUploadsByIDsFuncCall is an object that describes an invocation of method GetUploadsByIDs on an instance of MockResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadsByIDsFuncCall.Args",
                    "documentation": {
                      "identifier": "ResolverGetUploadsByIDsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetUploadsByIDsFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverGetUploadsByIDsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverGetUploadsByIDsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. The variadic slice argument is flattened in this array such that one positional argument and three variadic arguments would result in a slice of four, not two. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverGetUploadsByIDsFuncCall.Results",
                    "documentation": {
                      "identifier": "ResolverGetUploadsByIDsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.ResolverGetUploadsByIDsFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverGetUploadsByIDsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverGetUploadsByIDsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConfigurationFunc",
              "documentation": {
                "identifier": "ResolverIndexConfigurationFunc",
                "newPage": false,
                "searchKey": "mocks.ResolverIndexConfigurationFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverIndexConfigurationFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverIndexConfigurationFunc struct {\n\tdefaultHook func(context.Context, int) ([]byte, error)\n\thooks       []func(context.Context, int) ([]byte, error)\n\thistory     []ResolverIndexConfigurationFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nResolverIndexConfigurationFunc describes the behavior when the IndexConfiguration method of the parent MockResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConfigurationFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "ResolverIndexConfigurationFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverIndexConfigurationFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverIndexConfigurationFunc) SetDefaultHook(hook func(context.Context, int) ([]byte, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverIndexConfigurationFunc) SetDefaultHook(hook func(context.Context, int) ([]byte, error))\n```\n\nSetDefaultHook sets function that is called when the IndexConfiguration method of the parent MockResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConfigurationFunc.PushHook",
                    "documentation": {
                      "identifier": "ResolverIndexConfigurationFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverIndexConfigurationFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverIndexConfigurationFunc) PushHook(hook func(context.Context, int) ([]byte, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverIndexConfigurationFunc) PushHook(hook func(context.Context, int) ([]byte, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the IndexConfiguration method of the parent MockResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConfigurationFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "ResolverIndexConfigurationFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverIndexConfigurationFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverIndexConfigurationFunc) SetDefaultReturn(r0 []byte, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverIndexConfigurationFunc) SetDefaultReturn(r0 []byte, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConfigurationFunc.PushReturn",
                    "documentation": {
                      "identifier": "ResolverIndexConfigurationFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverIndexConfigurationFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverIndexConfigurationFunc) PushReturn(r0 []byte, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverIndexConfigurationFunc) PushReturn(r0 []byte, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConfigurationFunc.nextHook",
                    "documentation": {
                      "identifier": "ResolverIndexConfigurationFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverIndexConfigurationFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverIndexConfigurationFunc) nextHook() func(context.Context, int) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverIndexConfigurationFunc) nextHook() func(context.Context, int) ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConfigurationFunc.appendCall",
                    "documentation": {
                      "identifier": "ResolverIndexConfigurationFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.ResolverIndexConfigurationFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverIndexConfigurationFunc) appendCall(r0 ResolverIndexConfigurationFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverIndexConfigurationFunc) appendCall(r0 ResolverIndexConfigurationFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConfigurationFunc.History",
                    "documentation": {
                      "identifier": "ResolverIndexConfigurationFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.ResolverIndexConfigurationFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverIndexConfigurationFunc) History() []ResolverIndexConfigurationFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverIndexConfigurationFunc) History() []ResolverIndexConfigurationFuncCall\n```\n\nHistory returns a sequence of ResolverIndexConfigurationFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConfigurationFuncCall",
              "documentation": {
                "identifier": "ResolverIndexConfigurationFuncCall",
                "newPage": false,
                "searchKey": "mocks.ResolverIndexConfigurationFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverIndexConfigurationFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverIndexConfigurationFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []byte\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nResolverIndexConfigurationFuncCall is an object that describes an invocation of method IndexConfiguration on an instance of MockResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConfigurationFuncCall.Args",
                    "documentation": {
                      "identifier": "ResolverIndexConfigurationFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.ResolverIndexConfigurationFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverIndexConfigurationFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverIndexConfigurationFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConfigurationFuncCall.Results",
                    "documentation": {
                      "identifier": "ResolverIndexConfigurationFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.ResolverIndexConfigurationFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverIndexConfigurationFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverIndexConfigurationFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConnectionResolverFunc",
              "documentation": {
                "identifier": "ResolverIndexConnectionResolverFunc",
                "newPage": false,
                "searchKey": "mocks.ResolverIndexConnectionResolverFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverIndexConnectionResolverFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverIndexConnectionResolverFunc struct {\n\tdefaultHook func(dbstore.GetIndexesOptions) *resolvers.IndexesResolver\n\thooks       []func(dbstore.GetIndexesOptions) *resolvers.IndexesResolver\n\thistory     []ResolverIndexConnectionResolverFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nResolverIndexConnectionResolverFunc describes the behavior when the IndexConnectionResolver method of the parent MockResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConnectionResolverFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "ResolverIndexConnectionResolverFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverIndexConnectionResolverFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverIndexConnectionResolverFunc) SetDefaultHook(hook func(dbstore.GetIndexesOptions) *resolvers.IndexesResolver)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverIndexConnectionResolverFunc) SetDefaultHook(hook func(dbstore.GetIndexesOptions) *resolvers.IndexesResolver)\n```\n\nSetDefaultHook sets function that is called when the IndexConnectionResolver method of the parent MockResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConnectionResolverFunc.PushHook",
                    "documentation": {
                      "identifier": "ResolverIndexConnectionResolverFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverIndexConnectionResolverFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverIndexConnectionResolverFunc) PushHook(hook func(dbstore.GetIndexesOptions) *resolvers.IndexesResolver)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverIndexConnectionResolverFunc) PushHook(hook func(dbstore.GetIndexesOptions) *resolvers.IndexesResolver)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the IndexConnectionResolver method of the parent MockResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConnectionResolverFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "ResolverIndexConnectionResolverFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverIndexConnectionResolverFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverIndexConnectionResolverFunc) SetDefaultReturn(r0 *resolvers.IndexesResolver)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverIndexConnectionResolverFunc) SetDefaultReturn(r0 *resolvers.IndexesResolver)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConnectionResolverFunc.PushReturn",
                    "documentation": {
                      "identifier": "ResolverIndexConnectionResolverFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverIndexConnectionResolverFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverIndexConnectionResolverFunc) PushReturn(r0 *resolvers.IndexesResolver)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverIndexConnectionResolverFunc) PushReturn(r0 *resolvers.IndexesResolver)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConnectionResolverFunc.nextHook",
                    "documentation": {
                      "identifier": "ResolverIndexConnectionResolverFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverIndexConnectionResolverFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverIndexConnectionResolverFunc) nextHook() func(dbstore.GetIndexesOptions) *resolvers.IndexesResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverIndexConnectionResolverFunc) nextHook() func(dbstore.GetIndexesOptions) *resolvers.IndexesResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConnectionResolverFunc.appendCall",
                    "documentation": {
                      "identifier": "ResolverIndexConnectionResolverFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.ResolverIndexConnectionResolverFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverIndexConnectionResolverFunc) appendCall(r0 ResolverIndexConnectionResolverFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverIndexConnectionResolverFunc) appendCall(r0 ResolverIndexConnectionResolverFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConnectionResolverFunc.History",
                    "documentation": {
                      "identifier": "ResolverIndexConnectionResolverFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.ResolverIndexConnectionResolverFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverIndexConnectionResolverFunc) History() []ResolverIndexConnectionResolverFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverIndexConnectionResolverFunc) History() []ResolverIndexConnectionResolverFuncCall\n```\n\nHistory returns a sequence of ResolverIndexConnectionResolverFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConnectionResolverFuncCall",
              "documentation": {
                "identifier": "ResolverIndexConnectionResolverFuncCall",
                "newPage": false,
                "searchKey": "mocks.ResolverIndexConnectionResolverFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverIndexConnectionResolverFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverIndexConnectionResolverFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 dbstore.GetIndexesOptions\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *resolvers.IndexesResolver\n}\n```\n\nResolverIndexConnectionResolverFuncCall is an object that describes an invocation of method IndexConnectionResolver on an instance of MockResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConnectionResolverFuncCall.Args",
                    "documentation": {
                      "identifier": "ResolverIndexConnectionResolverFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.ResolverIndexConnectionResolverFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverIndexConnectionResolverFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverIndexConnectionResolverFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverIndexConnectionResolverFuncCall.Results",
                    "documentation": {
                      "identifier": "ResolverIndexConnectionResolverFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.ResolverIndexConnectionResolverFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverIndexConnectionResolverFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverIndexConnectionResolverFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueryResolverFunc",
              "documentation": {
                "identifier": "ResolverQueryResolverFunc",
                "newPage": false,
                "searchKey": "mocks.ResolverQueryResolverFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverQueryResolverFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverQueryResolverFunc struct {\n\tdefaultHook func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error)\n\thooks       []func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error)\n\thistory     []ResolverQueryResolverFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nResolverQueryResolverFunc describes the behavior when the QueryResolver method of the parent MockResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueryResolverFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "ResolverQueryResolverFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverQueryResolverFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverQueryResolverFunc) SetDefaultHook(hook func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverQueryResolverFunc) SetDefaultHook(hook func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error))\n```\n\nSetDefaultHook sets function that is called when the QueryResolver method of the parent MockResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueryResolverFunc.PushHook",
                    "documentation": {
                      "identifier": "ResolverQueryResolverFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverQueryResolverFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverQueryResolverFunc) PushHook(hook func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverQueryResolverFunc) PushHook(hook func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the QueryResolver method of the parent MockResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueryResolverFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "ResolverQueryResolverFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverQueryResolverFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverQueryResolverFunc) SetDefaultReturn(r0 resolvers.QueryResolver, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverQueryResolverFunc) SetDefaultReturn(r0 resolvers.QueryResolver, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueryResolverFunc.PushReturn",
                    "documentation": {
                      "identifier": "ResolverQueryResolverFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverQueryResolverFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverQueryResolverFunc) PushReturn(r0 resolvers.QueryResolver, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverQueryResolverFunc) PushReturn(r0 resolvers.QueryResolver, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueryResolverFunc.nextHook",
                    "documentation": {
                      "identifier": "ResolverQueryResolverFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverQueryResolverFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverQueryResolverFunc) nextHook() func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverQueryResolverFunc) nextHook() func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueryResolverFunc.appendCall",
                    "documentation": {
                      "identifier": "ResolverQueryResolverFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.ResolverQueryResolverFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverQueryResolverFunc) appendCall(r0 ResolverQueryResolverFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverQueryResolverFunc) appendCall(r0 ResolverQueryResolverFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueryResolverFunc.History",
                    "documentation": {
                      "identifier": "ResolverQueryResolverFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.ResolverQueryResolverFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverQueryResolverFunc) History() []ResolverQueryResolverFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverQueryResolverFunc) History() []ResolverQueryResolverFuncCall\n```\n\nHistory returns a sequence of ResolverQueryResolverFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueryResolverFuncCall",
              "documentation": {
                "identifier": "ResolverQueryResolverFuncCall",
                "newPage": false,
                "searchKey": "mocks.ResolverQueryResolverFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverQueryResolverFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverQueryResolverFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 *graphqlbackend.GitBlobLSIFDataArgs\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 resolvers.QueryResolver\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nResolverQueryResolverFuncCall is an object that describes an invocation of method QueryResolver on an instance of MockResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueryResolverFuncCall.Args",
                    "documentation": {
                      "identifier": "ResolverQueryResolverFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.ResolverQueryResolverFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverQueryResolverFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverQueryResolverFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueryResolverFuncCall.Results",
                    "documentation": {
                      "identifier": "ResolverQueryResolverFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.ResolverQueryResolverFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverQueryResolverFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverQueryResolverFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueueAutoIndexJobForRepoFunc",
              "documentation": {
                "identifier": "ResolverQueueAutoIndexJobForRepoFunc",
                "newPage": false,
                "searchKey": "mocks.ResolverQueueAutoIndexJobForRepoFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverQueueAutoIndexJobForRepoFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverQueueAutoIndexJobForRepoFunc struct {\n\tdefaultHook func(context.Context, int) error\n\thooks       []func(context.Context, int) error\n\thistory     []ResolverQueueAutoIndexJobForRepoFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nResolverQueueAutoIndexJobForRepoFunc describes the behavior when the QueueAutoIndexJobForRepo method of the parent MockResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueueAutoIndexJobForRepoFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "ResolverQueueAutoIndexJobForRepoFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverQueueAutoIndexJobForRepoFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverQueueAutoIndexJobForRepoFunc) SetDefaultHook(hook func(context.Context, int) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverQueueAutoIndexJobForRepoFunc) SetDefaultHook(hook func(context.Context, int) error)\n```\n\nSetDefaultHook sets function that is called when the QueueAutoIndexJobForRepo method of the parent MockResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueueAutoIndexJobForRepoFunc.PushHook",
                    "documentation": {
                      "identifier": "ResolverQueueAutoIndexJobForRepoFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverQueueAutoIndexJobForRepoFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverQueueAutoIndexJobForRepoFunc) PushHook(hook func(context.Context, int) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverQueueAutoIndexJobForRepoFunc) PushHook(hook func(context.Context, int) error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the QueueAutoIndexJobForRepo method of the parent MockResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueueAutoIndexJobForRepoFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "ResolverQueueAutoIndexJobForRepoFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverQueueAutoIndexJobForRepoFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverQueueAutoIndexJobForRepoFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverQueueAutoIndexJobForRepoFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueueAutoIndexJobForRepoFunc.PushReturn",
                    "documentation": {
                      "identifier": "ResolverQueueAutoIndexJobForRepoFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverQueueAutoIndexJobForRepoFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverQueueAutoIndexJobForRepoFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverQueueAutoIndexJobForRepoFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueueAutoIndexJobForRepoFunc.nextHook",
                    "documentation": {
                      "identifier": "ResolverQueueAutoIndexJobForRepoFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverQueueAutoIndexJobForRepoFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverQueueAutoIndexJobForRepoFunc) nextHook() func(context.Context, int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverQueueAutoIndexJobForRepoFunc) nextHook() func(context.Context, int) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueueAutoIndexJobForRepoFunc.appendCall",
                    "documentation": {
                      "identifier": "ResolverQueueAutoIndexJobForRepoFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.ResolverQueueAutoIndexJobForRepoFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverQueueAutoIndexJobForRepoFunc) appendCall(r0 ResolverQueueAutoIndexJobForRepoFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverQueueAutoIndexJobForRepoFunc) appendCall(r0 ResolverQueueAutoIndexJobForRepoFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueueAutoIndexJobForRepoFunc.History",
                    "documentation": {
                      "identifier": "ResolverQueueAutoIndexJobForRepoFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.ResolverQueueAutoIndexJobForRepoFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverQueueAutoIndexJobForRepoFunc) History() []ResolverQueueAutoIndexJobForRepoFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverQueueAutoIndexJobForRepoFunc) History() []ResolverQueueAutoIndexJobForRepoFuncCall\n```\n\nHistory returns a sequence of ResolverQueueAutoIndexJobForRepoFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueueAutoIndexJobForRepoFuncCall",
              "documentation": {
                "identifier": "ResolverQueueAutoIndexJobForRepoFuncCall",
                "newPage": false,
                "searchKey": "mocks.ResolverQueueAutoIndexJobForRepoFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverQueueAutoIndexJobForRepoFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverQueueAutoIndexJobForRepoFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nResolverQueueAutoIndexJobForRepoFuncCall is an object that describes an invocation of method QueueAutoIndexJobForRepo on an instance of MockResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueueAutoIndexJobForRepoFuncCall.Args",
                    "documentation": {
                      "identifier": "ResolverQueueAutoIndexJobForRepoFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.ResolverQueueAutoIndexJobForRepoFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverQueueAutoIndexJobForRepoFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverQueueAutoIndexJobForRepoFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverQueueAutoIndexJobForRepoFuncCall.Results",
                    "documentation": {
                      "identifier": "ResolverQueueAutoIndexJobForRepoFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.ResolverQueueAutoIndexJobForRepoFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverQueueAutoIndexJobForRepoFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverQueueAutoIndexJobForRepoFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUpdateIndexConfigurationByRepositoryIDFunc",
              "documentation": {
                "identifier": "ResolverUpdateIndexConfigurationByRepositoryIDFunc",
                "newPage": false,
                "searchKey": "mocks.ResolverUpdateIndexConfigurationByRepositoryIDFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverUpdateIndexConfigurationByRepositoryIDFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverUpdateIndexConfigurationByRepositoryIDFunc struct {\n\tdefaultHook func(context.Context, int, string) error\n\thooks       []func(context.Context, int, string) error\n\thistory     []ResolverUpdateIndexConfigurationByRepositoryIDFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nResolverUpdateIndexConfigurationByRepositoryIDFunc describes the behavior when the UpdateIndexConfigurationByRepositoryID method of the parent MockResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUpdateIndexConfigurationByRepositoryIDFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "ResolverUpdateIndexConfigurationByRepositoryIDFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverUpdateIndexConfigurationByRepositoryIDFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) SetDefaultHook(hook func(context.Context, int, string) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) SetDefaultHook(hook func(context.Context, int, string) error)\n```\n\nSetDefaultHook sets function that is called when the UpdateIndexConfigurationByRepositoryID method of the parent MockResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUpdateIndexConfigurationByRepositoryIDFunc.PushHook",
                    "documentation": {
                      "identifier": "ResolverUpdateIndexConfigurationByRepositoryIDFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverUpdateIndexConfigurationByRepositoryIDFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) PushHook(hook func(context.Context, int, string) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) PushHook(hook func(context.Context, int, string) error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the UpdateIndexConfigurationByRepositoryID method of the parent MockResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUpdateIndexConfigurationByRepositoryIDFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "ResolverUpdateIndexConfigurationByRepositoryIDFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverUpdateIndexConfigurationByRepositoryIDFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUpdateIndexConfigurationByRepositoryIDFunc.PushReturn",
                    "documentation": {
                      "identifier": "ResolverUpdateIndexConfigurationByRepositoryIDFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverUpdateIndexConfigurationByRepositoryIDFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUpdateIndexConfigurationByRepositoryIDFunc.nextHook",
                    "documentation": {
                      "identifier": "ResolverUpdateIndexConfigurationByRepositoryIDFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverUpdateIndexConfigurationByRepositoryIDFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) nextHook() func(context.Context, int, string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) nextHook() func(context.Context, int, string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUpdateIndexConfigurationByRepositoryIDFunc.appendCall",
                    "documentation": {
                      "identifier": "ResolverUpdateIndexConfigurationByRepositoryIDFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.ResolverUpdateIndexConfigurationByRepositoryIDFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) appendCall(r0 ResolverUpdateIndexConfigurationByRepositoryIDFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) appendCall(r0 ResolverUpdateIndexConfigurationByRepositoryIDFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUpdateIndexConfigurationByRepositoryIDFunc.History",
                    "documentation": {
                      "identifier": "ResolverUpdateIndexConfigurationByRepositoryIDFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.ResolverUpdateIndexConfigurationByRepositoryIDFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) History() []ResolverUpdateIndexConfigurationByRepositoryIDFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) History() []ResolverUpdateIndexConfigurationByRepositoryIDFuncCall\n```\n\nHistory returns a sequence of ResolverUpdateIndexConfigurationByRepositoryIDFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUpdateIndexConfigurationByRepositoryIDFuncCall",
              "documentation": {
                "identifier": "ResolverUpdateIndexConfigurationByRepositoryIDFuncCall",
                "newPage": false,
                "searchKey": "mocks.ResolverUpdateIndexConfigurationByRepositoryIDFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverUpdateIndexConfigurationByRepositoryIDFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverUpdateIndexConfigurationByRepositoryIDFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nResolverUpdateIndexConfigurationByRepositoryIDFuncCall is an object that describes an invocation of method UpdateIndexConfigurationByRepositoryID on an instance of MockResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUpdateIndexConfigurationByRepositoryIDFuncCall.Args",
                    "documentation": {
                      "identifier": "ResolverUpdateIndexConfigurationByRepositoryIDFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.ResolverUpdateIndexConfigurationByRepositoryIDFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverUpdateIndexConfigurationByRepositoryIDFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverUpdateIndexConfigurationByRepositoryIDFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUpdateIndexConfigurationByRepositoryIDFuncCall.Results",
                    "documentation": {
                      "identifier": "ResolverUpdateIndexConfigurationByRepositoryIDFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.ResolverUpdateIndexConfigurationByRepositoryIDFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverUpdateIndexConfigurationByRepositoryIDFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverUpdateIndexConfigurationByRepositoryIDFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUploadConnectionResolverFunc",
              "documentation": {
                "identifier": "ResolverUploadConnectionResolverFunc",
                "newPage": false,
                "searchKey": "mocks.ResolverUploadConnectionResolverFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverUploadConnectionResolverFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverUploadConnectionResolverFunc struct {\n\tdefaultHook func(dbstore.GetUploadsOptions) *resolvers.UploadsResolver\n\thooks       []func(dbstore.GetUploadsOptions) *resolvers.UploadsResolver\n\thistory     []ResolverUploadConnectionResolverFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nResolverUploadConnectionResolverFunc describes the behavior when the UploadConnectionResolver method of the parent MockResolver instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUploadConnectionResolverFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "ResolverUploadConnectionResolverFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverUploadConnectionResolverFunc.SetDefaultHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverUploadConnectionResolverFunc) SetDefaultHook(hook func(dbstore.GetUploadsOptions) *resolvers.UploadsResolver)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverUploadConnectionResolverFunc) SetDefaultHook(hook func(dbstore.GetUploadsOptions) *resolvers.UploadsResolver)\n```\n\nSetDefaultHook sets function that is called when the UploadConnectionResolver method of the parent MockResolver instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUploadConnectionResolverFunc.PushHook",
                    "documentation": {
                      "identifier": "ResolverUploadConnectionResolverFunc.PushHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverUploadConnectionResolverFunc.PushHook",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverUploadConnectionResolverFunc) PushHook(hook func(dbstore.GetUploadsOptions) *resolvers.UploadsResolver)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverUploadConnectionResolverFunc) PushHook(hook func(dbstore.GetUploadsOptions) *resolvers.UploadsResolver)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the UploadConnectionResolver method of the parent MockResolver instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUploadConnectionResolverFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "ResolverUploadConnectionResolverFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverUploadConnectionResolverFunc.SetDefaultReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverUploadConnectionResolverFunc) SetDefaultReturn(r0 *resolvers.UploadsResolver)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverUploadConnectionResolverFunc) SetDefaultReturn(r0 *resolvers.UploadsResolver)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUploadConnectionResolverFunc.PushReturn",
                    "documentation": {
                      "identifier": "ResolverUploadConnectionResolverFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "mocks.ResolverUploadConnectionResolverFunc.PushReturn",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverUploadConnectionResolverFunc) PushReturn(r0 *resolvers.UploadsResolver)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverUploadConnectionResolverFunc) PushReturn(r0 *resolvers.UploadsResolver)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUploadConnectionResolverFunc.nextHook",
                    "documentation": {
                      "identifier": "ResolverUploadConnectionResolverFunc.nextHook",
                      "newPage": false,
                      "searchKey": "mocks.ResolverUploadConnectionResolverFunc.nextHook",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverUploadConnectionResolverFunc) nextHook() func(dbstore.GetUploadsOptions) *resolvers.UploadsResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverUploadConnectionResolverFunc) nextHook() func(dbstore.GetUploadsOptions) *resolvers.UploadsResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUploadConnectionResolverFunc.appendCall",
                    "documentation": {
                      "identifier": "ResolverUploadConnectionResolverFunc.appendCall",
                      "newPage": false,
                      "searchKey": "mocks.ResolverUploadConnectionResolverFunc.appendCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverUploadConnectionResolverFunc) appendCall(r0 ResolverUploadConnectionResolverFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverUploadConnectionResolverFunc) appendCall(r0 ResolverUploadConnectionResolverFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUploadConnectionResolverFunc.History",
                    "documentation": {
                      "identifier": "ResolverUploadConnectionResolverFunc.History",
                      "newPage": false,
                      "searchKey": "mocks.ResolverUploadConnectionResolverFunc.History",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *ResolverUploadConnectionResolverFunc) History() []ResolverUploadConnectionResolverFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *ResolverUploadConnectionResolverFunc) History() []ResolverUploadConnectionResolverFuncCall\n```\n\nHistory returns a sequence of ResolverUploadConnectionResolverFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUploadConnectionResolverFuncCall",
              "documentation": {
                "identifier": "ResolverUploadConnectionResolverFuncCall",
                "newPage": false,
                "searchKey": "mocks.ResolverUploadConnectionResolverFuncCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResolverUploadConnectionResolverFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResolverUploadConnectionResolverFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 dbstore.GetUploadsOptions\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *resolvers.UploadsResolver\n}\n```\n\nResolverUploadConnectionResolverFuncCall is an object that describes an invocation of method UploadConnectionResolver on an instance of MockResolver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUploadConnectionResolverFuncCall.Args",
                    "documentation": {
                      "identifier": "ResolverUploadConnectionResolverFuncCall.Args",
                      "newPage": false,
                      "searchKey": "mocks.ResolverUploadConnectionResolverFuncCall.Args",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverUploadConnectionResolverFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverUploadConnectionResolverFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks#ResolverUploadConnectionResolverFuncCall.Results",
                    "documentation": {
                      "identifier": "ResolverUploadConnectionResolverFuncCall.Results",
                      "newPage": false,
                      "searchKey": "mocks.ResolverUploadConnectionResolverFuncCall.Results",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ResolverUploadConnectionResolverFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ResolverUploadConnectionResolverFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
}
