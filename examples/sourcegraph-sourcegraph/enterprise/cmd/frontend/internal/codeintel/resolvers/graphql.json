{
  "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql",
  "documentation": {
    "identifier": "graphql",
    "newPage": true,
    "searchKey": "enterprise/cmd/frontend/internal/codeintel/resolvers/graphql",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package graphql"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#DefaultDiagnosticsPageSize",
              "documentation": {
                "identifier": "DefaultDiagnosticsPageSize",
                "newPage": false,
                "searchKey": "graphql.DefaultDiagnosticsPageSize",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DefaultDiagnosticsPageSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DefaultDiagnosticsPageSize = 100\n```\n\nDefaultDiagnosticsPageSize is the diagnostic result page size when no limit is supplied. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#DefaultIndexPageSize",
              "documentation": {
                "identifier": "DefaultIndexPageSize",
                "newPage": false,
                "searchKey": "graphql.DefaultIndexPageSize",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DefaultIndexPageSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DefaultIndexPageSize = 50\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#DefaultReferencesPageSize",
              "documentation": {
                "identifier": "DefaultReferencesPageSize",
                "newPage": false,
                "searchKey": "graphql.DefaultReferencesPageSize",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DefaultReferencesPageSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DefaultReferencesPageSize = 100\n```\n\nDefaultReferencesPageSize is the reference result page size when no limit is supplied. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#DefaultUploadPageSize",
              "documentation": {
                "identifier": "DefaultUploadPageSize",
                "newPage": false,
                "searchKey": "graphql.DefaultUploadPageSize",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DefaultUploadPageSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DefaultUploadPageSize = 50\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#numCommits",
              "documentation": {
                "identifier": "numCommits",
                "newPage": false,
                "searchKey": "graphql.numCommits",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const numCommits"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst numCommits = 10 // per repo\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#numPaths",
              "documentation": {
                "identifier": "numPaths",
                "newPage": false,
                "searchKey": "graphql.numPaths",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const numPaths"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst numPaths = 10 // per commit\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#numRepositories",
              "documentation": {
                "identifier": "numRepositories",
                "newPage": false,
                "searchKey": "graphql.numRepositories",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const numRepositories"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst numRepositories = 10\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#numRoutines",
              "documentation": {
                "identifier": "numRoutines",
                "newPage": false,
                "searchKey": "graphql.numRoutines",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const numRoutines"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst numRoutines = 5\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#ErrIllegalBounds",
              "documentation": {
                "identifier": "ErrIllegalBounds",
                "newPage": false,
                "searchKey": "graphql.ErrIllegalBounds",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrIllegalBounds"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrIllegalBounds = errors.New(\"illegal bounds\")\n```\n\nErrIllegalBounds occurs when a negative or zero-width bound is supplied by the user. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#ErrIllegalLimit",
              "documentation": {
                "identifier": "ErrIllegalLimit",
                "newPage": false,
                "searchKey": "graphql.ErrIllegalLimit",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrIllegalLimit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrIllegalLimit = errors.New(\"illegal limit\")\n```\n\nErrIllegalLimit occurs when the user requests less than one object per page. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#autoIndexingEnabled",
              "documentation": {
                "identifier": "autoIndexingEnabled",
                "newPage": false,
                "searchKey": "graphql.autoIndexingEnabled",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var autoIndexingEnabled"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar autoIndexingEnabled = conf.CodeIntelAutoIndexingEnabled\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#errAutoIndexingNotEnabled",
              "documentation": {
                "identifier": "errAutoIndexingNotEnabled",
                "newPage": false,
                "searchKey": "graphql.errAutoIndexingNotEnabled",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errAutoIndexingNotEnabled"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errAutoIndexingNotEnabled = errors.New(\"precise code intelligence auto indexing is not enabled\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#severities",
              "documentation": {
                "identifier": "severities",
                "newPage": false,
                "searchKey": "graphql.severities",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var severities"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar severities = map[int]string{\n\t1: \"ERROR\",\n\t2: \"WARNING\",\n\t3: \"INFORMATION\",\n\t4: \"HINT\",\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#CachedLocationResolver",
              "documentation": {
                "identifier": "CachedLocationResolver",
                "newPage": false,
                "searchKey": "graphql.CachedLocationResolver",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CachedLocationResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CachedLocationResolver struct {\n\tsync.RWMutex\n\tchildren map[api.RepoID]*cachedRepositoryResolver\n\tdb       dbutil.DB\n}\n```\n\nCachedLocationResolver resolves repositories, commits, and git tree entries and caches the resulting resolvers so that the same request does not re-resolve the same repository, commit, or path multiple times during execution. This cache reduces the number duplicate of database and gitserver queries for definition, reference, and diagnostic queries, which return collections of results that often refer to a small set of repositories, commits, and paths with a large multiplicity. \n\nThis resolver maintains a hierarchy of caches as a way to decrease lock contention. Resolution of a repository holds the top-level lock. Resolution of a commit holds a lock associated with the parent repository. Similarly, resolution of a path holds a lock associated with the parent commit. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#NewCachedLocationResolver",
                    "documentation": {
                      "identifier": "NewCachedLocationResolver",
                      "newPage": false,
                      "searchKey": "graphql.NewCachedLocationResolver",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewCachedLocationResolver(db dbutil.DB) *CachedLocationResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewCachedLocationResolver(db dbutil.DB) *CachedLocationResolver\n```\n\nNewCachedLocationResolver creates a location resolver with an empty cache. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#CachedLocationResolver.Commit",
                    "documentation": {
                      "identifier": "CachedLocationResolver.Commit",
                      "newPage": false,
                      "searchKey": "graphql.CachedLocationResolver.Commit",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CachedLocationResolver) Commit(ctx context.Context, id api.RepoID, commit string) (*gql.GitCommitResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CachedLocationResolver) Commit(ctx context.Context, id api.RepoID, commit string) (*gql.GitCommitResolver, error)\n```\n\nCommit resolves the git commit with the given repository identifier and commit hash. This method may return a nil resolver if the commit is not known by gitserver. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#CachedLocationResolver.Path",
                    "documentation": {
                      "identifier": "CachedLocationResolver.Path",
                      "newPage": false,
                      "searchKey": "graphql.CachedLocationResolver.Path",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CachedLocationResolver) Path(ctx context.Context, id api.RepoID, commit, path string) (*gql.GitTreeEntryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CachedLocationResolver) Path(ctx context.Context, id api.RepoID, commit, path string) (*gql.GitTreeEntryResolver, error)\n```\n\nPath resolves the git tree entry with the given repository identifier, commit hash, and relative path. This method may return a nil resolver if the commit is not known by gitserver. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#CachedLocationResolver.Repository",
                    "documentation": {
                      "identifier": "CachedLocationResolver.Repository",
                      "newPage": false,
                      "searchKey": "graphql.CachedLocationResolver.Repository",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CachedLocationResolver) Repository(ctx context.Context, id api.RepoID) (*gql.RepositoryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CachedLocationResolver) Repository(ctx context.Context, id api.RepoID) (*gql.RepositoryResolver, error)\n```\n\nRepository resolves the repository with the given identifier. This method may return a nil resolver if the repository is not known by gitserver - this happens if there is exists still a bundle for a repo that has since been deleted. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#CachedLocationResolver.cachedCommit",
                    "documentation": {
                      "identifier": "CachedLocationResolver.cachedCommit",
                      "newPage": false,
                      "searchKey": "graphql.CachedLocationResolver.cachedCommit",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CachedLocationResolver) cachedCommit(ctx context.Context, id api.RepoID, commit string) (*cachedCommitResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CachedLocationResolver) cachedCommit(ctx context.Context, id api.RepoID, commit string) (*cachedCommitResolver, error)\n```\n\ncachedCommit resolves the commit with the given repository identifier and commit hash if the resulting resolver does not already exist in the cache. The cache is tested/populated with double-checked locking, which ensures that the resolver is created exactly once per GraphQL request. \n\nSee [https://en.wikipedia.org/wiki/Double-checked_locking](https://en.wikipedia.org/wiki/Double-checked_locking). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#CachedLocationResolver.cachedPath",
                    "documentation": {
                      "identifier": "CachedLocationResolver.cachedPath",
                      "newPage": false,
                      "searchKey": "graphql.CachedLocationResolver.cachedPath",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CachedLocationResolver) cachedPath(ctx context.Context, id api.RepoID, commit, path string) (*gql.GitTreeEntryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CachedLocationResolver) cachedPath(ctx context.Context, id api.RepoID, commit, path string) (*gql.GitTreeEntryResolver, error)\n```\n\ncachedPath resolves the commit with the given repository identifier, commit hash, and relative path if the resulting resolver does not already exist in the cache. The cache is tested/populated with double-checked locking, which ensures that the resolver is created exactly once per GraphQL request. \n\nSee [https://en.wikipedia.org/wiki/Double-checked_locking](https://en.wikipedia.org/wiki/Double-checked_locking). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#CachedLocationResolver.cachedRepository",
                    "documentation": {
                      "identifier": "CachedLocationResolver.cachedRepository",
                      "newPage": false,
                      "searchKey": "graphql.CachedLocationResolver.cachedRepository",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CachedLocationResolver) cachedRepository(ctx context.Context, id api.RepoID) (*cachedRepositoryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CachedLocationResolver) cachedRepository(ctx context.Context, id api.RepoID) (*cachedRepositoryResolver, error)\n```\n\ncachedRepository resolves the repository with the given identifier if the resulting resolver does not already exist in the cache. The cache is tested/populated with double-checked locking, which ensures that the resolver is created exactly once per GraphQL request. \n\nSee [https://en.wikipedia.org/wiki/Double-checked_locking](https://en.wikipedia.org/wiki/Double-checked_locking). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#CachedLocationResolver.resolveCommit",
                    "documentation": {
                      "identifier": "CachedLocationResolver.resolveCommit",
                      "newPage": false,
                      "searchKey": "graphql.CachedLocationResolver.resolveCommit",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CachedLocationResolver) resolveCommit(ctx context.Context, repositoryResolver *gql.RepositoryResolver, commit string) (*gql.GitCommitResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CachedLocationResolver) resolveCommit(ctx context.Context, repositoryResolver *gql.RepositoryResolver, commit string) (*gql.GitCommitResolver, error)\n```\n\nCommit resolves the git commit with the given repository resolver and commit hash. This method may return a nil resolver if the commit is not known by gitserver. This method must be called only when constructing a resolver to populate the cache. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#CachedLocationResolver.resolvePath",
                    "documentation": {
                      "identifier": "CachedLocationResolver.resolvePath",
                      "newPage": false,
                      "searchKey": "graphql.CachedLocationResolver.resolvePath",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CachedLocationResolver) resolvePath(ctx context.Context, commitResolver *gql.GitCommitResolver, path string) (*gql.GitTreeEntryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CachedLocationResolver) resolvePath(ctx context.Context, commitResolver *gql.GitCommitResolver, path string) (*gql.GitTreeEntryResolver, error)\n```\n\nPath resolves the git tree entry with the given commit resolver and relative path. This method must be called only when constructing a resolver to populate the cache. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#CachedLocationResolver.resolveRepository",
                    "documentation": {
                      "identifier": "CachedLocationResolver.resolveRepository",
                      "newPage": false,
                      "searchKey": "graphql.CachedLocationResolver.resolveRepository",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CachedLocationResolver) resolveRepository(ctx context.Context, id api.RepoID) (*gql.RepositoryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CachedLocationResolver) resolveRepository(ctx context.Context, id api.RepoID) (*gql.RepositoryResolver, error)\n```\n\nRepository resolves the repository with the given identifier. This method may return a nil resolver if the repository is not known by gitserver - this happens if there is exists still a bundle for a repo that has since been deleted. This method must be called only when constructing a resolver to populate the cache. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#CodeIntelligenceRangeConnectionResolver",
              "documentation": {
                "identifier": "CodeIntelligenceRangeConnectionResolver",
                "newPage": false,
                "searchKey": "graphql.CodeIntelligenceRangeConnectionResolver",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CodeIntelligenceRangeConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CodeIntelligenceRangeConnectionResolver struct {\n\tranges           []resolvers.AdjustedCodeIntelligenceRange\n\tlocationResolver *CachedLocationResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#CodeIntelligenceRangeConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "CodeIntelligenceRangeConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphql.CodeIntelligenceRangeConnectionResolver.Nodes",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CodeIntelligenceRangeConnectionResolver) Nodes(ctx context.Context) ([]gql.CodeIntelligenceRangeResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CodeIntelligenceRangeConnectionResolver) Nodes(ctx context.Context) ([]gql.CodeIntelligenceRangeResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#CodeIntelligenceRangeResolver",
              "documentation": {
                "identifier": "CodeIntelligenceRangeResolver",
                "newPage": false,
                "searchKey": "graphql.CodeIntelligenceRangeResolver",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CodeIntelligenceRangeResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CodeIntelligenceRangeResolver struct {\n\tr                resolvers.AdjustedCodeIntelligenceRange\n\tlocationResolver *CachedLocationResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#CodeIntelligenceRangeResolver.Definitions",
                    "documentation": {
                      "identifier": "CodeIntelligenceRangeResolver.Definitions",
                      "newPage": false,
                      "searchKey": "graphql.CodeIntelligenceRangeResolver.Definitions",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CodeIntelligenceRangeResolver) Definitions(ctx context.Context) (gql.LocationConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CodeIntelligenceRangeResolver) Definitions(ctx context.Context) (gql.LocationConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#CodeIntelligenceRangeResolver.Hover",
                    "documentation": {
                      "identifier": "CodeIntelligenceRangeResolver.Hover",
                      "newPage": false,
                      "searchKey": "graphql.CodeIntelligenceRangeResolver.Hover",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CodeIntelligenceRangeResolver) Hover(ctx context.Context) (gql.HoverResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CodeIntelligenceRangeResolver) Hover(ctx context.Context) (gql.HoverResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#CodeIntelligenceRangeResolver.Range",
                    "documentation": {
                      "identifier": "CodeIntelligenceRangeResolver.Range",
                      "newPage": false,
                      "searchKey": "graphql.CodeIntelligenceRangeResolver.Range",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CodeIntelligenceRangeResolver) Range(ctx context.Context) (gql.RangeResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CodeIntelligenceRangeResolver) Range(ctx context.Context) (gql.RangeResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#CodeIntelligenceRangeResolver.References",
                    "documentation": {
                      "identifier": "CodeIntelligenceRangeResolver.References",
                      "newPage": false,
                      "searchKey": "graphql.CodeIntelligenceRangeResolver.References",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CodeIntelligenceRangeResolver) References(ctx context.Context) (gql.LocationConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CodeIntelligenceRangeResolver) References(ctx context.Context) (gql.LocationConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#DiagnosticConnectionResolver",
              "documentation": {
                "identifier": "DiagnosticConnectionResolver",
                "newPage": false,
                "searchKey": "graphql.DiagnosticConnectionResolver",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DiagnosticConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DiagnosticConnectionResolver struct {\n\tdiagnostics      []resolvers.AdjustedDiagnostic\n\ttotalCount       int\n\tlocationResolver *CachedLocationResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#DiagnosticConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "DiagnosticConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphql.DiagnosticConnectionResolver.Nodes",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiagnosticConnectionResolver) Nodes(ctx context.Context) ([]gql.DiagnosticResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiagnosticConnectionResolver) Nodes(ctx context.Context) ([]gql.DiagnosticResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#DiagnosticConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "DiagnosticConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphql.DiagnosticConnectionResolver.PageInfo",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiagnosticConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiagnosticConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#DiagnosticConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "DiagnosticConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphql.DiagnosticConnectionResolver.TotalCount",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiagnosticConnectionResolver) TotalCount(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiagnosticConnectionResolver) TotalCount(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#DiagnosticResolver",
              "documentation": {
                "identifier": "DiagnosticResolver",
                "newPage": false,
                "searchKey": "graphql.DiagnosticResolver",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DiagnosticResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DiagnosticResolver struct {\n\tdiagnostic       resolvers.AdjustedDiagnostic\n\tlocationResolver *CachedLocationResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#DiagnosticResolver.Code",
                    "documentation": {
                      "identifier": "DiagnosticResolver.Code",
                      "newPage": false,
                      "searchKey": "graphql.DiagnosticResolver.Code",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiagnosticResolver) Code() (*string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiagnosticResolver) Code() (*string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#DiagnosticResolver.Location",
                    "documentation": {
                      "identifier": "DiagnosticResolver.Location",
                      "newPage": false,
                      "searchKey": "graphql.DiagnosticResolver.Location",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiagnosticResolver) Location(ctx context.Context) (gql.LocationResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiagnosticResolver) Location(ctx context.Context) (gql.LocationResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#DiagnosticResolver.Message",
                    "documentation": {
                      "identifier": "DiagnosticResolver.Message",
                      "newPage": false,
                      "searchKey": "graphql.DiagnosticResolver.Message",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiagnosticResolver) Message() (*string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiagnosticResolver) Message() (*string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#DiagnosticResolver.Severity",
                    "documentation": {
                      "identifier": "DiagnosticResolver.Severity",
                      "newPage": false,
                      "searchKey": "graphql.DiagnosticResolver.Severity",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiagnosticResolver) Severity() (*string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiagnosticResolver) Severity() (*string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#DiagnosticResolver.Source",
                    "documentation": {
                      "identifier": "DiagnosticResolver.Source",
                      "newPage": false,
                      "searchKey": "graphql.DiagnosticResolver.Source",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DiagnosticResolver) Source() (*string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DiagnosticResolver) Source() (*string, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#DocumentationPageResolver",
              "documentation": {
                "identifier": "DocumentationPageResolver",
                "newPage": false,
                "searchKey": "graphql.DocumentationPageResolver",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DocumentationPageResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DocumentationPageResolver struct {\n\ttree gql.JSONValue\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#DocumentationPageResolver.Tree",
                    "documentation": {
                      "identifier": "DocumentationPageResolver.Tree",
                      "newPage": false,
                      "searchKey": "graphql.DocumentationPageResolver.Tree",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *DocumentationPageResolver) Tree() gql.JSONValue"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *DocumentationPageResolver) Tree() gql.JSONValue\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#HoverResolver",
              "documentation": {
                "identifier": "HoverResolver",
                "newPage": false,
                "searchKey": "graphql.HoverResolver",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type HoverResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype HoverResolver struct {\n\ttext     string\n\tlspRange lsp.Range\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#HoverResolver.Markdown",
                    "documentation": {
                      "identifier": "HoverResolver.Markdown",
                      "newPage": false,
                      "searchKey": "graphql.HoverResolver.Markdown",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *HoverResolver) Markdown() gql.Markdown"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *HoverResolver) Markdown() gql.Markdown\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#HoverResolver.Range",
                    "documentation": {
                      "identifier": "HoverResolver.Range",
                      "newPage": false,
                      "searchKey": "graphql.HoverResolver.Range",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *HoverResolver) Range() gql.RangeResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *HoverResolver) Range() gql.RangeResolver\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexConfigurationResolver",
              "documentation": {
                "identifier": "IndexConfigurationResolver",
                "newPage": false,
                "searchKey": "graphql.IndexConfigurationResolver",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexConfigurationResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexConfigurationResolver struct {\n\tconfiguration []byte\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexConfigurationResolver.Configuration",
                    "documentation": {
                      "identifier": "IndexConfigurationResolver.Configuration",
                      "newPage": false,
                      "searchKey": "graphql.IndexConfigurationResolver.Configuration",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexConfigurationResolver) Configuration() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexConfigurationResolver) Configuration() *string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexConnectionResolver",
              "documentation": {
                "identifier": "IndexConnectionResolver",
                "newPage": false,
                "searchKey": "graphql.IndexConnectionResolver",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexConnectionResolver struct {\n\tresolver         *resolvers.IndexesResolver\n\tprefetcher       *Prefetcher\n\tlocationResolver *CachedLocationResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "IndexConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphql.IndexConnectionResolver.Nodes",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexConnectionResolver) Nodes(ctx context.Context) ([]gql.LSIFIndexResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexConnectionResolver) Nodes(ctx context.Context) ([]gql.LSIFIndexResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "IndexConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphql.IndexConnectionResolver.PageInfo",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "IndexConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphql.IndexConnectionResolver.TotalCount",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexConnectionResolver) TotalCount(ctx context.Context) (*int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexConnectionResolver) TotalCount(ctx context.Context) (*int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexResolver",
              "documentation": {
                "identifier": "IndexResolver",
                "newPage": false,
                "searchKey": "graphql.IndexResolver",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexResolver struct {\n\tindex            store.Index\n\tprefetcher       *Prefetcher\n\tlocationResolver *CachedLocationResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexResolver.AssociatedUpload",
                    "documentation": {
                      "identifier": "IndexResolver.AssociatedUpload",
                      "newPage": false,
                      "searchKey": "graphql.IndexResolver.AssociatedUpload",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexResolver) AssociatedUpload(ctx context.Context) (gql.LSIFUploadResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexResolver) AssociatedUpload(ctx context.Context) (gql.LSIFUploadResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexResolver.Failure",
                    "documentation": {
                      "identifier": "IndexResolver.Failure",
                      "newPage": false,
                      "searchKey": "graphql.IndexResolver.Failure",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexResolver) Failure() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexResolver) Failure() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexResolver.FinishedAt",
                    "documentation": {
                      "identifier": "IndexResolver.FinishedAt",
                      "newPage": false,
                      "searchKey": "graphql.IndexResolver.FinishedAt",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexResolver) FinishedAt() *gql.DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexResolver) FinishedAt() *gql.DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexResolver.ID",
                    "documentation": {
                      "identifier": "IndexResolver.ID",
                      "newPage": false,
                      "searchKey": "graphql.IndexResolver.ID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexResolver.InputCommit",
                    "documentation": {
                      "identifier": "IndexResolver.InputCommit",
                      "newPage": false,
                      "searchKey": "graphql.IndexResolver.InputCommit",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexResolver) InputCommit() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexResolver) InputCommit() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexResolver.InputIndexer",
                    "documentation": {
                      "identifier": "IndexResolver.InputIndexer",
                      "newPage": false,
                      "searchKey": "graphql.IndexResolver.InputIndexer",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexResolver) InputIndexer() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexResolver) InputIndexer() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexResolver.InputRoot",
                    "documentation": {
                      "identifier": "IndexResolver.InputRoot",
                      "newPage": false,
                      "searchKey": "graphql.IndexResolver.InputRoot",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexResolver) InputRoot() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexResolver) InputRoot() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexResolver.PlaceInQueue",
                    "documentation": {
                      "identifier": "IndexResolver.PlaceInQueue",
                      "newPage": false,
                      "searchKey": "graphql.IndexResolver.PlaceInQueue",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexResolver) PlaceInQueue() *int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexResolver) PlaceInQueue() *int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexResolver.ProjectRoot",
                    "documentation": {
                      "identifier": "IndexResolver.ProjectRoot",
                      "newPage": false,
                      "searchKey": "graphql.IndexResolver.ProjectRoot",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexResolver) ProjectRoot(ctx context.Context) (*gql.GitTreeEntryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexResolver) ProjectRoot(ctx context.Context) (*gql.GitTreeEntryResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexResolver.QueuedAt",
                    "documentation": {
                      "identifier": "IndexResolver.QueuedAt",
                      "newPage": false,
                      "searchKey": "graphql.IndexResolver.QueuedAt",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexResolver) QueuedAt() gql.DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexResolver) QueuedAt() gql.DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexResolver.StartedAt",
                    "documentation": {
                      "identifier": "IndexResolver.StartedAt",
                      "newPage": false,
                      "searchKey": "graphql.IndexResolver.StartedAt",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexResolver) StartedAt() *gql.DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexResolver) StartedAt() *gql.DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexResolver.State",
                    "documentation": {
                      "identifier": "IndexResolver.State",
                      "newPage": false,
                      "searchKey": "graphql.IndexResolver.State",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexResolver) State() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexResolver) State() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#IndexResolver.Steps",
                    "documentation": {
                      "identifier": "IndexResolver.Steps",
                      "newPage": false,
                      "searchKey": "graphql.IndexResolver.Steps",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexResolver) Steps() gql.IndexStepsResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexResolver) Steps() gql.IndexStepsResolver\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#LocationConnectionResolver",
              "documentation": {
                "identifier": "LocationConnectionResolver",
                "newPage": false,
                "searchKey": "graphql.LocationConnectionResolver",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LocationConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LocationConnectionResolver struct {\n\tlocations        []resolvers.AdjustedLocation\n\tcursor           *string\n\tlocationResolver *CachedLocationResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#LocationConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "LocationConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphql.LocationConnectionResolver.Nodes",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *LocationConnectionResolver) Nodes(ctx context.Context) ([]gql.LocationResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *LocationConnectionResolver) Nodes(ctx context.Context) ([]gql.LocationResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#LocationConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "LocationConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphql.LocationConnectionResolver.PageInfo",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *LocationConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *LocationConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Prefetcher",
              "documentation": {
                "identifier": "Prefetcher",
                "newPage": false,
                "searchKey": "graphql.Prefetcher",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Prefetcher struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Prefetcher struct {\n\tsync.RWMutex\n\tresolver    resolvers.Resolver\n\tuploadIDs   []int\n\tindexIDs    []int\n\tuploadCache map[int]store.Upload\n\tindexCache  map[int]store.Index\n}\n```\n\nPrefetcher is a batch query utility and cache used to reduce the amount of database queries made by a tree of upload and index resolvers. A single prefetcher instance is shared by all sibling resolvers resulting from an upload or index connection, as well as index records resulting from an upload resolver (and vice versa). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#NewPrefetcher",
                    "documentation": {
                      "identifier": "NewPrefetcher",
                      "newPage": false,
                      "searchKey": "graphql.NewPrefetcher",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewPrefetcher(resolver resolvers.Resolver) *Prefetcher"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewPrefetcher(resolver resolvers.Resolver) *Prefetcher\n```\n\nNewPrefetcher returns a prefetcher with an empty cache. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Prefetcher.GetIndexByID",
                    "documentation": {
                      "identifier": "Prefetcher.GetIndexByID",
                      "newPage": false,
                      "searchKey": "graphql.Prefetcher.GetIndexByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Prefetcher) GetIndexByID(ctx context.Context, id int) (store.Index, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Prefetcher) GetIndexByID(ctx context.Context, id int) (store.Index, bool, error)\n```\n\nGetIndexByID will return an index with the given identifier as well as a boolean flag indicating such a record's existence. If the given ID has already been fetched by another call to GetIndexByID, that record is returned immediately. Otherwise, the given identifier will be added to the current batch of identifiers constructed via calls to MarkIndex. All indexes will in the current batch are requested at once and the index with the given identifier is returned from that result set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Prefetcher.GetUploadByID",
                    "documentation": {
                      "identifier": "Prefetcher.GetUploadByID",
                      "newPage": false,
                      "searchKey": "graphql.Prefetcher.GetUploadByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Prefetcher) GetUploadByID(ctx context.Context, id int) (store.Upload, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Prefetcher) GetUploadByID(ctx context.Context, id int) (store.Upload, bool, error)\n```\n\nGetUploadByID will return an upload with the given identifier as well as a boolean flag indicating such a record's existence. If the given ID has already been fetched by another call to GetUploadByID, that record is returned immediately. Otherwise, the given identifier will be added to the current batch of identifiers constructed via calls to MarkUpload. All uploads will in the current batch are requested at once and the upload with the given identifier is returned from that result set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Prefetcher.MarkIndex",
                    "documentation": {
                      "identifier": "Prefetcher.MarkIndex",
                      "newPage": false,
                      "searchKey": "graphql.Prefetcher.MarkIndex",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Prefetcher) MarkIndex(id int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Prefetcher) MarkIndex(id int)\n```\n\nMarkIndex adds the given identifier to the next batch of indexes to fetch. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Prefetcher.MarkUpload",
                    "documentation": {
                      "identifier": "Prefetcher.MarkUpload",
                      "newPage": false,
                      "searchKey": "graphql.Prefetcher.MarkUpload",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Prefetcher) MarkUpload(id int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Prefetcher) MarkUpload(id int)\n```\n\nMarkUpload adds the given identifier to the next batch of uploads to fetch. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#QueryResolver",
              "documentation": {
                "identifier": "QueryResolver",
                "newPage": false,
                "searchKey": "graphql.QueryResolver",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueryResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueryResolver struct {\n\tresolver         resolvers.QueryResolver\n\tlocationResolver *CachedLocationResolver\n}\n```\n\nQueryResolver is the main interface to bundle-related operations exposed to the GraphQL API. This resolver concerns itself with GraphQL/API-specific behaviors (auth, validation, marshaling, etc.). All code intel-specific behavior is delegated to the underlying resolver instance, which is defined in the parent package. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#QueryResolver.Definitions",
                    "documentation": {
                      "identifier": "QueryResolver.Definitions",
                      "newPage": false,
                      "searchKey": "graphql.QueryResolver.Definitions",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *QueryResolver) Definitions(ctx context.Context, args *gql.LSIFQueryPositionArgs) (gql.LocationConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *QueryResolver) Definitions(ctx context.Context, args *gql.LSIFQueryPositionArgs) (gql.LocationConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#QueryResolver.Diagnostics",
                    "documentation": {
                      "identifier": "QueryResolver.Diagnostics",
                      "newPage": false,
                      "searchKey": "graphql.QueryResolver.Diagnostics",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *QueryResolver) Diagnostics(ctx context.Context, args *gql.LSIFDiagnosticsArgs) (gql.DiagnosticConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *QueryResolver) Diagnostics(ctx context.Context, args *gql.LSIFDiagnosticsArgs) (gql.DiagnosticConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#QueryResolver.DocumentationPage",
                    "documentation": {
                      "identifier": "QueryResolver.DocumentationPage",
                      "newPage": false,
                      "searchKey": "graphql.QueryResolver.DocumentationPage",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *QueryResolver) DocumentationPage(ctx context.Context, args *gql.LSIFDocumentationPageArgs) (gql.DocumentationPageResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *QueryResolver) DocumentationPage(ctx context.Context, args *gql.LSIFDocumentationPageArgs) (gql.DocumentationPageResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#QueryResolver.Hover",
                    "documentation": {
                      "identifier": "QueryResolver.Hover",
                      "newPage": false,
                      "searchKey": "graphql.QueryResolver.Hover",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *QueryResolver) Hover(ctx context.Context, args *gql.LSIFQueryPositionArgs) (gql.HoverResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *QueryResolver) Hover(ctx context.Context, args *gql.LSIFQueryPositionArgs) (gql.HoverResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#QueryResolver.Ranges",
                    "documentation": {
                      "identifier": "QueryResolver.Ranges",
                      "newPage": false,
                      "searchKey": "graphql.QueryResolver.Ranges",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *QueryResolver) Ranges(ctx context.Context, args *gql.LSIFRangesArgs) (gql.CodeIntelligenceRangeConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *QueryResolver) Ranges(ctx context.Context, args *gql.LSIFRangesArgs) (gql.CodeIntelligenceRangeConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#QueryResolver.References",
                    "documentation": {
                      "identifier": "QueryResolver.References",
                      "newPage": false,
                      "searchKey": "graphql.QueryResolver.References",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *QueryResolver) References(ctx context.Context, args *gql.LSIFPagedQueryPositionArgs) (gql.LocationConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *QueryResolver) References(ctx context.Context, args *gql.LSIFPagedQueryPositionArgs) (gql.LocationConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#QueryResolver.ToGitBlobLSIFData",
                    "documentation": {
                      "identifier": "QueryResolver.ToGitBlobLSIFData",
                      "newPage": false,
                      "searchKey": "graphql.QueryResolver.ToGitBlobLSIFData",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *QueryResolver) ToGitBlobLSIFData() (gql.GitBlobLSIFDataResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *QueryResolver) ToGitBlobLSIFData() (gql.GitBlobLSIFDataResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#QueryResolver.ToGitTreeLSIFData",
                    "documentation": {
                      "identifier": "QueryResolver.ToGitTreeLSIFData",
                      "newPage": false,
                      "searchKey": "graphql.QueryResolver.ToGitTreeLSIFData",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *QueryResolver) ToGitTreeLSIFData() (gql.GitTreeLSIFDataResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *QueryResolver) ToGitTreeLSIFData() (gql.GitTreeLSIFDataResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Resolver",
              "documentation": {
                "identifier": "Resolver",
                "newPage": false,
                "searchKey": "graphql.Resolver",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Resolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Resolver struct {\n\tresolver         resolvers.Resolver\n\tlocationResolver *CachedLocationResolver\n}\n```\n\nResolver is the main interface to code intel-related operations exposted to the GraphQL API. This resolver concerns itself with GraphQL/API-specific behaviors (auth, validation, marshaling, etc.). All code intel-specific behavior is delegated to the underlying resolver instance, which is defined in the parent package. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Resolver.CommitGraph",
                    "documentation": {
                      "identifier": "Resolver.CommitGraph",
                      "newPage": false,
                      "searchKey": "graphql.Resolver.CommitGraph",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) CommitGraph(ctx context.Context, id graphql.ID) (gql.CodeIntelligenceCommitGraphResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) CommitGraph(ctx context.Context, id graphql.ID) (gql.CodeIntelligenceCommitGraphResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Resolver.DeleteLSIFIndex",
                    "documentation": {
                      "identifier": "Resolver.DeleteLSIFIndex",
                      "newPage": false,
                      "searchKey": "graphql.Resolver.DeleteLSIFIndex",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) DeleteLSIFIndex(ctx context.Context, args *struct{ ID graphql.ID }) (*gql.EmptyResponse, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) DeleteLSIFIndex(ctx context.Context, args *struct{ ID graphql.ID }) (*gql.EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Resolver.DeleteLSIFUpload",
                    "documentation": {
                      "identifier": "Resolver.DeleteLSIFUpload",
                      "newPage": false,
                      "searchKey": "graphql.Resolver.DeleteLSIFUpload",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) DeleteLSIFUpload(ctx context.Context, args *struct{ ID graphql.ID }) (*gql.EmptyResponse, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) DeleteLSIFUpload(ctx context.Context, args *struct{ ID graphql.ID }) (*gql.EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Resolver.GitBlobLSIFData",
                    "documentation": {
                      "identifier": "Resolver.GitBlobLSIFData",
                      "newPage": false,
                      "searchKey": "graphql.Resolver.GitBlobLSIFData",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) GitBlobLSIFData(ctx context.Context, args *gql.GitBlobLSIFDataArgs) (gql.GitBlobLSIFDataResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) GitBlobLSIFData(ctx context.Context, args *gql.GitBlobLSIFDataArgs) (gql.GitBlobLSIFDataResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Resolver.IndexConfiguration",
                    "documentation": {
                      "identifier": "Resolver.IndexConfiguration",
                      "newPage": false,
                      "searchKey": "graphql.Resolver.IndexConfiguration",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) IndexConfiguration(ctx context.Context, id graphql.ID) (gql.IndexConfigurationResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) IndexConfiguration(ctx context.Context, id graphql.ID) (gql.IndexConfigurationResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Resolver.LSIFIndexByID",
                    "documentation": {
                      "identifier": "Resolver.LSIFIndexByID",
                      "newPage": false,
                      "searchKey": "graphql.Resolver.LSIFIndexByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) LSIFIndexByID(ctx context.Context, id graphql.ID) (gql.LSIFIndexResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) LSIFIndexByID(ctx context.Context, id graphql.ID) (gql.LSIFIndexResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Resolver.LSIFIndexes",
                    "documentation": {
                      "identifier": "Resolver.LSIFIndexes",
                      "newPage": false,
                      "searchKey": "graphql.Resolver.LSIFIndexes",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) LSIFIndexes(ctx context.Context, args *gql.LSIFIndexesQueryArgs) (gql.LSIFIndexConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) LSIFIndexes(ctx context.Context, args *gql.LSIFIndexesQueryArgs) (gql.LSIFIndexConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Resolver.LSIFIndexesByRepo",
                    "documentation": {
                      "identifier": "Resolver.LSIFIndexesByRepo",
                      "newPage": false,
                      "searchKey": "graphql.Resolver.LSIFIndexesByRepo",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) LSIFIndexesByRepo(ctx context.Context, args *gql.LSIFRepositoryIndexesQueryArgs) (gql.LSIFIndexConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) LSIFIndexesByRepo(ctx context.Context, args *gql.LSIFRepositoryIndexesQueryArgs) (gql.LSIFIndexConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Resolver.LSIFUploadByID",
                    "documentation": {
                      "identifier": "Resolver.LSIFUploadByID",
                      "newPage": false,
                      "searchKey": "graphql.Resolver.LSIFUploadByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) LSIFUploadByID(ctx context.Context, id graphql.ID) (gql.LSIFUploadResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) LSIFUploadByID(ctx context.Context, id graphql.ID) (gql.LSIFUploadResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Resolver.LSIFUploads",
                    "documentation": {
                      "identifier": "Resolver.LSIFUploads",
                      "newPage": false,
                      "searchKey": "graphql.Resolver.LSIFUploads",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) LSIFUploads(ctx context.Context, args *gql.LSIFUploadsQueryArgs) (gql.LSIFUploadConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) LSIFUploads(ctx context.Context, args *gql.LSIFUploadsQueryArgs) (gql.LSIFUploadConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Resolver.LSIFUploadsByRepo",
                    "documentation": {
                      "identifier": "Resolver.LSIFUploadsByRepo",
                      "newPage": false,
                      "searchKey": "graphql.Resolver.LSIFUploadsByRepo",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) LSIFUploadsByRepo(ctx context.Context, args *gql.LSIFRepositoryUploadsQueryArgs) (gql.LSIFUploadConnectionResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) LSIFUploadsByRepo(ctx context.Context, args *gql.LSIFRepositoryUploadsQueryArgs) (gql.LSIFUploadConnectionResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Resolver.NodeResolvers",
                    "documentation": {
                      "identifier": "Resolver.NodeResolvers",
                      "newPage": false,
                      "searchKey": "graphql.Resolver.NodeResolvers",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) NodeResolvers() map[string]gql.NodeByIDFunc"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) NodeResolvers() map[string]gql.NodeByIDFunc\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Resolver.QueueAutoIndexJobForRepo",
                    "documentation": {
                      "identifier": "Resolver.QueueAutoIndexJobForRepo",
                      "newPage": false,
                      "searchKey": "graphql.Resolver.QueueAutoIndexJobForRepo",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) QueueAutoIndexJobForRepo(ctx context.Context, args *struct{ Repository graphql.ID }) (*gql.EmptyResponse, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) QueueAutoIndexJobForRepo(ctx context.Context, args *struct{ Repository graphql.ID }) (*gql.EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#Resolver.UpdateRepositoryIndexConfiguration",
                    "documentation": {
                      "identifier": "Resolver.UpdateRepositoryIndexConfiguration",
                      "newPage": false,
                      "searchKey": "graphql.Resolver.UpdateRepositoryIndexConfiguration",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Resolver) UpdateRepositoryIndexConfiguration(ctx context.Context, args *gql.UpdateRepositoryIndexConfigurationArgs) (*gql.EmptyResponse, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Resolver) UpdateRepositoryIndexConfiguration(ctx context.Context, args *gql.UpdateRepositoryIndexConfigurationArgs) (*gql.EmptyResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#UploadConnectionResolver",
              "documentation": {
                "identifier": "UploadConnectionResolver",
                "newPage": false,
                "searchKey": "graphql.UploadConnectionResolver",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UploadConnectionResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UploadConnectionResolver struct {\n\tresolver         *resolvers.UploadsResolver\n\tprefetcher       *Prefetcher\n\tlocationResolver *CachedLocationResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#UploadConnectionResolver.Nodes",
                    "documentation": {
                      "identifier": "UploadConnectionResolver.Nodes",
                      "newPage": false,
                      "searchKey": "graphql.UploadConnectionResolver.Nodes",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UploadConnectionResolver) Nodes(ctx context.Context) ([]gql.LSIFUploadResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UploadConnectionResolver) Nodes(ctx context.Context) ([]gql.LSIFUploadResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#UploadConnectionResolver.PageInfo",
                    "documentation": {
                      "identifier": "UploadConnectionResolver.PageInfo",
                      "newPage": false,
                      "searchKey": "graphql.UploadConnectionResolver.PageInfo",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UploadConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UploadConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#UploadConnectionResolver.TotalCount",
                    "documentation": {
                      "identifier": "UploadConnectionResolver.TotalCount",
                      "newPage": false,
                      "searchKey": "graphql.UploadConnectionResolver.TotalCount",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UploadConnectionResolver) TotalCount(ctx context.Context) (*int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UploadConnectionResolver) TotalCount(ctx context.Context) (*int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#UploadResolver",
              "documentation": {
                "identifier": "UploadResolver",
                "newPage": false,
                "searchKey": "graphql.UploadResolver",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UploadResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UploadResolver struct {\n\tupload           store.Upload\n\tprefetcher       *Prefetcher\n\tlocationResolver *CachedLocationResolver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#UploadResolver.AssociatedIndex",
                    "documentation": {
                      "identifier": "UploadResolver.AssociatedIndex",
                      "newPage": false,
                      "searchKey": "graphql.UploadResolver.AssociatedIndex",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UploadResolver) AssociatedIndex(ctx context.Context) (gql.LSIFIndexResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UploadResolver) AssociatedIndex(ctx context.Context) (gql.LSIFIndexResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#UploadResolver.Failure",
                    "documentation": {
                      "identifier": "UploadResolver.Failure",
                      "newPage": false,
                      "searchKey": "graphql.UploadResolver.Failure",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UploadResolver) Failure() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UploadResolver) Failure() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#UploadResolver.FinishedAt",
                    "documentation": {
                      "identifier": "UploadResolver.FinishedAt",
                      "newPage": false,
                      "searchKey": "graphql.UploadResolver.FinishedAt",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UploadResolver) FinishedAt() *gql.DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UploadResolver) FinishedAt() *gql.DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#UploadResolver.ID",
                    "documentation": {
                      "identifier": "UploadResolver.ID",
                      "newPage": false,
                      "searchKey": "graphql.UploadResolver.ID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UploadResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UploadResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#UploadResolver.InputCommit",
                    "documentation": {
                      "identifier": "UploadResolver.InputCommit",
                      "newPage": false,
                      "searchKey": "graphql.UploadResolver.InputCommit",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UploadResolver) InputCommit() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UploadResolver) InputCommit() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#UploadResolver.InputIndexer",
                    "documentation": {
                      "identifier": "UploadResolver.InputIndexer",
                      "newPage": false,
                      "searchKey": "graphql.UploadResolver.InputIndexer",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UploadResolver) InputIndexer() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UploadResolver) InputIndexer() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#UploadResolver.InputRoot",
                    "documentation": {
                      "identifier": "UploadResolver.InputRoot",
                      "newPage": false,
                      "searchKey": "graphql.UploadResolver.InputRoot",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UploadResolver) InputRoot() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UploadResolver) InputRoot() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#UploadResolver.IsLatestForRepo",
                    "documentation": {
                      "identifier": "UploadResolver.IsLatestForRepo",
                      "newPage": false,
                      "searchKey": "graphql.UploadResolver.IsLatestForRepo",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UploadResolver) IsLatestForRepo() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UploadResolver) IsLatestForRepo() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#UploadResolver.PlaceInQueue",
                    "documentation": {
                      "identifier": "UploadResolver.PlaceInQueue",
                      "newPage": false,
                      "searchKey": "graphql.UploadResolver.PlaceInQueue",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UploadResolver) PlaceInQueue() *int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UploadResolver) PlaceInQueue() *int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#UploadResolver.ProjectRoot",
                    "documentation": {
                      "identifier": "UploadResolver.ProjectRoot",
                      "newPage": false,
                      "searchKey": "graphql.UploadResolver.ProjectRoot",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UploadResolver) ProjectRoot(ctx context.Context) (*gql.GitTreeEntryResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UploadResolver) ProjectRoot(ctx context.Context) (*gql.GitTreeEntryResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#UploadResolver.StartedAt",
                    "documentation": {
                      "identifier": "UploadResolver.StartedAt",
                      "newPage": false,
                      "searchKey": "graphql.UploadResolver.StartedAt",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UploadResolver) StartedAt() *gql.DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UploadResolver) StartedAt() *gql.DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#UploadResolver.State",
                    "documentation": {
                      "identifier": "UploadResolver.State",
                      "newPage": false,
                      "searchKey": "graphql.UploadResolver.State",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UploadResolver) State() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UploadResolver) State() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#UploadResolver.UploadedAt",
                    "documentation": {
                      "identifier": "UploadResolver.UploadedAt",
                      "newPage": false,
                      "searchKey": "graphql.UploadResolver.UploadedAt",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UploadResolver) UploadedAt() gql.DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UploadResolver) UploadedAt() gql.DateTime\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#cachedCommitResolver",
              "documentation": {
                "identifier": "cachedCommitResolver",
                "newPage": false,
                "searchKey": "graphql.cachedCommitResolver",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type cachedCommitResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype cachedCommitResolver struct {\n\tsync.RWMutex\n\tresolver *gql.GitCommitResolver\n\tchildren map[string]*gql.GitTreeEntryResolver\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#cachedRepositoryResolver",
              "documentation": {
                "identifier": "cachedRepositoryResolver",
                "newPage": false,
                "searchKey": "graphql.cachedRepositoryResolver",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type cachedRepositoryResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype cachedRepositoryResolver struct {\n\tsync.RWMutex\n\tresolver *gql.RepositoryResolver\n\tchildren map[string]*cachedCommitResolver\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#executionLogEntryResolver",
              "documentation": {
                "identifier": "executionLogEntryResolver",
                "newPage": false,
                "searchKey": "graphql.executionLogEntryResolver",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type executionLogEntryResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype executionLogEntryResolver struct {\n\tentry workerutil.ExecutionLogEntry\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#executionLogEntryResolver.Command",
                    "documentation": {
                      "identifier": "executionLogEntryResolver.Command",
                      "newPage": false,
                      "searchKey": "graphql.executionLogEntryResolver.Command",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *executionLogEntryResolver) Command() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *executionLogEntryResolver) Command() []string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#executionLogEntryResolver.DurationMilliseconds",
                    "documentation": {
                      "identifier": "executionLogEntryResolver.DurationMilliseconds",
                      "newPage": false,
                      "searchKey": "graphql.executionLogEntryResolver.DurationMilliseconds",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *executionLogEntryResolver) DurationMilliseconds() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *executionLogEntryResolver) DurationMilliseconds() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#executionLogEntryResolver.ExitCode",
                    "documentation": {
                      "identifier": "executionLogEntryResolver.ExitCode",
                      "newPage": false,
                      "searchKey": "graphql.executionLogEntryResolver.ExitCode",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *executionLogEntryResolver) ExitCode() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *executionLogEntryResolver) ExitCode() int32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#executionLogEntryResolver.Key",
                    "documentation": {
                      "identifier": "executionLogEntryResolver.Key",
                      "newPage": false,
                      "searchKey": "graphql.executionLogEntryResolver.Key",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *executionLogEntryResolver) Key() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *executionLogEntryResolver) Key() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#executionLogEntryResolver.Out",
                    "documentation": {
                      "identifier": "executionLogEntryResolver.Out",
                      "newPage": false,
                      "searchKey": "graphql.executionLogEntryResolver.Out",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *executionLogEntryResolver) Out(ctx context.Context) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *executionLogEntryResolver) Out(ctx context.Context) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#executionLogEntryResolver.StartTime",
                    "documentation": {
                      "identifier": "executionLogEntryResolver.StartTime",
                      "newPage": false,
                      "searchKey": "graphql.executionLogEntryResolver.StartTime",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *executionLogEntryResolver) StartTime() gql.DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *executionLogEntryResolver) StartTime() gql.DateTime\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#indexStepResolver",
              "documentation": {
                "identifier": "indexStepResolver",
                "newPage": false,
                "searchKey": "graphql.indexStepResolver",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type indexStepResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype indexStepResolver struct {\n\tindex store.Index\n\tentry *workerutil.ExecutionLogEntry\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#indexStepResolver.IndexerArgs",
                    "documentation": {
                      "identifier": "indexStepResolver.IndexerArgs",
                      "newPage": false,
                      "searchKey": "graphql.indexStepResolver.IndexerArgs",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *indexStepResolver) IndexerArgs() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *indexStepResolver) IndexerArgs() []string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#indexStepResolver.LogEntry",
                    "documentation": {
                      "identifier": "indexStepResolver.LogEntry",
                      "newPage": false,
                      "searchKey": "graphql.indexStepResolver.LogEntry",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *indexStepResolver) LogEntry() gql.ExecutionLogEntryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *indexStepResolver) LogEntry() gql.ExecutionLogEntryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#indexStepResolver.Outfile",
                    "documentation": {
                      "identifier": "indexStepResolver.Outfile",
                      "newPage": false,
                      "searchKey": "graphql.indexStepResolver.Outfile",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *indexStepResolver) Outfile() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *indexStepResolver) Outfile() *string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#indexStepsResolver",
              "documentation": {
                "identifier": "indexStepsResolver",
                "newPage": false,
                "searchKey": "graphql.indexStepsResolver",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type indexStepsResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype indexStepsResolver struct {\n\tindex store.Index\n}\n```\n\nindexStepsResolver resolves the steps of an index record. \n\nIndex jobs are broken into three parts: \n\n```\n- pre-index steps; all but the last docker step\n- index step; the last docker step\n- upload step; the only src-cli step\n\n```\nThe setup and teardown steps match the executor setup and teardown. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#indexStepsResolver.Index",
                    "documentation": {
                      "identifier": "indexStepsResolver.Index",
                      "newPage": false,
                      "searchKey": "graphql.indexStepsResolver.Index",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *indexStepsResolver) Index() gql.IndexStepResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *indexStepsResolver) Index() gql.IndexStepResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#indexStepsResolver.PreIndex",
                    "documentation": {
                      "identifier": "indexStepsResolver.PreIndex",
                      "newPage": false,
                      "searchKey": "graphql.indexStepsResolver.PreIndex",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *indexStepsResolver) PreIndex() []gql.PreIndexStepResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *indexStepsResolver) PreIndex() []gql.PreIndexStepResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#indexStepsResolver.Setup",
                    "documentation": {
                      "identifier": "indexStepsResolver.Setup",
                      "newPage": false,
                      "searchKey": "graphql.indexStepsResolver.Setup",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *indexStepsResolver) Setup() []gql.ExecutionLogEntryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *indexStepsResolver) Setup() []gql.ExecutionLogEntryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#indexStepsResolver.Teardown",
                    "documentation": {
                      "identifier": "indexStepsResolver.Teardown",
                      "newPage": false,
                      "searchKey": "graphql.indexStepsResolver.Teardown",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *indexStepsResolver) Teardown() []gql.ExecutionLogEntryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *indexStepsResolver) Teardown() []gql.ExecutionLogEntryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#indexStepsResolver.Upload",
                    "documentation": {
                      "identifier": "indexStepsResolver.Upload",
                      "newPage": false,
                      "searchKey": "graphql.indexStepsResolver.Upload",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *indexStepsResolver) Upload() gql.ExecutionLogEntryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *indexStepsResolver) Upload() gql.ExecutionLogEntryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#indexStepsResolver.executionLogEntryResolversWithPrefix",
                    "documentation": {
                      "identifier": "indexStepsResolver.executionLogEntryResolversWithPrefix",
                      "newPage": false,
                      "searchKey": "graphql.indexStepsResolver.executionLogEntryResolversWithPrefix",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *indexStepsResolver) executionLogEntryResolversWithPrefix(prefix string) []gql.ExecutionLogEntryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *indexStepsResolver) executionLogEntryResolversWithPrefix(prefix string) []gql.ExecutionLogEntryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#indexStepsResolver.findExecutionLogEntry",
                    "documentation": {
                      "identifier": "indexStepsResolver.findExecutionLogEntry",
                      "newPage": false,
                      "searchKey": "graphql.indexStepsResolver.findExecutionLogEntry",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *indexStepsResolver) findExecutionLogEntry(key string) (workerutil.ExecutionLogEntry, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *indexStepsResolver) findExecutionLogEntry(key string) (workerutil.ExecutionLogEntry, bool)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#preIndexStepResolver",
              "documentation": {
                "identifier": "preIndexStepResolver",
                "newPage": false,
                "searchKey": "graphql.preIndexStepResolver",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type preIndexStepResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype preIndexStepResolver struct {\n\tstep  store.DockerStep\n\tentry *workerutil.ExecutionLogEntry\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#preIndexStepResolver.Commands",
                    "documentation": {
                      "identifier": "preIndexStepResolver.Commands",
                      "newPage": false,
                      "searchKey": "graphql.preIndexStepResolver.Commands",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *preIndexStepResolver) Commands() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *preIndexStepResolver) Commands() []string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#preIndexStepResolver.Image",
                    "documentation": {
                      "identifier": "preIndexStepResolver.Image",
                      "newPage": false,
                      "searchKey": "graphql.preIndexStepResolver.Image",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *preIndexStepResolver) Image() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *preIndexStepResolver) Image() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#preIndexStepResolver.LogEntry",
                    "documentation": {
                      "identifier": "preIndexStepResolver.LogEntry",
                      "newPage": false,
                      "searchKey": "graphql.preIndexStepResolver.LogEntry",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *preIndexStepResolver) LogEntry() gql.ExecutionLogEntryResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *preIndexStepResolver) LogEntry() gql.ExecutionLogEntryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#preIndexStepResolver.Root",
                    "documentation": {
                      "identifier": "preIndexStepResolver.Root",
                      "newPage": false,
                      "searchKey": "graphql.preIndexStepResolver.Root",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *preIndexStepResolver) Root() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *preIndexStepResolver) Root() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#NewDiagnosticConnectionResolver",
              "documentation": {
                "identifier": "NewDiagnosticConnectionResolver",
                "newPage": false,
                "searchKey": "graphql.NewDiagnosticConnectionResolver",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewDiagnosticConnectionResolver(diagnostics []resolvers.AdjustedDiagnostic, totalCount int, locationResolver *CachedLocationResolver) gql.DiagnosticConnectionResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewDiagnosticConnectionResolver(diagnostics []resolvers.AdjustedDiagnostic, totalCount int, locationResolver *CachedLocationResolver) gql.DiagnosticConnectionResolver\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#NewDiagnosticResolver",
              "documentation": {
                "identifier": "NewDiagnosticResolver",
                "newPage": false,
                "searchKey": "graphql.NewDiagnosticResolver",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewDiagnosticResolver(diagnostic resolvers.AdjustedDiagnostic, locationResolver *CachedLocationResolver) gql.DiagnosticResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewDiagnosticResolver(diagnostic resolvers.AdjustedDiagnostic, locationResolver *CachedLocationResolver) gql.DiagnosticResolver\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#NewHoverResolver",
              "documentation": {
                "identifier": "NewHoverResolver",
                "newPage": false,
                "searchKey": "graphql.NewHoverResolver",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewHoverResolver(text string, lspRange lsp.Range) gql.HoverResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewHoverResolver(text string, lspRange lsp.Range) gql.HoverResolver\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#NewIndexConfigurationResolver",
              "documentation": {
                "identifier": "NewIndexConfigurationResolver",
                "newPage": false,
                "searchKey": "graphql.NewIndexConfigurationResolver",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewIndexConfigurationResolver(configuration []byte) gql.IndexConfigurationResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewIndexConfigurationResolver(configuration []byte) gql.IndexConfigurationResolver\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#NewIndexConnectionResolver",
              "documentation": {
                "identifier": "NewIndexConnectionResolver",
                "newPage": false,
                "searchKey": "graphql.NewIndexConnectionResolver",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewIndexConnectionResolver(resolver *resolvers.IndexesResolver, prefetcher *Prefetcher, locationResolver *CachedLocationResolver) gql.LSIFIndexConnectionResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewIndexConnectionResolver(resolver *resolvers.IndexesResolver, prefetcher *Prefetcher, locationResolver *CachedLocationResolver) gql.LSIFIndexConnectionResolver\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#NewIndexResolver",
              "documentation": {
                "identifier": "NewIndexResolver",
                "newPage": false,
                "searchKey": "graphql.NewIndexResolver",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewIndexResolver(index store.Index, prefetcher *Prefetcher, locationResolver *CachedLocationResolver) gql.LSIFIndexResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewIndexResolver(index store.Index, prefetcher *Prefetcher, locationResolver *CachedLocationResolver) gql.LSIFIndexResolver\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#NewLocationConnectionResolver",
              "documentation": {
                "identifier": "NewLocationConnectionResolver",
                "newPage": false,
                "searchKey": "graphql.NewLocationConnectionResolver",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewLocationConnectionResolver(locations []resolvers.AdjustedLocation, cursor *string, locationResolver *CachedLocationResolver) gql.LocationConnectionResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewLocationConnectionResolver(locations []resolvers.AdjustedLocation, cursor *string, locationResolver *CachedLocationResolver) gql.LocationConnectionResolver\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#NewQueryResolver",
              "documentation": {
                "identifier": "NewQueryResolver",
                "newPage": false,
                "searchKey": "graphql.NewQueryResolver",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewQueryResolver(resolver resolvers.QueryResolver, locationResolver *CachedLocationResolver) gql.GitBlobLSIFDataResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewQueryResolver(resolver resolvers.QueryResolver, locationResolver *CachedLocationResolver) gql.GitBlobLSIFDataResolver\n```\n\nNewQueryResolver creates a new QueryResolver with the given resolver that defines all code intel-specific behavior. A cached location resolver instance is also given to the query resolver, which should be used to resolve all location-related values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#NewResolver",
              "documentation": {
                "identifier": "NewResolver",
                "newPage": false,
                "searchKey": "graphql.NewResolver",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewResolver(db dbutil.DB, resolver resolvers.Resolver) gql.CodeIntelResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewResolver(db dbutil.DB, resolver resolvers.Resolver) gql.CodeIntelResolver\n```\n\nNewResolver creates a new Resolver with the given resolver that defines all code intel-specific behavior. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#NewUploadConnectionResolver",
              "documentation": {
                "identifier": "NewUploadConnectionResolver",
                "newPage": false,
                "searchKey": "graphql.NewUploadConnectionResolver",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewUploadConnectionResolver(resolver *resolvers.UploadsResolver, prefetcher *Prefetcher, locationResolver *CachedLocationResolver) gql.LSIFUploadConnectionResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewUploadConnectionResolver(resolver *resolvers.UploadsResolver, prefetcher *Prefetcher, locationResolver *CachedLocationResolver) gql.LSIFUploadConnectionResolver\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#NewUploadResolver",
              "documentation": {
                "identifier": "NewUploadResolver",
                "newPage": false,
                "searchKey": "graphql.NewUploadResolver",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewUploadResolver(upload store.Upload, prefetcher *Prefetcher, locationResolver *CachedLocationResolver) gql.LSIFUploadResolver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewUploadResolver(upload store.Upload, prefetcher *Prefetcher, locationResolver *CachedLocationResolver) gql.LSIFUploadResolver\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestCachedLocationResolver",
              "documentation": {
                "identifier": "TestCachedLocationResolver",
                "newPage": false,
                "searchKey": "graphql.TestCachedLocationResolver",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCachedLocationResolver(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCachedLocationResolver(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestCachedLocationResolverUnknownCommit",
              "documentation": {
                "identifier": "TestCachedLocationResolverUnknownCommit",
                "newPage": false,
                "searchKey": "graphql.TestCachedLocationResolverUnknownCommit",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCachedLocationResolverUnknownCommit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCachedLocationResolverUnknownCommit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestCachedLocationResolverUnknownRepository",
              "documentation": {
                "identifier": "TestCachedLocationResolverUnknownRepository",
                "newPage": false,
                "searchKey": "graphql.TestCachedLocationResolverUnknownRepository",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCachedLocationResolverUnknownRepository(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCachedLocationResolverUnknownRepository(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestCursor",
              "documentation": {
                "identifier": "TestCursor",
                "newPage": false,
                "searchKey": "graphql.TestCursor",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCursor(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCursor(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestCursorEmpty",
              "documentation": {
                "identifier": "TestCursorEmpty",
                "newPage": false,
                "searchKey": "graphql.TestCursorEmpty",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCursorEmpty(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCursorEmpty(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestDefinitions",
              "documentation": {
                "identifier": "TestDefinitions",
                "newPage": false,
                "searchKey": "graphql.TestDefinitions",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDefinitions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDefinitions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestDeleteLSIFIndex",
              "documentation": {
                "identifier": "TestDeleteLSIFIndex",
                "newPage": false,
                "searchKey": "graphql.TestDeleteLSIFIndex",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteLSIFIndex(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteLSIFIndex(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestDeleteLSIFIndexUnauthenticated",
              "documentation": {
                "identifier": "TestDeleteLSIFIndexUnauthenticated",
                "newPage": false,
                "searchKey": "graphql.TestDeleteLSIFIndexUnauthenticated",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteLSIFIndexUnauthenticated(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteLSIFIndexUnauthenticated(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestDeleteLSIFUpload",
              "documentation": {
                "identifier": "TestDeleteLSIFUpload",
                "newPage": false,
                "searchKey": "graphql.TestDeleteLSIFUpload",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteLSIFUpload(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteLSIFUpload(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestDeleteLSIFUploadUnauthenticated",
              "documentation": {
                "identifier": "TestDeleteLSIFUploadUnauthenticated",
                "newPage": false,
                "searchKey": "graphql.TestDeleteLSIFUploadUnauthenticated",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteLSIFUploadUnauthenticated(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteLSIFUploadUnauthenticated(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestDerefBool",
              "documentation": {
                "identifier": "TestDerefBool",
                "newPage": false,
                "searchKey": "graphql.TestDerefBool",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDerefBool(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDerefBool(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestDerefInt32",
              "documentation": {
                "identifier": "TestDerefInt32",
                "newPage": false,
                "searchKey": "graphql.TestDerefInt32",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDerefInt32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDerefInt32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestDerefString",
              "documentation": {
                "identifier": "TestDerefString",
                "newPage": false,
                "searchKey": "graphql.TestDerefString",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDerefString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDerefString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestDiagnostics",
              "documentation": {
                "identifier": "TestDiagnostics",
                "newPage": false,
                "searchKey": "graphql.TestDiagnostics",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDiagnostics(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDiagnostics(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestDiagnosticsDefaultIllegalLimit",
              "documentation": {
                "identifier": "TestDiagnosticsDefaultIllegalLimit",
                "newPage": false,
                "searchKey": "graphql.TestDiagnosticsDefaultIllegalLimit",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDiagnosticsDefaultIllegalLimit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDiagnosticsDefaultIllegalLimit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestDiagnosticsDefaultLimit",
              "documentation": {
                "identifier": "TestDiagnosticsDefaultLimit",
                "newPage": false,
                "searchKey": "graphql.TestDiagnosticsDefaultLimit",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDiagnosticsDefaultLimit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDiagnosticsDefaultLimit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestHover",
              "documentation": {
                "identifier": "TestHover",
                "newPage": false,
                "searchKey": "graphql.TestHover",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHover(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHover(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestIndexID",
              "documentation": {
                "identifier": "TestIndexID",
                "newPage": false,
                "searchKey": "graphql.TestIndexID",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIndexID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIndexID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestIntCursor",
              "documentation": {
                "identifier": "TestIntCursor",
                "newPage": false,
                "searchKey": "graphql.TestIntCursor",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIntCursor(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIntCursor(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestIntCursorEmpty",
              "documentation": {
                "identifier": "TestIntCursorEmpty",
                "newPage": false,
                "searchKey": "graphql.TestIntCursorEmpty",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIntCursorEmpty(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIntCursorEmpty(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestMain",
              "documentation": {
                "identifier": "TestMain",
                "newPage": false,
                "searchKey": "graphql.TestMain",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMain(m *testing.M)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMain(m *testing.M)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestMakeGetIndexesOptions",
              "documentation": {
                "identifier": "TestMakeGetIndexesOptions",
                "newPage": false,
                "searchKey": "graphql.TestMakeGetIndexesOptions",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMakeGetIndexesOptions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMakeGetIndexesOptions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestMakeGetIndexesOptionsDefaults",
              "documentation": {
                "identifier": "TestMakeGetIndexesOptionsDefaults",
                "newPage": false,
                "searchKey": "graphql.TestMakeGetIndexesOptionsDefaults",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMakeGetIndexesOptionsDefaults(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMakeGetIndexesOptionsDefaults(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestMakeGetUploadsOptions",
              "documentation": {
                "identifier": "TestMakeGetUploadsOptions",
                "newPage": false,
                "searchKey": "graphql.TestMakeGetUploadsOptions",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMakeGetUploadsOptions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMakeGetUploadsOptions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestMakeGetUploadsOptionsDefaults",
              "documentation": {
                "identifier": "TestMakeGetUploadsOptionsDefaults",
                "newPage": false,
                "searchKey": "graphql.TestMakeGetUploadsOptionsDefaults",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMakeGetUploadsOptionsDefaults(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMakeGetUploadsOptionsDefaults(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestPrefetcherIndexes",
              "documentation": {
                "identifier": "TestPrefetcherIndexes",
                "newPage": false,
                "searchKey": "graphql.TestPrefetcherIndexes",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPrefetcherIndexes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPrefetcherIndexes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestPrefetcherUploads",
              "documentation": {
                "identifier": "TestPrefetcherUploads",
                "newPage": false,
                "searchKey": "graphql.TestPrefetcherUploads",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPrefetcherUploads(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPrefetcherUploads(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestRanges",
              "documentation": {
                "identifier": "TestRanges",
                "newPage": false,
                "searchKey": "graphql.TestRanges",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRanges(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRanges(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestReferences",
              "documentation": {
                "identifier": "TestReferences",
                "newPage": false,
                "searchKey": "graphql.TestReferences",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReferences(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReferences(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestReferencesDefaultIllegalLimit",
              "documentation": {
                "identifier": "TestReferencesDefaultIllegalLimit",
                "newPage": false,
                "searchKey": "graphql.TestReferencesDefaultIllegalLimit",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReferencesDefaultIllegalLimit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReferencesDefaultIllegalLimit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestReferencesDefaultLimit",
              "documentation": {
                "identifier": "TestReferencesDefaultLimit",
                "newPage": false,
                "searchKey": "graphql.TestReferencesDefaultLimit",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReferencesDefaultLimit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReferencesDefaultLimit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestResolveLocations",
              "documentation": {
                "identifier": "TestResolveLocations",
                "newPage": false,
                "searchKey": "graphql.TestResolveLocations",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResolveLocations(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResolveLocations(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestUnmarshalUploadIDString",
              "documentation": {
                "identifier": "TestUnmarshalUploadIDString",
                "newPage": false,
                "searchKey": "graphql.TestUnmarshalUploadIDString",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalUploadIDString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalUploadIDString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#TestUploadID",
              "documentation": {
                "identifier": "TestUploadID",
                "newPage": false,
                "searchKey": "graphql.TestUploadID",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUploadID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUploadID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#boolPtr",
              "documentation": {
                "identifier": "boolPtr",
                "newPage": false,
                "searchKey": "graphql.boolPtr",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func boolPtr(val bool) *bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc boolPtr(val bool) *bool\n```\n\nintPtr creates a pointer to the given value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#convertPosition",
              "documentation": {
                "identifier": "convertPosition",
                "newPage": false,
                "searchKey": "graphql.convertPosition",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func convertPosition(line, character int) lsp.Position"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc convertPosition(line, character int) lsp.Position\n```\n\nconvertPosition creates an LSP position from a line and character pair. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#convertRange",
              "documentation": {
                "identifier": "convertRange",
                "newPage": false,
                "searchKey": "graphql.convertRange",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func convertRange(r lsifstore.Range) lsp.Range"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc convertRange(r lsifstore.Range) lsp.Range\n```\n\nconvertRange creates an LSP range from a bundle range. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#decodeCursor",
              "documentation": {
                "identifier": "decodeCursor",
                "newPage": false,
                "searchKey": "graphql.decodeCursor",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func decodeCursor(val *string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decodeCursor(val *string) (string, error)\n```\n\ndecodeCursor decodes the given cursor value. It is assumed to be a value previously returned from the function encodeCursor. An empty string is returned if no cursor is supplied. Invalid cursors return errors. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#decodeIntCursor",
              "documentation": {
                "identifier": "decodeIntCursor",
                "newPage": false,
                "searchKey": "graphql.decodeIntCursor",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func decodeIntCursor(val *string) (int, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decodeIntCursor(val *string) (int, error)\n```\n\ndecodeIntCursor decodes the given integer cursor value. It is assumed to be a value previously returned from the function encodeIntCursor. The zero value is returned if no cursor is supplied. Invalid cursors return errors. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#derefBool",
              "documentation": {
                "identifier": "derefBool",
                "newPage": false,
                "searchKey": "graphql.derefBool",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func derefBool(val *bool, defaultValue bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc derefBool(val *bool, defaultValue bool) bool\n```\n\nderefBool returns the underlying value in the given pointer. If the pointer is nil, the default value is returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#derefInt32",
              "documentation": {
                "identifier": "derefInt32",
                "newPage": false,
                "searchKey": "graphql.derefInt32",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func derefInt32(val *int32, defaultValue int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc derefInt32(val *int32, defaultValue int) int\n```\n\nderefInt32 returns the underlying value in the given pointer. If the pointer is nil, the default value is returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#derefString",
              "documentation": {
                "identifier": "derefString",
                "newPage": false,
                "searchKey": "graphql.derefString",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func derefString(val *string, defaultValue string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc derefString(val *string, defaultValue string) string\n```\n\nderefString returns the underlying value in the given pointer. If the pointer is nil, the default value is returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#encodeCursor",
              "documentation": {
                "identifier": "encodeCursor",
                "newPage": false,
                "searchKey": "graphql.encodeCursor",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeCursor(val *string) *graphqlutil.PageInfo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeCursor(val *string) *graphqlutil.PageInfo\n```\n\nencodeCursor creates a PageInfo object from the given cursor. If the cursor is not defined, then an object indicating the end of the result set is returned. The cursor is base64 encoded for transfer, and should be decoded using the function decodeCursor. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#encodeIntCursor",
              "documentation": {
                "identifier": "encodeIntCursor",
                "newPage": false,
                "searchKey": "graphql.encodeIntCursor",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeIntCursor(val *int32) *graphqlutil.PageInfo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeIntCursor(val *int32) *graphqlutil.PageInfo\n```\n\nencodeIntCursor creates a PageInfo object from the given new offset value. If the new offset value, then an object indicating the end of the result set is returned. The cursor is base64 encoded for transfer, and should be decoded using the function decodeIntCursor. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#init.resolver_test.go",
              "documentation": {
                "identifier": "init.resolver_test.go",
                "newPage": false,
                "searchKey": "graphql.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#intPtr",
              "documentation": {
                "identifier": "intPtr",
                "newPage": false,
                "searchKey": "graphql.intPtr",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func intPtr(val int32) *int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc intPtr(val int32) *int32\n```\n\nintPtr creates a pointer to the given value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#makeGetIndexesOptions",
              "documentation": {
                "identifier": "makeGetIndexesOptions",
                "newPage": false,
                "searchKey": "graphql.makeGetIndexesOptions",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeGetIndexesOptions(ctx context.Context, args *gql.LSIFRepositoryIndexesQueryArgs) (store.GetIndexesOptions, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeGetIndexesOptions(ctx context.Context, args *gql.LSIFRepositoryIndexesQueryArgs) (store.GetIndexesOptions, error)\n```\n\nmakeGetIndexesOptions translates the given GraphQL arguments into options defined by the store.GetIndexes operations. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#makeGetUploadsOptions",
              "documentation": {
                "identifier": "makeGetUploadsOptions",
                "newPage": false,
                "searchKey": "graphql.makeGetUploadsOptions",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeGetUploadsOptions(ctx context.Context, args *gql.LSIFRepositoryUploadsQueryArgs) (store.GetUploadsOptions, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeGetUploadsOptions(ctx context.Context, args *gql.LSIFRepositoryUploadsQueryArgs) (store.GetUploadsOptions, error)\n```\n\nmakeGetUploadsOptions translates the given GraphQL arguments into options defined by the store.GetUploads operations. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#marshalLSIFIndexGQLID",
              "documentation": {
                "identifier": "marshalLSIFIndexGQLID",
                "newPage": false,
                "searchKey": "graphql.marshalLSIFIndexGQLID",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalLSIFIndexGQLID(indexID int64) graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalLSIFIndexGQLID(indexID int64) graphql.ID\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#marshalLSIFUploadGQLID",
              "documentation": {
                "identifier": "marshalLSIFUploadGQLID",
                "newPage": false,
                "searchKey": "graphql.marshalLSIFUploadGQLID",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalLSIFUploadGQLID(uploadID int64) graphql.ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalLSIFUploadGQLID(uploadID int64) graphql.ID\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#resolveLocation",
              "documentation": {
                "identifier": "resolveLocation",
                "newPage": false,
                "searchKey": "graphql.resolveLocation",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func resolveLocation(ctx context.Context, locationResolver *CachedLocationResolver, location resolvers.AdjustedLocation) (gql.LocationResolver, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc resolveLocation(ctx context.Context, locationResolver *CachedLocationResolver, location resolvers.AdjustedLocation) (gql.LocationResolver, error)\n```\n\nresolveLocation creates a LocationResolver for the given adjusted location. This function may return a nil resolver if the location's commit is not known by gitserver. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#resolveLocations",
              "documentation": {
                "identifier": "resolveLocations",
                "newPage": false,
                "searchKey": "graphql.resolveLocations",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func resolveLocations(ctx context.Context, locationResolver *CachedLocationResolver, locations []resolvers.AdjustedLocation) ([]gql.LocationResolver, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc resolveLocations(ctx context.Context, locationResolver *CachedLocationResolver, locations []resolvers.AdjustedLocation) ([]gql.LocationResolver, error)\n```\n\nresolveLocations creates a slide of LocationResolvers for the given list of adjusted locations. The resulting list may be smaller than the the input list as any locations with a commit not known by gitserver will be skipped. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#resolveRepositoryID",
              "documentation": {
                "identifier": "resolveRepositoryID",
                "newPage": false,
                "searchKey": "graphql.resolveRepositoryID",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func resolveRepositoryID(ctx context.Context, id graphql.ID) (int, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc resolveRepositoryID(ctx context.Context, id graphql.ID) (int, error)\n```\n\nresolveRepositoryByID gets a repository's internal identifier from a GraphQL identifier. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#strPtr",
              "documentation": {
                "identifier": "strPtr",
                "newPage": false,
                "searchKey": "graphql.strPtr",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func strPtr(val string) *string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc strPtr(val string) *string\n```\n\nstrPtr creates a pointer to the given value. If the value is an empty string, a nil pointer is returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#toInt32",
              "documentation": {
                "identifier": "toInt32",
                "newPage": false,
                "searchKey": "graphql.toInt32",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func toInt32(val *int) *int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc toInt32(val *int) *int32\n```\n\ntoInt32 translates the given int pointer into an int32 pointer. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#toSeverity",
              "documentation": {
                "identifier": "toSeverity",
                "newPage": false,
                "searchKey": "graphql.toSeverity",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func toSeverity(val int) (*string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc toSeverity(val int) (*string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#unmarshalLSIFIndexGQLID",
              "documentation": {
                "identifier": "unmarshalLSIFIndexGQLID",
                "newPage": false,
                "searchKey": "graphql.unmarshalLSIFIndexGQLID",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func unmarshalLSIFIndexGQLID(id graphql.ID) (indexID int64, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unmarshalLSIFIndexGQLID(id graphql.ID) (indexID int64, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql#unmarshalLSIFUploadGQLID",
              "documentation": {
                "identifier": "unmarshalLSIFUploadGQLID",
                "newPage": false,
                "searchKey": "graphql.unmarshalLSIFUploadGQLID",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func unmarshalLSIFUploadGQLID(id graphql.ID) (uploadID int64, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unmarshalLSIFUploadGQLID(id graphql.ID) (uploadID int64, err error)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
