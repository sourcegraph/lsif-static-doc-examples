{
  "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers",
  "documentation": {
    "identifier": "resolvers",
    "newPage": true,
    "searchKey": "enterprise/cmd/frontend/internal/codeintel/resolvers",
    "tags": [
      "package",
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package resolvers"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DefinitionsLimit",
              "documentation": {
                "identifier": "DefinitionsLimit",
                "newPage": false,
                "searchKey": "resolvers.DefinitionsLimit",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DefinitionsLimit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DefinitionsLimit = 100\n```\n\nDefinitionsLimit is maximum the number of locations returned from Definitions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#expectedFallbackIndexConfiguration",
              "documentation": {
                "identifier": "expectedFallbackIndexConfiguration",
                "newPage": false,
                "searchKey": "resolvers.expectedFallbackIndexConfiguration",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const expectedFallbackIndexConfiguration"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst expectedFallbackIndexConfiguration = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#hugoDiff",
              "documentation": {
                "identifier": "hugoDiff",
                "newPage": false,
                "searchKey": "resolvers.hugoDiff",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const hugoDiff"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst hugoDiff = ...\n```\n\nhugoDiff is a diff from github.com/gohugoio/hugo generated via the following command. git diff 8947c3fa0beec021e14b3f8040857335e1ecd473 3e9db2ad951dbb1000cd0f8f25e4a95445046679 -- resources/image.go \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#maximumIndexesPerMonikerSearch",
              "documentation": {
                "identifier": "maximumIndexesPerMonikerSearch",
                "newPage": false,
                "searchKey": "resolvers.maximumIndexesPerMonikerSearch",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const maximumIndexesPerMonikerSearch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst maximumIndexesPerMonikerSearch = 50\n```\n\nmaximumIndexesPerMonikerSearch configures the maximum number of reference upload identifiers that can be passed to a single moniker search query. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#monikerLimit",
              "documentation": {
                "identifier": "monikerLimit",
                "newPage": false,
                "searchKey": "resolvers.monikerLimit",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const monikerLimit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst monikerLimit = 10\n```\n\nmonikerLimit is the maximum number of monikers that can be returned from orderedMonikers. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#numAncestors",
              "documentation": {
                "identifier": "numAncestors",
                "newPage": false,
                "searchKey": "resolvers.numAncestors",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const numAncestors"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst numAncestors = 100\n```\n\nnumAncestors is the number of ancestors to query from gitserver when trying to find the closest ancestor we have data for. Setting this value too low (relative to a repository's commit rate) will cause requests for an unknown commit return too few results; setting this value too high will raise the latency of requests for an unknown commit. \n\nTODO(efritz) - make adjustable via site configuration \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#prometheusDiff",
              "documentation": {
                "identifier": "prometheusDiff",
                "newPage": false,
                "searchKey": "resolvers.prometheusDiff",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const prometheusDiff"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst prometheusDiff = ...\n```\n\nprometheusDiff is a diff from github.com/prometheus/prometheus generated via the following command. git diff 52025bd7a9446c3178bf01dd2949d4874dd45f24 45fbed94d6ee17840254e78cfc421ab1db78f734 -- discovery/manager.go \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#slowDefinitionsRequestThreshold",
              "documentation": {
                "identifier": "slowDefinitionsRequestThreshold",
                "newPage": false,
                "searchKey": "resolvers.slowDefinitionsRequestThreshold",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const slowDefinitionsRequestThreshold"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst slowDefinitionsRequestThreshold = time.Second\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#slowDiagnosticsRequestThreshold",
              "documentation": {
                "identifier": "slowDiagnosticsRequestThreshold",
                "newPage": false,
                "searchKey": "resolvers.slowDiagnosticsRequestThreshold",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const slowDiagnosticsRequestThreshold"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst slowDiagnosticsRequestThreshold = time.Second\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#slowDocumentationPageRequestThreshold",
              "documentation": {
                "identifier": "slowDocumentationPageRequestThreshold",
                "newPage": false,
                "searchKey": "resolvers.slowDocumentationPageRequestThreshold",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const slowDocumentationPageRequestThreshold"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst slowDocumentationPageRequestThreshold = time.Second\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#slowHoverRequestThreshold",
              "documentation": {
                "identifier": "slowHoverRequestThreshold",
                "newPage": false,
                "searchKey": "resolvers.slowHoverRequestThreshold",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const slowHoverRequestThreshold"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst slowHoverRequestThreshold = time.Second\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#slowQueryResolverRequestThreshold",
              "documentation": {
                "identifier": "slowQueryResolverRequestThreshold",
                "newPage": false,
                "searchKey": "resolvers.slowQueryResolverRequestThreshold",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const slowQueryResolverRequestThreshold"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst slowQueryResolverRequestThreshold = time.Second\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#slowRangesRequestThreshold",
              "documentation": {
                "identifier": "slowRangesRequestThreshold",
                "newPage": false,
                "searchKey": "resolvers.slowRangesRequestThreshold",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const slowRangesRequestThreshold"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst slowRangesRequestThreshold = time.Second\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#slowReferencesRequestThreshold",
              "documentation": {
                "identifier": "slowReferencesRequestThreshold",
                "newPage": false,
                "searchKey": "resolvers.slowReferencesRequestThreshold",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const slowReferencesRequestThreshold"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst slowReferencesRequestThreshold = time.Second\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#ErrConcurrentModification",
              "documentation": {
                "identifier": "ErrConcurrentModification",
                "newPage": false,
                "searchKey": "resolvers.ErrConcurrentModification",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrConcurrentModification"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrConcurrentModification = errors.New(\"result set changed while paginating\")\n```\n\nErrConcurrentModification occurs when a page of a references request cannot be resolved as the set of visible uploads have changed since the previous request for the same result set. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#hugoTestCases",
              "documentation": {
                "identifier": "hugoTestCases",
                "newPage": false,
                "searchKey": "resolvers.hugoTestCases",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var hugoTestCases"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hugoTestCases = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#prometheusTestCases",
              "documentation": {
                "identifier": "prometheusTestCases",
                "newPage": false,
                "searchKey": "resolvers.prometheusTestCases",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var prometheusTestCases"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar prometheusTestCases = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#testRange1",
              "documentation": {
                "identifier": "testRange1",
                "newPage": false,
                "searchKey": "resolvers.testRange1",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var testRange1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testRange1 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#testRange2",
              "documentation": {
                "identifier": "testRange2",
                "newPage": false,
                "searchKey": "resolvers.testRange2",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var testRange2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testRange2 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#testRange3",
              "documentation": {
                "identifier": "testRange3",
                "newPage": false,
                "searchKey": "resolvers.testRange3",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var testRange3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testRange3 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#testRange4",
              "documentation": {
                "identifier": "testRange4",
                "newPage": false,
                "searchKey": "resolvers.testRange4",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var testRange4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testRange4 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#testRange5",
              "documentation": {
                "identifier": "testRange5",
                "newPage": false,
                "searchKey": "resolvers.testRange5",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var testRange5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testRange5 = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#AdjustedCodeIntelligenceRange",
              "documentation": {
                "identifier": "AdjustedCodeIntelligenceRange",
                "newPage": false,
                "searchKey": "resolvers.AdjustedCodeIntelligenceRange",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AdjustedCodeIntelligenceRange struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AdjustedCodeIntelligenceRange struct {\n\tRange       lsifstore.Range\n\tDefinitions []AdjustedLocation\n\tReferences  []AdjustedLocation\n\tHoverText   string\n}\n```\n\nAdjustedCodeIntelligenceRange stores definition, reference, and hover information for all ranges within a block of lines. The definition and reference locations have been adjusted to fit the target (originally requested) commit. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#AdjustedDiagnostic",
              "documentation": {
                "identifier": "AdjustedDiagnostic",
                "newPage": false,
                "searchKey": "resolvers.AdjustedDiagnostic",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AdjustedDiagnostic struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AdjustedDiagnostic struct {\n\tlsifstore.Diagnostic\n\tDump           store.Dump\n\tAdjustedCommit string\n\tAdjustedRange  lsifstore.Range\n}\n```\n\nAdjustedDiagnostic is a diagnostic from within a particular upload. The adjusted commit denotes the target commit for which the location was adjusted (the originally requested commit). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#AdjustedLocation",
              "documentation": {
                "identifier": "AdjustedLocation",
                "newPage": false,
                "searchKey": "resolvers.AdjustedLocation",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AdjustedLocation struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AdjustedLocation struct {\n\tDump           store.Dump\n\tPath           string\n\tAdjustedCommit string\n\tAdjustedRange  lsifstore.Range\n}\n```\n\nAdjustedLocation is a path and range pair from within a particular upload. The adjusted commit denotes the target commit for which the location was adjusted (the originally requested commit). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#CommitGraphResolver",
              "documentation": {
                "identifier": "CommitGraphResolver",
                "newPage": false,
                "searchKey": "resolvers.CommitGraphResolver",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CommitGraphResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CommitGraphResolver struct {\n\tstale     bool\n\tupdatedAt *time.Time\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewCommitGraphResolver",
                    "documentation": {
                      "identifier": "NewCommitGraphResolver",
                      "newPage": false,
                      "searchKey": "resolvers.NewCommitGraphResolver",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewCommitGraphResolver(stale bool, updatedAt *time.Time) *CommitGraphResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewCommitGraphResolver(stale bool, updatedAt *time.Time) *CommitGraphResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#CommitGraphResolver.Stale",
                    "documentation": {
                      "identifier": "CommitGraphResolver.Stale",
                      "newPage": false,
                      "searchKey": "resolvers.CommitGraphResolver.Stale",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CommitGraphResolver) Stale(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CommitGraphResolver) Stale(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#CommitGraphResolver.UpdatedAt",
                    "documentation": {
                      "identifier": "CommitGraphResolver.UpdatedAt",
                      "newPage": false,
                      "searchKey": "resolvers.CommitGraphResolver.UpdatedAt",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *CommitGraphResolver) UpdatedAt(ctx context.Context) (*graphqlbackend.DateTime, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *CommitGraphResolver) UpdatedAt(ctx context.Context) (*graphqlbackend.DateTime, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStore",
              "documentation": {
                "identifier": "DBStore",
                "newPage": false,
                "searchKey": "resolvers.DBStore",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStore interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStore interface {\n\tgitserver.DBStore\n\n\tGetUploadByID(ctx context.Context, id int) (dbstore.Upload, bool, error)\n\tGetUploadsByIDs(ctx context.Context, ids ...int) ([]dbstore.Upload, error)\n\tGetUploads(ctx context.Context, opts dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)\n\tDeleteUploadByID(ctx context.Context, id int) (bool, error)\n\tGetDumpsByIDs(ctx context.Context, ids []int) ([]dbstore.Dump, error)\n\tFindClosestDumps(ctx context.Context, repositoryID int, commit, path string, rootMustEnclosePath bool, indexer string) ([]dbstore.Dump, error)\n\tFindClosestDumpsFromGraphFragment(ctx context.Context, repositoryID int, commit, path string, rootMustEnclosePath bool, indexer string, graph *gitserver.CommitGraph) ([]dbstore.Dump, error)\n\tDefinitionDumps(ctx context.Context, monikers []semantic.QualifiedMonikerData) (_ []dbstore.Dump, err error)\n\tReferenceIDsAndFilters(ctx context.Context, repositoryID int, commit string, monikers []semantic.QualifiedMonikerData, limit, offset int) (_ dbstore.PackageReferenceScanner, _ int, err error)\n\tHasRepository(ctx context.Context, repositoryID int) (bool, error)\n\tHasCommit(ctx context.Context, repositoryID int, commit string) (bool, error)\n\tMarkRepositoryAsDirty(ctx context.Context, repositoryID int) error\n\tCommitGraphMetadata(ctx context.Context, repositoryID int) (stale bool, updatedAt *time.Time, _ error)\n\tGetIndexByID(ctx context.Context, id int) (dbstore.Index, bool, error)\n\tGetIndexesByIDs(ctx context.Context, ids ...int) ([]dbstore.Index, error)\n\tGetIndexes(ctx context.Context, opts dbstore.GetIndexesOptions) ([]dbstore.Index, int, error)\n\tDeleteIndexByID(ctx context.Context, id int) (bool, error)\n\tGetIndexConfigurationByRepositoryID(ctx context.Context, repositoryID int) (store.IndexConfiguration, bool, error)\n\tUpdateIndexConfigurationByRepositoryID(ctx context.Context, repositoryID int, data []byte) error\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreCommitGraphMetadataFunc",
              "documentation": {
                "identifier": "DBStoreCommitGraphMetadataFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreCommitGraphMetadataFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreCommitGraphMetadataFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreCommitGraphMetadataFunc struct {\n\tdefaultHook func(context.Context, int) (bool, *time.Time, error)\n\thooks       []func(context.Context, int) (bool, *time.Time, error)\n\thistory     []DBStoreCommitGraphMetadataFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreCommitGraphMetadataFunc describes the behavior when the CommitGraphMetadata method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreCommitGraphMetadataFunc.History",
                    "documentation": {
                      "identifier": "DBStoreCommitGraphMetadataFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreCommitGraphMetadataFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreCommitGraphMetadataFunc) History() []DBStoreCommitGraphMetadataFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreCommitGraphMetadataFunc) History() []DBStoreCommitGraphMetadataFuncCall\n```\n\nHistory returns a sequence of DBStoreCommitGraphMetadataFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreCommitGraphMetadataFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreCommitGraphMetadataFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreCommitGraphMetadataFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreCommitGraphMetadataFunc) PushHook(hook func(context.Context, int) (bool, *time.Time, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreCommitGraphMetadataFunc) PushHook(hook func(context.Context, int) (bool, *time.Time, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the CommitGraphMetadata method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreCommitGraphMetadataFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreCommitGraphMetadataFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreCommitGraphMetadataFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreCommitGraphMetadataFunc) PushReturn(r0 bool, r1 *time.Time, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreCommitGraphMetadataFunc) PushReturn(r0 bool, r1 *time.Time, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreCommitGraphMetadataFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreCommitGraphMetadataFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreCommitGraphMetadataFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreCommitGraphMetadataFunc) SetDefaultHook(hook func(context.Context, int) (bool, *time.Time, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreCommitGraphMetadataFunc) SetDefaultHook(hook func(context.Context, int) (bool, *time.Time, error))\n```\n\nSetDefaultHook sets function that is called when the CommitGraphMetadata method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreCommitGraphMetadataFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreCommitGraphMetadataFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreCommitGraphMetadataFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreCommitGraphMetadataFunc) SetDefaultReturn(r0 bool, r1 *time.Time, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreCommitGraphMetadataFunc) SetDefaultReturn(r0 bool, r1 *time.Time, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreCommitGraphMetadataFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreCommitGraphMetadataFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreCommitGraphMetadataFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreCommitGraphMetadataFunc) appendCall(r0 DBStoreCommitGraphMetadataFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreCommitGraphMetadataFunc) appendCall(r0 DBStoreCommitGraphMetadataFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreCommitGraphMetadataFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreCommitGraphMetadataFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreCommitGraphMetadataFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreCommitGraphMetadataFunc) nextHook() func(context.Context, int) (bool, *time.Time, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreCommitGraphMetadataFunc) nextHook() func(context.Context, int) (bool, *time.Time, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreCommitGraphMetadataFuncCall",
              "documentation": {
                "identifier": "DBStoreCommitGraphMetadataFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreCommitGraphMetadataFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreCommitGraphMetadataFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreCommitGraphMetadataFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 bool\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 *time.Time\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nDBStoreCommitGraphMetadataFuncCall is an object that describes an invocation of method CommitGraphMetadata on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreCommitGraphMetadataFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreCommitGraphMetadataFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreCommitGraphMetadataFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreCommitGraphMetadataFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreCommitGraphMetadataFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreCommitGraphMetadataFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreCommitGraphMetadataFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreCommitGraphMetadataFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreCommitGraphMetadataFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreCommitGraphMetadataFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDefinitionDumpsFunc",
              "documentation": {
                "identifier": "DBStoreDefinitionDumpsFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreDefinitionDumpsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDefinitionDumpsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDefinitionDumpsFunc struct {\n\tdefaultHook func(context.Context, []semantic.QualifiedMonikerData) ([]dbstore.Dump, error)\n\thooks       []func(context.Context, []semantic.QualifiedMonikerData) ([]dbstore.Dump, error)\n\thistory     []DBStoreDefinitionDumpsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreDefinitionDumpsFunc describes the behavior when the DefinitionDumps method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDefinitionDumpsFunc.History",
                    "documentation": {
                      "identifier": "DBStoreDefinitionDumpsFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDefinitionDumpsFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDefinitionDumpsFunc) History() []DBStoreDefinitionDumpsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDefinitionDumpsFunc) History() []DBStoreDefinitionDumpsFuncCall\n```\n\nHistory returns a sequence of DBStoreDefinitionDumpsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDefinitionDumpsFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreDefinitionDumpsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDefinitionDumpsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDefinitionDumpsFunc) PushHook(hook func(context.Context, []semantic.QualifiedMonikerData) ([]dbstore.Dump, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDefinitionDumpsFunc) PushHook(hook func(context.Context, []semantic.QualifiedMonikerData) ([]dbstore.Dump, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the DefinitionDumps method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDefinitionDumpsFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreDefinitionDumpsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDefinitionDumpsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDefinitionDumpsFunc) PushReturn(r0 []dbstore.Dump, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDefinitionDumpsFunc) PushReturn(r0 []dbstore.Dump, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDefinitionDumpsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreDefinitionDumpsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDefinitionDumpsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDefinitionDumpsFunc) SetDefaultHook(hook func(context.Context, []semantic.QualifiedMonikerData) ([]dbstore.Dump, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDefinitionDumpsFunc) SetDefaultHook(hook func(context.Context, []semantic.QualifiedMonikerData) ([]dbstore.Dump, error))\n```\n\nSetDefaultHook sets function that is called when the DefinitionDumps method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDefinitionDumpsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreDefinitionDumpsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDefinitionDumpsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDefinitionDumpsFunc) SetDefaultReturn(r0 []dbstore.Dump, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDefinitionDumpsFunc) SetDefaultReturn(r0 []dbstore.Dump, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDefinitionDumpsFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreDefinitionDumpsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDefinitionDumpsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDefinitionDumpsFunc) appendCall(r0 DBStoreDefinitionDumpsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDefinitionDumpsFunc) appendCall(r0 DBStoreDefinitionDumpsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDefinitionDumpsFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreDefinitionDumpsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDefinitionDumpsFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDefinitionDumpsFunc) nextHook() func(context.Context, []semantic.QualifiedMonikerData) ([]dbstore.Dump, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDefinitionDumpsFunc) nextHook() func(context.Context, []semantic.QualifiedMonikerData) ([]dbstore.Dump, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDefinitionDumpsFuncCall",
              "documentation": {
                "identifier": "DBStoreDefinitionDumpsFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreDefinitionDumpsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDefinitionDumpsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDefinitionDumpsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 []semantic.QualifiedMonikerData\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []dbstore.Dump\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreDefinitionDumpsFuncCall is an object that describes an invocation of method DefinitionDumps on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDefinitionDumpsFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreDefinitionDumpsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDefinitionDumpsFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDefinitionDumpsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDefinitionDumpsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDefinitionDumpsFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreDefinitionDumpsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDefinitionDumpsFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDefinitionDumpsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDefinitionDumpsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteIndexByIDFunc",
              "documentation": {
                "identifier": "DBStoreDeleteIndexByIDFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreDeleteIndexByIDFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDeleteIndexByIDFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDeleteIndexByIDFunc struct {\n\tdefaultHook func(context.Context, int) (bool, error)\n\thooks       []func(context.Context, int) (bool, error)\n\thistory     []DBStoreDeleteIndexByIDFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreDeleteIndexByIDFunc describes the behavior when the DeleteIndexByID method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteIndexByIDFunc.History",
                    "documentation": {
                      "identifier": "DBStoreDeleteIndexByIDFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDeleteIndexByIDFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteIndexByIDFunc) History() []DBStoreDeleteIndexByIDFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteIndexByIDFunc) History() []DBStoreDeleteIndexByIDFuncCall\n```\n\nHistory returns a sequence of DBStoreDeleteIndexByIDFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteIndexByIDFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreDeleteIndexByIDFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDeleteIndexByIDFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteIndexByIDFunc) PushHook(hook func(context.Context, int) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteIndexByIDFunc) PushHook(hook func(context.Context, int) (bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the DeleteIndexByID method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteIndexByIDFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreDeleteIndexByIDFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDeleteIndexByIDFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteIndexByIDFunc) PushReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteIndexByIDFunc) PushReturn(r0 bool, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteIndexByIDFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreDeleteIndexByIDFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDeleteIndexByIDFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) (bool, error))\n```\n\nSetDefaultHook sets function that is called when the DeleteIndexByID method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteIndexByIDFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreDeleteIndexByIDFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDeleteIndexByIDFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteIndexByIDFunc) SetDefaultReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteIndexByIDFunc) SetDefaultReturn(r0 bool, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteIndexByIDFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreDeleteIndexByIDFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDeleteIndexByIDFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteIndexByIDFunc) appendCall(r0 DBStoreDeleteIndexByIDFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteIndexByIDFunc) appendCall(r0 DBStoreDeleteIndexByIDFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteIndexByIDFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreDeleteIndexByIDFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDeleteIndexByIDFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteIndexByIDFunc) nextHook() func(context.Context, int) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteIndexByIDFunc) nextHook() func(context.Context, int) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteIndexByIDFuncCall",
              "documentation": {
                "identifier": "DBStoreDeleteIndexByIDFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreDeleteIndexByIDFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDeleteIndexByIDFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDeleteIndexByIDFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 bool\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreDeleteIndexByIDFuncCall is an object that describes an invocation of method DeleteIndexByID on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteIndexByIDFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreDeleteIndexByIDFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDeleteIndexByIDFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDeleteIndexByIDFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDeleteIndexByIDFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteIndexByIDFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreDeleteIndexByIDFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDeleteIndexByIDFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDeleteIndexByIDFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDeleteIndexByIDFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteUploadByIDFunc",
              "documentation": {
                "identifier": "DBStoreDeleteUploadByIDFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreDeleteUploadByIDFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDeleteUploadByIDFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDeleteUploadByIDFunc struct {\n\tdefaultHook func(context.Context, int) (bool, error)\n\thooks       []func(context.Context, int) (bool, error)\n\thistory     []DBStoreDeleteUploadByIDFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreDeleteUploadByIDFunc describes the behavior when the DeleteUploadByID method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteUploadByIDFunc.History",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadByIDFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDeleteUploadByIDFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadByIDFunc) History() []DBStoreDeleteUploadByIDFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadByIDFunc) History() []DBStoreDeleteUploadByIDFuncCall\n```\n\nHistory returns a sequence of DBStoreDeleteUploadByIDFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteUploadByIDFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadByIDFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDeleteUploadByIDFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadByIDFunc) PushHook(hook func(context.Context, int) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadByIDFunc) PushHook(hook func(context.Context, int) (bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the DeleteUploadByID method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteUploadByIDFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadByIDFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDeleteUploadByIDFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadByIDFunc) PushReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadByIDFunc) PushReturn(r0 bool, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteUploadByIDFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadByIDFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDeleteUploadByIDFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) (bool, error))\n```\n\nSetDefaultHook sets function that is called when the DeleteUploadByID method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteUploadByIDFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadByIDFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDeleteUploadByIDFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadByIDFunc) SetDefaultReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadByIDFunc) SetDefaultReturn(r0 bool, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteUploadByIDFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadByIDFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDeleteUploadByIDFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadByIDFunc) appendCall(r0 DBStoreDeleteUploadByIDFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadByIDFunc) appendCall(r0 DBStoreDeleteUploadByIDFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteUploadByIDFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadByIDFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDeleteUploadByIDFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadByIDFunc) nextHook() func(context.Context, int) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadByIDFunc) nextHook() func(context.Context, int) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteUploadByIDFuncCall",
              "documentation": {
                "identifier": "DBStoreDeleteUploadByIDFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreDeleteUploadByIDFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDeleteUploadByIDFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDeleteUploadByIDFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 bool\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreDeleteUploadByIDFuncCall is an object that describes an invocation of method DeleteUploadByID on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteUploadByIDFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadByIDFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDeleteUploadByIDFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDeleteUploadByIDFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDeleteUploadByIDFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreDeleteUploadByIDFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadByIDFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreDeleteUploadByIDFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDeleteUploadByIDFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDeleteUploadByIDFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFromGraphFragmentFunc",
              "documentation": {
                "identifier": "DBStoreFindClosestDumpsFromGraphFragmentFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreFindClosestDumpsFromGraphFragmentFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreFindClosestDumpsFromGraphFragmentFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreFindClosestDumpsFromGraphFragmentFunc struct {\n\tdefaultHook func(context.Context, int, string, string, bool, string, *gitserver.CommitGraph) ([]dbstore.Dump, error)\n\thooks       []func(context.Context, int, string, string, bool, string, *gitserver.CommitGraph) ([]dbstore.Dump, error)\n\thistory     []DBStoreFindClosestDumpsFromGraphFragmentFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreFindClosestDumpsFromGraphFragmentFunc describes the behavior when the FindClosestDumpsFromGraphFragment method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFromGraphFragmentFunc.History",
                    "documentation": {
                      "identifier": "DBStoreFindClosestDumpsFromGraphFragmentFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreFindClosestDumpsFromGraphFragmentFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreFindClosestDumpsFromGraphFragmentFunc) History() []DBStoreFindClosestDumpsFromGraphFragmentFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreFindClosestDumpsFromGraphFragmentFunc) History() []DBStoreFindClosestDumpsFromGraphFragmentFuncCall\n```\n\nHistory returns a sequence of DBStoreFindClosestDumpsFromGraphFragmentFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFromGraphFragmentFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreFindClosestDumpsFromGraphFragmentFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreFindClosestDumpsFromGraphFragmentFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreFindClosestDumpsFromGraphFragmentFunc) PushHook(hook func(context.Context, int, string, string, bool, string, *gitserver.CommitGraph) ([]dbstore.Dump, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreFindClosestDumpsFromGraphFragmentFunc) PushHook(hook func(context.Context, int, string, string, bool, string, *gitserver.CommitGraph) ([]dbstore.Dump, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the FindClosestDumpsFromGraphFragment method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFromGraphFragmentFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreFindClosestDumpsFromGraphFragmentFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreFindClosestDumpsFromGraphFragmentFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreFindClosestDumpsFromGraphFragmentFunc) PushReturn(r0 []dbstore.Dump, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreFindClosestDumpsFromGraphFragmentFunc) PushReturn(r0 []dbstore.Dump, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFromGraphFragmentFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreFindClosestDumpsFromGraphFragmentFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreFindClosestDumpsFromGraphFragmentFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreFindClosestDumpsFromGraphFragmentFunc) SetDefaultHook(hook func(context.Context, int, string, string, bool, string, *gitserver.CommitGraph) ([]dbstore.Dump, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreFindClosestDumpsFromGraphFragmentFunc) SetDefaultHook(hook func(context.Context, int, string, string, bool, string, *gitserver.CommitGraph) ([]dbstore.Dump, error))\n```\n\nSetDefaultHook sets function that is called when the FindClosestDumpsFromGraphFragment method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFromGraphFragmentFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreFindClosestDumpsFromGraphFragmentFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreFindClosestDumpsFromGraphFragmentFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreFindClosestDumpsFromGraphFragmentFunc) SetDefaultReturn(r0 []dbstore.Dump, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreFindClosestDumpsFromGraphFragmentFunc) SetDefaultReturn(r0 []dbstore.Dump, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFromGraphFragmentFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreFindClosestDumpsFromGraphFragmentFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreFindClosestDumpsFromGraphFragmentFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreFindClosestDumpsFromGraphFragmentFunc) appendCall(r0 DBStoreFindClosestDumpsFromGraphFragmentFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreFindClosestDumpsFromGraphFragmentFunc) appendCall(r0 DBStoreFindClosestDumpsFromGraphFragmentFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFromGraphFragmentFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreFindClosestDumpsFromGraphFragmentFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreFindClosestDumpsFromGraphFragmentFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreFindClosestDumpsFromGraphFragmentFunc) nextHook() func(context.Context, int, string, string, bool, string, *gitserver.CommitGraph) ([]dbstore.Dump, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreFindClosestDumpsFromGraphFragmentFunc) nextHook() func(context.Context, int, string, string, bool, string, *gitserver.CommitGraph) ([]dbstore.Dump, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFromGraphFragmentFuncCall",
              "documentation": {
                "identifier": "DBStoreFindClosestDumpsFromGraphFragmentFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreFindClosestDumpsFromGraphFragmentFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreFindClosestDumpsFromGraphFragmentFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreFindClosestDumpsFromGraphFragmentFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 string\n\t// Arg4 is the value of the 5th argument passed to this method\n\t// invocation.\n\tArg4 bool\n\t// Arg5 is the value of the 6th argument passed to this method\n\t// invocation.\n\tArg5 string\n\t// Arg6 is the value of the 7th argument passed to this method\n\t// invocation.\n\tArg6 *gitserver.CommitGraph\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []dbstore.Dump\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreFindClosestDumpsFromGraphFragmentFuncCall is an object that describes an invocation of method FindClosestDumpsFromGraphFragment on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFromGraphFragmentFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreFindClosestDumpsFromGraphFragmentFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreFindClosestDumpsFromGraphFragmentFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreFindClosestDumpsFromGraphFragmentFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreFindClosestDumpsFromGraphFragmentFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFromGraphFragmentFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreFindClosestDumpsFromGraphFragmentFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreFindClosestDumpsFromGraphFragmentFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreFindClosestDumpsFromGraphFragmentFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreFindClosestDumpsFromGraphFragmentFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFunc",
              "documentation": {
                "identifier": "DBStoreFindClosestDumpsFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreFindClosestDumpsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreFindClosestDumpsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreFindClosestDumpsFunc struct {\n\tdefaultHook func(context.Context, int, string, string, bool, string) ([]dbstore.Dump, error)\n\thooks       []func(context.Context, int, string, string, bool, string) ([]dbstore.Dump, error)\n\thistory     []DBStoreFindClosestDumpsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreFindClosestDumpsFunc describes the behavior when the FindClosestDumps method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFunc.History",
                    "documentation": {
                      "identifier": "DBStoreFindClosestDumpsFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreFindClosestDumpsFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreFindClosestDumpsFunc) History() []DBStoreFindClosestDumpsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreFindClosestDumpsFunc) History() []DBStoreFindClosestDumpsFuncCall\n```\n\nHistory returns a sequence of DBStoreFindClosestDumpsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreFindClosestDumpsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreFindClosestDumpsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreFindClosestDumpsFunc) PushHook(hook func(context.Context, int, string, string, bool, string) ([]dbstore.Dump, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreFindClosestDumpsFunc) PushHook(hook func(context.Context, int, string, string, bool, string) ([]dbstore.Dump, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the FindClosestDumps method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreFindClosestDumpsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreFindClosestDumpsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreFindClosestDumpsFunc) PushReturn(r0 []dbstore.Dump, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreFindClosestDumpsFunc) PushReturn(r0 []dbstore.Dump, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreFindClosestDumpsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreFindClosestDumpsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreFindClosestDumpsFunc) SetDefaultHook(hook func(context.Context, int, string, string, bool, string) ([]dbstore.Dump, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreFindClosestDumpsFunc) SetDefaultHook(hook func(context.Context, int, string, string, bool, string) ([]dbstore.Dump, error))\n```\n\nSetDefaultHook sets function that is called when the FindClosestDumps method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreFindClosestDumpsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreFindClosestDumpsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreFindClosestDumpsFunc) SetDefaultReturn(r0 []dbstore.Dump, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreFindClosestDumpsFunc) SetDefaultReturn(r0 []dbstore.Dump, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreFindClosestDumpsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreFindClosestDumpsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreFindClosestDumpsFunc) appendCall(r0 DBStoreFindClosestDumpsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreFindClosestDumpsFunc) appendCall(r0 DBStoreFindClosestDumpsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreFindClosestDumpsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreFindClosestDumpsFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreFindClosestDumpsFunc) nextHook() func(context.Context, int, string, string, bool, string) ([]dbstore.Dump, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreFindClosestDumpsFunc) nextHook() func(context.Context, int, string, string, bool, string) ([]dbstore.Dump, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFuncCall",
              "documentation": {
                "identifier": "DBStoreFindClosestDumpsFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreFindClosestDumpsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreFindClosestDumpsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreFindClosestDumpsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 string\n\t// Arg4 is the value of the 5th argument passed to this method\n\t// invocation.\n\tArg4 bool\n\t// Arg5 is the value of the 6th argument passed to this method\n\t// invocation.\n\tArg5 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []dbstore.Dump\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreFindClosestDumpsFuncCall is an object that describes an invocation of method FindClosestDumps on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreFindClosestDumpsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreFindClosestDumpsFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreFindClosestDumpsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreFindClosestDumpsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreFindClosestDumpsFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreFindClosestDumpsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreFindClosestDumpsFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreFindClosestDumpsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreFindClosestDumpsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetDumpsByIDsFunc",
              "documentation": {
                "identifier": "DBStoreGetDumpsByIDsFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreGetDumpsByIDsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetDumpsByIDsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetDumpsByIDsFunc struct {\n\tdefaultHook func(context.Context, []int) ([]dbstore.Dump, error)\n\thooks       []func(context.Context, []int) ([]dbstore.Dump, error)\n\thistory     []DBStoreGetDumpsByIDsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreGetDumpsByIDsFunc describes the behavior when the GetDumpsByIDs method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetDumpsByIDsFunc.History",
                    "documentation": {
                      "identifier": "DBStoreGetDumpsByIDsFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetDumpsByIDsFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetDumpsByIDsFunc) History() []DBStoreGetDumpsByIDsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetDumpsByIDsFunc) History() []DBStoreGetDumpsByIDsFuncCall\n```\n\nHistory returns a sequence of DBStoreGetDumpsByIDsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetDumpsByIDsFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreGetDumpsByIDsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetDumpsByIDsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetDumpsByIDsFunc) PushHook(hook func(context.Context, []int) ([]dbstore.Dump, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetDumpsByIDsFunc) PushHook(hook func(context.Context, []int) ([]dbstore.Dump, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetDumpsByIDs method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetDumpsByIDsFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreGetDumpsByIDsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetDumpsByIDsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetDumpsByIDsFunc) PushReturn(r0 []dbstore.Dump, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetDumpsByIDsFunc) PushReturn(r0 []dbstore.Dump, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetDumpsByIDsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreGetDumpsByIDsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetDumpsByIDsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetDumpsByIDsFunc) SetDefaultHook(hook func(context.Context, []int) ([]dbstore.Dump, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetDumpsByIDsFunc) SetDefaultHook(hook func(context.Context, []int) ([]dbstore.Dump, error))\n```\n\nSetDefaultHook sets function that is called when the GetDumpsByIDs method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetDumpsByIDsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreGetDumpsByIDsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetDumpsByIDsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetDumpsByIDsFunc) SetDefaultReturn(r0 []dbstore.Dump, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetDumpsByIDsFunc) SetDefaultReturn(r0 []dbstore.Dump, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetDumpsByIDsFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreGetDumpsByIDsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetDumpsByIDsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetDumpsByIDsFunc) appendCall(r0 DBStoreGetDumpsByIDsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetDumpsByIDsFunc) appendCall(r0 DBStoreGetDumpsByIDsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetDumpsByIDsFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreGetDumpsByIDsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetDumpsByIDsFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetDumpsByIDsFunc) nextHook() func(context.Context, []int) ([]dbstore.Dump, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetDumpsByIDsFunc) nextHook() func(context.Context, []int) ([]dbstore.Dump, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetDumpsByIDsFuncCall",
              "documentation": {
                "identifier": "DBStoreGetDumpsByIDsFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreGetDumpsByIDsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetDumpsByIDsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetDumpsByIDsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 []int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []dbstore.Dump\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreGetDumpsByIDsFuncCall is an object that describes an invocation of method GetDumpsByIDs on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetDumpsByIDsFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreGetDumpsByIDsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetDumpsByIDsFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetDumpsByIDsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetDumpsByIDsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetDumpsByIDsFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreGetDumpsByIDsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetDumpsByIDsFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetDumpsByIDsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetDumpsByIDsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexByIDFunc",
              "documentation": {
                "identifier": "DBStoreGetIndexByIDFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreGetIndexByIDFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetIndexByIDFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetIndexByIDFunc struct {\n\tdefaultHook func(context.Context, int) (dbstore.Index, bool, error)\n\thooks       []func(context.Context, int) (dbstore.Index, bool, error)\n\thistory     []DBStoreGetIndexByIDFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreGetIndexByIDFunc describes the behavior when the GetIndexByID method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexByIDFunc.History",
                    "documentation": {
                      "identifier": "DBStoreGetIndexByIDFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexByIDFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexByIDFunc) History() []DBStoreGetIndexByIDFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexByIDFunc) History() []DBStoreGetIndexByIDFuncCall\n```\n\nHistory returns a sequence of DBStoreGetIndexByIDFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexByIDFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreGetIndexByIDFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexByIDFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexByIDFunc) PushHook(hook func(context.Context, int) (dbstore.Index, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexByIDFunc) PushHook(hook func(context.Context, int) (dbstore.Index, bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetIndexByID method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexByIDFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreGetIndexByIDFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexByIDFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexByIDFunc) PushReturn(r0 dbstore.Index, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexByIDFunc) PushReturn(r0 dbstore.Index, r1 bool, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexByIDFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreGetIndexByIDFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexByIDFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.Index, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.Index, bool, error))\n```\n\nSetDefaultHook sets function that is called when the GetIndexByID method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexByIDFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreGetIndexByIDFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexByIDFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexByIDFunc) SetDefaultReturn(r0 dbstore.Index, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexByIDFunc) SetDefaultReturn(r0 dbstore.Index, r1 bool, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexByIDFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreGetIndexByIDFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexByIDFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexByIDFunc) appendCall(r0 DBStoreGetIndexByIDFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexByIDFunc) appendCall(r0 DBStoreGetIndexByIDFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexByIDFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreGetIndexByIDFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexByIDFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexByIDFunc) nextHook() func(context.Context, int) (dbstore.Index, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexByIDFunc) nextHook() func(context.Context, int) (dbstore.Index, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexByIDFuncCall",
              "documentation": {
                "identifier": "DBStoreGetIndexByIDFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreGetIndexByIDFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetIndexByIDFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetIndexByIDFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 dbstore.Index\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 bool\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nDBStoreGetIndexByIDFuncCall is an object that describes an invocation of method GetIndexByID on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexByIDFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreGetIndexByIDFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexByIDFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetIndexByIDFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetIndexByIDFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexByIDFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreGetIndexByIDFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexByIDFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetIndexByIDFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetIndexByIDFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexConfigurationByRepositoryIDFunc",
              "documentation": {
                "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreGetIndexConfigurationByRepositoryIDFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetIndexConfigurationByRepositoryIDFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetIndexConfigurationByRepositoryIDFunc struct {\n\tdefaultHook func(context.Context, int) (dbstore.IndexConfiguration, bool, error)\n\thooks       []func(context.Context, int) (dbstore.IndexConfiguration, bool, error)\n\thistory     []DBStoreGetIndexConfigurationByRepositoryIDFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreGetIndexConfigurationByRepositoryIDFunc describes the behavior when the GetIndexConfigurationByRepositoryID method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexConfigurationByRepositoryIDFunc.History",
                    "documentation": {
                      "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexConfigurationByRepositoryIDFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) History() []DBStoreGetIndexConfigurationByRepositoryIDFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) History() []DBStoreGetIndexConfigurationByRepositoryIDFuncCall\n```\n\nHistory returns a sequence of DBStoreGetIndexConfigurationByRepositoryIDFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexConfigurationByRepositoryIDFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexConfigurationByRepositoryIDFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) PushHook(hook func(context.Context, int) (dbstore.IndexConfiguration, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) PushHook(hook func(context.Context, int) (dbstore.IndexConfiguration, bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetIndexConfigurationByRepositoryID method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexConfigurationByRepositoryIDFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexConfigurationByRepositoryIDFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) PushReturn(r0 dbstore.IndexConfiguration, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) PushReturn(r0 dbstore.IndexConfiguration, r1 bool, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexConfigurationByRepositoryIDFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexConfigurationByRepositoryIDFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.IndexConfiguration, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.IndexConfiguration, bool, error))\n```\n\nSetDefaultHook sets function that is called when the GetIndexConfigurationByRepositoryID method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexConfigurationByRepositoryIDFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexConfigurationByRepositoryIDFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) SetDefaultReturn(r0 dbstore.IndexConfiguration, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) SetDefaultReturn(r0 dbstore.IndexConfiguration, r1 bool, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexConfigurationByRepositoryIDFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexConfigurationByRepositoryIDFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) appendCall(r0 DBStoreGetIndexConfigurationByRepositoryIDFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) appendCall(r0 DBStoreGetIndexConfigurationByRepositoryIDFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexConfigurationByRepositoryIDFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexConfigurationByRepositoryIDFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) nextHook() func(context.Context, int) (dbstore.IndexConfiguration, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexConfigurationByRepositoryIDFunc) nextHook() func(context.Context, int) (dbstore.IndexConfiguration, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexConfigurationByRepositoryIDFuncCall",
              "documentation": {
                "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreGetIndexConfigurationByRepositoryIDFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetIndexConfigurationByRepositoryIDFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetIndexConfigurationByRepositoryIDFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 dbstore.IndexConfiguration\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 bool\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nDBStoreGetIndexConfigurationByRepositoryIDFuncCall is an object that describes an invocation of method GetIndexConfigurationByRepositoryID on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexConfigurationByRepositoryIDFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexConfigurationByRepositoryIDFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetIndexConfigurationByRepositoryIDFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetIndexConfigurationByRepositoryIDFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexConfigurationByRepositoryIDFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreGetIndexConfigurationByRepositoryIDFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexConfigurationByRepositoryIDFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetIndexConfigurationByRepositoryIDFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetIndexConfigurationByRepositoryIDFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesByIDsFunc",
              "documentation": {
                "identifier": "DBStoreGetIndexesByIDsFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreGetIndexesByIDsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetIndexesByIDsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetIndexesByIDsFunc struct {\n\tdefaultHook func(context.Context, ...int) ([]dbstore.Index, error)\n\thooks       []func(context.Context, ...int) ([]dbstore.Index, error)\n\thistory     []DBStoreGetIndexesByIDsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreGetIndexesByIDsFunc describes the behavior when the GetIndexesByIDs method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesByIDsFunc.History",
                    "documentation": {
                      "identifier": "DBStoreGetIndexesByIDsFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexesByIDsFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexesByIDsFunc) History() []DBStoreGetIndexesByIDsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexesByIDsFunc) History() []DBStoreGetIndexesByIDsFuncCall\n```\n\nHistory returns a sequence of DBStoreGetIndexesByIDsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesByIDsFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreGetIndexesByIDsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexesByIDsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexesByIDsFunc) PushHook(hook func(context.Context, ...int) ([]dbstore.Index, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexesByIDsFunc) PushHook(hook func(context.Context, ...int) ([]dbstore.Index, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetIndexesByIDs method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesByIDsFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreGetIndexesByIDsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexesByIDsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexesByIDsFunc) PushReturn(r0 []dbstore.Index, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexesByIDsFunc) PushReturn(r0 []dbstore.Index, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesByIDsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreGetIndexesByIDsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexesByIDsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexesByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]dbstore.Index, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexesByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]dbstore.Index, error))\n```\n\nSetDefaultHook sets function that is called when the GetIndexesByIDs method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesByIDsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreGetIndexesByIDsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexesByIDsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexesByIDsFunc) SetDefaultReturn(r0 []dbstore.Index, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexesByIDsFunc) SetDefaultReturn(r0 []dbstore.Index, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesByIDsFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreGetIndexesByIDsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexesByIDsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexesByIDsFunc) appendCall(r0 DBStoreGetIndexesByIDsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexesByIDsFunc) appendCall(r0 DBStoreGetIndexesByIDsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesByIDsFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreGetIndexesByIDsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexesByIDsFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexesByIDsFunc) nextHook() func(context.Context, ...int) ([]dbstore.Index, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexesByIDsFunc) nextHook() func(context.Context, ...int) ([]dbstore.Index, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesByIDsFuncCall",
              "documentation": {
                "identifier": "DBStoreGetIndexesByIDsFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreGetIndexesByIDsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetIndexesByIDsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetIndexesByIDsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is a slice containing the values of the variadic arguments\n\t// passed to this method invocation.\n\tArg1 []int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []dbstore.Index\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreGetIndexesByIDsFuncCall is an object that describes an invocation of method GetIndexesByIDs on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesByIDsFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreGetIndexesByIDsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexesByIDsFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetIndexesByIDsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetIndexesByIDsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. The variadic slice argument is flattened in this array such that one positional argument and three variadic arguments would result in a slice of four, not two. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesByIDsFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreGetIndexesByIDsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexesByIDsFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetIndexesByIDsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetIndexesByIDsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesFunc",
              "documentation": {
                "identifier": "DBStoreGetIndexesFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreGetIndexesFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetIndexesFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetIndexesFunc struct {\n\tdefaultHook func(context.Context, dbstore.GetIndexesOptions) ([]dbstore.Index, int, error)\n\thooks       []func(context.Context, dbstore.GetIndexesOptions) ([]dbstore.Index, int, error)\n\thistory     []DBStoreGetIndexesFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreGetIndexesFunc describes the behavior when the GetIndexes method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesFunc.History",
                    "documentation": {
                      "identifier": "DBStoreGetIndexesFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexesFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexesFunc) History() []DBStoreGetIndexesFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexesFunc) History() []DBStoreGetIndexesFuncCall\n```\n\nHistory returns a sequence of DBStoreGetIndexesFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreGetIndexesFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexesFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexesFunc) PushHook(hook func(context.Context, dbstore.GetIndexesOptions) ([]dbstore.Index, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexesFunc) PushHook(hook func(context.Context, dbstore.GetIndexesOptions) ([]dbstore.Index, int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetIndexes method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreGetIndexesFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexesFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexesFunc) PushReturn(r0 []dbstore.Index, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexesFunc) PushReturn(r0 []dbstore.Index, r1 int, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreGetIndexesFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexesFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexesFunc) SetDefaultHook(hook func(context.Context, dbstore.GetIndexesOptions) ([]dbstore.Index, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexesFunc) SetDefaultHook(hook func(context.Context, dbstore.GetIndexesOptions) ([]dbstore.Index, int, error))\n```\n\nSetDefaultHook sets function that is called when the GetIndexes method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreGetIndexesFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexesFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexesFunc) SetDefaultReturn(r0 []dbstore.Index, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexesFunc) SetDefaultReturn(r0 []dbstore.Index, r1 int, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreGetIndexesFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexesFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexesFunc) appendCall(r0 DBStoreGetIndexesFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexesFunc) appendCall(r0 DBStoreGetIndexesFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreGetIndexesFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexesFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetIndexesFunc) nextHook() func(context.Context, dbstore.GetIndexesOptions) ([]dbstore.Index, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetIndexesFunc) nextHook() func(context.Context, dbstore.GetIndexesOptions) ([]dbstore.Index, int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesFuncCall",
              "documentation": {
                "identifier": "DBStoreGetIndexesFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreGetIndexesFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetIndexesFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetIndexesFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 dbstore.GetIndexesOptions\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []dbstore.Index\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 int\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nDBStoreGetIndexesFuncCall is an object that describes an invocation of method GetIndexes on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreGetIndexesFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexesFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetIndexesFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetIndexesFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetIndexesFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreGetIndexesFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetIndexesFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetIndexesFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetIndexesFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadByIDFunc",
              "documentation": {
                "identifier": "DBStoreGetUploadByIDFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreGetUploadByIDFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetUploadByIDFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetUploadByIDFunc struct {\n\tdefaultHook func(context.Context, int) (dbstore.Upload, bool, error)\n\thooks       []func(context.Context, int) (dbstore.Upload, bool, error)\n\thistory     []DBStoreGetUploadByIDFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreGetUploadByIDFunc describes the behavior when the GetUploadByID method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadByIDFunc.History",
                    "documentation": {
                      "identifier": "DBStoreGetUploadByIDFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadByIDFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadByIDFunc) History() []DBStoreGetUploadByIDFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadByIDFunc) History() []DBStoreGetUploadByIDFuncCall\n```\n\nHistory returns a sequence of DBStoreGetUploadByIDFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadByIDFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreGetUploadByIDFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadByIDFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadByIDFunc) PushHook(hook func(context.Context, int) (dbstore.Upload, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadByIDFunc) PushHook(hook func(context.Context, int) (dbstore.Upload, bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetUploadByID method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadByIDFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreGetUploadByIDFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadByIDFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadByIDFunc) PushReturn(r0 dbstore.Upload, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadByIDFunc) PushReturn(r0 dbstore.Upload, r1 bool, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadByIDFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreGetUploadByIDFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadByIDFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.Upload, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.Upload, bool, error))\n```\n\nSetDefaultHook sets function that is called when the GetUploadByID method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadByIDFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreGetUploadByIDFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadByIDFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadByIDFunc) SetDefaultReturn(r0 dbstore.Upload, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadByIDFunc) SetDefaultReturn(r0 dbstore.Upload, r1 bool, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadByIDFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreGetUploadByIDFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadByIDFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadByIDFunc) appendCall(r0 DBStoreGetUploadByIDFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadByIDFunc) appendCall(r0 DBStoreGetUploadByIDFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadByIDFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreGetUploadByIDFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadByIDFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadByIDFunc) nextHook() func(context.Context, int) (dbstore.Upload, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadByIDFunc) nextHook() func(context.Context, int) (dbstore.Upload, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadByIDFuncCall",
              "documentation": {
                "identifier": "DBStoreGetUploadByIDFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreGetUploadByIDFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetUploadByIDFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetUploadByIDFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 dbstore.Upload\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 bool\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nDBStoreGetUploadByIDFuncCall is an object that describes an invocation of method GetUploadByID on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadByIDFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreGetUploadByIDFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadByIDFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetUploadByIDFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetUploadByIDFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadByIDFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreGetUploadByIDFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadByIDFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetUploadByIDFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetUploadByIDFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsByIDsFunc",
              "documentation": {
                "identifier": "DBStoreGetUploadsByIDsFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreGetUploadsByIDsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetUploadsByIDsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetUploadsByIDsFunc struct {\n\tdefaultHook func(context.Context, ...int) ([]dbstore.Upload, error)\n\thooks       []func(context.Context, ...int) ([]dbstore.Upload, error)\n\thistory     []DBStoreGetUploadsByIDsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreGetUploadsByIDsFunc describes the behavior when the GetUploadsByIDs method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsByIDsFunc.History",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsByIDsFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadsByIDsFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsByIDsFunc) History() []DBStoreGetUploadsByIDsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsByIDsFunc) History() []DBStoreGetUploadsByIDsFuncCall\n```\n\nHistory returns a sequence of DBStoreGetUploadsByIDsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsByIDsFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsByIDsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadsByIDsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsByIDsFunc) PushHook(hook func(context.Context, ...int) ([]dbstore.Upload, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsByIDsFunc) PushHook(hook func(context.Context, ...int) ([]dbstore.Upload, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetUploadsByIDs method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsByIDsFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsByIDsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadsByIDsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsByIDsFunc) PushReturn(r0 []dbstore.Upload, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsByIDsFunc) PushReturn(r0 []dbstore.Upload, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsByIDsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsByIDsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadsByIDsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]dbstore.Upload, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]dbstore.Upload, error))\n```\n\nSetDefaultHook sets function that is called when the GetUploadsByIDs method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsByIDsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsByIDsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadsByIDsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsByIDsFunc) SetDefaultReturn(r0 []dbstore.Upload, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsByIDsFunc) SetDefaultReturn(r0 []dbstore.Upload, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsByIDsFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsByIDsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadsByIDsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsByIDsFunc) appendCall(r0 DBStoreGetUploadsByIDsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsByIDsFunc) appendCall(r0 DBStoreGetUploadsByIDsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsByIDsFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsByIDsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadsByIDsFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsByIDsFunc) nextHook() func(context.Context, ...int) ([]dbstore.Upload, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsByIDsFunc) nextHook() func(context.Context, ...int) ([]dbstore.Upload, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsByIDsFuncCall",
              "documentation": {
                "identifier": "DBStoreGetUploadsByIDsFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreGetUploadsByIDsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetUploadsByIDsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetUploadsByIDsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is a slice containing the values of the variadic arguments\n\t// passed to this method invocation.\n\tArg1 []int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []dbstore.Upload\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreGetUploadsByIDsFuncCall is an object that describes an invocation of method GetUploadsByIDs on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsByIDsFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsByIDsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadsByIDsFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetUploadsByIDsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetUploadsByIDsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. The variadic slice argument is flattened in this array such that one positional argument and three variadic arguments would result in a slice of four, not two. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsByIDsFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsByIDsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadsByIDsFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetUploadsByIDsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetUploadsByIDsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsFunc",
              "documentation": {
                "identifier": "DBStoreGetUploadsFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreGetUploadsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetUploadsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetUploadsFunc struct {\n\tdefaultHook func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)\n\thooks       []func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)\n\thistory     []DBStoreGetUploadsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreGetUploadsFunc describes the behavior when the GetUploads method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsFunc.History",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadsFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) History() []DBStoreGetUploadsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) History() []DBStoreGetUploadsFuncCall\n```\n\nHistory returns a sequence of DBStoreGetUploadsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) PushHook(hook func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) PushHook(hook func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetUploads method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) PushReturn(r0 []dbstore.Upload, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) PushReturn(r0 []dbstore.Upload, r1 int, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) SetDefaultHook(hook func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) SetDefaultHook(hook func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error))\n```\n\nSetDefaultHook sets function that is called when the GetUploads method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) SetDefaultReturn(r0 []dbstore.Upload, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) SetDefaultReturn(r0 []dbstore.Upload, r1 int, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) appendCall(r0 DBStoreGetUploadsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) appendCall(r0 DBStoreGetUploadsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadsFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) nextHook() func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) nextHook() func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsFuncCall",
              "documentation": {
                "identifier": "DBStoreGetUploadsFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreGetUploadsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetUploadsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetUploadsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 dbstore.GetUploadsOptions\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []dbstore.Upload\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 int\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nDBStoreGetUploadsFuncCall is an object that describes an invocation of method GetUploads on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadsFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetUploadsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetUploadsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreGetUploadsFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreGetUploadsFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetUploadsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetUploadsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasCommitFunc",
              "documentation": {
                "identifier": "DBStoreHasCommitFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreHasCommitFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreHasCommitFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreHasCommitFunc struct {\n\tdefaultHook func(context.Context, int, string) (bool, error)\n\thooks       []func(context.Context, int, string) (bool, error)\n\thistory     []DBStoreHasCommitFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreHasCommitFunc describes the behavior when the HasCommit method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasCommitFunc.History",
                    "documentation": {
                      "identifier": "DBStoreHasCommitFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreHasCommitFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHasCommitFunc) History() []DBStoreHasCommitFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHasCommitFunc) History() []DBStoreHasCommitFuncCall\n```\n\nHistory returns a sequence of DBStoreHasCommitFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasCommitFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreHasCommitFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreHasCommitFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHasCommitFunc) PushHook(hook func(context.Context, int, string) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHasCommitFunc) PushHook(hook func(context.Context, int, string) (bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the HasCommit method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasCommitFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreHasCommitFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreHasCommitFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHasCommitFunc) PushReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHasCommitFunc) PushReturn(r0 bool, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasCommitFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreHasCommitFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreHasCommitFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHasCommitFunc) SetDefaultHook(hook func(context.Context, int, string) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHasCommitFunc) SetDefaultHook(hook func(context.Context, int, string) (bool, error))\n```\n\nSetDefaultHook sets function that is called when the HasCommit method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasCommitFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreHasCommitFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreHasCommitFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHasCommitFunc) SetDefaultReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHasCommitFunc) SetDefaultReturn(r0 bool, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasCommitFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreHasCommitFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreHasCommitFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHasCommitFunc) appendCall(r0 DBStoreHasCommitFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHasCommitFunc) appendCall(r0 DBStoreHasCommitFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasCommitFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreHasCommitFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreHasCommitFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHasCommitFunc) nextHook() func(context.Context, int, string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHasCommitFunc) nextHook() func(context.Context, int, string) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasCommitFuncCall",
              "documentation": {
                "identifier": "DBStoreHasCommitFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreHasCommitFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreHasCommitFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreHasCommitFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 bool\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreHasCommitFuncCall is an object that describes an invocation of method HasCommit on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasCommitFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreHasCommitFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreHasCommitFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreHasCommitFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreHasCommitFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasCommitFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreHasCommitFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreHasCommitFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreHasCommitFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreHasCommitFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasRepositoryFunc",
              "documentation": {
                "identifier": "DBStoreHasRepositoryFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreHasRepositoryFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreHasRepositoryFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreHasRepositoryFunc struct {\n\tdefaultHook func(context.Context, int) (bool, error)\n\thooks       []func(context.Context, int) (bool, error)\n\thistory     []DBStoreHasRepositoryFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreHasRepositoryFunc describes the behavior when the HasRepository method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasRepositoryFunc.History",
                    "documentation": {
                      "identifier": "DBStoreHasRepositoryFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreHasRepositoryFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHasRepositoryFunc) History() []DBStoreHasRepositoryFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHasRepositoryFunc) History() []DBStoreHasRepositoryFuncCall\n```\n\nHistory returns a sequence of DBStoreHasRepositoryFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasRepositoryFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreHasRepositoryFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreHasRepositoryFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHasRepositoryFunc) PushHook(hook func(context.Context, int) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHasRepositoryFunc) PushHook(hook func(context.Context, int) (bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the HasRepository method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasRepositoryFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreHasRepositoryFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreHasRepositoryFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHasRepositoryFunc) PushReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHasRepositoryFunc) PushReturn(r0 bool, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasRepositoryFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreHasRepositoryFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreHasRepositoryFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHasRepositoryFunc) SetDefaultHook(hook func(context.Context, int) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHasRepositoryFunc) SetDefaultHook(hook func(context.Context, int) (bool, error))\n```\n\nSetDefaultHook sets function that is called when the HasRepository method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasRepositoryFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreHasRepositoryFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreHasRepositoryFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHasRepositoryFunc) SetDefaultReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHasRepositoryFunc) SetDefaultReturn(r0 bool, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasRepositoryFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreHasRepositoryFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreHasRepositoryFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHasRepositoryFunc) appendCall(r0 DBStoreHasRepositoryFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHasRepositoryFunc) appendCall(r0 DBStoreHasRepositoryFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasRepositoryFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreHasRepositoryFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreHasRepositoryFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHasRepositoryFunc) nextHook() func(context.Context, int) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHasRepositoryFunc) nextHook() func(context.Context, int) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasRepositoryFuncCall",
              "documentation": {
                "identifier": "DBStoreHasRepositoryFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreHasRepositoryFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreHasRepositoryFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreHasRepositoryFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 bool\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreHasRepositoryFuncCall is an object that describes an invocation of method HasRepository on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasRepositoryFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreHasRepositoryFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreHasRepositoryFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreHasRepositoryFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreHasRepositoryFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreHasRepositoryFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreHasRepositoryFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreHasRepositoryFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreHasRepositoryFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreHasRepositoryFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreMarkRepositoryAsDirtyFunc",
              "documentation": {
                "identifier": "DBStoreMarkRepositoryAsDirtyFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreMarkRepositoryAsDirtyFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreMarkRepositoryAsDirtyFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreMarkRepositoryAsDirtyFunc struct {\n\tdefaultHook func(context.Context, int) error\n\thooks       []func(context.Context, int) error\n\thistory     []DBStoreMarkRepositoryAsDirtyFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreMarkRepositoryAsDirtyFunc describes the behavior when the MarkRepositoryAsDirty method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreMarkRepositoryAsDirtyFunc.History",
                    "documentation": {
                      "identifier": "DBStoreMarkRepositoryAsDirtyFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreMarkRepositoryAsDirtyFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreMarkRepositoryAsDirtyFunc) History() []DBStoreMarkRepositoryAsDirtyFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreMarkRepositoryAsDirtyFunc) History() []DBStoreMarkRepositoryAsDirtyFuncCall\n```\n\nHistory returns a sequence of DBStoreMarkRepositoryAsDirtyFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreMarkRepositoryAsDirtyFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreMarkRepositoryAsDirtyFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreMarkRepositoryAsDirtyFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreMarkRepositoryAsDirtyFunc) PushHook(hook func(context.Context, int) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreMarkRepositoryAsDirtyFunc) PushHook(hook func(context.Context, int) error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the MarkRepositoryAsDirty method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreMarkRepositoryAsDirtyFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreMarkRepositoryAsDirtyFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreMarkRepositoryAsDirtyFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreMarkRepositoryAsDirtyFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreMarkRepositoryAsDirtyFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreMarkRepositoryAsDirtyFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreMarkRepositoryAsDirtyFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreMarkRepositoryAsDirtyFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreMarkRepositoryAsDirtyFunc) SetDefaultHook(hook func(context.Context, int) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreMarkRepositoryAsDirtyFunc) SetDefaultHook(hook func(context.Context, int) error)\n```\n\nSetDefaultHook sets function that is called when the MarkRepositoryAsDirty method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreMarkRepositoryAsDirtyFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreMarkRepositoryAsDirtyFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreMarkRepositoryAsDirtyFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreMarkRepositoryAsDirtyFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreMarkRepositoryAsDirtyFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreMarkRepositoryAsDirtyFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreMarkRepositoryAsDirtyFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreMarkRepositoryAsDirtyFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreMarkRepositoryAsDirtyFunc) appendCall(r0 DBStoreMarkRepositoryAsDirtyFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreMarkRepositoryAsDirtyFunc) appendCall(r0 DBStoreMarkRepositoryAsDirtyFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreMarkRepositoryAsDirtyFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreMarkRepositoryAsDirtyFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreMarkRepositoryAsDirtyFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreMarkRepositoryAsDirtyFunc) nextHook() func(context.Context, int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreMarkRepositoryAsDirtyFunc) nextHook() func(context.Context, int) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreMarkRepositoryAsDirtyFuncCall",
              "documentation": {
                "identifier": "DBStoreMarkRepositoryAsDirtyFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreMarkRepositoryAsDirtyFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreMarkRepositoryAsDirtyFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreMarkRepositoryAsDirtyFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nDBStoreMarkRepositoryAsDirtyFuncCall is an object that describes an invocation of method MarkRepositoryAsDirty on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreMarkRepositoryAsDirtyFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreMarkRepositoryAsDirtyFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreMarkRepositoryAsDirtyFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreMarkRepositoryAsDirtyFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreMarkRepositoryAsDirtyFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreMarkRepositoryAsDirtyFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreMarkRepositoryAsDirtyFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreMarkRepositoryAsDirtyFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreMarkRepositoryAsDirtyFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreMarkRepositoryAsDirtyFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreReferenceIDsAndFiltersFunc",
              "documentation": {
                "identifier": "DBStoreReferenceIDsAndFiltersFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreReferenceIDsAndFiltersFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreReferenceIDsAndFiltersFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreReferenceIDsAndFiltersFunc struct {\n\tdefaultHook func(context.Context, int, string, []semantic.QualifiedMonikerData, int, int) (dbstore.PackageReferenceScanner, int, error)\n\thooks       []func(context.Context, int, string, []semantic.QualifiedMonikerData, int, int) (dbstore.PackageReferenceScanner, int, error)\n\thistory     []DBStoreReferenceIDsAndFiltersFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreReferenceIDsAndFiltersFunc describes the behavior when the ReferenceIDsAndFilters method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreReferenceIDsAndFiltersFunc.History",
                    "documentation": {
                      "identifier": "DBStoreReferenceIDsAndFiltersFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreReferenceIDsAndFiltersFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreReferenceIDsAndFiltersFunc) History() []DBStoreReferenceIDsAndFiltersFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreReferenceIDsAndFiltersFunc) History() []DBStoreReferenceIDsAndFiltersFuncCall\n```\n\nHistory returns a sequence of DBStoreReferenceIDsAndFiltersFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreReferenceIDsAndFiltersFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreReferenceIDsAndFiltersFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreReferenceIDsAndFiltersFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreReferenceIDsAndFiltersFunc) PushHook(hook func(context.Context, int, string, []semantic.QualifiedMonikerData, int, int) (dbstore.PackageReferenceScanner, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreReferenceIDsAndFiltersFunc) PushHook(hook func(context.Context, int, string, []semantic.QualifiedMonikerData, int, int) (dbstore.PackageReferenceScanner, int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the ReferenceIDsAndFilters method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreReferenceIDsAndFiltersFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreReferenceIDsAndFiltersFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreReferenceIDsAndFiltersFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreReferenceIDsAndFiltersFunc) PushReturn(r0 dbstore.PackageReferenceScanner, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreReferenceIDsAndFiltersFunc) PushReturn(r0 dbstore.PackageReferenceScanner, r1 int, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreReferenceIDsAndFiltersFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreReferenceIDsAndFiltersFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreReferenceIDsAndFiltersFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreReferenceIDsAndFiltersFunc) SetDefaultHook(hook func(context.Context, int, string, []semantic.QualifiedMonikerData, int, int) (dbstore.PackageReferenceScanner, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreReferenceIDsAndFiltersFunc) SetDefaultHook(hook func(context.Context, int, string, []semantic.QualifiedMonikerData, int, int) (dbstore.PackageReferenceScanner, int, error))\n```\n\nSetDefaultHook sets function that is called when the ReferenceIDsAndFilters method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreReferenceIDsAndFiltersFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreReferenceIDsAndFiltersFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreReferenceIDsAndFiltersFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreReferenceIDsAndFiltersFunc) SetDefaultReturn(r0 dbstore.PackageReferenceScanner, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreReferenceIDsAndFiltersFunc) SetDefaultReturn(r0 dbstore.PackageReferenceScanner, r1 int, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreReferenceIDsAndFiltersFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreReferenceIDsAndFiltersFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreReferenceIDsAndFiltersFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreReferenceIDsAndFiltersFunc) appendCall(r0 DBStoreReferenceIDsAndFiltersFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreReferenceIDsAndFiltersFunc) appendCall(r0 DBStoreReferenceIDsAndFiltersFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreReferenceIDsAndFiltersFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreReferenceIDsAndFiltersFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreReferenceIDsAndFiltersFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreReferenceIDsAndFiltersFunc) nextHook() func(context.Context, int, string, []semantic.QualifiedMonikerData, int, int) (dbstore.PackageReferenceScanner, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreReferenceIDsAndFiltersFunc) nextHook() func(context.Context, int, string, []semantic.QualifiedMonikerData, int, int) (dbstore.PackageReferenceScanner, int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreReferenceIDsAndFiltersFuncCall",
              "documentation": {
                "identifier": "DBStoreReferenceIDsAndFiltersFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreReferenceIDsAndFiltersFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreReferenceIDsAndFiltersFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreReferenceIDsAndFiltersFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 []semantic.QualifiedMonikerData\n\t// Arg4 is the value of the 5th argument passed to this method\n\t// invocation.\n\tArg4 int\n\t// Arg5 is the value of the 6th argument passed to this method\n\t// invocation.\n\tArg5 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 dbstore.PackageReferenceScanner\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 int\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nDBStoreReferenceIDsAndFiltersFuncCall is an object that describes an invocation of method ReferenceIDsAndFilters on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreReferenceIDsAndFiltersFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreReferenceIDsAndFiltersFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreReferenceIDsAndFiltersFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreReferenceIDsAndFiltersFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreReferenceIDsAndFiltersFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreReferenceIDsAndFiltersFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreReferenceIDsAndFiltersFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreReferenceIDsAndFiltersFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreReferenceIDsAndFiltersFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreReferenceIDsAndFiltersFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreRepoNameFunc",
              "documentation": {
                "identifier": "DBStoreRepoNameFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreRepoNameFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreRepoNameFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreRepoNameFunc struct {\n\tdefaultHook func(context.Context, int) (string, error)\n\thooks       []func(context.Context, int) (string, error)\n\thistory     []DBStoreRepoNameFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreRepoNameFunc describes the behavior when the RepoName method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreRepoNameFunc.History",
                    "documentation": {
                      "identifier": "DBStoreRepoNameFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreRepoNameFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreRepoNameFunc) History() []DBStoreRepoNameFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreRepoNameFunc) History() []DBStoreRepoNameFuncCall\n```\n\nHistory returns a sequence of DBStoreRepoNameFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreRepoNameFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreRepoNameFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreRepoNameFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreRepoNameFunc) PushHook(hook func(context.Context, int) (string, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreRepoNameFunc) PushHook(hook func(context.Context, int) (string, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the RepoName method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreRepoNameFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreRepoNameFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreRepoNameFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreRepoNameFunc) PushReturn(r0 string, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreRepoNameFunc) PushReturn(r0 string, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreRepoNameFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreRepoNameFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreRepoNameFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreRepoNameFunc) SetDefaultHook(hook func(context.Context, int) (string, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreRepoNameFunc) SetDefaultHook(hook func(context.Context, int) (string, error))\n```\n\nSetDefaultHook sets function that is called when the RepoName method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreRepoNameFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreRepoNameFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreRepoNameFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreRepoNameFunc) SetDefaultReturn(r0 string, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreRepoNameFunc) SetDefaultReturn(r0 string, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreRepoNameFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreRepoNameFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreRepoNameFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreRepoNameFunc) appendCall(r0 DBStoreRepoNameFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreRepoNameFunc) appendCall(r0 DBStoreRepoNameFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreRepoNameFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreRepoNameFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreRepoNameFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreRepoNameFunc) nextHook() func(context.Context, int) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreRepoNameFunc) nextHook() func(context.Context, int) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreRepoNameFuncCall",
              "documentation": {
                "identifier": "DBStoreRepoNameFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreRepoNameFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreRepoNameFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreRepoNameFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 string\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreRepoNameFuncCall is an object that describes an invocation of method RepoName on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreRepoNameFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreRepoNameFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreRepoNameFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreRepoNameFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreRepoNameFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreRepoNameFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreRepoNameFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreRepoNameFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreRepoNameFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreRepoNameFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreUpdateIndexConfigurationByRepositoryIDFunc",
              "documentation": {
                "identifier": "DBStoreUpdateIndexConfigurationByRepositoryIDFunc",
                "newPage": false,
                "searchKey": "resolvers.DBStoreUpdateIndexConfigurationByRepositoryIDFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreUpdateIndexConfigurationByRepositoryIDFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreUpdateIndexConfigurationByRepositoryIDFunc struct {\n\tdefaultHook func(context.Context, int, []byte) error\n\thooks       []func(context.Context, int, []byte) error\n\thistory     []DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreUpdateIndexConfigurationByRepositoryIDFunc describes the behavior when the UpdateIndexConfigurationByRepositoryID method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreUpdateIndexConfigurationByRepositoryIDFunc.History",
                    "documentation": {
                      "identifier": "DBStoreUpdateIndexConfigurationByRepositoryIDFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreUpdateIndexConfigurationByRepositoryIDFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreUpdateIndexConfigurationByRepositoryIDFunc) History() []DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreUpdateIndexConfigurationByRepositoryIDFunc) History() []DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall\n```\n\nHistory returns a sequence of DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreUpdateIndexConfigurationByRepositoryIDFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreUpdateIndexConfigurationByRepositoryIDFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreUpdateIndexConfigurationByRepositoryIDFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreUpdateIndexConfigurationByRepositoryIDFunc) PushHook(hook func(context.Context, int, []byte) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreUpdateIndexConfigurationByRepositoryIDFunc) PushHook(hook func(context.Context, int, []byte) error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the UpdateIndexConfigurationByRepositoryID method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreUpdateIndexConfigurationByRepositoryIDFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreUpdateIndexConfigurationByRepositoryIDFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreUpdateIndexConfigurationByRepositoryIDFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreUpdateIndexConfigurationByRepositoryIDFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreUpdateIndexConfigurationByRepositoryIDFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreUpdateIndexConfigurationByRepositoryIDFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreUpdateIndexConfigurationByRepositoryIDFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreUpdateIndexConfigurationByRepositoryIDFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreUpdateIndexConfigurationByRepositoryIDFunc) SetDefaultHook(hook func(context.Context, int, []byte) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreUpdateIndexConfigurationByRepositoryIDFunc) SetDefaultHook(hook func(context.Context, int, []byte) error)\n```\n\nSetDefaultHook sets function that is called when the UpdateIndexConfigurationByRepositoryID method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreUpdateIndexConfigurationByRepositoryIDFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreUpdateIndexConfigurationByRepositoryIDFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreUpdateIndexConfigurationByRepositoryIDFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreUpdateIndexConfigurationByRepositoryIDFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreUpdateIndexConfigurationByRepositoryIDFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreUpdateIndexConfigurationByRepositoryIDFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreUpdateIndexConfigurationByRepositoryIDFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreUpdateIndexConfigurationByRepositoryIDFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreUpdateIndexConfigurationByRepositoryIDFunc) appendCall(r0 DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreUpdateIndexConfigurationByRepositoryIDFunc) appendCall(r0 DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreUpdateIndexConfigurationByRepositoryIDFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreUpdateIndexConfigurationByRepositoryIDFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreUpdateIndexConfigurationByRepositoryIDFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreUpdateIndexConfigurationByRepositoryIDFunc) nextHook() func(context.Context, int, []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreUpdateIndexConfigurationByRepositoryIDFunc) nextHook() func(context.Context, int, []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall",
              "documentation": {
                "identifier": "DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall",
                "newPage": false,
                "searchKey": "resolvers.DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 []byte\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nDBStoreUpdateIndexConfigurationByRepositoryIDFuncCall is an object that describes an invocation of method UpdateIndexConfigurationByRepositoryID on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreUpdateIndexConfigurationByRepositoryIDFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStore",
              "documentation": {
                "identifier": "EnqueuerDBStore",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerDBStore",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerDBStore enqueuer.DBStore"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerDBStore = enqueuer.DBStore\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDirtyRepositoriesFunc",
              "documentation": {
                "identifier": "EnqueuerDBStoreDirtyRepositoriesFunc",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerDBStoreDirtyRepositoriesFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerDBStoreDirtyRepositoriesFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerDBStoreDirtyRepositoriesFunc struct {\n\tdefaultHook func(context.Context) (map[int]int, error)\n\thooks       []func(context.Context) (map[int]int, error)\n\thistory     []EnqueuerDBStoreDirtyRepositoriesFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nEnqueuerDBStoreDirtyRepositoriesFunc describes the behavior when the DirtyRepositories method of the parent MockEnqueuerDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDirtyRepositoriesFunc.History",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreDirtyRepositoriesFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreDirtyRepositoriesFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreDirtyRepositoriesFunc) History() []EnqueuerDBStoreDirtyRepositoriesFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreDirtyRepositoriesFunc) History() []EnqueuerDBStoreDirtyRepositoriesFuncCall\n```\n\nHistory returns a sequence of EnqueuerDBStoreDirtyRepositoriesFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDirtyRepositoriesFunc.PushHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreDirtyRepositoriesFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreDirtyRepositoriesFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreDirtyRepositoriesFunc) PushHook(hook func(context.Context) (map[int]int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreDirtyRepositoriesFunc) PushHook(hook func(context.Context) (map[int]int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the DirtyRepositories method of the parent MockEnqueuerDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDirtyRepositoriesFunc.PushReturn",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreDirtyRepositoriesFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreDirtyRepositoriesFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreDirtyRepositoriesFunc) PushReturn(r0 map[int]int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreDirtyRepositoriesFunc) PushReturn(r0 map[int]int, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDirtyRepositoriesFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreDirtyRepositoriesFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreDirtyRepositoriesFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreDirtyRepositoriesFunc) SetDefaultHook(hook func(context.Context) (map[int]int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreDirtyRepositoriesFunc) SetDefaultHook(hook func(context.Context) (map[int]int, error))\n```\n\nSetDefaultHook sets function that is called when the DirtyRepositories method of the parent MockEnqueuerDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDirtyRepositoriesFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreDirtyRepositoriesFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreDirtyRepositoriesFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreDirtyRepositoriesFunc) SetDefaultReturn(r0 map[int]int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreDirtyRepositoriesFunc) SetDefaultReturn(r0 map[int]int, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDirtyRepositoriesFunc.appendCall",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreDirtyRepositoriesFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreDirtyRepositoriesFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreDirtyRepositoriesFunc) appendCall(r0 EnqueuerDBStoreDirtyRepositoriesFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreDirtyRepositoriesFunc) appendCall(r0 EnqueuerDBStoreDirtyRepositoriesFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDirtyRepositoriesFunc.nextHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreDirtyRepositoriesFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreDirtyRepositoriesFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreDirtyRepositoriesFunc) nextHook() func(context.Context) (map[int]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreDirtyRepositoriesFunc) nextHook() func(context.Context) (map[int]int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDirtyRepositoriesFuncCall",
              "documentation": {
                "identifier": "EnqueuerDBStoreDirtyRepositoriesFuncCall",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerDBStoreDirtyRepositoriesFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerDBStoreDirtyRepositoriesFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerDBStoreDirtyRepositoriesFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 map[int]int\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nEnqueuerDBStoreDirtyRepositoriesFuncCall is an object that describes an invocation of method DirtyRepositories on an instance of MockEnqueuerDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDirtyRepositoriesFuncCall.Args",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreDirtyRepositoriesFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreDirtyRepositoriesFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerDBStoreDirtyRepositoriesFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerDBStoreDirtyRepositoriesFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDirtyRepositoriesFuncCall.Results",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreDirtyRepositoriesFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreDirtyRepositoriesFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerDBStoreDirtyRepositoriesFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerDBStoreDirtyRepositoriesFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDoneFunc",
              "documentation": {
                "identifier": "EnqueuerDBStoreDoneFunc",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerDBStoreDoneFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerDBStoreDoneFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerDBStoreDoneFunc struct {\n\tdefaultHook func(error) error\n\thooks       []func(error) error\n\thistory     []EnqueuerDBStoreDoneFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nEnqueuerDBStoreDoneFunc describes the behavior when the Done method of the parent MockEnqueuerDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDoneFunc.History",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreDoneFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreDoneFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreDoneFunc) History() []EnqueuerDBStoreDoneFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreDoneFunc) History() []EnqueuerDBStoreDoneFuncCall\n```\n\nHistory returns a sequence of EnqueuerDBStoreDoneFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDoneFunc.PushHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreDoneFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreDoneFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreDoneFunc) PushHook(hook func(error) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreDoneFunc) PushHook(hook func(error) error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Done method of the parent MockEnqueuerDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDoneFunc.PushReturn",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreDoneFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreDoneFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreDoneFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreDoneFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDoneFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreDoneFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreDoneFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreDoneFunc) SetDefaultHook(hook func(error) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreDoneFunc) SetDefaultHook(hook func(error) error)\n```\n\nSetDefaultHook sets function that is called when the Done method of the parent MockEnqueuerDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDoneFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreDoneFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreDoneFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreDoneFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreDoneFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDoneFunc.appendCall",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreDoneFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreDoneFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreDoneFunc) appendCall(r0 EnqueuerDBStoreDoneFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreDoneFunc) appendCall(r0 EnqueuerDBStoreDoneFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDoneFunc.nextHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreDoneFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreDoneFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreDoneFunc) nextHook() func(error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreDoneFunc) nextHook() func(error) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDoneFuncCall",
              "documentation": {
                "identifier": "EnqueuerDBStoreDoneFuncCall",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerDBStoreDoneFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerDBStoreDoneFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerDBStoreDoneFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 error\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nEnqueuerDBStoreDoneFuncCall is an object that describes an invocation of method Done on an instance of MockEnqueuerDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDoneFuncCall.Args",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreDoneFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreDoneFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerDBStoreDoneFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerDBStoreDoneFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreDoneFuncCall.Results",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreDoneFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreDoneFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerDBStoreDoneFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerDBStoreDoneFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc",
              "documentation": {
                "identifier": "EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc struct {\n\tdefaultHook func(context.Context, int) (dbstore.IndexConfiguration, bool, error)\n\thooks       []func(context.Context, int) (dbstore.IndexConfiguration, bool, error)\n\thistory     []EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nEnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc describes the behavior when the GetIndexConfigurationByRepositoryID method of the parent MockEnqueuerDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.History",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc) History() []EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc) History() []EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall\n```\n\nHistory returns a sequence of EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.PushHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc) PushHook(hook func(context.Context, int) (dbstore.IndexConfiguration, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc) PushHook(hook func(context.Context, int) (dbstore.IndexConfiguration, bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetIndexConfigurationByRepositoryID method of the parent MockEnqueuerDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.PushReturn",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc) PushReturn(r0 dbstore.IndexConfiguration, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc) PushReturn(r0 dbstore.IndexConfiguration, r1 bool, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.IndexConfiguration, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.IndexConfiguration, bool, error))\n```\n\nSetDefaultHook sets function that is called when the GetIndexConfigurationByRepositoryID method of the parent MockEnqueuerDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc) SetDefaultReturn(r0 dbstore.IndexConfiguration, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc) SetDefaultReturn(r0 dbstore.IndexConfiguration, r1 bool, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.appendCall",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc) appendCall(r0 EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc) appendCall(r0 EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.nextHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc) nextHook() func(context.Context, int) (dbstore.IndexConfiguration, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc) nextHook() func(context.Context, int) (dbstore.IndexConfiguration, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall",
              "documentation": {
                "identifier": "EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 dbstore.IndexConfiguration\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 bool\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nEnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall is an object that describes an invocation of method GetIndexConfigurationByRepositoryID on an instance of MockEnqueuerDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall.Args",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall.Results",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc",
              "documentation": {
                "identifier": "EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc struct {\n\tdefaultHook func(context.Context) ([]int, error)\n\thooks       []func(context.Context) ([]int, error)\n\thistory     []EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nEnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc describes the behavior when the GetRepositoriesWithIndexConfiguration method of the parent MockEnqueuerDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.History",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc) History() []EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc) History() []EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall\n```\n\nHistory returns a sequence of EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.PushHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc) PushHook(hook func(context.Context) ([]int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc) PushHook(hook func(context.Context) ([]int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetRepositoriesWithIndexConfiguration method of the parent MockEnqueuerDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.PushReturn",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc) PushReturn(r0 []int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc) PushReturn(r0 []int, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc) SetDefaultHook(hook func(context.Context) ([]int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc) SetDefaultHook(hook func(context.Context) ([]int, error))\n```\n\nSetDefaultHook sets function that is called when the GetRepositoriesWithIndexConfiguration method of the parent MockEnqueuerDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc) SetDefaultReturn(r0 []int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc) SetDefaultReturn(r0 []int, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.appendCall",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc) appendCall(r0 EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc) appendCall(r0 EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.nextHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc) nextHook() func(context.Context) ([]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc) nextHook() func(context.Context) ([]int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall",
              "documentation": {
                "identifier": "EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []int\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nEnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall is an object that describes an invocation of method GetRepositoriesWithIndexConfiguration on an instance of MockEnqueuerDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall.Args",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall.Results",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreHandleFunc",
              "documentation": {
                "identifier": "EnqueuerDBStoreHandleFunc",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerDBStoreHandleFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerDBStoreHandleFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerDBStoreHandleFunc struct {\n\tdefaultHook func() *basestore.TransactableHandle\n\thooks       []func() *basestore.TransactableHandle\n\thistory     []EnqueuerDBStoreHandleFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nEnqueuerDBStoreHandleFunc describes the behavior when the Handle method of the parent MockEnqueuerDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreHandleFunc.History",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreHandleFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreHandleFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreHandleFunc) History() []EnqueuerDBStoreHandleFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreHandleFunc) History() []EnqueuerDBStoreHandleFuncCall\n```\n\nHistory returns a sequence of EnqueuerDBStoreHandleFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreHandleFunc.PushHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreHandleFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreHandleFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Handle method of the parent MockEnqueuerDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreHandleFunc.PushReturn",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreHandleFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreHandleFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreHandleFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreHandleFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreHandleFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle)\n```\n\nSetDefaultHook sets function that is called when the Handle method of the parent MockEnqueuerDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreHandleFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreHandleFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreHandleFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreHandleFunc.appendCall",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreHandleFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreHandleFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreHandleFunc) appendCall(r0 EnqueuerDBStoreHandleFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreHandleFunc) appendCall(r0 EnqueuerDBStoreHandleFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreHandleFunc.nextHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreHandleFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreHandleFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreHandleFunc) nextHook() func() *basestore.TransactableHandle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreHandleFunc) nextHook() func() *basestore.TransactableHandle\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreHandleFuncCall",
              "documentation": {
                "identifier": "EnqueuerDBStoreHandleFuncCall",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerDBStoreHandleFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerDBStoreHandleFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerDBStoreHandleFuncCall struct {\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *basestore.TransactableHandle\n}\n```\n\nEnqueuerDBStoreHandleFuncCall is an object that describes an invocation of method Handle on an instance of MockEnqueuerDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreHandleFuncCall.Args",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreHandleFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreHandleFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerDBStoreHandleFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerDBStoreHandleFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreHandleFuncCall.Results",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreHandleFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreHandleFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerDBStoreHandleFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerDBStoreHandleFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreInsertIndexFunc",
              "documentation": {
                "identifier": "EnqueuerDBStoreInsertIndexFunc",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerDBStoreInsertIndexFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerDBStoreInsertIndexFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerDBStoreInsertIndexFunc struct {\n\tdefaultHook func(context.Context, dbstore.Index) (int, error)\n\thooks       []func(context.Context, dbstore.Index) (int, error)\n\thistory     []EnqueuerDBStoreInsertIndexFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nEnqueuerDBStoreInsertIndexFunc describes the behavior when the InsertIndex method of the parent MockEnqueuerDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreInsertIndexFunc.History",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreInsertIndexFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreInsertIndexFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreInsertIndexFunc) History() []EnqueuerDBStoreInsertIndexFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreInsertIndexFunc) History() []EnqueuerDBStoreInsertIndexFuncCall\n```\n\nHistory returns a sequence of EnqueuerDBStoreInsertIndexFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreInsertIndexFunc.PushHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreInsertIndexFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreInsertIndexFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreInsertIndexFunc) PushHook(hook func(context.Context, dbstore.Index) (int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreInsertIndexFunc) PushHook(hook func(context.Context, dbstore.Index) (int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the InsertIndex method of the parent MockEnqueuerDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreInsertIndexFunc.PushReturn",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreInsertIndexFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreInsertIndexFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreInsertIndexFunc) PushReturn(r0 int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreInsertIndexFunc) PushReturn(r0 int, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreInsertIndexFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreInsertIndexFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreInsertIndexFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreInsertIndexFunc) SetDefaultHook(hook func(context.Context, dbstore.Index) (int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreInsertIndexFunc) SetDefaultHook(hook func(context.Context, dbstore.Index) (int, error))\n```\n\nSetDefaultHook sets function that is called when the InsertIndex method of the parent MockEnqueuerDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreInsertIndexFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreInsertIndexFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreInsertIndexFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreInsertIndexFunc) SetDefaultReturn(r0 int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreInsertIndexFunc) SetDefaultReturn(r0 int, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreInsertIndexFunc.appendCall",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreInsertIndexFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreInsertIndexFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreInsertIndexFunc) appendCall(r0 EnqueuerDBStoreInsertIndexFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreInsertIndexFunc) appendCall(r0 EnqueuerDBStoreInsertIndexFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreInsertIndexFunc.nextHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreInsertIndexFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreInsertIndexFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreInsertIndexFunc) nextHook() func(context.Context, dbstore.Index) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreInsertIndexFunc) nextHook() func(context.Context, dbstore.Index) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreInsertIndexFuncCall",
              "documentation": {
                "identifier": "EnqueuerDBStoreInsertIndexFuncCall",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerDBStoreInsertIndexFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerDBStoreInsertIndexFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerDBStoreInsertIndexFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 dbstore.Index\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 int\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nEnqueuerDBStoreInsertIndexFuncCall is an object that describes an invocation of method InsertIndex on an instance of MockEnqueuerDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreInsertIndexFuncCall.Args",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreInsertIndexFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreInsertIndexFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerDBStoreInsertIndexFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerDBStoreInsertIndexFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreInsertIndexFuncCall.Results",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreInsertIndexFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreInsertIndexFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerDBStoreInsertIndexFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerDBStoreInsertIndexFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreIsQueuedFunc",
              "documentation": {
                "identifier": "EnqueuerDBStoreIsQueuedFunc",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerDBStoreIsQueuedFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerDBStoreIsQueuedFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerDBStoreIsQueuedFunc struct {\n\tdefaultHook func(context.Context, int, string) (bool, error)\n\thooks       []func(context.Context, int, string) (bool, error)\n\thistory     []EnqueuerDBStoreIsQueuedFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nEnqueuerDBStoreIsQueuedFunc describes the behavior when the IsQueued method of the parent MockEnqueuerDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreIsQueuedFunc.History",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreIsQueuedFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreIsQueuedFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreIsQueuedFunc) History() []EnqueuerDBStoreIsQueuedFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreIsQueuedFunc) History() []EnqueuerDBStoreIsQueuedFuncCall\n```\n\nHistory returns a sequence of EnqueuerDBStoreIsQueuedFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreIsQueuedFunc.PushHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreIsQueuedFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreIsQueuedFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreIsQueuedFunc) PushHook(hook func(context.Context, int, string) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreIsQueuedFunc) PushHook(hook func(context.Context, int, string) (bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the IsQueued method of the parent MockEnqueuerDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreIsQueuedFunc.PushReturn",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreIsQueuedFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreIsQueuedFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreIsQueuedFunc) PushReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreIsQueuedFunc) PushReturn(r0 bool, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreIsQueuedFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreIsQueuedFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreIsQueuedFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreIsQueuedFunc) SetDefaultHook(hook func(context.Context, int, string) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreIsQueuedFunc) SetDefaultHook(hook func(context.Context, int, string) (bool, error))\n```\n\nSetDefaultHook sets function that is called when the IsQueued method of the parent MockEnqueuerDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreIsQueuedFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreIsQueuedFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreIsQueuedFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreIsQueuedFunc) SetDefaultReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreIsQueuedFunc) SetDefaultReturn(r0 bool, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreIsQueuedFunc.appendCall",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreIsQueuedFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreIsQueuedFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreIsQueuedFunc) appendCall(r0 EnqueuerDBStoreIsQueuedFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreIsQueuedFunc) appendCall(r0 EnqueuerDBStoreIsQueuedFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreIsQueuedFunc.nextHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreIsQueuedFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreIsQueuedFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreIsQueuedFunc) nextHook() func(context.Context, int, string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreIsQueuedFunc) nextHook() func(context.Context, int, string) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreIsQueuedFuncCall",
              "documentation": {
                "identifier": "EnqueuerDBStoreIsQueuedFuncCall",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerDBStoreIsQueuedFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerDBStoreIsQueuedFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerDBStoreIsQueuedFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 bool\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nEnqueuerDBStoreIsQueuedFuncCall is an object that describes an invocation of method IsQueued on an instance of MockEnqueuerDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreIsQueuedFuncCall.Args",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreIsQueuedFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreIsQueuedFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerDBStoreIsQueuedFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerDBStoreIsQueuedFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreIsQueuedFuncCall.Results",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreIsQueuedFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreIsQueuedFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerDBStoreIsQueuedFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerDBStoreIsQueuedFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreTransactFunc",
              "documentation": {
                "identifier": "EnqueuerDBStoreTransactFunc",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerDBStoreTransactFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerDBStoreTransactFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerDBStoreTransactFunc struct {\n\tdefaultHook func(context.Context) (enqueuer.DBStore, error)\n\thooks       []func(context.Context) (enqueuer.DBStore, error)\n\thistory     []EnqueuerDBStoreTransactFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nEnqueuerDBStoreTransactFunc describes the behavior when the Transact method of the parent MockEnqueuerDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreTransactFunc.History",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreTransactFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreTransactFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreTransactFunc) History() []EnqueuerDBStoreTransactFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreTransactFunc) History() []EnqueuerDBStoreTransactFuncCall\n```\n\nHistory returns a sequence of EnqueuerDBStoreTransactFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreTransactFunc.PushHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreTransactFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreTransactFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreTransactFunc) PushHook(hook func(context.Context) (enqueuer.DBStore, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreTransactFunc) PushHook(hook func(context.Context) (enqueuer.DBStore, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Transact method of the parent MockEnqueuerDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreTransactFunc.PushReturn",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreTransactFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreTransactFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreTransactFunc) PushReturn(r0 enqueuer.DBStore, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreTransactFunc) PushReturn(r0 enqueuer.DBStore, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreTransactFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreTransactFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreTransactFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreTransactFunc) SetDefaultHook(hook func(context.Context) (enqueuer.DBStore, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreTransactFunc) SetDefaultHook(hook func(context.Context) (enqueuer.DBStore, error))\n```\n\nSetDefaultHook sets function that is called when the Transact method of the parent MockEnqueuerDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreTransactFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreTransactFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreTransactFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreTransactFunc) SetDefaultReturn(r0 enqueuer.DBStore, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreTransactFunc) SetDefaultReturn(r0 enqueuer.DBStore, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreTransactFunc.appendCall",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreTransactFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreTransactFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreTransactFunc) appendCall(r0 EnqueuerDBStoreTransactFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreTransactFunc) appendCall(r0 EnqueuerDBStoreTransactFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreTransactFunc.nextHook",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreTransactFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreTransactFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerDBStoreTransactFunc) nextHook() func(context.Context) (enqueuer.DBStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerDBStoreTransactFunc) nextHook() func(context.Context) (enqueuer.DBStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreTransactFuncCall",
              "documentation": {
                "identifier": "EnqueuerDBStoreTransactFuncCall",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerDBStoreTransactFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerDBStoreTransactFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerDBStoreTransactFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 enqueuer.DBStore\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nEnqueuerDBStoreTransactFuncCall is an object that describes an invocation of method Transact on an instance of MockEnqueuerDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreTransactFuncCall.Args",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreTransactFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreTransactFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerDBStoreTransactFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerDBStoreTransactFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerDBStoreTransactFuncCall.Results",
                    "documentation": {
                      "identifier": "EnqueuerDBStoreTransactFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerDBStoreTransactFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerDBStoreTransactFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerDBStoreTransactFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClient",
              "documentation": {
                "identifier": "EnqueuerGitserverClient",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerGitserverClient",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerGitserverClient enqueuer.GitserverClient"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerGitserverClient = enqueuer.GitserverClient\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientFileExistsFunc",
              "documentation": {
                "identifier": "EnqueuerGitserverClientFileExistsFunc",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerGitserverClientFileExistsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerGitserverClientFileExistsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerGitserverClientFileExistsFunc struct {\n\tdefaultHook func(context.Context, int, string, string) (bool, error)\n\thooks       []func(context.Context, int, string, string) (bool, error)\n\thistory     []EnqueuerGitserverClientFileExistsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nEnqueuerGitserverClientFileExistsFunc describes the behavior when the FileExists method of the parent MockEnqueuerGitserverClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientFileExistsFunc.History",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientFileExistsFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientFileExistsFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientFileExistsFunc) History() []EnqueuerGitserverClientFileExistsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientFileExistsFunc) History() []EnqueuerGitserverClientFileExistsFuncCall\n```\n\nHistory returns a sequence of EnqueuerGitserverClientFileExistsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientFileExistsFunc.PushHook",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientFileExistsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientFileExistsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientFileExistsFunc) PushHook(hook func(context.Context, int, string, string) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientFileExistsFunc) PushHook(hook func(context.Context, int, string, string) (bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the FileExists method of the parent MockEnqueuerGitserverClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientFileExistsFunc.PushReturn",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientFileExistsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientFileExistsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientFileExistsFunc) PushReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientFileExistsFunc) PushReturn(r0 bool, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientFileExistsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientFileExistsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientFileExistsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientFileExistsFunc) SetDefaultHook(hook func(context.Context, int, string, string) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientFileExistsFunc) SetDefaultHook(hook func(context.Context, int, string, string) (bool, error))\n```\n\nSetDefaultHook sets function that is called when the FileExists method of the parent MockEnqueuerGitserverClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientFileExistsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientFileExistsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientFileExistsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientFileExistsFunc) SetDefaultReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientFileExistsFunc) SetDefaultReturn(r0 bool, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientFileExistsFunc.appendCall",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientFileExistsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientFileExistsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientFileExistsFunc) appendCall(r0 EnqueuerGitserverClientFileExistsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientFileExistsFunc) appendCall(r0 EnqueuerGitserverClientFileExistsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientFileExistsFunc.nextHook",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientFileExistsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientFileExistsFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientFileExistsFunc) nextHook() func(context.Context, int, string, string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientFileExistsFunc) nextHook() func(context.Context, int, string, string) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientFileExistsFuncCall",
              "documentation": {
                "identifier": "EnqueuerGitserverClientFileExistsFuncCall",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerGitserverClientFileExistsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerGitserverClientFileExistsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerGitserverClientFileExistsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 bool\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nEnqueuerGitserverClientFileExistsFuncCall is an object that describes an invocation of method FileExists on an instance of MockEnqueuerGitserverClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientFileExistsFuncCall.Args",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientFileExistsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientFileExistsFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerGitserverClientFileExistsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerGitserverClientFileExistsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientFileExistsFuncCall.Results",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientFileExistsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientFileExistsFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerGitserverClientFileExistsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerGitserverClientFileExistsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientHeadFunc",
              "documentation": {
                "identifier": "EnqueuerGitserverClientHeadFunc",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerGitserverClientHeadFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerGitserverClientHeadFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerGitserverClientHeadFunc struct {\n\tdefaultHook func(context.Context, int) (string, error)\n\thooks       []func(context.Context, int) (string, error)\n\thistory     []EnqueuerGitserverClientHeadFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nEnqueuerGitserverClientHeadFunc describes the behavior when the Head method of the parent MockEnqueuerGitserverClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientHeadFunc.History",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientHeadFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientHeadFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientHeadFunc) History() []EnqueuerGitserverClientHeadFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientHeadFunc) History() []EnqueuerGitserverClientHeadFuncCall\n```\n\nHistory returns a sequence of EnqueuerGitserverClientHeadFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientHeadFunc.PushHook",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientHeadFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientHeadFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientHeadFunc) PushHook(hook func(context.Context, int) (string, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientHeadFunc) PushHook(hook func(context.Context, int) (string, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Head method of the parent MockEnqueuerGitserverClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientHeadFunc.PushReturn",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientHeadFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientHeadFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientHeadFunc) PushReturn(r0 string, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientHeadFunc) PushReturn(r0 string, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientHeadFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientHeadFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientHeadFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientHeadFunc) SetDefaultHook(hook func(context.Context, int) (string, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientHeadFunc) SetDefaultHook(hook func(context.Context, int) (string, error))\n```\n\nSetDefaultHook sets function that is called when the Head method of the parent MockEnqueuerGitserverClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientHeadFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientHeadFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientHeadFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientHeadFunc) SetDefaultReturn(r0 string, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientHeadFunc) SetDefaultReturn(r0 string, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientHeadFunc.appendCall",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientHeadFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientHeadFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientHeadFunc) appendCall(r0 EnqueuerGitserverClientHeadFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientHeadFunc) appendCall(r0 EnqueuerGitserverClientHeadFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientHeadFunc.nextHook",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientHeadFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientHeadFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientHeadFunc) nextHook() func(context.Context, int) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientHeadFunc) nextHook() func(context.Context, int) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientHeadFuncCall",
              "documentation": {
                "identifier": "EnqueuerGitserverClientHeadFuncCall",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerGitserverClientHeadFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerGitserverClientHeadFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerGitserverClientHeadFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 string\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nEnqueuerGitserverClientHeadFuncCall is an object that describes an invocation of method Head on an instance of MockEnqueuerGitserverClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientHeadFuncCall.Args",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientHeadFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientHeadFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerGitserverClientHeadFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerGitserverClientHeadFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientHeadFuncCall.Results",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientHeadFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientHeadFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerGitserverClientHeadFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerGitserverClientHeadFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientListFilesFunc",
              "documentation": {
                "identifier": "EnqueuerGitserverClientListFilesFunc",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerGitserverClientListFilesFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerGitserverClientListFilesFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerGitserverClientListFilesFunc struct {\n\tdefaultHook func(context.Context, int, string, *regexp.Regexp) ([]string, error)\n\thooks       []func(context.Context, int, string, *regexp.Regexp) ([]string, error)\n\thistory     []EnqueuerGitserverClientListFilesFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nEnqueuerGitserverClientListFilesFunc describes the behavior when the ListFiles method of the parent MockEnqueuerGitserverClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientListFilesFunc.History",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientListFilesFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientListFilesFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientListFilesFunc) History() []EnqueuerGitserverClientListFilesFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientListFilesFunc) History() []EnqueuerGitserverClientListFilesFuncCall\n```\n\nHistory returns a sequence of EnqueuerGitserverClientListFilesFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientListFilesFunc.PushHook",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientListFilesFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientListFilesFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientListFilesFunc) PushHook(hook func(context.Context, int, string, *regexp.Regexp) ([]string, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientListFilesFunc) PushHook(hook func(context.Context, int, string, *regexp.Regexp) ([]string, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the ListFiles method of the parent MockEnqueuerGitserverClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientListFilesFunc.PushReturn",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientListFilesFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientListFilesFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientListFilesFunc) PushReturn(r0 []string, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientListFilesFunc) PushReturn(r0 []string, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientListFilesFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientListFilesFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientListFilesFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientListFilesFunc) SetDefaultHook(hook func(context.Context, int, string, *regexp.Regexp) ([]string, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientListFilesFunc) SetDefaultHook(hook func(context.Context, int, string, *regexp.Regexp) ([]string, error))\n```\n\nSetDefaultHook sets function that is called when the ListFiles method of the parent MockEnqueuerGitserverClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientListFilesFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientListFilesFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientListFilesFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientListFilesFunc) SetDefaultReturn(r0 []string, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientListFilesFunc) SetDefaultReturn(r0 []string, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientListFilesFunc.appendCall",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientListFilesFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientListFilesFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientListFilesFunc) appendCall(r0 EnqueuerGitserverClientListFilesFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientListFilesFunc) appendCall(r0 EnqueuerGitserverClientListFilesFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientListFilesFunc.nextHook",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientListFilesFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientListFilesFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientListFilesFunc) nextHook() func(context.Context, int, string, *regexp.Regexp) ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientListFilesFunc) nextHook() func(context.Context, int, string, *regexp.Regexp) ([]string, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientListFilesFuncCall",
              "documentation": {
                "identifier": "EnqueuerGitserverClientListFilesFuncCall",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerGitserverClientListFilesFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerGitserverClientListFilesFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerGitserverClientListFilesFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 *regexp.Regexp\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []string\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nEnqueuerGitserverClientListFilesFuncCall is an object that describes an invocation of method ListFiles on an instance of MockEnqueuerGitserverClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientListFilesFuncCall.Args",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientListFilesFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientListFilesFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerGitserverClientListFilesFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerGitserverClientListFilesFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientListFilesFuncCall.Results",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientListFilesFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientListFilesFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerGitserverClientListFilesFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerGitserverClientListFilesFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientRawContentsFunc",
              "documentation": {
                "identifier": "EnqueuerGitserverClientRawContentsFunc",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerGitserverClientRawContentsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerGitserverClientRawContentsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerGitserverClientRawContentsFunc struct {\n\tdefaultHook func(context.Context, int, string, string) ([]byte, error)\n\thooks       []func(context.Context, int, string, string) ([]byte, error)\n\thistory     []EnqueuerGitserverClientRawContentsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nEnqueuerGitserverClientRawContentsFunc describes the behavior when the RawContents method of the parent MockEnqueuerGitserverClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientRawContentsFunc.History",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientRawContentsFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientRawContentsFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientRawContentsFunc) History() []EnqueuerGitserverClientRawContentsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientRawContentsFunc) History() []EnqueuerGitserverClientRawContentsFuncCall\n```\n\nHistory returns a sequence of EnqueuerGitserverClientRawContentsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientRawContentsFunc.PushHook",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientRawContentsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientRawContentsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientRawContentsFunc) PushHook(hook func(context.Context, int, string, string) ([]byte, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientRawContentsFunc) PushHook(hook func(context.Context, int, string, string) ([]byte, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the RawContents method of the parent MockEnqueuerGitserverClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientRawContentsFunc.PushReturn",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientRawContentsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientRawContentsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientRawContentsFunc) PushReturn(r0 []byte, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientRawContentsFunc) PushReturn(r0 []byte, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientRawContentsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientRawContentsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientRawContentsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientRawContentsFunc) SetDefaultHook(hook func(context.Context, int, string, string) ([]byte, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientRawContentsFunc) SetDefaultHook(hook func(context.Context, int, string, string) ([]byte, error))\n```\n\nSetDefaultHook sets function that is called when the RawContents method of the parent MockEnqueuerGitserverClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientRawContentsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientRawContentsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientRawContentsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientRawContentsFunc) SetDefaultReturn(r0 []byte, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientRawContentsFunc) SetDefaultReturn(r0 []byte, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientRawContentsFunc.appendCall",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientRawContentsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientRawContentsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientRawContentsFunc) appendCall(r0 EnqueuerGitserverClientRawContentsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientRawContentsFunc) appendCall(r0 EnqueuerGitserverClientRawContentsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientRawContentsFunc.nextHook",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientRawContentsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientRawContentsFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientRawContentsFunc) nextHook() func(context.Context, int, string, string) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientRawContentsFunc) nextHook() func(context.Context, int, string, string) ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientRawContentsFuncCall",
              "documentation": {
                "identifier": "EnqueuerGitserverClientRawContentsFuncCall",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerGitserverClientRawContentsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerGitserverClientRawContentsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerGitserverClientRawContentsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []byte\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nEnqueuerGitserverClientRawContentsFuncCall is an object that describes an invocation of method RawContents on an instance of MockEnqueuerGitserverClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientRawContentsFuncCall.Args",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientRawContentsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientRawContentsFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerGitserverClientRawContentsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerGitserverClientRawContentsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientRawContentsFuncCall.Results",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientRawContentsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientRawContentsFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerGitserverClientRawContentsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerGitserverClientRawContentsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientResolveRevisionFunc",
              "documentation": {
                "identifier": "EnqueuerGitserverClientResolveRevisionFunc",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerGitserverClientResolveRevisionFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerGitserverClientResolveRevisionFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerGitserverClientResolveRevisionFunc struct {\n\tdefaultHook func(context.Context, int, string) (api.CommitID, error)\n\thooks       []func(context.Context, int, string) (api.CommitID, error)\n\thistory     []EnqueuerGitserverClientResolveRevisionFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nEnqueuerGitserverClientResolveRevisionFunc describes the behavior when the ResolveRevision method of the parent MockEnqueuerGitserverClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientResolveRevisionFunc.History",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientResolveRevisionFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientResolveRevisionFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientResolveRevisionFunc) History() []EnqueuerGitserverClientResolveRevisionFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientResolveRevisionFunc) History() []EnqueuerGitserverClientResolveRevisionFuncCall\n```\n\nHistory returns a sequence of EnqueuerGitserverClientResolveRevisionFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientResolveRevisionFunc.PushHook",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientResolveRevisionFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientResolveRevisionFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientResolveRevisionFunc) PushHook(hook func(context.Context, int, string) (api.CommitID, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientResolveRevisionFunc) PushHook(hook func(context.Context, int, string) (api.CommitID, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the ResolveRevision method of the parent MockEnqueuerGitserverClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientResolveRevisionFunc.PushReturn",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientResolveRevisionFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientResolveRevisionFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientResolveRevisionFunc) PushReturn(r0 api.CommitID, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientResolveRevisionFunc) PushReturn(r0 api.CommitID, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientResolveRevisionFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientResolveRevisionFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientResolveRevisionFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientResolveRevisionFunc) SetDefaultHook(hook func(context.Context, int, string) (api.CommitID, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientResolveRevisionFunc) SetDefaultHook(hook func(context.Context, int, string) (api.CommitID, error))\n```\n\nSetDefaultHook sets function that is called when the ResolveRevision method of the parent MockEnqueuerGitserverClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientResolveRevisionFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientResolveRevisionFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientResolveRevisionFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientResolveRevisionFunc) SetDefaultReturn(r0 api.CommitID, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientResolveRevisionFunc) SetDefaultReturn(r0 api.CommitID, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientResolveRevisionFunc.appendCall",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientResolveRevisionFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientResolveRevisionFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientResolveRevisionFunc) appendCall(r0 EnqueuerGitserverClientResolveRevisionFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientResolveRevisionFunc) appendCall(r0 EnqueuerGitserverClientResolveRevisionFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientResolveRevisionFunc.nextHook",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientResolveRevisionFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientResolveRevisionFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *EnqueuerGitserverClientResolveRevisionFunc) nextHook() func(context.Context, int, string) (api.CommitID, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *EnqueuerGitserverClientResolveRevisionFunc) nextHook() func(context.Context, int, string) (api.CommitID, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientResolveRevisionFuncCall",
              "documentation": {
                "identifier": "EnqueuerGitserverClientResolveRevisionFuncCall",
                "newPage": false,
                "searchKey": "resolvers.EnqueuerGitserverClientResolveRevisionFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnqueuerGitserverClientResolveRevisionFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnqueuerGitserverClientResolveRevisionFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 api.CommitID\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nEnqueuerGitserverClientResolveRevisionFuncCall is an object that describes an invocation of method ResolveRevision on an instance of MockEnqueuerGitserverClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientResolveRevisionFuncCall.Args",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientResolveRevisionFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientResolveRevisionFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerGitserverClientResolveRevisionFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerGitserverClientResolveRevisionFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#EnqueuerGitserverClientResolveRevisionFuncCall.Results",
                    "documentation": {
                      "identifier": "EnqueuerGitserverClientResolveRevisionFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.EnqueuerGitserverClientResolveRevisionFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c EnqueuerGitserverClientResolveRevisionFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c EnqueuerGitserverClientResolveRevisionFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClient",
              "documentation": {
                "identifier": "GitserverClient",
                "newPage": false,
                "searchKey": "resolvers.GitserverClient",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClient interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClient interface {\n\tCommitExists(ctx context.Context, repositoryID int, commit string) (bool, error)\n\tCommitGraph(ctx context.Context, repositoryID int, options gitserver.CommitGraphOptions) (*gitserver.CommitGraph, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitExistsFunc",
              "documentation": {
                "identifier": "GitserverClientCommitExistsFunc",
                "newPage": false,
                "searchKey": "resolvers.GitserverClientCommitExistsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientCommitExistsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientCommitExistsFunc struct {\n\tdefaultHook func(context.Context, int, string) (bool, error)\n\thooks       []func(context.Context, int, string) (bool, error)\n\thistory     []GitserverClientCommitExistsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGitserverClientCommitExistsFunc describes the behavior when the CommitExists method of the parent MockGitserverClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitExistsFunc.History",
                    "documentation": {
                      "identifier": "GitserverClientCommitExistsFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.GitserverClientCommitExistsFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientCommitExistsFunc) History() []GitserverClientCommitExistsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientCommitExistsFunc) History() []GitserverClientCommitExistsFuncCall\n```\n\nHistory returns a sequence of GitserverClientCommitExistsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitExistsFunc.PushHook",
                    "documentation": {
                      "identifier": "GitserverClientCommitExistsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.GitserverClientCommitExistsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientCommitExistsFunc) PushHook(hook func(context.Context, int, string) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientCommitExistsFunc) PushHook(hook func(context.Context, int, string) (bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the CommitExists method of the parent MockGitserverClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitExistsFunc.PushReturn",
                    "documentation": {
                      "identifier": "GitserverClientCommitExistsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.GitserverClientCommitExistsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientCommitExistsFunc) PushReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientCommitExistsFunc) PushReturn(r0 bool, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitExistsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GitserverClientCommitExistsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.GitserverClientCommitExistsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientCommitExistsFunc) SetDefaultHook(hook func(context.Context, int, string) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientCommitExistsFunc) SetDefaultHook(hook func(context.Context, int, string) (bool, error))\n```\n\nSetDefaultHook sets function that is called when the CommitExists method of the parent MockGitserverClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitExistsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GitserverClientCommitExistsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.GitserverClientCommitExistsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientCommitExistsFunc) SetDefaultReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientCommitExistsFunc) SetDefaultReturn(r0 bool, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitExistsFunc.appendCall",
                    "documentation": {
                      "identifier": "GitserverClientCommitExistsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.GitserverClientCommitExistsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientCommitExistsFunc) appendCall(r0 GitserverClientCommitExistsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientCommitExistsFunc) appendCall(r0 GitserverClientCommitExistsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitExistsFunc.nextHook",
                    "documentation": {
                      "identifier": "GitserverClientCommitExistsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.GitserverClientCommitExistsFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientCommitExistsFunc) nextHook() func(context.Context, int, string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientCommitExistsFunc) nextHook() func(context.Context, int, string) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitExistsFuncCall",
              "documentation": {
                "identifier": "GitserverClientCommitExistsFuncCall",
                "newPage": false,
                "searchKey": "resolvers.GitserverClientCommitExistsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientCommitExistsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientCommitExistsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 bool\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nGitserverClientCommitExistsFuncCall is an object that describes an invocation of method CommitExists on an instance of MockGitserverClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitExistsFuncCall.Args",
                    "documentation": {
                      "identifier": "GitserverClientCommitExistsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.GitserverClientCommitExistsFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientCommitExistsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientCommitExistsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitExistsFuncCall.Results",
                    "documentation": {
                      "identifier": "GitserverClientCommitExistsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.GitserverClientCommitExistsFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientCommitExistsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientCommitExistsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitGraphFunc",
              "documentation": {
                "identifier": "GitserverClientCommitGraphFunc",
                "newPage": false,
                "searchKey": "resolvers.GitserverClientCommitGraphFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientCommitGraphFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientCommitGraphFunc struct {\n\tdefaultHook func(context.Context, int, gitserver.CommitGraphOptions) (*gitserver.CommitGraph, error)\n\thooks       []func(context.Context, int, gitserver.CommitGraphOptions) (*gitserver.CommitGraph, error)\n\thistory     []GitserverClientCommitGraphFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGitserverClientCommitGraphFunc describes the behavior when the CommitGraph method of the parent MockGitserverClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitGraphFunc.History",
                    "documentation": {
                      "identifier": "GitserverClientCommitGraphFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.GitserverClientCommitGraphFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientCommitGraphFunc) History() []GitserverClientCommitGraphFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientCommitGraphFunc) History() []GitserverClientCommitGraphFuncCall\n```\n\nHistory returns a sequence of GitserverClientCommitGraphFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitGraphFunc.PushHook",
                    "documentation": {
                      "identifier": "GitserverClientCommitGraphFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.GitserverClientCommitGraphFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientCommitGraphFunc) PushHook(hook func(context.Context, int, gitserver.CommitGraphOptions) (*gitserver.CommitGraph, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientCommitGraphFunc) PushHook(hook func(context.Context, int, gitserver.CommitGraphOptions) (*gitserver.CommitGraph, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the CommitGraph method of the parent MockGitserverClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitGraphFunc.PushReturn",
                    "documentation": {
                      "identifier": "GitserverClientCommitGraphFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.GitserverClientCommitGraphFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientCommitGraphFunc) PushReturn(r0 *gitserver.CommitGraph, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientCommitGraphFunc) PushReturn(r0 *gitserver.CommitGraph, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitGraphFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GitserverClientCommitGraphFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.GitserverClientCommitGraphFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientCommitGraphFunc) SetDefaultHook(hook func(context.Context, int, gitserver.CommitGraphOptions) (*gitserver.CommitGraph, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientCommitGraphFunc) SetDefaultHook(hook func(context.Context, int, gitserver.CommitGraphOptions) (*gitserver.CommitGraph, error))\n```\n\nSetDefaultHook sets function that is called when the CommitGraph method of the parent MockGitserverClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitGraphFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GitserverClientCommitGraphFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.GitserverClientCommitGraphFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientCommitGraphFunc) SetDefaultReturn(r0 *gitserver.CommitGraph, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientCommitGraphFunc) SetDefaultReturn(r0 *gitserver.CommitGraph, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitGraphFunc.appendCall",
                    "documentation": {
                      "identifier": "GitserverClientCommitGraphFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.GitserverClientCommitGraphFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientCommitGraphFunc) appendCall(r0 GitserverClientCommitGraphFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientCommitGraphFunc) appendCall(r0 GitserverClientCommitGraphFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitGraphFunc.nextHook",
                    "documentation": {
                      "identifier": "GitserverClientCommitGraphFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.GitserverClientCommitGraphFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientCommitGraphFunc) nextHook() func(context.Context, int, gitserver.CommitGraphOptions) (*gitserver.CommitGraph, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientCommitGraphFunc) nextHook() func(context.Context, int, gitserver.CommitGraphOptions) (*gitserver.CommitGraph, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitGraphFuncCall",
              "documentation": {
                "identifier": "GitserverClientCommitGraphFuncCall",
                "newPage": false,
                "searchKey": "resolvers.GitserverClientCommitGraphFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientCommitGraphFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientCommitGraphFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 gitserver.CommitGraphOptions\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *gitserver.CommitGraph\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nGitserverClientCommitGraphFuncCall is an object that describes an invocation of method CommitGraph on an instance of MockGitserverClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitGraphFuncCall.Args",
                    "documentation": {
                      "identifier": "GitserverClientCommitGraphFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.GitserverClientCommitGraphFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientCommitGraphFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientCommitGraphFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#GitserverClientCommitGraphFuncCall.Results",
                    "documentation": {
                      "identifier": "GitserverClientCommitGraphFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.GitserverClientCommitGraphFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientCommitGraphFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientCommitGraphFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#HunkCache",
              "documentation": {
                "identifier": "HunkCache",
                "newPage": false,
                "searchKey": "resolvers.HunkCache",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type HunkCache interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype HunkCache interface {\n\t// Get returns the value (if any) and a boolean representing whether the value was\n\t// found or not.\n\tGet(key interface{}) (interface{}, bool)\n\n\t// Set attempts to add the key-value item to the cache with the given cost. If it\n\t// returns false, then the value as dropped and the item isn't added to the cache.\n\tSet(key, value interface{}, cost int64) bool\n}\n```\n\nHunkCache is a LRU cache that holds git diff hunks. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewHunkCache",
                    "documentation": {
                      "identifier": "NewHunkCache",
                      "newPage": false,
                      "searchKey": "resolvers.NewHunkCache",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewHunkCache(size int) (HunkCache, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewHunkCache(size int) (HunkCache, error)\n```\n\nNewHunkCache creates a data cache instance with the given maximum capacity. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuer",
              "documentation": {
                "identifier": "IndexEnqueuer",
                "newPage": false,
                "searchKey": "resolvers.IndexEnqueuer",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexEnqueuer interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexEnqueuer interface {\n\tForceQueueIndexesForRepository(ctx context.Context, repositoryID int) error\n\tInferIndexConfiguration(ctx context.Context, repositoryID int) (*config.IndexConfiguration, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerForceQueueIndexesForRepositoryFunc",
              "documentation": {
                "identifier": "IndexEnqueuerForceQueueIndexesForRepositoryFunc",
                "newPage": false,
                "searchKey": "resolvers.IndexEnqueuerForceQueueIndexesForRepositoryFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexEnqueuerForceQueueIndexesForRepositoryFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexEnqueuerForceQueueIndexesForRepositoryFunc struct {\n\tdefaultHook func(context.Context, int) error\n\thooks       []func(context.Context, int) error\n\thistory     []IndexEnqueuerForceQueueIndexesForRepositoryFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nIndexEnqueuerForceQueueIndexesForRepositoryFunc describes the behavior when the ForceQueueIndexesForRepository method of the parent MockIndexEnqueuer instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerForceQueueIndexesForRepositoryFunc.History",
                    "documentation": {
                      "identifier": "IndexEnqueuerForceQueueIndexesForRepositoryFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.IndexEnqueuerForceQueueIndexesForRepositoryFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerForceQueueIndexesForRepositoryFunc) History() []IndexEnqueuerForceQueueIndexesForRepositoryFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerForceQueueIndexesForRepositoryFunc) History() []IndexEnqueuerForceQueueIndexesForRepositoryFuncCall\n```\n\nHistory returns a sequence of IndexEnqueuerForceQueueIndexesForRepositoryFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerForceQueueIndexesForRepositoryFunc.PushHook",
                    "documentation": {
                      "identifier": "IndexEnqueuerForceQueueIndexesForRepositoryFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.IndexEnqueuerForceQueueIndexesForRepositoryFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerForceQueueIndexesForRepositoryFunc) PushHook(hook func(context.Context, int) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerForceQueueIndexesForRepositoryFunc) PushHook(hook func(context.Context, int) error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the ForceQueueIndexesForRepository method of the parent MockIndexEnqueuer instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerForceQueueIndexesForRepositoryFunc.PushReturn",
                    "documentation": {
                      "identifier": "IndexEnqueuerForceQueueIndexesForRepositoryFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.IndexEnqueuerForceQueueIndexesForRepositoryFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerForceQueueIndexesForRepositoryFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerForceQueueIndexesForRepositoryFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerForceQueueIndexesForRepositoryFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "IndexEnqueuerForceQueueIndexesForRepositoryFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.IndexEnqueuerForceQueueIndexesForRepositoryFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerForceQueueIndexesForRepositoryFunc) SetDefaultHook(hook func(context.Context, int) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerForceQueueIndexesForRepositoryFunc) SetDefaultHook(hook func(context.Context, int) error)\n```\n\nSetDefaultHook sets function that is called when the ForceQueueIndexesForRepository method of the parent MockIndexEnqueuer instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerForceQueueIndexesForRepositoryFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "IndexEnqueuerForceQueueIndexesForRepositoryFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.IndexEnqueuerForceQueueIndexesForRepositoryFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerForceQueueIndexesForRepositoryFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerForceQueueIndexesForRepositoryFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerForceQueueIndexesForRepositoryFunc.appendCall",
                    "documentation": {
                      "identifier": "IndexEnqueuerForceQueueIndexesForRepositoryFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.IndexEnqueuerForceQueueIndexesForRepositoryFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerForceQueueIndexesForRepositoryFunc) appendCall(r0 IndexEnqueuerForceQueueIndexesForRepositoryFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerForceQueueIndexesForRepositoryFunc) appendCall(r0 IndexEnqueuerForceQueueIndexesForRepositoryFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerForceQueueIndexesForRepositoryFunc.nextHook",
                    "documentation": {
                      "identifier": "IndexEnqueuerForceQueueIndexesForRepositoryFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.IndexEnqueuerForceQueueIndexesForRepositoryFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerForceQueueIndexesForRepositoryFunc) nextHook() func(context.Context, int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerForceQueueIndexesForRepositoryFunc) nextHook() func(context.Context, int) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerForceQueueIndexesForRepositoryFuncCall",
              "documentation": {
                "identifier": "IndexEnqueuerForceQueueIndexesForRepositoryFuncCall",
                "newPage": false,
                "searchKey": "resolvers.IndexEnqueuerForceQueueIndexesForRepositoryFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexEnqueuerForceQueueIndexesForRepositoryFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexEnqueuerForceQueueIndexesForRepositoryFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nIndexEnqueuerForceQueueIndexesForRepositoryFuncCall is an object that describes an invocation of method ForceQueueIndexesForRepository on an instance of MockIndexEnqueuer. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerForceQueueIndexesForRepositoryFuncCall.Args",
                    "documentation": {
                      "identifier": "IndexEnqueuerForceQueueIndexesForRepositoryFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.IndexEnqueuerForceQueueIndexesForRepositoryFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c IndexEnqueuerForceQueueIndexesForRepositoryFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c IndexEnqueuerForceQueueIndexesForRepositoryFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerForceQueueIndexesForRepositoryFuncCall.Results",
                    "documentation": {
                      "identifier": "IndexEnqueuerForceQueueIndexesForRepositoryFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.IndexEnqueuerForceQueueIndexesForRepositoryFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c IndexEnqueuerForceQueueIndexesForRepositoryFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c IndexEnqueuerForceQueueIndexesForRepositoryFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerInferIndexConfigurationFunc",
              "documentation": {
                "identifier": "IndexEnqueuerInferIndexConfigurationFunc",
                "newPage": false,
                "searchKey": "resolvers.IndexEnqueuerInferIndexConfigurationFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexEnqueuerInferIndexConfigurationFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexEnqueuerInferIndexConfigurationFunc struct {\n\tdefaultHook func(context.Context, int) (*config.IndexConfiguration, error)\n\thooks       []func(context.Context, int) (*config.IndexConfiguration, error)\n\thistory     []IndexEnqueuerInferIndexConfigurationFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nIndexEnqueuerInferIndexConfigurationFunc describes the behavior when the InferIndexConfiguration method of the parent MockIndexEnqueuer instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerInferIndexConfigurationFunc.History",
                    "documentation": {
                      "identifier": "IndexEnqueuerInferIndexConfigurationFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.IndexEnqueuerInferIndexConfigurationFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerInferIndexConfigurationFunc) History() []IndexEnqueuerInferIndexConfigurationFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerInferIndexConfigurationFunc) History() []IndexEnqueuerInferIndexConfigurationFuncCall\n```\n\nHistory returns a sequence of IndexEnqueuerInferIndexConfigurationFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerInferIndexConfigurationFunc.PushHook",
                    "documentation": {
                      "identifier": "IndexEnqueuerInferIndexConfigurationFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.IndexEnqueuerInferIndexConfigurationFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerInferIndexConfigurationFunc) PushHook(hook func(context.Context, int) (*config.IndexConfiguration, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerInferIndexConfigurationFunc) PushHook(hook func(context.Context, int) (*config.IndexConfiguration, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the InferIndexConfiguration method of the parent MockIndexEnqueuer instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerInferIndexConfigurationFunc.PushReturn",
                    "documentation": {
                      "identifier": "IndexEnqueuerInferIndexConfigurationFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.IndexEnqueuerInferIndexConfigurationFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerInferIndexConfigurationFunc) PushReturn(r0 *config.IndexConfiguration, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerInferIndexConfigurationFunc) PushReturn(r0 *config.IndexConfiguration, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerInferIndexConfigurationFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "IndexEnqueuerInferIndexConfigurationFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.IndexEnqueuerInferIndexConfigurationFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerInferIndexConfigurationFunc) SetDefaultHook(hook func(context.Context, int) (*config.IndexConfiguration, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerInferIndexConfigurationFunc) SetDefaultHook(hook func(context.Context, int) (*config.IndexConfiguration, error))\n```\n\nSetDefaultHook sets function that is called when the InferIndexConfiguration method of the parent MockIndexEnqueuer instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerInferIndexConfigurationFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "IndexEnqueuerInferIndexConfigurationFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.IndexEnqueuerInferIndexConfigurationFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerInferIndexConfigurationFunc) SetDefaultReturn(r0 *config.IndexConfiguration, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerInferIndexConfigurationFunc) SetDefaultReturn(r0 *config.IndexConfiguration, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerInferIndexConfigurationFunc.appendCall",
                    "documentation": {
                      "identifier": "IndexEnqueuerInferIndexConfigurationFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.IndexEnqueuerInferIndexConfigurationFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerInferIndexConfigurationFunc) appendCall(r0 IndexEnqueuerInferIndexConfigurationFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerInferIndexConfigurationFunc) appendCall(r0 IndexEnqueuerInferIndexConfigurationFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerInferIndexConfigurationFunc.nextHook",
                    "documentation": {
                      "identifier": "IndexEnqueuerInferIndexConfigurationFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.IndexEnqueuerInferIndexConfigurationFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerInferIndexConfigurationFunc) nextHook() func(context.Context, int) (*config.IndexConfiguration, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerInferIndexConfigurationFunc) nextHook() func(context.Context, int) (*config.IndexConfiguration, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerInferIndexConfigurationFuncCall",
              "documentation": {
                "identifier": "IndexEnqueuerInferIndexConfigurationFuncCall",
                "newPage": false,
                "searchKey": "resolvers.IndexEnqueuerInferIndexConfigurationFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexEnqueuerInferIndexConfigurationFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexEnqueuerInferIndexConfigurationFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *config.IndexConfiguration\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nIndexEnqueuerInferIndexConfigurationFuncCall is an object that describes an invocation of method InferIndexConfiguration on an instance of MockIndexEnqueuer. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerInferIndexConfigurationFuncCall.Args",
                    "documentation": {
                      "identifier": "IndexEnqueuerInferIndexConfigurationFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.IndexEnqueuerInferIndexConfigurationFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c IndexEnqueuerInferIndexConfigurationFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c IndexEnqueuerInferIndexConfigurationFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexEnqueuerInferIndexConfigurationFuncCall.Results",
                    "documentation": {
                      "identifier": "IndexEnqueuerInferIndexConfigurationFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.IndexEnqueuerInferIndexConfigurationFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c IndexEnqueuerInferIndexConfigurationFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c IndexEnqueuerInferIndexConfigurationFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexesResolver",
              "documentation": {
                "identifier": "IndexesResolver",
                "newPage": false,
                "searchKey": "resolvers.IndexesResolver",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexesResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexesResolver struct {\n\tdbStore DBStore\n\topts    store.GetIndexesOptions\n\tonce    sync.Once\n\t//\n\tIndexes    []store.Index\n\tTotalCount int\n\tNextOffset *int\n\terr        error\n}\n```\n\nIndexesResolver wraps store.GetIndexes so that the underlying function can be invoked lazily and its results memoized. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewIndexesResolver",
                    "documentation": {
                      "identifier": "NewIndexesResolver",
                      "newPage": false,
                      "searchKey": "resolvers.NewIndexesResolver",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewIndexesResolver(dbStore DBStore, opts store.GetIndexesOptions) *IndexesResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewIndexesResolver(dbStore DBStore, opts store.GetIndexesOptions) *IndexesResolver\n```\n\nNewIndexesResolver creates a new IndexesResolver which wil invoke store.GetIndexes with the given options. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexesResolver.Resolve",
                    "documentation": {
                      "identifier": "IndexesResolver.Resolve",
                      "newPage": false,
                      "searchKey": "resolvers.IndexesResolver.Resolve",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexesResolver) Resolve(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexesResolver) Resolve(ctx context.Context) error\n```\n\nResolve ensures that store.GetIndexes has been invoked. This function returns the error from the invocation, if any. If the error is nil, then the resolver's Indexes, TotalCount, and NextOffset fields will be populated. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#IndexesResolver.resolve",
                    "documentation": {
                      "identifier": "IndexesResolver.resolve",
                      "newPage": false,
                      "searchKey": "resolvers.IndexesResolver.resolve",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *IndexesResolver) resolve(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *IndexesResolver) resolve(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStore",
              "documentation": {
                "identifier": "LSIFStore",
                "newPage": false,
                "searchKey": "resolvers.LSIFStore",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStore interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStore interface {\n\tExists(ctx context.Context, bundleID int, path string) (bool, error)\n\tRanges(ctx context.Context, bundleID int, path string, startLine, endLine int) ([]lsifstore.CodeIntelligenceRange, error)\n\tDefinitions(ctx context.Context, bundleID int, path string, line, character, limit, offset int) ([]lsifstore.Location, int, error)\n\tReferences(ctx context.Context, bundleID int, path string, line, character, limit, offset int) ([]lsifstore.Location, int, error)\n\tHover(ctx context.Context, bundleID int, path string, line, character int) (string, lsifstore.Range, bool, error)\n\tDiagnostics(ctx context.Context, bundleID int, prefix string, limit, offset int) ([]lsifstore.Diagnostic, int, error)\n\tMonikersByPosition(ctx context.Context, bundleID int, path string, line, character int) ([][]semantic.MonikerData, error)\n\tBulkMonikerResults(ctx context.Context, tableName string, ids []int, args []semantic.MonikerData, limit, offset int) (_ []lsifstore.Location, _ int, err error)\n\tPackageInformation(ctx context.Context, bundleID int, path string, packageInformationID string) (semantic.PackageInformationData, bool, error)\n\tDocumentationPage(ctx context.Context, bundleID int, pathID string) (*semantic.DocumentationPageData, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreBulkMonikerResultsFunc",
              "documentation": {
                "identifier": "LSIFStoreBulkMonikerResultsFunc",
                "newPage": false,
                "searchKey": "resolvers.LSIFStoreBulkMonikerResultsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreBulkMonikerResultsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreBulkMonikerResultsFunc struct {\n\tdefaultHook func(context.Context, string, []int, []semantic.MonikerData, int, int) ([]lsifstore.Location, int, error)\n\thooks       []func(context.Context, string, []int, []semantic.MonikerData, int, int) ([]lsifstore.Location, int, error)\n\thistory     []LSIFStoreBulkMonikerResultsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nLSIFStoreBulkMonikerResultsFunc describes the behavior when the BulkMonikerResults method of the parent MockLSIFStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreBulkMonikerResultsFunc.History",
                    "documentation": {
                      "identifier": "LSIFStoreBulkMonikerResultsFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreBulkMonikerResultsFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreBulkMonikerResultsFunc) History() []LSIFStoreBulkMonikerResultsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreBulkMonikerResultsFunc) History() []LSIFStoreBulkMonikerResultsFuncCall\n```\n\nHistory returns a sequence of LSIFStoreBulkMonikerResultsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreBulkMonikerResultsFunc.PushHook",
                    "documentation": {
                      "identifier": "LSIFStoreBulkMonikerResultsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreBulkMonikerResultsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreBulkMonikerResultsFunc) PushHook(hook func(context.Context, string, []int, []semantic.MonikerData, int, int) ([]lsifstore.Location, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreBulkMonikerResultsFunc) PushHook(hook func(context.Context, string, []int, []semantic.MonikerData, int, int) ([]lsifstore.Location, int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the BulkMonikerResults method of the parent MockLSIFStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreBulkMonikerResultsFunc.PushReturn",
                    "documentation": {
                      "identifier": "LSIFStoreBulkMonikerResultsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreBulkMonikerResultsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreBulkMonikerResultsFunc) PushReturn(r0 []lsifstore.Location, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreBulkMonikerResultsFunc) PushReturn(r0 []lsifstore.Location, r1 int, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreBulkMonikerResultsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "LSIFStoreBulkMonikerResultsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreBulkMonikerResultsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreBulkMonikerResultsFunc) SetDefaultHook(hook func(context.Context, string, []int, []semantic.MonikerData, int, int) ([]lsifstore.Location, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreBulkMonikerResultsFunc) SetDefaultHook(hook func(context.Context, string, []int, []semantic.MonikerData, int, int) ([]lsifstore.Location, int, error))\n```\n\nSetDefaultHook sets function that is called when the BulkMonikerResults method of the parent MockLSIFStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreBulkMonikerResultsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "LSIFStoreBulkMonikerResultsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreBulkMonikerResultsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreBulkMonikerResultsFunc) SetDefaultReturn(r0 []lsifstore.Location, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreBulkMonikerResultsFunc) SetDefaultReturn(r0 []lsifstore.Location, r1 int, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreBulkMonikerResultsFunc.appendCall",
                    "documentation": {
                      "identifier": "LSIFStoreBulkMonikerResultsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreBulkMonikerResultsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreBulkMonikerResultsFunc) appendCall(r0 LSIFStoreBulkMonikerResultsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreBulkMonikerResultsFunc) appendCall(r0 LSIFStoreBulkMonikerResultsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreBulkMonikerResultsFunc.nextHook",
                    "documentation": {
                      "identifier": "LSIFStoreBulkMonikerResultsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreBulkMonikerResultsFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreBulkMonikerResultsFunc) nextHook() func(context.Context, string, []int, []semantic.MonikerData, int, int) ([]lsifstore.Location, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreBulkMonikerResultsFunc) nextHook() func(context.Context, string, []int, []semantic.MonikerData, int, int) ([]lsifstore.Location, int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreBulkMonikerResultsFuncCall",
              "documentation": {
                "identifier": "LSIFStoreBulkMonikerResultsFuncCall",
                "newPage": false,
                "searchKey": "resolvers.LSIFStoreBulkMonikerResultsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreBulkMonikerResultsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreBulkMonikerResultsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 string\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 []int\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 []semantic.MonikerData\n\t// Arg4 is the value of the 5th argument passed to this method\n\t// invocation.\n\tArg4 int\n\t// Arg5 is the value of the 6th argument passed to this method\n\t// invocation.\n\tArg5 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []lsifstore.Location\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 int\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nLSIFStoreBulkMonikerResultsFuncCall is an object that describes an invocation of method BulkMonikerResults on an instance of MockLSIFStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreBulkMonikerResultsFuncCall.Args",
                    "documentation": {
                      "identifier": "LSIFStoreBulkMonikerResultsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreBulkMonikerResultsFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreBulkMonikerResultsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreBulkMonikerResultsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreBulkMonikerResultsFuncCall.Results",
                    "documentation": {
                      "identifier": "LSIFStoreBulkMonikerResultsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreBulkMonikerResultsFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreBulkMonikerResultsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreBulkMonikerResultsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDefinitionsFunc",
              "documentation": {
                "identifier": "LSIFStoreDefinitionsFunc",
                "newPage": false,
                "searchKey": "resolvers.LSIFStoreDefinitionsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreDefinitionsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreDefinitionsFunc struct {\n\tdefaultHook func(context.Context, int, string, int, int, int, int) ([]lsifstore.Location, int, error)\n\thooks       []func(context.Context, int, string, int, int, int, int) ([]lsifstore.Location, int, error)\n\thistory     []LSIFStoreDefinitionsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nLSIFStoreDefinitionsFunc describes the behavior when the Definitions method of the parent MockLSIFStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDefinitionsFunc.History",
                    "documentation": {
                      "identifier": "LSIFStoreDefinitionsFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDefinitionsFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDefinitionsFunc) History() []LSIFStoreDefinitionsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDefinitionsFunc) History() []LSIFStoreDefinitionsFuncCall\n```\n\nHistory returns a sequence of LSIFStoreDefinitionsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDefinitionsFunc.PushHook",
                    "documentation": {
                      "identifier": "LSIFStoreDefinitionsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDefinitionsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDefinitionsFunc) PushHook(hook func(context.Context, int, string, int, int, int, int) ([]lsifstore.Location, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDefinitionsFunc) PushHook(hook func(context.Context, int, string, int, int, int, int) ([]lsifstore.Location, int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Definitions method of the parent MockLSIFStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDefinitionsFunc.PushReturn",
                    "documentation": {
                      "identifier": "LSIFStoreDefinitionsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDefinitionsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDefinitionsFunc) PushReturn(r0 []lsifstore.Location, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDefinitionsFunc) PushReturn(r0 []lsifstore.Location, r1 int, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDefinitionsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "LSIFStoreDefinitionsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDefinitionsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDefinitionsFunc) SetDefaultHook(hook func(context.Context, int, string, int, int, int, int) ([]lsifstore.Location, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDefinitionsFunc) SetDefaultHook(hook func(context.Context, int, string, int, int, int, int) ([]lsifstore.Location, int, error))\n```\n\nSetDefaultHook sets function that is called when the Definitions method of the parent MockLSIFStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDefinitionsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "LSIFStoreDefinitionsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDefinitionsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDefinitionsFunc) SetDefaultReturn(r0 []lsifstore.Location, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDefinitionsFunc) SetDefaultReturn(r0 []lsifstore.Location, r1 int, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDefinitionsFunc.appendCall",
                    "documentation": {
                      "identifier": "LSIFStoreDefinitionsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDefinitionsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDefinitionsFunc) appendCall(r0 LSIFStoreDefinitionsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDefinitionsFunc) appendCall(r0 LSIFStoreDefinitionsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDefinitionsFunc.nextHook",
                    "documentation": {
                      "identifier": "LSIFStoreDefinitionsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDefinitionsFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDefinitionsFunc) nextHook() func(context.Context, int, string, int, int, int, int) ([]lsifstore.Location, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDefinitionsFunc) nextHook() func(context.Context, int, string, int, int, int, int) ([]lsifstore.Location, int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDefinitionsFuncCall",
              "documentation": {
                "identifier": "LSIFStoreDefinitionsFuncCall",
                "newPage": false,
                "searchKey": "resolvers.LSIFStoreDefinitionsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreDefinitionsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreDefinitionsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 int\n\t// Arg4 is the value of the 5th argument passed to this method\n\t// invocation.\n\tArg4 int\n\t// Arg5 is the value of the 6th argument passed to this method\n\t// invocation.\n\tArg5 int\n\t// Arg6 is the value of the 7th argument passed to this method\n\t// invocation.\n\tArg6 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []lsifstore.Location\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 int\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nLSIFStoreDefinitionsFuncCall is an object that describes an invocation of method Definitions on an instance of MockLSIFStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDefinitionsFuncCall.Args",
                    "documentation": {
                      "identifier": "LSIFStoreDefinitionsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDefinitionsFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreDefinitionsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreDefinitionsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDefinitionsFuncCall.Results",
                    "documentation": {
                      "identifier": "LSIFStoreDefinitionsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDefinitionsFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreDefinitionsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreDefinitionsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDiagnosticsFunc",
              "documentation": {
                "identifier": "LSIFStoreDiagnosticsFunc",
                "newPage": false,
                "searchKey": "resolvers.LSIFStoreDiagnosticsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreDiagnosticsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreDiagnosticsFunc struct {\n\tdefaultHook func(context.Context, int, string, int, int) ([]lsifstore.Diagnostic, int, error)\n\thooks       []func(context.Context, int, string, int, int) ([]lsifstore.Diagnostic, int, error)\n\thistory     []LSIFStoreDiagnosticsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nLSIFStoreDiagnosticsFunc describes the behavior when the Diagnostics method of the parent MockLSIFStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDiagnosticsFunc.History",
                    "documentation": {
                      "identifier": "LSIFStoreDiagnosticsFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDiagnosticsFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDiagnosticsFunc) History() []LSIFStoreDiagnosticsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDiagnosticsFunc) History() []LSIFStoreDiagnosticsFuncCall\n```\n\nHistory returns a sequence of LSIFStoreDiagnosticsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDiagnosticsFunc.PushHook",
                    "documentation": {
                      "identifier": "LSIFStoreDiagnosticsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDiagnosticsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDiagnosticsFunc) PushHook(hook func(context.Context, int, string, int, int) ([]lsifstore.Diagnostic, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDiagnosticsFunc) PushHook(hook func(context.Context, int, string, int, int) ([]lsifstore.Diagnostic, int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Diagnostics method of the parent MockLSIFStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDiagnosticsFunc.PushReturn",
                    "documentation": {
                      "identifier": "LSIFStoreDiagnosticsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDiagnosticsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDiagnosticsFunc) PushReturn(r0 []lsifstore.Diagnostic, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDiagnosticsFunc) PushReturn(r0 []lsifstore.Diagnostic, r1 int, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDiagnosticsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "LSIFStoreDiagnosticsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDiagnosticsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDiagnosticsFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) ([]lsifstore.Diagnostic, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDiagnosticsFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) ([]lsifstore.Diagnostic, int, error))\n```\n\nSetDefaultHook sets function that is called when the Diagnostics method of the parent MockLSIFStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDiagnosticsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "LSIFStoreDiagnosticsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDiagnosticsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDiagnosticsFunc) SetDefaultReturn(r0 []lsifstore.Diagnostic, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDiagnosticsFunc) SetDefaultReturn(r0 []lsifstore.Diagnostic, r1 int, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDiagnosticsFunc.appendCall",
                    "documentation": {
                      "identifier": "LSIFStoreDiagnosticsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDiagnosticsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDiagnosticsFunc) appendCall(r0 LSIFStoreDiagnosticsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDiagnosticsFunc) appendCall(r0 LSIFStoreDiagnosticsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDiagnosticsFunc.nextHook",
                    "documentation": {
                      "identifier": "LSIFStoreDiagnosticsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDiagnosticsFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDiagnosticsFunc) nextHook() func(context.Context, int, string, int, int) ([]lsifstore.Diagnostic, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDiagnosticsFunc) nextHook() func(context.Context, int, string, int, int) ([]lsifstore.Diagnostic, int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDiagnosticsFuncCall",
              "documentation": {
                "identifier": "LSIFStoreDiagnosticsFuncCall",
                "newPage": false,
                "searchKey": "resolvers.LSIFStoreDiagnosticsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreDiagnosticsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreDiagnosticsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 int\n\t// Arg4 is the value of the 5th argument passed to this method\n\t// invocation.\n\tArg4 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []lsifstore.Diagnostic\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 int\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nLSIFStoreDiagnosticsFuncCall is an object that describes an invocation of method Diagnostics on an instance of MockLSIFStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDiagnosticsFuncCall.Args",
                    "documentation": {
                      "identifier": "LSIFStoreDiagnosticsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDiagnosticsFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreDiagnosticsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreDiagnosticsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDiagnosticsFuncCall.Results",
                    "documentation": {
                      "identifier": "LSIFStoreDiagnosticsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDiagnosticsFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreDiagnosticsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreDiagnosticsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDocumentationPageFunc",
              "documentation": {
                "identifier": "LSIFStoreDocumentationPageFunc",
                "newPage": false,
                "searchKey": "resolvers.LSIFStoreDocumentationPageFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreDocumentationPageFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreDocumentationPageFunc struct {\n\tdefaultHook func(context.Context, int, string) (*semantic.DocumentationPageData, error)\n\thooks       []func(context.Context, int, string) (*semantic.DocumentationPageData, error)\n\thistory     []LSIFStoreDocumentationPageFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nLSIFStoreDocumentationPageFunc describes the behavior when the DocumentationPage method of the parent MockLSIFStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDocumentationPageFunc.History",
                    "documentation": {
                      "identifier": "LSIFStoreDocumentationPageFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDocumentationPageFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDocumentationPageFunc) History() []LSIFStoreDocumentationPageFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDocumentationPageFunc) History() []LSIFStoreDocumentationPageFuncCall\n```\n\nHistory returns a sequence of LSIFStoreDocumentationPageFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDocumentationPageFunc.PushHook",
                    "documentation": {
                      "identifier": "LSIFStoreDocumentationPageFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDocumentationPageFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDocumentationPageFunc) PushHook(hook func(context.Context, int, string) (*semantic.DocumentationPageData, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDocumentationPageFunc) PushHook(hook func(context.Context, int, string) (*semantic.DocumentationPageData, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the DocumentationPage method of the parent MockLSIFStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDocumentationPageFunc.PushReturn",
                    "documentation": {
                      "identifier": "LSIFStoreDocumentationPageFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDocumentationPageFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDocumentationPageFunc) PushReturn(r0 *semantic.DocumentationPageData, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDocumentationPageFunc) PushReturn(r0 *semantic.DocumentationPageData, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDocumentationPageFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "LSIFStoreDocumentationPageFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDocumentationPageFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDocumentationPageFunc) SetDefaultHook(hook func(context.Context, int, string) (*semantic.DocumentationPageData, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDocumentationPageFunc) SetDefaultHook(hook func(context.Context, int, string) (*semantic.DocumentationPageData, error))\n```\n\nSetDefaultHook sets function that is called when the DocumentationPage method of the parent MockLSIFStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDocumentationPageFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "LSIFStoreDocumentationPageFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDocumentationPageFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDocumentationPageFunc) SetDefaultReturn(r0 *semantic.DocumentationPageData, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDocumentationPageFunc) SetDefaultReturn(r0 *semantic.DocumentationPageData, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDocumentationPageFunc.appendCall",
                    "documentation": {
                      "identifier": "LSIFStoreDocumentationPageFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDocumentationPageFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDocumentationPageFunc) appendCall(r0 LSIFStoreDocumentationPageFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDocumentationPageFunc) appendCall(r0 LSIFStoreDocumentationPageFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDocumentationPageFunc.nextHook",
                    "documentation": {
                      "identifier": "LSIFStoreDocumentationPageFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDocumentationPageFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreDocumentationPageFunc) nextHook() func(context.Context, int, string) (*semantic.DocumentationPageData, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreDocumentationPageFunc) nextHook() func(context.Context, int, string) (*semantic.DocumentationPageData, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDocumentationPageFuncCall",
              "documentation": {
                "identifier": "LSIFStoreDocumentationPageFuncCall",
                "newPage": false,
                "searchKey": "resolvers.LSIFStoreDocumentationPageFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreDocumentationPageFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreDocumentationPageFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *semantic.DocumentationPageData\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nLSIFStoreDocumentationPageFuncCall is an object that describes an invocation of method DocumentationPage on an instance of MockLSIFStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDocumentationPageFuncCall.Args",
                    "documentation": {
                      "identifier": "LSIFStoreDocumentationPageFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDocumentationPageFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreDocumentationPageFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreDocumentationPageFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreDocumentationPageFuncCall.Results",
                    "documentation": {
                      "identifier": "LSIFStoreDocumentationPageFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreDocumentationPageFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreDocumentationPageFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreDocumentationPageFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreExistsFunc",
              "documentation": {
                "identifier": "LSIFStoreExistsFunc",
                "newPage": false,
                "searchKey": "resolvers.LSIFStoreExistsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreExistsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreExistsFunc struct {\n\tdefaultHook func(context.Context, int, string) (bool, error)\n\thooks       []func(context.Context, int, string) (bool, error)\n\thistory     []LSIFStoreExistsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nLSIFStoreExistsFunc describes the behavior when the Exists method of the parent MockLSIFStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreExistsFunc.History",
                    "documentation": {
                      "identifier": "LSIFStoreExistsFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreExistsFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreExistsFunc) History() []LSIFStoreExistsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreExistsFunc) History() []LSIFStoreExistsFuncCall\n```\n\nHistory returns a sequence of LSIFStoreExistsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreExistsFunc.PushHook",
                    "documentation": {
                      "identifier": "LSIFStoreExistsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreExistsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreExistsFunc) PushHook(hook func(context.Context, int, string) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreExistsFunc) PushHook(hook func(context.Context, int, string) (bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Exists method of the parent MockLSIFStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreExistsFunc.PushReturn",
                    "documentation": {
                      "identifier": "LSIFStoreExistsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreExistsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreExistsFunc) PushReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreExistsFunc) PushReturn(r0 bool, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreExistsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "LSIFStoreExistsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreExistsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreExistsFunc) SetDefaultHook(hook func(context.Context, int, string) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreExistsFunc) SetDefaultHook(hook func(context.Context, int, string) (bool, error))\n```\n\nSetDefaultHook sets function that is called when the Exists method of the parent MockLSIFStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreExistsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "LSIFStoreExistsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreExistsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreExistsFunc) SetDefaultReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreExistsFunc) SetDefaultReturn(r0 bool, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreExistsFunc.appendCall",
                    "documentation": {
                      "identifier": "LSIFStoreExistsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreExistsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreExistsFunc) appendCall(r0 LSIFStoreExistsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreExistsFunc) appendCall(r0 LSIFStoreExistsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreExistsFunc.nextHook",
                    "documentation": {
                      "identifier": "LSIFStoreExistsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreExistsFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreExistsFunc) nextHook() func(context.Context, int, string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreExistsFunc) nextHook() func(context.Context, int, string) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreExistsFuncCall",
              "documentation": {
                "identifier": "LSIFStoreExistsFuncCall",
                "newPage": false,
                "searchKey": "resolvers.LSIFStoreExistsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreExistsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreExistsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 bool\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nLSIFStoreExistsFuncCall is an object that describes an invocation of method Exists on an instance of MockLSIFStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreExistsFuncCall.Args",
                    "documentation": {
                      "identifier": "LSIFStoreExistsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreExistsFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreExistsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreExistsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreExistsFuncCall.Results",
                    "documentation": {
                      "identifier": "LSIFStoreExistsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreExistsFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreExistsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreExistsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreHoverFunc",
              "documentation": {
                "identifier": "LSIFStoreHoverFunc",
                "newPage": false,
                "searchKey": "resolvers.LSIFStoreHoverFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreHoverFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreHoverFunc struct {\n\tdefaultHook func(context.Context, int, string, int, int) (string, lsifstore.Range, bool, error)\n\thooks       []func(context.Context, int, string, int, int) (string, lsifstore.Range, bool, error)\n\thistory     []LSIFStoreHoverFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nLSIFStoreHoverFunc describes the behavior when the Hover method of the parent MockLSIFStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreHoverFunc.History",
                    "documentation": {
                      "identifier": "LSIFStoreHoverFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreHoverFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreHoverFunc) History() []LSIFStoreHoverFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreHoverFunc) History() []LSIFStoreHoverFuncCall\n```\n\nHistory returns a sequence of LSIFStoreHoverFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreHoverFunc.PushHook",
                    "documentation": {
                      "identifier": "LSIFStoreHoverFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreHoverFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreHoverFunc) PushHook(hook func(context.Context, int, string, int, int) (string, lsifstore.Range, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreHoverFunc) PushHook(hook func(context.Context, int, string, int, int) (string, lsifstore.Range, bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Hover method of the parent MockLSIFStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreHoverFunc.PushReturn",
                    "documentation": {
                      "identifier": "LSIFStoreHoverFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreHoverFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreHoverFunc) PushReturn(r0 string, r1 lsifstore.Range, r2 bool, r3 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreHoverFunc) PushReturn(r0 string, r1 lsifstore.Range, r2 bool, r3 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreHoverFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "LSIFStoreHoverFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreHoverFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreHoverFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) (string, lsifstore.Range, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreHoverFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) (string, lsifstore.Range, bool, error))\n```\n\nSetDefaultHook sets function that is called when the Hover method of the parent MockLSIFStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreHoverFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "LSIFStoreHoverFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreHoverFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreHoverFunc) SetDefaultReturn(r0 string, r1 lsifstore.Range, r2 bool, r3 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreHoverFunc) SetDefaultReturn(r0 string, r1 lsifstore.Range, r2 bool, r3 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreHoverFunc.appendCall",
                    "documentation": {
                      "identifier": "LSIFStoreHoverFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreHoverFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreHoverFunc) appendCall(r0 LSIFStoreHoverFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreHoverFunc) appendCall(r0 LSIFStoreHoverFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreHoverFunc.nextHook",
                    "documentation": {
                      "identifier": "LSIFStoreHoverFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreHoverFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreHoverFunc) nextHook() func(context.Context, int, string, int, int) (string, lsifstore.Range, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreHoverFunc) nextHook() func(context.Context, int, string, int, int) (string, lsifstore.Range, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreHoverFuncCall",
              "documentation": {
                "identifier": "LSIFStoreHoverFuncCall",
                "newPage": false,
                "searchKey": "resolvers.LSIFStoreHoverFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreHoverFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreHoverFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 int\n\t// Arg4 is the value of the 5th argument passed to this method\n\t// invocation.\n\tArg4 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 string\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 lsifstore.Range\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 bool\n\t// Result3 is the value of the 4th result returned from this method\n\t// invocation.\n\tResult3 error\n}\n```\n\nLSIFStoreHoverFuncCall is an object that describes an invocation of method Hover on an instance of MockLSIFStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreHoverFuncCall.Args",
                    "documentation": {
                      "identifier": "LSIFStoreHoverFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreHoverFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreHoverFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreHoverFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreHoverFuncCall.Results",
                    "documentation": {
                      "identifier": "LSIFStoreHoverFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreHoverFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreHoverFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreHoverFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreMonikersByPositionFunc",
              "documentation": {
                "identifier": "LSIFStoreMonikersByPositionFunc",
                "newPage": false,
                "searchKey": "resolvers.LSIFStoreMonikersByPositionFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreMonikersByPositionFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreMonikersByPositionFunc struct {\n\tdefaultHook func(context.Context, int, string, int, int) ([][]semantic.MonikerData, error)\n\thooks       []func(context.Context, int, string, int, int) ([][]semantic.MonikerData, error)\n\thistory     []LSIFStoreMonikersByPositionFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nLSIFStoreMonikersByPositionFunc describes the behavior when the MonikersByPosition method of the parent MockLSIFStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreMonikersByPositionFunc.History",
                    "documentation": {
                      "identifier": "LSIFStoreMonikersByPositionFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreMonikersByPositionFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreMonikersByPositionFunc) History() []LSIFStoreMonikersByPositionFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreMonikersByPositionFunc) History() []LSIFStoreMonikersByPositionFuncCall\n```\n\nHistory returns a sequence of LSIFStoreMonikersByPositionFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreMonikersByPositionFunc.PushHook",
                    "documentation": {
                      "identifier": "LSIFStoreMonikersByPositionFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreMonikersByPositionFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreMonikersByPositionFunc) PushHook(hook func(context.Context, int, string, int, int) ([][]semantic.MonikerData, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreMonikersByPositionFunc) PushHook(hook func(context.Context, int, string, int, int) ([][]semantic.MonikerData, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the MonikersByPosition method of the parent MockLSIFStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreMonikersByPositionFunc.PushReturn",
                    "documentation": {
                      "identifier": "LSIFStoreMonikersByPositionFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreMonikersByPositionFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreMonikersByPositionFunc) PushReturn(r0 [][]semantic.MonikerData, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreMonikersByPositionFunc) PushReturn(r0 [][]semantic.MonikerData, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreMonikersByPositionFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "LSIFStoreMonikersByPositionFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreMonikersByPositionFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreMonikersByPositionFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) ([][]semantic.MonikerData, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreMonikersByPositionFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) ([][]semantic.MonikerData, error))\n```\n\nSetDefaultHook sets function that is called when the MonikersByPosition method of the parent MockLSIFStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreMonikersByPositionFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "LSIFStoreMonikersByPositionFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreMonikersByPositionFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreMonikersByPositionFunc) SetDefaultReturn(r0 [][]semantic.MonikerData, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreMonikersByPositionFunc) SetDefaultReturn(r0 [][]semantic.MonikerData, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreMonikersByPositionFunc.appendCall",
                    "documentation": {
                      "identifier": "LSIFStoreMonikersByPositionFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreMonikersByPositionFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreMonikersByPositionFunc) appendCall(r0 LSIFStoreMonikersByPositionFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreMonikersByPositionFunc) appendCall(r0 LSIFStoreMonikersByPositionFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreMonikersByPositionFunc.nextHook",
                    "documentation": {
                      "identifier": "LSIFStoreMonikersByPositionFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreMonikersByPositionFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreMonikersByPositionFunc) nextHook() func(context.Context, int, string, int, int) ([][]semantic.MonikerData, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreMonikersByPositionFunc) nextHook() func(context.Context, int, string, int, int) ([][]semantic.MonikerData, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreMonikersByPositionFuncCall",
              "documentation": {
                "identifier": "LSIFStoreMonikersByPositionFuncCall",
                "newPage": false,
                "searchKey": "resolvers.LSIFStoreMonikersByPositionFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreMonikersByPositionFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreMonikersByPositionFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 int\n\t// Arg4 is the value of the 5th argument passed to this method\n\t// invocation.\n\tArg4 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 [][]semantic.MonikerData\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nLSIFStoreMonikersByPositionFuncCall is an object that describes an invocation of method MonikersByPosition on an instance of MockLSIFStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreMonikersByPositionFuncCall.Args",
                    "documentation": {
                      "identifier": "LSIFStoreMonikersByPositionFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreMonikersByPositionFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreMonikersByPositionFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreMonikersByPositionFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreMonikersByPositionFuncCall.Results",
                    "documentation": {
                      "identifier": "LSIFStoreMonikersByPositionFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreMonikersByPositionFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreMonikersByPositionFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreMonikersByPositionFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStorePackageInformationFunc",
              "documentation": {
                "identifier": "LSIFStorePackageInformationFunc",
                "newPage": false,
                "searchKey": "resolvers.LSIFStorePackageInformationFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStorePackageInformationFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStorePackageInformationFunc struct {\n\tdefaultHook func(context.Context, int, string, string) (semantic.PackageInformationData, bool, error)\n\thooks       []func(context.Context, int, string, string) (semantic.PackageInformationData, bool, error)\n\thistory     []LSIFStorePackageInformationFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nLSIFStorePackageInformationFunc describes the behavior when the PackageInformation method of the parent MockLSIFStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStorePackageInformationFunc.History",
                    "documentation": {
                      "identifier": "LSIFStorePackageInformationFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStorePackageInformationFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStorePackageInformationFunc) History() []LSIFStorePackageInformationFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStorePackageInformationFunc) History() []LSIFStorePackageInformationFuncCall\n```\n\nHistory returns a sequence of LSIFStorePackageInformationFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStorePackageInformationFunc.PushHook",
                    "documentation": {
                      "identifier": "LSIFStorePackageInformationFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStorePackageInformationFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStorePackageInformationFunc) PushHook(hook func(context.Context, int, string, string) (semantic.PackageInformationData, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStorePackageInformationFunc) PushHook(hook func(context.Context, int, string, string) (semantic.PackageInformationData, bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the PackageInformation method of the parent MockLSIFStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStorePackageInformationFunc.PushReturn",
                    "documentation": {
                      "identifier": "LSIFStorePackageInformationFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStorePackageInformationFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStorePackageInformationFunc) PushReturn(r0 semantic.PackageInformationData, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStorePackageInformationFunc) PushReturn(r0 semantic.PackageInformationData, r1 bool, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStorePackageInformationFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "LSIFStorePackageInformationFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStorePackageInformationFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStorePackageInformationFunc) SetDefaultHook(hook func(context.Context, int, string, string) (semantic.PackageInformationData, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStorePackageInformationFunc) SetDefaultHook(hook func(context.Context, int, string, string) (semantic.PackageInformationData, bool, error))\n```\n\nSetDefaultHook sets function that is called when the PackageInformation method of the parent MockLSIFStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStorePackageInformationFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "LSIFStorePackageInformationFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStorePackageInformationFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStorePackageInformationFunc) SetDefaultReturn(r0 semantic.PackageInformationData, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStorePackageInformationFunc) SetDefaultReturn(r0 semantic.PackageInformationData, r1 bool, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStorePackageInformationFunc.appendCall",
                    "documentation": {
                      "identifier": "LSIFStorePackageInformationFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStorePackageInformationFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStorePackageInformationFunc) appendCall(r0 LSIFStorePackageInformationFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStorePackageInformationFunc) appendCall(r0 LSIFStorePackageInformationFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStorePackageInformationFunc.nextHook",
                    "documentation": {
                      "identifier": "LSIFStorePackageInformationFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStorePackageInformationFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStorePackageInformationFunc) nextHook() func(context.Context, int, string, string) (semantic.PackageInformationData, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStorePackageInformationFunc) nextHook() func(context.Context, int, string, string) (semantic.PackageInformationData, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStorePackageInformationFuncCall",
              "documentation": {
                "identifier": "LSIFStorePackageInformationFuncCall",
                "newPage": false,
                "searchKey": "resolvers.LSIFStorePackageInformationFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStorePackageInformationFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStorePackageInformationFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 semantic.PackageInformationData\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 bool\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nLSIFStorePackageInformationFuncCall is an object that describes an invocation of method PackageInformation on an instance of MockLSIFStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStorePackageInformationFuncCall.Args",
                    "documentation": {
                      "identifier": "LSIFStorePackageInformationFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStorePackageInformationFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStorePackageInformationFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStorePackageInformationFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStorePackageInformationFuncCall.Results",
                    "documentation": {
                      "identifier": "LSIFStorePackageInformationFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStorePackageInformationFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStorePackageInformationFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStorePackageInformationFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreRangesFunc",
              "documentation": {
                "identifier": "LSIFStoreRangesFunc",
                "newPage": false,
                "searchKey": "resolvers.LSIFStoreRangesFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreRangesFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreRangesFunc struct {\n\tdefaultHook func(context.Context, int, string, int, int) ([]lsifstore.CodeIntelligenceRange, error)\n\thooks       []func(context.Context, int, string, int, int) ([]lsifstore.CodeIntelligenceRange, error)\n\thistory     []LSIFStoreRangesFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nLSIFStoreRangesFunc describes the behavior when the Ranges method of the parent MockLSIFStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreRangesFunc.History",
                    "documentation": {
                      "identifier": "LSIFStoreRangesFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreRangesFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreRangesFunc) History() []LSIFStoreRangesFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreRangesFunc) History() []LSIFStoreRangesFuncCall\n```\n\nHistory returns a sequence of LSIFStoreRangesFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreRangesFunc.PushHook",
                    "documentation": {
                      "identifier": "LSIFStoreRangesFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreRangesFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreRangesFunc) PushHook(hook func(context.Context, int, string, int, int) ([]lsifstore.CodeIntelligenceRange, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreRangesFunc) PushHook(hook func(context.Context, int, string, int, int) ([]lsifstore.CodeIntelligenceRange, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Ranges method of the parent MockLSIFStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreRangesFunc.PushReturn",
                    "documentation": {
                      "identifier": "LSIFStoreRangesFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreRangesFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreRangesFunc) PushReturn(r0 []lsifstore.CodeIntelligenceRange, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreRangesFunc) PushReturn(r0 []lsifstore.CodeIntelligenceRange, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreRangesFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "LSIFStoreRangesFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreRangesFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreRangesFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) ([]lsifstore.CodeIntelligenceRange, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreRangesFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) ([]lsifstore.CodeIntelligenceRange, error))\n```\n\nSetDefaultHook sets function that is called when the Ranges method of the parent MockLSIFStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreRangesFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "LSIFStoreRangesFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreRangesFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreRangesFunc) SetDefaultReturn(r0 []lsifstore.CodeIntelligenceRange, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreRangesFunc) SetDefaultReturn(r0 []lsifstore.CodeIntelligenceRange, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreRangesFunc.appendCall",
                    "documentation": {
                      "identifier": "LSIFStoreRangesFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreRangesFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreRangesFunc) appendCall(r0 LSIFStoreRangesFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreRangesFunc) appendCall(r0 LSIFStoreRangesFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreRangesFunc.nextHook",
                    "documentation": {
                      "identifier": "LSIFStoreRangesFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreRangesFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreRangesFunc) nextHook() func(context.Context, int, string, int, int) ([]lsifstore.CodeIntelligenceRange, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreRangesFunc) nextHook() func(context.Context, int, string, int, int) ([]lsifstore.CodeIntelligenceRange, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreRangesFuncCall",
              "documentation": {
                "identifier": "LSIFStoreRangesFuncCall",
                "newPage": false,
                "searchKey": "resolvers.LSIFStoreRangesFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreRangesFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreRangesFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 int\n\t// Arg4 is the value of the 5th argument passed to this method\n\t// invocation.\n\tArg4 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []lsifstore.CodeIntelligenceRange\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nLSIFStoreRangesFuncCall is an object that describes an invocation of method Ranges on an instance of MockLSIFStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreRangesFuncCall.Args",
                    "documentation": {
                      "identifier": "LSIFStoreRangesFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreRangesFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreRangesFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreRangesFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreRangesFuncCall.Results",
                    "documentation": {
                      "identifier": "LSIFStoreRangesFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreRangesFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreRangesFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreRangesFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreReferencesFunc",
              "documentation": {
                "identifier": "LSIFStoreReferencesFunc",
                "newPage": false,
                "searchKey": "resolvers.LSIFStoreReferencesFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreReferencesFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreReferencesFunc struct {\n\tdefaultHook func(context.Context, int, string, int, int, int, int) ([]lsifstore.Location, int, error)\n\thooks       []func(context.Context, int, string, int, int, int, int) ([]lsifstore.Location, int, error)\n\thistory     []LSIFStoreReferencesFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nLSIFStoreReferencesFunc describes the behavior when the References method of the parent MockLSIFStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreReferencesFunc.History",
                    "documentation": {
                      "identifier": "LSIFStoreReferencesFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreReferencesFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreReferencesFunc) History() []LSIFStoreReferencesFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreReferencesFunc) History() []LSIFStoreReferencesFuncCall\n```\n\nHistory returns a sequence of LSIFStoreReferencesFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreReferencesFunc.PushHook",
                    "documentation": {
                      "identifier": "LSIFStoreReferencesFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreReferencesFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreReferencesFunc) PushHook(hook func(context.Context, int, string, int, int, int, int) ([]lsifstore.Location, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreReferencesFunc) PushHook(hook func(context.Context, int, string, int, int, int, int) ([]lsifstore.Location, int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the References method of the parent MockLSIFStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreReferencesFunc.PushReturn",
                    "documentation": {
                      "identifier": "LSIFStoreReferencesFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreReferencesFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreReferencesFunc) PushReturn(r0 []lsifstore.Location, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreReferencesFunc) PushReturn(r0 []lsifstore.Location, r1 int, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreReferencesFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "LSIFStoreReferencesFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreReferencesFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreReferencesFunc) SetDefaultHook(hook func(context.Context, int, string, int, int, int, int) ([]lsifstore.Location, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreReferencesFunc) SetDefaultHook(hook func(context.Context, int, string, int, int, int, int) ([]lsifstore.Location, int, error))\n```\n\nSetDefaultHook sets function that is called when the References method of the parent MockLSIFStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreReferencesFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "LSIFStoreReferencesFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreReferencesFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreReferencesFunc) SetDefaultReturn(r0 []lsifstore.Location, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreReferencesFunc) SetDefaultReturn(r0 []lsifstore.Location, r1 int, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreReferencesFunc.appendCall",
                    "documentation": {
                      "identifier": "LSIFStoreReferencesFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreReferencesFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreReferencesFunc) appendCall(r0 LSIFStoreReferencesFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreReferencesFunc) appendCall(r0 LSIFStoreReferencesFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreReferencesFunc.nextHook",
                    "documentation": {
                      "identifier": "LSIFStoreReferencesFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreReferencesFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreReferencesFunc) nextHook() func(context.Context, int, string, int, int, int, int) ([]lsifstore.Location, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreReferencesFunc) nextHook() func(context.Context, int, string, int, int, int, int) ([]lsifstore.Location, int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreReferencesFuncCall",
              "documentation": {
                "identifier": "LSIFStoreReferencesFuncCall",
                "newPage": false,
                "searchKey": "resolvers.LSIFStoreReferencesFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreReferencesFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreReferencesFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 int\n\t// Arg4 is the value of the 5th argument passed to this method\n\t// invocation.\n\tArg4 int\n\t// Arg5 is the value of the 6th argument passed to this method\n\t// invocation.\n\tArg5 int\n\t// Arg6 is the value of the 7th argument passed to this method\n\t// invocation.\n\tArg6 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []lsifstore.Location\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 int\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nLSIFStoreReferencesFuncCall is an object that describes an invocation of method References on an instance of MockLSIFStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreReferencesFuncCall.Args",
                    "documentation": {
                      "identifier": "LSIFStoreReferencesFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreReferencesFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreReferencesFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreReferencesFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#LSIFStoreReferencesFuncCall.Results",
                    "documentation": {
                      "identifier": "LSIFStoreReferencesFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.LSIFStoreReferencesFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreReferencesFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreReferencesFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore",
              "documentation": {
                "identifier": "MockDBStore",
                "newPage": false,
                "searchKey": "resolvers.MockDBStore",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockDBStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockDBStore struct {\n\t// CommitGraphMetadataFunc is an instance of a mock function object\n\t// controlling the behavior of the method CommitGraphMetadata.\n\tCommitGraphMetadataFunc *DBStoreCommitGraphMetadataFunc\n\t// DefinitionDumpsFunc is an instance of a mock function object\n\t// controlling the behavior of the method DefinitionDumps.\n\tDefinitionDumpsFunc *DBStoreDefinitionDumpsFunc\n\t// DeleteIndexByIDFunc is an instance of a mock function object\n\t// controlling the behavior of the method DeleteIndexByID.\n\tDeleteIndexByIDFunc *DBStoreDeleteIndexByIDFunc\n\t// DeleteUploadByIDFunc is an instance of a mock function object\n\t// controlling the behavior of the method DeleteUploadByID.\n\tDeleteUploadByIDFunc *DBStoreDeleteUploadByIDFunc\n\t// FindClosestDumpsFunc is an instance of a mock function object\n\t// controlling the behavior of the method FindClosestDumps.\n\tFindClosestDumpsFunc *DBStoreFindClosestDumpsFunc\n\t// FindClosestDumpsFromGraphFragmentFunc is an instance of a mock\n\t// function object controlling the behavior of the method\n\t// FindClosestDumpsFromGraphFragment.\n\tFindClosestDumpsFromGraphFragmentFunc *DBStoreFindClosestDumpsFromGraphFragmentFunc\n\t// GetDumpsByIDsFunc is an instance of a mock function object\n\t// controlling the behavior of the method GetDumpsByIDs.\n\tGetDumpsByIDsFunc *DBStoreGetDumpsByIDsFunc\n\t// GetIndexByIDFunc is an instance of a mock function object controlling\n\t// the behavior of the method GetIndexByID.\n\tGetIndexByIDFunc *DBStoreGetIndexByIDFunc\n\t// GetIndexConfigurationByRepositoryIDFunc is an instance of a mock\n\t// function object controlling the behavior of the method\n\t// GetIndexConfigurationByRepositoryID.\n\tGetIndexConfigurationByRepositoryIDFunc *DBStoreGetIndexConfigurationByRepositoryIDFunc\n\t// GetIndexesFunc is an instance of a mock function object controlling\n\t// the behavior of the method GetIndexes.\n\tGetIndexesFunc *DBStoreGetIndexesFunc\n\t// GetIndexesByIDsFunc is an instance of a mock function object\n\t// controlling the behavior of the method GetIndexesByIDs.\n\tGetIndexesByIDsFunc *DBStoreGetIndexesByIDsFunc\n\t// GetUploadByIDFunc is an instance of a mock function object\n\t// controlling the behavior of the method GetUploadByID.\n\tGetUploadByIDFunc *DBStoreGetUploadByIDFunc\n\t// GetUploadsFunc is an instance of a mock function object controlling\n\t// the behavior of the method GetUploads.\n\tGetUploadsFunc *DBStoreGetUploadsFunc\n\t// GetUploadsByIDsFunc is an instance of a mock function object\n\t// controlling the behavior of the method GetUploadsByIDs.\n\tGetUploadsByIDsFunc *DBStoreGetUploadsByIDsFunc\n\t// HasCommitFunc is an instance of a mock function object controlling\n\t// the behavior of the method HasCommit.\n\tHasCommitFunc *DBStoreHasCommitFunc\n\t// HasRepositoryFunc is an instance of a mock function object\n\t// controlling the behavior of the method HasRepository.\n\tHasRepositoryFunc *DBStoreHasRepositoryFunc\n\t// MarkRepositoryAsDirtyFunc is an instance of a mock function object\n\t// controlling the behavior of the method MarkRepositoryAsDirty.\n\tMarkRepositoryAsDirtyFunc *DBStoreMarkRepositoryAsDirtyFunc\n\t// ReferenceIDsAndFiltersFunc is an instance of a mock function object\n\t// controlling the behavior of the method ReferenceIDsAndFilters.\n\tReferenceIDsAndFiltersFunc *DBStoreReferenceIDsAndFiltersFunc\n\t// RepoNameFunc is an instance of a mock function object controlling the\n\t// behavior of the method RepoName.\n\tRepoNameFunc *DBStoreRepoNameFunc\n\t// UpdateIndexConfigurationByRepositoryIDFunc is an instance of a mock\n\t// function object controlling the behavior of the method\n\t// UpdateIndexConfigurationByRepositoryID.\n\tUpdateIndexConfigurationByRepositoryIDFunc *DBStoreUpdateIndexConfigurationByRepositoryIDFunc\n}\n```\n\nMockDBStore is a mock implementation of the DBStore interface (from the package github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/codeintel/resolvers) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewMockDBStore",
                    "documentation": {
                      "identifier": "NewMockDBStore",
                      "newPage": false,
                      "searchKey": "resolvers.NewMockDBStore",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockDBStore() *MockDBStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockDBStore() *MockDBStore\n```\n\nNewMockDBStore creates a new mock of the DBStore interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewMockDBStoreFrom",
                    "documentation": {
                      "identifier": "NewMockDBStoreFrom",
                      "newPage": false,
                      "searchKey": "resolvers.NewMockDBStoreFrom",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockDBStoreFrom(i DBStore) *MockDBStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockDBStoreFrom(i DBStore) *MockDBStore\n```\n\nNewMockDBStoreFrom creates a new mock of the MockDBStore interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.CommitGraphMetadata",
                    "documentation": {
                      "identifier": "MockDBStore.CommitGraphMetadata",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.CommitGraphMetadata",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) CommitGraphMetadata(v0 context.Context, v1 int) (bool, *time.Time, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) CommitGraphMetadata(v0 context.Context, v1 int) (bool, *time.Time, error)\n```\n\nCommitGraphMetadata delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.DefinitionDumps",
                    "documentation": {
                      "identifier": "MockDBStore.DefinitionDumps",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.DefinitionDumps",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) DefinitionDumps(v0 context.Context, v1 []semantic.QualifiedMonikerData) ([]dbstore.Dump, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) DefinitionDumps(v0 context.Context, v1 []semantic.QualifiedMonikerData) ([]dbstore.Dump, error)\n```\n\nDefinitionDumps delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.DeleteIndexByID",
                    "documentation": {
                      "identifier": "MockDBStore.DeleteIndexByID",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.DeleteIndexByID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) DeleteIndexByID(v0 context.Context, v1 int) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) DeleteIndexByID(v0 context.Context, v1 int) (bool, error)\n```\n\nDeleteIndexByID delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.DeleteUploadByID",
                    "documentation": {
                      "identifier": "MockDBStore.DeleteUploadByID",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.DeleteUploadByID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) DeleteUploadByID(v0 context.Context, v1 int) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) DeleteUploadByID(v0 context.Context, v1 int) (bool, error)\n```\n\nDeleteUploadByID delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.FindClosestDumps",
                    "documentation": {
                      "identifier": "MockDBStore.FindClosestDumps",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.FindClosestDumps",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) FindClosestDumps(v0 context.Context, v1 int, v2 string, v3 string, v4 bool, v5 string) ([]dbstore.Dump, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) FindClosestDumps(v0 context.Context, v1 int, v2 string, v3 string, v4 bool, v5 string) ([]dbstore.Dump, error)\n```\n\nFindClosestDumps delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.FindClosestDumpsFromGraphFragment",
                    "documentation": {
                      "identifier": "MockDBStore.FindClosestDumpsFromGraphFragment",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.FindClosestDumpsFromGraphFragment",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) FindClosestDumpsFromGraphFragment(v0 context.Context, v1 int, v2 string, v3 string, v4 bool, v5 string, v6 *gitserver.CommitGraph) ([]dbstore.Dump, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) FindClosestDumpsFromGraphFragment(v0 context.Context, v1 int, v2 string, v3 string, v4 bool, v5 string, v6 *gitserver.CommitGraph) ([]dbstore.Dump, error)\n```\n\nFindClosestDumpsFromGraphFragment delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.GetDumpsByIDs",
                    "documentation": {
                      "identifier": "MockDBStore.GetDumpsByIDs",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.GetDumpsByIDs",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) GetDumpsByIDs(v0 context.Context, v1 []int) ([]dbstore.Dump, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) GetDumpsByIDs(v0 context.Context, v1 []int) ([]dbstore.Dump, error)\n```\n\nGetDumpsByIDs delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.GetIndexByID",
                    "documentation": {
                      "identifier": "MockDBStore.GetIndexByID",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.GetIndexByID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) GetIndexByID(v0 context.Context, v1 int) (dbstore.Index, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) GetIndexByID(v0 context.Context, v1 int) (dbstore.Index, bool, error)\n```\n\nGetIndexByID delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.GetIndexConfigurationByRepositoryID",
                    "documentation": {
                      "identifier": "MockDBStore.GetIndexConfigurationByRepositoryID",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.GetIndexConfigurationByRepositoryID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) GetIndexConfigurationByRepositoryID(v0 context.Context, v1 int) (dbstore.IndexConfiguration, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) GetIndexConfigurationByRepositoryID(v0 context.Context, v1 int) (dbstore.IndexConfiguration, bool, error)\n```\n\nGetIndexConfigurationByRepositoryID delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.GetIndexes",
                    "documentation": {
                      "identifier": "MockDBStore.GetIndexes",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.GetIndexes",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) GetIndexes(v0 context.Context, v1 dbstore.GetIndexesOptions) ([]dbstore.Index, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) GetIndexes(v0 context.Context, v1 dbstore.GetIndexesOptions) ([]dbstore.Index, int, error)\n```\n\nGetIndexes delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.GetIndexesByIDs",
                    "documentation": {
                      "identifier": "MockDBStore.GetIndexesByIDs",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.GetIndexesByIDs",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) GetIndexesByIDs(v0 context.Context, v1 ...int) ([]dbstore.Index, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) GetIndexesByIDs(v0 context.Context, v1 ...int) ([]dbstore.Index, error)\n```\n\nGetIndexesByIDs delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.GetUploadByID",
                    "documentation": {
                      "identifier": "MockDBStore.GetUploadByID",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.GetUploadByID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) GetUploadByID(v0 context.Context, v1 int) (dbstore.Upload, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) GetUploadByID(v0 context.Context, v1 int) (dbstore.Upload, bool, error)\n```\n\nGetUploadByID delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.GetUploads",
                    "documentation": {
                      "identifier": "MockDBStore.GetUploads",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.GetUploads",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) GetUploads(v0 context.Context, v1 dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) GetUploads(v0 context.Context, v1 dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)\n```\n\nGetUploads delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.GetUploadsByIDs",
                    "documentation": {
                      "identifier": "MockDBStore.GetUploadsByIDs",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.GetUploadsByIDs",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) GetUploadsByIDs(v0 context.Context, v1 ...int) ([]dbstore.Upload, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) GetUploadsByIDs(v0 context.Context, v1 ...int) ([]dbstore.Upload, error)\n```\n\nGetUploadsByIDs delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.HasCommit",
                    "documentation": {
                      "identifier": "MockDBStore.HasCommit",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.HasCommit",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) HasCommit(v0 context.Context, v1 int, v2 string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) HasCommit(v0 context.Context, v1 int, v2 string) (bool, error)\n```\n\nHasCommit delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.HasRepository",
                    "documentation": {
                      "identifier": "MockDBStore.HasRepository",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.HasRepository",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) HasRepository(v0 context.Context, v1 int) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) HasRepository(v0 context.Context, v1 int) (bool, error)\n```\n\nHasRepository delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.MarkRepositoryAsDirty",
                    "documentation": {
                      "identifier": "MockDBStore.MarkRepositoryAsDirty",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.MarkRepositoryAsDirty",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) MarkRepositoryAsDirty(v0 context.Context, v1 int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) MarkRepositoryAsDirty(v0 context.Context, v1 int) error\n```\n\nMarkRepositoryAsDirty delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.ReferenceIDsAndFilters",
                    "documentation": {
                      "identifier": "MockDBStore.ReferenceIDsAndFilters",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.ReferenceIDsAndFilters",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) ReferenceIDsAndFilters(v0 context.Context, v1 int, v2 string, v3 []semantic.QualifiedMonikerData, v4 int, v5 int) (dbstore.PackageReferenceScanner, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) ReferenceIDsAndFilters(v0 context.Context, v1 int, v2 string, v3 []semantic.QualifiedMonikerData, v4 int, v5 int) (dbstore.PackageReferenceScanner, int, error)\n```\n\nReferenceIDsAndFilters delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.RepoName",
                    "documentation": {
                      "identifier": "MockDBStore.RepoName",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.RepoName",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) RepoName(v0 context.Context, v1 int) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) RepoName(v0 context.Context, v1 int) (string, error)\n```\n\nRepoName delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockDBStore.UpdateIndexConfigurationByRepositoryID",
                    "documentation": {
                      "identifier": "MockDBStore.UpdateIndexConfigurationByRepositoryID",
                      "newPage": false,
                      "searchKey": "resolvers.MockDBStore.UpdateIndexConfigurationByRepositoryID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) UpdateIndexConfigurationByRepositoryID(v0 context.Context, v1 int, v2 []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) UpdateIndexConfigurationByRepositoryID(v0 context.Context, v1 int, v2 []byte) error\n```\n\nUpdateIndexConfigurationByRepositoryID delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockEnqueuerDBStore",
              "documentation": {
                "identifier": "MockEnqueuerDBStore",
                "newPage": false,
                "searchKey": "resolvers.MockEnqueuerDBStore",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockEnqueuerDBStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockEnqueuerDBStore struct {\n\t// DirtyRepositoriesFunc is an instance of a mock function object\n\t// controlling the behavior of the method DirtyRepositories.\n\tDirtyRepositoriesFunc *EnqueuerDBStoreDirtyRepositoriesFunc\n\t// DoneFunc is an instance of a mock function object controlling the\n\t// behavior of the method Done.\n\tDoneFunc *EnqueuerDBStoreDoneFunc\n\t// GetIndexConfigurationByRepositoryIDFunc is an instance of a mock\n\t// function object controlling the behavior of the method\n\t// GetIndexConfigurationByRepositoryID.\n\tGetIndexConfigurationByRepositoryIDFunc *EnqueuerDBStoreGetIndexConfigurationByRepositoryIDFunc\n\t// GetRepositoriesWithIndexConfigurationFunc is an instance of a mock\n\t// function object controlling the behavior of the method\n\t// GetRepositoriesWithIndexConfiguration.\n\tGetRepositoriesWithIndexConfigurationFunc *EnqueuerDBStoreGetRepositoriesWithIndexConfigurationFunc\n\t// HandleFunc is an instance of a mock function object controlling the\n\t// behavior of the method Handle.\n\tHandleFunc *EnqueuerDBStoreHandleFunc\n\t// InsertIndexFunc is an instance of a mock function object controlling\n\t// the behavior of the method InsertIndex.\n\tInsertIndexFunc *EnqueuerDBStoreInsertIndexFunc\n\t// IsQueuedFunc is an instance of a mock function object controlling the\n\t// behavior of the method IsQueued.\n\tIsQueuedFunc *EnqueuerDBStoreIsQueuedFunc\n\t// TransactFunc is an instance of a mock function object controlling the\n\t// behavior of the method Transact.\n\tTransactFunc *EnqueuerDBStoreTransactFunc\n}\n```\n\nMockEnqueuerDBStore is a mock implementation of the EnqueuerDBStore interface (from the package github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/codeintel/resolvers) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewMockEnqueuerDBStore",
                    "documentation": {
                      "identifier": "NewMockEnqueuerDBStore",
                      "newPage": false,
                      "searchKey": "resolvers.NewMockEnqueuerDBStore",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockEnqueuerDBStore() *MockEnqueuerDBStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockEnqueuerDBStore() *MockEnqueuerDBStore\n```\n\nNewMockEnqueuerDBStore creates a new mock of the EnqueuerDBStore interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewMockEnqueuerDBStoreFrom",
                    "documentation": {
                      "identifier": "NewMockEnqueuerDBStoreFrom",
                      "newPage": false,
                      "searchKey": "resolvers.NewMockEnqueuerDBStoreFrom",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockEnqueuerDBStoreFrom(i EnqueuerDBStore) *MockEnqueuerDBStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockEnqueuerDBStoreFrom(i EnqueuerDBStore) *MockEnqueuerDBStore\n```\n\nNewMockEnqueuerDBStoreFrom creates a new mock of the MockEnqueuerDBStore interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockEnqueuerDBStore.DirtyRepositories",
                    "documentation": {
                      "identifier": "MockEnqueuerDBStore.DirtyRepositories",
                      "newPage": false,
                      "searchKey": "resolvers.MockEnqueuerDBStore.DirtyRepositories",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockEnqueuerDBStore) DirtyRepositories(v0 context.Context) (map[int]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockEnqueuerDBStore) DirtyRepositories(v0 context.Context) (map[int]int, error)\n```\n\nDirtyRepositories delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockEnqueuerDBStore.Done",
                    "documentation": {
                      "identifier": "MockEnqueuerDBStore.Done",
                      "newPage": false,
                      "searchKey": "resolvers.MockEnqueuerDBStore.Done",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockEnqueuerDBStore) Done(v0 error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockEnqueuerDBStore) Done(v0 error) error\n```\n\nDone delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockEnqueuerDBStore.GetIndexConfigurationByRepositoryID",
                    "documentation": {
                      "identifier": "MockEnqueuerDBStore.GetIndexConfigurationByRepositoryID",
                      "newPage": false,
                      "searchKey": "resolvers.MockEnqueuerDBStore.GetIndexConfigurationByRepositoryID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockEnqueuerDBStore) GetIndexConfigurationByRepositoryID(v0 context.Context, v1 int) (dbstore.IndexConfiguration, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockEnqueuerDBStore) GetIndexConfigurationByRepositoryID(v0 context.Context, v1 int) (dbstore.IndexConfiguration, bool, error)\n```\n\nGetIndexConfigurationByRepositoryID delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockEnqueuerDBStore.GetRepositoriesWithIndexConfiguration",
                    "documentation": {
                      "identifier": "MockEnqueuerDBStore.GetRepositoriesWithIndexConfiguration",
                      "newPage": false,
                      "searchKey": "resolvers.MockEnqueuerDBStore.GetRepositoriesWithIndexConfiguration",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockEnqueuerDBStore) GetRepositoriesWithIndexConfiguration(v0 context.Context) ([]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockEnqueuerDBStore) GetRepositoriesWithIndexConfiguration(v0 context.Context) ([]int, error)\n```\n\nGetRepositoriesWithIndexConfiguration delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockEnqueuerDBStore.Handle",
                    "documentation": {
                      "identifier": "MockEnqueuerDBStore.Handle",
                      "newPage": false,
                      "searchKey": "resolvers.MockEnqueuerDBStore.Handle",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockEnqueuerDBStore) Handle() *basestore.TransactableHandle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockEnqueuerDBStore) Handle() *basestore.TransactableHandle\n```\n\nHandle delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockEnqueuerDBStore.InsertIndex",
                    "documentation": {
                      "identifier": "MockEnqueuerDBStore.InsertIndex",
                      "newPage": false,
                      "searchKey": "resolvers.MockEnqueuerDBStore.InsertIndex",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockEnqueuerDBStore) InsertIndex(v0 context.Context, v1 dbstore.Index) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockEnqueuerDBStore) InsertIndex(v0 context.Context, v1 dbstore.Index) (int, error)\n```\n\nInsertIndex delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockEnqueuerDBStore.IsQueued",
                    "documentation": {
                      "identifier": "MockEnqueuerDBStore.IsQueued",
                      "newPage": false,
                      "searchKey": "resolvers.MockEnqueuerDBStore.IsQueued",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockEnqueuerDBStore) IsQueued(v0 context.Context, v1 int, v2 string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockEnqueuerDBStore) IsQueued(v0 context.Context, v1 int, v2 string) (bool, error)\n```\n\nIsQueued delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockEnqueuerDBStore.Transact",
                    "documentation": {
                      "identifier": "MockEnqueuerDBStore.Transact",
                      "newPage": false,
                      "searchKey": "resolvers.MockEnqueuerDBStore.Transact",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockEnqueuerDBStore) Transact(v0 context.Context) (enqueuer.DBStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockEnqueuerDBStore) Transact(v0 context.Context) (enqueuer.DBStore, error)\n```\n\nTransact delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockEnqueuerGitserverClient",
              "documentation": {
                "identifier": "MockEnqueuerGitserverClient",
                "newPage": false,
                "searchKey": "resolvers.MockEnqueuerGitserverClient",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockEnqueuerGitserverClient struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockEnqueuerGitserverClient struct {\n\t// FileExistsFunc is an instance of a mock function object controlling\n\t// the behavior of the method FileExists.\n\tFileExistsFunc *EnqueuerGitserverClientFileExistsFunc\n\t// HeadFunc is an instance of a mock function object controlling the\n\t// behavior of the method Head.\n\tHeadFunc *EnqueuerGitserverClientHeadFunc\n\t// ListFilesFunc is an instance of a mock function object controlling\n\t// the behavior of the method ListFiles.\n\tListFilesFunc *EnqueuerGitserverClientListFilesFunc\n\t// RawContentsFunc is an instance of a mock function object controlling\n\t// the behavior of the method RawContents.\n\tRawContentsFunc *EnqueuerGitserverClientRawContentsFunc\n\t// ResolveRevisionFunc is an instance of a mock function object\n\t// controlling the behavior of the method ResolveRevision.\n\tResolveRevisionFunc *EnqueuerGitserverClientResolveRevisionFunc\n}\n```\n\nMockEnqueuerGitserverClient is a mock implementation of the EnqueuerGitserverClient interface (from the package github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/codeintel/resolvers) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewMockEnqueuerGitserverClient",
                    "documentation": {
                      "identifier": "NewMockEnqueuerGitserverClient",
                      "newPage": false,
                      "searchKey": "resolvers.NewMockEnqueuerGitserverClient",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockEnqueuerGitserverClient() *MockEnqueuerGitserverClient"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockEnqueuerGitserverClient() *MockEnqueuerGitserverClient\n```\n\nNewMockEnqueuerGitserverClient creates a new mock of the EnqueuerGitserverClient interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewMockEnqueuerGitserverClientFrom",
                    "documentation": {
                      "identifier": "NewMockEnqueuerGitserverClientFrom",
                      "newPage": false,
                      "searchKey": "resolvers.NewMockEnqueuerGitserverClientFrom",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockEnqueuerGitserverClientFrom(i EnqueuerGitserverClient) *MockEnqueuerGitserverClient"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockEnqueuerGitserverClientFrom(i EnqueuerGitserverClient) *MockEnqueuerGitserverClient\n```\n\nNewMockEnqueuerGitserverClientFrom creates a new mock of the MockEnqueuerGitserverClient interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockEnqueuerGitserverClient.FileExists",
                    "documentation": {
                      "identifier": "MockEnqueuerGitserverClient.FileExists",
                      "newPage": false,
                      "searchKey": "resolvers.MockEnqueuerGitserverClient.FileExists",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockEnqueuerGitserverClient) FileExists(v0 context.Context, v1 int, v2 string, v3 string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockEnqueuerGitserverClient) FileExists(v0 context.Context, v1 int, v2 string, v3 string) (bool, error)\n```\n\nFileExists delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockEnqueuerGitserverClient.Head",
                    "documentation": {
                      "identifier": "MockEnqueuerGitserverClient.Head",
                      "newPage": false,
                      "searchKey": "resolvers.MockEnqueuerGitserverClient.Head",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockEnqueuerGitserverClient) Head(v0 context.Context, v1 int) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockEnqueuerGitserverClient) Head(v0 context.Context, v1 int) (string, error)\n```\n\nHead delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockEnqueuerGitserverClient.ListFiles",
                    "documentation": {
                      "identifier": "MockEnqueuerGitserverClient.ListFiles",
                      "newPage": false,
                      "searchKey": "resolvers.MockEnqueuerGitserverClient.ListFiles",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockEnqueuerGitserverClient) ListFiles(v0 context.Context, v1 int, v2 string, v3 *regexp.Regexp) ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockEnqueuerGitserverClient) ListFiles(v0 context.Context, v1 int, v2 string, v3 *regexp.Regexp) ([]string, error)\n```\n\nListFiles delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockEnqueuerGitserverClient.RawContents",
                    "documentation": {
                      "identifier": "MockEnqueuerGitserverClient.RawContents",
                      "newPage": false,
                      "searchKey": "resolvers.MockEnqueuerGitserverClient.RawContents",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockEnqueuerGitserverClient) RawContents(v0 context.Context, v1 int, v2 string, v3 string) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockEnqueuerGitserverClient) RawContents(v0 context.Context, v1 int, v2 string, v3 string) ([]byte, error)\n```\n\nRawContents delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockEnqueuerGitserverClient.ResolveRevision",
                    "documentation": {
                      "identifier": "MockEnqueuerGitserverClient.ResolveRevision",
                      "newPage": false,
                      "searchKey": "resolvers.MockEnqueuerGitserverClient.ResolveRevision",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockEnqueuerGitserverClient) ResolveRevision(v0 context.Context, v1 int, v2 string) (api.CommitID, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockEnqueuerGitserverClient) ResolveRevision(v0 context.Context, v1 int, v2 string) (api.CommitID, error)\n```\n\nResolveRevision delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockGitserverClient",
              "documentation": {
                "identifier": "MockGitserverClient",
                "newPage": false,
                "searchKey": "resolvers.MockGitserverClient",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockGitserverClient struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockGitserverClient struct {\n\t// CommitExistsFunc is an instance of a mock function object controlling\n\t// the behavior of the method CommitExists.\n\tCommitExistsFunc *GitserverClientCommitExistsFunc\n\t// CommitGraphFunc is an instance of a mock function object controlling\n\t// the behavior of the method CommitGraph.\n\tCommitGraphFunc *GitserverClientCommitGraphFunc\n}\n```\n\nMockGitserverClient is a mock implementation of the GitserverClient interface (from the package github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/codeintel/resolvers) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewMockGitserverClient",
                    "documentation": {
                      "identifier": "NewMockGitserverClient",
                      "newPage": false,
                      "searchKey": "resolvers.NewMockGitserverClient",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockGitserverClient() *MockGitserverClient"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockGitserverClient() *MockGitserverClient\n```\n\nNewMockGitserverClient creates a new mock of the GitserverClient interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewMockGitserverClientFrom",
                    "documentation": {
                      "identifier": "NewMockGitserverClientFrom",
                      "newPage": false,
                      "searchKey": "resolvers.NewMockGitserverClientFrom",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockGitserverClientFrom(i GitserverClient) *MockGitserverClient"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockGitserverClientFrom(i GitserverClient) *MockGitserverClient\n```\n\nNewMockGitserverClientFrom creates a new mock of the MockGitserverClient interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockGitserverClient.CommitExists",
                    "documentation": {
                      "identifier": "MockGitserverClient.CommitExists",
                      "newPage": false,
                      "searchKey": "resolvers.MockGitserverClient.CommitExists",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGitserverClient) CommitExists(v0 context.Context, v1 int, v2 string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGitserverClient) CommitExists(v0 context.Context, v1 int, v2 string) (bool, error)\n```\n\nCommitExists delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockGitserverClient.CommitGraph",
                    "documentation": {
                      "identifier": "MockGitserverClient.CommitGraph",
                      "newPage": false,
                      "searchKey": "resolvers.MockGitserverClient.CommitGraph",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGitserverClient) CommitGraph(v0 context.Context, v1 int, v2 gitserver.CommitGraphOptions) (*gitserver.CommitGraph, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGitserverClient) CommitGraph(v0 context.Context, v1 int, v2 gitserver.CommitGraphOptions) (*gitserver.CommitGraph, error)\n```\n\nCommitGraph delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockIndexEnqueuer",
              "documentation": {
                "identifier": "MockIndexEnqueuer",
                "newPage": false,
                "searchKey": "resolvers.MockIndexEnqueuer",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockIndexEnqueuer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockIndexEnqueuer struct {\n\t// ForceQueueIndexesForRepositoryFunc is an instance of a mock function\n\t// object controlling the behavior of the method\n\t// ForceQueueIndexesForRepository.\n\tForceQueueIndexesForRepositoryFunc *IndexEnqueuerForceQueueIndexesForRepositoryFunc\n\t// InferIndexConfigurationFunc is an instance of a mock function object\n\t// controlling the behavior of the method InferIndexConfiguration.\n\tInferIndexConfigurationFunc *IndexEnqueuerInferIndexConfigurationFunc\n}\n```\n\nMockIndexEnqueuer is a mock implementation of the IndexEnqueuer interface (from the package github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/codeintel/resolvers) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewMockIndexEnqueuer",
                    "documentation": {
                      "identifier": "NewMockIndexEnqueuer",
                      "newPage": false,
                      "searchKey": "resolvers.NewMockIndexEnqueuer",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockIndexEnqueuer() *MockIndexEnqueuer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockIndexEnqueuer() *MockIndexEnqueuer\n```\n\nNewMockIndexEnqueuer creates a new mock of the IndexEnqueuer interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewMockIndexEnqueuerFrom",
                    "documentation": {
                      "identifier": "NewMockIndexEnqueuerFrom",
                      "newPage": false,
                      "searchKey": "resolvers.NewMockIndexEnqueuerFrom",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockIndexEnqueuerFrom(i IndexEnqueuer) *MockIndexEnqueuer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockIndexEnqueuerFrom(i IndexEnqueuer) *MockIndexEnqueuer\n```\n\nNewMockIndexEnqueuerFrom creates a new mock of the MockIndexEnqueuer interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockIndexEnqueuer.ForceQueueIndexesForRepository",
                    "documentation": {
                      "identifier": "MockIndexEnqueuer.ForceQueueIndexesForRepository",
                      "newPage": false,
                      "searchKey": "resolvers.MockIndexEnqueuer.ForceQueueIndexesForRepository",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockIndexEnqueuer) ForceQueueIndexesForRepository(v0 context.Context, v1 int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockIndexEnqueuer) ForceQueueIndexesForRepository(v0 context.Context, v1 int) error\n```\n\nForceQueueIndexesForRepository delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockIndexEnqueuer.InferIndexConfiguration",
                    "documentation": {
                      "identifier": "MockIndexEnqueuer.InferIndexConfiguration",
                      "newPage": false,
                      "searchKey": "resolvers.MockIndexEnqueuer.InferIndexConfiguration",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockIndexEnqueuer) InferIndexConfiguration(v0 context.Context, v1 int) (*config.IndexConfiguration, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockIndexEnqueuer) InferIndexConfiguration(v0 context.Context, v1 int) (*config.IndexConfiguration, error)\n```\n\nInferIndexConfiguration delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockLSIFStore",
              "documentation": {
                "identifier": "MockLSIFStore",
                "newPage": false,
                "searchKey": "resolvers.MockLSIFStore",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockLSIFStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockLSIFStore struct {\n\t// BulkMonikerResultsFunc is an instance of a mock function object\n\t// controlling the behavior of the method BulkMonikerResults.\n\tBulkMonikerResultsFunc *LSIFStoreBulkMonikerResultsFunc\n\t// DefinitionsFunc is an instance of a mock function object controlling\n\t// the behavior of the method Definitions.\n\tDefinitionsFunc *LSIFStoreDefinitionsFunc\n\t// DiagnosticsFunc is an instance of a mock function object controlling\n\t// the behavior of the method Diagnostics.\n\tDiagnosticsFunc *LSIFStoreDiagnosticsFunc\n\t// DocumentationPageFunc is an instance of a mock function object\n\t// controlling the behavior of the method DocumentationPage.\n\tDocumentationPageFunc *LSIFStoreDocumentationPageFunc\n\t// ExistsFunc is an instance of a mock function object controlling the\n\t// behavior of the method Exists.\n\tExistsFunc *LSIFStoreExistsFunc\n\t// HoverFunc is an instance of a mock function object controlling the\n\t// behavior of the method Hover.\n\tHoverFunc *LSIFStoreHoverFunc\n\t// MonikersByPositionFunc is an instance of a mock function object\n\t// controlling the behavior of the method MonikersByPosition.\n\tMonikersByPositionFunc *LSIFStoreMonikersByPositionFunc\n\t// PackageInformationFunc is an instance of a mock function object\n\t// controlling the behavior of the method PackageInformation.\n\tPackageInformationFunc *LSIFStorePackageInformationFunc\n\t// RangesFunc is an instance of a mock function object controlling the\n\t// behavior of the method Ranges.\n\tRangesFunc *LSIFStoreRangesFunc\n\t// ReferencesFunc is an instance of a mock function object controlling\n\t// the behavior of the method References.\n\tReferencesFunc *LSIFStoreReferencesFunc\n}\n```\n\nMockLSIFStore is a mock implementation of the LSIFStore interface (from the package github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/codeintel/resolvers) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewMockLSIFStore",
                    "documentation": {
                      "identifier": "NewMockLSIFStore",
                      "newPage": false,
                      "searchKey": "resolvers.NewMockLSIFStore",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockLSIFStore() *MockLSIFStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockLSIFStore() *MockLSIFStore\n```\n\nNewMockLSIFStore creates a new mock of the LSIFStore interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewMockLSIFStoreFrom",
                    "documentation": {
                      "identifier": "NewMockLSIFStoreFrom",
                      "newPage": false,
                      "searchKey": "resolvers.NewMockLSIFStoreFrom",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockLSIFStoreFrom(i LSIFStore) *MockLSIFStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockLSIFStoreFrom(i LSIFStore) *MockLSIFStore\n```\n\nNewMockLSIFStoreFrom creates a new mock of the MockLSIFStore interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockLSIFStore.BulkMonikerResults",
                    "documentation": {
                      "identifier": "MockLSIFStore.BulkMonikerResults",
                      "newPage": false,
                      "searchKey": "resolvers.MockLSIFStore.BulkMonikerResults",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockLSIFStore) BulkMonikerResults(v0 context.Context, v1 string, v2 []int, v3 []semantic.MonikerData, v4 int, v5 int) ([]lsifstore.Location, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockLSIFStore) BulkMonikerResults(v0 context.Context, v1 string, v2 []int, v3 []semantic.MonikerData, v4 int, v5 int) ([]lsifstore.Location, int, error)\n```\n\nBulkMonikerResults delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockLSIFStore.Definitions",
                    "documentation": {
                      "identifier": "MockLSIFStore.Definitions",
                      "newPage": false,
                      "searchKey": "resolvers.MockLSIFStore.Definitions",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockLSIFStore) Definitions(v0 context.Context, v1 int, v2 string, v3 int, v4 int, v5 int, v6 int) ([]lsifstore.Location, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockLSIFStore) Definitions(v0 context.Context, v1 int, v2 string, v3 int, v4 int, v5 int, v6 int) ([]lsifstore.Location, int, error)\n```\n\nDefinitions delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockLSIFStore.Diagnostics",
                    "documentation": {
                      "identifier": "MockLSIFStore.Diagnostics",
                      "newPage": false,
                      "searchKey": "resolvers.MockLSIFStore.Diagnostics",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockLSIFStore) Diagnostics(v0 context.Context, v1 int, v2 string, v3 int, v4 int) ([]lsifstore.Diagnostic, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockLSIFStore) Diagnostics(v0 context.Context, v1 int, v2 string, v3 int, v4 int) ([]lsifstore.Diagnostic, int, error)\n```\n\nDiagnostics delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockLSIFStore.DocumentationPage",
                    "documentation": {
                      "identifier": "MockLSIFStore.DocumentationPage",
                      "newPage": false,
                      "searchKey": "resolvers.MockLSIFStore.DocumentationPage",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockLSIFStore) DocumentationPage(v0 context.Context, v1 int, v2 string) (*semantic.DocumentationPageData, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockLSIFStore) DocumentationPage(v0 context.Context, v1 int, v2 string) (*semantic.DocumentationPageData, error)\n```\n\nDocumentationPage delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockLSIFStore.Exists",
                    "documentation": {
                      "identifier": "MockLSIFStore.Exists",
                      "newPage": false,
                      "searchKey": "resolvers.MockLSIFStore.Exists",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockLSIFStore) Exists(v0 context.Context, v1 int, v2 string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockLSIFStore) Exists(v0 context.Context, v1 int, v2 string) (bool, error)\n```\n\nExists delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockLSIFStore.Hover",
                    "documentation": {
                      "identifier": "MockLSIFStore.Hover",
                      "newPage": false,
                      "searchKey": "resolvers.MockLSIFStore.Hover",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockLSIFStore) Hover(v0 context.Context, v1 int, v2 string, v3 int, v4 int) (string, lsifstore.Range, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockLSIFStore) Hover(v0 context.Context, v1 int, v2 string, v3 int, v4 int) (string, lsifstore.Range, bool, error)\n```\n\nHover delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockLSIFStore.MonikersByPosition",
                    "documentation": {
                      "identifier": "MockLSIFStore.MonikersByPosition",
                      "newPage": false,
                      "searchKey": "resolvers.MockLSIFStore.MonikersByPosition",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockLSIFStore) MonikersByPosition(v0 context.Context, v1 int, v2 string, v3 int, v4 int) ([][]semantic.MonikerData, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockLSIFStore) MonikersByPosition(v0 context.Context, v1 int, v2 string, v3 int, v4 int) ([][]semantic.MonikerData, error)\n```\n\nMonikersByPosition delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockLSIFStore.PackageInformation",
                    "documentation": {
                      "identifier": "MockLSIFStore.PackageInformation",
                      "newPage": false,
                      "searchKey": "resolvers.MockLSIFStore.PackageInformation",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockLSIFStore) PackageInformation(v0 context.Context, v1 int, v2 string, v3 string) (semantic.PackageInformationData, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockLSIFStore) PackageInformation(v0 context.Context, v1 int, v2 string, v3 string) (semantic.PackageInformationData, bool, error)\n```\n\nPackageInformation delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockLSIFStore.Ranges",
                    "documentation": {
                      "identifier": "MockLSIFStore.Ranges",
                      "newPage": false,
                      "searchKey": "resolvers.MockLSIFStore.Ranges",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockLSIFStore) Ranges(v0 context.Context, v1 int, v2 string, v3 int, v4 int) ([]lsifstore.CodeIntelligenceRange, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockLSIFStore) Ranges(v0 context.Context, v1 int, v2 string, v3 int, v4 int) ([]lsifstore.CodeIntelligenceRange, error)\n```\n\nRanges delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockLSIFStore.References",
                    "documentation": {
                      "identifier": "MockLSIFStore.References",
                      "newPage": false,
                      "searchKey": "resolvers.MockLSIFStore.References",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockLSIFStore) References(v0 context.Context, v1 int, v2 string, v3 int, v4 int, v5 int, v6 int) ([]lsifstore.Location, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockLSIFStore) References(v0 context.Context, v1 int, v2 string, v3 int, v4 int, v5 int, v6 int) ([]lsifstore.Location, int, error)\n```\n\nReferences delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockPositionAdjuster",
              "documentation": {
                "identifier": "MockPositionAdjuster",
                "newPage": false,
                "searchKey": "resolvers.MockPositionAdjuster",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockPositionAdjuster struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockPositionAdjuster struct {\n\t// AdjustPathFunc is an instance of a mock function object controlling\n\t// the behavior of the method AdjustPath.\n\tAdjustPathFunc *PositionAdjusterAdjustPathFunc\n\t// AdjustPositionFunc is an instance of a mock function object\n\t// controlling the behavior of the method AdjustPosition.\n\tAdjustPositionFunc *PositionAdjusterAdjustPositionFunc\n\t// AdjustRangeFunc is an instance of a mock function object controlling\n\t// the behavior of the method AdjustRange.\n\tAdjustRangeFunc *PositionAdjusterAdjustRangeFunc\n}\n```\n\nMockPositionAdjuster is a mock implementation of the PositionAdjuster interface (from the package github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/codeintel/resolvers) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewMockPositionAdjuster",
                    "documentation": {
                      "identifier": "NewMockPositionAdjuster",
                      "newPage": false,
                      "searchKey": "resolvers.NewMockPositionAdjuster",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockPositionAdjuster() *MockPositionAdjuster"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockPositionAdjuster() *MockPositionAdjuster\n```\n\nNewMockPositionAdjuster creates a new mock of the PositionAdjuster interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewMockPositionAdjusterFrom",
                    "documentation": {
                      "identifier": "NewMockPositionAdjusterFrom",
                      "newPage": false,
                      "searchKey": "resolvers.NewMockPositionAdjusterFrom",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockPositionAdjusterFrom(i PositionAdjuster) *MockPositionAdjuster"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockPositionAdjusterFrom(i PositionAdjuster) *MockPositionAdjuster\n```\n\nNewMockPositionAdjusterFrom creates a new mock of the MockPositionAdjuster interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockPositionAdjuster.AdjustPath",
                    "documentation": {
                      "identifier": "MockPositionAdjuster.AdjustPath",
                      "newPage": false,
                      "searchKey": "resolvers.MockPositionAdjuster.AdjustPath",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockPositionAdjuster) AdjustPath(v0 context.Context, v1 string, v2 string, v3 bool) (string, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockPositionAdjuster) AdjustPath(v0 context.Context, v1 string, v2 string, v3 bool) (string, bool, error)\n```\n\nAdjustPath delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockPositionAdjuster.AdjustPosition",
                    "documentation": {
                      "identifier": "MockPositionAdjuster.AdjustPosition",
                      "newPage": false,
                      "searchKey": "resolvers.MockPositionAdjuster.AdjustPosition",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockPositionAdjuster) AdjustPosition(v0 context.Context, v1 string, v2 string, v3 lsifstore.Position, v4 bool) (string, lsifstore.Position, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockPositionAdjuster) AdjustPosition(v0 context.Context, v1 string, v2 string, v3 lsifstore.Position, v4 bool) (string, lsifstore.Position, bool, error)\n```\n\nAdjustPosition delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockPositionAdjuster.AdjustRange",
                    "documentation": {
                      "identifier": "MockPositionAdjuster.AdjustRange",
                      "newPage": false,
                      "searchKey": "resolvers.MockPositionAdjuster.AdjustRange",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockPositionAdjuster) AdjustRange(v0 context.Context, v1 string, v2 string, v3 lsifstore.Range, v4 bool) (string, lsifstore.Range, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockPositionAdjuster) AdjustRange(v0 context.Context, v1 string, v2 string, v3 lsifstore.Range, v4 bool) (string, lsifstore.Range, bool, error)\n```\n\nAdjustRange delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockRepoUpdaterClient",
              "documentation": {
                "identifier": "MockRepoUpdaterClient",
                "newPage": false,
                "searchKey": "resolvers.MockRepoUpdaterClient",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockRepoUpdaterClient struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockRepoUpdaterClient struct {\n\t// EnqueueRepoUpdateFunc is an instance of a mock function object\n\t// controlling the behavior of the method EnqueueRepoUpdate.\n\tEnqueueRepoUpdateFunc *RepoUpdaterClientEnqueueRepoUpdateFunc\n}\n```\n\nMockRepoUpdaterClient is a mock implementation of the RepoUpdaterClient interface (from the package github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/codeintel/resolvers) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewMockRepoUpdaterClient",
                    "documentation": {
                      "identifier": "NewMockRepoUpdaterClient",
                      "newPage": false,
                      "searchKey": "resolvers.NewMockRepoUpdaterClient",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockRepoUpdaterClient() *MockRepoUpdaterClient"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockRepoUpdaterClient() *MockRepoUpdaterClient\n```\n\nNewMockRepoUpdaterClient creates a new mock of the RepoUpdaterClient interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewMockRepoUpdaterClientFrom",
                    "documentation": {
                      "identifier": "NewMockRepoUpdaterClientFrom",
                      "newPage": false,
                      "searchKey": "resolvers.NewMockRepoUpdaterClientFrom",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockRepoUpdaterClientFrom(i RepoUpdaterClient) *MockRepoUpdaterClient"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockRepoUpdaterClientFrom(i RepoUpdaterClient) *MockRepoUpdaterClient\n```\n\nNewMockRepoUpdaterClientFrom creates a new mock of the MockRepoUpdaterClient interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#MockRepoUpdaterClient.EnqueueRepoUpdate",
                    "documentation": {
                      "identifier": "MockRepoUpdaterClient.EnqueueRepoUpdate",
                      "newPage": false,
                      "searchKey": "resolvers.MockRepoUpdaterClient.EnqueueRepoUpdate",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockRepoUpdaterClient) EnqueueRepoUpdate(v0 context.Context, v1 api.RepoName) (*protocol.RepoUpdateResponse, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockRepoUpdaterClient) EnqueueRepoUpdate(v0 context.Context, v1 api.RepoName) (*protocol.RepoUpdateResponse, error)\n```\n\nEnqueueRepoUpdate delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjuster",
              "documentation": {
                "identifier": "PositionAdjuster",
                "newPage": false,
                "searchKey": "resolvers.PositionAdjuster",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PositionAdjuster interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PositionAdjuster interface {\n\t// AdjustPath translates the given path from the source commit into the given target\n\t// commit. If revese is true, then the source and target commits are swapped.\n\tAdjustPath(ctx context.Context, commit, path string, reverse bool) (string, bool, error)\n\n\t// AdjustPosition translates the given position from the source commit into the given\n\t// target commit. The adjusted path and position are returned, along with a boolean flag\n\t// indicating that the translation was successful. If revese is true, then the source and\n\t// target commits are swapped.\n\tAdjustPosition(ctx context.Context, commit, path string, px lsifstore.Position, reverse bool) (string, lsifstore.Position, bool, error)\n\n\t// AdjustRange translates the given range from the source commit into the given target\n\t// commit. The adjusted path and range are returned, along with a boolean flag indicating\n\t// that the translation was successful. If revese is true, then the source and target commits\n\t// are swapped.\n\tAdjustRange(ctx context.Context, commit, path string, rx lsifstore.Range, reverse bool) (string, lsifstore.Range, bool, error)\n}\n```\n\nPositionAdjuster translates a position within a git tree at a source commit into the equivalent position in a target commit commit. The position adjuster instance carries along with it the source commit. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewPositionAdjuster",
                    "documentation": {
                      "identifier": "NewPositionAdjuster",
                      "newPage": false,
                      "searchKey": "resolvers.NewPositionAdjuster",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewPositionAdjuster(repo *types.Repo, commit string, hunkCache HunkCache) PositionAdjuster"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewPositionAdjuster(repo *types.Repo, commit string, hunkCache HunkCache) PositionAdjuster\n```\n\nNewPositionAdjuster creates a new PositionAdjuster with the given repository and source commit. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#noopPositionAdjuster",
                    "documentation": {
                      "identifier": "noopPositionAdjuster",
                      "newPage": false,
                      "searchKey": "resolvers.noopPositionAdjuster",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func noopPositionAdjuster() PositionAdjuster"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc noopPositionAdjuster() PositionAdjuster\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPathFunc",
              "documentation": {
                "identifier": "PositionAdjusterAdjustPathFunc",
                "newPage": false,
                "searchKey": "resolvers.PositionAdjusterAdjustPathFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PositionAdjusterAdjustPathFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PositionAdjusterAdjustPathFunc struct {\n\tdefaultHook func(context.Context, string, string, bool) (string, bool, error)\n\thooks       []func(context.Context, string, string, bool) (string, bool, error)\n\thistory     []PositionAdjusterAdjustPathFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nPositionAdjusterAdjustPathFunc describes the behavior when the AdjustPath method of the parent MockPositionAdjuster instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPathFunc.History",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustPathFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustPathFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustPathFunc) History() []PositionAdjusterAdjustPathFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustPathFunc) History() []PositionAdjusterAdjustPathFuncCall\n```\n\nHistory returns a sequence of PositionAdjusterAdjustPathFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPathFunc.PushHook",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustPathFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustPathFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustPathFunc) PushHook(hook func(context.Context, string, string, bool) (string, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustPathFunc) PushHook(hook func(context.Context, string, string, bool) (string, bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the AdjustPath method of the parent MockPositionAdjuster instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPathFunc.PushReturn",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustPathFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustPathFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustPathFunc) PushReturn(r0 string, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustPathFunc) PushReturn(r0 string, r1 bool, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPathFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustPathFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustPathFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustPathFunc) SetDefaultHook(hook func(context.Context, string, string, bool) (string, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustPathFunc) SetDefaultHook(hook func(context.Context, string, string, bool) (string, bool, error))\n```\n\nSetDefaultHook sets function that is called when the AdjustPath method of the parent MockPositionAdjuster instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPathFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustPathFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustPathFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustPathFunc) SetDefaultReturn(r0 string, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustPathFunc) SetDefaultReturn(r0 string, r1 bool, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPathFunc.appendCall",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustPathFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustPathFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustPathFunc) appendCall(r0 PositionAdjusterAdjustPathFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustPathFunc) appendCall(r0 PositionAdjusterAdjustPathFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPathFunc.nextHook",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustPathFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustPathFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustPathFunc) nextHook() func(context.Context, string, string, bool) (string, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustPathFunc) nextHook() func(context.Context, string, string, bool) (string, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPathFuncCall",
              "documentation": {
                "identifier": "PositionAdjusterAdjustPathFuncCall",
                "newPage": false,
                "searchKey": "resolvers.PositionAdjusterAdjustPathFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PositionAdjusterAdjustPathFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PositionAdjusterAdjustPathFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 string\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 bool\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 string\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 bool\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nPositionAdjusterAdjustPathFuncCall is an object that describes an invocation of method AdjustPath on an instance of MockPositionAdjuster. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPathFuncCall.Args",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustPathFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustPathFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c PositionAdjusterAdjustPathFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c PositionAdjusterAdjustPathFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPathFuncCall.Results",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustPathFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustPathFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c PositionAdjusterAdjustPathFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c PositionAdjusterAdjustPathFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPositionFunc",
              "documentation": {
                "identifier": "PositionAdjusterAdjustPositionFunc",
                "newPage": false,
                "searchKey": "resolvers.PositionAdjusterAdjustPositionFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PositionAdjusterAdjustPositionFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PositionAdjusterAdjustPositionFunc struct {\n\tdefaultHook func(context.Context, string, string, lsifstore.Position, bool) (string, lsifstore.Position, bool, error)\n\thooks       []func(context.Context, string, string, lsifstore.Position, bool) (string, lsifstore.Position, bool, error)\n\thistory     []PositionAdjusterAdjustPositionFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nPositionAdjusterAdjustPositionFunc describes the behavior when the AdjustPosition method of the parent MockPositionAdjuster instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPositionFunc.History",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustPositionFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustPositionFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustPositionFunc) History() []PositionAdjusterAdjustPositionFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustPositionFunc) History() []PositionAdjusterAdjustPositionFuncCall\n```\n\nHistory returns a sequence of PositionAdjusterAdjustPositionFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPositionFunc.PushHook",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustPositionFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustPositionFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustPositionFunc) PushHook(hook func(context.Context, string, string, lsifstore.Position, bool) (string, lsifstore.Position, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustPositionFunc) PushHook(hook func(context.Context, string, string, lsifstore.Position, bool) (string, lsifstore.Position, bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the AdjustPosition method of the parent MockPositionAdjuster instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPositionFunc.PushReturn",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustPositionFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustPositionFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustPositionFunc) PushReturn(r0 string, r1 lsifstore.Position, r2 bool, r3 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustPositionFunc) PushReturn(r0 string, r1 lsifstore.Position, r2 bool, r3 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPositionFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustPositionFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustPositionFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustPositionFunc) SetDefaultHook(hook func(context.Context, string, string, lsifstore.Position, bool) (string, lsifstore.Position, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustPositionFunc) SetDefaultHook(hook func(context.Context, string, string, lsifstore.Position, bool) (string, lsifstore.Position, bool, error))\n```\n\nSetDefaultHook sets function that is called when the AdjustPosition method of the parent MockPositionAdjuster instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPositionFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustPositionFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustPositionFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustPositionFunc) SetDefaultReturn(r0 string, r1 lsifstore.Position, r2 bool, r3 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustPositionFunc) SetDefaultReturn(r0 string, r1 lsifstore.Position, r2 bool, r3 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPositionFunc.appendCall",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustPositionFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustPositionFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustPositionFunc) appendCall(r0 PositionAdjusterAdjustPositionFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustPositionFunc) appendCall(r0 PositionAdjusterAdjustPositionFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPositionFunc.nextHook",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustPositionFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustPositionFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustPositionFunc) nextHook() func(context.Context, string, string, lsifstore.Position, bool) (string, lsifstore.Position, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustPositionFunc) nextHook() func(context.Context, string, string, lsifstore.Position, bool) (string, lsifstore.Position, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPositionFuncCall",
              "documentation": {
                "identifier": "PositionAdjusterAdjustPositionFuncCall",
                "newPage": false,
                "searchKey": "resolvers.PositionAdjusterAdjustPositionFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PositionAdjusterAdjustPositionFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PositionAdjusterAdjustPositionFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 string\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 lsifstore.Position\n\t// Arg4 is the value of the 5th argument passed to this method\n\t// invocation.\n\tArg4 bool\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 string\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 lsifstore.Position\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 bool\n\t// Result3 is the value of the 4th result returned from this method\n\t// invocation.\n\tResult3 error\n}\n```\n\nPositionAdjusterAdjustPositionFuncCall is an object that describes an invocation of method AdjustPosition on an instance of MockPositionAdjuster. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPositionFuncCall.Args",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustPositionFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustPositionFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c PositionAdjusterAdjustPositionFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c PositionAdjusterAdjustPositionFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustPositionFuncCall.Results",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustPositionFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustPositionFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c PositionAdjusterAdjustPositionFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c PositionAdjusterAdjustPositionFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustRangeFunc",
              "documentation": {
                "identifier": "PositionAdjusterAdjustRangeFunc",
                "newPage": false,
                "searchKey": "resolvers.PositionAdjusterAdjustRangeFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PositionAdjusterAdjustRangeFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PositionAdjusterAdjustRangeFunc struct {\n\tdefaultHook func(context.Context, string, string, lsifstore.Range, bool) (string, lsifstore.Range, bool, error)\n\thooks       []func(context.Context, string, string, lsifstore.Range, bool) (string, lsifstore.Range, bool, error)\n\thistory     []PositionAdjusterAdjustRangeFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nPositionAdjusterAdjustRangeFunc describes the behavior when the AdjustRange method of the parent MockPositionAdjuster instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustRangeFunc.History",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustRangeFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustRangeFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustRangeFunc) History() []PositionAdjusterAdjustRangeFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustRangeFunc) History() []PositionAdjusterAdjustRangeFuncCall\n```\n\nHistory returns a sequence of PositionAdjusterAdjustRangeFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustRangeFunc.PushHook",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustRangeFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustRangeFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustRangeFunc) PushHook(hook func(context.Context, string, string, lsifstore.Range, bool) (string, lsifstore.Range, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustRangeFunc) PushHook(hook func(context.Context, string, string, lsifstore.Range, bool) (string, lsifstore.Range, bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the AdjustRange method of the parent MockPositionAdjuster instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustRangeFunc.PushReturn",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustRangeFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustRangeFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustRangeFunc) PushReturn(r0 string, r1 lsifstore.Range, r2 bool, r3 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustRangeFunc) PushReturn(r0 string, r1 lsifstore.Range, r2 bool, r3 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustRangeFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustRangeFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustRangeFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustRangeFunc) SetDefaultHook(hook func(context.Context, string, string, lsifstore.Range, bool) (string, lsifstore.Range, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustRangeFunc) SetDefaultHook(hook func(context.Context, string, string, lsifstore.Range, bool) (string, lsifstore.Range, bool, error))\n```\n\nSetDefaultHook sets function that is called when the AdjustRange method of the parent MockPositionAdjuster instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustRangeFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustRangeFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustRangeFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustRangeFunc) SetDefaultReturn(r0 string, r1 lsifstore.Range, r2 bool, r3 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustRangeFunc) SetDefaultReturn(r0 string, r1 lsifstore.Range, r2 bool, r3 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustRangeFunc.appendCall",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustRangeFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustRangeFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustRangeFunc) appendCall(r0 PositionAdjusterAdjustRangeFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustRangeFunc) appendCall(r0 PositionAdjusterAdjustRangeFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustRangeFunc.nextHook",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustRangeFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustRangeFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PositionAdjusterAdjustRangeFunc) nextHook() func(context.Context, string, string, lsifstore.Range, bool) (string, lsifstore.Range, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PositionAdjusterAdjustRangeFunc) nextHook() func(context.Context, string, string, lsifstore.Range, bool) (string, lsifstore.Range, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustRangeFuncCall",
              "documentation": {
                "identifier": "PositionAdjusterAdjustRangeFuncCall",
                "newPage": false,
                "searchKey": "resolvers.PositionAdjusterAdjustRangeFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PositionAdjusterAdjustRangeFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PositionAdjusterAdjustRangeFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 string\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 lsifstore.Range\n\t// Arg4 is the value of the 5th argument passed to this method\n\t// invocation.\n\tArg4 bool\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 string\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 lsifstore.Range\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 bool\n\t// Result3 is the value of the 4th result returned from this method\n\t// invocation.\n\tResult3 error\n}\n```\n\nPositionAdjusterAdjustRangeFuncCall is an object that describes an invocation of method AdjustRange on an instance of MockPositionAdjuster. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustRangeFuncCall.Args",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustRangeFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustRangeFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c PositionAdjusterAdjustRangeFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c PositionAdjusterAdjustRangeFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#PositionAdjusterAdjustRangeFuncCall.Results",
                    "documentation": {
                      "identifier": "PositionAdjusterAdjustRangeFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.PositionAdjusterAdjustRangeFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c PositionAdjusterAdjustRangeFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c PositionAdjusterAdjustRangeFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#QueryResolver",
              "documentation": {
                "identifier": "QueryResolver",
                "newPage": false,
                "searchKey": "resolvers.QueryResolver",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type QueryResolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QueryResolver interface {\n\tRanges(ctx context.Context, startLine, endLine int) ([]AdjustedCodeIntelligenceRange, error)\n\tDefinitions(ctx context.Context, line, character int) ([]AdjustedLocation, error)\n\tReferences(ctx context.Context, line, character, limit int, rawCursor string) ([]AdjustedLocation, string, error)\n\tHover(ctx context.Context, line, character int) (string, lsifstore.Range, bool, error)\n\tDiagnostics(ctx context.Context, limit int) ([]AdjustedDiagnostic, int, error)\n\tDocumentationPage(ctx context.Context, pathID string) (*semantic.DocumentationPageData, error)\n}\n```\n\nQueryResolver is the main interface to bundle-related operations exposed to the GraphQL API. This resolver consolidates the logic for bundle operations and is not itself concerned with GraphQL/API specifics (auth, validation, marshaling, etc.). This resolver is wrapped by a symmetrics resolver in this package's graphql subpackage, which is exposed directly by the API. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewQueryResolver",
                    "documentation": {
                      "identifier": "NewQueryResolver",
                      "newPage": false,
                      "searchKey": "resolvers.NewQueryResolver",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewQueryResolver(dbStore DBStore,..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewQueryResolver(\n\tdbStore DBStore,\n\tlsifStore LSIFStore,\n\tcachedCommitChecker *cachedCommitChecker,\n\tpositionAdjuster PositionAdjuster,\n\trepositoryID int,\n\tcommit string,\n\tpath string,\n\tuploads []store.Dump,\n\toperations *operations,\n) QueryResolver\n```\n\nNewQueryResolver create a new query resolver with the given services. The methods of this struct return queries for the given repository, commit, and path, and will query only the bundles associated with the given dump objects. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#RepoUpdaterClient",
              "documentation": {
                "identifier": "RepoUpdaterClient",
                "newPage": false,
                "searchKey": "resolvers.RepoUpdaterClient",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepoUpdaterClient enqueuer.RepoUpdaterClient"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepoUpdaterClient = enqueuer.RepoUpdaterClient\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#RepoUpdaterClientEnqueueRepoUpdateFunc",
              "documentation": {
                "identifier": "RepoUpdaterClientEnqueueRepoUpdateFunc",
                "newPage": false,
                "searchKey": "resolvers.RepoUpdaterClientEnqueueRepoUpdateFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepoUpdaterClientEnqueueRepoUpdateFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepoUpdaterClientEnqueueRepoUpdateFunc struct {\n\tdefaultHook func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error)\n\thooks       []func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error)\n\thistory     []RepoUpdaterClientEnqueueRepoUpdateFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nRepoUpdaterClientEnqueueRepoUpdateFunc describes the behavior when the EnqueueRepoUpdate method of the parent MockRepoUpdaterClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#RepoUpdaterClientEnqueueRepoUpdateFunc.History",
                    "documentation": {
                      "identifier": "RepoUpdaterClientEnqueueRepoUpdateFunc.History",
                      "newPage": false,
                      "searchKey": "resolvers.RepoUpdaterClientEnqueueRepoUpdateFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *RepoUpdaterClientEnqueueRepoUpdateFunc) History() []RepoUpdaterClientEnqueueRepoUpdateFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *RepoUpdaterClientEnqueueRepoUpdateFunc) History() []RepoUpdaterClientEnqueueRepoUpdateFuncCall\n```\n\nHistory returns a sequence of RepoUpdaterClientEnqueueRepoUpdateFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#RepoUpdaterClientEnqueueRepoUpdateFunc.PushHook",
                    "documentation": {
                      "identifier": "RepoUpdaterClientEnqueueRepoUpdateFunc.PushHook",
                      "newPage": false,
                      "searchKey": "resolvers.RepoUpdaterClientEnqueueRepoUpdateFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *RepoUpdaterClientEnqueueRepoUpdateFunc) PushHook(hook func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *RepoUpdaterClientEnqueueRepoUpdateFunc) PushHook(hook func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the EnqueueRepoUpdate method of the parent MockRepoUpdaterClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#RepoUpdaterClientEnqueueRepoUpdateFunc.PushReturn",
                    "documentation": {
                      "identifier": "RepoUpdaterClientEnqueueRepoUpdateFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "resolvers.RepoUpdaterClientEnqueueRepoUpdateFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *RepoUpdaterClientEnqueueRepoUpdateFunc) PushReturn(r0 *protocol.RepoUpdateResponse, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *RepoUpdaterClientEnqueueRepoUpdateFunc) PushReturn(r0 *protocol.RepoUpdateResponse, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#RepoUpdaterClientEnqueueRepoUpdateFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "RepoUpdaterClientEnqueueRepoUpdateFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "resolvers.RepoUpdaterClientEnqueueRepoUpdateFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *RepoUpdaterClientEnqueueRepoUpdateFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *RepoUpdaterClientEnqueueRepoUpdateFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error))\n```\n\nSetDefaultHook sets function that is called when the EnqueueRepoUpdate method of the parent MockRepoUpdaterClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#RepoUpdaterClientEnqueueRepoUpdateFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "RepoUpdaterClientEnqueueRepoUpdateFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "resolvers.RepoUpdaterClientEnqueueRepoUpdateFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *RepoUpdaterClientEnqueueRepoUpdateFunc) SetDefaultReturn(r0 *protocol.RepoUpdateResponse, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *RepoUpdaterClientEnqueueRepoUpdateFunc) SetDefaultReturn(r0 *protocol.RepoUpdateResponse, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#RepoUpdaterClientEnqueueRepoUpdateFunc.appendCall",
                    "documentation": {
                      "identifier": "RepoUpdaterClientEnqueueRepoUpdateFunc.appendCall",
                      "newPage": false,
                      "searchKey": "resolvers.RepoUpdaterClientEnqueueRepoUpdateFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *RepoUpdaterClientEnqueueRepoUpdateFunc) appendCall(r0 RepoUpdaterClientEnqueueRepoUpdateFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *RepoUpdaterClientEnqueueRepoUpdateFunc) appendCall(r0 RepoUpdaterClientEnqueueRepoUpdateFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#RepoUpdaterClientEnqueueRepoUpdateFunc.nextHook",
                    "documentation": {
                      "identifier": "RepoUpdaterClientEnqueueRepoUpdateFunc.nextHook",
                      "newPage": false,
                      "searchKey": "resolvers.RepoUpdaterClientEnqueueRepoUpdateFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *RepoUpdaterClientEnqueueRepoUpdateFunc) nextHook() func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *RepoUpdaterClientEnqueueRepoUpdateFunc) nextHook() func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#RepoUpdaterClientEnqueueRepoUpdateFuncCall",
              "documentation": {
                "identifier": "RepoUpdaterClientEnqueueRepoUpdateFuncCall",
                "newPage": false,
                "searchKey": "resolvers.RepoUpdaterClientEnqueueRepoUpdateFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepoUpdaterClientEnqueueRepoUpdateFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepoUpdaterClientEnqueueRepoUpdateFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 api.RepoName\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *protocol.RepoUpdateResponse\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nRepoUpdaterClientEnqueueRepoUpdateFuncCall is an object that describes an invocation of method EnqueueRepoUpdate on an instance of MockRepoUpdaterClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#RepoUpdaterClientEnqueueRepoUpdateFuncCall.Args",
                    "documentation": {
                      "identifier": "RepoUpdaterClientEnqueueRepoUpdateFuncCall.Args",
                      "newPage": false,
                      "searchKey": "resolvers.RepoUpdaterClientEnqueueRepoUpdateFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c RepoUpdaterClientEnqueueRepoUpdateFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c RepoUpdaterClientEnqueueRepoUpdateFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#RepoUpdaterClientEnqueueRepoUpdateFuncCall.Results",
                    "documentation": {
                      "identifier": "RepoUpdaterClientEnqueueRepoUpdateFuncCall.Results",
                      "newPage": false,
                      "searchKey": "resolvers.RepoUpdaterClientEnqueueRepoUpdateFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c RepoUpdaterClientEnqueueRepoUpdateFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c RepoUpdaterClientEnqueueRepoUpdateFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#Resolver",
              "documentation": {
                "identifier": "Resolver",
                "newPage": false,
                "searchKey": "resolvers.Resolver",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Resolver interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Resolver interface {\n\tGetUploadByID(ctx context.Context, id int) (store.Upload, bool, error)\n\tGetIndexByID(ctx context.Context, id int) (store.Index, bool, error)\n\tGetUploadsByIDs(ctx context.Context, ids ...int) ([]store.Upload, error)\n\tGetIndexesByIDs(ctx context.Context, ids ...int) ([]store.Index, error)\n\tUploadConnectionResolver(opts store.GetUploadsOptions) *UploadsResolver\n\tIndexConnectionResolver(opts store.GetIndexesOptions) *IndexesResolver\n\tDeleteUploadByID(ctx context.Context, uploadID int) error\n\tDeleteIndexByID(ctx context.Context, id int) error\n\tIndexConfiguration(ctx context.Context, repositoryID int) ([]byte, error)\n\tUpdateIndexConfigurationByRepositoryID(ctx context.Context, repositoryID int, configuration string) error\n\tCommitGraph(ctx context.Context, repositoryID int) (gql.CodeIntelligenceCommitGraphResolver, error)\n\tQueueAutoIndexJobForRepo(ctx context.Context, repositoryID int) error\n\tQueryResolver(ctx context.Context, args *gql.GitBlobLSIFDataArgs) (QueryResolver, error)\n}\n```\n\nResolver is the main interface to code intel-related operations exposed to the GraphQL API. This resolver consolidates the logic for code intel operations and is not itself concerned with GraphQL/API specifics (auth, validation, marshaling, etc.). This resolver is wrapped by a symmetrics resolver in this package's graphql subpackage, which is exposed directly by the API. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewResolver",
                    "documentation": {
                      "identifier": "NewResolver",
                      "newPage": false,
                      "searchKey": "resolvers.NewResolver",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewResolver(dbStore DBStore,..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewResolver(\n\tdbStore DBStore,\n\tlsifStore LSIFStore,\n\tgitserverClient GitserverClient,\n\tindexEnqueuer IndexEnqueuer,\n\thunkCache HunkCache,\n\tobservationContext *observation.Context,\n) Resolver\n```\n\nNewResolver creates a new resolver with the given services. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#UploadsResolver",
              "documentation": {
                "identifier": "UploadsResolver",
                "newPage": false,
                "searchKey": "resolvers.UploadsResolver",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UploadsResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UploadsResolver struct {\n\tdbStore DBStore\n\topts    store.GetUploadsOptions\n\tonce    sync.Once\n\t//\n\tUploads    []store.Upload\n\tTotalCount int\n\tNextOffset *int\n\terr        error\n}\n```\n\nUploadsResolver wraps store.GetUploads so that the underlying function can be invoked lazily and its results memoized. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#NewUploadsResolver",
                    "documentation": {
                      "identifier": "NewUploadsResolver",
                      "newPage": false,
                      "searchKey": "resolvers.NewUploadsResolver",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewUploadsResolver(dbStore DBStore, opts store.GetUploadsOptions) *UploadsResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewUploadsResolver(dbStore DBStore, opts store.GetUploadsOptions) *UploadsResolver\n```\n\nNewUploadsResolver creates a new UploadsResolver which wil invoke store.GetUploads with the given options. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#UploadsResolver.Resolve",
                    "documentation": {
                      "identifier": "UploadsResolver.Resolve",
                      "newPage": false,
                      "searchKey": "resolvers.UploadsResolver.Resolve",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UploadsResolver) Resolve(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UploadsResolver) Resolve(ctx context.Context) error\n```\n\nResolve ensures that store.GetUploads has been invoked. This function returns the error from the invocation, if any. If the error is nil, then the resolver's Uploads, TotalCount, and NextOffset fields will be populated. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#UploadsResolver.resolve",
                    "documentation": {
                      "identifier": "UploadsResolver.resolve",
                      "newPage": false,
                      "searchKey": "resolvers.UploadsResolver.resolve",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *UploadsResolver) resolve(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *UploadsResolver) resolve(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#adjustPositionTestCase",
              "documentation": {
                "identifier": "adjustPositionTestCase",
                "newPage": false,
                "searchKey": "resolvers.adjustPositionTestCase",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type adjustPositionTestCase struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype adjustPositionTestCase struct {\n\tdiff         string // The git diff output\n\tdiffName     string // The git diff output name\n\tdescription  string // The description of the test\n\tline         int    // The target line (one-indexed)\n\texpectedOk   bool   // Whether the operation should succeed\n\texpectedLine int    // The expected adjusted line (one-indexed)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#adjustedUpload",
              "documentation": {
                "identifier": "adjustedUpload",
                "newPage": false,
                "searchKey": "resolvers.adjustedUpload",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type adjustedUpload struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype adjustedUpload struct {\n\tUpload               store.Dump\n\tAdjustedPath         string\n\tAdjustedPosition     lsifstore.Position\n\tAdjustedPathInBundle string\n}\n```\n\nadjustedUpload pairs an upload visible from the current target commit with the current target path and position adjusted so that it matches the data within the underlying index. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#cachedCommitChecker",
              "documentation": {
                "identifier": "cachedCommitChecker",
                "newPage": false,
                "searchKey": "resolvers.cachedCommitChecker",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type cachedCommitChecker struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype cachedCommitChecker struct {\n\tgitserverClient GitserverClient\n\tcache           map[int]map[string]bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#newCachedCommitChecker",
                    "documentation": {
                      "identifier": "newCachedCommitChecker",
                      "newPage": false,
                      "searchKey": "resolvers.newCachedCommitChecker",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newCachedCommitChecker(gitserverClient GitserverClient) *cachedCommitChecker"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newCachedCommitChecker(gitserverClient GitserverClient) *cachedCommitChecker\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#cachedCommitChecker.exists",
                    "documentation": {
                      "identifier": "cachedCommitChecker.exists",
                      "newPage": false,
                      "searchKey": "resolvers.cachedCommitChecker.exists",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *cachedCommitChecker) exists(ctx context.Context, repositoryID int, commit string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *cachedCommitChecker) exists(ctx context.Context, repositoryID int, commit string) (bool, error)\n```\n\nexists determines if the given commit is resolvable for the given repository. If we do not know the answer from a previous call to set or exists, we ask gitserver to resolve the commit and store the result for a subsequent call. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#cachedCommitChecker.set",
                    "documentation": {
                      "identifier": "cachedCommitChecker.set",
                      "newPage": false,
                      "searchKey": "resolvers.cachedCommitChecker.set",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *cachedCommitChecker) set(repositoryID int, commit string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *cachedCommitChecker) set(repositoryID int, commit string)\n```\n\nset marks the given repository and commit as valid and resolvable by gitserver. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#cursorAdjustedUpload",
              "documentation": {
                "identifier": "cursorAdjustedUpload",
                "newPage": false,
                "searchKey": "resolvers.cursorAdjustedUpload",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type cursorAdjustedUpload struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype cursorAdjustedUpload struct {\n\tDumpID               int                `json:\"dumpID\"`\n\tAdjustedPath         string             `json:\"adjustedPath\"`\n\tAdjustedPosition     lsifstore.Position `json:\"adjustedPosition\"`\n\tAdjustedPathInBundle string             `json:\"adjustedPathInBundle\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#operations",
              "documentation": {
                "identifier": "operations",
                "newPage": false,
                "searchKey": "resolvers.operations",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type operations struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype operations struct {\n\tqueryResolver     *observation.Operation\n\tdefinitions       *observation.Operation\n\tdiagnostics       *observation.Operation\n\thover             *observation.Operation\n\tranges            *observation.Operation\n\treferences        *observation.Operation\n\tdocumentationPage *observation.Operation\n\n\tfindClosestDumps *observation.Operation\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#newOperations",
                    "documentation": {
                      "identifier": "newOperations",
                      "newPage": false,
                      "searchKey": "resolvers.newOperations",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newOperations(observationContext *observation.Context) *operations"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newOperations(observationContext *observation.Context) *operations\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#positionAdjuster",
              "documentation": {
                "identifier": "positionAdjuster",
                "newPage": false,
                "searchKey": "resolvers.positionAdjuster",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type positionAdjuster struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype positionAdjuster struct {\n\trepo      *types.Repo\n\tcommit    string\n\thunkCache HunkCache\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#positionAdjuster.AdjustPath",
                    "documentation": {
                      "identifier": "positionAdjuster.AdjustPath",
                      "newPage": false,
                      "searchKey": "resolvers.positionAdjuster.AdjustPath",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *positionAdjuster) AdjustPath(ctx context.Context, commit, path string, reverse bool) (string, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *positionAdjuster) AdjustPath(ctx context.Context, commit, path string, reverse bool) (string, bool, error)\n```\n\nAdjustPath translates the given path from the source commit into the given target commit. If revese is true, then the source and target commits are swapped. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#positionAdjuster.AdjustPosition",
                    "documentation": {
                      "identifier": "positionAdjuster.AdjustPosition",
                      "newPage": false,
                      "searchKey": "resolvers.positionAdjuster.AdjustPosition",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *positionAdjuster) AdjustPosition(ctx context.Context, commit, path string, px lsifstore.Position, reverse bool) (string, lsifstore.Position, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *positionAdjuster) AdjustPosition(ctx context.Context, commit, path string, px lsifstore.Position, reverse bool) (string, lsifstore.Position, bool, error)\n```\n\nAdjustPosition translates the given position from the source commit into the given target commit. The adjusted path and position are returned, along with a boolean flag indicating that the translation was successful. If revese is true, then the source and target commits are swapped. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#positionAdjuster.AdjustRange",
                    "documentation": {
                      "identifier": "positionAdjuster.AdjustRange",
                      "newPage": false,
                      "searchKey": "resolvers.positionAdjuster.AdjustRange",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *positionAdjuster) AdjustRange(ctx context.Context, commit, path string, rx lsifstore.Range, reverse bool) (string, lsifstore.Range, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *positionAdjuster) AdjustRange(ctx context.Context, commit, path string, rx lsifstore.Range, reverse bool) (string, lsifstore.Range, bool, error)\n```\n\nAdjustRange translates the given range from the source commit into the given target commit. The adjusted path and range are returned, along with a boolean flag indicating that the translation was successful. If revese is true, then the source and target commits are swapped. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#positionAdjuster.readHunks",
                    "documentation": {
                      "identifier": "positionAdjuster.readHunks",
                      "newPage": false,
                      "searchKey": "resolvers.positionAdjuster.readHunks",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *positionAdjuster) readHunks(ctx context.Context, repo *types.Repo, sourceCommit, targetCommit, path string) ([]*diff.Hunk, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *positionAdjuster) readHunks(ctx context.Context, repo *types.Repo, sourceCommit, targetCommit, path string) ([]*diff.Hunk, error)\n```\n\nreadHunks returns a position-ordered slice of changes (additions or deletions) of the given path between the given source and target commits. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#positionAdjuster.readHunksCached",
                    "documentation": {
                      "identifier": "positionAdjuster.readHunksCached",
                      "newPage": false,
                      "searchKey": "resolvers.positionAdjuster.readHunksCached",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *positionAdjuster) readHunksCached(ctx context.Context, repo *types.Repo, sourceCommit, targetCommit, path string, reverse bool) ([]*diff.Hunk, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *positionAdjuster) readHunksCached(ctx context.Context, repo *types.Repo, sourceCommit, targetCommit, path string, reverse bool) ([]*diff.Hunk, error)\n```\n\nreadHunksCached returns a position-ordered slice of changes (additions or deletions) of the given path between the given source and target commits. If revese is true, then the source and target commits are swapped. If the position adjuster has a hunk cache, it will read from it before attempting to contact a remote server, and populate the cache with new results \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#qualifiedMonikerSet",
              "documentation": {
                "identifier": "qualifiedMonikerSet",
                "newPage": false,
                "searchKey": "resolvers.qualifiedMonikerSet",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type qualifiedMonikerSet struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype qualifiedMonikerSet struct {\n\tmonikers       []semantic.QualifiedMonikerData\n\tmonikerHashMap map[string]struct{}\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#newQualifiedMonikerSet",
                    "documentation": {
                      "identifier": "newQualifiedMonikerSet",
                      "newPage": false,
                      "searchKey": "resolvers.newQualifiedMonikerSet",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newQualifiedMonikerSet() *qualifiedMonikerSet"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newQualifiedMonikerSet() *qualifiedMonikerSet\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#qualifiedMonikerSet.add",
                    "documentation": {
                      "identifier": "qualifiedMonikerSet.add",
                      "newPage": false,
                      "searchKey": "resolvers.qualifiedMonikerSet.add",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *qualifiedMonikerSet) add(qualifiedMoniker semantic.QualifiedMonikerData)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *qualifiedMonikerSet) add(qualifiedMoniker semantic.QualifiedMonikerData)\n```\n\nadd the given qualified moniker to the set if it is distinct from all elements currently in the set. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver",
              "documentation": {
                "identifier": "queryResolver",
                "newPage": false,
                "searchKey": "resolvers.queryResolver",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type queryResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype queryResolver struct {\n\tdbStore             DBStore\n\tlsifStore           LSIFStore\n\tcachedCommitChecker *cachedCommitChecker\n\tpositionAdjuster    PositionAdjuster\n\trepositoryID        int\n\tcommit              string\n\tpath                string\n\tuploads             []store.Dump\n\toperations          *operations\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#newQueryResolver",
                    "documentation": {
                      "identifier": "newQueryResolver",
                      "newPage": false,
                      "searchKey": "resolvers.newQueryResolver",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newQueryResolver(dbStore DBStore,..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newQueryResolver(\n\tdbStore DBStore,\n\tlsifStore LSIFStore,\n\tcachedCommitChecker *cachedCommitChecker,\n\tpositionAdjuster PositionAdjuster,\n\trepositoryID int,\n\tcommit string,\n\tpath string,\n\tuploads []store.Dump,\n\toperations *operations,\n) *queryResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.Definitions",
                    "documentation": {
                      "identifier": "queryResolver.Definitions",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.Definitions",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) Definitions(ctx context.Context, line, character int) (_ []AdjustedLocation, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) Definitions(ctx context.Context, line, character int) (_ []AdjustedLocation, err error)\n```\n\nDefinitions returns the list of source locations that define the symbol at the given position. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.Diagnostics",
                    "documentation": {
                      "identifier": "queryResolver.Diagnostics",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.Diagnostics",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) Diagnostics(ctx context.Context, limit int) (adjustedDiagnostics []AdjustedDiagnostic, _ int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) Diagnostics(ctx context.Context, limit int) (adjustedDiagnostics []AdjustedDiagnostic, _ int, err error)\n```\n\nDiagnostics returns the diagnostics for documents with the given path prefix. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.DocumentationPage",
                    "documentation": {
                      "identifier": "queryResolver.DocumentationPage",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.DocumentationPage",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) DocumentationPage(ctx context.Context, pathID string) (_ *semantic.DocumentationPageData, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) DocumentationPage(ctx context.Context, pathID string) (_ *semantic.DocumentationPageData, err error)\n```\n\nDocumentationPage returns the DocumentationPage for the given PathID. \n\nnil, nil is returned if the page does not exist. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.Hover",
                    "documentation": {
                      "identifier": "queryResolver.Hover",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.Hover",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) Hover(ctx context.Context, line, character int) (_ string, _ lsifstore.Range, _ bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) Hover(ctx context.Context, line, character int) (_ string, _ lsifstore.Range, _ bool, err error)\n```\n\nHover returns the hover text and range for the symbol at the given position. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.Ranges",
                    "documentation": {
                      "identifier": "queryResolver.Ranges",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.Ranges",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) Ranges(ctx context.Context, startLine, endLine int) (adjustedRanges []AdjustedCodeIntelligenceRange, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) Ranges(ctx context.Context, startLine, endLine int) (adjustedRanges []AdjustedCodeIntelligenceRange, err error)\n```\n\nRanges returns code intelligence for the ranges that fall within the given range of lines. These results are partial and do not include references outside the current file, or any location that requires cross-linking of bundles (cross-repo or cross-root). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.References",
                    "documentation": {
                      "identifier": "queryResolver.References",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.References",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) References(ctx context.Context, line, character, limit int, rawCursor string) (_ []AdjustedLocation, _ string, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) References(ctx context.Context, line, character, limit int, rawCursor string) (_ []AdjustedLocation, _ string, err error)\n```\n\nReferences returns the list of source locations that reference the symbol at the given position. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.adjustCodeIntelligenceRange",
                    "documentation": {
                      "identifier": "queryResolver.adjustCodeIntelligenceRange",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.adjustCodeIntelligenceRange",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) adjustCodeIntelligenceRange(ctx context.Context, upload adjustedUpload, rn lsifstore.CodeIntelligenceRange) (AdjustedCodeIntelligenceRange, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) adjustCodeIntelligenceRange(ctx context.Context, upload adjustedUpload, rn lsifstore.CodeIntelligenceRange) (AdjustedCodeIntelligenceRange, bool, error)\n```\n\nadjustCodeIntelligenceRange translates a range summary (relative to the indexed commit) into an equivalent range summary in the requested commit. If the translation fails, a false-valued flag is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.adjustDiagnostic",
                    "documentation": {
                      "identifier": "queryResolver.adjustDiagnostic",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.adjustDiagnostic",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) adjustDiagnostic(ctx context.Context, adjustedUpload adjustedUpload, diagnostic lsifstore.Diagnostic) (AdjustedDiagnostic, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) adjustDiagnostic(ctx context.Context, adjustedUpload adjustedUpload, diagnostic lsifstore.Diagnostic) (AdjustedDiagnostic, error)\n```\n\nadjustDiagnostic translates a diagnostic (relative to the indexed commit) into an equivalent diagnostic in the requested commit. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.adjustLocation",
                    "documentation": {
                      "identifier": "queryResolver.adjustLocation",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.adjustLocation",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) adjustLocation(ctx context.Context, dump store.Dump, location lsifstore.Location) (AdjustedLocation, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) adjustLocation(ctx context.Context, dump store.Dump, location lsifstore.Location) (AdjustedLocation, error)\n```\n\nadjustLocation translates a location (relative to the indexed commit) into an equivalent location in the requested commit. If the translation fails, then the original commit and range are used as the commit and range of the adjusted location. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.adjustLocations",
                    "documentation": {
                      "identifier": "queryResolver.adjustLocations",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.adjustLocations",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) adjustLocations(ctx context.Context, uploadsByID map[int]dbstore.Dump, locations []lsifstore.Location) ([]AdjustedLocation, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) adjustLocations(ctx context.Context, uploadsByID map[int]dbstore.Dump, locations []lsifstore.Location) ([]AdjustedLocation, error)\n```\n\nadjustLocations translates a set of locations into an equivalent set of locations in the requested commit. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.adjustRange",
                    "documentation": {
                      "identifier": "queryResolver.adjustRange",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.adjustRange",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) adjustRange(ctx context.Context, repositoryID int, commit, path string, rn lsifstore.Range) (string, lsifstore.Range, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) adjustRange(ctx context.Context, repositoryID int, commit, path string, rn lsifstore.Range) (string, lsifstore.Range, bool, error)\n```\n\nadjustRange translates a range (relative to the indexed commit) into an equivalent range in the requested commit. If the translation fails, then the original commit and range are returned along with a false-valued flag. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.adjustUpload",
                    "documentation": {
                      "identifier": "queryResolver.adjustUpload",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.adjustUpload",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) adjustUpload(ctx context.Context, line, character int, upload store.Dump) (adjustedUpload, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) adjustUpload(ctx context.Context, line, character int, upload store.Dump) (adjustedUpload, bool, error)\n```\n\nadjustUpload adjusts the current target path and the given position for the given upload. If the upload cannot be adjusted, a false-valued flag is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.adjustUploadPaths",
                    "documentation": {
                      "identifier": "queryResolver.adjustUploadPaths",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.adjustUploadPaths",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) adjustUploadPaths(ctx context.Context) ([]adjustedUpload, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) adjustUploadPaths(ctx context.Context) ([]adjustedUpload, error)\n```\n\nadjustUploadPaths adjusts the current target path for each upload visible from the current target commit. If an upload cannot be adjusted, it will be omitted from the returned slice. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.adjustUploads",
                    "documentation": {
                      "identifier": "queryResolver.adjustUploads",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.adjustUploads",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) adjustUploads(ctx context.Context, line, character int) ([]adjustedUpload, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) adjustUploads(ctx context.Context, line, character int) ([]adjustedUpload, error)\n```\n\nadjustUploads adjusts the current target path and the given position for each upload visible from the current target commit. If an upload cannot be adjusted, it will be omitted from the returned slice. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.adjustedUploadsFromCursor",
                    "documentation": {
                      "identifier": "queryResolver.adjustedUploadsFromCursor",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.adjustedUploadsFromCursor",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) adjustedUploadsFromCursor(ctx context.Context, line, character int, uploadsByID map[int]dbstore.Dump, cursor *referencesCursor) ([]adjustedUpload, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) adjustedUploadsFromCursor(ctx context.Context, line, character int, uploadsByID map[int]dbstore.Dump, cursor *referencesCursor) ([]adjustedUpload, error)\n```\n\nadjustedUploadsFromCursor adjusts the current target path and the given position for each upload visible from the current target commit. If an upload cannot be adjusted, it will be omitted from the returned slice. The returned slice will be cached on the given cursor. If this data is already stashed on the given cursor, the result is recalculated from the cursor data/resolver context, and we don't need to hit the database. \n\nAn error is returned if the set of visible uploads has changed since the previous request of this result set (specifically if an index becomes invisible). This behavior may change in the future. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.definitionUploadIDsFromCursor",
                    "documentation": {
                      "identifier": "queryResolver.definitionUploadIDsFromCursor",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.definitionUploadIDsFromCursor",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) definitionUploadIDsFromCursor(ctx context.Context, adjustedUploads []adjustedUpload, orderedMonikers []semantic.QualifiedMonikerData, cursor *referencesCursor) ([]int, []dbstore.Dump, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) definitionUploadIDsFromCursor(ctx context.Context, adjustedUploads []adjustedUpload, orderedMonikers []semantic.QualifiedMonikerData, cursor *referencesCursor) ([]int, []dbstore.Dump, error)\n```\n\ndefinitionUploadIDsFromCursor returns a set of identifiers for uploads that provide any of the given monikers. Uploads already present in the given adjusted uploads slice will be omitted from the returned slice. The returned slice will be cached on the given cursor. If this data is already stashed in the given cursor, we don't need to hit the database. \n\nThe upload records returned from the database, if any, are also returned from this method to help reduce the number of database queries necessary. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.definitionUploads",
                    "documentation": {
                      "identifier": "queryResolver.definitionUploads",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.definitionUploads",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) definitionUploads(ctx context.Context, orderedMonikers []semantic.QualifiedMonikerData) ([]store.Dump, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) definitionUploads(ctx context.Context, orderedMonikers []semantic.QualifiedMonikerData) ([]store.Dump, error)\n```\n\ndefinitionUploads returns the set of uploads that provide any of the given monikers. This method will not return uploads for commits which are unknown to gitserver. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.monikerLocations",
                    "documentation": {
                      "identifier": "queryResolver.monikerLocations",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.monikerLocations",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) monikerLocations(ctx context.Context, uploads []dbstore.Dump, orderedMonikers []semantic.QualifiedMonikerData, tableName string, limit, offset int) ([]lsifstore.Location, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) monikerLocations(ctx context.Context, uploads []dbstore.Dump, orderedMonikers []semantic.QualifiedMonikerData, tableName string, limit, offset int) ([]lsifstore.Location, int, error)\n```\n\nmonikerLocations returns the set of locations defined by any of the given uploads tagged with any of the given monikers. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.orderedMonikers",
                    "documentation": {
                      "identifier": "queryResolver.orderedMonikers",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.orderedMonikers",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) orderedMonikers(ctx context.Context, adjustedUploads []adjustedUpload, kind string) ([]semantic.QualifiedMonikerData, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) orderedMonikers(ctx context.Context, adjustedUploads []adjustedUpload, kind string) ([]semantic.QualifiedMonikerData, error)\n```\n\norderedMonikers returns the set of monikers attached to the ranges specified by the given upload list. If kind is a non-empty string, monikers with a distinct kind are ignored. \n\nThe return slice is ordered by visible upload, then by specificity, i.e., monikers attached to enclosed ranges before before monikers attached to enclosing ranges. Monikers are de-duplicated, such that the second (third, ...) occurrences are removed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.orderedMonikersFromCursor",
                    "documentation": {
                      "identifier": "queryResolver.orderedMonikersFromCursor",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.orderedMonikersFromCursor",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) orderedMonikersFromCursor(ctx context.Context, adjustedUploads []adjustedUpload, cursor *referencesCursor) ([]semantic.QualifiedMonikerData, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) orderedMonikersFromCursor(ctx context.Context, adjustedUploads []adjustedUpload, cursor *referencesCursor) ([]semantic.QualifiedMonikerData, error)\n```\n\norderedMonikersFromCursor returns the set of monikers attached to the ranges specified by the given upload list. The returned slice will be cached on the given cursor. If this data is already stashed in the given cursor, we don't need to hit the database. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.pageLocalReferences",
                    "documentation": {
                      "identifier": "queryResolver.pageLocalReferences",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.pageLocalReferences",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) pageLocalReferences(ctx context.Context, adjustedUploads []adjustedUpload, cursor *referencesCursor, limit int) ([]lsifstore.Location, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) pageLocalReferences(ctx context.Context, adjustedUploads []adjustedUpload, cursor *referencesCursor, limit int) ([]lsifstore.Location, bool, error)\n```\n\npageLocalReferences returns a slice of the (local) result set denoted by the given cursor fulfilled by traversing the LSIF graph. The given cursor will be adjusted to reflect the offsets required to resolve the next page of results. If there are no more pages left in the result set, a false-valued flag is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.pageReferences",
                    "documentation": {
                      "identifier": "queryResolver.pageReferences",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.pageReferences",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) pageReferences(ctx context.Context, adjustedUploads []adjustedUpload, orderedMonikers []semantic.QualifiedMonikerData, definitionUploadIDs []int, uploadsByID map[int]dbstore.Dump, cursor *referencesCursor, limit int) ([]lsifstore.Location, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) pageReferences(ctx context.Context, adjustedUploads []adjustedUpload, orderedMonikers []semantic.QualifiedMonikerData, definitionUploadIDs []int, uploadsByID map[int]dbstore.Dump, cursor *referencesCursor, limit int) ([]lsifstore.Location, bool, error)\n```\n\npageReferences returns a slice of the result set denoted by the given cursor. The given cursor will be adjusted to reflect the offsets required to resolve the next page of results. If there are no more pages left in the result set, a false-valued flag is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.pageRemoteReferences",
                    "documentation": {
                      "identifier": "queryResolver.pageRemoteReferences",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.pageRemoteReferences",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) pageRemoteReferences(ctx context.Context, adjustedUploads []adjustedUpload, orderedMonikers []semantic.QualifiedMonikerData, definitionUploadIDs []int, uploadsByID map[int]dbstore.Dump, cursor *referencesCursor, limit int) ([]lsifstore.Location, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) pageRemoteReferences(ctx context.Context, adjustedUploads []adjustedUpload, orderedMonikers []semantic.QualifiedMonikerData, definitionUploadIDs []int, uploadsByID map[int]dbstore.Dump, cursor *referencesCursor, limit int) ([]lsifstore.Location, bool, error)\n```\n\npageRemoteReferences returns a slice of the (remote) result set denoted by the given cursor fulfilled by performing a moniker search over a group of indexes. The given cursor will be adjusted to reflect the offsets required to resolve the next page of results. If there are no more pages left in the result set, a false-valued flag is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.uploadIDsWithReferences",
                    "documentation": {
                      "identifier": "queryResolver.uploadIDsWithReferences",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.uploadIDsWithReferences",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) uploadIDsWithReferences(ctx context.Context, orderedMonikers []semantic.QualifiedMonikerData, ignoreIDs []int, limit, offset int) (ids []int, recordsScanned int, totalCount int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) uploadIDsWithReferences(ctx context.Context, orderedMonikers []semantic.QualifiedMonikerData, ignoreIDs []int, limit, offset int) (ids []int, recordsScanned int, totalCount int, err error)\n```\n\nuploadIDsWithReferences returns a slice of uploads that contain a reference to any of the given identifiers. This method will not return uploads for commits which are unknown to gitserver, nor will it return uploads which are listed in the given ignored identifier slice. This method also returns the number of records scanned (but possibly filtered out from the return slice) from the database (the offset for the subsequent request) and the total number of records in the database. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#queryResolver.uploadsByIDs",
                    "documentation": {
                      "identifier": "queryResolver.uploadsByIDs",
                      "newPage": false,
                      "searchKey": "resolvers.queryResolver.uploadsByIDs",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *queryResolver) uploadsByIDs(ctx context.Context, ids []int, uploadsByIDs map[int]dbstore.Dump) ([]dbstore.Dump, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *queryResolver) uploadsByIDs(ctx context.Context, ids []int, uploadsByIDs map[int]dbstore.Dump) ([]dbstore.Dump, error)\n```\n\nuploadsByIDs returns a slice of uploads with the given identifiers. This method will not return a new upload record for a commit which is unknown to gitserver. The given upload map is used as a caching mechanism - uploads present in the map are not fetched again from the database. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#referencesCursor",
              "documentation": {
                "identifier": "referencesCursor",
                "newPage": false,
                "searchKey": "resolvers.referencesCursor",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type referencesCursor struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype referencesCursor struct {\n\tAdjustedUploads           []cursorAdjustedUpload          `json:\"adjustedUploads\"`\n\tDefinitionUploadIDs       []int                           `json:\"definitionUploadIDs\"`\n\tDefinitionUploadIDsCached bool                            `json:\"definitionUploadIDsCached\"`\n\tOrderedMonikers           []semantic.QualifiedMonikerData `json:\"orderedMonikers\"`\n\tRemotePhase               bool                            `json:\"remotePhase\"`\n\tLocalOffset               int                             `json:\"localOffset\"`\n\tLocalBatchOffset          int                             `json:\"localBatchOffset\"`\n\tBatchIDs                  []int                           `json:\"batchIDs\"`\n\tRemoteOffset              int                             `json:\"remoteOffset\"`\n\tRemoteBatchOffset         int                             `json:\"remoteBatchOffset\"`\n}\n```\n\nreferencesCursor stores (enough of) the state of a previous References request used to calculate the offset into the result set to be returned by the current request. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#decodeCursor",
                    "documentation": {
                      "identifier": "decodeCursor",
                      "newPage": false,
                      "searchKey": "resolvers.decodeCursor",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func decodeCursor(rawEncoded string) (referencesCursor, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc decodeCursor(rawEncoded string) (referencesCursor, error)\n```\n\ndecodeCursor is the inverse of encodeCursor. If the given encoded string is empty, then a fresh cursor is returned. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#resolver",
              "documentation": {
                "identifier": "resolver",
                "newPage": false,
                "searchKey": "resolvers.resolver",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type resolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype resolver struct {\n\tdbStore         DBStore\n\tlsifStore       LSIFStore\n\tgitserverClient GitserverClient\n\tindexEnqueuer   IndexEnqueuer\n\thunkCache       HunkCache\n\toperations      *operations\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#newResolver",
                    "documentation": {
                      "identifier": "newResolver",
                      "newPage": false,
                      "searchKey": "resolvers.newResolver",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newResolver(dbStore DBStore,..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newResolver(\n\tdbStore DBStore,\n\tlsifStore LSIFStore,\n\tgitserverClient GitserverClient,\n\tindexEnqueuer IndexEnqueuer,\n\thunkCache HunkCache,\n\tobservationContext *observation.Context,\n) *resolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#resolver.CommitGraph",
                    "documentation": {
                      "identifier": "resolver.CommitGraph",
                      "newPage": false,
                      "searchKey": "resolvers.resolver.CommitGraph",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) CommitGraph(ctx context.Context, repositoryID int) (gql.CodeIntelligenceCommitGraphResolver, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) CommitGraph(ctx context.Context, repositoryID int) (gql.CodeIntelligenceCommitGraphResolver, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#resolver.DeleteIndexByID",
                    "documentation": {
                      "identifier": "resolver.DeleteIndexByID",
                      "newPage": false,
                      "searchKey": "resolvers.resolver.DeleteIndexByID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) DeleteIndexByID(ctx context.Context, id int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) DeleteIndexByID(ctx context.Context, id int) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#resolver.DeleteUploadByID",
                    "documentation": {
                      "identifier": "resolver.DeleteUploadByID",
                      "newPage": false,
                      "searchKey": "resolvers.resolver.DeleteUploadByID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) DeleteUploadByID(ctx context.Context, uploadID int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) DeleteUploadByID(ctx context.Context, uploadID int) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#resolver.GetIndexByID",
                    "documentation": {
                      "identifier": "resolver.GetIndexByID",
                      "newPage": false,
                      "searchKey": "resolvers.resolver.GetIndexByID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) GetIndexByID(ctx context.Context, id int) (store.Index, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) GetIndexByID(ctx context.Context, id int) (store.Index, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#resolver.GetIndexesByIDs",
                    "documentation": {
                      "identifier": "resolver.GetIndexesByIDs",
                      "newPage": false,
                      "searchKey": "resolvers.resolver.GetIndexesByIDs",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) GetIndexesByIDs(ctx context.Context, ids ...int) ([]store.Index, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) GetIndexesByIDs(ctx context.Context, ids ...int) ([]store.Index, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#resolver.GetUploadByID",
                    "documentation": {
                      "identifier": "resolver.GetUploadByID",
                      "newPage": false,
                      "searchKey": "resolvers.resolver.GetUploadByID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) GetUploadByID(ctx context.Context, id int) (store.Upload, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) GetUploadByID(ctx context.Context, id int) (store.Upload, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#resolver.GetUploadsByIDs",
                    "documentation": {
                      "identifier": "resolver.GetUploadsByIDs",
                      "newPage": false,
                      "searchKey": "resolvers.resolver.GetUploadsByIDs",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) GetUploadsByIDs(ctx context.Context, ids ...int) ([]store.Upload, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) GetUploadsByIDs(ctx context.Context, ids ...int) ([]store.Upload, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#resolver.IndexConfiguration",
                    "documentation": {
                      "identifier": "resolver.IndexConfiguration",
                      "newPage": false,
                      "searchKey": "resolvers.resolver.IndexConfiguration",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) IndexConfiguration(ctx context.Context, repositoryID int) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) IndexConfiguration(ctx context.Context, repositoryID int) ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#resolver.IndexConnectionResolver",
                    "documentation": {
                      "identifier": "resolver.IndexConnectionResolver",
                      "newPage": false,
                      "searchKey": "resolvers.resolver.IndexConnectionResolver",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) IndexConnectionResolver(opts store.GetIndexesOptions) *IndexesResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) IndexConnectionResolver(opts store.GetIndexesOptions) *IndexesResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#resolver.QueryResolver",
                    "documentation": {
                      "identifier": "resolver.QueryResolver",
                      "newPage": false,
                      "searchKey": "resolvers.resolver.QueryResolver",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) QueryResolver(ctx context.Context, args *gql.GitBlobLSIFDataArgs) (_ QueryResolver, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) QueryResolver(ctx context.Context, args *gql.GitBlobLSIFDataArgs) (_ QueryResolver, err error)\n```\n\nQueryResolver determines the set of dumps that can answer code intel queries for the given repository, commit, and path, then constructs a new query resolver instance which can be used to answer subsequent queries. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#resolver.QueueAutoIndexJobForRepo",
                    "documentation": {
                      "identifier": "resolver.QueueAutoIndexJobForRepo",
                      "newPage": false,
                      "searchKey": "resolvers.resolver.QueueAutoIndexJobForRepo",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) QueueAutoIndexJobForRepo(ctx context.Context, repositoryID int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) QueueAutoIndexJobForRepo(ctx context.Context, repositoryID int) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#resolver.UpdateIndexConfigurationByRepositoryID",
                    "documentation": {
                      "identifier": "resolver.UpdateIndexConfigurationByRepositoryID",
                      "newPage": false,
                      "searchKey": "resolvers.resolver.UpdateIndexConfigurationByRepositoryID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) UpdateIndexConfigurationByRepositoryID(ctx context.Context, repositoryID int, configuration string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) UpdateIndexConfigurationByRepositoryID(ctx context.Context, repositoryID int, configuration string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#resolver.UploadConnectionResolver",
                    "documentation": {
                      "identifier": "resolver.UploadConnectionResolver",
                      "newPage": false,
                      "searchKey": "resolvers.resolver.UploadConnectionResolver",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) UploadConnectionResolver(opts store.GetUploadsOptions) *UploadsResolver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) UploadConnectionResolver(opts store.GetUploadsOptions) *UploadsResolver\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#resolver.findClosestDumps",
                    "documentation": {
                      "identifier": "resolver.findClosestDumps",
                      "newPage": false,
                      "searchKey": "resolvers.resolver.findClosestDumps",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) findClosestDumps(ctx context.Context, cachedCommitChecker *cachedCommitChecker, repositoryID int, commit, path string, exactPath bool, indexer string) (_ []store.Dump, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) findClosestDumps(ctx context.Context, cachedCommitChecker *cachedCommitChecker, repositoryID int, commit, path string, exactPath bool, indexer string) (_ []store.Dump, err error)\n```\n\nfindClosestDumps returns the set of dumps that can most accurately answer code intelligence queries for the given path. If exactPath is true, then only dumps that definitely contain the exact document path are returned. Otherwise, dumps containing any document for which the given path is a prefix are returned. These dump IDs should be subsequently passed to invocations of Definitions, References, and Hover. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#resolver.inferClosestUploads",
                    "documentation": {
                      "identifier": "resolver.inferClosestUploads",
                      "newPage": false,
                      "searchKey": "resolvers.resolver.inferClosestUploads",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) inferClosestUploads(ctx context.Context, repositoryID int, commit, path string, exactPath bool, indexer string) ([]store.Dump, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) inferClosestUploads(ctx context.Context, repositoryID int, commit, path string, exactPath bool, indexer string) ([]store.Dump, error)\n```\n\ninferClosestUploads will return the set of visible uploads for the given commit. If this commit is newer than our last refresh of the lsif_nearest_uploads table for this repository, then we will mark the repository as dirty and quickly approximate the correct set of visible uploads. \n\nBecause updating the entire commit graph is a blocking, expensive, and lock-guarded process, we  want to only do that in the background and do something chearp in latency-sensitive paths. To construct an approximate result, we query gitserver for a (relatively small) set of ancestors for the given commit, correlate that with the upload data we have for those commits, and re-run the visibility algorithm over the graph. This will not always produce the full set of visible commits - some responses may not contain all results while a subsequent request made after the lsif_nearest_uploads has been updated to include this commit will. \n\nTODO(efritz) - show an indication in the GraphQL response and the UI that this repo is refreshing. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestAdjustPath",
              "documentation": {
                "identifier": "TestAdjustPath",
                "newPage": false,
                "searchKey": "resolvers.TestAdjustPath",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAdjustPath(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAdjustPath(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestAdjustPosition",
              "documentation": {
                "identifier": "TestAdjustPosition",
                "newPage": false,
                "searchKey": "resolvers.TestAdjustPosition",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAdjustPosition(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAdjustPosition(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestAdjustPositionEmptyDiff",
              "documentation": {
                "identifier": "TestAdjustPositionEmptyDiff",
                "newPage": false,
                "searchKey": "resolvers.TestAdjustPositionEmptyDiff",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAdjustPositionEmptyDiff(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAdjustPositionEmptyDiff(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestAdjustPositionReverse",
              "documentation": {
                "identifier": "TestAdjustPositionReverse",
                "newPage": false,
                "searchKey": "resolvers.TestAdjustPositionReverse",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAdjustPositionReverse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAdjustPositionReverse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestAdjustRange",
              "documentation": {
                "identifier": "TestAdjustRange",
                "newPage": false,
                "searchKey": "resolvers.TestAdjustRange",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAdjustRange(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAdjustRange(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestAdjustRangeEmptyDiff",
              "documentation": {
                "identifier": "TestAdjustRangeEmptyDiff",
                "newPage": false,
                "searchKey": "resolvers.TestAdjustRangeEmptyDiff",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAdjustRangeEmptyDiff(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAdjustRangeEmptyDiff(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestAdjustRangeReverse",
              "documentation": {
                "identifier": "TestAdjustRangeReverse",
                "newPage": false,
                "searchKey": "resolvers.TestAdjustRangeReverse",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAdjustRangeReverse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAdjustRangeReverse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestDefinitions",
              "documentation": {
                "identifier": "TestDefinitions",
                "newPage": false,
                "searchKey": "resolvers.TestDefinitions",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDefinitions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDefinitions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestDefinitionsRemote",
              "documentation": {
                "identifier": "TestDefinitionsRemote",
                "newPage": false,
                "searchKey": "resolvers.TestDefinitionsRemote",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDefinitionsRemote(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDefinitionsRemote(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestDiagnostics",
              "documentation": {
                "identifier": "TestDiagnostics",
                "newPage": false,
                "searchKey": "resolvers.TestDiagnostics",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDiagnostics(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDiagnostics(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestFallbackIndexConfiguration",
              "documentation": {
                "identifier": "TestFallbackIndexConfiguration",
                "newPage": false,
                "searchKey": "resolvers.TestFallbackIndexConfiguration",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFallbackIndexConfiguration(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFallbackIndexConfiguration(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestFindClosestDumps",
              "documentation": {
                "identifier": "TestFindClosestDumps",
                "newPage": false,
                "searchKey": "resolvers.TestFindClosestDumps",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFindClosestDumps(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFindClosestDumps(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestFindClosestDumpsDoesNotInferClosestUploadForUnknownRepository",
              "documentation": {
                "identifier": "TestFindClosestDumpsDoesNotInferClosestUploadForUnknownRepository",
                "newPage": false,
                "searchKey": "resolvers.TestFindClosestDumpsDoesNotInferClosestUploadForUnknownRepository",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFindClosestDumpsDoesNotInferClosestUploadForUnknownRepository(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFindClosestDumpsDoesNotInferClosestUploadForUnknownRepository(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestFindClosestDumpsInfersClosestUploads",
              "documentation": {
                "identifier": "TestFindClosestDumpsInfersClosestUploads",
                "newPage": false,
                "searchKey": "resolvers.TestFindClosestDumpsInfersClosestUploads",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFindClosestDumpsInfersClosestUploads(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFindClosestDumpsInfersClosestUploads(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestHover",
              "documentation": {
                "identifier": "TestHover",
                "newPage": false,
                "searchKey": "resolvers.TestHover",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHover(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHover(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestHoverRemote",
              "documentation": {
                "identifier": "TestHoverRemote",
                "newPage": false,
                "searchKey": "resolvers.TestHoverRemote",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHoverRemote(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHoverRemote(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestQueryResolver",
              "documentation": {
                "identifier": "TestQueryResolver",
                "newPage": false,
                "searchKey": "resolvers.TestQueryResolver",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQueryResolver(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQueryResolver(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestRanges",
              "documentation": {
                "identifier": "TestRanges",
                "newPage": false,
                "searchKey": "resolvers.TestRanges",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRanges(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRanges(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestRawAdjustPosition",
              "documentation": {
                "identifier": "TestRawAdjustPosition",
                "newPage": false,
                "searchKey": "resolvers.TestRawAdjustPosition",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRawAdjustPosition(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRawAdjustPosition(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestReferences",
              "documentation": {
                "identifier": "TestReferences",
                "newPage": false,
                "searchKey": "resolvers.TestReferences",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReferences(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReferences(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#TestReferencesRemote",
              "documentation": {
                "identifier": "TestReferencesRemote",
                "newPage": false,
                "searchKey": "resolvers.TestReferencesRemote",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReferencesRemote(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReferencesRemote(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#adjustLine",
              "documentation": {
                "identifier": "adjustLine",
                "newPage": false,
                "searchKey": "resolvers.adjustLine",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func adjustLine(hunks []*diff.Hunk, line int) (int, bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc adjustLine(hunks []*diff.Hunk, line int) (int, bool)\n```\n\nadjustLine translates the given line nubmerbased on the number of additions and deletions that occur before that line. This function returns a boolean flag indicating that the translation is successful. A translation fails when the given line has been edited. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#adjustPosition",
              "documentation": {
                "identifier": "adjustPosition",
                "newPage": false,
                "searchKey": "resolvers.adjustPosition",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func adjustPosition(hunks []*diff.Hunk, pos lsifstore.Position) (lsifstore.Position, bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc adjustPosition(hunks []*diff.Hunk, pos lsifstore.Position) (lsifstore.Position, bool)\n```\n\nadjustPosition translates the given position by adjusting the line number based on the number of additions and deletions that occur before that line. This function returns a boolean flag indicating that the translation is successful. A translation fails when the line indicated by the position has been edited. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#adjustRange",
              "documentation": {
                "identifier": "adjustRange",
                "newPage": false,
                "searchKey": "resolvers.adjustRange",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func adjustRange(hunks []*diff.Hunk, r lsifstore.Range) (lsifstore.Range, bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc adjustRange(hunks []*diff.Hunk, r lsifstore.Range) (lsifstore.Range, bool)\n```\n\nadjustRange translates the given range by calling adjustPosition on both of the range's endpoints. This function returns a boolean flag indicating that the translation was successful (which occurs when both endpoints of the range can be translated). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#createHoneyEvent",
              "documentation": {
                "identifier": "createHoneyEvent",
                "newPage": false,
                "searchKey": "resolvers.createHoneyEvent",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func createHoneyEvent(ctx context.Context, name string, observationArgs observation.Args, err *error, duration time.Duration) *libhoney.Event"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc createHoneyEvent(ctx context.Context, name string, observationArgs observation.Args, err *error, duration time.Duration) *libhoney.Event\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#encodeCursor",
              "documentation": {
                "identifier": "encodeCursor",
                "newPage": false,
                "searchKey": "resolvers.encodeCursor",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeCursor(cursor referencesCursor) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeCursor(cursor referencesCursor) string\n```\n\nencodeCursor returns an encoding of the given cursor suitable for a URL or a GraphQL token. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#filterUploadsWithCommits",
              "documentation": {
                "identifier": "filterUploadsWithCommits",
                "newPage": false,
                "searchKey": "resolvers.filterUploadsWithCommits",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func filterUploadsWithCommits(ctx context.Context, cachedCommitChecker *cachedCommitChecker, uploads []dbstore.Dump) ([]dbstore.Dump, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc filterUploadsWithCommits(ctx context.Context, cachedCommitChecker *cachedCommitChecker, uploads []dbstore.Dump) ([]dbstore.Dump, error)\n```\n\nfilterUploadsWithCommits removes the uploads for commits which are unknown to gitserver from the given lice. The slice is filtered in-place and returned (to update the slice length). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#findHunk",
              "documentation": {
                "identifier": "findHunk",
                "newPage": false,
                "searchKey": "resolvers.findHunk",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func findHunk(hunks []*diff.Hunk, line int) *diff.Hunk"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc findHunk(hunks []*diff.Hunk, line int) *diff.Hunk\n```\n\nfindHunk returns the last thunk that does not begin after the given line. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#intsToString",
              "documentation": {
                "identifier": "intsToString",
                "newPage": false,
                "searchKey": "resolvers.intsToString",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func intsToString(ints []int) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc intsToString(ints []int) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#isSourceLocation",
              "documentation": {
                "identifier": "isSourceLocation",
                "newPage": false,
                "searchKey": "resolvers.isSourceLocation",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isSourceLocation(adjustedUploads []adjustedUpload, location lsifstore.Location) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isSourceLocation(adjustedUploads []adjustedUpload, location lsifstore.Location) bool\n```\n\nisSourceLocation returns true if the given location encloses the source position within one of the visible uploads. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#lowSlowRequest",
              "documentation": {
                "identifier": "lowSlowRequest",
                "newPage": false,
                "searchKey": "resolvers.lowSlowRequest",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func lowSlowRequest(name string, duration time.Duration, err *error, observationArgs observation.Args)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc lowSlowRequest(name string, duration time.Duration, err *error, observationArgs observation.Args)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#makeKey",
              "documentation": {
                "identifier": "makeKey",
                "newPage": false,
                "searchKey": "resolvers.makeKey",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeKey(parts ...string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeKey(parts ...string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#monikersToString",
              "documentation": {
                "identifier": "monikersToString",
                "newPage": false,
                "searchKey": "resolvers.monikersToString",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func monikersToString(vs []semantic.QualifiedMonikerData) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc monikersToString(vs []semantic.QualifiedMonikerData) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#nextOffset",
              "documentation": {
                "identifier": "nextOffset",
                "newPage": false,
                "searchKey": "resolvers.nextOffset",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func nextOffset(offset, count, totalCount int) *int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nextOffset(offset, count, totalCount int) *int\n```\n\nnextOffset determines the offset that should be used for a subsequent request. If there are no more results in the paged result set, this function returns nil. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#observeResolver",
              "documentation": {
                "identifier": "observeResolver",
                "newPage": false,
                "searchKey": "resolvers.observeResolver",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func observeResolver(ctx context.Context,..."
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc observeResolver(\n\tctx context.Context,\n\terr *error,\n\tname string,\n\toperation *observation.Operation,\n\tthreshold time.Duration,\n\tobservationArgs observation.Args,\n) (context.Context, observation.TraceLogger, func())\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#rangeContainsPosition",
              "documentation": {
                "identifier": "rangeContainsPosition",
                "newPage": false,
                "searchKey": "resolvers.rangeContainsPosition",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func rangeContainsPosition(r lsifstore.Range, pos lsifstore.Position) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc rangeContainsPosition(r lsifstore.Range, pos lsifstore.Position) bool\n```\n\nrangeContainsPosition returns true if the given range encloses the given position. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#testFilter",
              "documentation": {
                "identifier": "testFilter",
                "newPage": false,
                "searchKey": "resolvers.testFilter",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testFilter(filter []byte, orderedMonikers []semantic.QualifiedMonikerData) (bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testFilter(filter []byte, orderedMonikers []semantic.QualifiedMonikerData) (bool, error)\n```\n\ntestFilter returns true if the given  encoded bloom filter includes any of the given monikers. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers#uploadIDsToString",
              "documentation": {
                "identifier": "uploadIDsToString",
                "newPage": false,
                "searchKey": "resolvers.uploadIDsToString",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func uploadIDsToString(vs []dbstore.Dump) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc uploadIDsToString(vs []dbstore.Dump) string\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/graphql"
    },
    {
      "pathID": "/enterprise/cmd/frontend/internal/codeintel/resolvers/mocks"
    }
  ]
}
