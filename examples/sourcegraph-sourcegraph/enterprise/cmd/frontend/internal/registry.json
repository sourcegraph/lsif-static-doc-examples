{
  "pathID": "/enterprise/cmd/frontend/internal/registry",
  "documentation": {
    "identifier": "registry",
    "newPage": true,
    "searchKey": "enterprise/cmd/frontend/internal/registry",
    "tags": [
      "package",
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package registry"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package registry contains the implementation of the extension registry. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/registry#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#extensionIDExpr",
              "documentation": {
                "identifier": "extensionIDExpr",
                "newPage": false,
                "searchKey": "registry.extensionIDExpr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const extensionIDExpr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst extensionIDExpr = \"CONCAT(\" + extensionPublisherNameExpr + \", '/', x.name)\"\n```\n\nextensionIDExpr is the SQL expression for the extension ID (using the table aliases created by (dbExtensions).listCountSQL. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#extensionPublisherNameExpr",
              "documentation": {
                "identifier": "extensionPublisherNameExpr",
                "newPage": false,
                "searchKey": "registry.extensionPublisherNameExpr",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const extensionPublisherNameExpr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst extensionPublisherNameExpr = \"COALESCE(users.username, orgs.name)\"\n```\n\nextensionPublisherNameExpr is the SQL expression for the extension's publisher's name (using the table aliases created by (dbExtensions).listCountSQL. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/registry#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#errInvalidJSONInManifest",
              "documentation": {
                "identifier": "errInvalidJSONInManifest",
                "newPage": false,
                "searchKey": "registry.errInvalidJSONInManifest",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errInvalidJSONInManifest"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errInvalidJSONInManifest = errors.New(\"invalid syntax in extension manifest JSON\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#errRegistryUnknownPublisher",
              "documentation": {
                "identifier": "errRegistryUnknownPublisher",
                "newPage": false,
                "searchKey": "registry.errRegistryUnknownPublisher",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errRegistryUnknownPublisher"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errRegistryUnknownPublisher = errors.New(\"unknown registry extension publisher\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#extensionIsWIPExpr",
              "documentation": {
                "identifier": "extensionIsWIPExpr",
                "newPage": false,
                "searchKey": "registry.extensionIsWIPExpr",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var extensionIsWIPExpr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar extensionIsWIPExpr = ...\n```\n\nextensionIsWIPExpr is the SQL expression for whether the extension is a WIP extension. \n\nBACKCOMPAT: It still reads the title property even though extensions no longer have titles. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#featuredExtensionIDs",
              "documentation": {
                "identifier": "featuredExtensionIDs",
                "newPage": false,
                "searchKey": "registry.featuredExtensionIDs",
                "tags": [
                  "variable",
                  "array",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var featuredExtensionIDs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar featuredExtensionIDs = ...\n```\n\nTemporary: we manually set these. Featured extensions live on sourcegraph.com, all other instances ask dotcom for these extensions and filter based on site configuration. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#mocks",
              "documentation": {
                "identifier": "mocks",
                "newPage": false,
                "searchKey": "registry.mocks",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var mocks"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mocks dbMocks\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#nonLettersDigits",
              "documentation": {
                "identifier": "nonLettersDigits",
                "newPage": false,
                "searchKey": "registry.nonLettersDigits",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var nonLettersDigits"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nonLettersDigits = lazyregexp.New(`[^a-zA-Z0-9-]`)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#registryExtensionNamesForTests",
              "documentation": {
                "identifier": "registryExtensionNamesForTests",
                "newPage": false,
                "searchKey": "registry.registryExtensionNamesForTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var registryExtensionNamesForTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar registryExtensionNamesForTests = ...\n```\n\nregistryExtensionNamesForTests is a list of test cases containing valid and invalid registry extension names. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#registryGetByExtensionID",
              "documentation": {
                "identifier": "registryGetByExtensionID",
                "newPage": false,
                "searchKey": "registry.registryGetByExtensionID",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var registryGetByExtensionID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar registryGetByExtensionID = ...\n```\n\nFuncs called by serveRegistry to get registry data. If fakeRegistryData is set, it is used as the data source instead of the database. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#registryGetByUUID",
              "documentation": {
                "identifier": "registryGetByUUID",
                "newPage": false,
                "searchKey": "registry.registryGetByUUID",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var registryGetByUUID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar registryGetByUUID = ...\n```\n\nFuncs called by serveRegistry to get registry data. If fakeRegistryData is set, it is used as the data source instead of the database. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#registryGetFeaturedExtensions",
              "documentation": {
                "identifier": "registryGetFeaturedExtensions",
                "newPage": false,
                "searchKey": "registry.registryGetFeaturedExtensions",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var registryGetFeaturedExtensions"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar registryGetFeaturedExtensions = ...\n```\n\nFuncs called by serveRegistry to get registry data. If fakeRegistryData is set, it is used as the data source instead of the database. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#registryList",
              "documentation": {
                "identifier": "registryList",
                "newPage": false,
                "searchKey": "registry.registryList",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var registryList"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar registryList = ...\n```\n\nFuncs called by serveRegistry to get registry data. If fakeRegistryData is set, it is used as the data source instead of the database. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#registryRequestsDuration",
              "documentation": {
                "identifier": "registryRequestsDuration",
                "newPage": false,
                "searchKey": "registry.registryRequestsDuration",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var registryRequestsDuration"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar registryRequestsDuration = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#sourceMappingURLLineRegex",
              "documentation": {
                "identifier": "sourceMappingURLLineRegex",
                "newPage": false,
                "searchKey": "registry.sourceMappingURLLineRegex",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var sourceMappingURLLineRegex"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sourceMappingURLLineRegex = lazyregexp.New(`(?m)\\r?\\n?^//# sourceMappingURL=.+$`)\n```\n\nsourceMappingURLLineRegex is a regular expression that matches all lines with a `//# sourceMappingURL` comment \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/registry#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtension",
              "documentation": {
                "identifier": "dbExtension",
                "newPage": false,
                "searchKey": "registry.dbExtension",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type dbExtension struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dbExtension struct {\n\tID        int32\n\tUUID      string\n\tPublisher dbPublisher\n\tName      string\n\tCreatedAt time.Time\n\tUpdatedAt time.Time\n\n\t// NonCanonicalExtensionID is the denormalized fully qualified extension ID\n\t// (\"[registry/]publisher/name\" format), using the username/name of the extension's publisher\n\t// (joined from another table) as of when the query executed. Do not persist this, because the\n\t// (denormalized) registry and publisher names can change.\n\t//\n\t// If this value is obtained directly from a method on RegistryExtensions, this field will never\n\t// contain the registry name prefix (which is necessary to distinguish local extensions from\n\t// remote extensions). Call prefixLocalExtensionID to add it. The recommended way to apply this\n\t// automatically (when needed) is to use registry.GetExtensionByExtensionID instead of\n\t// (dbExtensions).GetByExtensionID.\n\tNonCanonicalExtensionID string\n\n\t// NonCanonicalRegistry is the denormalized registry name (as of when this field was set). This\n\t// field is only set by prefixLocalExtensionID and is always empty if this value is obtained\n\t// directly from a method on RegistryExtensions. Do not persist this value, because the\n\t// (denormalized) registry name can change.\n\tNonCanonicalRegistry string\n\n\t// NonCanonicalIsWorkInProgress is whether this extension was marked as a WIP extension when it\n\t// was fetched. This information comes from a separate table (registry_extension_releases, not\n\t// registry_extensions), so it is not canonical.\n\tNonCanonicalIsWorkInProgress bool\n}\n```\n\ndbExtension describes an extension in the extension registry. \n\nIt is the internal form of github.com/sourcegraph/sourcegraph/internal/registry.Extension (which is the external API type). These types should generally be kept in sync, but registry.Extension updates require backcompat. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensions",
              "documentation": {
                "identifier": "dbExtensions",
                "newPage": false,
                "searchKey": "registry.dbExtensions",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type dbExtensions struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dbExtensions struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensions.Count",
                    "documentation": {
                      "identifier": "dbExtensions.Count",
                      "newPage": false,
                      "searchKey": "registry.dbExtensions.Count",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s dbExtensions) Count(ctx context.Context, opt dbExtensionsListOptions) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s dbExtensions) Count(ctx context.Context, opt dbExtensionsListOptions) (int, error)\n```\n\nCount counts all registry extensions that satisfy the options (ignoring limit and offset). \n\n🚨 SECURITY: The caller must ensure that the actor is permitted to count the results. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensions.CountPublishers",
                    "documentation": {
                      "identifier": "dbExtensions.CountPublishers",
                      "newPage": false,
                      "searchKey": "registry.dbExtensions.CountPublishers",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s dbExtensions) CountPublishers(ctx context.Context, opt dbPublishersListOptions) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s dbExtensions) CountPublishers(ctx context.Context, opt dbPublishersListOptions) (int, error)\n```\n\nCountPublishers counts all registry publishers that satisfy the options (ignoring limit and offset). \n\n🚨 SECURITY: The caller must ensure that the actor is permitted to count the results. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensions.Create",
                    "documentation": {
                      "identifier": "dbExtensions.Create",
                      "newPage": false,
                      "searchKey": "registry.dbExtensions.Create",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s dbExtensions) Create(ctx context.Context, publisherUserID, publisherOrgID int32, name string) (id int32, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s dbExtensions) Create(ctx context.Context, publisherUserID, publisherOrgID int32, name string) (id int32, err error)\n```\n\nCreate creates a new extension in the extension registry. Exactly 1 of publisherUserID and publisherOrgID must be nonzero. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensions.Delete",
                    "documentation": {
                      "identifier": "dbExtensions.Delete",
                      "newPage": false,
                      "searchKey": "registry.dbExtensions.Delete",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dbExtensions) Delete(ctx context.Context, id int32) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dbExtensions) Delete(ctx context.Context, id int32) error\n```\n\nDelete marks an registry extension as deleted. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensions.GetByExtensionID",
                    "documentation": {
                      "identifier": "dbExtensions.GetByExtensionID",
                      "newPage": false,
                      "searchKey": "registry.dbExtensions.GetByExtensionID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s dbExtensions) GetByExtensionID(ctx context.Context, extensionID string) (*dbExtension, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s dbExtensions) GetByExtensionID(ctx context.Context, extensionID string) (*dbExtension, error)\n```\n\nGetByExtensionID retrieves the registry extension (if any) given its extension ID, which is the concatenation of the publisher name, a slash (\"/\"), and the extension name. \n\n🚨 SECURITY: The caller must ensure that the actor is permitted to view this registry extension. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensions.GetByID",
                    "documentation": {
                      "identifier": "dbExtensions.GetByID",
                      "newPage": false,
                      "searchKey": "registry.dbExtensions.GetByID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s dbExtensions) GetByID(ctx context.Context, id int32) (*dbExtension, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s dbExtensions) GetByID(ctx context.Context, id int32) (*dbExtension, error)\n```\n\nGetByID retrieves the registry extension (if any) given its ID. \n\n🚨 SECURITY: The caller must ensure that the actor is permitted to view this registry extension. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensions.GetByUUID",
                    "documentation": {
                      "identifier": "dbExtensions.GetByUUID",
                      "newPage": false,
                      "searchKey": "registry.dbExtensions.GetByUUID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s dbExtensions) GetByUUID(ctx context.Context, uuid string) (*dbExtension, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s dbExtensions) GetByUUID(ctx context.Context, uuid string) (*dbExtension, error)\n```\n\nGetByUUID retrieves the registry extension (if any) given its UUID. \n\n🚨 SECURITY: The caller must ensure that the actor is permitted to view this registry extension. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensions.GetFeaturedExtensions",
                    "documentation": {
                      "identifier": "dbExtensions.GetFeaturedExtensions",
                      "newPage": false,
                      "searchKey": "registry.dbExtensions.GetFeaturedExtensions",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s dbExtensions) GetFeaturedExtensions(ctx context.Context) ([]*dbExtension, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s dbExtensions) GetFeaturedExtensions(ctx context.Context) ([]*dbExtension, error)\n```\n\nGetFeaturedExtensions retrieves the set of currently featured extensions. This should only be called on dotcom; all other instances should retrieve these extensions from dotcom through the HTTP API. \n\n🚨 SECURITY: The caller must ensure that the actor is permitted to view these registry extensions. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensions.GetPublisher",
                    "documentation": {
                      "identifier": "dbExtensions.GetPublisher",
                      "newPage": false,
                      "searchKey": "registry.dbExtensions.GetPublisher",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s dbExtensions) GetPublisher(ctx context.Context, name string) (*dbPublisher, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s dbExtensions) GetPublisher(ctx context.Context, name string) (*dbPublisher, error)\n```\n\nGePublisher gets the registry publisher with the given name. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensions.List",
                    "documentation": {
                      "identifier": "dbExtensions.List",
                      "newPage": false,
                      "searchKey": "registry.dbExtensions.List",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s dbExtensions) List(ctx context.Context, opt dbExtensionsListOptions) ([]*dbExtension, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s dbExtensions) List(ctx context.Context, opt dbExtensionsListOptions) ([]*dbExtension, error)\n```\n\nList lists all registry extensions that satisfy the options. \n\n🚨 SECURITY: The caller must ensure that the actor is permitted to list with the specified options. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensions.ListPublishers",
                    "documentation": {
                      "identifier": "dbExtensions.ListPublishers",
                      "newPage": false,
                      "searchKey": "registry.dbExtensions.ListPublishers",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s dbExtensions) ListPublishers(ctx context.Context, opt dbPublishersListOptions) ([]*dbPublisher, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s dbExtensions) ListPublishers(ctx context.Context, opt dbPublishersListOptions) ([]*dbPublisher, error)\n```\n\nListPublishers lists all publishers of extensions to the registry. \n\n🚨 SECURITY: The caller must ensure that the actor is permitted to list with the specified options. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensions.Update",
                    "documentation": {
                      "identifier": "dbExtensions.Update",
                      "newPage": false,
                      "searchKey": "registry.dbExtensions.Update",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dbExtensions) Update(ctx context.Context, id int32, name *string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dbExtensions) Update(ctx context.Context, id int32, name *string) error\n```\n\nUpdate updates information about the registry extension. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensions.getFeaturedExtensions",
                    "documentation": {
                      "identifier": "dbExtensions.getFeaturedExtensions",
                      "newPage": false,
                      "searchKey": "registry.dbExtensions.getFeaturedExtensions",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s dbExtensions) getFeaturedExtensions(ctx context.Context, featuredExtensionIDs []string) ([]*dbExtension, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s dbExtensions) getFeaturedExtensions(ctx context.Context, featuredExtensionIDs []string) ([]*dbExtension, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensions.list",
                    "documentation": {
                      "identifier": "dbExtensions.list",
                      "newPage": false,
                      "searchKey": "registry.dbExtensions.list",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s dbExtensions) list(ctx context.Context, conds, order []*sqlf.Query, limitOffset *database.LimitOffset) ([]*dbExtension, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s dbExtensions) list(ctx context.Context, conds, order []*sqlf.Query, limitOffset *database.LimitOffset) ([]*dbExtension, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensions.listCountSQL",
                    "documentation": {
                      "identifier": "dbExtensions.listCountSQL",
                      "newPage": false,
                      "searchKey": "registry.dbExtensions.listCountSQL",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dbExtensions) listCountSQL(conds []*sqlf.Query) *sqlf.Query"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dbExtensions) listCountSQL(conds []*sqlf.Query) *sqlf.Query\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensions.listPublishers",
                    "documentation": {
                      "identifier": "dbExtensions.listPublishers",
                      "newPage": false,
                      "searchKey": "registry.dbExtensions.listPublishers",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s dbExtensions) listPublishers(ctx context.Context, conds []*sqlf.Query, limitOffset *database.LimitOffset) ([]*dbPublisher, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s dbExtensions) listPublishers(ctx context.Context, conds []*sqlf.Query, limitOffset *database.LimitOffset) ([]*dbPublisher, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensions.publishersSQLCTE",
                    "documentation": {
                      "identifier": "dbExtensions.publishersSQLCTE",
                      "newPage": false,
                      "searchKey": "registry.dbExtensions.publishersSQLCTE",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dbExtensions) publishersSQLCTE() *sqlf.Query"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dbExtensions) publishersSQLCTE() *sqlf.Query\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensionsListOptions",
              "documentation": {
                "identifier": "dbExtensionsListOptions",
                "newPage": false,
                "searchKey": "registry.dbExtensionsListOptions",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type dbExtensionsListOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dbExtensionsListOptions struct {\n\tPublisher              dbPublisher\n\tQuery                  string // matches the extension ID and latest release's manifest's title\n\tCategory               string // matches the latest release's manifest's categories array\n\tTag                    string // matches the latest release's manifest's tags array\n\tPrioritizeExtensionIDs []string\n\t*database.LimitOffset\n}\n```\n\ndbExtensionsListOptions contains options for listing registry extensions. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#toDBExtensionsListOptions",
                    "documentation": {
                      "identifier": "toDBExtensionsListOptions",
                      "newPage": false,
                      "searchKey": "registry.toDBExtensionsListOptions",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func toDBExtensionsListOptions(args graphqlbackend.RegistryExtensionConnectionArgs) (dbExtensionsListOptions, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc toDBExtensionsListOptions(args graphqlbackend.RegistryExtensionConnectionArgs) (dbExtensionsListOptions, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensionsListOptions.sqlConditions",
                    "documentation": {
                      "identifier": "dbExtensionsListOptions.sqlConditions",
                      "newPage": false,
                      "searchKey": "registry.dbExtensionsListOptions.sqlConditions",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o dbExtensionsListOptions) sqlConditions() []*sqlf.Query"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o dbExtensionsListOptions) sqlConditions() []*sqlf.Query\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbExtensionsListOptions.sqlOrder",
                    "documentation": {
                      "identifier": "dbExtensionsListOptions.sqlOrder",
                      "newPage": false,
                      "searchKey": "registry.dbExtensionsListOptions.sqlOrder",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o dbExtensionsListOptions) sqlOrder() []*sqlf.Query"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o dbExtensionsListOptions) sqlOrder() []*sqlf.Query\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#dbMocks",
              "documentation": {
                "identifier": "dbMocks",
                "newPage": false,
                "searchKey": "registry.dbMocks",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type dbMocks struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dbMocks struct {\n\textensions mockExtensions\n\treleases   mockReleases\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#dbPublisher",
              "documentation": {
                "identifier": "dbPublisher",
                "newPage": false,
                "searchKey": "registry.dbPublisher",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type dbPublisher struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dbPublisher struct {\n\tUserID, OrgID int32 // exactly 1 is nonzero\n\n\t// NonCanonicalExtensionID is the publisher's username (for a user) or name (for an org) as of\n\t// when the query executed. Do not persist this.\n\tNonCanonicalName string\n}\n```\n\ndbPublisher is a publisher of extensions to the registry. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbPublisher.IsZero",
                    "documentation": {
                      "identifier": "dbPublisher.IsZero",
                      "newPage": false,
                      "searchKey": "registry.dbPublisher.IsZero",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p dbPublisher) IsZero() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p dbPublisher) IsZero() bool\n```\n\nIsZero reports whether p is the zero value. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#dbPublishersListOptions",
              "documentation": {
                "identifier": "dbPublishersListOptions",
                "newPage": false,
                "searchKey": "registry.dbPublishersListOptions",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type dbPublishersListOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dbPublishersListOptions struct {\n\t*database.LimitOffset\n}\n```\n\ndbPublishersListOptions contains options for listing publishers of extensions in the registry. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbPublishersListOptions.sqlConditions",
                    "documentation": {
                      "identifier": "dbPublishersListOptions.sqlConditions",
                      "newPage": false,
                      "searchKey": "registry.dbPublishersListOptions.sqlConditions",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o dbPublishersListOptions) sqlConditions() []*sqlf.Query"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o dbPublishersListOptions) sqlConditions() []*sqlf.Query\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#dbRelease",
              "documentation": {
                "identifier": "dbRelease",
                "newPage": false,
                "searchKey": "registry.dbRelease",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type dbRelease struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dbRelease struct {\n\tID                  int64\n\tRegistryExtensionID int32\n\tCreatorUserID       int32\n\tReleaseVersion      *string\n\tReleaseTag          string\n\tManifest            string\n\tBundle              *string\n\tSourceMap           *string\n\tCreatedAt           time.Time\n}\n```\n\ndbRelease describes a release of an extension in the extension registry. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#getLatestRelease",
                    "documentation": {
                      "identifier": "getLatestRelease",
                      "newPage": false,
                      "searchKey": "registry.getLatestRelease",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func getLatestRelease(ctx context.Context, extensionID string, registryExtensionID int32, releaseTag string) (*dbRelease, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc getLatestRelease(ctx context.Context, extensionID string, registryExtensionID int32, releaseTag string) (*dbRelease, error)\n```\n\ngetLatestRelease returns the release with the extension manifest as JSON. If there are no releases, it returns a nil manifest. If the manifest has no \"url\" field itself, a \"url\" field pointing to the extension's bundle is inserted. It also returns the date that the release was published. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#dbReleases",
              "documentation": {
                "identifier": "dbReleases",
                "newPage": false,
                "searchKey": "registry.dbReleases",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type dbReleases struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dbReleases struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbReleases.Create",
                    "documentation": {
                      "identifier": "dbReleases.Create",
                      "newPage": false,
                      "searchKey": "registry.dbReleases.Create",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dbReleases) Create(ctx context.Context, release *dbRelease) (id int64, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dbReleases) Create(ctx context.Context, release *dbRelease) (id int64, err error)\n```\n\nCreate creates a new release of an extension in the extension registry. The release.ID and release.CreatedAt fields are ignored (they are populated automatically by the database). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbReleases.GetArtifacts",
                    "documentation": {
                      "identifier": "dbReleases.GetArtifacts",
                      "newPage": false,
                      "searchKey": "registry.dbReleases.GetArtifacts",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dbReleases) GetArtifacts(ctx context.Context, id int64) (bundle, sourcemap []byte, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dbReleases) GetArtifacts(ctx context.Context, id int64) (bundle, sourcemap []byte, err error)\n```\n\nGetArtifacts gets the bundled JavaScript source file contents and the source map for a release (by ID). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbReleases.GetLatest",
                    "documentation": {
                      "identifier": "dbReleases.GetLatest",
                      "newPage": false,
                      "searchKey": "registry.dbReleases.GetLatest",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dbReleases) GetLatest(ctx context.Context, registryExtensionID int32, releaseTag string, includeArtifacts bool) (*dbRelease, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dbReleases) GetLatest(ctx context.Context, registryExtensionID int32, releaseTag string, includeArtifacts bool) (*dbRelease, error)\n```\n\nGetLatest gets the latest release for the extension with the given release tag (e.g., \"release\"). If includeArtifacts is true, it populates the (*dbRelease).{Bundle,SourceMap} fields, which may be large. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#dbReleases.GetLatestBatch",
                    "documentation": {
                      "identifier": "dbReleases.GetLatestBatch",
                      "newPage": false,
                      "searchKey": "registry.dbReleases.GetLatestBatch",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dbReleases) GetLatestBatch(ctx context.Context, registryExtensionIDs []int32, releaseTag string, includeArtifacts bool) ([]*dbRelease, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dbReleases) GetLatestBatch(ctx context.Context, registryExtensionIDs []int32, releaseTag string, includeArtifacts bool) ([]*dbRelease, error)\n```\n\nGetLatestBatch gets the latest releases for the extensions with the given release tag (e.g., \"release\"). If includeArtifacts is true, it populates the (*dbRelease).{Bundle,SourceMap} fields, which may be large. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#extensionDBResolver",
              "documentation": {
                "identifier": "extensionDBResolver",
                "newPage": false,
                "searchKey": "registry.extensionDBResolver",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type extensionDBResolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype extensionDBResolver struct {\n\tdb dbutil.DB\n\tv  *dbExtension\n\n\t// Supplied as part of list endpoints, but\n\t// calculated as part of single-extension endpoints\n\tr *dbRelease\n}\n```\n\nextensionDBResolver implements the GraphQL type RegistryExtension. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionDBResolver.CreatedAt",
                    "documentation": {
                      "identifier": "extensionDBResolver.CreatedAt",
                      "newPage": false,
                      "searchKey": "registry.extensionDBResolver.CreatedAt",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *extensionDBResolver) CreatedAt() *graphqlbackend.DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *extensionDBResolver) CreatedAt() *graphqlbackend.DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionDBResolver.ExtensionID",
                    "documentation": {
                      "identifier": "extensionDBResolver.ExtensionID",
                      "newPage": false,
                      "searchKey": "registry.extensionDBResolver.ExtensionID",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *extensionDBResolver) ExtensionID() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *extensionDBResolver) ExtensionID() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionDBResolver.ExtensionIDWithoutRegistry",
                    "documentation": {
                      "identifier": "extensionDBResolver.ExtensionIDWithoutRegistry",
                      "newPage": false,
                      "searchKey": "registry.extensionDBResolver.ExtensionIDWithoutRegistry",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *extensionDBResolver) ExtensionIDWithoutRegistry() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *extensionDBResolver) ExtensionIDWithoutRegistry() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionDBResolver.ID",
                    "documentation": {
                      "identifier": "extensionDBResolver.ID",
                      "newPage": false,
                      "searchKey": "registry.extensionDBResolver.ID",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *extensionDBResolver) ID() graphql.ID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *extensionDBResolver) ID() graphql.ID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionDBResolver.IsLocal",
                    "documentation": {
                      "identifier": "extensionDBResolver.IsLocal",
                      "newPage": false,
                      "searchKey": "registry.extensionDBResolver.IsLocal",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *extensionDBResolver) IsLocal() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *extensionDBResolver) IsLocal() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionDBResolver.IsWorkInProgress",
                    "documentation": {
                      "identifier": "extensionDBResolver.IsWorkInProgress",
                      "newPage": false,
                      "searchKey": "registry.extensionDBResolver.IsWorkInProgress",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *extensionDBResolver) IsWorkInProgress() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *extensionDBResolver) IsWorkInProgress() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionDBResolver.Manifest",
                    "documentation": {
                      "identifier": "extensionDBResolver.Manifest",
                      "newPage": false,
                      "searchKey": "registry.extensionDBResolver.Manifest",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *extensionDBResolver) Manifest(ctx context.Context) (graphqlbackend.ExtensionManifest, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *extensionDBResolver) Manifest(ctx context.Context) (graphqlbackend.ExtensionManifest, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionDBResolver.Name",
                    "documentation": {
                      "identifier": "extensionDBResolver.Name",
                      "newPage": false,
                      "searchKey": "registry.extensionDBResolver.Name",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *extensionDBResolver) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *extensionDBResolver) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionDBResolver.PublishedAt",
                    "documentation": {
                      "identifier": "extensionDBResolver.PublishedAt",
                      "newPage": false,
                      "searchKey": "registry.extensionDBResolver.PublishedAt",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *extensionDBResolver) PublishedAt(ctx context.Context) (*graphqlbackend.DateTime, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *extensionDBResolver) PublishedAt(ctx context.Context) (*graphqlbackend.DateTime, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionDBResolver.Publisher",
                    "documentation": {
                      "identifier": "extensionDBResolver.Publisher",
                      "newPage": false,
                      "searchKey": "registry.extensionDBResolver.Publisher",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *extensionDBResolver) Publisher(ctx context.Context) (graphqlbackend.RegistryPublisher, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *extensionDBResolver) Publisher(ctx context.Context) (graphqlbackend.RegistryPublisher, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionDBResolver.RegistryName",
                    "documentation": {
                      "identifier": "extensionDBResolver.RegistryName",
                      "newPage": false,
                      "searchKey": "registry.extensionDBResolver.RegistryName",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *extensionDBResolver) RegistryName() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *extensionDBResolver) RegistryName() (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionDBResolver.RemoteURL",
                    "documentation": {
                      "identifier": "extensionDBResolver.RemoteURL",
                      "newPage": false,
                      "searchKey": "registry.extensionDBResolver.RemoteURL",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *extensionDBResolver) RemoteURL() *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *extensionDBResolver) RemoteURL() *string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionDBResolver.URL",
                    "documentation": {
                      "identifier": "extensionDBResolver.URL",
                      "newPage": false,
                      "searchKey": "registry.extensionDBResolver.URL",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *extensionDBResolver) URL() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *extensionDBResolver) URL() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionDBResolver.UUID",
                    "documentation": {
                      "identifier": "extensionDBResolver.UUID",
                      "newPage": false,
                      "searchKey": "registry.extensionDBResolver.UUID",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *extensionDBResolver) UUID() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *extensionDBResolver) UUID() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionDBResolver.UpdatedAt",
                    "documentation": {
                      "identifier": "extensionDBResolver.UpdatedAt",
                      "newPage": false,
                      "searchKey": "registry.extensionDBResolver.UpdatedAt",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *extensionDBResolver) UpdatedAt() *graphqlbackend.DateTime"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *extensionDBResolver) UpdatedAt() *graphqlbackend.DateTime\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionDBResolver.ViewerCanAdminister",
                    "documentation": {
                      "identifier": "extensionDBResolver.ViewerCanAdminister",
                      "newPage": false,
                      "searchKey": "registry.extensionDBResolver.ViewerCanAdminister",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *extensionDBResolver) ViewerCanAdminister(ctx context.Context) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *extensionDBResolver) ViewerCanAdminister(ctx context.Context) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionDBResolver.release",
                    "documentation": {
                      "identifier": "extensionDBResolver.release",
                      "newPage": false,
                      "searchKey": "registry.extensionDBResolver.release",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *extensionDBResolver) release(ctx context.Context) (*dbRelease, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *extensionDBResolver) release(ctx context.Context) (*dbRelease, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#extensionNotFoundError",
              "documentation": {
                "identifier": "extensionNotFoundError",
                "newPage": false,
                "searchKey": "registry.extensionNotFoundError",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type extensionNotFoundError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype extensionNotFoundError struct {\n\targs []interface{}\n}\n```\n\nextensionNotFoundError occurs when an extension is not found in the extension registry. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionNotFoundError.Error",
                    "documentation": {
                      "identifier": "extensionNotFoundError.Error",
                      "newPage": false,
                      "searchKey": "registry.extensionNotFoundError.Error",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err extensionNotFoundError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err extensionNotFoundError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#extensionNotFoundError.NotFound",
                    "documentation": {
                      "identifier": "extensionNotFoundError.NotFound",
                      "newPage": false,
                      "searchKey": "registry.extensionNotFoundError.NotFound",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err extensionNotFoundError) NotFound() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err extensionNotFoundError) NotFound() bool\n```\n\nNotFound implements errcode.NotFounder. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#mockExtensions",
              "documentation": {
                "identifier": "mockExtensions",
                "newPage": false,
                "searchKey": "registry.mockExtensions",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type mockExtensions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mockExtensions struct {\n\tCreate                func(publisherUserID, publisherOrgID int32, name string) (int32, error)\n\tGetByID               func(id int32) (*dbExtension, error)\n\tGetByUUID             func(uuid string) (*dbExtension, error)\n\tGetByExtensionID      func(extensionID string) (*dbExtension, error)\n\tGetFeaturedExtensions func() ([]*dbExtension, error)\n\tUpdate                func(id int32, name *string) error\n\tDelete                func(id int32) error\n}\n```\n\nmockExtensions mocks the registry extensions store. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#mockReleases",
              "documentation": {
                "identifier": "mockReleases",
                "newPage": false,
                "searchKey": "registry.mockReleases",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type mockReleases struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mockReleases struct {\n\tCreate         func(release *dbRelease) (int64, error)\n\tGetLatest      func(registryExtensionID int32, releaseTag string, includeArtifacts bool) (*dbRelease, error)\n\tGetLatestBatch func(registryExtensionIDs []int32, releaseTag string, includeArtifacts bool) ([]*dbRelease, error)\n}\n```\n\nmockReleases mocks the registry extension releases store. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#publisherNotFoundError",
              "documentation": {
                "identifier": "publisherNotFoundError",
                "newPage": false,
                "searchKey": "registry.publisherNotFoundError",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type publisherNotFoundError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype publisherNotFoundError struct {\n\targs []interface{}\n}\n```\n\npublisherNotFoundError occurs when a registry extension publisher is not found. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#publisherNotFoundError.Error",
                    "documentation": {
                      "identifier": "publisherNotFoundError.Error",
                      "newPage": false,
                      "searchKey": "registry.publisherNotFoundError.Error",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err publisherNotFoundError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err publisherNotFoundError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#publisherNotFoundError.NotFound",
                    "documentation": {
                      "identifier": "publisherNotFoundError.NotFound",
                      "newPage": false,
                      "searchKey": "registry.publisherNotFoundError.NotFound",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err publisherNotFoundError) NotFound() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err publisherNotFoundError) NotFound() bool\n```\n\nNotFound implements errcode.NotFounder. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#registryPublisher",
              "documentation": {
                "identifier": "registryPublisher",
                "newPage": false,
                "searchKey": "registry.registryPublisher",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type registryPublisher struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype registryPublisher struct {\n\tuser *graphqlbackend.UserResolver\n\torg  *graphqlbackend.OrgResolver\n}\n```\n\nregistryPublisher implements the GraphQL type RegistryPublisher. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#getRegistryPublisher",
                    "documentation": {
                      "identifier": "getRegistryPublisher",
                      "newPage": false,
                      "searchKey": "registry.getRegistryPublisher",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func getRegistryPublisher(ctx context.Context, db dbutil.DB, publisher dbPublisher) (*registryPublisher, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc getRegistryPublisher(ctx context.Context, db dbutil.DB, publisher dbPublisher) (*registryPublisher, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#registryPublisher.RegistryExtensionConnectionURL",
                    "documentation": {
                      "identifier": "registryPublisher.RegistryExtensionConnectionURL",
                      "newPage": false,
                      "searchKey": "registry.registryPublisher.RegistryExtensionConnectionURL",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *registryPublisher) RegistryExtensionConnectionURL() (*string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *registryPublisher) RegistryExtensionConnectionURL() (*string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#registryPublisher.ToOrg",
                    "documentation": {
                      "identifier": "registryPublisher.ToOrg",
                      "newPage": false,
                      "searchKey": "registry.registryPublisher.ToOrg",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *registryPublisher) ToOrg() (*graphqlbackend.OrgResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *registryPublisher) ToOrg() (*graphqlbackend.OrgResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#registryPublisher.ToUser",
                    "documentation": {
                      "identifier": "registryPublisher.ToUser",
                      "newPage": false,
                      "searchKey": "registry.registryPublisher.ToUser",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *registryPublisher) ToUser() (*graphqlbackend.UserResolver, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *registryPublisher) ToUser() (*graphqlbackend.UserResolver, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#registryPublisher.toDBRegistryPublisher",
                    "documentation": {
                      "identifier": "registryPublisher.toDBRegistryPublisher",
                      "newPage": false,
                      "searchKey": "registry.registryPublisher.toDBRegistryPublisher",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *registryPublisher) toDBRegistryPublisher() dbPublisher"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *registryPublisher) toDBRegistryPublisher() dbPublisher\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#registryPublisherConnection",
              "documentation": {
                "identifier": "registryPublisherConnection",
                "newPage": false,
                "searchKey": "registry.registryPublisherConnection",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type registryPublisherConnection struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype registryPublisherConnection struct {\n\topt dbPublishersListOptions\n\n\t// cache results because they are used by multiple fields\n\tonce               sync.Once\n\tregistryPublishers []*dbPublisher\n\terr                error\n\tdb                 dbutil.DB\n}\n```\n\nregistryPublisherConnection resolves a list of registry publishers. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#registryPublisherConnection.Nodes",
                    "documentation": {
                      "identifier": "registryPublisherConnection.Nodes",
                      "newPage": false,
                      "searchKey": "registry.registryPublisherConnection.Nodes",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *registryPublisherConnection) Nodes(ctx context.Context) ([]graphqlbackend.RegistryPublisher, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *registryPublisherConnection) Nodes(ctx context.Context) ([]graphqlbackend.RegistryPublisher, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#registryPublisherConnection.PageInfo",
                    "documentation": {
                      "identifier": "registryPublisherConnection.PageInfo",
                      "newPage": false,
                      "searchKey": "registry.registryPublisherConnection.PageInfo",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *registryPublisherConnection) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *registryPublisherConnection) PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#registryPublisherConnection.TotalCount",
                    "documentation": {
                      "identifier": "registryPublisherConnection.TotalCount",
                      "newPage": false,
                      "searchKey": "registry.registryPublisherConnection.TotalCount",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *registryPublisherConnection) TotalCount(ctx context.Context) (int32, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *registryPublisherConnection) TotalCount(ctx context.Context) (int32, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#registryPublisherConnection.compute",
                    "documentation": {
                      "identifier": "registryPublisherConnection.compute",
                      "newPage": false,
                      "searchKey": "registry.registryPublisherConnection.compute",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *registryPublisherConnection) compute(ctx context.Context) ([]*dbPublisher, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *registryPublisherConnection) compute(ctx context.Context) ([]*dbPublisher, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#registryPublisherID",
              "documentation": {
                "identifier": "registryPublisherID",
                "newPage": false,
                "searchKey": "registry.registryPublisherID",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type registryPublisherID struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype registryPublisherID struct {\n\tuserID, orgID int32\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#toRegistryPublisherID",
                    "documentation": {
                      "identifier": "toRegistryPublisherID",
                      "newPage": false,
                      "searchKey": "registry.toRegistryPublisherID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func toRegistryPublisherID(extension *dbExtension) *registryPublisherID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc toRegistryPublisherID(extension *dbExtension) *registryPublisherID\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#unmarshalRegistryPublisherID",
                    "documentation": {
                      "identifier": "unmarshalRegistryPublisherID",
                      "newPage": false,
                      "searchKey": "registry.unmarshalRegistryPublisherID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func unmarshalRegistryPublisherID(id graphql.ID) (*registryPublisherID, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc unmarshalRegistryPublisherID(id graphql.ID) (*registryPublisherID, error)\n```\n\nunmarshalRegistryPublisherID unmarshals the GraphQL ID into the possible publisher ID types. \n\n🚨 SECURITY \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#registryPublisherID.viewerCanAdminister",
                    "documentation": {
                      "identifier": "registryPublisherID.viewerCanAdminister",
                      "newPage": false,
                      "searchKey": "registry.registryPublisherID.viewerCanAdminister",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *registryPublisherID) viewerCanAdminister(ctx context.Context, db dbutil.DB) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *registryPublisherID) viewerCanAdminister(ctx context.Context, db dbutil.DB) error\n```\n\nviewerCanAdminister returns whether the current user is allowed to perform mutations on a registry extension with the given publisher. \n\n🚨 SECURITY \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#releaseNotFoundError",
              "documentation": {
                "identifier": "releaseNotFoundError",
                "newPage": false,
                "searchKey": "registry.releaseNotFoundError",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type releaseNotFoundError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype releaseNotFoundError struct {\n\targs []interface{}\n}\n```\n\nreleaseNotFoundError occurs when an extension release is not found in the extension registry. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#releaseNotFoundError.Error",
                    "documentation": {
                      "identifier": "releaseNotFoundError.Error",
                      "newPage": false,
                      "searchKey": "registry.releaseNotFoundError.Error",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err releaseNotFoundError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err releaseNotFoundError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#releaseNotFoundError.NotFound",
                    "documentation": {
                      "identifier": "releaseNotFoundError.NotFound",
                      "newPage": false,
                      "searchKey": "registry.releaseNotFoundError.NotFound",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (err releaseNotFoundError) NotFound() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (err releaseNotFoundError) NotFound() bool\n```\n\nNotFound implements errcode.NotFounder. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#responseRecorder",
              "documentation": {
                "identifier": "responseRecorder",
                "newPage": false,
                "searchKey": "registry.responseRecorder",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type responseRecorder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype responseRecorder struct {\n\thttp.ResponseWriter\n\tcode int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/registry#responseRecorder.WriteHeader",
                    "documentation": {
                      "identifier": "responseRecorder.WriteHeader",
                      "newPage": false,
                      "searchKey": "registry.responseRecorder.WriteHeader",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *responseRecorder) WriteHeader(code int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *responseRecorder) WriteHeader(code int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/registry#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#TestFeaturedExtensions",
              "documentation": {
                "identifier": "TestFeaturedExtensions",
                "newPage": false,
                "searchKey": "registry.TestFeaturedExtensions",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFeaturedExtensions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFeaturedExtensions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#TestFilterRemoteExtensions",
              "documentation": {
                "identifier": "TestFilterRemoteExtensions",
                "newPage": false,
                "searchKey": "registry.TestFilterRemoteExtensions",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFilterRemoteExtensions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFilterRemoteExtensions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#TestFilteringExtensionIDs",
              "documentation": {
                "identifier": "TestFilteringExtensionIDs",
                "newPage": false,
                "searchKey": "registry.TestFilteringExtensionIDs",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFilteringExtensionIDs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFilteringExtensionIDs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#TestGetExtensionManifestWithBundleURL",
              "documentation": {
                "identifier": "TestGetExtensionManifestWithBundleURL",
                "newPage": false,
                "searchKey": "registry.TestGetExtensionManifestWithBundleURL",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetExtensionManifestWithBundleURL(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetExtensionManifestWithBundleURL(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#TestIsRemoteExtensionAllowed",
              "documentation": {
                "identifier": "TestIsRemoteExtensionAllowed",
                "newPage": false,
                "searchKey": "registry.TestIsRemoteExtensionAllowed",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIsRemoteExtensionAllowed(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIsRemoteExtensionAllowed(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#TestParseExtensionBundleFilename",
              "documentation": {
                "identifier": "TestParseExtensionBundleFilename",
                "newPage": false,
                "searchKey": "registry.TestParseExtensionBundleFilename",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseExtensionBundleFilename(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseExtensionBundleFilename(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#TestRegistryExtensionReleases",
              "documentation": {
                "identifier": "TestRegistryExtensionReleases",
                "newPage": false,
                "searchKey": "registry.TestRegistryExtensionReleases",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRegistryExtensionReleases(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRegistryExtensionReleases(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#TestRegistryExtensions",
              "documentation": {
                "identifier": "TestRegistryExtensions",
                "newPage": false,
                "searchKey": "registry.TestRegistryExtensions",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRegistryExtensions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRegistryExtensions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#TestRegistryExtensions_ListCount",
              "documentation": {
                "identifier": "TestRegistryExtensions_ListCount",
                "newPage": false,
                "searchKey": "registry.TestRegistryExtensions_ListCount",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRegistryExtensions_ListCount(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRegistryExtensions_ListCount(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#TestRegistryExtensions_validNames",
              "documentation": {
                "identifier": "TestRegistryExtensions_validNames",
                "newPage": false,
                "searchKey": "registry.TestRegistryExtensions_validNames",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRegistryExtensions_validNames(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRegistryExtensions_validNames(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#TestToDBExtensionsListOptions",
              "documentation": {
                "identifier": "TestToDBExtensionsListOptions",
                "newPage": false,
                "searchKey": "registry.TestToDBExtensionsListOptions",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestToDBExtensionsListOptions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestToDBExtensionsListOptions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#asJSON",
              "documentation": {
                "identifier": "asJSON",
                "newPage": false,
                "searchKey": "registry.asJSON",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func asJSON(t *testing.T, v interface{}) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc asJSON(t *testing.T, v interface{}) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#countLocalRegistryExtensions",
              "documentation": {
                "identifier": "countLocalRegistryExtensions",
                "newPage": false,
                "searchKey": "registry.countLocalRegistryExtensions",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func countLocalRegistryExtensions(ctx context.Context, db dbutil.DB, args graphqlbackend.RegistryExtensionConnectionArgs) (int, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc countLocalRegistryExtensions(ctx context.Context, db dbutil.DB, args graphqlbackend.RegistryExtensionConnectionArgs) (int, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#extensionRegistryCreateExtension",
              "documentation": {
                "identifier": "extensionRegistryCreateExtension",
                "newPage": false,
                "searchKey": "registry.extensionRegistryCreateExtension",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func extensionRegistryCreateExtension(ctx context.Context, db dbutil.DB, args *graphqlbackend.ExtensionRegistryCreateExtensionArgs) (graphqlbackend.ExtensionRegistryMutationResult, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc extensionRegistryCreateExtension(ctx context.Context, db dbutil.DB, args *graphqlbackend.ExtensionRegistryCreateExtensionArgs) (graphqlbackend.ExtensionRegistryMutationResult, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#extensionRegistryDeleteExtension",
              "documentation": {
                "identifier": "extensionRegistryDeleteExtension",
                "newPage": false,
                "searchKey": "registry.extensionRegistryDeleteExtension",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func extensionRegistryDeleteExtension(ctx context.Context, db dbutil.DB, args *graphqlbackend.ExtensionRegistryDeleteExtensionArgs) (*graphqlbackend.EmptyResponse, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc extensionRegistryDeleteExtension(ctx context.Context, db dbutil.DB, args *graphqlbackend.ExtensionRegistryDeleteExtensionArgs) (*graphqlbackend.EmptyResponse, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#extensionRegistryPublishExtension",
              "documentation": {
                "identifier": "extensionRegistryPublishExtension",
                "newPage": false,
                "searchKey": "registry.extensionRegistryPublishExtension",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func extensionRegistryPublishExtension(ctx context.Context, db dbutil.DB, args *graphqlbackend.ExtensionRegistryPublishExtensionArgs) (graphqlbackend.ExtensionRegistryMutationResult, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc extensionRegistryPublishExtension(ctx context.Context, db dbutil.DB, args *graphqlbackend.ExtensionRegistryPublishExtensionArgs) (graphqlbackend.ExtensionRegistryMutationResult, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#extensionRegistryPublishers",
              "documentation": {
                "identifier": "extensionRegistryPublishers",
                "newPage": false,
                "searchKey": "registry.extensionRegistryPublishers",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func extensionRegistryPublishers(ctx context.Context, db dbutil.DB, args *graphqlutil.ConnectionArgs) (graphqlbackend.RegistryPublisherConnection, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc extensionRegistryPublishers(ctx context.Context, db dbutil.DB, args *graphqlutil.ConnectionArgs) (graphqlbackend.RegistryPublisherConnection, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#extensionRegistryUpdateExtension",
              "documentation": {
                "identifier": "extensionRegistryUpdateExtension",
                "newPage": false,
                "searchKey": "registry.extensionRegistryUpdateExtension",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func extensionRegistryUpdateExtension(ctx context.Context, db dbutil.DB, args *graphqlbackend.ExtensionRegistryUpdateExtensionArgs) (graphqlbackend.ExtensionRegistryMutationResult, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc extensionRegistryUpdateExtension(ctx context.Context, db dbutil.DB, args *graphqlbackend.ExtensionRegistryUpdateExtensionArgs) (graphqlbackend.ExtensionRegistryMutationResult, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#extensionRegistryViewerPublishers",
              "documentation": {
                "identifier": "extensionRegistryViewerPublishers",
                "newPage": false,
                "searchKey": "registry.extensionRegistryViewerPublishers",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func extensionRegistryViewerPublishers(ctx context.Context, db dbutil.DB) ([]graphqlbackend.RegistryPublisher, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc extensionRegistryViewerPublishers(ctx context.Context, db dbutil.DB) ([]graphqlbackend.RegistryPublisher, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#filterStripLocalExtensionIDs",
              "documentation": {
                "identifier": "filterStripLocalExtensionIDs",
                "newPage": false,
                "searchKey": "registry.filterStripLocalExtensionIDs",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func filterStripLocalExtensionIDs(extensionIDs []string) []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc filterStripLocalExtensionIDs(extensionIDs []string) []string\n```\n\nfilterStripLocalExtensionIDs filters to local extension IDs and strips the host prefix. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#getAllowedExtensionsFromSiteConfig",
              "documentation": {
                "identifier": "getAllowedExtensionsFromSiteConfig",
                "newPage": false,
                "searchKey": "registry.getAllowedExtensionsFromSiteConfig",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getAllowedExtensionsFromSiteConfig() []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getAllowedExtensionsFromSiteConfig() []string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#getLatestForBatch",
              "documentation": {
                "identifier": "getLatestForBatch",
                "newPage": false,
                "searchKey": "registry.getLatestForBatch",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getLatestForBatch(ctx context.Context, vs []*dbExtension) (map[int32]*dbRelease, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getLatestForBatch(ctx context.Context, vs []*dbExtension) (map[int32]*dbRelease, error)\n```\n\ngetLatestForBatch returns a map from extension identifiers to the latest DB release with the extension manifest as JSON for that extension. If there are no releases, it returns a nil manifest. If the manifest has no \"url\" field itself, a \"url\" field pointing to the extension's bundle is inserted. It also returns the date that the release was published. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#handleRegistry",
              "documentation": {
                "identifier": "handleRegistry",
                "newPage": false,
                "searchKey": "registry.handleRegistry",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func handleRegistry(w http.ResponseWriter, r *http.Request) (err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc handleRegistry(w http.ResponseWriter, r *http.Request) (err error)\n```\n\nhandleRegistry serves the external HTTP API for the extension registry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#handleRegistryExtensionBundle",
              "documentation": {
                "identifier": "handleRegistryExtensionBundle",
                "newPage": false,
                "searchKey": "registry.handleRegistryExtensionBundle",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func handleRegistryExtensionBundle(w http.ResponseWriter, r *http.Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc handleRegistryExtensionBundle(w http.ResponseWriter, r *http.Request)\n```\n\nhandleRegistryExtensionBundle serves the bundled JavaScript source file or the source map for an extension in the registry as a raw JavaScript or JSON file. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#init.allow.go",
              "documentation": {
                "identifier": "init.allow.go",
                "newPage": false,
                "searchKey": "registry.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#init.db_test.go",
              "documentation": {
                "identifier": "init.db_test.go",
                "newPage": false,
                "searchKey": "registry.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#init.extension_bundle.go",
              "documentation": {
                "identifier": "init.extension_bundle.go",
                "newPage": false,
                "searchKey": "registry.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#init.extension_connection_graphql.go",
              "documentation": {
                "identifier": "init.extension_connection_graphql.go",
                "newPage": false,
                "searchKey": "registry.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#init.extensions.go",
              "documentation": {
                "identifier": "init.extensions.go",
                "newPage": false,
                "searchKey": "registry.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#init.http_api.go",
              "documentation": {
                "identifier": "init.http_api.go",
                "newPage": false,
                "searchKey": "registry.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#init.http_api.go.0xc0775eab18",
              "documentation": {
                "identifier": "init.http_api.go.0xc0775eab18",
                "newPage": false,
                "searchKey": "registry.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#init.publisher_connection_graphql.go",
              "documentation": {
                "identifier": "init.publisher_connection_graphql.go",
                "newPage": false,
                "searchKey": "registry.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#init.publisher_graphql.go",
              "documentation": {
                "identifier": "init.publisher_graphql.go",
                "newPage": false,
                "searchKey": "registry.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#init.registry_graphql.go",
              "documentation": {
                "identifier": "init.registry_graphql.go",
                "newPage": false,
                "searchKey": "registry.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#jsonDeepEqual",
              "documentation": {
                "identifier": "jsonDeepEqual",
                "newPage": false,
                "searchKey": "registry.jsonDeepEqual",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func jsonDeepEqual(a, b string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc jsonDeepEqual(a, b string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#listLocalRegistryExtensions",
              "documentation": {
                "identifier": "listLocalRegistryExtensions",
                "newPage": false,
                "searchKey": "registry.listLocalRegistryExtensions",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func listLocalRegistryExtensions(ctx context.Context, db dbutil.DB, args graphqlbackend.RegistryExtensionConnectionArgs) ([]graphqlbackend.RegistryExtension, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc listLocalRegistryExtensions(ctx context.Context, db dbutil.DB, args graphqlbackend.RegistryExtensionConnectionArgs) ([]graphqlbackend.RegistryExtension, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#makeExtensionBundleURL",
              "documentation": {
                "identifier": "makeExtensionBundleURL",
                "newPage": false,
                "searchKey": "registry.makeExtensionBundleURL",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeExtensionBundleURL(registryExtensionReleaseID int64, timestamp int64, extensionIDHint string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeExtensionBundleURL(registryExtensionReleaseID int64, timestamp int64, extensionIDHint string) (string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#newExtension",
              "documentation": {
                "identifier": "newExtension",
                "newPage": false,
                "searchKey": "registry.newExtension",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newExtension(v *dbExtension, manifest *string, publishedAt time.Time) *registry.Extension"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newExtension(v *dbExtension, manifest *string, publishedAt time.Time) *registry.Extension\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#parseExtensionBundleFilename",
              "documentation": {
                "identifier": "parseExtensionBundleFilename",
                "newPage": false,
                "searchKey": "registry.parseExtensionBundleFilename",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseExtensionBundleFilename(filename string) (int64, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseExtensionBundleFilename(filename string) (int64, error)\n```\n\nparseExtensionBundleFilename parses the release ID from the extension bundle's filename, which is of the form \"1234-publisher-extension-id.js\" or \".map\". The part of the filename after the \"-\" and before the extension is ignored; it exists to help distinguish log messages from different extensions in debugging. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#parseExtensionQuery",
              "documentation": {
                "identifier": "parseExtensionQuery",
                "newPage": false,
                "searchKey": "registry.parseExtensionQuery",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseExtensionQuery(q string) (text, category, tag string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseExtensionQuery(q string) (text, category, tag string)\n```\n\nparseExtensionQuery parses an extension registry query consisting of terms and the operators `category:\"My category\"`, `tag:\"mytag\"`, #installed, #enabled, and #disabled. \n\nThis is an intentionally simple, unoptimized parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#prefixLocalExtensionID",
              "documentation": {
                "identifier": "prefixLocalExtensionID",
                "newPage": false,
                "searchKey": "registry.prefixLocalExtensionID",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func prefixLocalExtensionID(xs ...*dbExtension) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc prefixLocalExtensionID(xs ...*dbExtension) error\n```\n\nprefixLocalExtensionID adds the local registry's extension ID prefix (from GetLocalRegistryExtensionIDPrefix) to all extensions' extension IDs in the list. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#prepReleaseManifest",
              "documentation": {
                "identifier": "prepReleaseManifest",
                "newPage": false,
                "searchKey": "registry.prepReleaseManifest",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func prepReleaseManifest(extensionID string, release *dbRelease) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc prepReleaseManifest(extensionID string, release *dbRelease) error\n```\n\nprepReleaseManifest will set the Manifest field of the release. If the manifest has no \"url\" field itself, a \"url\" field pointing to the extension's bundle is inserted. It also returns the date that the release was published. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#registryExtensionByIDInt32",
              "documentation": {
                "identifier": "registryExtensionByIDInt32",
                "newPage": false,
                "searchKey": "registry.registryExtensionByIDInt32",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func registryExtensionByIDInt32(ctx context.Context, db dbutil.DB, id int32) (graphqlbackend.RegistryExtension, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc registryExtensionByIDInt32(ctx context.Context, db dbutil.DB, id int32) (graphqlbackend.RegistryExtension, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#resetMocks",
              "documentation": {
                "identifier": "resetMocks",
                "newPage": false,
                "searchKey": "registry.resetMocks",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func resetMocks()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc resetMocks()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#sameElements",
              "documentation": {
                "identifier": "sameElements",
                "newPage": false,
                "searchKey": "registry.sameElements",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sameElements(a, b []string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sameElements(a, b []string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#strarrayptr",
              "documentation": {
                "identifier": "strarrayptr",
                "newPage": false,
                "searchKey": "registry.strarrayptr",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func strarrayptr(values []string) *[]string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc strarrayptr(values []string) *[]string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#strptr",
              "documentation": {
                "identifier": "strptr",
                "newPage": false,
                "searchKey": "registry.strptr",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func strptr(s string) *string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc strptr(s string) *string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#toRegistryAPIExtension",
              "documentation": {
                "identifier": "toRegistryAPIExtension",
                "newPage": false,
                "searchKey": "registry.toRegistryAPIExtension",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func toRegistryAPIExtension(ctx context.Context, v *dbExtension) (*registry.Extension, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc toRegistryAPIExtension(ctx context.Context, v *dbExtension) (*registry.Extension, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#toRegistryAPIExtensionBatch",
              "documentation": {
                "identifier": "toRegistryAPIExtensionBatch",
                "newPage": false,
                "searchKey": "registry.toRegistryAPIExtensionBatch",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func toRegistryAPIExtensionBatch(ctx context.Context, vs []*dbExtension) ([]*registry.Extension, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc toRegistryAPIExtensionBatch(ctx context.Context, vs []*dbExtension) ([]*registry.Extension, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#validateExtensionManifest",
              "documentation": {
                "identifier": "validateExtensionManifest",
                "newPage": false,
                "searchKey": "registry.validateExtensionManifest",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func validateExtensionManifest(text string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc validateExtensionManifest(text string) error\n```\n\nvalidateExtensionManifest validates a JSON extension manifest for syntax. \n\nTODO(sqs): Also validate it against the JSON Schema. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/registry#viewerCanAdministerExtension",
              "documentation": {
                "identifier": "viewerCanAdministerExtension",
                "newPage": false,
                "searchKey": "registry.viewerCanAdministerExtension",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func viewerCanAdministerExtension(ctx context.Context, db dbutil.DB, id frontendregistry.RegistryExtensionID) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc viewerCanAdministerExtension(ctx context.Context, db dbutil.DB, id frontendregistry.RegistryExtensionID) error\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
