{
  "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect",
  "documentation": {
    "identifier": "openidconnect",
    "newPage": true,
    "searchKey": "enterprise/cmd/frontend/internal/auth/openidconnect",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package openidconnect"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package openidconnect implements auth via OIDC. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#authPrefix",
              "documentation": {
                "identifier": "authPrefix",
                "newPage": false,
                "searchKey": "openidconnect.authPrefix",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const authPrefix"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst authPrefix = auth.AuthURLPrefix + \"/openidconnect\"\n```\n\nAll OpenID Connect endpoints are under this path prefix. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#providerType",
              "documentation": {
                "identifier": "providerType",
                "newPage": false,
                "searchKey": "openidconnect.providerType",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const providerType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst providerType = \"openidconnect\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#sessionKey",
              "documentation": {
                "identifier": "sessionKey",
                "newPage": false,
                "searchKey": "openidconnect.sessionKey",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const sessionKey"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sessionKey = \"oidc@0\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#stateCookieName",
              "documentation": {
                "identifier": "stateCookieName",
                "newPage": false,
                "searchKey": "openidconnect.stateCookieName",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const stateCookieName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst stateCookieName = \"sg-oidc-state\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#stateCookieTimeout",
              "documentation": {
                "identifier": "stateCookieTimeout",
                "newPage": false,
                "searchKey": "openidconnect.stateCookieTimeout",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const stateCookieTimeout"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst stateCookieTimeout = time.Minute * 15\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#Middleware",
              "documentation": {
                "identifier": "Middleware",
                "newPage": false,
                "searchKey": "openidconnect.Middleware",
                "tags": [
                  "variable",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var Middleware"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Middleware = ...\n```\n\nMiddleware is middleware for OpenID Connect (OIDC) authentication, adding endpoints under the auth path prefix (\"/.auth\") to enable the login flow and requiring login for all other endpoints. \n\nThe OIDC spec ([http://openid.net/specs/openid-connect-core-1_0.html](http://openid.net/specs/openid-connect-core-1_0.html)) describes an authentication protocol that involves 3 parties: the Relying Party (e.g., Sourcegraph), the OpenID Provider (e.g., Okta, OneLogin, or another SSO provider), and the End User (e.g., a user's web browser). \n\nThis middleware implements two things: (1) the OIDC Authorization Code Flow ([http://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth](http://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth)) and (2) Sourcegraph-specific session management (outside the scope of the OIDC spec). Upon successful completion of the OIDC login flow, the handler will create a new session and session cookie. The expiration of the session is the expiration of the OIDC ID Token. \n\nðŸš¨ SECURITY \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#mockGetProviderValue",
              "documentation": {
                "identifier": "mockGetProviderValue",
                "newPage": false,
                "searchKey": "openidconnect.mockGetProviderValue",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var mockGetProviderValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mockGetProviderValue *provider\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#mockNewProvider",
              "documentation": {
                "identifier": "mockNewProvider",
                "newPage": false,
                "searchKey": "openidconnect.mockNewProvider",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var mockNewProvider"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mockNewProvider func(issuerURL string) (*oidcProvider, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#mockVerifyIDToken",
              "documentation": {
                "identifier": "mockVerifyIDToken",
                "newPage": false,
                "searchKey": "openidconnect.mockVerifyIDToken",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var mockVerifyIDToken"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mockVerifyIDToken func(rawIDToken string) *oidc.IDToken\n```\n\nmockVerifyIDToken mocks the OIDC ID Token verification step. It should only be set in tests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#testClientID",
              "documentation": {
                "identifier": "testClientID",
                "newPage": false,
                "searchKey": "openidconnect.testClientID",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var testClientID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testClientID = \"aaaaaaaaaaaaaa\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#testOIDCUser",
              "documentation": {
                "identifier": "testOIDCUser",
                "newPage": false,
                "searchKey": "openidconnect.testOIDCUser",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var testOIDCUser"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testOIDCUser = \"bob-test-user\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#authnState",
              "documentation": {
                "identifier": "authnState",
                "newPage": false,
                "searchKey": "openidconnect.authnState",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type authnState struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype authnState struct {\n\tCSRFToken string `json:\"csrfToken\"`\n\tRedirect  string `json:\"redirect\"`\n\n\t// Allow /.auth/callback to demux callbacks from multiple OpenID Connect OPs.\n\tProviderID string `json:\"p\"`\n}\n```\n\nauthnState is the state parameter passed to the Authn request and returned in the Authn response callback. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#authnState.Decode",
                    "documentation": {
                      "identifier": "authnState.Decode",
                      "newPage": false,
                      "searchKey": "openidconnect.authnState.Decode",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *authnState) Decode(encoded string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *authnState) Decode(encoded string) error\n```\n\nDecode decodes the base64-encoded JSON representation of the authn state into the receiver. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#authnState.Encode",
                    "documentation": {
                      "identifier": "authnState.Encode",
                      "newPage": false,
                      "searchKey": "openidconnect.authnState.Encode",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *authnState) Encode() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *authnState) Encode() string\n```\n\nEncode returns the base64-encoded JSON representation of the authn state. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#oidcProvider",
              "documentation": {
                "identifier": "oidcProvider",
                "newPage": false,
                "searchKey": "openidconnect.oidcProvider",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type oidcProvider struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype oidcProvider struct {\n\toidc.Provider\n\tproviderExtraClaims\n}\n```\n\noidcProvider is an OpenID Connect oidcProvider with additional claims parsed from the service oidcProvider discovery response (beyond what github.com/coreos/go-oidc parses by default). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#newProvider",
                    "documentation": {
                      "identifier": "newProvider",
                      "newPage": false,
                      "searchKey": "openidconnect.newProvider",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newProvider(ctx context.Context, issuerURL string) (*oidcProvider, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newProvider(ctx context.Context, issuerURL string) (*oidcProvider, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#provider",
              "documentation": {
                "identifier": "provider",
                "newPage": false,
                "searchKey": "openidconnect.provider",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type provider struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype provider struct {\n\tconfig schema.OpenIDConnectAuthProvider\n\n\tmu         sync.Mutex\n\toidc       *oidcProvider\n\trefreshErr error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#getProvider",
                    "documentation": {
                      "identifier": "getProvider",
                      "newPage": false,
                      "searchKey": "openidconnect.getProvider",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func getProvider(id string) *provider"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc getProvider(id string) *provider\n```\n\ngetProvider looks up the registered openidconnect auth provider with the given ID. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#handleGetProvider",
                    "documentation": {
                      "identifier": "handleGetProvider",
                      "newPage": false,
                      "searchKey": "openidconnect.handleGetProvider",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func handleGetProvider(ctx context.Context, w http.ResponseWriter, id string) (p *provider, handled bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc handleGetProvider(ctx context.Context, w http.ResponseWriter, id string) (p *provider, handled bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#provider.CachedInfo",
                    "documentation": {
                      "identifier": "provider.CachedInfo",
                      "newPage": false,
                      "searchKey": "openidconnect.provider.CachedInfo",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *provider) CachedInfo() *providers.Info"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *provider) CachedInfo() *providers.Info\n```\n\nCachedInfo implements providers.Provider. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#provider.Config",
                    "documentation": {
                      "identifier": "provider.Config",
                      "newPage": false,
                      "searchKey": "openidconnect.provider.Config",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *provider) Config() schema.AuthProviders"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *provider) Config() schema.AuthProviders\n```\n\nConfig implements providers.Provider. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#provider.ConfigID",
                    "documentation": {
                      "identifier": "provider.ConfigID",
                      "newPage": false,
                      "searchKey": "openidconnect.provider.ConfigID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *provider) ConfigID() providers.ConfigID"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *provider) ConfigID() providers.ConfigID\n```\n\nConfigID implements providers.Provider. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#provider.Refresh",
                    "documentation": {
                      "identifier": "provider.Refresh",
                      "newPage": false,
                      "searchKey": "openidconnect.provider.Refresh",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *provider) Refresh(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *provider) Refresh(ctx context.Context) error\n```\n\nRefresh implements providers.Provider. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#provider.getCachedInfoAndError",
                    "documentation": {
                      "identifier": "provider.getCachedInfoAndError",
                      "newPage": false,
                      "searchKey": "openidconnect.provider.getCachedInfoAndError",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *provider) getCachedInfoAndError() (*providers.Info, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *provider) getCachedInfoAndError() (*providers.Info, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#provider.oauth2Config",
                    "documentation": {
                      "identifier": "provider.oauth2Config",
                      "newPage": false,
                      "searchKey": "openidconnect.provider.oauth2Config",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *provider) oauth2Config() *oauth2.Config"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *provider) oauth2Config() *oauth2.Config\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#providerExtraClaims",
              "documentation": {
                "identifier": "providerExtraClaims",
                "newPage": false,
                "searchKey": "openidconnect.providerExtraClaims",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type providerExtraClaims struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype providerExtraClaims struct {\n\t// EndSessionEndpoint is the URL of the OP's endpoint that logs the user out of the OP (provided\n\t// in the \"end_session_endpoint\" field of the OP's service discovery response). See\n\t// https://openid.net/specs/openid-connect-session-1_0.html#OPMetadata.\n\tEndSessionEndpoint string `json:\"end_session_endpoint,omitempty\"`\n\n\t// RevocationEndpoint is the URL of the OP's revocation endpoint (provided in the\n\t// \"revocation_endpoint\" field of the OP's service discovery response). See\n\t// https://openid.net/specs/openid-heart-openid-connect-1_0.html#rfc.section.3.5 and\n\t// https://tools.ietf.org/html/rfc7009.\n\tRevocationEndpoint string `json:\"revocation_endpoint,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#providerJSON",
              "documentation": {
                "identifier": "providerJSON",
                "newPage": false,
                "searchKey": "openidconnect.providerJSON",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type providerJSON struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype providerJSON struct {\n\tIssuer      string `json:\"issuer\"`\n\tAuthURL     string `json:\"authorization_endpoint\"`\n\tTokenURL    string `json:\"token_endpoint\"`\n\tJWKSURL     string `json:\"jwks_uri\"`\n\tUserInfoURL string `json:\"userinfo_endpoint\"`\n}\n```\n\nproviderJSON is the JSON structure the OIDC provider returns at its discovery endpoing \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#sessionData",
              "documentation": {
                "identifier": "sessionData",
                "newPage": false,
                "searchKey": "openidconnect.sessionData",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type sessionData struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sessionData struct {\n\tID providers.ConfigID\n\n\t// Store only the oauth2.Token fields we need, to avoid hitting the ~4096-byte session data\n\t// limit.\n\tAccessToken string\n\tTokenType   string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#userClaims",
              "documentation": {
                "identifier": "userClaims",
                "newPage": false,
                "searchKey": "openidconnect.userClaims",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type userClaims struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype userClaims struct {\n\tName              string `json:\"name\"`\n\tGivenName         string `json:\"given_name\"`\n\tFamilyName        string `json:\"family_name\"`\n\tPreferredUsername string `json:\"preferred_username\"`\n\tPicture           string `json:\"picture\"`\n\tEmailVerified     *bool  `json:\"email_verified\"`\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#SignOut",
              "documentation": {
                "identifier": "SignOut",
                "newPage": false,
                "searchKey": "openidconnect.SignOut",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func SignOut(w http.ResponseWriter, r *http.Request) (endSessionEndpoint string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SignOut(w http.ResponseWriter, r *http.Request) (endSessionEndpoint string, err error)\n```\n\nSignOut clears OpenID Connect-related data from the session. If possible, it revokes the token from the OP. If there is an end-session endpoint, it returns that for the caller to present to the user. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#TestMiddleware",
              "documentation": {
                "identifier": "TestMiddleware",
                "newPage": false,
                "searchKey": "openidconnect.TestMiddleware",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMiddleware(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMiddleware(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#TestMiddleware_NoOpenRedirect",
              "documentation": {
                "identifier": "TestMiddleware_NoOpenRedirect",
                "newPage": false,
                "searchKey": "openidconnect.TestMiddleware_NoOpenRedirect",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMiddleware_NoOpenRedirect(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMiddleware_NoOpenRedirect(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#TestProviderConfigID",
              "documentation": {
                "identifier": "TestProviderConfigID",
                "newPage": false,
                "searchKey": "openidconnect.TestProviderConfigID",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestProviderConfigID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestProviderConfigID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#TestValidateCustom",
              "documentation": {
                "identifier": "TestValidateCustom",
                "newPage": false,
                "searchKey": "openidconnect.TestValidateCustom",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValidateCustom(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValidateCustom(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#authHandler",
              "documentation": {
                "identifier": "authHandler",
                "newPage": false,
                "searchKey": "openidconnect.authHandler",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func authHandler(w http.ResponseWriter, r *http.Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc authHandler(w http.ResponseWriter, r *http.Request)\n```\n\nauthHandler handles the OIDC Authentication Code Flow ([http://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth](http://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth)) on the Relying Party's end. \n\nðŸš¨ SECURITY \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#getOrCreateUser",
              "documentation": {
                "identifier": "getOrCreateUser",
                "newPage": false,
                "searchKey": "openidconnect.getOrCreateUser",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getOrCreateUser(ctx context.Context, p *provider, idToken *oidc.IDToken, userInfo *oidc.UserInfo, claims *userClaims) (_ *actor.Actor, safeErrMsg string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getOrCreateUser(ctx context.Context, p *provider, idToken *oidc.IDToken, userInfo *oidc.UserInfo, claims *userClaims) (_ *actor.Actor, safeErrMsg string, err error)\n```\n\ngetOrCreateUser gets or creates a user account based on the OpenID Connect token. It returns the authenticated actor if successful; otherwise it returns an friendly error message (safeErrMsg) that is safe to display to users, and a non-nil err with lower-level error details. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#getProviders",
              "documentation": {
                "identifier": "getProviders",
                "newPage": false,
                "searchKey": "openidconnect.getProviders",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getProviders() []providers.Provider"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getProviders() []providers.Provider\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#handleOpenIDConnectAuth",
              "documentation": {
                "identifier": "handleOpenIDConnectAuth",
                "newPage": false,
                "searchKey": "openidconnect.handleOpenIDConnectAuth",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func handleOpenIDConnectAuth(w http.ResponseWriter, r *http.Request, next http.Handler, isAPIRequest bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc handleOpenIDConnectAuth(w http.ResponseWriter, r *http.Request, next http.Handler, isAPIRequest bool)\n```\n\nhandleOpenIDConnectAuth performs OpenID Connect authentication (if configured) for HTTP requests, both API requests and non-API requests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#init.config.go",
              "documentation": {
                "identifier": "init.config.go",
                "newPage": false,
                "searchKey": "openidconnect.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#init.config_watch.go",
              "documentation": {
                "identifier": "init.config_watch.go",
                "newPage": false,
                "searchKey": "openidconnect.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#newOIDCIDServer",
              "documentation": {
                "identifier": "newOIDCIDServer",
                "newPage": false,
                "searchKey": "openidconnect.newOIDCIDServer",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newOIDCIDServer(t *testing.T, code string, oidcProvider *schema.OpenIDConnectAuthProvider) (server *httptest.Server, emailPtr *string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newOIDCIDServer(t *testing.T, code string, oidcProvider *schema.OpenIDConnectAuthProvider) (server *httptest.Server, emailPtr *string)\n```\n\nnew OIDCIDServer returns a new running mock OIDC ID Provider service. It is the caller's responsibility to call Close(). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#providerConfigID",
              "documentation": {
                "identifier": "providerConfigID",
                "newPage": false,
                "searchKey": "openidconnect.providerConfigID",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func providerConfigID(pc *schema.OpenIDConnectAuthProvider) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc providerConfigID(pc *schema.OpenIDConnectAuthProvider) string\n```\n\nproviderConfigID produces a semi-stable identifier for an openidconnect auth provider config object. It is used to distinguish between multiple auth providers of the same type when in multi-step auth flows. Its value is never persisted, and it must be deterministic. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#redirectToAuthRequest",
              "documentation": {
                "identifier": "redirectToAuthRequest",
                "newPage": false,
                "searchKey": "openidconnect.redirectToAuthRequest",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func redirectToAuthRequest(w http.ResponseWriter, r *http.Request, p *provider, returnToURL string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc redirectToAuthRequest(w http.ResponseWriter, r *http.Request, p *provider, returnToURL string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#revokeToken",
              "documentation": {
                "identifier": "revokeToken",
                "newPage": false,
                "searchKey": "openidconnect.revokeToken",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func revokeToken(ctx context.Context, p *provider, accessToken, tokenType string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc revokeToken(ctx context.Context, p *provider, accessToken, tokenType string) error\n```\n\nrevokeToken implements Token Revocation. See [https://tools.ietf.org/html/rfc7009](https://tools.ietf.org/html/rfc7009). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/frontend/internal/auth/openidconnect#validateConfig",
              "documentation": {
                "identifier": "validateConfig",
                "newPage": false,
                "searchKey": "openidconnect.validateConfig",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func validateConfig(c conf.Unified) (problems conf.Problems)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc validateConfig(c conf.Unified) (problems conf.Problems)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
