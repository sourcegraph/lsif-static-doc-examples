{
  "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor",
  "documentation": {
    "identifier": "janitor",
    "newPage": true,
    "searchKey": "enterprise/cmd/worker/internal/codeintel/janitor",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package janitor"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#uploadsBatchSize",
              "documentation": {
                "identifier": "uploadsBatchSize",
                "newPage": false,
                "searchKey": "janitor.uploadsBatchSize",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const uploadsBatchSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst uploadsBatchSize = 100\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#NewMetrics",
              "documentation": {
                "identifier": "NewMetrics",
                "newPage": false,
                "searchKey": "janitor.NewMetrics",
                "tags": [
                  "variable",
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var NewMetrics"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar NewMetrics = newMetrics\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#testSourcedCommits",
              "documentation": {
                "identifier": "testSourcedCommits",
                "newPage": false,
                "searchKey": "janitor.testSourcedCommits",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var testSourcedCommits"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testSourcedCommits = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStore",
              "documentation": {
                "identifier": "DBStore",
                "newPage": false,
                "searchKey": "janitor.DBStore",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStore interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStore interface {\n\tbasestore.ShareableStore\n\n\tHandle() *basestore.TransactableHandle\n\tTransact(ctx context.Context) (DBStore, error)\n\tDone(err error) error\n\n\tGetUploads(ctx context.Context, opts dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)\n\tDeleteUploadsWithoutRepository(ctx context.Context, now time.Time) (map[int]int, error)\n\tHardDeleteUploadByID(ctx context.Context, ids ...int) error\n\tSoftDeleteOldUploads(ctx context.Context, maxAge time.Duration, now time.Time) (int, error)\n\tDeleteOldIndexes(ctx context.Context, maxAge time.Duration, now time.Time) (int, error)\n\tDirtyRepositories(ctx context.Context) (map[int]int, error)\n\tDeleteIndexesWithoutRepository(ctx context.Context, now time.Time) (map[int]int, error)\n\tDeleteUploadsStuckUploading(ctx context.Context, uploadedBefore time.Time) (int, error)\n\tStaleSourcedCommits(ctx context.Context, threshold time.Duration, limit int, now time.Time) ([]dbstore.SourcedCommits, error)\n\tRefreshCommitResolvability(ctx context.Context, repositoryID int, commit string, delete bool, now time.Time) (int, int, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteIndexesWithoutRepositoryFunc",
              "documentation": {
                "identifier": "DBStoreDeleteIndexesWithoutRepositoryFunc",
                "newPage": false,
                "searchKey": "janitor.DBStoreDeleteIndexesWithoutRepositoryFunc",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDeleteIndexesWithoutRepositoryFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDeleteIndexesWithoutRepositoryFunc struct {\n\tdefaultHook func(context.Context, time.Time) (map[int]int, error)\n\thooks       []func(context.Context, time.Time) (map[int]int, error)\n\thistory     []DBStoreDeleteIndexesWithoutRepositoryFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreDeleteIndexesWithoutRepositoryFunc describes the behavior when the DeleteIndexesWithoutRepository method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteIndexesWithoutRepositoryFunc.History",
                    "documentation": {
                      "identifier": "DBStoreDeleteIndexesWithoutRepositoryFunc.History",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteIndexesWithoutRepositoryFunc.History",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteIndexesWithoutRepositoryFunc) History() []DBStoreDeleteIndexesWithoutRepositoryFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteIndexesWithoutRepositoryFunc) History() []DBStoreDeleteIndexesWithoutRepositoryFuncCall\n```\n\nHistory returns a sequence of DBStoreDeleteIndexesWithoutRepositoryFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteIndexesWithoutRepositoryFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreDeleteIndexesWithoutRepositoryFunc.PushHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteIndexesWithoutRepositoryFunc.PushHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteIndexesWithoutRepositoryFunc) PushHook(hook func(context.Context, time.Time) (map[int]int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteIndexesWithoutRepositoryFunc) PushHook(hook func(context.Context, time.Time) (map[int]int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the DeleteIndexesWithoutRepository method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteIndexesWithoutRepositoryFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreDeleteIndexesWithoutRepositoryFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteIndexesWithoutRepositoryFunc.PushReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteIndexesWithoutRepositoryFunc) PushReturn(r0 map[int]int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteIndexesWithoutRepositoryFunc) PushReturn(r0 map[int]int, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteIndexesWithoutRepositoryFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreDeleteIndexesWithoutRepositoryFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteIndexesWithoutRepositoryFunc.SetDefaultHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteIndexesWithoutRepositoryFunc) SetDefaultHook(hook func(context.Context, time.Time) (map[int]int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteIndexesWithoutRepositoryFunc) SetDefaultHook(hook func(context.Context, time.Time) (map[int]int, error))\n```\n\nSetDefaultHook sets function that is called when the DeleteIndexesWithoutRepository method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteIndexesWithoutRepositoryFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreDeleteIndexesWithoutRepositoryFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteIndexesWithoutRepositoryFunc.SetDefaultReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteIndexesWithoutRepositoryFunc) SetDefaultReturn(r0 map[int]int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteIndexesWithoutRepositoryFunc) SetDefaultReturn(r0 map[int]int, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteIndexesWithoutRepositoryFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreDeleteIndexesWithoutRepositoryFunc.appendCall",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteIndexesWithoutRepositoryFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteIndexesWithoutRepositoryFunc) appendCall(r0 DBStoreDeleteIndexesWithoutRepositoryFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteIndexesWithoutRepositoryFunc) appendCall(r0 DBStoreDeleteIndexesWithoutRepositoryFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteIndexesWithoutRepositoryFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreDeleteIndexesWithoutRepositoryFunc.nextHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteIndexesWithoutRepositoryFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteIndexesWithoutRepositoryFunc) nextHook() func(context.Context, time.Time) (map[int]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteIndexesWithoutRepositoryFunc) nextHook() func(context.Context, time.Time) (map[int]int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteIndexesWithoutRepositoryFuncCall",
              "documentation": {
                "identifier": "DBStoreDeleteIndexesWithoutRepositoryFuncCall",
                "newPage": false,
                "searchKey": "janitor.DBStoreDeleteIndexesWithoutRepositoryFuncCall",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDeleteIndexesWithoutRepositoryFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDeleteIndexesWithoutRepositoryFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 time.Time\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 map[int]int\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreDeleteIndexesWithoutRepositoryFuncCall is an object that describes an invocation of method DeleteIndexesWithoutRepository on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteIndexesWithoutRepositoryFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreDeleteIndexesWithoutRepositoryFuncCall.Args",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteIndexesWithoutRepositoryFuncCall.Args",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDeleteIndexesWithoutRepositoryFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDeleteIndexesWithoutRepositoryFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteIndexesWithoutRepositoryFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreDeleteIndexesWithoutRepositoryFuncCall.Results",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteIndexesWithoutRepositoryFuncCall.Results",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDeleteIndexesWithoutRepositoryFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDeleteIndexesWithoutRepositoryFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteOldIndexesFunc",
              "documentation": {
                "identifier": "DBStoreDeleteOldIndexesFunc",
                "newPage": false,
                "searchKey": "janitor.DBStoreDeleteOldIndexesFunc",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDeleteOldIndexesFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDeleteOldIndexesFunc struct {\n\tdefaultHook func(context.Context, time.Duration, time.Time) (int, error)\n\thooks       []func(context.Context, time.Duration, time.Time) (int, error)\n\thistory     []DBStoreDeleteOldIndexesFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreDeleteOldIndexesFunc describes the behavior when the DeleteOldIndexes method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteOldIndexesFunc.History",
                    "documentation": {
                      "identifier": "DBStoreDeleteOldIndexesFunc.History",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteOldIndexesFunc.History",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteOldIndexesFunc) History() []DBStoreDeleteOldIndexesFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteOldIndexesFunc) History() []DBStoreDeleteOldIndexesFuncCall\n```\n\nHistory returns a sequence of DBStoreDeleteOldIndexesFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteOldIndexesFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreDeleteOldIndexesFunc.PushHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteOldIndexesFunc.PushHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteOldIndexesFunc) PushHook(hook func(context.Context, time.Duration, time.Time) (int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteOldIndexesFunc) PushHook(hook func(context.Context, time.Duration, time.Time) (int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the DeleteOldIndexes method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteOldIndexesFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreDeleteOldIndexesFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteOldIndexesFunc.PushReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteOldIndexesFunc) PushReturn(r0 int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteOldIndexesFunc) PushReturn(r0 int, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteOldIndexesFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreDeleteOldIndexesFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteOldIndexesFunc.SetDefaultHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteOldIndexesFunc) SetDefaultHook(hook func(context.Context, time.Duration, time.Time) (int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteOldIndexesFunc) SetDefaultHook(hook func(context.Context, time.Duration, time.Time) (int, error))\n```\n\nSetDefaultHook sets function that is called when the DeleteOldIndexes method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteOldIndexesFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreDeleteOldIndexesFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteOldIndexesFunc.SetDefaultReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteOldIndexesFunc) SetDefaultReturn(r0 int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteOldIndexesFunc) SetDefaultReturn(r0 int, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteOldIndexesFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreDeleteOldIndexesFunc.appendCall",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteOldIndexesFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteOldIndexesFunc) appendCall(r0 DBStoreDeleteOldIndexesFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteOldIndexesFunc) appendCall(r0 DBStoreDeleteOldIndexesFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteOldIndexesFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreDeleteOldIndexesFunc.nextHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteOldIndexesFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteOldIndexesFunc) nextHook() func(context.Context, time.Duration, time.Time) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteOldIndexesFunc) nextHook() func(context.Context, time.Duration, time.Time) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteOldIndexesFuncCall",
              "documentation": {
                "identifier": "DBStoreDeleteOldIndexesFuncCall",
                "newPage": false,
                "searchKey": "janitor.DBStoreDeleteOldIndexesFuncCall",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDeleteOldIndexesFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDeleteOldIndexesFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 time.Duration\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 time.Time\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 int\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreDeleteOldIndexesFuncCall is an object that describes an invocation of method DeleteOldIndexes on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteOldIndexesFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreDeleteOldIndexesFuncCall.Args",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteOldIndexesFuncCall.Args",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDeleteOldIndexesFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDeleteOldIndexesFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteOldIndexesFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreDeleteOldIndexesFuncCall.Results",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteOldIndexesFuncCall.Results",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDeleteOldIndexesFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDeleteOldIndexesFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsStuckUploadingFunc",
              "documentation": {
                "identifier": "DBStoreDeleteUploadsStuckUploadingFunc",
                "newPage": false,
                "searchKey": "janitor.DBStoreDeleteUploadsStuckUploadingFunc",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDeleteUploadsStuckUploadingFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDeleteUploadsStuckUploadingFunc struct {\n\tdefaultHook func(context.Context, time.Time) (int, error)\n\thooks       []func(context.Context, time.Time) (int, error)\n\thistory     []DBStoreDeleteUploadsStuckUploadingFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreDeleteUploadsStuckUploadingFunc describes the behavior when the DeleteUploadsStuckUploading method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsStuckUploadingFunc.History",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadsStuckUploadingFunc.History",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteUploadsStuckUploadingFunc.History",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadsStuckUploadingFunc) History() []DBStoreDeleteUploadsStuckUploadingFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadsStuckUploadingFunc) History() []DBStoreDeleteUploadsStuckUploadingFuncCall\n```\n\nHistory returns a sequence of DBStoreDeleteUploadsStuckUploadingFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsStuckUploadingFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadsStuckUploadingFunc.PushHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteUploadsStuckUploadingFunc.PushHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadsStuckUploadingFunc) PushHook(hook func(context.Context, time.Time) (int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadsStuckUploadingFunc) PushHook(hook func(context.Context, time.Time) (int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the DeleteUploadsStuckUploading method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsStuckUploadingFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadsStuckUploadingFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteUploadsStuckUploadingFunc.PushReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadsStuckUploadingFunc) PushReturn(r0 int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadsStuckUploadingFunc) PushReturn(r0 int, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsStuckUploadingFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadsStuckUploadingFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteUploadsStuckUploadingFunc.SetDefaultHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadsStuckUploadingFunc) SetDefaultHook(hook func(context.Context, time.Time) (int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadsStuckUploadingFunc) SetDefaultHook(hook func(context.Context, time.Time) (int, error))\n```\n\nSetDefaultHook sets function that is called when the DeleteUploadsStuckUploading method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsStuckUploadingFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadsStuckUploadingFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteUploadsStuckUploadingFunc.SetDefaultReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadsStuckUploadingFunc) SetDefaultReturn(r0 int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadsStuckUploadingFunc) SetDefaultReturn(r0 int, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsStuckUploadingFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadsStuckUploadingFunc.appendCall",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteUploadsStuckUploadingFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadsStuckUploadingFunc) appendCall(r0 DBStoreDeleteUploadsStuckUploadingFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadsStuckUploadingFunc) appendCall(r0 DBStoreDeleteUploadsStuckUploadingFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsStuckUploadingFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadsStuckUploadingFunc.nextHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteUploadsStuckUploadingFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadsStuckUploadingFunc) nextHook() func(context.Context, time.Time) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadsStuckUploadingFunc) nextHook() func(context.Context, time.Time) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsStuckUploadingFuncCall",
              "documentation": {
                "identifier": "DBStoreDeleteUploadsStuckUploadingFuncCall",
                "newPage": false,
                "searchKey": "janitor.DBStoreDeleteUploadsStuckUploadingFuncCall",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDeleteUploadsStuckUploadingFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDeleteUploadsStuckUploadingFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 time.Time\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 int\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreDeleteUploadsStuckUploadingFuncCall is an object that describes an invocation of method DeleteUploadsStuckUploading on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsStuckUploadingFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadsStuckUploadingFuncCall.Args",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteUploadsStuckUploadingFuncCall.Args",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDeleteUploadsStuckUploadingFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDeleteUploadsStuckUploadingFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsStuckUploadingFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadsStuckUploadingFuncCall.Results",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteUploadsStuckUploadingFuncCall.Results",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDeleteUploadsStuckUploadingFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDeleteUploadsStuckUploadingFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsWithoutRepositoryFunc",
              "documentation": {
                "identifier": "DBStoreDeleteUploadsWithoutRepositoryFunc",
                "newPage": false,
                "searchKey": "janitor.DBStoreDeleteUploadsWithoutRepositoryFunc",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDeleteUploadsWithoutRepositoryFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDeleteUploadsWithoutRepositoryFunc struct {\n\tdefaultHook func(context.Context, time.Time) (map[int]int, error)\n\thooks       []func(context.Context, time.Time) (map[int]int, error)\n\thistory     []DBStoreDeleteUploadsWithoutRepositoryFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreDeleteUploadsWithoutRepositoryFunc describes the behavior when the DeleteUploadsWithoutRepository method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsWithoutRepositoryFunc.History",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadsWithoutRepositoryFunc.History",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteUploadsWithoutRepositoryFunc.History",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadsWithoutRepositoryFunc) History() []DBStoreDeleteUploadsWithoutRepositoryFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadsWithoutRepositoryFunc) History() []DBStoreDeleteUploadsWithoutRepositoryFuncCall\n```\n\nHistory returns a sequence of DBStoreDeleteUploadsWithoutRepositoryFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsWithoutRepositoryFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadsWithoutRepositoryFunc.PushHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteUploadsWithoutRepositoryFunc.PushHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadsWithoutRepositoryFunc) PushHook(hook func(context.Context, time.Time) (map[int]int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadsWithoutRepositoryFunc) PushHook(hook func(context.Context, time.Time) (map[int]int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the DeleteUploadsWithoutRepository method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsWithoutRepositoryFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadsWithoutRepositoryFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteUploadsWithoutRepositoryFunc.PushReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadsWithoutRepositoryFunc) PushReturn(r0 map[int]int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadsWithoutRepositoryFunc) PushReturn(r0 map[int]int, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsWithoutRepositoryFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadsWithoutRepositoryFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteUploadsWithoutRepositoryFunc.SetDefaultHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadsWithoutRepositoryFunc) SetDefaultHook(hook func(context.Context, time.Time) (map[int]int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadsWithoutRepositoryFunc) SetDefaultHook(hook func(context.Context, time.Time) (map[int]int, error))\n```\n\nSetDefaultHook sets function that is called when the DeleteUploadsWithoutRepository method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsWithoutRepositoryFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadsWithoutRepositoryFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteUploadsWithoutRepositoryFunc.SetDefaultReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadsWithoutRepositoryFunc) SetDefaultReturn(r0 map[int]int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadsWithoutRepositoryFunc) SetDefaultReturn(r0 map[int]int, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsWithoutRepositoryFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadsWithoutRepositoryFunc.appendCall",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteUploadsWithoutRepositoryFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadsWithoutRepositoryFunc) appendCall(r0 DBStoreDeleteUploadsWithoutRepositoryFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadsWithoutRepositoryFunc) appendCall(r0 DBStoreDeleteUploadsWithoutRepositoryFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsWithoutRepositoryFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadsWithoutRepositoryFunc.nextHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteUploadsWithoutRepositoryFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDeleteUploadsWithoutRepositoryFunc) nextHook() func(context.Context, time.Time) (map[int]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDeleteUploadsWithoutRepositoryFunc) nextHook() func(context.Context, time.Time) (map[int]int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsWithoutRepositoryFuncCall",
              "documentation": {
                "identifier": "DBStoreDeleteUploadsWithoutRepositoryFuncCall",
                "newPage": false,
                "searchKey": "janitor.DBStoreDeleteUploadsWithoutRepositoryFuncCall",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDeleteUploadsWithoutRepositoryFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDeleteUploadsWithoutRepositoryFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 time.Time\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 map[int]int\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreDeleteUploadsWithoutRepositoryFuncCall is an object that describes an invocation of method DeleteUploadsWithoutRepository on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsWithoutRepositoryFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadsWithoutRepositoryFuncCall.Args",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteUploadsWithoutRepositoryFuncCall.Args",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDeleteUploadsWithoutRepositoryFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDeleteUploadsWithoutRepositoryFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDeleteUploadsWithoutRepositoryFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreDeleteUploadsWithoutRepositoryFuncCall.Results",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDeleteUploadsWithoutRepositoryFuncCall.Results",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDeleteUploadsWithoutRepositoryFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDeleteUploadsWithoutRepositoryFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDirtyRepositoriesFunc",
              "documentation": {
                "identifier": "DBStoreDirtyRepositoriesFunc",
                "newPage": false,
                "searchKey": "janitor.DBStoreDirtyRepositoriesFunc",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDirtyRepositoriesFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDirtyRepositoriesFunc struct {\n\tdefaultHook func(context.Context) (map[int]int, error)\n\thooks       []func(context.Context) (map[int]int, error)\n\thistory     []DBStoreDirtyRepositoriesFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreDirtyRepositoriesFunc describes the behavior when the DirtyRepositories method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDirtyRepositoriesFunc.History",
                    "documentation": {
                      "identifier": "DBStoreDirtyRepositoriesFunc.History",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDirtyRepositoriesFunc.History",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDirtyRepositoriesFunc) History() []DBStoreDirtyRepositoriesFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDirtyRepositoriesFunc) History() []DBStoreDirtyRepositoriesFuncCall\n```\n\nHistory returns a sequence of DBStoreDirtyRepositoriesFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDirtyRepositoriesFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreDirtyRepositoriesFunc.PushHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDirtyRepositoriesFunc.PushHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDirtyRepositoriesFunc) PushHook(hook func(context.Context) (map[int]int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDirtyRepositoriesFunc) PushHook(hook func(context.Context) (map[int]int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the DirtyRepositories method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDirtyRepositoriesFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreDirtyRepositoriesFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDirtyRepositoriesFunc.PushReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDirtyRepositoriesFunc) PushReturn(r0 map[int]int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDirtyRepositoriesFunc) PushReturn(r0 map[int]int, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDirtyRepositoriesFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreDirtyRepositoriesFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDirtyRepositoriesFunc.SetDefaultHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDirtyRepositoriesFunc) SetDefaultHook(hook func(context.Context) (map[int]int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDirtyRepositoriesFunc) SetDefaultHook(hook func(context.Context) (map[int]int, error))\n```\n\nSetDefaultHook sets function that is called when the DirtyRepositories method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDirtyRepositoriesFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreDirtyRepositoriesFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDirtyRepositoriesFunc.SetDefaultReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDirtyRepositoriesFunc) SetDefaultReturn(r0 map[int]int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDirtyRepositoriesFunc) SetDefaultReturn(r0 map[int]int, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDirtyRepositoriesFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreDirtyRepositoriesFunc.appendCall",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDirtyRepositoriesFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDirtyRepositoriesFunc) appendCall(r0 DBStoreDirtyRepositoriesFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDirtyRepositoriesFunc) appendCall(r0 DBStoreDirtyRepositoriesFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDirtyRepositoriesFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreDirtyRepositoriesFunc.nextHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDirtyRepositoriesFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDirtyRepositoriesFunc) nextHook() func(context.Context) (map[int]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDirtyRepositoriesFunc) nextHook() func(context.Context) (map[int]int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDirtyRepositoriesFuncCall",
              "documentation": {
                "identifier": "DBStoreDirtyRepositoriesFuncCall",
                "newPage": false,
                "searchKey": "janitor.DBStoreDirtyRepositoriesFuncCall",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDirtyRepositoriesFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDirtyRepositoriesFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 map[int]int\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreDirtyRepositoriesFuncCall is an object that describes an invocation of method DirtyRepositories on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDirtyRepositoriesFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreDirtyRepositoriesFuncCall.Args",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDirtyRepositoriesFuncCall.Args",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDirtyRepositoriesFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDirtyRepositoriesFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDirtyRepositoriesFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreDirtyRepositoriesFuncCall.Results",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDirtyRepositoriesFuncCall.Results",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDirtyRepositoriesFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDirtyRepositoriesFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDoneFunc",
              "documentation": {
                "identifier": "DBStoreDoneFunc",
                "newPage": false,
                "searchKey": "janitor.DBStoreDoneFunc",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDoneFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDoneFunc struct {\n\tdefaultHook func(error) error\n\thooks       []func(error) error\n\thistory     []DBStoreDoneFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreDoneFunc describes the behavior when the Done method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDoneFunc.History",
                    "documentation": {
                      "identifier": "DBStoreDoneFunc.History",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDoneFunc.History",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDoneFunc) History() []DBStoreDoneFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDoneFunc) History() []DBStoreDoneFuncCall\n```\n\nHistory returns a sequence of DBStoreDoneFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDoneFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreDoneFunc.PushHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDoneFunc.PushHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDoneFunc) PushHook(hook func(error) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDoneFunc) PushHook(hook func(error) error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Done method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDoneFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreDoneFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDoneFunc.PushReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDoneFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDoneFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDoneFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreDoneFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDoneFunc.SetDefaultHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDoneFunc) SetDefaultHook(hook func(error) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDoneFunc) SetDefaultHook(hook func(error) error)\n```\n\nSetDefaultHook sets function that is called when the Done method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDoneFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreDoneFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDoneFunc.SetDefaultReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDoneFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDoneFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDoneFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreDoneFunc.appendCall",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDoneFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDoneFunc) appendCall(r0 DBStoreDoneFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDoneFunc) appendCall(r0 DBStoreDoneFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDoneFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreDoneFunc.nextHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDoneFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreDoneFunc) nextHook() func(error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreDoneFunc) nextHook() func(error) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDoneFuncCall",
              "documentation": {
                "identifier": "DBStoreDoneFuncCall",
                "newPage": false,
                "searchKey": "janitor.DBStoreDoneFuncCall",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreDoneFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreDoneFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 error\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nDBStoreDoneFuncCall is an object that describes an invocation of method Done on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDoneFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreDoneFuncCall.Args",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDoneFuncCall.Args",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDoneFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDoneFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreDoneFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreDoneFuncCall.Results",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreDoneFuncCall.Results",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreDoneFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreDoneFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreGetUploadsFunc",
              "documentation": {
                "identifier": "DBStoreGetUploadsFunc",
                "newPage": false,
                "searchKey": "janitor.DBStoreGetUploadsFunc",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetUploadsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetUploadsFunc struct {\n\tdefaultHook func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)\n\thooks       []func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)\n\thistory     []DBStoreGetUploadsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreGetUploadsFunc describes the behavior when the GetUploads method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreGetUploadsFunc.History",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.History",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreGetUploadsFunc.History",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) History() []DBStoreGetUploadsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) History() []DBStoreGetUploadsFuncCall\n```\n\nHistory returns a sequence of DBStoreGetUploadsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreGetUploadsFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreGetUploadsFunc.PushHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) PushHook(hook func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) PushHook(hook func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetUploads method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreGetUploadsFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreGetUploadsFunc.PushReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) PushReturn(r0 []dbstore.Upload, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) PushReturn(r0 []dbstore.Upload, r1 int, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreGetUploadsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreGetUploadsFunc.SetDefaultHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) SetDefaultHook(hook func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) SetDefaultHook(hook func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error))\n```\n\nSetDefaultHook sets function that is called when the GetUploads method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreGetUploadsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreGetUploadsFunc.SetDefaultReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) SetDefaultReturn(r0 []dbstore.Upload, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) SetDefaultReturn(r0 []dbstore.Upload, r1 int, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreGetUploadsFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreGetUploadsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) appendCall(r0 DBStoreGetUploadsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) appendCall(r0 DBStoreGetUploadsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreGetUploadsFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreGetUploadsFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) nextHook() func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) nextHook() func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreGetUploadsFuncCall",
              "documentation": {
                "identifier": "DBStoreGetUploadsFuncCall",
                "newPage": false,
                "searchKey": "janitor.DBStoreGetUploadsFuncCall",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetUploadsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetUploadsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 dbstore.GetUploadsOptions\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []dbstore.Upload\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 int\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nDBStoreGetUploadsFuncCall is an object that describes an invocation of method GetUploads on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreGetUploadsFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreGetUploadsFuncCall.Args",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetUploadsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetUploadsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreGetUploadsFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreGetUploadsFuncCall.Results",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetUploadsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetUploadsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHandleFunc",
              "documentation": {
                "identifier": "DBStoreHandleFunc",
                "newPage": false,
                "searchKey": "janitor.DBStoreHandleFunc",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreHandleFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreHandleFunc struct {\n\tdefaultHook func() *basestore.TransactableHandle\n\thooks       []func() *basestore.TransactableHandle\n\thistory     []DBStoreHandleFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreHandleFunc describes the behavior when the Handle method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHandleFunc.History",
                    "documentation": {
                      "identifier": "DBStoreHandleFunc.History",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreHandleFunc.History",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHandleFunc) History() []DBStoreHandleFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHandleFunc) History() []DBStoreHandleFuncCall\n```\n\nHistory returns a sequence of DBStoreHandleFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHandleFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreHandleFunc.PushHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreHandleFunc.PushHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Handle method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHandleFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreHandleFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreHandleFunc.PushReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHandleFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreHandleFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreHandleFunc.SetDefaultHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle)\n```\n\nSetDefaultHook sets function that is called when the Handle method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHandleFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreHandleFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreHandleFunc.SetDefaultReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHandleFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreHandleFunc.appendCall",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreHandleFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHandleFunc) appendCall(r0 DBStoreHandleFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHandleFunc) appendCall(r0 DBStoreHandleFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHandleFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreHandleFunc.nextHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreHandleFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHandleFunc) nextHook() func() *basestore.TransactableHandle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHandleFunc) nextHook() func() *basestore.TransactableHandle\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHandleFuncCall",
              "documentation": {
                "identifier": "DBStoreHandleFuncCall",
                "newPage": false,
                "searchKey": "janitor.DBStoreHandleFuncCall",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreHandleFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreHandleFuncCall struct {\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *basestore.TransactableHandle\n}\n```\n\nDBStoreHandleFuncCall is an object that describes an invocation of method Handle on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHandleFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreHandleFuncCall.Args",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreHandleFuncCall.Args",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreHandleFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreHandleFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHandleFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreHandleFuncCall.Results",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreHandleFuncCall.Results",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreHandleFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreHandleFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHardDeleteUploadByIDFunc",
              "documentation": {
                "identifier": "DBStoreHardDeleteUploadByIDFunc",
                "newPage": false,
                "searchKey": "janitor.DBStoreHardDeleteUploadByIDFunc",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreHardDeleteUploadByIDFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreHardDeleteUploadByIDFunc struct {\n\tdefaultHook func(context.Context, ...int) error\n\thooks       []func(context.Context, ...int) error\n\thistory     []DBStoreHardDeleteUploadByIDFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreHardDeleteUploadByIDFunc describes the behavior when the HardDeleteUploadByID method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHardDeleteUploadByIDFunc.History",
                    "documentation": {
                      "identifier": "DBStoreHardDeleteUploadByIDFunc.History",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreHardDeleteUploadByIDFunc.History",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHardDeleteUploadByIDFunc) History() []DBStoreHardDeleteUploadByIDFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHardDeleteUploadByIDFunc) History() []DBStoreHardDeleteUploadByIDFuncCall\n```\n\nHistory returns a sequence of DBStoreHardDeleteUploadByIDFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHardDeleteUploadByIDFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreHardDeleteUploadByIDFunc.PushHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreHardDeleteUploadByIDFunc.PushHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHardDeleteUploadByIDFunc) PushHook(hook func(context.Context, ...int) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHardDeleteUploadByIDFunc) PushHook(hook func(context.Context, ...int) error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the HardDeleteUploadByID method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHardDeleteUploadByIDFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreHardDeleteUploadByIDFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreHardDeleteUploadByIDFunc.PushReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHardDeleteUploadByIDFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHardDeleteUploadByIDFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHardDeleteUploadByIDFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreHardDeleteUploadByIDFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreHardDeleteUploadByIDFunc.SetDefaultHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHardDeleteUploadByIDFunc) SetDefaultHook(hook func(context.Context, ...int) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHardDeleteUploadByIDFunc) SetDefaultHook(hook func(context.Context, ...int) error)\n```\n\nSetDefaultHook sets function that is called when the HardDeleteUploadByID method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHardDeleteUploadByIDFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreHardDeleteUploadByIDFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreHardDeleteUploadByIDFunc.SetDefaultReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHardDeleteUploadByIDFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHardDeleteUploadByIDFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHardDeleteUploadByIDFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreHardDeleteUploadByIDFunc.appendCall",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreHardDeleteUploadByIDFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHardDeleteUploadByIDFunc) appendCall(r0 DBStoreHardDeleteUploadByIDFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHardDeleteUploadByIDFunc) appendCall(r0 DBStoreHardDeleteUploadByIDFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHardDeleteUploadByIDFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreHardDeleteUploadByIDFunc.nextHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreHardDeleteUploadByIDFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreHardDeleteUploadByIDFunc) nextHook() func(context.Context, ...int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreHardDeleteUploadByIDFunc) nextHook() func(context.Context, ...int) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHardDeleteUploadByIDFuncCall",
              "documentation": {
                "identifier": "DBStoreHardDeleteUploadByIDFuncCall",
                "newPage": false,
                "searchKey": "janitor.DBStoreHardDeleteUploadByIDFuncCall",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreHardDeleteUploadByIDFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreHardDeleteUploadByIDFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is a slice containing the values of the variadic arguments\n\t// passed to this method invocation.\n\tArg1 []int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nDBStoreHardDeleteUploadByIDFuncCall is an object that describes an invocation of method HardDeleteUploadByID on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHardDeleteUploadByIDFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreHardDeleteUploadByIDFuncCall.Args",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreHardDeleteUploadByIDFuncCall.Args",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreHardDeleteUploadByIDFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreHardDeleteUploadByIDFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. The variadic slice argument is flattened in this array such that one positional argument and three variadic arguments would result in a slice of four, not two. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreHardDeleteUploadByIDFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreHardDeleteUploadByIDFuncCall.Results",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreHardDeleteUploadByIDFuncCall.Results",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreHardDeleteUploadByIDFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreHardDeleteUploadByIDFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreRefreshCommitResolvabilityFunc",
              "documentation": {
                "identifier": "DBStoreRefreshCommitResolvabilityFunc",
                "newPage": false,
                "searchKey": "janitor.DBStoreRefreshCommitResolvabilityFunc",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreRefreshCommitResolvabilityFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreRefreshCommitResolvabilityFunc struct {\n\tdefaultHook func(context.Context, int, string, bool, time.Time) (int, int, error)\n\thooks       []func(context.Context, int, string, bool, time.Time) (int, int, error)\n\thistory     []DBStoreRefreshCommitResolvabilityFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreRefreshCommitResolvabilityFunc describes the behavior when the RefreshCommitResolvability method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreRefreshCommitResolvabilityFunc.History",
                    "documentation": {
                      "identifier": "DBStoreRefreshCommitResolvabilityFunc.History",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreRefreshCommitResolvabilityFunc.History",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreRefreshCommitResolvabilityFunc) History() []DBStoreRefreshCommitResolvabilityFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreRefreshCommitResolvabilityFunc) History() []DBStoreRefreshCommitResolvabilityFuncCall\n```\n\nHistory returns a sequence of DBStoreRefreshCommitResolvabilityFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreRefreshCommitResolvabilityFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreRefreshCommitResolvabilityFunc.PushHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreRefreshCommitResolvabilityFunc.PushHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreRefreshCommitResolvabilityFunc) PushHook(hook func(context.Context, int, string, bool, time.Time) (int, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreRefreshCommitResolvabilityFunc) PushHook(hook func(context.Context, int, string, bool, time.Time) (int, int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the RefreshCommitResolvability method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreRefreshCommitResolvabilityFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreRefreshCommitResolvabilityFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreRefreshCommitResolvabilityFunc.PushReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreRefreshCommitResolvabilityFunc) PushReturn(r0 int, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreRefreshCommitResolvabilityFunc) PushReturn(r0 int, r1 int, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreRefreshCommitResolvabilityFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreRefreshCommitResolvabilityFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreRefreshCommitResolvabilityFunc.SetDefaultHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreRefreshCommitResolvabilityFunc) SetDefaultHook(hook func(context.Context, int, string, bool, time.Time) (int, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreRefreshCommitResolvabilityFunc) SetDefaultHook(hook func(context.Context, int, string, bool, time.Time) (int, int, error))\n```\n\nSetDefaultHook sets function that is called when the RefreshCommitResolvability method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreRefreshCommitResolvabilityFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreRefreshCommitResolvabilityFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreRefreshCommitResolvabilityFunc.SetDefaultReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreRefreshCommitResolvabilityFunc) SetDefaultReturn(r0 int, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreRefreshCommitResolvabilityFunc) SetDefaultReturn(r0 int, r1 int, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreRefreshCommitResolvabilityFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreRefreshCommitResolvabilityFunc.appendCall",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreRefreshCommitResolvabilityFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreRefreshCommitResolvabilityFunc) appendCall(r0 DBStoreRefreshCommitResolvabilityFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreRefreshCommitResolvabilityFunc) appendCall(r0 DBStoreRefreshCommitResolvabilityFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreRefreshCommitResolvabilityFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreRefreshCommitResolvabilityFunc.nextHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreRefreshCommitResolvabilityFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreRefreshCommitResolvabilityFunc) nextHook() func(context.Context, int, string, bool, time.Time) (int, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreRefreshCommitResolvabilityFunc) nextHook() func(context.Context, int, string, bool, time.Time) (int, int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreRefreshCommitResolvabilityFuncCall",
              "documentation": {
                "identifier": "DBStoreRefreshCommitResolvabilityFuncCall",
                "newPage": false,
                "searchKey": "janitor.DBStoreRefreshCommitResolvabilityFuncCall",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreRefreshCommitResolvabilityFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreRefreshCommitResolvabilityFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 bool\n\t// Arg4 is the value of the 5th argument passed to this method\n\t// invocation.\n\tArg4 time.Time\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 int\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 int\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nDBStoreRefreshCommitResolvabilityFuncCall is an object that describes an invocation of method RefreshCommitResolvability on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreRefreshCommitResolvabilityFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreRefreshCommitResolvabilityFuncCall.Args",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreRefreshCommitResolvabilityFuncCall.Args",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreRefreshCommitResolvabilityFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreRefreshCommitResolvabilityFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreRefreshCommitResolvabilityFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreRefreshCommitResolvabilityFuncCall.Results",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreRefreshCommitResolvabilityFuncCall.Results",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreRefreshCommitResolvabilityFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreRefreshCommitResolvabilityFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreShim",
              "documentation": {
                "identifier": "DBStoreShim",
                "newPage": false,
                "searchKey": "janitor.DBStoreShim",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreShim struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreShim struct {\n\t*dbstore.Store\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreShim.Transact",
                    "documentation": {
                      "identifier": "DBStoreShim.Transact",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreShim.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *DBStoreShim) Transact(ctx context.Context) (DBStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *DBStoreShim) Transact(ctx context.Context) (DBStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreSoftDeleteOldUploadsFunc",
              "documentation": {
                "identifier": "DBStoreSoftDeleteOldUploadsFunc",
                "newPage": false,
                "searchKey": "janitor.DBStoreSoftDeleteOldUploadsFunc",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreSoftDeleteOldUploadsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreSoftDeleteOldUploadsFunc struct {\n\tdefaultHook func(context.Context, time.Duration, time.Time) (int, error)\n\thooks       []func(context.Context, time.Duration, time.Time) (int, error)\n\thistory     []DBStoreSoftDeleteOldUploadsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreSoftDeleteOldUploadsFunc describes the behavior when the SoftDeleteOldUploads method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreSoftDeleteOldUploadsFunc.History",
                    "documentation": {
                      "identifier": "DBStoreSoftDeleteOldUploadsFunc.History",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreSoftDeleteOldUploadsFunc.History",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreSoftDeleteOldUploadsFunc) History() []DBStoreSoftDeleteOldUploadsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreSoftDeleteOldUploadsFunc) History() []DBStoreSoftDeleteOldUploadsFuncCall\n```\n\nHistory returns a sequence of DBStoreSoftDeleteOldUploadsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreSoftDeleteOldUploadsFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreSoftDeleteOldUploadsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreSoftDeleteOldUploadsFunc.PushHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreSoftDeleteOldUploadsFunc) PushHook(hook func(context.Context, time.Duration, time.Time) (int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreSoftDeleteOldUploadsFunc) PushHook(hook func(context.Context, time.Duration, time.Time) (int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the SoftDeleteOldUploads method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreSoftDeleteOldUploadsFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreSoftDeleteOldUploadsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreSoftDeleteOldUploadsFunc.PushReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreSoftDeleteOldUploadsFunc) PushReturn(r0 int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreSoftDeleteOldUploadsFunc) PushReturn(r0 int, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreSoftDeleteOldUploadsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreSoftDeleteOldUploadsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreSoftDeleteOldUploadsFunc.SetDefaultHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreSoftDeleteOldUploadsFunc) SetDefaultHook(hook func(context.Context, time.Duration, time.Time) (int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreSoftDeleteOldUploadsFunc) SetDefaultHook(hook func(context.Context, time.Duration, time.Time) (int, error))\n```\n\nSetDefaultHook sets function that is called when the SoftDeleteOldUploads method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreSoftDeleteOldUploadsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreSoftDeleteOldUploadsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreSoftDeleteOldUploadsFunc.SetDefaultReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreSoftDeleteOldUploadsFunc) SetDefaultReturn(r0 int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreSoftDeleteOldUploadsFunc) SetDefaultReturn(r0 int, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreSoftDeleteOldUploadsFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreSoftDeleteOldUploadsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreSoftDeleteOldUploadsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreSoftDeleteOldUploadsFunc) appendCall(r0 DBStoreSoftDeleteOldUploadsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreSoftDeleteOldUploadsFunc) appendCall(r0 DBStoreSoftDeleteOldUploadsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreSoftDeleteOldUploadsFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreSoftDeleteOldUploadsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreSoftDeleteOldUploadsFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreSoftDeleteOldUploadsFunc) nextHook() func(context.Context, time.Duration, time.Time) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreSoftDeleteOldUploadsFunc) nextHook() func(context.Context, time.Duration, time.Time) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreSoftDeleteOldUploadsFuncCall",
              "documentation": {
                "identifier": "DBStoreSoftDeleteOldUploadsFuncCall",
                "newPage": false,
                "searchKey": "janitor.DBStoreSoftDeleteOldUploadsFuncCall",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreSoftDeleteOldUploadsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreSoftDeleteOldUploadsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 time.Duration\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 time.Time\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 int\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreSoftDeleteOldUploadsFuncCall is an object that describes an invocation of method SoftDeleteOldUploads on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreSoftDeleteOldUploadsFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreSoftDeleteOldUploadsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreSoftDeleteOldUploadsFuncCall.Args",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreSoftDeleteOldUploadsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreSoftDeleteOldUploadsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreSoftDeleteOldUploadsFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreSoftDeleteOldUploadsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreSoftDeleteOldUploadsFuncCall.Results",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreSoftDeleteOldUploadsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreSoftDeleteOldUploadsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreStaleSourcedCommitsFunc",
              "documentation": {
                "identifier": "DBStoreStaleSourcedCommitsFunc",
                "newPage": false,
                "searchKey": "janitor.DBStoreStaleSourcedCommitsFunc",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreStaleSourcedCommitsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreStaleSourcedCommitsFunc struct {\n\tdefaultHook func(context.Context, time.Duration, int, time.Time) ([]dbstore.SourcedCommits, error)\n\thooks       []func(context.Context, time.Duration, int, time.Time) ([]dbstore.SourcedCommits, error)\n\thistory     []DBStoreStaleSourcedCommitsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreStaleSourcedCommitsFunc describes the behavior when the StaleSourcedCommits method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreStaleSourcedCommitsFunc.History",
                    "documentation": {
                      "identifier": "DBStoreStaleSourcedCommitsFunc.History",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreStaleSourcedCommitsFunc.History",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreStaleSourcedCommitsFunc) History() []DBStoreStaleSourcedCommitsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreStaleSourcedCommitsFunc) History() []DBStoreStaleSourcedCommitsFuncCall\n```\n\nHistory returns a sequence of DBStoreStaleSourcedCommitsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreStaleSourcedCommitsFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreStaleSourcedCommitsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreStaleSourcedCommitsFunc.PushHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreStaleSourcedCommitsFunc) PushHook(hook func(context.Context, time.Duration, int, time.Time) ([]dbstore.SourcedCommits, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreStaleSourcedCommitsFunc) PushHook(hook func(context.Context, time.Duration, int, time.Time) ([]dbstore.SourcedCommits, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the StaleSourcedCommits method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreStaleSourcedCommitsFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreStaleSourcedCommitsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreStaleSourcedCommitsFunc.PushReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreStaleSourcedCommitsFunc) PushReturn(r0 []dbstore.SourcedCommits, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreStaleSourcedCommitsFunc) PushReturn(r0 []dbstore.SourcedCommits, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreStaleSourcedCommitsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreStaleSourcedCommitsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreStaleSourcedCommitsFunc.SetDefaultHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreStaleSourcedCommitsFunc) SetDefaultHook(hook func(context.Context, time.Duration, int, time.Time) ([]dbstore.SourcedCommits, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreStaleSourcedCommitsFunc) SetDefaultHook(hook func(context.Context, time.Duration, int, time.Time) ([]dbstore.SourcedCommits, error))\n```\n\nSetDefaultHook sets function that is called when the StaleSourcedCommits method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreStaleSourcedCommitsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreStaleSourcedCommitsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreStaleSourcedCommitsFunc.SetDefaultReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreStaleSourcedCommitsFunc) SetDefaultReturn(r0 []dbstore.SourcedCommits, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreStaleSourcedCommitsFunc) SetDefaultReturn(r0 []dbstore.SourcedCommits, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreStaleSourcedCommitsFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreStaleSourcedCommitsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreStaleSourcedCommitsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreStaleSourcedCommitsFunc) appendCall(r0 DBStoreStaleSourcedCommitsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreStaleSourcedCommitsFunc) appendCall(r0 DBStoreStaleSourcedCommitsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreStaleSourcedCommitsFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreStaleSourcedCommitsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreStaleSourcedCommitsFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreStaleSourcedCommitsFunc) nextHook() func(context.Context, time.Duration, int, time.Time) ([]dbstore.SourcedCommits, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreStaleSourcedCommitsFunc) nextHook() func(context.Context, time.Duration, int, time.Time) ([]dbstore.SourcedCommits, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreStaleSourcedCommitsFuncCall",
              "documentation": {
                "identifier": "DBStoreStaleSourcedCommitsFuncCall",
                "newPage": false,
                "searchKey": "janitor.DBStoreStaleSourcedCommitsFuncCall",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreStaleSourcedCommitsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreStaleSourcedCommitsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 time.Duration\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 int\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 time.Time\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []dbstore.SourcedCommits\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreStaleSourcedCommitsFuncCall is an object that describes an invocation of method StaleSourcedCommits on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreStaleSourcedCommitsFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreStaleSourcedCommitsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreStaleSourcedCommitsFuncCall.Args",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreStaleSourcedCommitsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreStaleSourcedCommitsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreStaleSourcedCommitsFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreStaleSourcedCommitsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreStaleSourcedCommitsFuncCall.Results",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreStaleSourcedCommitsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreStaleSourcedCommitsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreTransactFunc",
              "documentation": {
                "identifier": "DBStoreTransactFunc",
                "newPage": false,
                "searchKey": "janitor.DBStoreTransactFunc",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreTransactFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreTransactFunc struct {\n\tdefaultHook func(context.Context) (DBStore, error)\n\thooks       []func(context.Context) (DBStore, error)\n\thistory     []DBStoreTransactFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreTransactFunc describes the behavior when the Transact method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreTransactFunc.History",
                    "documentation": {
                      "identifier": "DBStoreTransactFunc.History",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreTransactFunc.History",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreTransactFunc) History() []DBStoreTransactFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreTransactFunc) History() []DBStoreTransactFuncCall\n```\n\nHistory returns a sequence of DBStoreTransactFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreTransactFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreTransactFunc.PushHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreTransactFunc.PushHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreTransactFunc) PushHook(hook func(context.Context) (DBStore, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreTransactFunc) PushHook(hook func(context.Context) (DBStore, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Transact method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreTransactFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreTransactFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreTransactFunc.PushReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreTransactFunc) PushReturn(r0 DBStore, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreTransactFunc) PushReturn(r0 DBStore, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreTransactFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreTransactFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreTransactFunc.SetDefaultHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreTransactFunc) SetDefaultHook(hook func(context.Context) (DBStore, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreTransactFunc) SetDefaultHook(hook func(context.Context) (DBStore, error))\n```\n\nSetDefaultHook sets function that is called when the Transact method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreTransactFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreTransactFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreTransactFunc.SetDefaultReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreTransactFunc) SetDefaultReturn(r0 DBStore, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreTransactFunc) SetDefaultReturn(r0 DBStore, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreTransactFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreTransactFunc.appendCall",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreTransactFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreTransactFunc) appendCall(r0 DBStoreTransactFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreTransactFunc) appendCall(r0 DBStoreTransactFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreTransactFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreTransactFunc.nextHook",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreTransactFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreTransactFunc) nextHook() func(context.Context) (DBStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreTransactFunc) nextHook() func(context.Context) (DBStore, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreTransactFuncCall",
              "documentation": {
                "identifier": "DBStoreTransactFuncCall",
                "newPage": false,
                "searchKey": "janitor.DBStoreTransactFuncCall",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreTransactFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreTransactFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 DBStore\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreTransactFuncCall is an object that describes an invocation of method Transact on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreTransactFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreTransactFuncCall.Args",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreTransactFuncCall.Args",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreTransactFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreTransactFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#DBStoreTransactFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreTransactFuncCall.Results",
                      "newPage": false,
                      "searchKey": "janitor.DBStoreTransactFuncCall.Results",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreTransactFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreTransactFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#LSIFStore",
              "documentation": {
                "identifier": "LSIFStore",
                "newPage": false,
                "searchKey": "janitor.LSIFStore",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStore interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStore interface {\n\tClear(ctx context.Context, bundleIDs ...int) error\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#LSIFStoreClearFunc",
              "documentation": {
                "identifier": "LSIFStoreClearFunc",
                "newPage": false,
                "searchKey": "janitor.LSIFStoreClearFunc",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreClearFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreClearFunc struct {\n\tdefaultHook func(context.Context, ...int) error\n\thooks       []func(context.Context, ...int) error\n\thistory     []LSIFStoreClearFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nLSIFStoreClearFunc describes the behavior when the Clear method of the parent MockLSIFStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#LSIFStoreClearFunc.History",
                    "documentation": {
                      "identifier": "LSIFStoreClearFunc.History",
                      "newPage": false,
                      "searchKey": "janitor.LSIFStoreClearFunc.History",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreClearFunc) History() []LSIFStoreClearFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreClearFunc) History() []LSIFStoreClearFuncCall\n```\n\nHistory returns a sequence of LSIFStoreClearFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#LSIFStoreClearFunc.PushHook",
                    "documentation": {
                      "identifier": "LSIFStoreClearFunc.PushHook",
                      "newPage": false,
                      "searchKey": "janitor.LSIFStoreClearFunc.PushHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreClearFunc) PushHook(hook func(context.Context, ...int) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreClearFunc) PushHook(hook func(context.Context, ...int) error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Clear method of the parent MockLSIFStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#LSIFStoreClearFunc.PushReturn",
                    "documentation": {
                      "identifier": "LSIFStoreClearFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "janitor.LSIFStoreClearFunc.PushReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreClearFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreClearFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#LSIFStoreClearFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "LSIFStoreClearFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "janitor.LSIFStoreClearFunc.SetDefaultHook",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreClearFunc) SetDefaultHook(hook func(context.Context, ...int) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreClearFunc) SetDefaultHook(hook func(context.Context, ...int) error)\n```\n\nSetDefaultHook sets function that is called when the Clear method of the parent MockLSIFStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#LSIFStoreClearFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "LSIFStoreClearFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "janitor.LSIFStoreClearFunc.SetDefaultReturn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreClearFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreClearFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#LSIFStoreClearFunc.appendCall",
                    "documentation": {
                      "identifier": "LSIFStoreClearFunc.appendCall",
                      "newPage": false,
                      "searchKey": "janitor.LSIFStoreClearFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreClearFunc) appendCall(r0 LSIFStoreClearFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreClearFunc) appendCall(r0 LSIFStoreClearFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#LSIFStoreClearFunc.nextHook",
                    "documentation": {
                      "identifier": "LSIFStoreClearFunc.nextHook",
                      "newPage": false,
                      "searchKey": "janitor.LSIFStoreClearFunc.nextHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *LSIFStoreClearFunc) nextHook() func(context.Context, ...int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *LSIFStoreClearFunc) nextHook() func(context.Context, ...int) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#LSIFStoreClearFuncCall",
              "documentation": {
                "identifier": "LSIFStoreClearFuncCall",
                "newPage": false,
                "searchKey": "janitor.LSIFStoreClearFuncCall",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LSIFStoreClearFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LSIFStoreClearFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is a slice containing the values of the variadic arguments\n\t// passed to this method invocation.\n\tArg1 []int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nLSIFStoreClearFuncCall is an object that describes an invocation of method Clear on an instance of MockLSIFStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#LSIFStoreClearFuncCall.Args",
                    "documentation": {
                      "identifier": "LSIFStoreClearFuncCall.Args",
                      "newPage": false,
                      "searchKey": "janitor.LSIFStoreClearFuncCall.Args",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreClearFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreClearFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. The variadic slice argument is flattened in this array such that one positional argument and three variadic arguments would result in a slice of four, not two. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#LSIFStoreClearFuncCall.Results",
                    "documentation": {
                      "identifier": "LSIFStoreClearFuncCall.Results",
                      "newPage": false,
                      "searchKey": "janitor.LSIFStoreClearFuncCall.Results",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c LSIFStoreClearFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c LSIFStoreClearFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#MockDBStore",
              "documentation": {
                "identifier": "MockDBStore",
                "newPage": false,
                "searchKey": "janitor.MockDBStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockDBStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockDBStore struct {\n\t// DeleteIndexesWithoutRepositoryFunc is an instance of a mock function\n\t// object controlling the behavior of the method\n\t// DeleteIndexesWithoutRepository.\n\tDeleteIndexesWithoutRepositoryFunc *DBStoreDeleteIndexesWithoutRepositoryFunc\n\t// DeleteOldIndexesFunc is an instance of a mock function object\n\t// controlling the behavior of the method DeleteOldIndexes.\n\tDeleteOldIndexesFunc *DBStoreDeleteOldIndexesFunc\n\t// DeleteUploadsStuckUploadingFunc is an instance of a mock function\n\t// object controlling the behavior of the method\n\t// DeleteUploadsStuckUploading.\n\tDeleteUploadsStuckUploadingFunc *DBStoreDeleteUploadsStuckUploadingFunc\n\t// DeleteUploadsWithoutRepositoryFunc is an instance of a mock function\n\t// object controlling the behavior of the method\n\t// DeleteUploadsWithoutRepository.\n\tDeleteUploadsWithoutRepositoryFunc *DBStoreDeleteUploadsWithoutRepositoryFunc\n\t// DirtyRepositoriesFunc is an instance of a mock function object\n\t// controlling the behavior of the method DirtyRepositories.\n\tDirtyRepositoriesFunc *DBStoreDirtyRepositoriesFunc\n\t// DoneFunc is an instance of a mock function object controlling the\n\t// behavior of the method Done.\n\tDoneFunc *DBStoreDoneFunc\n\t// GetUploadsFunc is an instance of a mock function object controlling\n\t// the behavior of the method GetUploads.\n\tGetUploadsFunc *DBStoreGetUploadsFunc\n\t// HandleFunc is an instance of a mock function object controlling the\n\t// behavior of the method Handle.\n\tHandleFunc *DBStoreHandleFunc\n\t// HardDeleteUploadByIDFunc is an instance of a mock function object\n\t// controlling the behavior of the method HardDeleteUploadByID.\n\tHardDeleteUploadByIDFunc *DBStoreHardDeleteUploadByIDFunc\n\t// RefreshCommitResolvabilityFunc is an instance of a mock function\n\t// object controlling the behavior of the method\n\t// RefreshCommitResolvability.\n\tRefreshCommitResolvabilityFunc *DBStoreRefreshCommitResolvabilityFunc\n\t// SoftDeleteOldUploadsFunc is an instance of a mock function object\n\t// controlling the behavior of the method SoftDeleteOldUploads.\n\tSoftDeleteOldUploadsFunc *DBStoreSoftDeleteOldUploadsFunc\n\t// StaleSourcedCommitsFunc is an instance of a mock function object\n\t// controlling the behavior of the method StaleSourcedCommits.\n\tStaleSourcedCommitsFunc *DBStoreStaleSourcedCommitsFunc\n\t// TransactFunc is an instance of a mock function object controlling the\n\t// behavior of the method Transact.\n\tTransactFunc *DBStoreTransactFunc\n}\n```\n\nMockDBStore is a mock implementation of the DBStore interface (from the package github.com/sourcegraph/sourcegraph/enterprise/cmd/worker/internal/codeintel/janitor) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#NewMockDBStore",
                    "documentation": {
                      "identifier": "NewMockDBStore",
                      "newPage": false,
                      "searchKey": "janitor.NewMockDBStore",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockDBStore() *MockDBStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockDBStore() *MockDBStore\n```\n\nNewMockDBStore creates a new mock of the DBStore interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#NewMockDBStoreFrom",
                    "documentation": {
                      "identifier": "NewMockDBStoreFrom",
                      "newPage": false,
                      "searchKey": "janitor.NewMockDBStoreFrom",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockDBStoreFrom(i DBStore) *MockDBStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockDBStoreFrom(i DBStore) *MockDBStore\n```\n\nNewMockDBStoreFrom creates a new mock of the MockDBStore interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#MockDBStore.DeleteIndexesWithoutRepository",
                    "documentation": {
                      "identifier": "MockDBStore.DeleteIndexesWithoutRepository",
                      "newPage": false,
                      "searchKey": "janitor.MockDBStore.DeleteIndexesWithoutRepository",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) DeleteIndexesWithoutRepository(v0 context.Context, v1 time.Time) (map[int]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) DeleteIndexesWithoutRepository(v0 context.Context, v1 time.Time) (map[int]int, error)\n```\n\nDeleteIndexesWithoutRepository delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#MockDBStore.DeleteOldIndexes",
                    "documentation": {
                      "identifier": "MockDBStore.DeleteOldIndexes",
                      "newPage": false,
                      "searchKey": "janitor.MockDBStore.DeleteOldIndexes",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) DeleteOldIndexes(v0 context.Context, v1 time.Duration, v2 time.Time) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) DeleteOldIndexes(v0 context.Context, v1 time.Duration, v2 time.Time) (int, error)\n```\n\nDeleteOldIndexes delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#MockDBStore.DeleteUploadsStuckUploading",
                    "documentation": {
                      "identifier": "MockDBStore.DeleteUploadsStuckUploading",
                      "newPage": false,
                      "searchKey": "janitor.MockDBStore.DeleteUploadsStuckUploading",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) DeleteUploadsStuckUploading(v0 context.Context, v1 time.Time) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) DeleteUploadsStuckUploading(v0 context.Context, v1 time.Time) (int, error)\n```\n\nDeleteUploadsStuckUploading delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#MockDBStore.DeleteUploadsWithoutRepository",
                    "documentation": {
                      "identifier": "MockDBStore.DeleteUploadsWithoutRepository",
                      "newPage": false,
                      "searchKey": "janitor.MockDBStore.DeleteUploadsWithoutRepository",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) DeleteUploadsWithoutRepository(v0 context.Context, v1 time.Time) (map[int]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) DeleteUploadsWithoutRepository(v0 context.Context, v1 time.Time) (map[int]int, error)\n```\n\nDeleteUploadsWithoutRepository delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#MockDBStore.DirtyRepositories",
                    "documentation": {
                      "identifier": "MockDBStore.DirtyRepositories",
                      "newPage": false,
                      "searchKey": "janitor.MockDBStore.DirtyRepositories",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) DirtyRepositories(v0 context.Context) (map[int]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) DirtyRepositories(v0 context.Context) (map[int]int, error)\n```\n\nDirtyRepositories delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#MockDBStore.Done",
                    "documentation": {
                      "identifier": "MockDBStore.Done",
                      "newPage": false,
                      "searchKey": "janitor.MockDBStore.Done",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) Done(v0 error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) Done(v0 error) error\n```\n\nDone delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#MockDBStore.GetUploads",
                    "documentation": {
                      "identifier": "MockDBStore.GetUploads",
                      "newPage": false,
                      "searchKey": "janitor.MockDBStore.GetUploads",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) GetUploads(v0 context.Context, v1 dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) GetUploads(v0 context.Context, v1 dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)\n```\n\nGetUploads delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#MockDBStore.Handle",
                    "documentation": {
                      "identifier": "MockDBStore.Handle",
                      "newPage": false,
                      "searchKey": "janitor.MockDBStore.Handle",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) Handle() *basestore.TransactableHandle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) Handle() *basestore.TransactableHandle\n```\n\nHandle delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#MockDBStore.HardDeleteUploadByID",
                    "documentation": {
                      "identifier": "MockDBStore.HardDeleteUploadByID",
                      "newPage": false,
                      "searchKey": "janitor.MockDBStore.HardDeleteUploadByID",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) HardDeleteUploadByID(v0 context.Context, v1 ...int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) HardDeleteUploadByID(v0 context.Context, v1 ...int) error\n```\n\nHardDeleteUploadByID delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#MockDBStore.RefreshCommitResolvability",
                    "documentation": {
                      "identifier": "MockDBStore.RefreshCommitResolvability",
                      "newPage": false,
                      "searchKey": "janitor.MockDBStore.RefreshCommitResolvability",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) RefreshCommitResolvability(v0 context.Context, v1 int, v2 string, v3 bool, v4 time.Time) (int, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) RefreshCommitResolvability(v0 context.Context, v1 int, v2 string, v3 bool, v4 time.Time) (int, int, error)\n```\n\nRefreshCommitResolvability delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#MockDBStore.SoftDeleteOldUploads",
                    "documentation": {
                      "identifier": "MockDBStore.SoftDeleteOldUploads",
                      "newPage": false,
                      "searchKey": "janitor.MockDBStore.SoftDeleteOldUploads",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) SoftDeleteOldUploads(v0 context.Context, v1 time.Duration, v2 time.Time) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) SoftDeleteOldUploads(v0 context.Context, v1 time.Duration, v2 time.Time) (int, error)\n```\n\nSoftDeleteOldUploads delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#MockDBStore.StaleSourcedCommits",
                    "documentation": {
                      "identifier": "MockDBStore.StaleSourcedCommits",
                      "newPage": false,
                      "searchKey": "janitor.MockDBStore.StaleSourcedCommits",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) StaleSourcedCommits(v0 context.Context, v1 time.Duration, v2 int, v3 time.Time) ([]dbstore.SourcedCommits, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) StaleSourcedCommits(v0 context.Context, v1 time.Duration, v2 int, v3 time.Time) ([]dbstore.SourcedCommits, error)\n```\n\nStaleSourcedCommits delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#MockDBStore.Transact",
                    "documentation": {
                      "identifier": "MockDBStore.Transact",
                      "newPage": false,
                      "searchKey": "janitor.MockDBStore.Transact",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) Transact(v0 context.Context) (DBStore, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) Transact(v0 context.Context) (DBStore, error)\n```\n\nTransact delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#MockLSIFStore",
              "documentation": {
                "identifier": "MockLSIFStore",
                "newPage": false,
                "searchKey": "janitor.MockLSIFStore",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockLSIFStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockLSIFStore struct {\n\t// ClearFunc is an instance of a mock function object controlling the\n\t// behavior of the method Clear.\n\tClearFunc *LSIFStoreClearFunc\n}\n```\n\nMockLSIFStore is a mock implementation of the LSIFStore interface (from the package github.com/sourcegraph/sourcegraph/enterprise/cmd/worker/internal/codeintel/janitor) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#NewMockLSIFStore",
                    "documentation": {
                      "identifier": "NewMockLSIFStore",
                      "newPage": false,
                      "searchKey": "janitor.NewMockLSIFStore",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockLSIFStore() *MockLSIFStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockLSIFStore() *MockLSIFStore\n```\n\nNewMockLSIFStore creates a new mock of the LSIFStore interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#NewMockLSIFStoreFrom",
                    "documentation": {
                      "identifier": "NewMockLSIFStoreFrom",
                      "newPage": false,
                      "searchKey": "janitor.NewMockLSIFStoreFrom",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockLSIFStoreFrom(i LSIFStore) *MockLSIFStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockLSIFStoreFrom(i LSIFStore) *MockLSIFStore\n```\n\nNewMockLSIFStoreFrom creates a new mock of the MockLSIFStore interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#MockLSIFStore.Clear",
                    "documentation": {
                      "identifier": "MockLSIFStore.Clear",
                      "newPage": false,
                      "searchKey": "janitor.MockLSIFStore.Clear",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockLSIFStore) Clear(v0 context.Context, v1 ...int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockLSIFStore) Clear(v0 context.Context, v1 ...int) error\n```\n\nClear delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#abandonedUploadJanitor",
              "documentation": {
                "identifier": "abandonedUploadJanitor",
                "newPage": false,
                "searchKey": "janitor.abandonedUploadJanitor",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type abandonedUploadJanitor struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype abandonedUploadJanitor struct {\n\tdbStore DBStore\n\tttl     time.Duration\n\tmetrics *metrics\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#abandonedUploadJanitor.Handle",
                    "documentation": {
                      "identifier": "abandonedUploadJanitor.Handle",
                      "newPage": false,
                      "searchKey": "janitor.abandonedUploadJanitor.Handle",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *abandonedUploadJanitor) Handle(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *abandonedUploadJanitor) Handle(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#abandonedUploadJanitor.HandleError",
                    "documentation": {
                      "identifier": "abandonedUploadJanitor.HandleError",
                      "newPage": false,
                      "searchKey": "janitor.abandonedUploadJanitor.HandleError",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *abandonedUploadJanitor) HandleError(err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *abandonedUploadJanitor) HandleError(err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#deletedRepositoryJanitor",
              "documentation": {
                "identifier": "deletedRepositoryJanitor",
                "newPage": false,
                "searchKey": "janitor.deletedRepositoryJanitor",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type deletedRepositoryJanitor struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype deletedRepositoryJanitor struct {\n\tdbStore DBStore\n\tmetrics *metrics\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#deletedRepositoryJanitor.Handle",
                    "documentation": {
                      "identifier": "deletedRepositoryJanitor.Handle",
                      "newPage": false,
                      "searchKey": "janitor.deletedRepositoryJanitor.Handle",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *deletedRepositoryJanitor) Handle(ctx context.Context) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *deletedRepositoryJanitor) Handle(ctx context.Context) (err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#deletedRepositoryJanitor.HandleError",
                    "documentation": {
                      "identifier": "deletedRepositoryJanitor.HandleError",
                      "newPage": false,
                      "searchKey": "janitor.deletedRepositoryJanitor.HandleError",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *deletedRepositoryJanitor) HandleError(err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *deletedRepositoryJanitor) HandleError(err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#hardDeleter",
              "documentation": {
                "identifier": "hardDeleter",
                "newPage": false,
                "searchKey": "janitor.hardDeleter",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type hardDeleter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype hardDeleter struct {\n\tdbStore   DBStore\n\tlsifStore LSIFStore\n\tmetrics   *metrics\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#hardDeleter.Handle",
                    "documentation": {
                      "identifier": "hardDeleter.Handle",
                      "newPage": false,
                      "searchKey": "janitor.hardDeleter.Handle",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *hardDeleter) Handle(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *hardDeleter) Handle(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#hardDeleter.HandleError",
                    "documentation": {
                      "identifier": "hardDeleter.HandleError",
                      "newPage": false,
                      "searchKey": "janitor.hardDeleter.HandleError",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *hardDeleter) HandleError(err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *hardDeleter) HandleError(err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#hardDeleter.deleteBatch",
                    "documentation": {
                      "identifier": "hardDeleter.deleteBatch",
                      "newPage": false,
                      "searchKey": "janitor.hardDeleter.deleteBatch",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *hardDeleter) deleteBatch(ctx context.Context, ids []int) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *hardDeleter) deleteBatch(ctx context.Context, ids []int) (err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#metrics",
              "documentation": {
                "identifier": "metrics",
                "newPage": false,
                "searchKey": "janitor.metrics",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type metrics struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype metrics struct {\n\tnumUploadRecordsRemoved prometheus.Counter\n\tnumIndexRecordsRemoved  prometheus.Counter\n\tnumUploadsPurged        prometheus.Counter\n\tnumUploadResets         prometheus.Counter\n\tnumUploadResetFailures  prometheus.Counter\n\tnumIndexResets          prometheus.Counter\n\tnumIndexResetFailures   prometheus.Counter\n\tnumErrors               prometheus.Counter\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#newMetrics",
                    "documentation": {
                      "identifier": "newMetrics",
                      "newPage": false,
                      "searchKey": "janitor.newMetrics",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newMetrics(observationContext *observation.Context) *metrics"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newMetrics(observationContext *observation.Context) *metrics\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#recordCount",
              "documentation": {
                "identifier": "recordCount",
                "newPage": false,
                "searchKey": "janitor.recordCount",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type recordCount struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype recordCount struct {\n\trepoID       int\n\tuploadsCount int\n\tindexesCount int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#recordExpirer",
              "documentation": {
                "identifier": "recordExpirer",
                "newPage": false,
                "searchKey": "janitor.recordExpirer",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type recordExpirer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype recordExpirer struct {\n\tdbStore DBStore\n\tttl     time.Duration\n\tmetrics *metrics\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#recordExpirer.Handle",
                    "documentation": {
                      "identifier": "recordExpirer.Handle",
                      "newPage": false,
                      "searchKey": "janitor.recordExpirer.Handle",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *recordExpirer) Handle(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *recordExpirer) Handle(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#recordExpirer.HandleError",
                    "documentation": {
                      "identifier": "recordExpirer.HandleError",
                      "newPage": false,
                      "searchKey": "janitor.recordExpirer.HandleError",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *recordExpirer) HandleError(err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *recordExpirer) HandleError(err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#refreshCommitResolvabilityFuncInvocation",
              "documentation": {
                "identifier": "refreshCommitResolvabilityFuncInvocation",
                "newPage": false,
                "searchKey": "janitor.refreshCommitResolvabilityFuncInvocation",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type refreshCommitResolvabilityFuncInvocation struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype refreshCommitResolvabilityFuncInvocation struct {\n\tRepositoryID int\n\tCommit       string\n\tDelete       bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#unknownCommitJanitor",
              "documentation": {
                "identifier": "unknownCommitJanitor",
                "newPage": false,
                "searchKey": "janitor.unknownCommitJanitor",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type unknownCommitJanitor struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype unknownCommitJanitor struct {\n\tdbStore                   DBStore\n\tmetrics                   *metrics\n\tminimumTimeSinceLastCheck time.Duration\n\tbatchSize                 int\n\tclock                     glock.Clock\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#newJanitor",
                    "documentation": {
                      "identifier": "newJanitor",
                      "newPage": false,
                      "searchKey": "janitor.newJanitor",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newJanitor(dbStore DBStore,..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newJanitor(\n\tdbStore DBStore,\n\tminimumTimeSinceLastCheck time.Duration,\n\tbatchSize int,\n\tmetrics *metrics,\n\tclock glock.Clock,\n) *unknownCommitJanitor\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#unknownCommitJanitor.Handle",
                    "documentation": {
                      "identifier": "unknownCommitJanitor.Handle",
                      "newPage": false,
                      "searchKey": "janitor.unknownCommitJanitor.Handle",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *unknownCommitJanitor) Handle(ctx context.Context) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *unknownCommitJanitor) Handle(ctx context.Context) (err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#unknownCommitJanitor.HandleError",
                    "documentation": {
                      "identifier": "unknownCommitJanitor.HandleError",
                      "newPage": false,
                      "searchKey": "janitor.unknownCommitJanitor.HandleError",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *unknownCommitJanitor) HandleError(err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *unknownCommitJanitor) HandleError(err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#unknownCommitJanitor.handleCommit",
                    "documentation": {
                      "identifier": "unknownCommitJanitor.handleCommit",
                      "newPage": false,
                      "searchKey": "janitor.unknownCommitJanitor.handleCommit",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *unknownCommitJanitor) handleCommit(ctx context.Context, tx DBStore, repositoryID int, repositoryName, commit string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *unknownCommitJanitor) handleCommit(ctx context.Context, tx DBStore, repositoryID int, repositoryName, commit string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#unknownCommitJanitor.handleSourcedCommits",
                    "documentation": {
                      "identifier": "unknownCommitJanitor.handleSourcedCommits",
                      "newPage": false,
                      "searchKey": "janitor.unknownCommitJanitor.handleSourcedCommits",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *unknownCommitJanitor) handleSourcedCommits(ctx context.Context, tx DBStore, sourcedCommits dbstore.SourcedCommits) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *unknownCommitJanitor) handleSourcedCommits(ctx context.Context, tx DBStore, sourcedCommits dbstore.SourcedCommits) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#NewAbandonedUploadJanitor",
              "documentation": {
                "identifier": "NewAbandonedUploadJanitor",
                "newPage": false,
                "searchKey": "janitor.NewAbandonedUploadJanitor",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewAbandonedUploadJanitor(dbStore DBStore, ttl, interval time.Duration, metrics *metrics) goroutine.BackgroundRoutine"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewAbandonedUploadJanitor(dbStore DBStore, ttl, interval time.Duration, metrics *metrics) goroutine.BackgroundRoutine\n```\n\nNewAbandonedUploadJanitor returns a background routine that periodically removes upload records which have not left the uploading state within the given TTL. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#NewDeletedRepositoryJanitor",
              "documentation": {
                "identifier": "NewDeletedRepositoryJanitor",
                "newPage": false,
                "searchKey": "janitor.NewDeletedRepositoryJanitor",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewDeletedRepositoryJanitor(dbStore DBStore, interval time.Duration, metrics *metrics) goroutine.BackgroundRoutine"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewDeletedRepositoryJanitor(dbStore DBStore, interval time.Duration, metrics *metrics) goroutine.BackgroundRoutine\n```\n\nNewDeletedRepositoryJanitor returns a background routine that periodically deletes upload and index records for repositories that have been soft-deleted. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#NewHardDeleter",
              "documentation": {
                "identifier": "NewHardDeleter",
                "newPage": false,
                "searchKey": "janitor.NewHardDeleter",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewHardDeleter(dbStore DBStore, lsifStore LSIFStore, interval time.Duration, metrics *metrics) goroutine.BackgroundRoutine"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewHardDeleter(dbStore DBStore, lsifStore LSIFStore, interval time.Duration, metrics *metrics) goroutine.BackgroundRoutine\n```\n\nNewHardDeleter returns a background routine that periodically hard-deletes all soft-deleted upload records. Each upload record marked as soft-deleted in the database will have its associated data in the code intel deleted, and the upload record hard-deleted. \n\nThis cleanup routine subsumes an old routine that would remove any records which did not have an associated upload record. Doing a soft-delete and a transactional cleanup routine instead ensures we delete unreachable data as soon as it's no longer referenceable. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#NewIndexResetter",
              "documentation": {
                "identifier": "NewIndexResetter",
                "newPage": false,
                "searchKey": "janitor.NewIndexResetter",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewIndexResetter(s dbworkerstore.Store, interval time.Duration, metrics *metrics, observationContext *observation.Context) *dbworker.Resetter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewIndexResetter(s dbworkerstore.Store, interval time.Duration, metrics *metrics, observationContext *observation.Context) *dbworker.Resetter\n```\n\nNewIndexResetter returns a background routine that periodically resets index records that are marked as being processed but are no longer held by any Postgres transaction. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#NewRecordExpirer",
              "documentation": {
                "identifier": "NewRecordExpirer",
                "newPage": false,
                "searchKey": "janitor.NewRecordExpirer",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewRecordExpirer(dbStore DBStore, ttl, interval time.Duration, metrics *metrics) goroutine.BackgroundRoutine"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewRecordExpirer(dbStore DBStore, ttl, interval time.Duration, metrics *metrics) goroutine.BackgroundRoutine\n```\n\nNewRecordExpirer returns a background routine that periodically removes upload and index records that are older than the given TTL. Upload records which have valid LSIF data (not just a historic upload failure record) will only be deleted if it is not visible at the tip of its repository's default branch. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#NewUnknownCommitJanitor",
              "documentation": {
                "identifier": "NewUnknownCommitJanitor",
                "newPage": false,
                "searchKey": "janitor.NewUnknownCommitJanitor",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewUnknownCommitJanitor(dbStore DBStore,..."
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewUnknownCommitJanitor(\n\tdbStore DBStore,\n\tminimumTimeSinceLastCheck time.Duration,\n\tbatchSize int,\n\tinterval time.Duration,\n\tmetrics *metrics,\n) goroutine.BackgroundRoutine\n```\n\nNewUnknownCommitJanitor returns a background routine that periodically resolves each commit known by code intelligence data via gitserver to ensure that it has not been force-pushed away or pruned from the gitserver clone. \n\nNote that we're rather cautious about the order that we process the batch. We do this so that two frontends performing the same migration will not try to update two of the same records in the opposite order. If we rely on map iteration order we tend to see a lot of Postgres deadlock conditions and very slow progress. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#NewUploadResetter",
              "documentation": {
                "identifier": "NewUploadResetter",
                "newPage": false,
                "searchKey": "janitor.NewUploadResetter",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewUploadResetter(s dbworkerstore.Store, interval time.Duration, metrics *metrics, observationContext *observation.Context) *dbworker.Resetter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewUploadResetter(s dbworkerstore.Store, interval time.Duration, metrics *metrics, observationContext *observation.Context) *dbworker.Resetter\n```\n\nNewUploadResetter returns a background routine that periodically resets upload records that are marked as being processed but are no longer held by any Postgres transaction. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#TestUnknownCommitsJanitor",
              "documentation": {
                "identifier": "TestUnknownCommitsJanitor",
                "newPage": false,
                "searchKey": "janitor.TestUnknownCommitsJanitor",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnknownCommitsJanitor(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnknownCommitsJanitor(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#TestUnknownCommitsJanitorUnknownCommit",
              "documentation": {
                "identifier": "TestUnknownCommitsJanitorUnknownCommit",
                "newPage": false,
                "searchKey": "janitor.TestUnknownCommitsJanitorUnknownCommit",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnknownCommitsJanitorUnknownCommit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnknownCommitsJanitorUnknownCommit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#TestUnknownCommitsJanitorUnknownRepository",
              "documentation": {
                "identifier": "TestUnknownCommitsJanitorUnknownRepository",
                "newPage": false,
                "searchKey": "janitor.TestUnknownCommitsJanitorUnknownRepository",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnknownCommitsJanitorUnknownRepository(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnknownCommitsJanitorUnknownRepository(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#gatherCounts",
              "documentation": {
                "identifier": "gatherCounts",
                "newPage": false,
                "searchKey": "janitor.gatherCounts",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func gatherCounts(uploadsCounts, indexesCounts map[int]int) []recordCount"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc gatherCounts(uploadsCounts, indexesCounts map[int]int) []recordCount\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#isRepositoryNotFound",
              "documentation": {
                "identifier": "isRepositoryNotFound",
                "newPage": false,
                "searchKey": "janitor.isRepositoryNotFound",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isRepositoryNotFound(err error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isRepositoryNotFound(err error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#isRevisionNotFound",
              "documentation": {
                "identifier": "isRevisionNotFound",
                "newPage": false,
                "searchKey": "janitor.isRevisionNotFound",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isRevisionNotFound(err error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isRevisionNotFound(err error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#testUnknownCommitsJanitor",
              "documentation": {
                "identifier": "testUnknownCommitsJanitor",
                "newPage": false,
                "searchKey": "janitor.testUnknownCommitsJanitor",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testUnknownCommitsJanitor(t *testing.T, resolveRevisionFunc func(commit string) error, expectedCalls []refreshCommitResolvabilityFuncInvocation)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testUnknownCommitsJanitor(t *testing.T, resolveRevisionFunc func(commit string) error, expectedCalls []refreshCommitResolvabilityFuncInvocation)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/janitor#uploadIDs",
              "documentation": {
                "identifier": "uploadIDs",
                "newPage": false,
                "searchKey": "janitor.uploadIDs",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func uploadIDs(uploads []store.Upload) []int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc uploadIDs(uploads []store.Upload) []int\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
