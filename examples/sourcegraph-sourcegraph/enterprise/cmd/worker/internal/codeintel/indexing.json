{
  "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing",
  "documentation": {
    "identifier": "indexing",
    "newPage": true,
    "searchKey": "enterprise/cmd/worker/internal/codeintel/indexing",
    "tags": [
      "package",
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package indexing"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#defaultRepositoriesQueuedPerSecond",
              "documentation": {
                "identifier": "defaultRepositoriesQueuedPerSecond",
                "newPage": false,
                "searchKey": "indexing.defaultRepositoriesQueuedPerSecond",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const defaultRepositoriesQueuedPerSecond"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst defaultRepositoriesQueuedPerSecond = 25\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#dependencyIndexingRepositoryIDs",
              "documentation": {
                "identifier": "dependencyIndexingRepositoryIDs",
                "newPage": false,
                "searchKey": "indexing.dependencyIndexingRepositoryIDs",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var dependencyIndexingRepositoryIDs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dependencyIndexingRepositoryIDs = []int{\n\t35703861,\n\t36146693,\n\t36809250,\n\t38967070,\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#enabledRepoGroupNames",
              "documentation": {
                "identifier": "enabledRepoGroupNames",
                "newPage": false,
                "searchKey": "indexing.enabledRepoGroupNames",
                "tags": [
                  "variable",
                  "array",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var enabledRepoGroupNames"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar enabledRepoGroupNames = []string{\"cncf\"}\n```\n\nUsed to filter the valid repo group names \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#indexSchedulerEnabled",
              "documentation": {
                "identifier": "indexSchedulerEnabled",
                "newPage": false,
                "searchKey": "indexing.indexSchedulerEnabled",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var indexSchedulerEnabled"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar indexSchedulerEnabled = conf.CodeIntelAutoIndexingEnabled\n```\n\nFor mocking in tests \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#once",
              "documentation": {
                "identifier": "once",
                "newPage": false,
                "searchKey": "indexing.once",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var once"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar once sync.Once\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#singletonOperations",
              "documentation": {
                "identifier": "singletonOperations",
                "newPage": false,
                "searchKey": "indexing.singletonOperations",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var singletonOperations"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar singletonOperations *operations\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStore",
              "documentation": {
                "identifier": "DBStore",
                "newPage": false,
                "searchKey": "indexing.DBStore",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStore interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStore interface {\n\tWith(other basestore.ShareableStore) DBStore\n\tGetRepositoriesWithIndexConfiguration(ctx context.Context) ([]int, error)\n\tGetAutoindexDisabledRepositories(ctx context.Context) ([]int, error)\n\tGetUploads(ctx context.Context, opts dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)\n\tGetUploadByID(ctx context.Context, id int) (dbstore.Upload, bool, error)\n\tReferencesForUpload(ctx context.Context, uploadID int) (dbstore.PackageReferenceScanner, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetAutoindexDisabledRepositoriesFunc",
              "documentation": {
                "identifier": "DBStoreGetAutoindexDisabledRepositoriesFunc",
                "newPage": false,
                "searchKey": "indexing.DBStoreGetAutoindexDisabledRepositoriesFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetAutoindexDisabledRepositoriesFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetAutoindexDisabledRepositoriesFunc struct {\n\tdefaultHook func(context.Context) ([]int, error)\n\thooks       []func(context.Context) ([]int, error)\n\thistory     []DBStoreGetAutoindexDisabledRepositoriesFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreGetAutoindexDisabledRepositoriesFunc describes the behavior when the GetAutoindexDisabledRepositories method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetAutoindexDisabledRepositoriesFunc.History",
                    "documentation": {
                      "identifier": "DBStoreGetAutoindexDisabledRepositoriesFunc.History",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetAutoindexDisabledRepositoriesFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetAutoindexDisabledRepositoriesFunc) History() []DBStoreGetAutoindexDisabledRepositoriesFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetAutoindexDisabledRepositoriesFunc) History() []DBStoreGetAutoindexDisabledRepositoriesFuncCall\n```\n\nHistory returns a sequence of DBStoreGetAutoindexDisabledRepositoriesFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetAutoindexDisabledRepositoriesFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreGetAutoindexDisabledRepositoriesFunc.PushHook",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetAutoindexDisabledRepositoriesFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetAutoindexDisabledRepositoriesFunc) PushHook(hook func(context.Context) ([]int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetAutoindexDisabledRepositoriesFunc) PushHook(hook func(context.Context) ([]int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetAutoindexDisabledRepositories method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetAutoindexDisabledRepositoriesFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreGetAutoindexDisabledRepositoriesFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetAutoindexDisabledRepositoriesFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetAutoindexDisabledRepositoriesFunc) PushReturn(r0 []int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetAutoindexDisabledRepositoriesFunc) PushReturn(r0 []int, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetAutoindexDisabledRepositoriesFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreGetAutoindexDisabledRepositoriesFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetAutoindexDisabledRepositoriesFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetAutoindexDisabledRepositoriesFunc) SetDefaultHook(hook func(context.Context) ([]int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetAutoindexDisabledRepositoriesFunc) SetDefaultHook(hook func(context.Context) ([]int, error))\n```\n\nSetDefaultHook sets function that is called when the GetAutoindexDisabledRepositories method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetAutoindexDisabledRepositoriesFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreGetAutoindexDisabledRepositoriesFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetAutoindexDisabledRepositoriesFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetAutoindexDisabledRepositoriesFunc) SetDefaultReturn(r0 []int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetAutoindexDisabledRepositoriesFunc) SetDefaultReturn(r0 []int, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetAutoindexDisabledRepositoriesFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreGetAutoindexDisabledRepositoriesFunc.appendCall",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetAutoindexDisabledRepositoriesFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetAutoindexDisabledRepositoriesFunc) appendCall(r0 DBStoreGetAutoindexDisabledRepositoriesFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetAutoindexDisabledRepositoriesFunc) appendCall(r0 DBStoreGetAutoindexDisabledRepositoriesFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetAutoindexDisabledRepositoriesFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreGetAutoindexDisabledRepositoriesFunc.nextHook",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetAutoindexDisabledRepositoriesFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetAutoindexDisabledRepositoriesFunc) nextHook() func(context.Context) ([]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetAutoindexDisabledRepositoriesFunc) nextHook() func(context.Context) ([]int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetAutoindexDisabledRepositoriesFuncCall",
              "documentation": {
                "identifier": "DBStoreGetAutoindexDisabledRepositoriesFuncCall",
                "newPage": false,
                "searchKey": "indexing.DBStoreGetAutoindexDisabledRepositoriesFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetAutoindexDisabledRepositoriesFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetAutoindexDisabledRepositoriesFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []int\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreGetAutoindexDisabledRepositoriesFuncCall is an object that describes an invocation of method GetAutoindexDisabledRepositories on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetAutoindexDisabledRepositoriesFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreGetAutoindexDisabledRepositoriesFuncCall.Args",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetAutoindexDisabledRepositoriesFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetAutoindexDisabledRepositoriesFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetAutoindexDisabledRepositoriesFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetAutoindexDisabledRepositoriesFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreGetAutoindexDisabledRepositoriesFuncCall.Results",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetAutoindexDisabledRepositoriesFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetAutoindexDisabledRepositoriesFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetAutoindexDisabledRepositoriesFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetRepositoriesWithIndexConfigurationFunc",
              "documentation": {
                "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFunc",
                "newPage": false,
                "searchKey": "indexing.DBStoreGetRepositoriesWithIndexConfigurationFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetRepositoriesWithIndexConfigurationFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetRepositoriesWithIndexConfigurationFunc struct {\n\tdefaultHook func(context.Context) ([]int, error)\n\thooks       []func(context.Context) ([]int, error)\n\thistory     []DBStoreGetRepositoriesWithIndexConfigurationFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreGetRepositoriesWithIndexConfigurationFunc describes the behavior when the GetRepositoriesWithIndexConfiguration method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetRepositoriesWithIndexConfigurationFunc.History",
                    "documentation": {
                      "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFunc.History",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetRepositoriesWithIndexConfigurationFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) History() []DBStoreGetRepositoriesWithIndexConfigurationFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) History() []DBStoreGetRepositoriesWithIndexConfigurationFuncCall\n```\n\nHistory returns a sequence of DBStoreGetRepositoriesWithIndexConfigurationFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetRepositoriesWithIndexConfigurationFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFunc.PushHook",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetRepositoriesWithIndexConfigurationFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) PushHook(hook func(context.Context) ([]int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) PushHook(hook func(context.Context) ([]int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetRepositoriesWithIndexConfiguration method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetRepositoriesWithIndexConfigurationFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetRepositoriesWithIndexConfigurationFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) PushReturn(r0 []int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) PushReturn(r0 []int, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetRepositoriesWithIndexConfigurationFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetRepositoriesWithIndexConfigurationFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) SetDefaultHook(hook func(context.Context) ([]int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) SetDefaultHook(hook func(context.Context) ([]int, error))\n```\n\nSetDefaultHook sets function that is called when the GetRepositoriesWithIndexConfiguration method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetRepositoriesWithIndexConfigurationFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetRepositoriesWithIndexConfigurationFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) SetDefaultReturn(r0 []int, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) SetDefaultReturn(r0 []int, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetRepositoriesWithIndexConfigurationFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFunc.appendCall",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetRepositoriesWithIndexConfigurationFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) appendCall(r0 DBStoreGetRepositoriesWithIndexConfigurationFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) appendCall(r0 DBStoreGetRepositoriesWithIndexConfigurationFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetRepositoriesWithIndexConfigurationFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFunc.nextHook",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetRepositoriesWithIndexConfigurationFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) nextHook() func(context.Context) ([]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetRepositoriesWithIndexConfigurationFunc) nextHook() func(context.Context) ([]int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetRepositoriesWithIndexConfigurationFuncCall",
              "documentation": {
                "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFuncCall",
                "newPage": false,
                "searchKey": "indexing.DBStoreGetRepositoriesWithIndexConfigurationFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetRepositoriesWithIndexConfigurationFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetRepositoriesWithIndexConfigurationFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []int\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreGetRepositoriesWithIndexConfigurationFuncCall is an object that describes an invocation of method GetRepositoriesWithIndexConfiguration on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetRepositoriesWithIndexConfigurationFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFuncCall.Args",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetRepositoriesWithIndexConfigurationFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetRepositoriesWithIndexConfigurationFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetRepositoriesWithIndexConfigurationFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetRepositoriesWithIndexConfigurationFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreGetRepositoriesWithIndexConfigurationFuncCall.Results",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetRepositoriesWithIndexConfigurationFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetRepositoriesWithIndexConfigurationFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetRepositoriesWithIndexConfigurationFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadByIDFunc",
              "documentation": {
                "identifier": "DBStoreGetUploadByIDFunc",
                "newPage": false,
                "searchKey": "indexing.DBStoreGetUploadByIDFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetUploadByIDFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetUploadByIDFunc struct {\n\tdefaultHook func(context.Context, int) (dbstore.Upload, bool, error)\n\thooks       []func(context.Context, int) (dbstore.Upload, bool, error)\n\thistory     []DBStoreGetUploadByIDFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreGetUploadByIDFunc describes the behavior when the GetUploadByID method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadByIDFunc.History",
                    "documentation": {
                      "identifier": "DBStoreGetUploadByIDFunc.History",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetUploadByIDFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadByIDFunc) History() []DBStoreGetUploadByIDFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadByIDFunc) History() []DBStoreGetUploadByIDFuncCall\n```\n\nHistory returns a sequence of DBStoreGetUploadByIDFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadByIDFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreGetUploadByIDFunc.PushHook",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetUploadByIDFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadByIDFunc) PushHook(hook func(context.Context, int) (dbstore.Upload, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadByIDFunc) PushHook(hook func(context.Context, int) (dbstore.Upload, bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetUploadByID method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadByIDFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreGetUploadByIDFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetUploadByIDFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadByIDFunc) PushReturn(r0 dbstore.Upload, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadByIDFunc) PushReturn(r0 dbstore.Upload, r1 bool, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadByIDFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreGetUploadByIDFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetUploadByIDFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.Upload, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.Upload, bool, error))\n```\n\nSetDefaultHook sets function that is called when the GetUploadByID method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadByIDFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreGetUploadByIDFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetUploadByIDFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadByIDFunc) SetDefaultReturn(r0 dbstore.Upload, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadByIDFunc) SetDefaultReturn(r0 dbstore.Upload, r1 bool, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadByIDFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreGetUploadByIDFunc.appendCall",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetUploadByIDFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadByIDFunc) appendCall(r0 DBStoreGetUploadByIDFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadByIDFunc) appendCall(r0 DBStoreGetUploadByIDFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadByIDFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreGetUploadByIDFunc.nextHook",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetUploadByIDFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadByIDFunc) nextHook() func(context.Context, int) (dbstore.Upload, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadByIDFunc) nextHook() func(context.Context, int) (dbstore.Upload, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadByIDFuncCall",
              "documentation": {
                "identifier": "DBStoreGetUploadByIDFuncCall",
                "newPage": false,
                "searchKey": "indexing.DBStoreGetUploadByIDFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetUploadByIDFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetUploadByIDFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 dbstore.Upload\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 bool\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nDBStoreGetUploadByIDFuncCall is an object that describes an invocation of method GetUploadByID on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadByIDFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreGetUploadByIDFuncCall.Args",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetUploadByIDFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetUploadByIDFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetUploadByIDFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadByIDFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreGetUploadByIDFuncCall.Results",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetUploadByIDFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetUploadByIDFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetUploadByIDFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadsFunc",
              "documentation": {
                "identifier": "DBStoreGetUploadsFunc",
                "newPage": false,
                "searchKey": "indexing.DBStoreGetUploadsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetUploadsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetUploadsFunc struct {\n\tdefaultHook func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)\n\thooks       []func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)\n\thistory     []DBStoreGetUploadsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreGetUploadsFunc describes the behavior when the GetUploads method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadsFunc.History",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.History",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetUploadsFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) History() []DBStoreGetUploadsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) History() []DBStoreGetUploadsFuncCall\n```\n\nHistory returns a sequence of DBStoreGetUploadsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadsFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetUploadsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) PushHook(hook func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) PushHook(hook func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetUploads method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadsFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetUploadsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) PushReturn(r0 []dbstore.Upload, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) PushReturn(r0 []dbstore.Upload, r1 int, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetUploadsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) SetDefaultHook(hook func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) SetDefaultHook(hook func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error))\n```\n\nSetDefaultHook sets function that is called when the GetUploads method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetUploadsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) SetDefaultReturn(r0 []dbstore.Upload, r1 int, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) SetDefaultReturn(r0 []dbstore.Upload, r1 int, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadsFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetUploadsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) appendCall(r0 DBStoreGetUploadsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) appendCall(r0 DBStoreGetUploadsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadsFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetUploadsFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreGetUploadsFunc) nextHook() func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreGetUploadsFunc) nextHook() func(context.Context, dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadsFuncCall",
              "documentation": {
                "identifier": "DBStoreGetUploadsFuncCall",
                "newPage": false,
                "searchKey": "indexing.DBStoreGetUploadsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreGetUploadsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreGetUploadsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 dbstore.GetUploadsOptions\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []dbstore.Upload\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 int\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nDBStoreGetUploadsFuncCall is an object that describes an invocation of method GetUploads on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadsFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetUploadsFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetUploadsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetUploadsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreGetUploadsFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreGetUploadsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreGetUploadsFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreGetUploadsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreGetUploadsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreReferencesForUploadFunc",
              "documentation": {
                "identifier": "DBStoreReferencesForUploadFunc",
                "newPage": false,
                "searchKey": "indexing.DBStoreReferencesForUploadFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreReferencesForUploadFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreReferencesForUploadFunc struct {\n\tdefaultHook func(context.Context, int) (dbstore.PackageReferenceScanner, error)\n\thooks       []func(context.Context, int) (dbstore.PackageReferenceScanner, error)\n\thistory     []DBStoreReferencesForUploadFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreReferencesForUploadFunc describes the behavior when the ReferencesForUpload method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreReferencesForUploadFunc.History",
                    "documentation": {
                      "identifier": "DBStoreReferencesForUploadFunc.History",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreReferencesForUploadFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreReferencesForUploadFunc) History() []DBStoreReferencesForUploadFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreReferencesForUploadFunc) History() []DBStoreReferencesForUploadFuncCall\n```\n\nHistory returns a sequence of DBStoreReferencesForUploadFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreReferencesForUploadFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreReferencesForUploadFunc.PushHook",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreReferencesForUploadFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreReferencesForUploadFunc) PushHook(hook func(context.Context, int) (dbstore.PackageReferenceScanner, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreReferencesForUploadFunc) PushHook(hook func(context.Context, int) (dbstore.PackageReferenceScanner, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the ReferencesForUpload method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreReferencesForUploadFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreReferencesForUploadFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreReferencesForUploadFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreReferencesForUploadFunc) PushReturn(r0 dbstore.PackageReferenceScanner, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreReferencesForUploadFunc) PushReturn(r0 dbstore.PackageReferenceScanner, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreReferencesForUploadFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreReferencesForUploadFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreReferencesForUploadFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreReferencesForUploadFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.PackageReferenceScanner, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreReferencesForUploadFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.PackageReferenceScanner, error))\n```\n\nSetDefaultHook sets function that is called when the ReferencesForUpload method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreReferencesForUploadFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreReferencesForUploadFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreReferencesForUploadFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreReferencesForUploadFunc) SetDefaultReturn(r0 dbstore.PackageReferenceScanner, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreReferencesForUploadFunc) SetDefaultReturn(r0 dbstore.PackageReferenceScanner, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreReferencesForUploadFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreReferencesForUploadFunc.appendCall",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreReferencesForUploadFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreReferencesForUploadFunc) appendCall(r0 DBStoreReferencesForUploadFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreReferencesForUploadFunc) appendCall(r0 DBStoreReferencesForUploadFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreReferencesForUploadFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreReferencesForUploadFunc.nextHook",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreReferencesForUploadFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreReferencesForUploadFunc) nextHook() func(context.Context, int) (dbstore.PackageReferenceScanner, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreReferencesForUploadFunc) nextHook() func(context.Context, int) (dbstore.PackageReferenceScanner, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreReferencesForUploadFuncCall",
              "documentation": {
                "identifier": "DBStoreReferencesForUploadFuncCall",
                "newPage": false,
                "searchKey": "indexing.DBStoreReferencesForUploadFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreReferencesForUploadFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreReferencesForUploadFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 dbstore.PackageReferenceScanner\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nDBStoreReferencesForUploadFuncCall is an object that describes an invocation of method ReferencesForUpload on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreReferencesForUploadFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreReferencesForUploadFuncCall.Args",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreReferencesForUploadFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreReferencesForUploadFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreReferencesForUploadFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreReferencesForUploadFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreReferencesForUploadFuncCall.Results",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreReferencesForUploadFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreReferencesForUploadFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreReferencesForUploadFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreShim",
              "documentation": {
                "identifier": "DBStoreShim",
                "newPage": false,
                "searchKey": "indexing.DBStoreShim",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreShim struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreShim struct {\n\t*dbstore.Store\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreShim.With",
                    "documentation": {
                      "identifier": "DBStoreShim.With",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreShim.With",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *DBStoreShim) With(other basestore.ShareableStore) DBStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *DBStoreShim) With(other basestore.ShareableStore) DBStore\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreWithFunc",
              "documentation": {
                "identifier": "DBStoreWithFunc",
                "newPage": false,
                "searchKey": "indexing.DBStoreWithFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreWithFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreWithFunc struct {\n\tdefaultHook func(basestore.ShareableStore) DBStore\n\thooks       []func(basestore.ShareableStore) DBStore\n\thistory     []DBStoreWithFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nDBStoreWithFunc describes the behavior when the With method of the parent MockDBStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreWithFunc.History",
                    "documentation": {
                      "identifier": "DBStoreWithFunc.History",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreWithFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreWithFunc) History() []DBStoreWithFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreWithFunc) History() []DBStoreWithFuncCall\n```\n\nHistory returns a sequence of DBStoreWithFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreWithFunc.PushHook",
                    "documentation": {
                      "identifier": "DBStoreWithFunc.PushHook",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreWithFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreWithFunc) PushHook(hook func(basestore.ShareableStore) DBStore)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreWithFunc) PushHook(hook func(basestore.ShareableStore) DBStore)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the With method of the parent MockDBStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreWithFunc.PushReturn",
                    "documentation": {
                      "identifier": "DBStoreWithFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreWithFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreWithFunc) PushReturn(r0 DBStore)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreWithFunc) PushReturn(r0 DBStore)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreWithFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "DBStoreWithFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreWithFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) DBStore)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) DBStore)\n```\n\nSetDefaultHook sets function that is called when the With method of the parent MockDBStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreWithFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "DBStoreWithFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreWithFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreWithFunc) SetDefaultReturn(r0 DBStore)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreWithFunc) SetDefaultReturn(r0 DBStore)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreWithFunc.appendCall",
                    "documentation": {
                      "identifier": "DBStoreWithFunc.appendCall",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreWithFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreWithFunc) appendCall(r0 DBStoreWithFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreWithFunc) appendCall(r0 DBStoreWithFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreWithFunc.nextHook",
                    "documentation": {
                      "identifier": "DBStoreWithFunc.nextHook",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreWithFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *DBStoreWithFunc) nextHook() func(basestore.ShareableStore) DBStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *DBStoreWithFunc) nextHook() func(basestore.ShareableStore) DBStore\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreWithFuncCall",
              "documentation": {
                "identifier": "DBStoreWithFuncCall",
                "newPage": false,
                "searchKey": "indexing.DBStoreWithFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStoreWithFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStoreWithFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 basestore.ShareableStore\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 DBStore\n}\n```\n\nDBStoreWithFuncCall is an object that describes an invocation of method With on an instance of MockDBStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreWithFuncCall.Args",
                    "documentation": {
                      "identifier": "DBStoreWithFuncCall.Args",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreWithFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreWithFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreWithFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#DBStoreWithFuncCall.Results",
                    "documentation": {
                      "identifier": "DBStoreWithFuncCall.Results",
                      "newPage": false,
                      "searchKey": "indexing.DBStoreWithFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c DBStoreWithFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c DBStoreWithFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClient",
              "documentation": {
                "identifier": "GitserverClient",
                "newPage": false,
                "searchKey": "indexing.GitserverClient",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClient interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClient interface {\n\tHead(ctx context.Context, repositoryID int) (string, error)\n\tListFiles(ctx context.Context, repositoryID int, commit string, pattern *regexp.Regexp) ([]string, error)\n\tFileExists(ctx context.Context, repositoryID int, commit, file string) (bool, error)\n\tRawContents(ctx context.Context, repositoryID int, commit, file string) ([]byte, error)\n\tResolveRevision(ctx context.Context, repositoryID int, versionString string) (api.CommitID, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientFileExistsFunc",
              "documentation": {
                "identifier": "GitserverClientFileExistsFunc",
                "newPage": false,
                "searchKey": "indexing.GitserverClientFileExistsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientFileExistsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientFileExistsFunc struct {\n\tdefaultHook func(context.Context, int, string, string) (bool, error)\n\thooks       []func(context.Context, int, string, string) (bool, error)\n\thistory     []GitserverClientFileExistsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGitserverClientFileExistsFunc describes the behavior when the FileExists method of the parent MockGitserverClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientFileExistsFunc.History",
                    "documentation": {
                      "identifier": "GitserverClientFileExistsFunc.History",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientFileExistsFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientFileExistsFunc) History() []GitserverClientFileExistsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientFileExistsFunc) History() []GitserverClientFileExistsFuncCall\n```\n\nHistory returns a sequence of GitserverClientFileExistsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientFileExistsFunc.PushHook",
                    "documentation": {
                      "identifier": "GitserverClientFileExistsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientFileExistsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientFileExistsFunc) PushHook(hook func(context.Context, int, string, string) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientFileExistsFunc) PushHook(hook func(context.Context, int, string, string) (bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the FileExists method of the parent MockGitserverClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientFileExistsFunc.PushReturn",
                    "documentation": {
                      "identifier": "GitserverClientFileExistsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientFileExistsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientFileExistsFunc) PushReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientFileExistsFunc) PushReturn(r0 bool, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientFileExistsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GitserverClientFileExistsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientFileExistsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientFileExistsFunc) SetDefaultHook(hook func(context.Context, int, string, string) (bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientFileExistsFunc) SetDefaultHook(hook func(context.Context, int, string, string) (bool, error))\n```\n\nSetDefaultHook sets function that is called when the FileExists method of the parent MockGitserverClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientFileExistsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GitserverClientFileExistsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientFileExistsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientFileExistsFunc) SetDefaultReturn(r0 bool, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientFileExistsFunc) SetDefaultReturn(r0 bool, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientFileExistsFunc.appendCall",
                    "documentation": {
                      "identifier": "GitserverClientFileExistsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientFileExistsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientFileExistsFunc) appendCall(r0 GitserverClientFileExistsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientFileExistsFunc) appendCall(r0 GitserverClientFileExistsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientFileExistsFunc.nextHook",
                    "documentation": {
                      "identifier": "GitserverClientFileExistsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientFileExistsFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientFileExistsFunc) nextHook() func(context.Context, int, string, string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientFileExistsFunc) nextHook() func(context.Context, int, string, string) (bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientFileExistsFuncCall",
              "documentation": {
                "identifier": "GitserverClientFileExistsFuncCall",
                "newPage": false,
                "searchKey": "indexing.GitserverClientFileExistsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientFileExistsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientFileExistsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 bool\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nGitserverClientFileExistsFuncCall is an object that describes an invocation of method FileExists on an instance of MockGitserverClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientFileExistsFuncCall.Args",
                    "documentation": {
                      "identifier": "GitserverClientFileExistsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientFileExistsFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientFileExistsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientFileExistsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientFileExistsFuncCall.Results",
                    "documentation": {
                      "identifier": "GitserverClientFileExistsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientFileExistsFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientFileExistsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientFileExistsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientHeadFunc",
              "documentation": {
                "identifier": "GitserverClientHeadFunc",
                "newPage": false,
                "searchKey": "indexing.GitserverClientHeadFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientHeadFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientHeadFunc struct {\n\tdefaultHook func(context.Context, int) (string, error)\n\thooks       []func(context.Context, int) (string, error)\n\thistory     []GitserverClientHeadFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGitserverClientHeadFunc describes the behavior when the Head method of the parent MockGitserverClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientHeadFunc.History",
                    "documentation": {
                      "identifier": "GitserverClientHeadFunc.History",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientHeadFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientHeadFunc) History() []GitserverClientHeadFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientHeadFunc) History() []GitserverClientHeadFuncCall\n```\n\nHistory returns a sequence of GitserverClientHeadFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientHeadFunc.PushHook",
                    "documentation": {
                      "identifier": "GitserverClientHeadFunc.PushHook",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientHeadFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientHeadFunc) PushHook(hook func(context.Context, int) (string, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientHeadFunc) PushHook(hook func(context.Context, int) (string, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Head method of the parent MockGitserverClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientHeadFunc.PushReturn",
                    "documentation": {
                      "identifier": "GitserverClientHeadFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientHeadFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientHeadFunc) PushReturn(r0 string, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientHeadFunc) PushReturn(r0 string, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientHeadFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GitserverClientHeadFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientHeadFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientHeadFunc) SetDefaultHook(hook func(context.Context, int) (string, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientHeadFunc) SetDefaultHook(hook func(context.Context, int) (string, error))\n```\n\nSetDefaultHook sets function that is called when the Head method of the parent MockGitserverClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientHeadFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GitserverClientHeadFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientHeadFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientHeadFunc) SetDefaultReturn(r0 string, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientHeadFunc) SetDefaultReturn(r0 string, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientHeadFunc.appendCall",
                    "documentation": {
                      "identifier": "GitserverClientHeadFunc.appendCall",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientHeadFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientHeadFunc) appendCall(r0 GitserverClientHeadFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientHeadFunc) appendCall(r0 GitserverClientHeadFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientHeadFunc.nextHook",
                    "documentation": {
                      "identifier": "GitserverClientHeadFunc.nextHook",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientHeadFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientHeadFunc) nextHook() func(context.Context, int) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientHeadFunc) nextHook() func(context.Context, int) (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientHeadFuncCall",
              "documentation": {
                "identifier": "GitserverClientHeadFuncCall",
                "newPage": false,
                "searchKey": "indexing.GitserverClientHeadFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientHeadFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientHeadFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 string\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nGitserverClientHeadFuncCall is an object that describes an invocation of method Head on an instance of MockGitserverClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientHeadFuncCall.Args",
                    "documentation": {
                      "identifier": "GitserverClientHeadFuncCall.Args",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientHeadFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientHeadFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientHeadFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientHeadFuncCall.Results",
                    "documentation": {
                      "identifier": "GitserverClientHeadFuncCall.Results",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientHeadFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientHeadFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientHeadFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientListFilesFunc",
              "documentation": {
                "identifier": "GitserverClientListFilesFunc",
                "newPage": false,
                "searchKey": "indexing.GitserverClientListFilesFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientListFilesFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientListFilesFunc struct {\n\tdefaultHook func(context.Context, int, string, *regexp.Regexp) ([]string, error)\n\thooks       []func(context.Context, int, string, *regexp.Regexp) ([]string, error)\n\thistory     []GitserverClientListFilesFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGitserverClientListFilesFunc describes the behavior when the ListFiles method of the parent MockGitserverClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientListFilesFunc.History",
                    "documentation": {
                      "identifier": "GitserverClientListFilesFunc.History",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientListFilesFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientListFilesFunc) History() []GitserverClientListFilesFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientListFilesFunc) History() []GitserverClientListFilesFuncCall\n```\n\nHistory returns a sequence of GitserverClientListFilesFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientListFilesFunc.PushHook",
                    "documentation": {
                      "identifier": "GitserverClientListFilesFunc.PushHook",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientListFilesFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientListFilesFunc) PushHook(hook func(context.Context, int, string, *regexp.Regexp) ([]string, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientListFilesFunc) PushHook(hook func(context.Context, int, string, *regexp.Regexp) ([]string, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the ListFiles method of the parent MockGitserverClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientListFilesFunc.PushReturn",
                    "documentation": {
                      "identifier": "GitserverClientListFilesFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientListFilesFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientListFilesFunc) PushReturn(r0 []string, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientListFilesFunc) PushReturn(r0 []string, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientListFilesFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GitserverClientListFilesFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientListFilesFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientListFilesFunc) SetDefaultHook(hook func(context.Context, int, string, *regexp.Regexp) ([]string, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientListFilesFunc) SetDefaultHook(hook func(context.Context, int, string, *regexp.Regexp) ([]string, error))\n```\n\nSetDefaultHook sets function that is called when the ListFiles method of the parent MockGitserverClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientListFilesFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GitserverClientListFilesFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientListFilesFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientListFilesFunc) SetDefaultReturn(r0 []string, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientListFilesFunc) SetDefaultReturn(r0 []string, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientListFilesFunc.appendCall",
                    "documentation": {
                      "identifier": "GitserverClientListFilesFunc.appendCall",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientListFilesFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientListFilesFunc) appendCall(r0 GitserverClientListFilesFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientListFilesFunc) appendCall(r0 GitserverClientListFilesFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientListFilesFunc.nextHook",
                    "documentation": {
                      "identifier": "GitserverClientListFilesFunc.nextHook",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientListFilesFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientListFilesFunc) nextHook() func(context.Context, int, string, *regexp.Regexp) ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientListFilesFunc) nextHook() func(context.Context, int, string, *regexp.Regexp) ([]string, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientListFilesFuncCall",
              "documentation": {
                "identifier": "GitserverClientListFilesFuncCall",
                "newPage": false,
                "searchKey": "indexing.GitserverClientListFilesFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientListFilesFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientListFilesFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 *regexp.Regexp\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []string\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nGitserverClientListFilesFuncCall is an object that describes an invocation of method ListFiles on an instance of MockGitserverClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientListFilesFuncCall.Args",
                    "documentation": {
                      "identifier": "GitserverClientListFilesFuncCall.Args",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientListFilesFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientListFilesFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientListFilesFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientListFilesFuncCall.Results",
                    "documentation": {
                      "identifier": "GitserverClientListFilesFuncCall.Results",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientListFilesFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientListFilesFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientListFilesFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientRawContentsFunc",
              "documentation": {
                "identifier": "GitserverClientRawContentsFunc",
                "newPage": false,
                "searchKey": "indexing.GitserverClientRawContentsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientRawContentsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientRawContentsFunc struct {\n\tdefaultHook func(context.Context, int, string, string) ([]byte, error)\n\thooks       []func(context.Context, int, string, string) ([]byte, error)\n\thistory     []GitserverClientRawContentsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGitserverClientRawContentsFunc describes the behavior when the RawContents method of the parent MockGitserverClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientRawContentsFunc.History",
                    "documentation": {
                      "identifier": "GitserverClientRawContentsFunc.History",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientRawContentsFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientRawContentsFunc) History() []GitserverClientRawContentsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientRawContentsFunc) History() []GitserverClientRawContentsFuncCall\n```\n\nHistory returns a sequence of GitserverClientRawContentsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientRawContentsFunc.PushHook",
                    "documentation": {
                      "identifier": "GitserverClientRawContentsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientRawContentsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientRawContentsFunc) PushHook(hook func(context.Context, int, string, string) ([]byte, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientRawContentsFunc) PushHook(hook func(context.Context, int, string, string) ([]byte, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the RawContents method of the parent MockGitserverClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientRawContentsFunc.PushReturn",
                    "documentation": {
                      "identifier": "GitserverClientRawContentsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientRawContentsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientRawContentsFunc) PushReturn(r0 []byte, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientRawContentsFunc) PushReturn(r0 []byte, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientRawContentsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GitserverClientRawContentsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientRawContentsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientRawContentsFunc) SetDefaultHook(hook func(context.Context, int, string, string) ([]byte, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientRawContentsFunc) SetDefaultHook(hook func(context.Context, int, string, string) ([]byte, error))\n```\n\nSetDefaultHook sets function that is called when the RawContents method of the parent MockGitserverClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientRawContentsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GitserverClientRawContentsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientRawContentsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientRawContentsFunc) SetDefaultReturn(r0 []byte, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientRawContentsFunc) SetDefaultReturn(r0 []byte, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientRawContentsFunc.appendCall",
                    "documentation": {
                      "identifier": "GitserverClientRawContentsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientRawContentsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientRawContentsFunc) appendCall(r0 GitserverClientRawContentsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientRawContentsFunc) appendCall(r0 GitserverClientRawContentsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientRawContentsFunc.nextHook",
                    "documentation": {
                      "identifier": "GitserverClientRawContentsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientRawContentsFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientRawContentsFunc) nextHook() func(context.Context, int, string, string) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientRawContentsFunc) nextHook() func(context.Context, int, string, string) ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientRawContentsFuncCall",
              "documentation": {
                "identifier": "GitserverClientRawContentsFuncCall",
                "newPage": false,
                "searchKey": "indexing.GitserverClientRawContentsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientRawContentsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientRawContentsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Arg3 is the value of the 4th argument passed to this method\n\t// invocation.\n\tArg3 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []byte\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nGitserverClientRawContentsFuncCall is an object that describes an invocation of method RawContents on an instance of MockGitserverClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientRawContentsFuncCall.Args",
                    "documentation": {
                      "identifier": "GitserverClientRawContentsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientRawContentsFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientRawContentsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientRawContentsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientRawContentsFuncCall.Results",
                    "documentation": {
                      "identifier": "GitserverClientRawContentsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientRawContentsFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientRawContentsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientRawContentsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientResolveRevisionFunc",
              "documentation": {
                "identifier": "GitserverClientResolveRevisionFunc",
                "newPage": false,
                "searchKey": "indexing.GitserverClientResolveRevisionFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientResolveRevisionFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientResolveRevisionFunc struct {\n\tdefaultHook func(context.Context, int, string) (api.CommitID, error)\n\thooks       []func(context.Context, int, string) (api.CommitID, error)\n\thistory     []GitserverClientResolveRevisionFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nGitserverClientResolveRevisionFunc describes the behavior when the ResolveRevision method of the parent MockGitserverClient instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientResolveRevisionFunc.History",
                    "documentation": {
                      "identifier": "GitserverClientResolveRevisionFunc.History",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientResolveRevisionFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientResolveRevisionFunc) History() []GitserverClientResolveRevisionFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientResolveRevisionFunc) History() []GitserverClientResolveRevisionFuncCall\n```\n\nHistory returns a sequence of GitserverClientResolveRevisionFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientResolveRevisionFunc.PushHook",
                    "documentation": {
                      "identifier": "GitserverClientResolveRevisionFunc.PushHook",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientResolveRevisionFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientResolveRevisionFunc) PushHook(hook func(context.Context, int, string) (api.CommitID, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientResolveRevisionFunc) PushHook(hook func(context.Context, int, string) (api.CommitID, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the ResolveRevision method of the parent MockGitserverClient instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientResolveRevisionFunc.PushReturn",
                    "documentation": {
                      "identifier": "GitserverClientResolveRevisionFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientResolveRevisionFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientResolveRevisionFunc) PushReturn(r0 api.CommitID, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientResolveRevisionFunc) PushReturn(r0 api.CommitID, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientResolveRevisionFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "GitserverClientResolveRevisionFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientResolveRevisionFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientResolveRevisionFunc) SetDefaultHook(hook func(context.Context, int, string) (api.CommitID, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientResolveRevisionFunc) SetDefaultHook(hook func(context.Context, int, string) (api.CommitID, error))\n```\n\nSetDefaultHook sets function that is called when the ResolveRevision method of the parent MockGitserverClient instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientResolveRevisionFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "GitserverClientResolveRevisionFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientResolveRevisionFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientResolveRevisionFunc) SetDefaultReturn(r0 api.CommitID, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientResolveRevisionFunc) SetDefaultReturn(r0 api.CommitID, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientResolveRevisionFunc.appendCall",
                    "documentation": {
                      "identifier": "GitserverClientResolveRevisionFunc.appendCall",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientResolveRevisionFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientResolveRevisionFunc) appendCall(r0 GitserverClientResolveRevisionFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientResolveRevisionFunc) appendCall(r0 GitserverClientResolveRevisionFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientResolveRevisionFunc.nextHook",
                    "documentation": {
                      "identifier": "GitserverClientResolveRevisionFunc.nextHook",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientResolveRevisionFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *GitserverClientResolveRevisionFunc) nextHook() func(context.Context, int, string) (api.CommitID, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *GitserverClientResolveRevisionFunc) nextHook() func(context.Context, int, string) (api.CommitID, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientResolveRevisionFuncCall",
              "documentation": {
                "identifier": "GitserverClientResolveRevisionFuncCall",
                "newPage": false,
                "searchKey": "indexing.GitserverClientResolveRevisionFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitserverClientResolveRevisionFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitserverClientResolveRevisionFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Arg2 is the value of the 3rd argument passed to this method\n\t// invocation.\n\tArg2 string\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 api.CommitID\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nGitserverClientResolveRevisionFuncCall is an object that describes an invocation of method ResolveRevision on an instance of MockGitserverClient. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientResolveRevisionFuncCall.Args",
                    "documentation": {
                      "identifier": "GitserverClientResolveRevisionFuncCall.Args",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientResolveRevisionFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientResolveRevisionFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientResolveRevisionFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#GitserverClientResolveRevisionFuncCall.Results",
                    "documentation": {
                      "identifier": "GitserverClientResolveRevisionFuncCall.Results",
                      "newPage": false,
                      "searchKey": "indexing.GitserverClientResolveRevisionFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c GitserverClientResolveRevisionFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c GitserverClientResolveRevisionFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuer",
              "documentation": {
                "identifier": "IndexEnqueuer",
                "newPage": false,
                "searchKey": "indexing.IndexEnqueuer",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexEnqueuer interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexEnqueuer interface {\n\tQueueIndexesForRepository(ctx context.Context, repositoryID int) error\n\tQueueIndexesForPackage(ctx context.Context, pkg semantic.Package) error\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForPackageFunc",
              "documentation": {
                "identifier": "IndexEnqueuerQueueIndexesForPackageFunc",
                "newPage": false,
                "searchKey": "indexing.IndexEnqueuerQueueIndexesForPackageFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexEnqueuerQueueIndexesForPackageFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexEnqueuerQueueIndexesForPackageFunc struct {\n\tdefaultHook func(context.Context, semantic.Package) error\n\thooks       []func(context.Context, semantic.Package) error\n\thistory     []IndexEnqueuerQueueIndexesForPackageFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nIndexEnqueuerQueueIndexesForPackageFunc describes the behavior when the QueueIndexesForPackage method of the parent MockIndexEnqueuer instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForPackageFunc.History",
                    "documentation": {
                      "identifier": "IndexEnqueuerQueueIndexesForPackageFunc.History",
                      "newPage": false,
                      "searchKey": "indexing.IndexEnqueuerQueueIndexesForPackageFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerQueueIndexesForPackageFunc) History() []IndexEnqueuerQueueIndexesForPackageFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerQueueIndexesForPackageFunc) History() []IndexEnqueuerQueueIndexesForPackageFuncCall\n```\n\nHistory returns a sequence of IndexEnqueuerQueueIndexesForPackageFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForPackageFunc.PushHook",
                    "documentation": {
                      "identifier": "IndexEnqueuerQueueIndexesForPackageFunc.PushHook",
                      "newPage": false,
                      "searchKey": "indexing.IndexEnqueuerQueueIndexesForPackageFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerQueueIndexesForPackageFunc) PushHook(hook func(context.Context, semantic.Package) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerQueueIndexesForPackageFunc) PushHook(hook func(context.Context, semantic.Package) error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the QueueIndexesForPackage method of the parent MockIndexEnqueuer instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForPackageFunc.PushReturn",
                    "documentation": {
                      "identifier": "IndexEnqueuerQueueIndexesForPackageFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "indexing.IndexEnqueuerQueueIndexesForPackageFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerQueueIndexesForPackageFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerQueueIndexesForPackageFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForPackageFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "IndexEnqueuerQueueIndexesForPackageFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "indexing.IndexEnqueuerQueueIndexesForPackageFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerQueueIndexesForPackageFunc) SetDefaultHook(hook func(context.Context, semantic.Package) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerQueueIndexesForPackageFunc) SetDefaultHook(hook func(context.Context, semantic.Package) error)\n```\n\nSetDefaultHook sets function that is called when the QueueIndexesForPackage method of the parent MockIndexEnqueuer instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForPackageFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "IndexEnqueuerQueueIndexesForPackageFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "indexing.IndexEnqueuerQueueIndexesForPackageFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerQueueIndexesForPackageFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerQueueIndexesForPackageFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForPackageFunc.appendCall",
                    "documentation": {
                      "identifier": "IndexEnqueuerQueueIndexesForPackageFunc.appendCall",
                      "newPage": false,
                      "searchKey": "indexing.IndexEnqueuerQueueIndexesForPackageFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerQueueIndexesForPackageFunc) appendCall(r0 IndexEnqueuerQueueIndexesForPackageFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerQueueIndexesForPackageFunc) appendCall(r0 IndexEnqueuerQueueIndexesForPackageFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForPackageFunc.nextHook",
                    "documentation": {
                      "identifier": "IndexEnqueuerQueueIndexesForPackageFunc.nextHook",
                      "newPage": false,
                      "searchKey": "indexing.IndexEnqueuerQueueIndexesForPackageFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerQueueIndexesForPackageFunc) nextHook() func(context.Context, semantic.Package) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerQueueIndexesForPackageFunc) nextHook() func(context.Context, semantic.Package) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForPackageFuncCall",
              "documentation": {
                "identifier": "IndexEnqueuerQueueIndexesForPackageFuncCall",
                "newPage": false,
                "searchKey": "indexing.IndexEnqueuerQueueIndexesForPackageFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexEnqueuerQueueIndexesForPackageFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexEnqueuerQueueIndexesForPackageFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 semantic.Package\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nIndexEnqueuerQueueIndexesForPackageFuncCall is an object that describes an invocation of method QueueIndexesForPackage on an instance of MockIndexEnqueuer. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForPackageFuncCall.Args",
                    "documentation": {
                      "identifier": "IndexEnqueuerQueueIndexesForPackageFuncCall.Args",
                      "newPage": false,
                      "searchKey": "indexing.IndexEnqueuerQueueIndexesForPackageFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c IndexEnqueuerQueueIndexesForPackageFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c IndexEnqueuerQueueIndexesForPackageFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForPackageFuncCall.Results",
                    "documentation": {
                      "identifier": "IndexEnqueuerQueueIndexesForPackageFuncCall.Results",
                      "newPage": false,
                      "searchKey": "indexing.IndexEnqueuerQueueIndexesForPackageFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c IndexEnqueuerQueueIndexesForPackageFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c IndexEnqueuerQueueIndexesForPackageFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForRepositoryFunc",
              "documentation": {
                "identifier": "IndexEnqueuerQueueIndexesForRepositoryFunc",
                "newPage": false,
                "searchKey": "indexing.IndexEnqueuerQueueIndexesForRepositoryFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexEnqueuerQueueIndexesForRepositoryFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexEnqueuerQueueIndexesForRepositoryFunc struct {\n\tdefaultHook func(context.Context, int) error\n\thooks       []func(context.Context, int) error\n\thistory     []IndexEnqueuerQueueIndexesForRepositoryFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nIndexEnqueuerQueueIndexesForRepositoryFunc describes the behavior when the QueueIndexesForRepository method of the parent MockIndexEnqueuer instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForRepositoryFunc.History",
                    "documentation": {
                      "identifier": "IndexEnqueuerQueueIndexesForRepositoryFunc.History",
                      "newPage": false,
                      "searchKey": "indexing.IndexEnqueuerQueueIndexesForRepositoryFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerQueueIndexesForRepositoryFunc) History() []IndexEnqueuerQueueIndexesForRepositoryFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerQueueIndexesForRepositoryFunc) History() []IndexEnqueuerQueueIndexesForRepositoryFuncCall\n```\n\nHistory returns a sequence of IndexEnqueuerQueueIndexesForRepositoryFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForRepositoryFunc.PushHook",
                    "documentation": {
                      "identifier": "IndexEnqueuerQueueIndexesForRepositoryFunc.PushHook",
                      "newPage": false,
                      "searchKey": "indexing.IndexEnqueuerQueueIndexesForRepositoryFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerQueueIndexesForRepositoryFunc) PushHook(hook func(context.Context, int) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerQueueIndexesForRepositoryFunc) PushHook(hook func(context.Context, int) error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the QueueIndexesForRepository method of the parent MockIndexEnqueuer instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForRepositoryFunc.PushReturn",
                    "documentation": {
                      "identifier": "IndexEnqueuerQueueIndexesForRepositoryFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "indexing.IndexEnqueuerQueueIndexesForRepositoryFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerQueueIndexesForRepositoryFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerQueueIndexesForRepositoryFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForRepositoryFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "IndexEnqueuerQueueIndexesForRepositoryFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "indexing.IndexEnqueuerQueueIndexesForRepositoryFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerQueueIndexesForRepositoryFunc) SetDefaultHook(hook func(context.Context, int) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerQueueIndexesForRepositoryFunc) SetDefaultHook(hook func(context.Context, int) error)\n```\n\nSetDefaultHook sets function that is called when the QueueIndexesForRepository method of the parent MockIndexEnqueuer instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForRepositoryFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "IndexEnqueuerQueueIndexesForRepositoryFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "indexing.IndexEnqueuerQueueIndexesForRepositoryFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerQueueIndexesForRepositoryFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerQueueIndexesForRepositoryFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForRepositoryFunc.appendCall",
                    "documentation": {
                      "identifier": "IndexEnqueuerQueueIndexesForRepositoryFunc.appendCall",
                      "newPage": false,
                      "searchKey": "indexing.IndexEnqueuerQueueIndexesForRepositoryFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerQueueIndexesForRepositoryFunc) appendCall(r0 IndexEnqueuerQueueIndexesForRepositoryFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerQueueIndexesForRepositoryFunc) appendCall(r0 IndexEnqueuerQueueIndexesForRepositoryFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForRepositoryFunc.nextHook",
                    "documentation": {
                      "identifier": "IndexEnqueuerQueueIndexesForRepositoryFunc.nextHook",
                      "newPage": false,
                      "searchKey": "indexing.IndexEnqueuerQueueIndexesForRepositoryFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexEnqueuerQueueIndexesForRepositoryFunc) nextHook() func(context.Context, int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexEnqueuerQueueIndexesForRepositoryFunc) nextHook() func(context.Context, int) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForRepositoryFuncCall",
              "documentation": {
                "identifier": "IndexEnqueuerQueueIndexesForRepositoryFuncCall",
                "newPage": false,
                "searchKey": "indexing.IndexEnqueuerQueueIndexesForRepositoryFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexEnqueuerQueueIndexesForRepositoryFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexEnqueuerQueueIndexesForRepositoryFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 int\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nIndexEnqueuerQueueIndexesForRepositoryFuncCall is an object that describes an invocation of method QueueIndexesForRepository on an instance of MockIndexEnqueuer. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForRepositoryFuncCall.Args",
                    "documentation": {
                      "identifier": "IndexEnqueuerQueueIndexesForRepositoryFuncCall.Args",
                      "newPage": false,
                      "searchKey": "indexing.IndexEnqueuerQueueIndexesForRepositoryFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c IndexEnqueuerQueueIndexesForRepositoryFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c IndexEnqueuerQueueIndexesForRepositoryFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexEnqueuerQueueIndexesForRepositoryFuncCall.Results",
                    "documentation": {
                      "identifier": "IndexEnqueuerQueueIndexesForRepositoryFuncCall.Results",
                      "newPage": false,
                      "searchKey": "indexing.IndexEnqueuerQueueIndexesForRepositoryFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c IndexEnqueuerQueueIndexesForRepositoryFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c IndexEnqueuerQueueIndexesForRepositoryFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexScheduler",
              "documentation": {
                "identifier": "IndexScheduler",
                "newPage": false,
                "searchKey": "indexing.IndexScheduler",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexScheduler struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexScheduler struct {\n\tdbStore       DBStore\n\tsettingStore  IndexingSettingStore\n\trepoStore     IndexingRepoStore\n\tindexEnqueuer IndexEnqueuer\n\tlimiter       *rate.Limiter\n\toperations    *operations\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexScheduler.Handle",
                    "documentation": {
                      "identifier": "IndexScheduler.Handle",
                      "newPage": false,
                      "searchKey": "indexing.IndexScheduler.Handle",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IndexScheduler) Handle(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IndexScheduler) Handle(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexScheduler.HandleError",
                    "documentation": {
                      "identifier": "IndexScheduler.HandleError",
                      "newPage": false,
                      "searchKey": "indexing.IndexScheduler.HandleError",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IndexScheduler) HandleError(err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IndexScheduler) HandleError(err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingRepoStore",
              "documentation": {
                "identifier": "IndexingRepoStore",
                "newPage": false,
                "searchKey": "indexing.IndexingRepoStore",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexingRepoStore interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexingRepoStore interface {\n\tListRepoNames(ctx context.Context, opt database.ReposListOptions) (results []types.RepoName, err error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingRepoStoreListRepoNamesFunc",
              "documentation": {
                "identifier": "IndexingRepoStoreListRepoNamesFunc",
                "newPage": false,
                "searchKey": "indexing.IndexingRepoStoreListRepoNamesFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexingRepoStoreListRepoNamesFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexingRepoStoreListRepoNamesFunc struct {\n\tdefaultHook func(context.Context, database.ReposListOptions) ([]types.RepoName, error)\n\thooks       []func(context.Context, database.ReposListOptions) ([]types.RepoName, error)\n\thistory     []IndexingRepoStoreListRepoNamesFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nIndexingRepoStoreListRepoNamesFunc describes the behavior when the ListRepoNames method of the parent MockIndexingRepoStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingRepoStoreListRepoNamesFunc.History",
                    "documentation": {
                      "identifier": "IndexingRepoStoreListRepoNamesFunc.History",
                      "newPage": false,
                      "searchKey": "indexing.IndexingRepoStoreListRepoNamesFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexingRepoStoreListRepoNamesFunc) History() []IndexingRepoStoreListRepoNamesFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexingRepoStoreListRepoNamesFunc) History() []IndexingRepoStoreListRepoNamesFuncCall\n```\n\nHistory returns a sequence of IndexingRepoStoreListRepoNamesFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingRepoStoreListRepoNamesFunc.PushHook",
                    "documentation": {
                      "identifier": "IndexingRepoStoreListRepoNamesFunc.PushHook",
                      "newPage": false,
                      "searchKey": "indexing.IndexingRepoStoreListRepoNamesFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexingRepoStoreListRepoNamesFunc) PushHook(hook func(context.Context, database.ReposListOptions) ([]types.RepoName, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexingRepoStoreListRepoNamesFunc) PushHook(hook func(context.Context, database.ReposListOptions) ([]types.RepoName, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the ListRepoNames method of the parent MockIndexingRepoStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingRepoStoreListRepoNamesFunc.PushReturn",
                    "documentation": {
                      "identifier": "IndexingRepoStoreListRepoNamesFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "indexing.IndexingRepoStoreListRepoNamesFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexingRepoStoreListRepoNamesFunc) PushReturn(r0 []types.RepoName, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexingRepoStoreListRepoNamesFunc) PushReturn(r0 []types.RepoName, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingRepoStoreListRepoNamesFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "IndexingRepoStoreListRepoNamesFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "indexing.IndexingRepoStoreListRepoNamesFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexingRepoStoreListRepoNamesFunc) SetDefaultHook(hook func(context.Context, database.ReposListOptions) ([]types.RepoName, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexingRepoStoreListRepoNamesFunc) SetDefaultHook(hook func(context.Context, database.ReposListOptions) ([]types.RepoName, error))\n```\n\nSetDefaultHook sets function that is called when the ListRepoNames method of the parent MockIndexingRepoStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingRepoStoreListRepoNamesFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "IndexingRepoStoreListRepoNamesFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "indexing.IndexingRepoStoreListRepoNamesFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexingRepoStoreListRepoNamesFunc) SetDefaultReturn(r0 []types.RepoName, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexingRepoStoreListRepoNamesFunc) SetDefaultReturn(r0 []types.RepoName, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingRepoStoreListRepoNamesFunc.appendCall",
                    "documentation": {
                      "identifier": "IndexingRepoStoreListRepoNamesFunc.appendCall",
                      "newPage": false,
                      "searchKey": "indexing.IndexingRepoStoreListRepoNamesFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexingRepoStoreListRepoNamesFunc) appendCall(r0 IndexingRepoStoreListRepoNamesFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexingRepoStoreListRepoNamesFunc) appendCall(r0 IndexingRepoStoreListRepoNamesFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingRepoStoreListRepoNamesFunc.nextHook",
                    "documentation": {
                      "identifier": "IndexingRepoStoreListRepoNamesFunc.nextHook",
                      "newPage": false,
                      "searchKey": "indexing.IndexingRepoStoreListRepoNamesFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexingRepoStoreListRepoNamesFunc) nextHook() func(context.Context, database.ReposListOptions) ([]types.RepoName, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexingRepoStoreListRepoNamesFunc) nextHook() func(context.Context, database.ReposListOptions) ([]types.RepoName, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingRepoStoreListRepoNamesFuncCall",
              "documentation": {
                "identifier": "IndexingRepoStoreListRepoNamesFuncCall",
                "newPage": false,
                "searchKey": "indexing.IndexingRepoStoreListRepoNamesFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexingRepoStoreListRepoNamesFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexingRepoStoreListRepoNamesFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 database.ReposListOptions\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 []types.RepoName\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nIndexingRepoStoreListRepoNamesFuncCall is an object that describes an invocation of method ListRepoNames on an instance of MockIndexingRepoStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingRepoStoreListRepoNamesFuncCall.Args",
                    "documentation": {
                      "identifier": "IndexingRepoStoreListRepoNamesFuncCall.Args",
                      "newPage": false,
                      "searchKey": "indexing.IndexingRepoStoreListRepoNamesFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c IndexingRepoStoreListRepoNamesFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c IndexingRepoStoreListRepoNamesFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingRepoStoreListRepoNamesFuncCall.Results",
                    "documentation": {
                      "identifier": "IndexingRepoStoreListRepoNamesFuncCall.Results",
                      "newPage": false,
                      "searchKey": "indexing.IndexingRepoStoreListRepoNamesFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c IndexingRepoStoreListRepoNamesFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c IndexingRepoStoreListRepoNamesFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingSettingStore",
              "documentation": {
                "identifier": "IndexingSettingStore",
                "newPage": false,
                "searchKey": "indexing.IndexingSettingStore",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexingSettingStore interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexingSettingStore interface {\n\tGetLastestSchemaSettings(context.Context, api.SettingsSubject) (*schema.Settings, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingSettingStoreGetLastestSchemaSettingsFunc",
              "documentation": {
                "identifier": "IndexingSettingStoreGetLastestSchemaSettingsFunc",
                "newPage": false,
                "searchKey": "indexing.IndexingSettingStoreGetLastestSchemaSettingsFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexingSettingStoreGetLastestSchemaSettingsFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexingSettingStoreGetLastestSchemaSettingsFunc struct {\n\tdefaultHook func(context.Context, api.SettingsSubject) (*schema.Settings, error)\n\thooks       []func(context.Context, api.SettingsSubject) (*schema.Settings, error)\n\thistory     []IndexingSettingStoreGetLastestSchemaSettingsFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nIndexingSettingStoreGetLastestSchemaSettingsFunc describes the behavior when the GetLastestSchemaSettings method of the parent MockIndexingSettingStore instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingSettingStoreGetLastestSchemaSettingsFunc.History",
                    "documentation": {
                      "identifier": "IndexingSettingStoreGetLastestSchemaSettingsFunc.History",
                      "newPage": false,
                      "searchKey": "indexing.IndexingSettingStoreGetLastestSchemaSettingsFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexingSettingStoreGetLastestSchemaSettingsFunc) History() []IndexingSettingStoreGetLastestSchemaSettingsFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexingSettingStoreGetLastestSchemaSettingsFunc) History() []IndexingSettingStoreGetLastestSchemaSettingsFuncCall\n```\n\nHistory returns a sequence of IndexingSettingStoreGetLastestSchemaSettingsFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingSettingStoreGetLastestSchemaSettingsFunc.PushHook",
                    "documentation": {
                      "identifier": "IndexingSettingStoreGetLastestSchemaSettingsFunc.PushHook",
                      "newPage": false,
                      "searchKey": "indexing.IndexingSettingStoreGetLastestSchemaSettingsFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexingSettingStoreGetLastestSchemaSettingsFunc) PushHook(hook func(context.Context, api.SettingsSubject) (*schema.Settings, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexingSettingStoreGetLastestSchemaSettingsFunc) PushHook(hook func(context.Context, api.SettingsSubject) (*schema.Settings, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the GetLastestSchemaSettings method of the parent MockIndexingSettingStore instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingSettingStoreGetLastestSchemaSettingsFunc.PushReturn",
                    "documentation": {
                      "identifier": "IndexingSettingStoreGetLastestSchemaSettingsFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "indexing.IndexingSettingStoreGetLastestSchemaSettingsFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexingSettingStoreGetLastestSchemaSettingsFunc) PushReturn(r0 *schema.Settings, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexingSettingStoreGetLastestSchemaSettingsFunc) PushReturn(r0 *schema.Settings, r1 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingSettingStoreGetLastestSchemaSettingsFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "IndexingSettingStoreGetLastestSchemaSettingsFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "indexing.IndexingSettingStoreGetLastestSchemaSettingsFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexingSettingStoreGetLastestSchemaSettingsFunc) SetDefaultHook(hook func(context.Context, api.SettingsSubject) (*schema.Settings, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexingSettingStoreGetLastestSchemaSettingsFunc) SetDefaultHook(hook func(context.Context, api.SettingsSubject) (*schema.Settings, error))\n```\n\nSetDefaultHook sets function that is called when the GetLastestSchemaSettings method of the parent MockIndexingSettingStore instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingSettingStoreGetLastestSchemaSettingsFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "IndexingSettingStoreGetLastestSchemaSettingsFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "indexing.IndexingSettingStoreGetLastestSchemaSettingsFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexingSettingStoreGetLastestSchemaSettingsFunc) SetDefaultReturn(r0 *schema.Settings, r1 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexingSettingStoreGetLastestSchemaSettingsFunc) SetDefaultReturn(r0 *schema.Settings, r1 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingSettingStoreGetLastestSchemaSettingsFunc.appendCall",
                    "documentation": {
                      "identifier": "IndexingSettingStoreGetLastestSchemaSettingsFunc.appendCall",
                      "newPage": false,
                      "searchKey": "indexing.IndexingSettingStoreGetLastestSchemaSettingsFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexingSettingStoreGetLastestSchemaSettingsFunc) appendCall(r0 IndexingSettingStoreGetLastestSchemaSettingsFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexingSettingStoreGetLastestSchemaSettingsFunc) appendCall(r0 IndexingSettingStoreGetLastestSchemaSettingsFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingSettingStoreGetLastestSchemaSettingsFunc.nextHook",
                    "documentation": {
                      "identifier": "IndexingSettingStoreGetLastestSchemaSettingsFunc.nextHook",
                      "newPage": false,
                      "searchKey": "indexing.IndexingSettingStoreGetLastestSchemaSettingsFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *IndexingSettingStoreGetLastestSchemaSettingsFunc) nextHook() func(context.Context, api.SettingsSubject) (*schema.Settings, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *IndexingSettingStoreGetLastestSchemaSettingsFunc) nextHook() func(context.Context, api.SettingsSubject) (*schema.Settings, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingSettingStoreGetLastestSchemaSettingsFuncCall",
              "documentation": {
                "identifier": "IndexingSettingStoreGetLastestSchemaSettingsFuncCall",
                "newPage": false,
                "searchKey": "indexing.IndexingSettingStoreGetLastestSchemaSettingsFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexingSettingStoreGetLastestSchemaSettingsFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexingSettingStoreGetLastestSchemaSettingsFuncCall struct {\n\t// Arg0 is the value of the 1st argument passed to this method\n\t// invocation.\n\tArg0 context.Context\n\t// Arg1 is the value of the 2nd argument passed to this method\n\t// invocation.\n\tArg1 api.SettingsSubject\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 *schema.Settings\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 error\n}\n```\n\nIndexingSettingStoreGetLastestSchemaSettingsFuncCall is an object that describes an invocation of method GetLastestSchemaSettings on an instance of MockIndexingSettingStore. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingSettingStoreGetLastestSchemaSettingsFuncCall.Args",
                    "documentation": {
                      "identifier": "IndexingSettingStoreGetLastestSchemaSettingsFuncCall.Args",
                      "newPage": false,
                      "searchKey": "indexing.IndexingSettingStoreGetLastestSchemaSettingsFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c IndexingSettingStoreGetLastestSchemaSettingsFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c IndexingSettingStoreGetLastestSchemaSettingsFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#IndexingSettingStoreGetLastestSchemaSettingsFuncCall.Results",
                    "documentation": {
                      "identifier": "IndexingSettingStoreGetLastestSchemaSettingsFuncCall.Results",
                      "newPage": false,
                      "searchKey": "indexing.IndexingSettingStoreGetLastestSchemaSettingsFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c IndexingSettingStoreGetLastestSchemaSettingsFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c IndexingSettingStoreGetLastestSchemaSettingsFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockDBStore",
              "documentation": {
                "identifier": "MockDBStore",
                "newPage": false,
                "searchKey": "indexing.MockDBStore",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockDBStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockDBStore struct {\n\t// GetAutoindexDisabledRepositoriesFunc is an instance of a mock\n\t// function object controlling the behavior of the method\n\t// GetAutoindexDisabledRepositories.\n\tGetAutoindexDisabledRepositoriesFunc *DBStoreGetAutoindexDisabledRepositoriesFunc\n\t// GetRepositoriesWithIndexConfigurationFunc is an instance of a mock\n\t// function object controlling the behavior of the method\n\t// GetRepositoriesWithIndexConfiguration.\n\tGetRepositoriesWithIndexConfigurationFunc *DBStoreGetRepositoriesWithIndexConfigurationFunc\n\t// GetUploadByIDFunc is an instance of a mock function object\n\t// controlling the behavior of the method GetUploadByID.\n\tGetUploadByIDFunc *DBStoreGetUploadByIDFunc\n\t// GetUploadsFunc is an instance of a mock function object controlling\n\t// the behavior of the method GetUploads.\n\tGetUploadsFunc *DBStoreGetUploadsFunc\n\t// ReferencesForUploadFunc is an instance of a mock function object\n\t// controlling the behavior of the method ReferencesForUpload.\n\tReferencesForUploadFunc *DBStoreReferencesForUploadFunc\n\t// WithFunc is an instance of a mock function object controlling the\n\t// behavior of the method With.\n\tWithFunc *DBStoreWithFunc\n}\n```\n\nMockDBStore is a mock implementation of the DBStore interface (from the package github.com/sourcegraph/sourcegraph/enterprise/cmd/worker/internal/codeintel/indexing) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#NewMockDBStore",
                    "documentation": {
                      "identifier": "NewMockDBStore",
                      "newPage": false,
                      "searchKey": "indexing.NewMockDBStore",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockDBStore() *MockDBStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockDBStore() *MockDBStore\n```\n\nNewMockDBStore creates a new mock of the DBStore interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#NewMockDBStoreFrom",
                    "documentation": {
                      "identifier": "NewMockDBStoreFrom",
                      "newPage": false,
                      "searchKey": "indexing.NewMockDBStoreFrom",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockDBStoreFrom(i DBStore) *MockDBStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockDBStoreFrom(i DBStore) *MockDBStore\n```\n\nNewMockDBStoreFrom creates a new mock of the MockDBStore interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockDBStore.GetAutoindexDisabledRepositories",
                    "documentation": {
                      "identifier": "MockDBStore.GetAutoindexDisabledRepositories",
                      "newPage": false,
                      "searchKey": "indexing.MockDBStore.GetAutoindexDisabledRepositories",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) GetAutoindexDisabledRepositories(v0 context.Context) ([]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) GetAutoindexDisabledRepositories(v0 context.Context) ([]int, error)\n```\n\nGetAutoindexDisabledRepositories delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockDBStore.GetRepositoriesWithIndexConfiguration",
                    "documentation": {
                      "identifier": "MockDBStore.GetRepositoriesWithIndexConfiguration",
                      "newPage": false,
                      "searchKey": "indexing.MockDBStore.GetRepositoriesWithIndexConfiguration",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) GetRepositoriesWithIndexConfiguration(v0 context.Context) ([]int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) GetRepositoriesWithIndexConfiguration(v0 context.Context) ([]int, error)\n```\n\nGetRepositoriesWithIndexConfiguration delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockDBStore.GetUploadByID",
                    "documentation": {
                      "identifier": "MockDBStore.GetUploadByID",
                      "newPage": false,
                      "searchKey": "indexing.MockDBStore.GetUploadByID",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) GetUploadByID(v0 context.Context, v1 int) (dbstore.Upload, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) GetUploadByID(v0 context.Context, v1 int) (dbstore.Upload, bool, error)\n```\n\nGetUploadByID delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockDBStore.GetUploads",
                    "documentation": {
                      "identifier": "MockDBStore.GetUploads",
                      "newPage": false,
                      "searchKey": "indexing.MockDBStore.GetUploads",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) GetUploads(v0 context.Context, v1 dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) GetUploads(v0 context.Context, v1 dbstore.GetUploadsOptions) ([]dbstore.Upload, int, error)\n```\n\nGetUploads delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockDBStore.ReferencesForUpload",
                    "documentation": {
                      "identifier": "MockDBStore.ReferencesForUpload",
                      "newPage": false,
                      "searchKey": "indexing.MockDBStore.ReferencesForUpload",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) ReferencesForUpload(v0 context.Context, v1 int) (dbstore.PackageReferenceScanner, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) ReferencesForUpload(v0 context.Context, v1 int) (dbstore.PackageReferenceScanner, error)\n```\n\nReferencesForUpload delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockDBStore.With",
                    "documentation": {
                      "identifier": "MockDBStore.With",
                      "newPage": false,
                      "searchKey": "indexing.MockDBStore.With",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockDBStore) With(v0 basestore.ShareableStore) DBStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockDBStore) With(v0 basestore.ShareableStore) DBStore\n```\n\nWith delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockGitserverClient",
              "documentation": {
                "identifier": "MockGitserverClient",
                "newPage": false,
                "searchKey": "indexing.MockGitserverClient",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockGitserverClient struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockGitserverClient struct {\n\t// FileExistsFunc is an instance of a mock function object controlling\n\t// the behavior of the method FileExists.\n\tFileExistsFunc *GitserverClientFileExistsFunc\n\t// HeadFunc is an instance of a mock function object controlling the\n\t// behavior of the method Head.\n\tHeadFunc *GitserverClientHeadFunc\n\t// ListFilesFunc is an instance of a mock function object controlling\n\t// the behavior of the method ListFiles.\n\tListFilesFunc *GitserverClientListFilesFunc\n\t// RawContentsFunc is an instance of a mock function object controlling\n\t// the behavior of the method RawContents.\n\tRawContentsFunc *GitserverClientRawContentsFunc\n\t// ResolveRevisionFunc is an instance of a mock function object\n\t// controlling the behavior of the method ResolveRevision.\n\tResolveRevisionFunc *GitserverClientResolveRevisionFunc\n}\n```\n\nMockGitserverClient is a mock implementation of the GitserverClient interface (from the package github.com/sourcegraph/sourcegraph/enterprise/cmd/worker/internal/codeintel/indexing) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#NewMockGitserverClient",
                    "documentation": {
                      "identifier": "NewMockGitserverClient",
                      "newPage": false,
                      "searchKey": "indexing.NewMockGitserverClient",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockGitserverClient() *MockGitserverClient"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockGitserverClient() *MockGitserverClient\n```\n\nNewMockGitserverClient creates a new mock of the GitserverClient interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#NewMockGitserverClientFrom",
                    "documentation": {
                      "identifier": "NewMockGitserverClientFrom",
                      "newPage": false,
                      "searchKey": "indexing.NewMockGitserverClientFrom",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockGitserverClientFrom(i GitserverClient) *MockGitserverClient"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockGitserverClientFrom(i GitserverClient) *MockGitserverClient\n```\n\nNewMockGitserverClientFrom creates a new mock of the MockGitserverClient interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockGitserverClient.FileExists",
                    "documentation": {
                      "identifier": "MockGitserverClient.FileExists",
                      "newPage": false,
                      "searchKey": "indexing.MockGitserverClient.FileExists",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGitserverClient) FileExists(v0 context.Context, v1 int, v2 string, v3 string) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGitserverClient) FileExists(v0 context.Context, v1 int, v2 string, v3 string) (bool, error)\n```\n\nFileExists delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockGitserverClient.Head",
                    "documentation": {
                      "identifier": "MockGitserverClient.Head",
                      "newPage": false,
                      "searchKey": "indexing.MockGitserverClient.Head",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGitserverClient) Head(v0 context.Context, v1 int) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGitserverClient) Head(v0 context.Context, v1 int) (string, error)\n```\n\nHead delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockGitserverClient.ListFiles",
                    "documentation": {
                      "identifier": "MockGitserverClient.ListFiles",
                      "newPage": false,
                      "searchKey": "indexing.MockGitserverClient.ListFiles",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGitserverClient) ListFiles(v0 context.Context, v1 int, v2 string, v3 *regexp.Regexp) ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGitserverClient) ListFiles(v0 context.Context, v1 int, v2 string, v3 *regexp.Regexp) ([]string, error)\n```\n\nListFiles delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockGitserverClient.RawContents",
                    "documentation": {
                      "identifier": "MockGitserverClient.RawContents",
                      "newPage": false,
                      "searchKey": "indexing.MockGitserverClient.RawContents",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGitserverClient) RawContents(v0 context.Context, v1 int, v2 string, v3 string) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGitserverClient) RawContents(v0 context.Context, v1 int, v2 string, v3 string) ([]byte, error)\n```\n\nRawContents delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockGitserverClient.ResolveRevision",
                    "documentation": {
                      "identifier": "MockGitserverClient.ResolveRevision",
                      "newPage": false,
                      "searchKey": "indexing.MockGitserverClient.ResolveRevision",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockGitserverClient) ResolveRevision(v0 context.Context, v1 int, v2 string) (api.CommitID, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockGitserverClient) ResolveRevision(v0 context.Context, v1 int, v2 string) (api.CommitID, error)\n```\n\nResolveRevision delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockIndexEnqueuer",
              "documentation": {
                "identifier": "MockIndexEnqueuer",
                "newPage": false,
                "searchKey": "indexing.MockIndexEnqueuer",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockIndexEnqueuer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockIndexEnqueuer struct {\n\t// QueueIndexesForPackageFunc is an instance of a mock function object\n\t// controlling the behavior of the method QueueIndexesForPackage.\n\tQueueIndexesForPackageFunc *IndexEnqueuerQueueIndexesForPackageFunc\n\t// QueueIndexesForRepositoryFunc is an instance of a mock function\n\t// object controlling the behavior of the method\n\t// QueueIndexesForRepository.\n\tQueueIndexesForRepositoryFunc *IndexEnqueuerQueueIndexesForRepositoryFunc\n}\n```\n\nMockIndexEnqueuer is a mock implementation of the IndexEnqueuer interface (from the package github.com/sourcegraph/sourcegraph/enterprise/cmd/worker/internal/codeintel/indexing) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#NewMockIndexEnqueuer",
                    "documentation": {
                      "identifier": "NewMockIndexEnqueuer",
                      "newPage": false,
                      "searchKey": "indexing.NewMockIndexEnqueuer",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockIndexEnqueuer() *MockIndexEnqueuer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockIndexEnqueuer() *MockIndexEnqueuer\n```\n\nNewMockIndexEnqueuer creates a new mock of the IndexEnqueuer interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#NewMockIndexEnqueuerFrom",
                    "documentation": {
                      "identifier": "NewMockIndexEnqueuerFrom",
                      "newPage": false,
                      "searchKey": "indexing.NewMockIndexEnqueuerFrom",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockIndexEnqueuerFrom(i IndexEnqueuer) *MockIndexEnqueuer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockIndexEnqueuerFrom(i IndexEnqueuer) *MockIndexEnqueuer\n```\n\nNewMockIndexEnqueuerFrom creates a new mock of the MockIndexEnqueuer interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockIndexEnqueuer.QueueIndexesForPackage",
                    "documentation": {
                      "identifier": "MockIndexEnqueuer.QueueIndexesForPackage",
                      "newPage": false,
                      "searchKey": "indexing.MockIndexEnqueuer.QueueIndexesForPackage",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockIndexEnqueuer) QueueIndexesForPackage(v0 context.Context, v1 semantic.Package) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockIndexEnqueuer) QueueIndexesForPackage(v0 context.Context, v1 semantic.Package) error\n```\n\nQueueIndexesForPackage delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockIndexEnqueuer.QueueIndexesForRepository",
                    "documentation": {
                      "identifier": "MockIndexEnqueuer.QueueIndexesForRepository",
                      "newPage": false,
                      "searchKey": "indexing.MockIndexEnqueuer.QueueIndexesForRepository",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockIndexEnqueuer) QueueIndexesForRepository(v0 context.Context, v1 int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockIndexEnqueuer) QueueIndexesForRepository(v0 context.Context, v1 int) error\n```\n\nQueueIndexesForRepository delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockIndexingRepoStore",
              "documentation": {
                "identifier": "MockIndexingRepoStore",
                "newPage": false,
                "searchKey": "indexing.MockIndexingRepoStore",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockIndexingRepoStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockIndexingRepoStore struct {\n\t// ListRepoNamesFunc is an instance of a mock function object\n\t// controlling the behavior of the method ListRepoNames.\n\tListRepoNamesFunc *IndexingRepoStoreListRepoNamesFunc\n}\n```\n\nMockIndexingRepoStore is a mock implementation of the IndexingRepoStore interface (from the package github.com/sourcegraph/sourcegraph/enterprise/cmd/worker/internal/codeintel/indexing) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#NewMockIndexingRepoStore",
                    "documentation": {
                      "identifier": "NewMockIndexingRepoStore",
                      "newPage": false,
                      "searchKey": "indexing.NewMockIndexingRepoStore",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockIndexingRepoStore() *MockIndexingRepoStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockIndexingRepoStore() *MockIndexingRepoStore\n```\n\nNewMockIndexingRepoStore creates a new mock of the IndexingRepoStore interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#NewMockIndexingRepoStoreFrom",
                    "documentation": {
                      "identifier": "NewMockIndexingRepoStoreFrom",
                      "newPage": false,
                      "searchKey": "indexing.NewMockIndexingRepoStoreFrom",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockIndexingRepoStoreFrom(i IndexingRepoStore) *MockIndexingRepoStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockIndexingRepoStoreFrom(i IndexingRepoStore) *MockIndexingRepoStore\n```\n\nNewMockIndexingRepoStoreFrom creates a new mock of the MockIndexingRepoStore interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockIndexingRepoStore.ListRepoNames",
                    "documentation": {
                      "identifier": "MockIndexingRepoStore.ListRepoNames",
                      "newPage": false,
                      "searchKey": "indexing.MockIndexingRepoStore.ListRepoNames",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockIndexingRepoStore) ListRepoNames(v0 context.Context, v1 database.ReposListOptions) ([]types.RepoName, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockIndexingRepoStore) ListRepoNames(v0 context.Context, v1 database.ReposListOptions) ([]types.RepoName, error)\n```\n\nListRepoNames delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockIndexingSettingStore",
              "documentation": {
                "identifier": "MockIndexingSettingStore",
                "newPage": false,
                "searchKey": "indexing.MockIndexingSettingStore",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockIndexingSettingStore struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockIndexingSettingStore struct {\n\t// GetLastestSchemaSettingsFunc is an instance of a mock function object\n\t// controlling the behavior of the method GetLastestSchemaSettings.\n\tGetLastestSchemaSettingsFunc *IndexingSettingStoreGetLastestSchemaSettingsFunc\n}\n```\n\nMockIndexingSettingStore is a mock implementation of the IndexingSettingStore interface (from the package github.com/sourcegraph/sourcegraph/enterprise/cmd/worker/internal/codeintel/indexing) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#NewMockIndexingSettingStore",
                    "documentation": {
                      "identifier": "NewMockIndexingSettingStore",
                      "newPage": false,
                      "searchKey": "indexing.NewMockIndexingSettingStore",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockIndexingSettingStore() *MockIndexingSettingStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockIndexingSettingStore() *MockIndexingSettingStore\n```\n\nNewMockIndexingSettingStore creates a new mock of the IndexingSettingStore interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#NewMockIndexingSettingStoreFrom",
                    "documentation": {
                      "identifier": "NewMockIndexingSettingStoreFrom",
                      "newPage": false,
                      "searchKey": "indexing.NewMockIndexingSettingStoreFrom",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockIndexingSettingStoreFrom(i IndexingSettingStore) *MockIndexingSettingStore"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockIndexingSettingStoreFrom(i IndexingSettingStore) *MockIndexingSettingStore\n```\n\nNewMockIndexingSettingStoreFrom creates a new mock of the MockIndexingSettingStore interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockIndexingSettingStore.GetLastestSchemaSettings",
                    "documentation": {
                      "identifier": "MockIndexingSettingStore.GetLastestSchemaSettings",
                      "newPage": false,
                      "searchKey": "indexing.MockIndexingSettingStore.GetLastestSchemaSettings",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockIndexingSettingStore) GetLastestSchemaSettings(v0 context.Context, v1 api.SettingsSubject) (*schema.Settings, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockIndexingSettingStore) GetLastestSchemaSettings(v0 context.Context, v1 api.SettingsSubject) (*schema.Settings, error)\n```\n\nGetLastestSchemaSettings delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockPackageReferenceScanner",
              "documentation": {
                "identifier": "MockPackageReferenceScanner",
                "newPage": false,
                "searchKey": "indexing.MockPackageReferenceScanner",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MockPackageReferenceScanner struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MockPackageReferenceScanner struct {\n\t// CloseFunc is an instance of a mock function object controlling the\n\t// behavior of the method Close.\n\tCloseFunc *PackageReferenceScannerCloseFunc\n\t// NextFunc is an instance of a mock function object controlling the\n\t// behavior of the method Next.\n\tNextFunc *PackageReferenceScannerNextFunc\n}\n```\n\nMockPackageReferenceScanner is a mock implementation of the PackageReferenceScanner interface (from the package github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/stores/dbstore) used for unit testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#NewMockPackageReferenceScanner",
                    "documentation": {
                      "identifier": "NewMockPackageReferenceScanner",
                      "newPage": false,
                      "searchKey": "indexing.NewMockPackageReferenceScanner",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockPackageReferenceScanner() *MockPackageReferenceScanner"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockPackageReferenceScanner() *MockPackageReferenceScanner\n```\n\nNewMockPackageReferenceScanner creates a new mock of the PackageReferenceScanner interface. All methods return zero values for all results, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#NewMockPackageReferenceScannerFrom",
                    "documentation": {
                      "identifier": "NewMockPackageReferenceScannerFrom",
                      "newPage": false,
                      "searchKey": "indexing.NewMockPackageReferenceScannerFrom",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMockPackageReferenceScannerFrom(i dbstore.PackageReferenceScanner) *MockPackageReferenceScanner"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMockPackageReferenceScannerFrom(i dbstore.PackageReferenceScanner) *MockPackageReferenceScanner\n```\n\nNewMockPackageReferenceScannerFrom creates a new mock of the MockPackageReferenceScanner interface. All methods delegate to the given implementation, unless overwritten. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockPackageReferenceScanner.Close",
                    "documentation": {
                      "identifier": "MockPackageReferenceScanner.Close",
                      "newPage": false,
                      "searchKey": "indexing.MockPackageReferenceScanner.Close",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockPackageReferenceScanner) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockPackageReferenceScanner) Close() error\n```\n\nClose delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#MockPackageReferenceScanner.Next",
                    "documentation": {
                      "identifier": "MockPackageReferenceScanner.Next",
                      "newPage": false,
                      "searchKey": "indexing.MockPackageReferenceScanner.Next",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MockPackageReferenceScanner) Next() (lsifstore.PackageReference, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MockPackageReferenceScanner) Next() (lsifstore.PackageReference, bool, error)\n```\n\nNext delegates to the next hook function in the queue and stores the parameter and result values of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerCloseFunc",
              "documentation": {
                "identifier": "PackageReferenceScannerCloseFunc",
                "newPage": false,
                "searchKey": "indexing.PackageReferenceScannerCloseFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PackageReferenceScannerCloseFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PackageReferenceScannerCloseFunc struct {\n\tdefaultHook func() error\n\thooks       []func() error\n\thistory     []PackageReferenceScannerCloseFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nPackageReferenceScannerCloseFunc describes the behavior when the Close method of the parent MockPackageReferenceScanner instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerCloseFunc.History",
                    "documentation": {
                      "identifier": "PackageReferenceScannerCloseFunc.History",
                      "newPage": false,
                      "searchKey": "indexing.PackageReferenceScannerCloseFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PackageReferenceScannerCloseFunc) History() []PackageReferenceScannerCloseFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PackageReferenceScannerCloseFunc) History() []PackageReferenceScannerCloseFuncCall\n```\n\nHistory returns a sequence of PackageReferenceScannerCloseFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerCloseFunc.PushHook",
                    "documentation": {
                      "identifier": "PackageReferenceScannerCloseFunc.PushHook",
                      "newPage": false,
                      "searchKey": "indexing.PackageReferenceScannerCloseFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PackageReferenceScannerCloseFunc) PushHook(hook func() error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PackageReferenceScannerCloseFunc) PushHook(hook func() error)\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Close method of the parent MockPackageReferenceScanner instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerCloseFunc.PushReturn",
                    "documentation": {
                      "identifier": "PackageReferenceScannerCloseFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "indexing.PackageReferenceScannerCloseFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PackageReferenceScannerCloseFunc) PushReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PackageReferenceScannerCloseFunc) PushReturn(r0 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerCloseFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "PackageReferenceScannerCloseFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "indexing.PackageReferenceScannerCloseFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PackageReferenceScannerCloseFunc) SetDefaultHook(hook func() error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PackageReferenceScannerCloseFunc) SetDefaultHook(hook func() error)\n```\n\nSetDefaultHook sets function that is called when the Close method of the parent MockPackageReferenceScanner instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerCloseFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "PackageReferenceScannerCloseFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "indexing.PackageReferenceScannerCloseFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PackageReferenceScannerCloseFunc) SetDefaultReturn(r0 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PackageReferenceScannerCloseFunc) SetDefaultReturn(r0 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerCloseFunc.appendCall",
                    "documentation": {
                      "identifier": "PackageReferenceScannerCloseFunc.appendCall",
                      "newPage": false,
                      "searchKey": "indexing.PackageReferenceScannerCloseFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PackageReferenceScannerCloseFunc) appendCall(r0 PackageReferenceScannerCloseFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PackageReferenceScannerCloseFunc) appendCall(r0 PackageReferenceScannerCloseFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerCloseFunc.nextHook",
                    "documentation": {
                      "identifier": "PackageReferenceScannerCloseFunc.nextHook",
                      "newPage": false,
                      "searchKey": "indexing.PackageReferenceScannerCloseFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PackageReferenceScannerCloseFunc) nextHook() func() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PackageReferenceScannerCloseFunc) nextHook() func() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerCloseFuncCall",
              "documentation": {
                "identifier": "PackageReferenceScannerCloseFuncCall",
                "newPage": false,
                "searchKey": "indexing.PackageReferenceScannerCloseFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PackageReferenceScannerCloseFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PackageReferenceScannerCloseFuncCall struct {\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 error\n}\n```\n\nPackageReferenceScannerCloseFuncCall is an object that describes an invocation of method Close on an instance of MockPackageReferenceScanner. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerCloseFuncCall.Args",
                    "documentation": {
                      "identifier": "PackageReferenceScannerCloseFuncCall.Args",
                      "newPage": false,
                      "searchKey": "indexing.PackageReferenceScannerCloseFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c PackageReferenceScannerCloseFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c PackageReferenceScannerCloseFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerCloseFuncCall.Results",
                    "documentation": {
                      "identifier": "PackageReferenceScannerCloseFuncCall.Results",
                      "newPage": false,
                      "searchKey": "indexing.PackageReferenceScannerCloseFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c PackageReferenceScannerCloseFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c PackageReferenceScannerCloseFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerNextFunc",
              "documentation": {
                "identifier": "PackageReferenceScannerNextFunc",
                "newPage": false,
                "searchKey": "indexing.PackageReferenceScannerNextFunc",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PackageReferenceScannerNextFunc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PackageReferenceScannerNextFunc struct {\n\tdefaultHook func() (lsifstore.PackageReference, bool, error)\n\thooks       []func() (lsifstore.PackageReference, bool, error)\n\thistory     []PackageReferenceScannerNextFuncCall\n\tmutex       sync.Mutex\n}\n```\n\nPackageReferenceScannerNextFunc describes the behavior when the Next method of the parent MockPackageReferenceScanner instance is invoked. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerNextFunc.History",
                    "documentation": {
                      "identifier": "PackageReferenceScannerNextFunc.History",
                      "newPage": false,
                      "searchKey": "indexing.PackageReferenceScannerNextFunc.History",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PackageReferenceScannerNextFunc) History() []PackageReferenceScannerNextFuncCall"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PackageReferenceScannerNextFunc) History() []PackageReferenceScannerNextFuncCall\n```\n\nHistory returns a sequence of PackageReferenceScannerNextFuncCall objects describing the invocations of this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerNextFunc.PushHook",
                    "documentation": {
                      "identifier": "PackageReferenceScannerNextFunc.PushHook",
                      "newPage": false,
                      "searchKey": "indexing.PackageReferenceScannerNextFunc.PushHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PackageReferenceScannerNextFunc) PushHook(hook func() (lsifstore.PackageReference, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PackageReferenceScannerNextFunc) PushHook(hook func() (lsifstore.PackageReference, bool, error))\n```\n\nPushHook adds a function to the end of hook queue. Each invocation of the Next method of the parent MockPackageReferenceScanner instance invokes the hook at the front of the queue and discards it. After the queue is empty, the default hook function is invoked for any future action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerNextFunc.PushReturn",
                    "documentation": {
                      "identifier": "PackageReferenceScannerNextFunc.PushReturn",
                      "newPage": false,
                      "searchKey": "indexing.PackageReferenceScannerNextFunc.PushReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PackageReferenceScannerNextFunc) PushReturn(r0 lsifstore.PackageReference, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PackageReferenceScannerNextFunc) PushReturn(r0 lsifstore.PackageReference, r1 bool, r2 error)\n```\n\nPushReturn calls PushDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerNextFunc.SetDefaultHook",
                    "documentation": {
                      "identifier": "PackageReferenceScannerNextFunc.SetDefaultHook",
                      "newPage": false,
                      "searchKey": "indexing.PackageReferenceScannerNextFunc.SetDefaultHook",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PackageReferenceScannerNextFunc) SetDefaultHook(hook func() (lsifstore.PackageReference, bool, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PackageReferenceScannerNextFunc) SetDefaultHook(hook func() (lsifstore.PackageReference, bool, error))\n```\n\nSetDefaultHook sets function that is called when the Next method of the parent MockPackageReferenceScanner instance is invoked and the hook queue is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerNextFunc.SetDefaultReturn",
                    "documentation": {
                      "identifier": "PackageReferenceScannerNextFunc.SetDefaultReturn",
                      "newPage": false,
                      "searchKey": "indexing.PackageReferenceScannerNextFunc.SetDefaultReturn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PackageReferenceScannerNextFunc) SetDefaultReturn(r0 lsifstore.PackageReference, r1 bool, r2 error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PackageReferenceScannerNextFunc) SetDefaultReturn(r0 lsifstore.PackageReference, r1 bool, r2 error)\n```\n\nSetDefaultReturn calls SetDefaultDefaultHook with a function that returns the given values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerNextFunc.appendCall",
                    "documentation": {
                      "identifier": "PackageReferenceScannerNextFunc.appendCall",
                      "newPage": false,
                      "searchKey": "indexing.PackageReferenceScannerNextFunc.appendCall",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PackageReferenceScannerNextFunc) appendCall(r0 PackageReferenceScannerNextFuncCall)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PackageReferenceScannerNextFunc) appendCall(r0 PackageReferenceScannerNextFuncCall)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerNextFunc.nextHook",
                    "documentation": {
                      "identifier": "PackageReferenceScannerNextFunc.nextHook",
                      "newPage": false,
                      "searchKey": "indexing.PackageReferenceScannerNextFunc.nextHook",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *PackageReferenceScannerNextFunc) nextHook() func() (lsifstore.PackageReference, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *PackageReferenceScannerNextFunc) nextHook() func() (lsifstore.PackageReference, bool, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerNextFuncCall",
              "documentation": {
                "identifier": "PackageReferenceScannerNextFuncCall",
                "newPage": false,
                "searchKey": "indexing.PackageReferenceScannerNextFuncCall",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PackageReferenceScannerNextFuncCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PackageReferenceScannerNextFuncCall struct {\n\t// Result0 is the value of the 1st result returned from this method\n\t// invocation.\n\tResult0 lsifstore.PackageReference\n\t// Result1 is the value of the 2nd result returned from this method\n\t// invocation.\n\tResult1 bool\n\t// Result2 is the value of the 3rd result returned from this method\n\t// invocation.\n\tResult2 error\n}\n```\n\nPackageReferenceScannerNextFuncCall is an object that describes an invocation of method Next on an instance of MockPackageReferenceScanner. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerNextFuncCall.Args",
                    "documentation": {
                      "identifier": "PackageReferenceScannerNextFuncCall.Args",
                      "newPage": false,
                      "searchKey": "indexing.PackageReferenceScannerNextFuncCall.Args",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c PackageReferenceScannerNextFuncCall) Args() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c PackageReferenceScannerNextFuncCall) Args() []interface{}\n```\n\nArgs returns an interface slice containing the arguments of this invocation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#PackageReferenceScannerNextFuncCall.Results",
                    "documentation": {
                      "identifier": "PackageReferenceScannerNextFuncCall.Results",
                      "newPage": false,
                      "searchKey": "indexing.PackageReferenceScannerNextFuncCall.Results",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c PackageReferenceScannerNextFuncCall) Results() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c PackageReferenceScannerNextFuncCall) Results() []interface{}\n```\n\nResults returns an interface slice containing the results of this invocation. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#dependencyIndexingSchedulerHandler",
              "documentation": {
                "identifier": "dependencyIndexingSchedulerHandler",
                "newPage": false,
                "searchKey": "indexing.dependencyIndexingSchedulerHandler",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type dependencyIndexingSchedulerHandler struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dependencyIndexingSchedulerHandler struct {\n\tdbStore       DBStore\n\tindexEnqueuer IndexEnqueuer\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#dependencyIndexingSchedulerHandler.Handle",
                    "documentation": {
                      "identifier": "dependencyIndexingSchedulerHandler.Handle",
                      "newPage": false,
                      "searchKey": "indexing.dependencyIndexingSchedulerHandler.Handle",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *dependencyIndexingSchedulerHandler) Handle(ctx context.Context, tx dbworkerstore.Store, record workerutil.Record) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *dependencyIndexingSchedulerHandler) Handle(ctx context.Context, tx dbworkerstore.Store, record workerutil.Record) error\n```\n\nHandle iterates all import monikers associated with a given upload that has recently completed processing. Each moniker is interpreted according to its scheme to determine the dependent repository and commit. A set of indexing jobs are enqueued for each repository and commit pair. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#dependencyIndexingSchedulerHandler.shouldIndexDependencies",
                    "documentation": {
                      "identifier": "dependencyIndexingSchedulerHandler.shouldIndexDependencies",
                      "newPage": false,
                      "searchKey": "indexing.dependencyIndexingSchedulerHandler.shouldIndexDependencies",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *dependencyIndexingSchedulerHandler) shouldIndexDependencies(ctx context.Context, store DBStore, uploadID int) (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *dependencyIndexingSchedulerHandler) shouldIndexDependencies(ctx context.Context, store DBStore, uploadID int) (bool, error)\n```\n\nshouldIndexDependencies returns true if the given upload should undergo dependency indexing. Currently, we're only enabling dependency indexing for a small, hard-coded list of repository identifiers in the Cloud env. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#operations",
              "documentation": {
                "identifier": "operations",
                "newPage": false,
                "searchKey": "indexing.operations",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type operations struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype operations struct {\n\tHandleIndexScheduler *observation.Operation\n\tQueueRepository      *observation.Operation\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#newOperations",
                    "documentation": {
                      "identifier": "newOperations",
                      "newPage": false,
                      "searchKey": "indexing.newOperations",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newOperations(observationContext *observation.Context) *operations"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newOperations(observationContext *observation.Context) *operations\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#NewDependencyIndexingScheduler",
              "documentation": {
                "identifier": "NewDependencyIndexingScheduler",
                "newPage": false,
                "searchKey": "indexing.NewDependencyIndexingScheduler",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewDependencyIndexingScheduler(dbStore DBStore,..."
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewDependencyIndexingScheduler(\n\tdbStore DBStore,\n\tworkerStore dbworkerstore.Store,\n\tenqueuer IndexEnqueuer,\n\tpollInterval time.Duration,\n\tnumProcessorRoutines int,\n\tworkerMetrics workerutil.WorkerMetrics,\n) *workerutil.Worker\n```\n\nNewDependencyIndexingScheduler returns a new worker instance that processes records from lsif_dependency_indexing_jobs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#NewIndexScheduler",
              "documentation": {
                "identifier": "NewIndexScheduler",
                "newPage": false,
                "searchKey": "indexing.NewIndexScheduler",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewIndexScheduler(dbStore DBStore,..."
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewIndexScheduler(\n\tdbStore DBStore,\n\tsettingStore IndexingSettingStore,\n\trepoStore IndexingRepoStore,\n\tindexEnqueuer IndexEnqueuer,\n\tinterval time.Duration,\n\tobservationContext *observation.Context,\n) goroutine.BackgroundRoutine\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#TestDependencyIndexingSchedulerHandler",
              "documentation": {
                "identifier": "TestDependencyIndexingSchedulerHandler",
                "newPage": false,
                "searchKey": "indexing.TestDependencyIndexingSchedulerHandler",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDependencyIndexingSchedulerHandler(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDependencyIndexingSchedulerHandler(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#TestDependencyIndexingSchedulerHandlerShouldSkipRepository",
              "documentation": {
                "identifier": "TestDependencyIndexingSchedulerHandlerShouldSkipRepository",
                "newPage": false,
                "searchKey": "indexing.TestDependencyIndexingSchedulerHandlerShouldSkipRepository",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDependencyIndexingSchedulerHandlerShouldSkipRepository(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDependencyIndexingSchedulerHandlerShouldSkipRepository(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#TestDisabledAutoindexConfiguration",
              "documentation": {
                "identifier": "TestDisabledAutoindexConfiguration",
                "newPage": false,
                "searchKey": "indexing.TestDisabledAutoindexConfiguration",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDisabledAutoindexConfiguration(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDisabledAutoindexConfiguration(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#TestIndexSchedulerUpdate",
              "documentation": {
                "identifier": "TestIndexSchedulerUpdate",
                "newPage": false,
                "searchKey": "indexing.TestIndexSchedulerUpdate",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIndexSchedulerUpdate(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIndexSchedulerUpdate(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#TestMain",
              "documentation": {
                "identifier": "TestMain",
                "newPage": false,
                "searchKey": "indexing.TestMain",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMain(m *testing.M)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMain(m *testing.M)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#deduplicateRepositoryIDs",
              "documentation": {
                "identifier": "deduplicateRepositoryIDs",
                "newPage": false,
                "searchKey": "indexing.deduplicateRepositoryIDs",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func deduplicateRepositoryIDs(ids ...[]int) (repositoryIDs []int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc deduplicateRepositoryIDs(ids ...[]int) (repositoryIDs []int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#init.index_scheduler_test.go",
              "documentation": {
                "identifier": "init.index_scheduler_test.go",
                "newPage": false,
                "searchKey": "indexing.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/enterprise/cmd/worker/internal/codeintel/indexing#isRepoNotExist",
              "documentation": {
                "identifier": "isRepoNotExist",
                "newPage": false,
                "searchKey": "indexing.isRepoNotExist",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isRepoNotExist(err error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isRepoNotExist(err error) bool\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
