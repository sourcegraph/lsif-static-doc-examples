{
  "pathID": "/schema",
  "documentation": {
    "identifier": "schema",
    "newPage": true,
    "searchKey": "schema",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package schema"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/schema#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/schema#AWSCodeCommitSchemaJSON",
              "documentation": {
                "identifier": "AWSCodeCommitSchemaJSON",
                "newPage": false,
                "searchKey": "schema.AWSCodeCommitSchemaJSON",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var AWSCodeCommitSchemaJSON"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar AWSCodeCommitSchemaJSON string\n```\n\nAWSCodeCommitSchemaJSON is the content of the file \"aws_codecommit.schema.json\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#BatchSpecSchemaJSON",
              "documentation": {
                "identifier": "BatchSpecSchemaJSON",
                "newPage": false,
                "searchKey": "schema.BatchSpecSchemaJSON",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var BatchSpecSchemaJSON"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar BatchSpecSchemaJSON string\n```\n\nBatchSpecSchemaJSON is the content of the file \"batch_spec.schema.json\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#BitbucketCloudSchemaJSON",
              "documentation": {
                "identifier": "BitbucketCloudSchemaJSON",
                "newPage": false,
                "searchKey": "schema.BitbucketCloudSchemaJSON",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var BitbucketCloudSchemaJSON"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar BitbucketCloudSchemaJSON string\n```\n\nBitbucketCloudSchemaJSON is the content of the file \"bitbucket_cloud.schema.json\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#BitbucketServerSchemaJSON",
              "documentation": {
                "identifier": "BitbucketServerSchemaJSON",
                "newPage": false,
                "searchKey": "schema.BitbucketServerSchemaJSON",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var BitbucketServerSchemaJSON"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar BitbucketServerSchemaJSON string\n```\n\nBitbucketServerSchemaJSON is the content of the file \"bitbucket_server.schema.json\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#ChangesetSpecSchemaJSON",
              "documentation": {
                "identifier": "ChangesetSpecSchemaJSON",
                "newPage": false,
                "searchKey": "schema.ChangesetSpecSchemaJSON",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ChangesetSpecSchemaJSON"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ChangesetSpecSchemaJSON string\n```\n\nChangesetSpecSchemaJSON is the content of the file \"changeset_spec.schema.json\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#GitHubSchemaJSON",
              "documentation": {
                "identifier": "GitHubSchemaJSON",
                "newPage": false,
                "searchKey": "schema.GitHubSchemaJSON",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var GitHubSchemaJSON"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar GitHubSchemaJSON string\n```\n\nGitHubSchemaJSON is the content of the file \"github.schema.json\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#GitLabSchemaJSON",
              "documentation": {
                "identifier": "GitLabSchemaJSON",
                "newPage": false,
                "searchKey": "schema.GitLabSchemaJSON",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var GitLabSchemaJSON"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar GitLabSchemaJSON string\n```\n\nGitLabSchemaJSON is the content of the file \"gitlab.schema.json\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#GitoliteSchemaJSON",
              "documentation": {
                "identifier": "GitoliteSchemaJSON",
                "newPage": false,
                "searchKey": "schema.GitoliteSchemaJSON",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var GitoliteSchemaJSON"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar GitoliteSchemaJSON string\n```\n\nGitoliteSchemaJSON is the content of the file \"gitolite.schema.json\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#OtherExternalServiceSchemaJSON",
              "documentation": {
                "identifier": "OtherExternalServiceSchemaJSON",
                "newPage": false,
                "searchKey": "schema.OtherExternalServiceSchemaJSON",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var OtherExternalServiceSchemaJSON"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar OtherExternalServiceSchemaJSON string\n```\n\nOtherExternalServiceSchemaJSON is the content of the file \"other_external_service.schema.json\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#PerforceSchemaJSON",
              "documentation": {
                "identifier": "PerforceSchemaJSON",
                "newPage": false,
                "searchKey": "schema.PerforceSchemaJSON",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var PerforceSchemaJSON"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar PerforceSchemaJSON string\n```\n\nPerforceSchemaJSON is the content of the file \"perforce.schema.json\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#PhabricatorSchemaJSON",
              "documentation": {
                "identifier": "PhabricatorSchemaJSON",
                "newPage": false,
                "searchKey": "schema.PhabricatorSchemaJSON",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var PhabricatorSchemaJSON"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar PhabricatorSchemaJSON string\n```\n\nPhabricatorSchemaJSON is the content of the file \"phabricator.schema.json\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#SettingsSchemaJSON",
              "documentation": {
                "identifier": "SettingsSchemaJSON",
                "newPage": false,
                "searchKey": "schema.SettingsSchemaJSON",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var SettingsSchemaJSON"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar SettingsSchemaJSON string\n```\n\nSettingsSchemaJSON is the content of the file \"settings.schema.json\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#SiteSchemaJSON",
              "documentation": {
                "identifier": "SiteSchemaJSON",
                "newPage": false,
                "searchKey": "schema.SiteSchemaJSON",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var SiteSchemaJSON"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar SiteSchemaJSON string\n```\n\nSiteSchemaJSON is the content of the file \"site.schema.json\". \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/schema#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/schema#AWSCodeCommitConnection",
              "documentation": {
                "identifier": "AWSCodeCommitConnection",
                "newPage": false,
                "searchKey": "schema.AWSCodeCommitConnection",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AWSCodeCommitConnection struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AWSCodeCommitConnection struct {\n\t// AccessKeyID description: The AWS access key ID to use when listing and updating repositories from AWS CodeCommit. Must have the AWSCodeCommitReadOnly IAM policy.\n\tAccessKeyID string `json:\"accessKeyID\"`\n\t// Exclude description: A list of repositories to never mirror from AWS CodeCommit.\n\t//\n\t// Supports excluding by name ({\"name\": \"git-codecommit.us-west-1.amazonaws.com/repo-name\"}) or by ARN ({\"id\": \"arn:aws:codecommit:us-west-1:999999999999:name\"}).\n\tExclude []*ExcludedAWSCodeCommitRepo `json:\"exclude,omitempty\"`\n\t// GitCredentials description: The Git credentials used for authentication when cloning an AWS CodeCommit repository over HTTPS.\n\t//\n\t// See the AWS CodeCommit documentation on Git credentials for CodeCommit: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html#git-credentials-code-commit.\n\t// For detailed instructions on how to create the credentials in IAM, see this page: https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html\n\tGitCredentials AWSCodeCommitGitCredentials `json:\"gitCredentials\"`\n\t// InitialRepositoryEnablement description: Deprecated and ignored field which will be removed entirely in the next release. AWS CodeCommit repositories can no longer be enabled or disabled explicitly. Configure which repositories should not be mirrored via \"exclude\" instead.\n\tInitialRepositoryEnablement bool `json:\"initialRepositoryEnablement,omitempty\"`\n\t// Region description: The AWS region in which to access AWS CodeCommit. See the list of supported regions at https://docs.aws.amazon.com/codecommit/latest/userguide/regions.html#regions-git.\n\tRegion string `json:\"region\"`\n\t// RepositoryPathPattern description: The pattern used to generate a the corresponding Sourcegraph repository name for an AWS CodeCommit repository. In the pattern, the variable \"{name}\" is replaced with the repository's name.\n\t//\n\t// For example, if your Sourcegraph instance is at https://src.example.com, then a repositoryPathPattern of \"awsrepos/{name}\" would mean that a AWS CodeCommit repository named \"myrepo\" is available on Sourcegraph at https://src.example.com/awsrepos/myrepo.\n\t//\n\t// It is important that the Sourcegraph repository name generated with this pattern be unique to this code host. If different code hosts generate repository names that collide, Sourcegraph's behavior is undefined.\n\tRepositoryPathPattern string `json:\"repositoryPathPattern,omitempty\"`\n\t// SecretAccessKey description: The AWS secret access key (that corresponds to the AWS access key ID set in `accessKeyID`).\n\tSecretAccessKey string `json:\"secretAccessKey\"`\n}\n```\n\nAWSCodeCommitConnection description: Configuration for a connection to AWS CodeCommit. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#AWSCodeCommitGitCredentials",
              "documentation": {
                "identifier": "AWSCodeCommitGitCredentials",
                "newPage": false,
                "searchKey": "schema.AWSCodeCommitGitCredentials",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AWSCodeCommitGitCredentials struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AWSCodeCommitGitCredentials struct {\n\t// Password description: The Git password\n\tPassword string `json:\"password\"`\n\t// Username description: The Git username\n\tUsername string `json:\"username\"`\n}\n```\n\nAWSCodeCommitGitCredentials description: The Git credentials used for authentication when cloning an AWS CodeCommit repository over HTTPS. \n\nSee the AWS CodeCommit documentation on Git credentials for CodeCommit: [https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html#git-credentials-code-commit](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html#git-credentials-code-commit). For detailed instructions on how to create the credentials in IAM, see this page: [https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html](https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#AWSKMSEncryptionKey",
              "documentation": {
                "identifier": "AWSKMSEncryptionKey",
                "newPage": false,
                "searchKey": "schema.AWSKMSEncryptionKey",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AWSKMSEncryptionKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AWSKMSEncryptionKey struct {\n\tCredentialsFile string `json:\"credentialsFile,omitempty\"`\n\tKeyId           string `json:\"keyId\"`\n\tRegion          string `json:\"region,omitempty\"`\n\tType            string `json:\"type\"`\n}\n```\n\nAWSKMSEncryptionKey description: AWS KMS Encryption Key, used to encrypt data in AWS environments \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Action",
              "documentation": {
                "identifier": "Action",
                "newPage": false,
                "searchKey": "schema.Action",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Action struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Action struct {\n\tActionItem       *ActionItem   `json:\"actionItem,omitempty\"`\n\tCategory         string        `json:\"category,omitempty\"`\n\tCommand          string        `json:\"command,omitempty\"`\n\tCommandArguments []interface{} `json:\"commandArguments,omitempty\"`\n\tIconURL          string        `json:\"iconURL,omitempty\"`\n\tId               string        `json:\"id,omitempty\"`\n\tTitle            string        `json:\"title,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#ActionItem",
              "documentation": {
                "identifier": "ActionItem",
                "newPage": false,
                "searchKey": "schema.ActionItem",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ActionItem struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ActionItem struct {\n\tDescription string `json:\"description,omitempty\"`\n\tIconURL     string `json:\"iconURL,omitempty\"`\n\tLabel       string `json:\"label,omitempty\"`\n}\n```\n\nActionItem description: The action item. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#AdditionalProperties",
              "documentation": {
                "identifier": "AdditionalProperties",
                "newPage": false,
                "searchKey": "schema.AdditionalProperties",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AdditionalProperties struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AdditionalProperties struct {\n\t// Format description: The expected format of the output. If set, the output is being parsed in that format before being stored in the var. If not set, 'text' is assumed to the format.\n\tFormat string `json:\"format,omitempty\"`\n\t// Value description: The value of the output, which can be a template string.\n\tValue string `json:\"value\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#ApiRatelimit",
              "documentation": {
                "identifier": "ApiRatelimit",
                "newPage": false,
                "searchKey": "schema.ApiRatelimit",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ApiRatelimit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ApiRatelimit struct {\n\t// Enabled description: Whether API rate limiting is enabled\n\tEnabled bool `json:\"enabled\"`\n\t// Overrides description: An array of rate limit overrides\n\tOverrides []*Overrides `json:\"overrides,omitempty\"`\n\t// PerIP description: Limit granted per IP per hour, only applied to anonymous users\n\tPerIP int `json:\"perIP\"`\n\t// PerUser description: Limit granted per user per hour\n\tPerUser int `json:\"perUser\"`\n}\n```\n\nApiRatelimit description: Configuration for API rate limiting \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#AuthAccessTokens",
              "documentation": {
                "identifier": "AuthAccessTokens",
                "newPage": false,
                "searchKey": "schema.AuthAccessTokens",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AuthAccessTokens struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AuthAccessTokens struct {\n\t// Allow description: Allow or restrict the use of access tokens. The default is \"all-users-create\", which enables all users to create access tokens. Use \"none\" to disable access tokens entirely. Use \"site-admin-create\" to restrict creation of new tokens to admin users (existing tokens will still work until revoked).\n\tAllow string `json:\"allow,omitempty\"`\n}\n```\n\nAuthAccessTokens description: Settings for access tokens, which enable external tools to access the Sourcegraph API with the privileges of the user. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#AuthProviderCommon",
              "documentation": {
                "identifier": "AuthProviderCommon",
                "newPage": false,
                "searchKey": "schema.AuthProviderCommon",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AuthProviderCommon struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AuthProviderCommon struct {\n\t// DisplayName description: The name to use when displaying this authentication provider in the UI. Defaults to an auto-generated name with the type of authentication provider and other relevant identifiers (such as a hostname).\n\tDisplayName string `json:\"displayName,omitempty\"`\n}\n```\n\nAuthProviderCommon description: Common properties for authentication providers. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#AuthProviders",
              "documentation": {
                "identifier": "AuthProviders",
                "newPage": false,
                "searchKey": "schema.AuthProviders",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AuthProviders struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AuthProviders struct {\n\tBuiltin       *BuiltinAuthProvider\n\tSaml          *SAMLAuthProvider\n\tOpenidconnect *OpenIDConnectAuthProvider\n\tHttpHeader    *HTTPHeaderAuthProvider\n\tGithub        *GitHubAuthProvider\n\tGitlab        *GitLabAuthProvider\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/schema#AuthProviders.MarshalJSON",
                    "documentation": {
                      "identifier": "AuthProviders.MarshalJSON",
                      "newPage": false,
                      "searchKey": "schema.AuthProviders.MarshalJSON",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v AuthProviders) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v AuthProviders) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/schema#AuthProviders.UnmarshalJSON",
                    "documentation": {
                      "identifier": "AuthProviders.UnmarshalJSON",
                      "newPage": false,
                      "searchKey": "schema.AuthProviders.UnmarshalJSON",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *AuthProviders) UnmarshalJSON(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *AuthProviders) UnmarshalJSON(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/schema#BatchChangeRolloutWindow",
              "documentation": {
                "identifier": "BatchChangeRolloutWindow",
                "newPage": false,
                "searchKey": "schema.BatchChangeRolloutWindow",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchChangeRolloutWindow struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchChangeRolloutWindow struct {\n\t// Days description: Day(s) the window applies to. If omitted, this rule applies to all days of the week.\n\tDays []string `json:\"days,omitempty\"`\n\t// End description: Window end time. If omitted, no time window is applied to the day(s) that match this rule.\n\tEnd string `json:\"end,omitempty\"`\n\t// Rate description: The rate changesets will be published at.\n\tRate interface{} `json:\"rate\"`\n\t// Start description: Window start time. If omitted, no time window is applied to the day(s) that match this rule.\n\tStart string `json:\"start,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#BatchSpec",
              "documentation": {
                "identifier": "BatchSpec",
                "newPage": false,
                "searchKey": "schema.BatchSpec",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BatchSpec struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BatchSpec struct {\n\t// ChangesetTemplate description: A template describing how to create (and update) changesets with the file changes produced by the command steps.\n\tChangesetTemplate *ChangesetTemplate `json:\"changesetTemplate,omitempty\"`\n\t// Description description: The description of the batch change.\n\tDescription string `json:\"description,omitempty\"`\n\t// ImportChangesets description: Import existing changesets on code hosts.\n\tImportChangesets []*ImportChangesets `json:\"importChangesets,omitempty\"`\n\t// Name description: The name of the batch change, which is unique among all batch changes in the namespace. A batch change's name is case-preserving.\n\tName string `json:\"name\"`\n\t// On description: The set of repositories (and branches) to run the batch change on, specified as a list of search queries (that match repositories) and/or specific repositories.\n\tOn []interface{} `json:\"on,omitempty\"`\n\t// Steps description: The sequence of commands to run (for each repository branch matched in the `on` property) to produce the workspace changes that will be included in the batch change.\n\tSteps []*Step `json:\"steps,omitempty\"`\n\t// TransformChanges description: Optional transformations to apply to the changes produced in each repository.\n\tTransformChanges *TransformChanges `json:\"transformChanges,omitempty\"`\n\t// Workspaces description: Individual workspace configurations for one or more repositories that define which workspaces to use for the execution of steps in the repositories.\n\tWorkspaces []*WorkspaceConfiguration `json:\"workspaces,omitempty\"`\n}\n```\n\nBatchSpec description: A batch specification, which describes the batch change and what kinds of changes to make (or what existing changesets to track). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#BitbucketCloudConnection",
              "documentation": {
                "identifier": "BitbucketCloudConnection",
                "newPage": false,
                "searchKey": "schema.BitbucketCloudConnection",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BitbucketCloudConnection struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BitbucketCloudConnection struct {\n\t// ApiURL description: The API URL of Bitbucket Cloud, such as https://api.bitbucket.org. Generally, admin should not modify the value of this option because Bitbucket Cloud is a public hosting platform.\n\tApiURL string `json:\"apiURL,omitempty\"`\n\t// AppPassword description: The app password to use when authenticating to the Bitbucket Cloud. Also set the corresponding \"username\" field.\n\tAppPassword string `json:\"appPassword\"`\n\t// Exclude description: A list of repositories to never mirror from Bitbucket Cloud. Takes precedence over \"teams\" configuration.\n\t//\n\t// Supports excluding by name ({\"name\": \"myorg/myrepo\"}) or by UUID ({\"uuid\": \"{fceb73c7-cef6-4abe-956d-e471281126bd}\"}).\n\tExclude []*ExcludedBitbucketCloudRepo `json:\"exclude,omitempty\"`\n\t// GitURLType description: The type of Git URLs to use for cloning and fetching Git repositories on this Bitbucket Cloud.\n\t//\n\t// If \"http\", Sourcegraph will access Bitbucket Cloud repositories using Git URLs of the form https://bitbucket.org/myteam/myproject.git.\n\t//\n\t// If \"ssh\", Sourcegraph will access Bitbucket Cloud repositories using Git URLs of the form git@bitbucket.org:myteam/myproject.git. See the documentation for how to provide SSH private keys and known_hosts: https://docs.sourcegraph.com/admin/repo/auth#repositories-that-need-http-s-or-ssh-authentication.\n\tGitURLType string `json:\"gitURLType,omitempty\"`\n\t// RateLimit description: Rate limit applied when making background API requests to Bitbucket Cloud.\n\tRateLimit *BitbucketCloudRateLimit `json:\"rateLimit,omitempty\"`\n\t// RepositoryPathPattern description: The pattern used to generate the corresponding Sourcegraph repository name for a Bitbucket Cloud repository.\n\t//\n\t//  - \"{host}\" is replaced with the Bitbucket Cloud URL's host (such as bitbucket.org),  and \"{nameWithOwner}\" is replaced with the Bitbucket Cloud repository's \"owner/path\" (such as \"myorg/myrepo\").\n\t//\n\t// For example, if your Bitbucket Cloud is https://bitbucket.org and your Sourcegraph is https://src.example.com, then a repositoryPathPattern of \"{host}/{nameWithOwner}\" would mean that a Bitbucket Cloud repository at https://bitbucket.org/alice/my-repo is available on Sourcegraph at https://src.example.com/bitbucket.org/alice/my-repo.\n\t//\n\t// It is important that the Sourcegraph repository name generated with this pattern be unique to this code host. If different code hosts generate repository names that collide, Sourcegraph's behavior is undefined.\n\tRepositoryPathPattern string `json:\"repositoryPathPattern,omitempty\"`\n\t// Teams description: An array of team names identifying Bitbucket Cloud teams whose repositories should be mirrored on Sourcegraph.\n\tTeams []string `json:\"teams,omitempty\"`\n\t// Url description: URL of Bitbucket Cloud, such as https://bitbucket.org. Generally, admin should not modify the value of this option because Bitbucket Cloud is a public hosting platform.\n\tUrl string `json:\"url\"`\n\t// Username description: The username to use when authenticating to the Bitbucket Cloud. Also set the corresponding \"appPassword\" field.\n\tUsername string `json:\"username\"`\n}\n```\n\nBitbucketCloudConnection description: Configuration for a connection to Bitbucket Cloud. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#BitbucketCloudRateLimit",
              "documentation": {
                "identifier": "BitbucketCloudRateLimit",
                "newPage": false,
                "searchKey": "schema.BitbucketCloudRateLimit",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BitbucketCloudRateLimit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BitbucketCloudRateLimit struct {\n\t// Enabled description: true if rate limiting is enabled.\n\tEnabled bool `json:\"enabled\"`\n\t// RequestsPerHour description: Requests per hour permitted. This is an average, calculated per second. Internally, the burst limit is set to 500, which implies that for a requests per hour limit as low as 1, users will continue to be able to send a maximum of 500 requests immediately, provided that the complexity cost of each request is 1.\n\tRequestsPerHour float64 `json:\"requestsPerHour\"`\n}\n```\n\nBitbucketCloudRateLimit description: Rate limit applied when making background API requests to Bitbucket Cloud. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#BitbucketServerAuthorization",
              "documentation": {
                "identifier": "BitbucketServerAuthorization",
                "newPage": false,
                "searchKey": "schema.BitbucketServerAuthorization",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BitbucketServerAuthorization struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BitbucketServerAuthorization struct {\n\t// IdentityProvider description: The source of identity to use when computing permissions. This defines how to compute the Bitbucket Server identity to use for a given Sourcegraph user. When 'username' is used, Sourcegraph assumes usernames are identical in Sourcegraph and Bitbucket Server accounts and `auth.enableUsernameChanges` must be set to false for security reasons.\n\tIdentityProvider BitbucketServerIdentityProvider `json:\"identityProvider\"`\n\t// Oauth description: OAuth configuration specified when creating the Bitbucket Server Application Link with incoming authentication. Two Legged OAuth with 'ExecuteAs=admin' must be enabled as well as user impersonation.\n\tOauth BitbucketServerOAuth `json:\"oauth\"`\n}\n```\n\nBitbucketServerAuthorization description: If non-null, enforces Bitbucket Server repository permissions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#BitbucketServerConnection",
              "documentation": {
                "identifier": "BitbucketServerConnection",
                "newPage": false,
                "searchKey": "schema.BitbucketServerConnection",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BitbucketServerConnection struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BitbucketServerConnection struct {\n\t// Authorization description: If non-null, enforces Bitbucket Server repository permissions.\n\tAuthorization *BitbucketServerAuthorization `json:\"authorization,omitempty\"`\n\t// Certificate description: TLS certificate of the Bitbucket Server instance. This is only necessary if the certificate is self-signed or signed by an internal CA. To get the certificate run `openssl s_client -connect HOST:443 -showcerts < /dev/null 2> /dev/null | openssl x509 -outform PEM`. To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.\n\tCertificate string `json:\"certificate,omitempty\"`\n\t// Exclude description: A list of repositories to never mirror from this Bitbucket Server instance. Takes precedence over \"repos\" and \"repositoryQuery\".\n\t//\n\t// Supports excluding by name ({\"name\": \"projectKey/repositorySlug\"}) or by ID ({\"id\": 42}).\n\tExclude []*ExcludedBitbucketServerRepo `json:\"exclude,omitempty\"`\n\t// ExcludePersonalRepositories description: Whether or not personal repositories should be excluded or not. When true, Sourcegraph will ignore personal repositories it may have access to. See https://docs.sourcegraph.com/integration/bitbucket_server#excluding-personal-repositories for more information.\n\tExcludePersonalRepositories bool `json:\"excludePersonalRepositories,omitempty\"`\n\t// GitURLType description: The type of Git URLs to use for cloning and fetching Git repositories on this Bitbucket Server instance.\n\t//\n\t// If \"http\", Sourcegraph will access Bitbucket Server repositories using Git URLs of the form http(s)://bitbucket.example.com/scm/myproject/myrepo.git (using https: if the Bitbucket Server instance uses HTTPS).\n\t//\n\t// If \"ssh\", Sourcegraph will access Bitbucket Server repositories using Git URLs of the form ssh://git@example.bitbucket.com/myproject/myrepo.git. See the documentation for how to provide SSH private keys and known_hosts: https://docs.sourcegraph.com/admin/repo/auth#repositories-that-need-http-s-or-ssh-authentication.\n\tGitURLType string `json:\"gitURLType,omitempty\"`\n\t// InitialRepositoryEnablement description: Deprecated and ignored field which will be removed entirely in the next release. BitBucket repositories can no longer be enabled or disabled explicitly.\n\tInitialRepositoryEnablement bool `json:\"initialRepositoryEnablement,omitempty\"`\n\t// Password description: The password to use when authenticating to the Bitbucket Server instance. Also set the corresponding \"username\" field.\n\t//\n\t// For Bitbucket Server instances that support personal access tokens (Bitbucket Server version 5.5 and newer), it is recommended to provide a token instead (in the \"token\" field).\n\tPassword string `json:\"password,omitempty\"`\n\t// Plugin description: Configuration for Bitbucket Server Sourcegraph plugin\n\tPlugin *BitbucketServerPlugin `json:\"plugin,omitempty\"`\n\t// RateLimit description: Rate limit applied when making background API requests to BitbucketServer.\n\tRateLimit *BitbucketServerRateLimit `json:\"rateLimit,omitempty\"`\n\t// Repos description: An array of repository \"projectKey/repositorySlug\" strings specifying repositories to mirror on Sourcegraph.\n\tRepos []string `json:\"repos,omitempty\"`\n\t// RepositoryPathPattern description: The pattern used to generate the corresponding Sourcegraph repository name for a Bitbucket Server repository.\n\t//\n\t//  - \"{host}\" is replaced with the Bitbucket Server URL's host (such as bitbucket.example.com)\n\t//  - \"{projectKey}\" is replaced with the Bitbucket repository's parent project key (such as \"PRJ\")\n\t//  - \"{repositorySlug}\" is replaced with the Bitbucket repository's slug key (such as \"my-repo\").\n\t//\n\t// For example, if your Bitbucket Server is https://bitbucket.example.com and your Sourcegraph is https://src.example.com, then a repositoryPathPattern of \"{host}/{projectKey}/{repositorySlug}\" would mean that a Bitbucket Server repository at https://bitbucket.example.com/projects/PRJ/repos/my-repo is available on Sourcegraph at https://src.example.com/bitbucket.example.com/PRJ/my-repo.\n\t//\n\t// It is important that the Sourcegraph repository name generated with this pattern be unique to this code host. If different code hosts generate repository names that collide, Sourcegraph's behavior is undefined.\n\tRepositoryPathPattern string `json:\"repositoryPathPattern,omitempty\"`\n\t// RepositoryQuery description: An array of strings specifying which repositories to mirror on Sourcegraph. Each string is a URL query string with parameters that filter the list of returned repos. Examples: \"?name=my-repo&projectname=PROJECT&visibility=private\".\n\t//\n\t// The special string \"none\" can be used as the only element to disable this feature. Repositories matched by multiple query strings are only imported once. Here's the official Bitbucket Server documentation about which query string parameters are valid: https://docs.atlassian.com/bitbucket-server/rest/6.1.2/bitbucket-rest.html#idp355\n\tRepositoryQuery []string `json:\"repositoryQuery,omitempty\"`\n\t// Token description: A Bitbucket Server personal access token with Read permissions. When using batch changes, the token needs Write permissions. Create one at https://[your-bitbucket-hostname]/plugins/servlet/access-tokens/add. Also set the corresponding \"username\" field.\n\t//\n\t// For Bitbucket Server instances that don't support personal access tokens (Bitbucket Server version 5.4 and older), specify user-password credentials in the \"username\" and \"password\" fields.\n\tToken string `json:\"token,omitempty\"`\n\t// Url description: URL of a Bitbucket Server instance, such as https://bitbucket.example.com.\n\tUrl string `json:\"url\"`\n\t// Username description: The username to use when authenticating to the Bitbucket Server instance. Also set the corresponding \"token\" or \"password\" field.\n\tUsername string `json:\"username\"`\n\t// Webhooks description: DEPRECATED: Switch to \"plugin.webhooks\"\n\tWebhooks *Webhooks `json:\"webhooks,omitempty\"`\n}\n```\n\nBitbucketServerConnection description: Configuration for a connection to Bitbucket Server. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/schema#BitbucketServerConnection.WebhookSecret",
                    "documentation": {
                      "identifier": "BitbucketServerConnection.WebhookSecret",
                      "newPage": false,
                      "searchKey": "schema.BitbucketServerConnection.WebhookSecret",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *BitbucketServerConnection) WebhookSecret() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *BitbucketServerConnection) WebhookSecret() string\n```\n\nWebhookSecret returns the webhook secret from a BBS config \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/schema#BitbucketServerIdentityProvider",
              "documentation": {
                "identifier": "BitbucketServerIdentityProvider",
                "newPage": false,
                "searchKey": "schema.BitbucketServerIdentityProvider",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BitbucketServerIdentityProvider struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BitbucketServerIdentityProvider struct {\n\tUsername *BitbucketServerUsernameIdentity\n}\n```\n\nBitbucketServerIdentityProvider description: The source of identity to use when computing permissions. This defines how to compute the Bitbucket Server identity to use for a given Sourcegraph user. When 'username' is used, Sourcegraph assumes usernames are identical in Sourcegraph and Bitbucket Server accounts and `auth.enableUsernameChanges` must be set to false for security reasons. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/schema#BitbucketServerIdentityProvider.MarshalJSON",
                    "documentation": {
                      "identifier": "BitbucketServerIdentityProvider.MarshalJSON",
                      "newPage": false,
                      "searchKey": "schema.BitbucketServerIdentityProvider.MarshalJSON",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v BitbucketServerIdentityProvider) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v BitbucketServerIdentityProvider) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/schema#BitbucketServerIdentityProvider.UnmarshalJSON",
                    "documentation": {
                      "identifier": "BitbucketServerIdentityProvider.UnmarshalJSON",
                      "newPage": false,
                      "searchKey": "schema.BitbucketServerIdentityProvider.UnmarshalJSON",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *BitbucketServerIdentityProvider) UnmarshalJSON(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *BitbucketServerIdentityProvider) UnmarshalJSON(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/schema#BitbucketServerOAuth",
              "documentation": {
                "identifier": "BitbucketServerOAuth",
                "newPage": false,
                "searchKey": "schema.BitbucketServerOAuth",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BitbucketServerOAuth struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BitbucketServerOAuth struct {\n\t// ConsumerKey description: The OAuth consumer key specified when creating the Bitbucket Server Application Link with incoming authentication.\n\tConsumerKey string `json:\"consumerKey\"`\n\t// SigningKey description: Base64 encoding of the OAuth PEM encoded RSA private key used to generate the public key specified when creating the Bitbucket Server Application Link with incoming authentication.\n\tSigningKey string `json:\"signingKey\"`\n}\n```\n\nBitbucketServerOAuth description: OAuth configuration specified when creating the Bitbucket Server Application Link with incoming authentication. Two Legged OAuth with 'ExecuteAs=admin' must be enabled as well as user impersonation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#BitbucketServerPlugin",
              "documentation": {
                "identifier": "BitbucketServerPlugin",
                "newPage": false,
                "searchKey": "schema.BitbucketServerPlugin",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BitbucketServerPlugin struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BitbucketServerPlugin struct {\n\t// Permissions description: Enables fetching Bitbucket Server permissions through the roaring bitmap endpoint. Warning: there may be performance degradation under significant load.\n\tPermissions string                         `json:\"permissions,omitempty\"`\n\tWebhooks    *BitbucketServerPluginWebhooks `json:\"webhooks,omitempty\"`\n}\n```\n\nBitbucketServerPlugin description: Configuration for Bitbucket Server Sourcegraph plugin \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#BitbucketServerPluginWebhooks",
              "documentation": {
                "identifier": "BitbucketServerPluginWebhooks",
                "newPage": false,
                "searchKey": "schema.BitbucketServerPluginWebhooks",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BitbucketServerPluginWebhooks struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BitbucketServerPluginWebhooks struct {\n\t// DisableSync description: Disallow Sourcegraph from automatically syncing webhook config with the Bitbucket Server instance. For details of how the webhook is configured, see our docs: https://docs.sourcegraph.com/admin/external_service/bitbucket_server#webhooks\n\tDisableSync bool `json:\"disableSync,omitempty\"`\n\t// Secret description: Secret for authenticating incoming webhook payloads\n\tSecret string `json:\"secret\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#BitbucketServerRateLimit",
              "documentation": {
                "identifier": "BitbucketServerRateLimit",
                "newPage": false,
                "searchKey": "schema.BitbucketServerRateLimit",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BitbucketServerRateLimit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BitbucketServerRateLimit struct {\n\t// Enabled description: true if rate limiting is enabled.\n\tEnabled bool `json:\"enabled\"`\n\t// RequestsPerHour description: Requests per hour permitted. This is an average, calculated per second. Internally, the burst limit is set to 500, which implies that for a requests per hour limit as low as 1, users will continue to be able to send a maximum of 500 requests immediately, provided that the complexity cost of each request is 1.\n\tRequestsPerHour float64 `json:\"requestsPerHour\"`\n}\n```\n\nBitbucketServerRateLimit description: Rate limit applied when making background API requests to BitbucketServer. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#BitbucketServerUsernameIdentity",
              "documentation": {
                "identifier": "BitbucketServerUsernameIdentity",
                "newPage": false,
                "searchKey": "schema.BitbucketServerUsernameIdentity",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BitbucketServerUsernameIdentity struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BitbucketServerUsernameIdentity struct {\n\tType string `json:\"type\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#BrandAssets",
              "documentation": {
                "identifier": "BrandAssets",
                "newPage": false,
                "searchKey": "schema.BrandAssets",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BrandAssets struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BrandAssets struct {\n\t// Logo description: The URL to the image used on the homepage. This will replace the Sourcegraph logo on the homepage. Maximum width: 320px. We recommend using the following file formats: SVG, PNG\n\tLogo string `json:\"logo,omitempty\"`\n\t// Symbol description: The URL to the symbol used as the search icon. Recommended size: 24x24px. We recommend using the following file formats: SVG, PNG, ICO\n\tSymbol string `json:\"symbol,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Branding",
              "documentation": {
                "identifier": "Branding",
                "newPage": false,
                "searchKey": "schema.Branding",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Branding struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Branding struct {\n\t// BrandName description: String to display everywhere the brand name should be displayed. Defaults to \"Sourcegraph\"\n\tBrandName string       `json:\"brandName,omitempty\"`\n\tDark      *BrandAssets `json:\"dark,omitempty\"`\n\t// DisableSymbolSpin description: Prevents the icon in the top-left corner of the screen from spinning on hover.\n\tDisableSymbolSpin bool `json:\"disableSymbolSpin,omitempty\"`\n\t// Favicon description: The URL of the favicon to be used for your instance. We recommend using the following file format: ICO\n\tFavicon string       `json:\"favicon,omitempty\"`\n\tLight   *BrandAssets `json:\"light,omitempty\"`\n}\n```\n\nBranding description: Customize Sourcegraph homepage logo and search icon. \n\nOnly available in Sourcegraph Enterprise. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#BuiltinAuthProvider",
              "documentation": {
                "identifier": "BuiltinAuthProvider",
                "newPage": false,
                "searchKey": "schema.BuiltinAuthProvider",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BuiltinAuthProvider struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BuiltinAuthProvider struct {\n\t// AllowSignup description: Allows new visitors to sign up for accounts. The sign-up page will be enabled and accessible to all visitors.\n\t//\n\t// SECURITY: If the site has no users (i.e., during initial setup), it will always allow the first user to sign up and become site admin **without any approval** (first user to sign up becomes the admin).\n\tAllowSignup bool   `json:\"allowSignup,omitempty\"`\n\tType        string `json:\"type\"`\n}\n```\n\nBuiltinAuthProvider description: Configures the builtin username-password authentication provider. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#ChangesetTemplate",
              "documentation": {
                "identifier": "ChangesetTemplate",
                "newPage": false,
                "searchKey": "schema.ChangesetTemplate",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChangesetTemplate struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChangesetTemplate struct {\n\t// Body description: The body (description) of the changeset.\n\tBody string `json:\"body,omitempty\"`\n\t// Branch description: The name of the Git branch to create or update on each repository with the changes.\n\tBranch string `json:\"branch\"`\n\t// Commit description: The Git commit to create with the changes.\n\tCommit ExpandedGitCommitDescription `json:\"commit\"`\n\t// Published description: Whether to publish the changeset. An unpublished changeset can be previewed on Sourcegraph by any person who can view the batch change, but its commit, branch, and pull request aren't created on the code host. A published changeset results in a commit, branch, and pull request being created on the code host.\n\tPublished interface{} `json:\"published\"`\n\t// Title description: The title of the changeset.\n\tTitle string `json:\"title\"`\n}\n```\n\nChangesetTemplate description: A template describing how to create (and update) changesets with the file changes produced by the command steps. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#CloneURLToRepositoryName",
              "documentation": {
                "identifier": "CloneURLToRepositoryName",
                "newPage": false,
                "searchKey": "schema.CloneURLToRepositoryName",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CloneURLToRepositoryName struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CloneURLToRepositoryName struct {\n\t// From description: A regular expression that matches a set of clone URLs. The regular expression should use the Go regular expression syntax (https://golang.org/pkg/regexp/) and contain at least one named capturing group. The regular expression matches partially by default, so use \"^...$\" if whole-string matching is desired.\n\tFrom string `json:\"from\"`\n\t// To description: The repository name output pattern. This should use `{matchGroup}` syntax to reference the capturing groups from the `from` field.\n\tTo string `json:\"to\"`\n}\n```\n\nCloneURLToRepositoryName description: Describes a mapping from clone URL to repository name. The `from` field contains a regular expression with named capturing groups. The `to` field contains a template string that references capturing group names. For instance, if `from` is \"^../(?P<name>\\w+)$\" and `to` is \"github.com/user/{name}\", the clone URL \"../myRepository\" would be mapped to the repository name \"github.com/user/myRepository\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#CloudKMSEncryptionKey",
              "documentation": {
                "identifier": "CloudKMSEncryptionKey",
                "newPage": false,
                "searchKey": "schema.CloudKMSEncryptionKey",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CloudKMSEncryptionKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CloudKMSEncryptionKey struct {\n\tCredentialsFile string `json:\"credentialsFile,omitempty\"`\n\tKeyname         string `json:\"keyname\"`\n\tType            string `json:\"type\"`\n}\n```\n\nCloudKMSEncryptionKey description: Google Cloud KMS Encryption Key, used to encrypt data in Google Cloud environments \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Contributions",
              "documentation": {
                "identifier": "Contributions",
                "newPage": false,
                "searchKey": "schema.Contributions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Contributions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Contributions struct {\n\tActions       []*Action          `json:\"actions,omitempty\"`\n\tConfiguration *jsonschema.Schema `json:\"configuration,omitempty\"`\n\tMenus         *Menus             `json:\"menus,omitempty\"`\n}\n```\n\nContributions description: Features contributed by this extension. Extensions may also register certain types of contributions dynamically. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#CustomGitFetchMapping",
              "documentation": {
                "identifier": "CustomGitFetchMapping",
                "newPage": false,
                "searchKey": "schema.CustomGitFetchMapping",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CustomGitFetchMapping struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CustomGitFetchMapping struct {\n\t// DomainPath description: Git clone URL domain/path\n\tDomainPath string `json:\"domainPath\"`\n\t// Fetch description: Git fetch command\n\tFetch string `json:\"fetch\"`\n}\n```\n\nCustomGitFetchMapping description: Mapping from Git clone URl domain/path to git fetch command. The `domainPath` field contains the Git clone URL domain/path part. The `fetch` field contains the custom git fetch command. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#DebugLog",
              "documentation": {
                "identifier": "DebugLog",
                "newPage": false,
                "searchKey": "schema.DebugLog",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DebugLog struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DebugLog struct {\n\t// ExtsvcGitlab description: Log GitLab API requests.\n\tExtsvcGitlab bool `json:\"extsvc.gitlab,omitempty\"`\n}\n```\n\nDebugLog description: Turns on debug logging for specific debugging scenarios. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Dotcom",
              "documentation": {
                "identifier": "Dotcom",
                "newPage": false,
                "searchKey": "schema.Dotcom",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Dotcom struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Dotcom struct {\n\t// SlackLicenseExpirationWebhook description: Slack webhook for upcoming license expiration notifications.\n\tSlackLicenseExpirationWebhook string `json:\"slackLicenseExpirationWebhook,omitempty\"`\n}\n```\n\nDotcom description: Configuration options for Sourcegraph.com only. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#EncryptionKey",
              "documentation": {
                "identifier": "EncryptionKey",
                "newPage": false,
                "searchKey": "schema.EncryptionKey",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EncryptionKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EncryptionKey struct {\n\tCloudkms *CloudKMSEncryptionKey\n\tAwskms   *AWSKMSEncryptionKey\n\tMounted  *MountedEncryptionKey\n\tNoop     *NoOpEncryptionKey\n}\n```\n\nEncryptionKey description: Config for a key \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/schema#EncryptionKey.MarshalJSON",
                    "documentation": {
                      "identifier": "EncryptionKey.MarshalJSON",
                      "newPage": false,
                      "searchKey": "schema.EncryptionKey.MarshalJSON",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v EncryptionKey) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v EncryptionKey) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/schema#EncryptionKey.UnmarshalJSON",
                    "documentation": {
                      "identifier": "EncryptionKey.UnmarshalJSON",
                      "newPage": false,
                      "searchKey": "schema.EncryptionKey.UnmarshalJSON",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *EncryptionKey) UnmarshalJSON(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *EncryptionKey) UnmarshalJSON(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/schema#EncryptionKeys",
              "documentation": {
                "identifier": "EncryptionKeys",
                "newPage": false,
                "searchKey": "schema.EncryptionKeys",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EncryptionKeys struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EncryptionKeys struct {\n\tBatchChangesCredentialKey *EncryptionKey `json:\"batchChangesCredentialKey,omitempty\"`\n\t// CacheSize description: number of values to keep in LRU cache\n\tCacheSize int `json:\"cacheSize,omitempty\"`\n\t// EnableCache description: enable LRU cache for decryption APIs\n\tEnableCache            bool           `json:\"enableCache,omitempty\"`\n\tExternalServiceKey     *EncryptionKey `json:\"externalServiceKey,omitempty\"`\n\tUserExternalAccountKey *EncryptionKey `json:\"userExternalAccountKey,omitempty\"`\n}\n```\n\nEncryptionKeys description: Configuration for encryption keys used to encrypt data at rest in the database. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#ExcludedAWSCodeCommitRepo",
              "documentation": {
                "identifier": "ExcludedAWSCodeCommitRepo",
                "newPage": false,
                "searchKey": "schema.ExcludedAWSCodeCommitRepo",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExcludedAWSCodeCommitRepo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExcludedAWSCodeCommitRepo struct {\n\t// Id description: The ID of an AWS Code Commit repository (as returned by the AWS API) to exclude from mirroring. Use this to exclude the repository, even if renamed, or to differentiate between repositories with the same name in multiple regions.\n\tId string `json:\"id,omitempty\"`\n\t// Name description: The name of an AWS CodeCommit repository (\"repo-name\") to exclude from mirroring.\n\tName string `json:\"name,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#ExcludedBitbucketCloudRepo",
              "documentation": {
                "identifier": "ExcludedBitbucketCloudRepo",
                "newPage": false,
                "searchKey": "schema.ExcludedBitbucketCloudRepo",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExcludedBitbucketCloudRepo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExcludedBitbucketCloudRepo struct {\n\t// Name description: The name of a Bitbucket Cloud repo (\"myorg/myrepo\") to exclude from mirroring.\n\tName string `json:\"name,omitempty\"`\n\t// Pattern description: Regular expression which matches against the name of a Bitbucket Cloud repo.\n\tPattern string `json:\"pattern,omitempty\"`\n\t// Uuid description: The UUID of a Bitbucket Cloud repo (as returned by the Bitbucket Cloud's API) to exclude from mirroring.\n\tUuid string `json:\"uuid,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#ExcludedBitbucketServerRepo",
              "documentation": {
                "identifier": "ExcludedBitbucketServerRepo",
                "newPage": false,
                "searchKey": "schema.ExcludedBitbucketServerRepo",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExcludedBitbucketServerRepo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExcludedBitbucketServerRepo struct {\n\t// Id description: The ID of a Bitbucket Server repo (as returned by the Bitbucket Server instance's API) to exclude from mirroring.\n\tId int `json:\"id,omitempty\"`\n\t// Name description: The name of a Bitbucket Server repo (\"projectKey/repositorySlug\") to exclude from mirroring.\n\tName string `json:\"name,omitempty\"`\n\t// Pattern description: Regular expression which matches against the name of a Bitbucket Server repo.\n\tPattern string `json:\"pattern,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#ExcludedGitHubRepo",
              "documentation": {
                "identifier": "ExcludedGitHubRepo",
                "newPage": false,
                "searchKey": "schema.ExcludedGitHubRepo",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExcludedGitHubRepo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExcludedGitHubRepo struct {\n\t// Archived description: If set to true, archived repositories will be excluded.\n\tArchived bool `json:\"archived,omitempty\"`\n\t// Forks description: If set to true, forks will be excluded.\n\tForks bool `json:\"forks,omitempty\"`\n\t// Id description: The node ID of a GitHub repository (as returned by the GitHub instance's API) to exclude from mirroring. Use this to exclude the repository, even if renamed. Note: This is the GraphQL ID, not the GitHub database ID. eg: \"curl https://api.github.com/repos/vuejs/vue | jq .node_id\"\n\tId string `json:\"id,omitempty\"`\n\t// Name description: The name of a GitHub repository (\"owner/name\") to exclude from mirroring.\n\tName string `json:\"name,omitempty\"`\n\t// Pattern description: Regular expression which matches against the name of a GitHub repository (\"owner/name\").\n\tPattern string `json:\"pattern,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#ExcludedGitLabProject",
              "documentation": {
                "identifier": "ExcludedGitLabProject",
                "newPage": false,
                "searchKey": "schema.ExcludedGitLabProject",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExcludedGitLabProject struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExcludedGitLabProject struct {\n\t// Id description: The ID of a GitLab project (as returned by the GitLab instance's API) to exclude from mirroring.\n\tId int `json:\"id,omitempty\"`\n\t// Name description: The name of a GitLab project (\"group/name\") to exclude from mirroring.\n\tName string `json:\"name,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#ExcludedGitoliteRepo",
              "documentation": {
                "identifier": "ExcludedGitoliteRepo",
                "newPage": false,
                "searchKey": "schema.ExcludedGitoliteRepo",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExcludedGitoliteRepo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExcludedGitoliteRepo struct {\n\t// Name description: The name of a Gitolite repo (\"my-repo\") to exclude from mirroring.\n\tName string `json:\"name,omitempty\"`\n\t// Pattern description: Regular expression which matches against the name of a Gitolite repo to exclude from mirroring.\n\tPattern string `json:\"pattern,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#ExpandedGitCommitDescription",
              "documentation": {
                "identifier": "ExpandedGitCommitDescription",
                "newPage": false,
                "searchKey": "schema.ExpandedGitCommitDescription",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExpandedGitCommitDescription struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExpandedGitCommitDescription struct {\n\t// Author description: The author of the Git commit.\n\tAuthor *GitCommitAuthor `json:\"author,omitempty\"`\n\t// Message description: The Git commit message.\n\tMessage string `json:\"message\"`\n}\n```\n\nExpandedGitCommitDescription description: The Git commit to create with the changes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#ExperimentalFeatures",
              "documentation": {
                "identifier": "ExperimentalFeatures",
                "newPage": false,
                "searchKey": "schema.ExperimentalFeatures",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExperimentalFeatures struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExperimentalFeatures struct {\n\t// AndOrQuery description: DEPRECATED: Interpret a search input query as an and/or query.\n\tAndOrQuery string `json:\"andOrQuery,omitempty\"`\n\t// BitbucketServerFastPerm description: DEPRECATED: Configure in Bitbucket Server config.\n\tBitbucketServerFastPerm string `json:\"bitbucketServerFastPerm,omitempty\"`\n\t// CustomGitFetch description: JSON array of configuration that maps from Git clone URL domain/path to custom git fetch command.\n\tCustomGitFetch []*CustomGitFetchMapping `json:\"customGitFetch,omitempty\"`\n\t// DebugLog description: Turns on debug logging for specific debugging scenarios.\n\tDebugLog *DebugLog `json:\"debug.log,omitempty\"`\n\t// EnablePermissionsWebhooks description: Enables webhook consumers to sync permissions from external services faster than the defaults schedule\n\tEnablePermissionsWebhooks bool `json:\"enablePermissionsWebhooks,omitempty\"`\n\t// EnablePostSignupFlow description: Enables post sign-up user flow to add code hosts and sync code\n\tEnablePostSignupFlow bool `json:\"enablePostSignupFlow,omitempty\"`\n\t// EventLogging description: Enables user event logging inside of the Sourcegraph instance. This will allow admins to have greater visibility of user activity, such as frequently viewed pages, frequent searches, and more. These event logs (and any specific user actions) are only stored locally, and never leave this Sourcegraph instance.\n\tEventLogging string `json:\"eventLogging,omitempty\"`\n\t// Perforce description: Allow adding Perforce code host connections\n\tPerforce string `json:\"perforce,omitempty\"`\n\t// Ranking description: Experimental search result ranking options.\n\tRanking *Ranking `json:\"ranking,omitempty\"`\n\t// RateLimitAnonymous description: Configures the hourly rate limits for anonymous calls to the GraphQL API. Setting limit to 0 disables the limiter. This is only relevant if unauthenticated calls to the API are permitted.\n\tRateLimitAnonymous int `json:\"rateLimitAnonymous,omitempty\"`\n\t// SearchIndexBranches description: A map from repository name to a list of extra revs (branch, ref, tag, commit sha, etc) to index for a repository. We always index the default branch (\"HEAD\") and revisions in version contexts. This allows specifying additional revisions. Sourcegraph can index up to 64 branches per repository.\n\tSearchIndexBranches map[string][]string `json:\"search.index.branches,omitempty\"`\n\t// SearchMultipleRevisionsPerRepository description: DEPRECATED. Always on. Will be removed in 3.19.\n\tSearchMultipleRevisionsPerRepository *bool `json:\"searchMultipleRevisionsPerRepository,omitempty\"`\n\t// StructuralSearch description: Enables structural search.\n\tStructuralSearch string `json:\"structuralSearch,omitempty\"`\n\t// TlsExternal description: Global TLS/SSL settings for Sourcegraph to use when communicating with code hosts.\n\tTlsExternal *TlsExternal `json:\"tls.external,omitempty\"`\n\t// VersionContexts description: JSON array of version context configuration\n\tVersionContexts []*VersionContext `json:\"versionContexts,omitempty\"`\n}\n```\n\nExperimentalFeatures description: Experimental features to enable or disable. Features that are now enabled by default are marked as deprecated. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#ExtensionRepository",
              "documentation": {
                "identifier": "ExtensionRepository",
                "newPage": false,
                "searchKey": "schema.ExtensionRepository",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExtensionRepository struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExtensionRepository struct {\n\tType string `json:\"type,omitempty\"`\n\tUrl  string `json:\"url\"`\n}\n```\n\nExtensionRepository description: The location of the version control repository for this extension. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Extensions",
              "documentation": {
                "identifier": "Extensions",
                "newPage": false,
                "searchKey": "schema.Extensions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Extensions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Extensions struct {\n\t// AllowRemoteExtensions description: Allow only the explicitly listed remote extensions (by extension ID, such as \"alice/myextension\") from the remote registry. If not set, all remote extensions may be used from the remote registry. To completely disable the remote registry, set `remoteRegistry` to `false`.\n\t//\n\t// Only available in Sourcegraph Enterprise.\n\tAllowRemoteExtensions []string `json:\"allowRemoteExtensions,omitempty\"`\n\t// Disabled description: Disable all usage of extensions.\n\tDisabled *bool `json:\"disabled,omitempty\"`\n\t// RemoteRegistry description: The remote extension registry URL, or `false` to not use a remote extension registry. If not set, the default remote extension registry URL is used.\n\tRemoteRegistry interface{} `json:\"remoteRegistry,omitempty\"`\n}\n```\n\nExtensions description: Configures Sourcegraph extensions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#ExternalIdentity",
              "documentation": {
                "identifier": "ExternalIdentity",
                "newPage": false,
                "searchKey": "schema.ExternalIdentity",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExternalIdentity struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExternalIdentity struct {\n\t// AuthProviderID description: The value of the `configID` field of the targeted authentication provider.\n\tAuthProviderID string `json:\"authProviderID\"`\n\t// AuthProviderType description: The `type` field of the targeted authentication provider.\n\tAuthProviderType string `json:\"authProviderType\"`\n\t// GitlabProvider description: The name that identifies the authentication provider to GitLab. This is passed to the `?provider=` query parameter in calls to the GitLab Users API. If you're not sure what this value is, you can look at the `identities` field of the GitLab Users API result (`curl  -H 'PRIVATE-TOKEN: $YOUR_TOKEN' $GITLAB_URL/api/v4/users`).\n\tGitlabProvider string `json:\"gitlabProvider\"`\n\tType           string `json:\"type\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#GitCommitAuthor",
              "documentation": {
                "identifier": "GitCommitAuthor",
                "newPage": false,
                "searchKey": "schema.GitCommitAuthor",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitCommitAuthor struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitCommitAuthor struct {\n\t// Email description: The Git commit author email.\n\tEmail string `json:\"email\"`\n\t// Name description: The Git commit author name.\n\tName string `json:\"name\"`\n}\n```\n\nGitCommitAuthor description: The author of the Git commit. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#GitCommitDescription",
              "documentation": {
                "identifier": "GitCommitDescription",
                "newPage": false,
                "searchKey": "schema.GitCommitDescription",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitCommitDescription struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitCommitDescription struct {\n\t// AuthorEmail description: The Git commit author email.\n\tAuthorEmail string `json:\"authorEmail\"`\n\t// AuthorName description: The Git commit author name.\n\tAuthorName string `json:\"authorName\"`\n\t// Diff description: The commit diff (in unified diff format).\n\tDiff string `json:\"diff\"`\n\t// Message description: The Git commit message.\n\tMessage string `json:\"message\"`\n}\n```\n\nGitCommitDescription description: The Git commit to create with the changes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#GitHubAuthProvider",
              "documentation": {
                "identifier": "GitHubAuthProvider",
                "newPage": false,
                "searchKey": "schema.GitHubAuthProvider",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitHubAuthProvider struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitHubAuthProvider struct {\n\t// AllowOrgs description: Restricts new logins to members of these GitHub organizations. Existing sessions won't be invalidated. Leave empty or unset for no org restrictions.\n\tAllowOrgs []string `json:\"allowOrgs,omitempty\"`\n\t// AllowSignup description: Allows new visitors to sign up for accounts via GitHub authentication. If false, users signing in via GitHub must have an existing Sourcegraph account, which will be linked to their GitHub identity after sign-in.\n\tAllowSignup bool `json:\"allowSignup,omitempty\"`\n\t// ClientID description: The Client ID of the GitHub OAuth app, accessible from https://github.com/settings/developers (or the same path on GitHub Enterprise).\n\tClientID string `json:\"clientID\"`\n\t// ClientSecret description: The Client Secret of the GitHub OAuth app, accessible from https://github.com/settings/developers (or the same path on GitHub Enterprise).\n\tClientSecret string `json:\"clientSecret\"`\n\tDisplayName  string `json:\"displayName,omitempty\"`\n\tType         string `json:\"type\"`\n\t// Url description: URL of the GitHub instance, such as https://github.com or https://github-enterprise.example.com.\n\tUrl string `json:\"url,omitempty\"`\n}\n```\n\nGitHubAuthProvider description: Configures the GitHub (or GitHub Enterprise) OAuth authentication provider for SSO. In addition to specifying this configuration object, you must also create a OAuth App on your GitHub instance: [https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/](https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/). When a user signs into Sourcegraph or links their GitHub account to their existing Sourcegraph account, GitHub will prompt the user for the repo scope. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#GitHubAuthorization",
              "documentation": {
                "identifier": "GitHubAuthorization",
                "newPage": false,
                "searchKey": "schema.GitHubAuthorization",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitHubAuthorization struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitHubAuthorization struct {\n}\n```\n\nGitHubAuthorization description: If non-null, enforces GitHub repository permissions. This requires that there is an item in the `auth.providers` field of type \"github\" with the same `url` field as specified in this `GitHubConnection`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#GitHubConnection",
              "documentation": {
                "identifier": "GitHubConnection",
                "newPage": false,
                "searchKey": "schema.GitHubConnection",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitHubConnection struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitHubConnection struct {\n\t// Authorization description: If non-null, enforces GitHub repository permissions. This requires that there is an item in the `auth.providers` field of type \"github\" with the same `url` field as specified in this `GitHubConnection`.\n\tAuthorization *GitHubAuthorization `json:\"authorization,omitempty\"`\n\t// Certificate description: TLS certificate of the GitHub Enterprise instance. This is only necessary if the certificate is self-signed or signed by an internal CA. To get the certificate run `openssl s_client -connect HOST:443 -showcerts < /dev/null 2> /dev/null | openssl x509 -outform PEM`. To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.\n\tCertificate string `json:\"certificate,omitempty\"`\n\t// CloudDefault description: Only used to override the cloud_default column from a config file specified by EXTSVC_CONFIG_FILE\n\tCloudDefault bool `json:\"cloudDefault,omitempty\"`\n\t// CloudGlobal description: When set to true, this external service will be chosen as our 'Global' GitHub service. Only valid on Sourcegraph.com. Only one service can have this flag set.\n\tCloudGlobal bool `json:\"cloudGlobal,omitempty\"`\n\t// Exclude description: A list of repositories to never mirror from this GitHub instance. Takes precedence over \"orgs\", \"repos\", and \"repositoryQuery\" configuration.\n\t//\n\t// Supports excluding by name ({\"name\": \"owner/name\"}) or by ID ({\"id\": \"MDEwOlJlcG9zaXRvcnkxMTczMDM0Mg==\"}).\n\t//\n\t// Note: ID is the GitHub GraphQL ID, not the GitHub database ID. eg: \"curl https://api.github.com/repos/vuejs/vue | jq .node_id\"\n\tExclude []*ExcludedGitHubRepo `json:\"exclude,omitempty\"`\n\t// GitURLType description: The type of Git URLs to use for cloning and fetching Git repositories on this GitHub instance.\n\t//\n\t// If \"http\", Sourcegraph will access GitHub repositories using Git URLs of the form http(s)://github.com/myteam/myproject.git (using https: if the GitHub instance uses HTTPS).\n\t//\n\t// If \"ssh\", Sourcegraph will access GitHub repositories using Git URLs of the form git@github.com:myteam/myproject.git. See the documentation for how to provide SSH private keys and known_hosts: https://docs.sourcegraph.com/admin/repo/auth#repositories-that-need-http-s-or-ssh-authentication.\n\tGitURLType string `json:\"gitURLType,omitempty\"`\n\t// InitialRepositoryEnablement description: Deprecated and ignored field which will be removed entirely in the next release. GitHub repositories can no longer be enabled or disabled explicitly. Configure repositories to be mirrored via \"repos\", \"exclude\" and \"repositoryQuery\" instead.\n\tInitialRepositoryEnablement bool `json:\"initialRepositoryEnablement,omitempty\"`\n\t// Orgs description: An array of organization names identifying GitHub organizations whose repositories should be mirrored on Sourcegraph.\n\tOrgs []string `json:\"orgs,omitempty\"`\n\t// RateLimit description: Rate limit applied when making background API requests to GitHub.\n\tRateLimit *GitHubRateLimit `json:\"rateLimit,omitempty\"`\n\t// Repos description: An array of repository \"owner/name\" strings specifying which GitHub or GitHub Enterprise repositories to mirror on Sourcegraph.\n\tRepos []string `json:\"repos,omitempty\"`\n\t// RepositoryPathPattern description: The pattern used to generate the corresponding Sourcegraph repository name for a GitHub or GitHub Enterprise repository. In the pattern, the variable \"{host}\" is replaced with the GitHub host (such as github.example.com), and \"{nameWithOwner}\" is replaced with the GitHub repository's \"owner/path\" (such as \"myorg/myrepo\").\n\t//\n\t// For example, if your GitHub Enterprise URL is https://github.example.com and your Sourcegraph URL is https://src.example.com, then a repositoryPathPattern of \"{host}/{nameWithOwner}\" would mean that a GitHub repository at https://github.example.com/myorg/myrepo is available on Sourcegraph at https://src.example.com/github.example.com/myorg/myrepo.\n\t//\n\t// It is important that the Sourcegraph repository name generated with this pattern be unique to this code host. If different code hosts generate repository names that collide, Sourcegraph's behavior is undefined.\n\tRepositoryPathPattern string `json:\"repositoryPathPattern,omitempty\"`\n\t// RepositoryQuery description: An array of strings specifying which GitHub or GitHub Enterprise repositories to mirror on Sourcegraph. The valid values are:\n\t//\n\t// - `public` mirrors all public repositories for GitHub Enterprise and is the equivalent of `none` for GitHub\n\t//\n\t// - `affiliated` mirrors all repositories affiliated with the configured token's user:\n\t// \t- Private repositories with read access\n\t// \t- Public repositories owned by the user or their orgs\n\t// \t- Public repositories with write access\n\t//\n\t// - `none` mirrors no repositories (except those specified in the `repos` configuration property or added manually)\n\t//\n\t// - All other values are executed as a GitHub advanced repository search as described at https://github.com/search/advanced. Example: to sync all repositories from the \"sourcegraph\" organization including forks the query would be \"org:sourcegraph fork:true\".\n\t//\n\t// If multiple values are provided, their results are unioned.\n\t//\n\t// If you need to narrow the set of mirrored repositories further (and don't want to enumerate it with a list or query set as above), create a new bot/machine user on GitHub or GitHub Enterprise that is only affiliated with the desired repositories.\n\tRepositoryQuery []string `json:\"repositoryQuery,omitempty\"`\n\t// Token description: A GitHub personal access token. Create one for GitHub.com at https://github.com/settings/tokens/new?description=Sourcegraph (for GitHub Enterprise, replace github.com with your instance's hostname). See https://docs.sourcegraph.com/admin/external_service/github#github-api-token-and-access for which scopes are required for which use cases.\n\tToken string `json:\"token\"`\n\t// Url description: URL of a GitHub instance, such as https://github.com or https://github-enterprise.example.com.\n\tUrl string `json:\"url\"`\n\t// Webhooks description: An array of configurations defining existing GitHub webhooks that send updates back to Sourcegraph.\n\tWebhooks []*GitHubWebhook `json:\"webhooks,omitempty\"`\n}\n```\n\nGitHubConnection description: Configuration for a connection to GitHub or GitHub Enterprise. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/schema#GitHubConnection.SetRepos",
                    "documentation": {
                      "identifier": "GitHubConnection.SetRepos",
                      "newPage": false,
                      "searchKey": "schema.GitHubConnection.SetRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *GitHubConnection) SetRepos(all bool, repos []string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *GitHubConnection) SetRepos(all bool, repos []string) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/schema#GitHubRateLimit",
              "documentation": {
                "identifier": "GitHubRateLimit",
                "newPage": false,
                "searchKey": "schema.GitHubRateLimit",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitHubRateLimit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitHubRateLimit struct {\n\t// Enabled description: true if rate limiting is enabled.\n\tEnabled bool `json:\"enabled\"`\n\t// RequestsPerHour description: Requests per hour permitted. This is an average, calculated per second. Internally, the burst limit is set to 100, which implies that for a requests per hour limit as low as 1, users will continue to be able to send a maximum of 100 requests immediately, provided that the complexity cost of each request is 1.\n\tRequestsPerHour float64 `json:\"requestsPerHour\"`\n}\n```\n\nGitHubRateLimit description: Rate limit applied when making background API requests to GitHub. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#GitHubWebhook",
              "documentation": {
                "identifier": "GitHubWebhook",
                "newPage": false,
                "searchKey": "schema.GitHubWebhook",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitHubWebhook struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitHubWebhook struct {\n\t// Org description: The name of the GitHub organization to which the webhook belongs\n\tOrg string `json:\"org\"`\n\t// Secret description: The secret used when creating the webhook\n\tSecret string `json:\"secret\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#GitLabAuthProvider",
              "documentation": {
                "identifier": "GitLabAuthProvider",
                "newPage": false,
                "searchKey": "schema.GitLabAuthProvider",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitLabAuthProvider struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitLabAuthProvider struct {\n\t// ClientID description: The Client ID of the GitLab OAuth app, accessible from https://gitlab.com/oauth/applications (or the same path on your private GitLab instance).\n\tClientID string `json:\"clientID\"`\n\t// ClientSecret description: The Client Secret of the GitLab OAuth app, accessible from https://gitlab.com/oauth/applications (or the same path on your private GitLab instance).\n\tClientSecret string `json:\"clientSecret\"`\n\tDisplayName  string `json:\"displayName,omitempty\"`\n\tType         string `json:\"type\"`\n\t// Url description: URL of the GitLab instance, such as https://gitlab.com or https://gitlab.example.com.\n\tUrl string `json:\"url,omitempty\"`\n}\n```\n\nGitLabAuthProvider description: Configures the GitLab OAuth authentication provider for SSO. In addition to specifying this configuration object, you must also create a OAuth App on your GitLab instance: [https://docs.gitlab.com/ee/integration/oauth_provider.html](https://docs.gitlab.com/ee/integration/oauth_provider.html). The application should have `api` and `read_user` scopes and the callback URL set to the concatenation of your Sourcegraph instance URL and \"/.auth/gitlab/callback\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#GitLabAuthorization",
              "documentation": {
                "identifier": "GitLabAuthorization",
                "newPage": false,
                "searchKey": "schema.GitLabAuthorization",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitLabAuthorization struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitLabAuthorization struct {\n\t// IdentityProvider description: The source of identity to use when computing permissions. This defines how to compute the GitLab identity to use for a given Sourcegraph user.\n\tIdentityProvider IdentityProvider `json:\"identityProvider\"`\n}\n```\n\nGitLabAuthorization description: If non-null, enforces GitLab repository permissions. This requires that there be an item in the `auth.providers` field of type \"gitlab\" with the same `url` field as specified in this `GitLabConnection`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#GitLabConnection",
              "documentation": {
                "identifier": "GitLabConnection",
                "newPage": false,
                "searchKey": "schema.GitLabConnection",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitLabConnection struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitLabConnection struct {\n\t// Authorization description: If non-null, enforces GitLab repository permissions. This requires that there be an item in the `auth.providers` field of type \"gitlab\" with the same `url` field as specified in this `GitLabConnection`.\n\tAuthorization *GitLabAuthorization `json:\"authorization,omitempty\"`\n\t// Certificate description: TLS certificate of the GitLab instance. This is only necessary if the certificate is self-signed or signed by an internal CA. To get the certificate run `openssl s_client -connect HOST:443 -showcerts < /dev/null 2> /dev/null | openssl x509 -outform PEM`. To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.\n\tCertificate string `json:\"certificate,omitempty\"`\n\t// CloudDefault description: Only used to override the cloud_default column from a config file specified by EXTSVC_CONFIG_FILE\n\tCloudDefault bool `json:\"cloudDefault,omitempty\"`\n\t// CloudGlobal description: When set to true, this external service will be chosen as our 'Global' GitLab service. Only valid on Sourcegraph.com. Only one service can have this flag set.\n\tCloudGlobal bool `json:\"cloudGlobal,omitempty\"`\n\t// Exclude description: A list of projects to never mirror from this GitLab instance. Takes precedence over \"projects\" and \"projectQuery\" configuration. Supports excluding by name ({\"name\": \"group/name\"}) or by ID ({\"id\": 42}).\n\tExclude []*ExcludedGitLabProject `json:\"exclude,omitempty\"`\n\t// GitURLType description: The type of Git URLs to use for cloning and fetching Git repositories on this GitLab instance.\n\t//\n\t// If \"http\", Sourcegraph will access GitLab repositories using Git URLs of the form http(s)://gitlab.example.com/myteam/myproject.git (using https: if the GitLab instance uses HTTPS).\n\t//\n\t// If \"ssh\", Sourcegraph will access GitLab repositories using Git URLs of the form git@example.gitlab.com:myteam/myproject.git. See the documentation for how to provide SSH private keys and known_hosts: https://docs.sourcegraph.com/admin/repo/auth#repositories-that-need-http-s-or-ssh-authentication.\n\tGitURLType string `json:\"gitURLType,omitempty\"`\n\t// InitialRepositoryEnablement description: Deprecated and ignored field which will be removed entirely in the next release. GitLab repositories can no longer be enabled or disabled explicitly.\n\tInitialRepositoryEnablement bool `json:\"initialRepositoryEnablement,omitempty\"`\n\t// NameTransformations description: An array of transformations will apply to the repository name. Currently, only regex replacement is supported. All transformations happen after \"repositoryPathPattern\" is processed.\n\tNameTransformations []*GitLabNameTransformation `json:\"nameTransformations,omitempty\"`\n\t// ProjectQuery description: An array of strings specifying which GitLab projects to mirror on Sourcegraph. Each string is a URL path and query that targets a GitLab API endpoint returning a list of projects. If the string only contains a query, then \"projects\" is used as the path. Examples: \"?membership=true&search=foo\", \"groups/mygroup/projects\".\n\t//\n\t// The special string \"none\" can be used as the only element to disable this feature. Projects matched by multiple query strings are only imported once. Here are a few endpoints that return a list of projects: https://docs.gitlab.com/ee/api/projects.html#list-all-projects, https://docs.gitlab.com/ee/api/groups.html#list-a-groups-projects, https://docs.gitlab.com/ee/api/search.html#scope-projects.\n\tProjectQuery []string `json:\"projectQuery\"`\n\t// Projects description: A list of projects to mirror from this GitLab instance. Supports including by name ({\"name\": \"group/name\"}) or by ID ({\"id\": 42}).\n\tProjects []*GitLabProject `json:\"projects,omitempty\"`\n\t// RateLimit description: Rate limit applied when making background API requests to GitLab.\n\tRateLimit *GitLabRateLimit `json:\"rateLimit,omitempty\"`\n\t// RepositoryPathPattern description: The pattern used to generate a the corresponding Sourcegraph repository name for a GitLab project. In the pattern, the variable \"{host}\" is replaced with the GitLab URL's host (such as gitlab.example.com), and \"{pathWithNamespace}\" is replaced with the GitLab project's \"namespace/path\" (such as \"myteam/myproject\").\n\t//\n\t// For example, if your GitLab is https://gitlab.example.com and your Sourcegraph is https://src.example.com, then a repositoryPathPattern of \"{host}/{pathWithNamespace}\" would mean that a GitLab project at https://gitlab.example.com/myteam/myproject is available on Sourcegraph at https://src.example.com/gitlab.example.com/myteam/myproject.\n\t//\n\t// It is important that the Sourcegraph repository name generated with this pattern be unique to this code host. If different code hosts generate repository names that collide, Sourcegraph's behavior is undefined.\n\tRepositoryPathPattern string `json:\"repositoryPathPattern,omitempty\"`\n\t// Token description: A GitLab access token with \"api\" scope. Can be a personal access token (PAT) or an OAuth token. If you are enabling permissions with identity provider type \"external\", this token should also have \"sudo\" scope.\n\tToken string `json:\"token\"`\n\t// TokenType description: The type of the token\n\tTokenType string `json:\"token.type,omitempty\"`\n\t// Url description: URL of a GitLab instance, such as https://gitlab.example.com or (for GitLab.com) https://gitlab.com.\n\tUrl string `json:\"url\"`\n\t// Webhooks description: An array of webhook configurations\n\tWebhooks []*GitLabWebhook `json:\"webhooks,omitempty\"`\n}\n```\n\nGitLabConnection description: Configuration for a connection to GitLab (GitLab.com or GitLab self-managed). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/schema#GitLabConnection.SetRepos",
                    "documentation": {
                      "identifier": "GitLabConnection.SetRepos",
                      "newPage": false,
                      "searchKey": "schema.GitLabConnection.SetRepos",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *GitLabConnection) SetRepos(all bool, repos []string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *GitLabConnection) SetRepos(all bool, repos []string) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/schema#GitLabNameTransformation",
              "documentation": {
                "identifier": "GitLabNameTransformation",
                "newPage": false,
                "searchKey": "schema.GitLabNameTransformation",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitLabNameTransformation struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitLabNameTransformation struct {\n\t// Regex description: The regex to match for the occurrences of its replacement.\n\tRegex string `json:\"regex,omitempty\"`\n\t// Replacement description: The replacement used to replace all matched occurrences by the regex.\n\tReplacement string `json:\"replacement,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#GitLabProject",
              "documentation": {
                "identifier": "GitLabProject",
                "newPage": false,
                "searchKey": "schema.GitLabProject",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitLabProject struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitLabProject struct {\n\t// Id description: The ID of a GitLab project (as returned by the GitLab instance's API) to mirror.\n\tId int `json:\"id,omitempty\"`\n\t// Name description: The name of a GitLab project (\"group/name\") to mirror.\n\tName string `json:\"name,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#GitLabRateLimit",
              "documentation": {
                "identifier": "GitLabRateLimit",
                "newPage": false,
                "searchKey": "schema.GitLabRateLimit",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitLabRateLimit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitLabRateLimit struct {\n\t// Enabled description: true if rate limiting is enabled.\n\tEnabled bool `json:\"enabled\"`\n\t// RequestsPerHour description: Requests per hour permitted. This is an average, calculated per second. Internally the burst limit is set to 100, which implies that for a requests per hour limit as low as 1, users will continue to be able to send a maximum of 100 requests immediately, provided that the complexity cost of each request is 1.\n\tRequestsPerHour float64 `json:\"requestsPerHour\"`\n}\n```\n\nGitLabRateLimit description: Rate limit applied when making background API requests to GitLab. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#GitLabWebhook",
              "documentation": {
                "identifier": "GitLabWebhook",
                "newPage": false,
                "searchKey": "schema.GitLabWebhook",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitLabWebhook struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitLabWebhook struct {\n\t// Secret description: The secret used to authenticate incoming webhook requests\n\tSecret string `json:\"secret\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#GitoliteConnection",
              "documentation": {
                "identifier": "GitoliteConnection",
                "newPage": false,
                "searchKey": "schema.GitoliteConnection",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GitoliteConnection struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GitoliteConnection struct {\n\t// Exclude description: A list of repositories to never mirror from this Gitolite instance. Supports excluding by exact name ({\"name\": \"foo\"}).\n\tExclude []*ExcludedGitoliteRepo `json:\"exclude,omitempty\"`\n\t// Host description: Gitolite host that stores the repositories (e.g., git@gitolite.example.com, ssh://git@gitolite.example.com:2222/).\n\tHost string `json:\"host\"`\n\t// Phabricator description: Phabricator instance that integrates with this Gitolite instance\n\tPhabricator *Phabricator `json:\"phabricator,omitempty\"`\n\t// PhabricatorMetadataCommand description: This is DEPRECATED. Use the `phabricator` field instead.\n\tPhabricatorMetadataCommand string `json:\"phabricatorMetadataCommand,omitempty\"`\n\t// Prefix description: Repository name prefix that will map to this Gitolite host. This should likely end with a trailing slash. E.g., \"gitolite.example.com/\".\n\t//\n\t// It is important that the Sourcegraph repository name generated with this prefix be unique to this code host. If different code hosts generate repository names that collide, Sourcegraph's behavior is undefined.\n\tPrefix string `json:\"prefix\"`\n}\n```\n\nGitoliteConnection description: Configuration for a connection to Gitolite. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#HTTPHeaderAuthProvider",
              "documentation": {
                "identifier": "HTTPHeaderAuthProvider",
                "newPage": false,
                "searchKey": "schema.HTTPHeaderAuthProvider",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type HTTPHeaderAuthProvider struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype HTTPHeaderAuthProvider struct {\n\t// EmailHeader description: The name (case-insensitive) of an HTTP header whose value is taken to be the email of the client requesting the page. Set this value when using an HTTP proxy that authenticates requests, and you don't want the extra configurability of the other authentication methods.\n\tEmailHeader string `json:\"emailHeader,omitempty\"`\n\t// StripUsernameHeaderPrefix description: The prefix that precedes the username portion of the HTTP header specified in `usernameHeader`. If specified, the prefix will be stripped from the header value and the remainder will be used as the username. For example, if using Google Identity-Aware Proxy (IAP) with Google Sign-In, set this value to `accounts.google.com:`.\n\tStripUsernameHeaderPrefix string `json:\"stripUsernameHeaderPrefix,omitempty\"`\n\tType                      string `json:\"type\"`\n\t// UsernameHeader description: The name (case-insensitive) of an HTTP header whose value is taken to be the username of the client requesting the page. Set this value when using an HTTP proxy that authenticates requests, and you don't want the extra configurability of the other authentication methods.\n\tUsernameHeader string `json:\"usernameHeader\"`\n}\n```\n\nHTTPHeaderAuthProvider description: Configures the HTTP header authentication provider (which authenticates users by consulting an HTTP request header set by an authentication proxy such as [https://github.com/bitly/oauth2_proxy](https://github.com/bitly/oauth2_proxy)). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#IdentityProvider",
              "documentation": {
                "identifier": "IdentityProvider",
                "newPage": false,
                "searchKey": "schema.IdentityProvider",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IdentityProvider struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IdentityProvider struct {\n\tOauth    *OAuthIdentity\n\tUsername *UsernameIdentity\n\tExternal *ExternalIdentity\n}\n```\n\nIdentityProvider description: The source of identity to use when computing permissions. This defines how to compute the GitLab identity to use for a given Sourcegraph user. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/schema#IdentityProvider.MarshalJSON",
                    "documentation": {
                      "identifier": "IdentityProvider.MarshalJSON",
                      "newPage": false,
                      "searchKey": "schema.IdentityProvider.MarshalJSON",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v IdentityProvider) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v IdentityProvider) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/schema#IdentityProvider.UnmarshalJSON",
                    "documentation": {
                      "identifier": "IdentityProvider.UnmarshalJSON",
                      "newPage": false,
                      "searchKey": "schema.IdentityProvider.UnmarshalJSON",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *IdentityProvider) UnmarshalJSON(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *IdentityProvider) UnmarshalJSON(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/schema#ImportChangesets",
              "documentation": {
                "identifier": "ImportChangesets",
                "newPage": false,
                "searchKey": "schema.ImportChangesets",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ImportChangesets struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ImportChangesets struct {\n\t// ExternalIDs description: The changesets to import from the code host. For GitHub this is the PR number, for GitLab this is the MR number, for Bitbucket Server this is the PR number.\n\tExternalIDs []interface{} `json:\"externalIDs\"`\n\t// Repository description: The repository name as configured on your Sourcegraph instance.\n\tRepository string `json:\"repository\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Insight",
              "documentation": {
                "identifier": "Insight",
                "newPage": false,
                "searchKey": "schema.Insight",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Insight struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Insight struct {\n\t// Description description: The description of this insight\n\tDescription string `json:\"description\"`\n\t// Series description: Series of data to show for this insight\n\tSeries []*InsightSeries `json:\"series\"`\n\t// Title description: The short title of this insight\n\tTitle string `json:\"title\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#InsightSeries",
              "documentation": {
                "identifier": "InsightSeries",
                "newPage": false,
                "searchKey": "schema.InsightSeries",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InsightSeries struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InsightSeries struct {\n\t// Label description: The label to use for the series in the graph.\n\tLabel string `json:\"label\"`\n\t// RepositoriesList description: Performs a search query and shows the number of results returned.\n\tRepositoriesList []interface{} `json:\"repositoriesList,omitempty\"`\n\t// Search description: Performs a search query and shows the number of results returned.\n\tSearch string `json:\"search,omitempty\"`\n\t// Webhook description: (not yet supported) Fetch data from a webhook URL.\n\tWebhook string `json:\"webhook,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Log",
              "documentation": {
                "identifier": "Log",
                "newPage": false,
                "searchKey": "schema.Log",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Log struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Log struct {\n\t// Sentry description: Configuration for Sentry\n\tSentry *Sentry `json:\"sentry,omitempty\"`\n}\n```\n\nLog description: Configuration for logging and alerting, including to external services. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#MenuItem",
              "documentation": {
                "identifier": "MenuItem",
                "newPage": false,
                "searchKey": "schema.MenuItem",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MenuItem struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MenuItem struct {\n\tAction string `json:\"action,omitempty\"`\n\tAlt    string `json:\"alt,omitempty\"`\n\tWhen   string `json:\"when,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Menus",
              "documentation": {
                "identifier": "Menus",
                "newPage": false,
                "searchKey": "schema.Menus",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Menus struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Menus struct {\n\tCommandPalette []*MenuItem `json:\"commandPalette,omitempty\"`\n\tEditorTitle    []*MenuItem `json:\"editor/title,omitempty\"`\n\tHelp           []*MenuItem `json:\"help,omitempty\"`\n}\n```\n\nMenus description: Describes where to place actions in menus. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#MountedEncryptionKey",
              "documentation": {
                "identifier": "MountedEncryptionKey",
                "newPage": false,
                "searchKey": "schema.MountedEncryptionKey",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MountedEncryptionKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MountedEncryptionKey struct {\n\tEnvVarName string `json:\"envVarName,omitempty\"`\n\tFilepath   string `json:\"filepath,omitempty\"`\n\tKeyname    string `json:\"keyname\"`\n\tType       string `json:\"type\"`\n\tVersion    string `json:\"version,omitempty\"`\n}\n```\n\nMountedEncryptionKey description: This encryption key is mounted from a given file path or an environment variable. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#NoOpEncryptionKey",
              "documentation": {
                "identifier": "NoOpEncryptionKey",
                "newPage": false,
                "searchKey": "schema.NoOpEncryptionKey",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NoOpEncryptionKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NoOpEncryptionKey struct {\n\tType string `json:\"type\"`\n}\n```\n\nNoOpEncryptionKey description: This encryption key is a no op, leaving your data in plaintext (not recommended). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Notice",
              "documentation": {
                "identifier": "Notice",
                "newPage": false,
                "searchKey": "schema.Notice",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Notice struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Notice struct {\n\t// Dismissible description: Whether this notice can be dismissed (closed) by the user.\n\tDismissible bool `json:\"dismissible,omitempty\"`\n\t// Location description: The location where this notice is shown: \"top\" for the top of every page, \"home\" for the homepage.\n\tLocation string `json:\"location\"`\n\t// Message description: The message to display. Markdown formatting is supported.\n\tMessage string `json:\"message\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Notifier",
              "documentation": {
                "identifier": "Notifier",
                "newPage": false,
                "searchKey": "schema.Notifier",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Notifier struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Notifier struct {\n\tSlack     *NotifierSlack\n\tPagerduty *NotifierPagerduty\n\tWebhook   *NotifierWebhook\n\tEmail     *NotifierEmail\n\tOpsgenie  *NotifierOpsGenie\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/schema#Notifier.MarshalJSON",
                    "documentation": {
                      "identifier": "Notifier.MarshalJSON",
                      "newPage": false,
                      "searchKey": "schema.Notifier.MarshalJSON",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Notifier) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Notifier) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/schema#Notifier.UnmarshalJSON",
                    "documentation": {
                      "identifier": "Notifier.UnmarshalJSON",
                      "newPage": false,
                      "searchKey": "schema.Notifier.UnmarshalJSON",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *Notifier) UnmarshalJSON(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *Notifier) UnmarshalJSON(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/schema#NotifierEmail",
              "documentation": {
                "identifier": "NotifierEmail",
                "newPage": false,
                "searchKey": "schema.NotifierEmail",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NotifierEmail struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NotifierEmail struct {\n\t// Address description: Address to send email to\n\tAddress string `json:\"address\"`\n\tType    string `json:\"type\"`\n}\n```\n\nNotifierEmail description: Email notifier \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#NotifierOpsGenie",
              "documentation": {
                "identifier": "NotifierOpsGenie",
                "newPage": false,
                "searchKey": "schema.NotifierOpsGenie",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NotifierOpsGenie struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NotifierOpsGenie struct {\n\tApiKey   string `json:\"apiKey,omitempty\"`\n\tApiUrl   string `json:\"apiUrl,omitempty\"`\n\tPriority string `json:\"priority,omitempty\"`\n\t// Responders description: List of responders responsible for notifications.\n\tResponders []*Responders `json:\"responders,omitempty\"`\n\tType       string        `json:\"type\"`\n}\n```\n\nNotifierOpsGenie description: OpsGenie notifier \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#NotifierPagerduty",
              "documentation": {
                "identifier": "NotifierPagerduty",
                "newPage": false,
                "searchKey": "schema.NotifierPagerduty",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NotifierPagerduty struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NotifierPagerduty struct {\n\tApiUrl string `json:\"apiUrl,omitempty\"`\n\t// IntegrationKey description: Integration key for the PagerDuty Events API v2 - see https://developer.pagerduty.com/docs/events-api-v2/overview\n\tIntegrationKey string `json:\"integrationKey\"`\n\t// Severity description: Severity level for PagerDuty alert\n\tSeverity string `json:\"severity,omitempty\"`\n\tType     string `json:\"type\"`\n}\n```\n\nNotifierPagerduty description: PagerDuty notifier \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#NotifierSlack",
              "documentation": {
                "identifier": "NotifierSlack",
                "newPage": false,
                "searchKey": "schema.NotifierSlack",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NotifierSlack struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NotifierSlack struct {\n\t// Icon_emoji description: Provide an emoji to use as the icon for the bot’s message. Ex :smile:\n\tIcon_emoji string `json:\"icon_emoji,omitempty\"`\n\t// Icon_url description: Provide a URL to an image to use as the icon for the bot’s message.\n\tIcon_url string `json:\"icon_url,omitempty\"`\n\t// Recipient description: Allows you to override the Slack recipient. You must either provide a channel Slack ID, a user Slack ID, a username reference (@<user>, all lowercase, no whitespace), or a channel reference (#<channel>, all lowercase, no whitespace).\n\tRecipient string `json:\"recipient,omitempty\"`\n\tType      string `json:\"type\"`\n\t// Url description: Slack incoming webhook URL.\n\tUrl string `json:\"url,omitempty\"`\n\t// Username description: Set the username for the bot’s message.\n\tUsername string `json:\"username,omitempty\"`\n}\n```\n\nNotifierSlack description: Slack notifier \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#NotifierWebhook",
              "documentation": {
                "identifier": "NotifierWebhook",
                "newPage": false,
                "searchKey": "schema.NotifierWebhook",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NotifierWebhook struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NotifierWebhook struct {\n\tBearerToken string `json:\"bearerToken,omitempty\"`\n\tPassword    string `json:\"password,omitempty\"`\n\tType        string `json:\"type\"`\n\tUrl         string `json:\"url\"`\n\tUsername    string `json:\"username,omitempty\"`\n}\n```\n\nNotifierWebhook description: Webhook notifier \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#OAuthIdentity",
              "documentation": {
                "identifier": "OAuthIdentity",
                "newPage": false,
                "searchKey": "schema.OAuthIdentity",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OAuthIdentity struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OAuthIdentity struct {\n\tType string `json:\"type\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#ObservabilityAlerts",
              "documentation": {
                "identifier": "ObservabilityAlerts",
                "newPage": false,
                "searchKey": "schema.ObservabilityAlerts",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ObservabilityAlerts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ObservabilityAlerts struct {\n\t// DisableSendResolved description: Disable notifications when alerts resolve themselves.\n\tDisableSendResolved bool `json:\"disableSendResolved,omitempty\"`\n\t// Level description: Sourcegraph alert level to subscribe to notifications for.\n\tLevel    string   `json:\"level\"`\n\tNotifier Notifier `json:\"notifier\"`\n\t// Owners description: Do not use. When set, only receive alerts owned by the specified teams. Used by Sourcegraph internally.\n\tOwners []string `json:\"owners,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#ObservabilityTracing",
              "documentation": {
                "identifier": "ObservabilityTracing",
                "newPage": false,
                "searchKey": "schema.ObservabilityTracing",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ObservabilityTracing struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ObservabilityTracing struct {\n\t// Debug description: Turns on debug logging of opentracing client requests. This can be useful for debugging connectivity issues between the tracing client and the Jaeger agent, the performance overhead of tracing, and other issues related to the use of distributed tracing.\n\tDebug bool `json:\"debug,omitempty\"`\n\t// Sampling description: Determines the requests for which distributed traces are recorded. \"none\" (default) turns off tracing entirely. \"selective\" sends traces whenever `?trace=1` is present in the URL. \"all\" sends traces on every request. Note that this only affects the behavior of the distributed tracing client. The Jaeger instance must be running for traces to be collected (as described in the Sourcegraph installation instructions). Additional downsampling can be configured in Jaeger, itself (https://www.jaegertracing.io/docs/1.17/sampling)\n\tSampling string `json:\"sampling,omitempty\"`\n}\n```\n\nObservabilityTracing description: Controls the settings for distributed tracing. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#OnQuery",
              "documentation": {
                "identifier": "OnQuery",
                "newPage": false,
                "searchKey": "schema.OnQuery",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OnQuery struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OnQuery struct {\n\t// RepositoriesMatchingQuery description: A Sourcegraph search query that matches a set of repositories (and branches). If the query matches files, symbols, or some other object inside a repository, the object's repository is included.\n\tRepositoriesMatchingQuery string `json:\"repositoriesMatchingQuery\"`\n}\n```\n\nOnQuery description: A Sourcegraph search query that matches a set of repositories (and branches). Each matched repository branch is added to the list of repositories that the batch change will be run on. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#OnRepository",
              "documentation": {
                "identifier": "OnRepository",
                "newPage": false,
                "searchKey": "schema.OnRepository",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OnRepository struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OnRepository struct {\n\t// Branch description: The branch on the repository to propose changes to. If unset, the repository's default branch is used.\n\tBranch string `json:\"branch,omitempty\"`\n\t// Repository description: The name of the repository (as it is known to Sourcegraph).\n\tRepository string `json:\"repository\"`\n}\n```\n\nOnRepository description: A specific repository (and branch) that is added to the list of repositories that the batch change will be run on. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#OpenIDConnectAuthProvider",
              "documentation": {
                "identifier": "OpenIDConnectAuthProvider",
                "newPage": false,
                "searchKey": "schema.OpenIDConnectAuthProvider",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OpenIDConnectAuthProvider struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OpenIDConnectAuthProvider struct {\n\t// ClientID description: The client ID for the OpenID Connect client for this site.\n\t//\n\t// For Google Apps: obtain this value from the API console (https://console.developers.google.com), as described at https://developers.google.com/identity/protocols/OpenIDConnect#getcredentials\n\tClientID string `json:\"clientID\"`\n\t// ClientSecret description: The client secret for the OpenID Connect client for this site.\n\t//\n\t// For Google Apps: obtain this value from the API console (https://console.developers.google.com), as described at https://developers.google.com/identity/protocols/OpenIDConnect#getcredentials\n\tClientSecret string `json:\"clientSecret\"`\n\t// ConfigID description: An identifier that can be used to reference this authentication provider in other parts of the config. For example, in configuration for a code host, you may want to designate this authentication provider as the identity provider for the code host.\n\tConfigID    string `json:\"configID,omitempty\"`\n\tDisplayName string `json:\"displayName,omitempty\"`\n\t// Issuer description: The URL of the OpenID Connect issuer.\n\t//\n\t// For Google Apps: https://accounts.google.com\n\tIssuer string `json:\"issuer\"`\n\t// RequireEmailDomain description: Only allow users to authenticate if their email domain is equal to this value (example: mycompany.com). Do not include a leading \"@\". If not set, all users on this OpenID Connect provider can authenticate to Sourcegraph.\n\tRequireEmailDomain string `json:\"requireEmailDomain,omitempty\"`\n\tType               string `json:\"type\"`\n}\n```\n\nOpenIDConnectAuthProvider description: Configures the OpenID Connect authentication provider for SSO. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#OtherExternalServiceConnection",
              "documentation": {
                "identifier": "OtherExternalServiceConnection",
                "newPage": false,
                "searchKey": "schema.OtherExternalServiceConnection",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type OtherExternalServiceConnection struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OtherExternalServiceConnection struct {\n\tRepos []string `json:\"repos\"`\n\t// RepositoryPathPattern description: The pattern used to generate the corresponding Sourcegraph repository name for the repositories. In the pattern, the variable \"{base}\" is replaced with the Git clone base URL host and path, and \"{repo}\" is replaced with the repository path taken from the `repos` field.\n\t//\n\t// For example, if your Git clone base URL is https://git.example.com/repos and `repos` contains the value \"my/repo\", then a repositoryPathPattern of \"{base}/{repo}\" would mean that a repository at https://git.example.com/repos/my/repo is available on Sourcegraph at https://sourcegraph.example.com/git.example.com/repos/my/repo.\n\t//\n\t// It is important that the Sourcegraph repository name generated with this pattern be unique to this code host. If different code hosts generate repository names that collide, Sourcegraph's behavior is undefined.\n\tRepositoryPathPattern string `json:\"repositoryPathPattern,omitempty\"`\n\tUrl                   string `json:\"url,omitempty\"`\n}\n```\n\nOtherExternalServiceConnection description: Configuration for a Connection to Git repositories for which an external service integration isn't yet available. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Overrides",
              "documentation": {
                "identifier": "Overrides",
                "newPage": false,
                "searchKey": "schema.Overrides",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Overrides struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Overrides struct {\n\t// Key description: The key that we want to override for example a username\n\tKey string `json:\"key,omitempty\"`\n\t// Limit description: The limit per hour, 'unlimited' or 'blocked'\n\tLimit interface{} `json:\"limit,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#ParentSourcegraph",
              "documentation": {
                "identifier": "ParentSourcegraph",
                "newPage": false,
                "searchKey": "schema.ParentSourcegraph",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ParentSourcegraph struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ParentSourcegraph struct {\n\tUrl string `json:\"url,omitempty\"`\n}\n```\n\nParentSourcegraph description: URL to fetch unreachable repository details from. Defaults to \"[https://sourcegraph.com](https://sourcegraph.com)\" \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#PerforceAuthorization",
              "documentation": {
                "identifier": "PerforceAuthorization",
                "newPage": false,
                "searchKey": "schema.PerforceAuthorization",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PerforceAuthorization struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PerforceAuthorization struct {\n}\n```\n\nPerforceAuthorization description: If non-null, enforces Perforce depot permissions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#PerforceConnection",
              "documentation": {
                "identifier": "PerforceConnection",
                "newPage": false,
                "searchKey": "schema.PerforceConnection",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PerforceConnection struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PerforceConnection struct {\n\t// Authorization description: If non-null, enforces Perforce depot permissions.\n\tAuthorization *PerforceAuthorization `json:\"authorization,omitempty\"`\n\t// Depots description: Depots can have arbitrary paths, e.g. a path to depot root or a subdirectory.\n\tDepots []string `json:\"depots,omitempty\"`\n\t// MaxChanges description: Only import at most n changes when possible (git p4 clone --max-changes).\n\tMaxChanges float64 `json:\"maxChanges,omitempty\"`\n\t// P4Passwd description: The ticket value for the user (P4PASSWD).\n\tP4Passwd string `json:\"p4.passwd\"`\n\t// P4Port description: The Perforce Server address to be used for p4 CLI (P4PORT).\n\tP4Port string `json:\"p4.port\"`\n\t// P4User description: The user to be authenticated for p4 CLI (P4USER).\n\tP4User string `json:\"p4.user\"`\n\t// RateLimit description: Rate limit applied when making background API requests to Perforce.\n\tRateLimit *PerforceRateLimit `json:\"rateLimit,omitempty\"`\n\t// RepositoryPathPattern description: The pattern used to generate the corresponding Sourcegraph repository name for a Perforce depot. In the pattern, the variable \"{depot}\" is replaced with the Perforce depot's path.\n\t//\n\t// For example, if your Perforce depot path is \"//Sourcegraph/\" and your Sourcegraph URL is https://src.example.com, then a repositoryPathPattern of \"perforce/{depot}\" would mean that the Perforce depot is available on Sourcegraph at https://src.example.com/perforce/Sourcegraph.\n\t//\n\t// It is important that the Sourcegraph repository name generated with this pattern be unique to this Perforce Server. If different Perforce Servers generate repository names that collide, Sourcegraph's behavior is undefined.\n\tRepositoryPathPattern string `json:\"repositoryPathPattern,omitempty\"`\n}\n```\n\nPerforceConnection description: Configuration for a connection to Perforce Server. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#PerforceRateLimit",
              "documentation": {
                "identifier": "PerforceRateLimit",
                "newPage": false,
                "searchKey": "schema.PerforceRateLimit",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PerforceRateLimit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PerforceRateLimit struct {\n\t// Enabled description: true if rate limiting is enabled.\n\tEnabled bool `json:\"enabled\"`\n\t// RequestsPerHour description: Requests per hour permitted. This is an average, calculated per second. Internally, the burst limit is set to 100, which implies that for a requests per hour limit as low as 1, users will continue to be able to send a maximum of 100 requests immediately, provided that the complexity cost of each request is 1.\n\tRequestsPerHour float64 `json:\"requestsPerHour\"`\n}\n```\n\nPerforceRateLimit description: Rate limit applied when making background API requests to Perforce. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#PermissionsUserMapping",
              "documentation": {
                "identifier": "PermissionsUserMapping",
                "newPage": false,
                "searchKey": "schema.PermissionsUserMapping",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PermissionsUserMapping struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PermissionsUserMapping struct {\n\t// BindID description: The type of identifier to identify a user. The default is \"email\", which uses the email address to identify a user. Use \"username\" to identify a user by their username. Changing this setting will erase any permissions created for users that do not yet exist.\n\tBindID string `json:\"bindID,omitempty\"`\n\t// Enabled description: Whether permissions user mapping is enabled. There must be no `authorization` field in any external service configuration before enabling this.\n\tEnabled bool `json:\"enabled,omitempty\"`\n}\n```\n\nPermissionsUserMapping description: Settings for Sourcegraph permissions, which allow the site admin to explicitly manage repository permissions via the GraphQL API. This setting cannot be enabled if repository permissions for any specific external service are enabled (i.e., when the external service's `authorization` field is set). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Phabricator",
              "documentation": {
                "identifier": "Phabricator",
                "newPage": false,
                "searchKey": "schema.Phabricator",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Phabricator struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Phabricator struct {\n\t// CallsignCommand description:  Bash command that prints out the Phabricator callsign for a Gitolite repository. This will be run with environment variable $REPO set to the name of the repository and used to obtain the Phabricator metadata for a Gitolite repository. (Note: this requires `bash` to be installed.)\n\tCallsignCommand string `json:\"callsignCommand\"`\n\t// Url description: URL of the Phabricator instance that integrates with this Gitolite instance. This should be set\n\tUrl string `json:\"url\"`\n}\n```\n\nPhabricator description: Phabricator instance that integrates with this Gitolite instance \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#PhabricatorConnection",
              "documentation": {
                "identifier": "PhabricatorConnection",
                "newPage": false,
                "searchKey": "schema.PhabricatorConnection",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PhabricatorConnection struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PhabricatorConnection struct {\n\t// Repos description: The list of repositories available on Phabricator.\n\tRepos []*Repos `json:\"repos,omitempty\"`\n\t// Token description: API token for the Phabricator instance.\n\tToken string `json:\"token,omitempty\"`\n\t// Url description: URL of a Phabricator instance, such as https://phabricator.example.com\n\tUrl string `json:\"url,omitempty\"`\n}\n```\n\nPhabricatorConnection description: Configuration for a connection to Phabricator. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#QuickLink",
              "documentation": {
                "identifier": "QuickLink",
                "newPage": false,
                "searchKey": "schema.QuickLink",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type QuickLink struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QuickLink struct {\n\t// Description description: A description for this quick link\n\tDescription string `json:\"description,omitempty\"`\n\t// Name description: The human-readable name for this quick link\n\tName string `json:\"name\"`\n\t// Url description: The URL of this quick link (absolute or relative)\n\tUrl string `json:\"url\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Ranking",
              "documentation": {
                "identifier": "Ranking",
                "newPage": false,
                "searchKey": "schema.Ranking",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Ranking struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Ranking struct {\n\t// RepoScores description: a map of URI directories to numeric scores for specifying search result importance, like {\"github.com\": 500, \"github.com/sourcegraph\": 300, \"github.com/sourcegraph/sourcegraph\": 100}. Would rank \"github.com/sourcegraph/sourcegraph\" as 500+300+100=900, and \"github.com/other/foo\" as 500.\n\tRepoScores map[string]float64 `json:\"repoScores,omitempty\"`\n}\n```\n\nRanking description: Experimental search result ranking options. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Repos",
              "documentation": {
                "identifier": "Repos",
                "newPage": false,
                "searchKey": "schema.Repos",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Repos struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Repos struct {\n\t// Callsign description: The unique Phabricator identifier for the repository, like 'MUX'.\n\tCallsign string `json:\"callsign\"`\n\t// Path description: Display path for the url e.g. gitolite/my/repo\n\tPath string `json:\"path\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Responders",
              "documentation": {
                "identifier": "Responders",
                "newPage": false,
                "searchKey": "schema.Responders",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Responders struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Responders struct {\n\tId       string `json:\"id,omitempty\"`\n\tName     string `json:\"name,omitempty\"`\n\tType     string `json:\"type,omitempty\"`\n\tUsername string `json:\"username,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#SAMLAuthProvider",
              "documentation": {
                "identifier": "SAMLAuthProvider",
                "newPage": false,
                "searchKey": "schema.SAMLAuthProvider",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SAMLAuthProvider struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SAMLAuthProvider struct {\n\t// AllowSignup description: Allows new visitors to sign up for accounts via SAML authentication. If false, users signing in via SAML must have an existing Sourcegraph account, which will be linked to their SAML identity after sign-in.\n\tAllowSignup *bool `json:\"allowSignup,omitempty\"`\n\t// ConfigID description: An identifier that can be used to reference this authentication provider in other parts of the config. For example, in configuration for a code host, you may want to designate this authentication provider as the identity provider for the code host.\n\tConfigID    string `json:\"configID,omitempty\"`\n\tDisplayName string `json:\"displayName,omitempty\"`\n\t// IdentityProviderMetadata description: The SAML Identity Provider metadata XML contents (for static configuration of the SAML Service Provider). The value of this field should be an XML document whose root element is `<EntityDescriptor>` or `<EntityDescriptors>`. To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.\n\tIdentityProviderMetadata string `json:\"identityProviderMetadata,omitempty\"`\n\t// IdentityProviderMetadataURL description: The SAML Identity Provider metadata URL (for dynamic configuration of the SAML Service Provider).\n\tIdentityProviderMetadataURL string `json:\"identityProviderMetadataURL,omitempty\"`\n\t// InsecureSkipAssertionSignatureValidation description: Whether the Service Provider should (insecurely) accept assertions from the Identity Provider without a valid signature.\n\tInsecureSkipAssertionSignatureValidation bool `json:\"insecureSkipAssertionSignatureValidation,omitempty\"`\n\t// NameIDFormat description: The SAML NameID format to use when performing user authentication.\n\tNameIDFormat string `json:\"nameIDFormat,omitempty\"`\n\t// ServiceProviderCertificate description: The SAML Service Provider certificate in X.509 encoding (begins with \"-----BEGIN CERTIFICATE-----\"). This certificate is used by the Identity Provider to validate the Service Provider's AuthnRequests and LogoutRequests. It corresponds to the Service Provider's private key (`serviceProviderPrivateKey`). To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.\n\tServiceProviderCertificate string `json:\"serviceProviderCertificate,omitempty\"`\n\t// ServiceProviderIssuer description: The SAML Service Provider name, used to identify this Service Provider. This is required if the \"externalURL\" field is not set (as the SAML metadata endpoint is computed as \"<externalURL>.auth/saml/metadata\"), or when using multiple SAML authentication providers.\n\tServiceProviderIssuer string `json:\"serviceProviderIssuer,omitempty\"`\n\t// ServiceProviderPrivateKey description: The SAML Service Provider private key in PKCS#8 encoding (begins with \"-----BEGIN PRIVATE KEY-----\"). This private key is used to sign AuthnRequests and LogoutRequests. It corresponds to the Service Provider's certificate (`serviceProviderCertificate`). To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.\n\tServiceProviderPrivateKey string `json:\"serviceProviderPrivateKey,omitempty\"`\n\t// SignRequests description: Sign AuthnRequests and LogoutRequests sent to the Identity Provider using the Service Provider's private key (`serviceProviderPrivateKey`). It defaults to true if the `serviceProviderPrivateKey` and `serviceProviderCertificate` are set, and false otherwise.\n\tSignRequests *bool  `json:\"signRequests,omitempty\"`\n\tType         string `json:\"type\"`\n}\n```\n\nSAMLAuthProvider description: Configures the SAML authentication provider for SSO. \n\nNote: if you are using IdP-initiated login, you must have *at most one* SAMLAuthProvider in the `auth.providers` array. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#SMTPServerConfig",
              "documentation": {
                "identifier": "SMTPServerConfig",
                "newPage": false,
                "searchKey": "schema.SMTPServerConfig",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SMTPServerConfig struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SMTPServerConfig struct {\n\t// Authentication description: The type of authentication to use for the SMTP server.\n\tAuthentication string `json:\"authentication\"`\n\t// DisableTLS description: DEPRECATED: use noVerifyTLS instead, this field will be removed in a future release\n\tDisableTLS bool `json:\"disableTLS,omitempty\"`\n\t// Domain description: The HELO domain to provide to the SMTP server (if needed).\n\tDomain string `json:\"domain,omitempty\"`\n\t// Host description: The SMTP server host.\n\tHost string `json:\"host\"`\n\t// NoVerifyTLS description: Disable TLS verification\n\tNoVerifyTLS bool `json:\"noVerifyTLS,omitempty\"`\n\t// Password description: The password to use when communicating with the SMTP server.\n\tPassword string `json:\"password,omitempty\"`\n\t// Port description: The SMTP server port.\n\tPort int `json:\"port\"`\n\t// Username description: The username to use when communicating with the SMTP server.\n\tUsername string `json:\"username,omitempty\"`\n}\n```\n\nSMTPServerConfig description: The SMTP server used to send transactional emails (such as email verifications, reset-password emails, and notifications). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#SearchLimits",
              "documentation": {
                "identifier": "SearchLimits",
                "newPage": false,
                "searchKey": "schema.SearchLimits",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchLimits struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchLimits struct {\n\t// CommitDiffMaxRepos description: The maximum number of repositories to search across when doing a \"type:diff\" or \"type:commit\". The user is prompted to narrow their query if the limit is exceeded. There is a separate limit (commitDiffWithTimeFilterMaxRepos) when \"after:\" or \"before:\" is specified because those queries are faster. Defaults to 50.\n\tCommitDiffMaxRepos int `json:\"commitDiffMaxRepos,omitempty\"`\n\t// CommitDiffWithTimeFilterMaxRepos description: The maximum number of repositories to search across when doing a \"type:diff\" or \"type:commit\" with a \"after:\" or \"before:\" filter. The user is prompted to narrow their query if the limit is exceeded. There is a separate limit (commitDiffMaxRepos) when \"after:\" or \"before:\" is not specified because those queries are slower. Defaults to 10000.\n\tCommitDiffWithTimeFilterMaxRepos int `json:\"commitDiffWithTimeFilterMaxRepos,omitempty\"`\n\t// MaxRepos description: The maximum number of repositories to search across. The user is prompted to narrow their query if exceeded. Any value less than or equal to zero means unlimited.\n\tMaxRepos int `json:\"maxRepos,omitempty\"`\n\t// MaxTimeoutSeconds description: The maximum value for \"timeout:\" that search will respect. \"timeout:\" values larger than maxTimeoutSeconds are capped at maxTimeoutSeconds. Note: You need to ensure your load balancer / reverse proxy in front of Sourcegraph won't timeout the request for larger values. Note: Too many large rearch requests may harm Soucregraph for other users. Defaults to 1 minute.\n\tMaxTimeoutSeconds int `json:\"maxTimeoutSeconds,omitempty\"`\n}\n```\n\nSearchLimits description: Limits that search applies for number of repositories searched and timeouts. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#SearchSavedQueries",
              "documentation": {
                "identifier": "SearchSavedQueries",
                "newPage": false,
                "searchKey": "schema.SearchSavedQueries",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchSavedQueries struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchSavedQueries struct {\n\t// Description description: Description of this saved query\n\tDescription string `json:\"description\"`\n\t// Key description: Unique key for this query in this file\n\tKey string `json:\"key\"`\n\t// Notify description: Notify the owner of this configuration file when new results are available\n\tNotify bool `json:\"notify,omitempty\"`\n\t// NotifySlack description: Notify Slack via the organization's Slack webhook URL when new results are available\n\tNotifySlack bool `json:\"notifySlack,omitempty\"`\n\t// Query description: Query string\n\tQuery string `json:\"query\"`\n\t// ShowOnHomepage description: DEPRECATED: saved searches are no longer shown on the homepage. This will be removed in a future release.\n\tShowOnHomepage bool `json:\"showOnHomepage,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#SearchScope",
              "documentation": {
                "identifier": "SearchScope",
                "newPage": false,
                "searchKey": "schema.SearchScope",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SearchScope struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SearchScope struct {\n\t// Name description: The human-readable name for this search scope\n\tName string `json:\"name\"`\n\t// Value description: The query string of this search scope\n\tValue string `json:\"value\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Sentry",
              "documentation": {
                "identifier": "Sentry",
                "newPage": false,
                "searchKey": "schema.Sentry",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Sentry struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Sentry struct {\n\t// BackendDSN description: Sentry Data Source Name (DSN) for backend errors. Per the Sentry docs (https://docs.sentry.io/quickstart/#about-the-dsn), it should match the following pattern: '{PROTOCOL}://{PUBLIC_KEY}@{HOST}/{PATH}{PROJECT_ID}'.\n\tBackendDSN string `json:\"backendDSN,omitempty\"`\n\t// Dsn description: Sentry Data Source Name (DSN). Per the Sentry docs (https://docs.sentry.io/quickstart/#about-the-dsn), it should match the following pattern: '{PROTOCOL}://{PUBLIC_KEY}@{HOST}/{PATH}{PROJECT_ID}'.\n\tDsn string `json:\"dsn,omitempty\"`\n}\n```\n\nSentry description: Configuration for Sentry \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Settings",
              "documentation": {
                "identifier": "Settings",
                "newPage": false,
                "searchKey": "schema.Settings",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Settings struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Settings struct {\n\t// AlertsCodeHostIntegrationMessaging description: What in-app messaging to use around availability of Sourcegraph's code intelligence on code hosts. If the native code host integration is installed, this should be set to \"native-integration\" and users won't need to install the Sourcegraph browser extension to get code intelligence on code hosts.\n\tAlertsCodeHostIntegrationMessaging string `json:\"alerts.codeHostIntegrationMessaging,omitempty\"`\n\t// AlertsHideObservabilitySiteAlerts description: Disables observability-related site alert banners.\n\tAlertsHideObservabilitySiteAlerts *bool `json:\"alerts.hideObservabilitySiteAlerts,omitempty\"`\n\t// AlertsShowPatchUpdates description: Whether to show alerts for patch version updates. Alerts for major and minor version updates will always be shown.\n\tAlertsShowPatchUpdates bool `json:\"alerts.showPatchUpdates,omitempty\"`\n\t// CodeHostUseNativeTooltips description: Whether to use the code host's native hover tooltips when they exist (GitHub's jump-to-definition tooltips, for example).\n\tCodeHostUseNativeTooltips bool `json:\"codeHost.useNativeTooltips,omitempty\"`\n\t// ExperimentalFeatures description: Experimental features to enable or disable. Features that are now enabled by default are marked as deprecated.\n\tExperimentalFeatures *SettingsExperimentalFeatures `json:\"experimentalFeatures,omitempty\"`\n\t// Extensions description: The Sourcegraph extensions to use. Enable an extension by adding a property `\"my/extension\": true` (where `my/extension` is the extension ID). Override a previously enabled extension and disable it by setting its value to `false`.\n\tExtensions map[string]bool `json:\"extensions,omitempty\"`\n\t// ExtensionsActiveLoggers description: The Sourcegraph extensions, by ID (e.g. `my/extension`), whose logs should be visible in the console.\n\tExtensionsActiveLoggers []string `json:\"extensions.activeLoggers,omitempty\"`\n\t// Insights description: EXPERIMENTAL: Code Insights\n\tInsights                            []*Insight `json:\"insights,omitempty\"`\n\tInsightsDisplayLocationDirectory    *bool      `json:\"insights.displayLocation.directory,omitempty\"`\n\tInsightsDisplayLocationHomepage     *bool      `json:\"insights.displayLocation.homepage,omitempty\"`\n\tInsightsDisplayLocationInsightsPage *bool      `json:\"insights.displayLocation.insightsPage,omitempty\"`\n\t// Motd description: DEPRECATED: Use `notices` instead.\n\t//\n\t// An array (often with just one element) of messages to display at the top of all pages, including for unauthenticated users. Users may dismiss a message (and any message with the same string value will remain dismissed for the user).\n\t//\n\t// Markdown formatting is supported.\n\t//\n\t// Usually this setting is used in global and organization settings. If set in user settings, the message will only be displayed to that user. (This is useful for testing the correctness of the message's Markdown formatting.)\n\t//\n\t// MOTD stands for \"message of the day\" (which is the conventional Unix name for this type of message).\n\tMotd []string `json:\"motd,omitempty\"`\n\t// Notices description: Custom informational messages to display to users at specific locations in the Sourcegraph user interface.\n\t//\n\t// Usually this setting is used in global and organization settings. If set in user settings, the message will only be displayed to that single user.\n\tNotices []*Notice `json:\"notices,omitempty\"`\n\t// Quicklinks description: Links that should be accessible quickly from the home and search pages.\n\tQuicklinks []*QuickLink `json:\"quicklinks,omitempty\"`\n\t// SearchContextLines description: The default number of lines to show as context below and above search results. Default is 1.\n\tSearchContextLines int `json:\"search.contextLines,omitempty\"`\n\t// SearchDefaultCaseSensitive description: Whether query patterns are treated case sensitively. Patterns are case insensitive by default.\n\tSearchDefaultCaseSensitive bool `json:\"search.defaultCaseSensitive,omitempty\"`\n\t// SearchDefaultPatternType description: The default pattern type (literal or regexp) that search queries will be intepreted as.\n\tSearchDefaultPatternType string `json:\"search.defaultPatternType,omitempty\"`\n\t// SearchGlobbing description: Enables globbing for supported field values\n\tSearchGlobbing *bool `json:\"search.globbing,omitempty\"`\n\t// SearchHideSuggestions description: Disable search suggestions below the search bar when constructing queries. Defaults to false.\n\tSearchHideSuggestions *bool `json:\"search.hideSuggestions,omitempty\"`\n\t// SearchIncludeArchived description: Whether searches should include searching archived repositories.\n\tSearchIncludeArchived *bool `json:\"search.includeArchived,omitempty\"`\n\t// SearchIncludeForks description: Whether searches should include searching forked repositories.\n\tSearchIncludeForks *bool `json:\"search.includeForks,omitempty\"`\n\t// SearchMigrateParser description: REMOVED. Previously, a flag to enable and/or-expressions in queries as an aid transition to new language features in versions <= 3.24.0.\n\tSearchMigrateParser *bool `json:\"search.migrateParser,omitempty\"`\n\t// SearchRepositoryGroups description: Named groups of repositories that can be referenced in a search query using the `repogroup:` operator. The list can contain string literals (to include single repositories) and JSON objects with a \"regex\" field (to include all repositories matching the regular expression). Retrieving repogroups via the GQL interface will currently exclude repositories matched by regex patterns. #14208.\n\tSearchRepositoryGroups map[string][]interface{} `json:\"search.repositoryGroups,omitempty\"`\n\t// SearchSavedQueries description: DEPRECATED: Saved search queries\n\tSearchSavedQueries []*SearchSavedQueries `json:\"search.savedQueries,omitempty\"`\n\t// SearchScopes description: Predefined search snippets that can be appended to any search (also known as search scopes)\n\tSearchScopes []*SearchScope `json:\"search.scopes,omitempty\"`\n\t// SearchUppercase description: REMOVED. Previously, when active, any uppercase characters in the pattern will make the entire query case-sensitive.\n\tSearchUppercase *bool `json:\"search.uppercase,omitempty\"`\n}\n```\n\nSettings description: Configuration settings for users and organizations on Sourcegraph. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#SettingsExperimentalFeatures",
              "documentation": {
                "identifier": "SettingsExperimentalFeatures",
                "newPage": false,
                "searchKey": "schema.SettingsExperimentalFeatures",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SettingsExperimentalFeatures struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SettingsExperimentalFeatures struct {\n\t// AcceptSearchSuggestionOnEnter description: Whether the search bar should select completion suggestions when pressing enter\n\tAcceptSearchSuggestionOnEnter *bool `json:\"acceptSearchSuggestionOnEnter,omitempty\"`\n\t// ApiDocs description: Enables API documentation.\n\tApiDocs *bool `json:\"apiDocs,omitempty\"`\n\t// CodeInsights description: Enables code insights on directory pages.\n\tCodeInsights *bool `json:\"codeInsights,omitempty\"`\n\t// CodeMonitoring description: Enables code monitoring.\n\tCodeMonitoring *bool `json:\"codeMonitoring,omitempty\"`\n\t// CopyQueryButton description: DEPRECATED: This feature is now permanently enabled. Enables displaying the copy query button in the search bar when hovering over the global navigation bar.\n\tCopyQueryButton *bool `json:\"copyQueryButton,omitempty\"`\n\t// DesignRefreshToggleEnabled description: Enables access to the design refresh toggle in the user menu.\n\tDesignRefreshToggleEnabled *bool `json:\"designRefreshToggleEnabled,omitempty\"`\n\t// EnableFastResultLoading description: Enables optimized search result loading (syntax highlighting / file contents fetching)\n\tEnableFastResultLoading *bool `json:\"enableFastResultLoading,omitempty\"`\n\t// EnableSmartQuery description: Enables contextual syntax highlighting and hovers for search queries in the web app\n\tEnableSmartQuery *bool `json:\"enableSmartQuery,omitempty\"`\n\t// FuzzyFinder description: Enables fuzzy finder with keyboard shortcut `t`.\n\tFuzzyFinder *bool `json:\"fuzzyFinder,omitempty\"`\n\t// FuzzyFinderCaseInsensitiveFileCountThreshold description: The maximum number of files a repo can have to use case-insensitive fuzzy finding\n\tFuzzyFinderCaseInsensitiveFileCountThreshold *float64 `json:\"fuzzyFinderCaseInsensitiveFileCountThreshold,omitempty\"`\n\t// SearchStats description: Enables a button on the search results page that shows language statistics about the results for a search query.\n\tSearchStats *bool `json:\"searchStats,omitempty\"`\n\t// SearchStreaming description: DEPRECATED: This feature is now permanently enabled. Enables streaming search support.\n\tSearchStreaming *bool `json:\"searchStreaming,omitempty\"`\n\t// ShowCodeMonitoringTestEmailButton description: Enables the 'Send test email' debugging button for code monitoring.\n\tShowCodeMonitoringTestEmailButton *bool `json:\"showCodeMonitoringTestEmailButton,omitempty\"`\n\t// ShowEnterpriseHomePanels description: Enabled the homepage panels in the Enterprise homepage\n\tShowEnterpriseHomePanels *bool `json:\"showEnterpriseHomePanels,omitempty\"`\n\t// ShowMultilineSearchConsole description: Enables the multiline search console at search/console\n\tShowMultilineSearchConsole *bool `json:\"showMultilineSearchConsole,omitempty\"`\n\t// ShowOnboardingTour description: Enables the onboarding tour.\n\tShowOnboardingTour *bool `json:\"showOnboardingTour,omitempty\"`\n\t// ShowQueryBuilder description: Enables the search query builder page at search/query-builder\n\tShowQueryBuilder *bool `json:\"showQueryBuilder,omitempty\"`\n\t// ShowRepogroupHomepage description: Enables the repository group homepage\n\tShowRepogroupHomepage *bool `json:\"showRepogroupHomepage,omitempty\"`\n\t// ShowSearchContext description: Enables the search context dropdown.\n\tShowSearchContext *bool `json:\"showSearchContext,omitempty\"`\n\t// ShowSearchContextManagement description: Enables search context management.\n\tShowSearchContextManagement *bool `json:\"showSearchContextManagement,omitempty\"`\n}\n```\n\nSettingsExperimentalFeatures description: Experimental features to enable or disable. Features that are now enabled by default are marked as deprecated. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#SiteConfiguration",
              "documentation": {
                "identifier": "SiteConfiguration",
                "newPage": false,
                "searchKey": "schema.SiteConfiguration",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SiteConfiguration struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SiteConfiguration struct {\n\t// ApiRatelimit description: Configuration for API rate limiting\n\tApiRatelimit *ApiRatelimit `json:\"api.ratelimit,omitempty\"`\n\t// AuthAccessTokens description: Settings for access tokens, which enable external tools to access the Sourcegraph API with the privileges of the user.\n\tAuthAccessTokens *AuthAccessTokens `json:\"auth.accessTokens,omitempty\"`\n\t// AuthEnableUsernameChanges description: Enables users to change their username after account creation. Warning: setting this to be true has security implications if you have enabled (or will at any point in the future enable) repository permissions with an option that relies on username equivalency between Sourcegraph and an external service or authentication provider. Do NOT set this to true if you are using non-built-in authentication OR rely on username equivalency for repository permissions.\n\tAuthEnableUsernameChanges bool `json:\"auth.enableUsernameChanges,omitempty\"`\n\t// AuthMinPasswordLength description: The minimum number of Unicode code points that a password must contain.\n\tAuthMinPasswordLength int `json:\"auth.minPasswordLength,omitempty\"`\n\t// AuthPasswordResetLinkExpiry description: The duration (in seconds) that a password reset link is considered valid.\n\tAuthPasswordResetLinkExpiry int `json:\"auth.passwordResetLinkExpiry,omitempty\"`\n\t// AuthProviders description: The authentication providers to use for identifying and signing in users. See instructions below for configuring SAML, OpenID Connect (including Google Workspace), and HTTP authentication proxies. Multiple authentication providers are supported (by specifying multiple elements in this array).\n\tAuthProviders []AuthProviders `json:\"auth.providers,omitempty\"`\n\t// AuthPublic description: WARNING: This option has been removed as of 3.8.\n\tAuthPublic bool `json:\"auth.public,omitempty\"`\n\t// AuthSessionExpiry description: The duration of a user session, after which it expires and the user is required to re-authenticate. The default is 90 days. There is typically no need to set this, but some users may have specific internal security requirements.\n\t//\n\t// The string format is that of the Duration type in the Go time package (https://golang.org/pkg/time/#ParseDuration). E.g., \"720h\", \"43200m\", \"2592000s\" all indicate a timespan of 30 days.\n\t//\n\t// Note: changing this field does not affect the expiration of existing sessions. If you would like to enforce this limit for existing sessions, you must log out currently signed-in users. You can force this by removing all keys beginning with \"session_\" from the Redis store:\n\t//\n\t// * For deployments using `sourcegraph/server`: `docker exec $CONTAINER_ID redis-cli --raw keys 'session_*' | xargs docker exec $CONTAINER_ID redis-cli del`\n\t// * For cluster deployments:\n\t//   ```\n\t//   REDIS_POD=\"$(kubectl get pods -l app=redis-store -o jsonpath={.items[0].metadata.name})\";\n\t//   kubectl exec \"$REDIS_POD\" -- redis-cli --raw keys 'session_*' | xargs kubectl exec \"$REDIS_POD\" -- redis-cli --raw del;\n\t//   ```\n\t//\n\tAuthSessionExpiry string `json:\"auth.sessionExpiry,omitempty\"`\n\t// AuthUserOrgMap description: Ensure that matching users are members of the specified orgs (auto-joining users to the orgs if they are not already a member). Provide a JSON object of the form `{\"*\": [\"org1\", \"org2\"]}`, where org1 and org2 are orgs that all users are automatically joined to. Currently the only supported key is `\"*\"`.\n\tAuthUserOrgMap map[string][]string `json:\"auth.userOrgMap,omitempty\"`\n\t// AuthzEnforceForSiteAdmins description: When true, site admins will only be able to see private code they have access to via our authz system.\n\tAuthzEnforceForSiteAdmins bool `json:\"authz.enforceForSiteAdmins,omitempty\"`\n\t// BatchChangesEnabled description: Enables/disables the Batch Changes feature.\n\tBatchChangesEnabled *bool `json:\"batchChanges.enabled,omitempty\"`\n\t// BatchChangesRestrictToAdmins description: When enabled, only site admins can create and apply batch changes.\n\tBatchChangesRestrictToAdmins *bool `json:\"batchChanges.restrictToAdmins,omitempty\"`\n\t// BatchChangesRolloutWindows description: Specifies specific windows, which can have associated rate limits, to be used when publishing changesets. All days and times are handled in UTC.\n\tBatchChangesRolloutWindows *[]*BatchChangeRolloutWindow `json:\"batchChanges.rolloutWindows,omitempty\"`\n\t// Branding description: Customize Sourcegraph homepage logo and search icon.\n\t//\n\t// Only available in Sourcegraph Enterprise.\n\tBranding *Branding `json:\"branding,omitempty\"`\n\t// CampaignsEnabled description: DEPRECATED: Use batchChanges.enabled instead. Enables/disables the campaigns feature.\n\tCampaignsEnabled *bool `json:\"campaigns.enabled,omitempty\"`\n\t// CampaignsRestrictToAdmins description: DEPRECATED: Use batchChanges.restrictToAdmins instead. When enabled, only site admins can create and apply campaigns.\n\tCampaignsRestrictToAdmins *bool `json:\"campaigns.restrictToAdmins,omitempty\"`\n\t// CodeIntelAutoIndexingEnabled description: Enables/disables the code intel auto indexing feature.\n\tCodeIntelAutoIndexingEnabled *bool `json:\"codeIntelAutoIndexing.enabled,omitempty\"`\n\t// CorsOrigin description: Required when using any of the native code host integrations for Phabricator, GitLab, or Bitbucket Server. It is a space-separated list of allowed origins for cross-origin HTTP requests which should be the base URL for your Phabricator, GitLab, or Bitbucket Server instance.\n\tCorsOrigin string `json:\"corsOrigin,omitempty\"`\n\t// DebugSearchSymbolsParallelism description: (debug) controls the amount of symbol search parallelism. Defaults to 20. It is not recommended to change this outside of debugging scenarios. This option will be removed in a future version.\n\tDebugSearchSymbolsParallelism int `json:\"debug.search.symbolsParallelism,omitempty\"`\n\t// DisableAutoCodeHostSyncs description: Disable periodic syncs of configured code host connections (repository metadata, permissions, batch changes changesets, etc)\n\tDisableAutoCodeHostSyncs bool `json:\"disableAutoCodeHostSyncs,omitempty\"`\n\t// DisableAutoGitUpdates description: Disable periodically fetching git contents for existing repositories.\n\tDisableAutoGitUpdates bool `json:\"disableAutoGitUpdates,omitempty\"`\n\t// DisableBuiltInSearches description: Whether built-in searches should be hidden on the Searches page.\n\tDisableBuiltInSearches bool `json:\"disableBuiltInSearches,omitempty\"`\n\t// DisableNonCriticalTelemetry description: Disable aggregated event counts from being sent to Sourcegraph.com via pings.\n\tDisableNonCriticalTelemetry bool `json:\"disableNonCriticalTelemetry,omitempty\"`\n\t// DisablePublicRepoRedirects description: Disable redirects to sourcegraph.com when visiting public repositories that can't exist on this server.\n\tDisablePublicRepoRedirects bool `json:\"disablePublicRepoRedirects,omitempty\"`\n\t// DontIncludeSymbolResultsByDefault description: Set to `true` to not include symbol results if no `type:` filter was given\n\tDontIncludeSymbolResultsByDefault bool `json:\"dontIncludeSymbolResultsByDefault,omitempty\"`\n\t// Dotcom description: Configuration options for Sourcegraph.com only.\n\tDotcom *Dotcom `json:\"dotcom,omitempty\"`\n\t// EmailAddress description: The \"from\" address for emails sent by this server.\n\tEmailAddress string `json:\"email.address,omitempty\"`\n\t// EmailSmtp description: The SMTP server used to send transactional emails (such as email verifications, reset-password emails, and notifications).\n\tEmailSmtp *SMTPServerConfig `json:\"email.smtp,omitempty\"`\n\t// EncryptionKeys description: Configuration for encryption keys used to encrypt data at rest in the database.\n\tEncryptionKeys *EncryptionKeys `json:\"encryption.keys,omitempty\"`\n\t// ExperimentalFeatures description: Experimental features to enable or disable. Features that are now enabled by default are marked as deprecated.\n\tExperimentalFeatures *ExperimentalFeatures `json:\"experimentalFeatures,omitempty\"`\n\t// Extensions description: Configures Sourcegraph extensions.\n\tExtensions *Extensions `json:\"extensions,omitempty\"`\n\t// ExternalServiceUserMode description: Enable to allow users to add external services for public and private repositories to the Sourcegraph instance.\n\tExternalServiceUserMode string `json:\"externalService.userMode,omitempty\"`\n\t// ExternalURL description: The externally accessible URL for Sourcegraph (i.e., what you type into your browser). Previously called `appURL`. Only root URLs are allowed.\n\tExternalURL string `json:\"externalURL,omitempty\"`\n\t// GitCloneURLToRepositoryName description: JSON array of configuration that maps from Git clone URL to repository name. Sourcegraph automatically resolves remote clone URLs to their proper code host. However, there may be non-remote clone URLs (e.g., in submodule declarations) that Sourcegraph cannot automatically map to a code host. In this case, use this field to specify the mapping. The mappings are tried in the order they are specified and take precedence over automatic mappings.\n\tGitCloneURLToRepositoryName []*CloneURLToRepositoryName `json:\"git.cloneURLToRepositoryName,omitempty\"`\n\t// GitMaxCodehostRequestsPerSecond description: Maximum number of remote code host git operations (e.g. clone or ls-remote) to be run per second per gitserver. Default is -1, which is unlimited.\n\tGitMaxCodehostRequestsPerSecond *int `json:\"gitMaxCodehostRequestsPerSecond,omitempty\"`\n\t// GitMaxConcurrentClones description: Maximum number of git clone processes that will be run concurrently per gitserver to update repositories. Note: the global git update scheduler respects gitMaxConcurrentClones. However, we allow each gitserver to run upto gitMaxConcurrentClones to allow for urgent fetches. Urgent fetches are used when a user is browsing a PR and we do not have the commit yet.\n\tGitMaxConcurrentClones int `json:\"gitMaxConcurrentClones,omitempty\"`\n\t// GitUpdateInterval description: JSON array of repo name patterns and update intervals. If a repo matches a pattern, the associated interval will be used. If it matches no patterns a default backoff heuristic will be used. Pattern matches are attempted in the order they are provided.\n\tGitUpdateInterval []*UpdateIntervalRule `json:\"gitUpdateInterval,omitempty\"`\n\t// GithubClientID description: Client ID for GitHub. (DEPRECATED)\n\tGithubClientID string `json:\"githubClientID,omitempty\"`\n\t// GithubClientSecret description: Client secret for GitHub. (DEPRECATED)\n\tGithubClientSecret string `json:\"githubClientSecret,omitempty\"`\n\t// HtmlBodyBottom description: HTML to inject at the bottom of the `<body>` element on each page, for analytics scripts\n\tHtmlBodyBottom string `json:\"htmlBodyBottom,omitempty\"`\n\t// HtmlBodyTop description: HTML to inject at the top of the `<body>` element on each page, for analytics scripts\n\tHtmlBodyTop string `json:\"htmlBodyTop,omitempty\"`\n\t// HtmlHeadBottom description: HTML to inject at the bottom of the `<head>` element on each page, for analytics scripts\n\tHtmlHeadBottom string `json:\"htmlHeadBottom,omitempty\"`\n\t// HtmlHeadTop description: HTML to inject at the top of the `<head>` element on each page, for analytics scripts\n\tHtmlHeadTop string `json:\"htmlHeadTop,omitempty\"`\n\t// InsightsHistoricalFrameLength description: (debug) duration of historical insights timeframes, one point per repository will be recorded in each timeframe.\n\tInsightsHistoricalFrameLength string `json:\"insights.historical.frameLength,omitempty\"`\n\t// InsightsHistoricalFrames description: (debug) number of historical insights timeframes to populate\n\tInsightsHistoricalFrames int `json:\"insights.historical.frames,omitempty\"`\n\t// InsightsHistoricalSpeedFactor description: (debug) Speed factor for building historical insights data. A value like 1.5 indicates approximately to use 1.5x as much repo-updater and gitserver resources.\n\tInsightsHistoricalSpeedFactor *float64 `json:\"insights.historical.speedFactor,omitempty\"`\n\t// InsightsHistoricalWorkerRateLimit description: Maximum number of historical Code Insights data frames that may be analyzed per second.\n\tInsightsHistoricalWorkerRateLimit *float64 `json:\"insights.historical.worker.rateLimit,omitempty\"`\n\t// InsightsQueryWorkerConcurrency description: Number of concurrent executions of a code insight query on a worker node\n\tInsightsQueryWorkerConcurrency int `json:\"insights.query.worker.concurrency,omitempty\"`\n\t// InsightsQueryWorkerRateLimit description: Maximum number of Code Insights queries initiated per second on a worker node.\n\tInsightsQueryWorkerRateLimit *float64 `json:\"insights.query.worker.rateLimit,omitempty\"`\n\t// LicenseKey description: The license key associated with a Sourcegraph product subscription, which is necessary to activate Sourcegraph Enterprise functionality. To obtain this value, contact Sourcegraph to purchase a subscription. To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.\n\tLicenseKey string `json:\"licenseKey,omitempty\"`\n\t// Log description: Configuration for logging and alerting, including to external services.\n\tLog *Log `json:\"log,omitempty\"`\n\t// LsifEnforceAuth description: Whether or not LSIF uploads will be blocked unless a valid LSIF upload token is provided.\n\tLsifEnforceAuth bool `json:\"lsifEnforceAuth,omitempty\"`\n\t// MaxReposToSearch description: DEPRECATED: Configure maxRepos in search.limits. The maximum number of repositories to search across. The user is prompted to narrow their query if exceeded. Any value less than or equal to zero means unlimited.\n\tMaxReposToSearch int `json:\"maxReposToSearch,omitempty\"`\n\t// ObservabilityAlerts description: Configure notifications for Sourcegraph's built-in alerts.\n\tObservabilityAlerts []*ObservabilityAlerts `json:\"observability.alerts,omitempty\"`\n\t// ObservabilityLogSlowGraphQLRequests description: (debug) logs all GraphQL requests slower than the specified number of milliseconds.\n\tObservabilityLogSlowGraphQLRequests int `json:\"observability.logSlowGraphQLRequests,omitempty\"`\n\t// ObservabilityLogSlowSearches description: (debug) logs all search queries (issued by users, code intelligence, or API requests) slower than the specified number of milliseconds.\n\tObservabilityLogSlowSearches int `json:\"observability.logSlowSearches,omitempty\"`\n\t// ObservabilitySilenceAlerts description: Silence individual Sourcegraph alerts by identifier.\n\tObservabilitySilenceAlerts []string `json:\"observability.silenceAlerts,omitempty\"`\n\t// ObservabilityTracing description: Controls the settings for distributed tracing.\n\tObservabilityTracing *ObservabilityTracing `json:\"observability.tracing,omitempty\"`\n\t// ParentSourcegraph description: URL to fetch unreachable repository details from. Defaults to \"https://sourcegraph.com\"\n\tParentSourcegraph *ParentSourcegraph `json:\"parentSourcegraph,omitempty\"`\n\t// PermissionsUserMapping description: Settings for Sourcegraph permissions, which allow the site admin to explicitly manage repository permissions via the GraphQL API. This setting cannot be enabled if repository permissions for any specific external service are enabled (i.e., when the external service's `authorization` field is set).\n\tPermissionsUserMapping *PermissionsUserMapping `json:\"permissions.userMapping,omitempty\"`\n\t// ProductResearchPageEnabled description: Enables users access to the product research page in their settings.\n\tProductResearchPageEnabled *bool `json:\"productResearchPage.enabled,omitempty\"`\n\t// RepoConcurrentExternalServiceSyncers description: The number of concurrent external service syncers that can run.\n\tRepoConcurrentExternalServiceSyncers int `json:\"repoConcurrentExternalServiceSyncers,omitempty\"`\n\t// RepoListUpdateInterval description: Interval (in minutes) for checking code hosts (such as GitHub, Gitolite, etc.) for new repositories.\n\tRepoListUpdateInterval int `json:\"repoListUpdateInterval,omitempty\"`\n\t// SearchIndexEnabled description: Whether indexed search is enabled. If unset Sourcegraph detects the environment to decide if indexed search is enabled. Indexed search is RAM heavy, and is disabled by default in the single docker image. All other environments will have it enabled by default. The size of all your repository working copies is the amount of additional RAM required.\n\tSearchIndexEnabled *bool `json:\"search.index.enabled,omitempty\"`\n\t// SearchIndexSymbolsEnabled description: Whether indexed symbol search is enabled. This is contingent on the indexed search configuration, and is true by default for instances with indexed search enabled. Enabling this will cause every repository to re-index, which is a time consuming (several hours) operation. Additionally, it requires more storage and ram to accommodate the added symbols information in the search index.\n\tSearchIndexSymbolsEnabled *bool `json:\"search.index.symbols.enabled,omitempty\"`\n\t// SearchLargeFiles description: A list of file glob patterns where matching files will be indexed and searched regardless of their size. Files still need to be valid utf-8 to be indexed. The glob pattern syntax can be found here: https://golang.org/pkg/path/filepath/#Match.\n\tSearchLargeFiles []string `json:\"search.largeFiles,omitempty\"`\n\t// SearchLimits description: Limits that search applies for number of repositories searched and timeouts.\n\tSearchLimits *SearchLimits `json:\"search.limits,omitempty\"`\n\t// UpdateChannel description: The channel on which to automatically check for Sourcegraph updates.\n\tUpdateChannel string `json:\"update.channel,omitempty\"`\n\t// UseJaeger description: DEPRECATED. Use `\"observability.tracing\": { \"sampling\": \"all\" }`, instead. Enables Jaeger tracing.\n\tUseJaeger bool `json:\"useJaeger,omitempty\"`\n\t// UserReposMaxPerSite description: The site wide maximum number of repos that can be added by non site admins\n\tUserReposMaxPerSite int `json:\"userRepos.maxPerSite,omitempty\"`\n\t// UserReposMaxPerUser description: The per user maximum number of repos that can be added by non site admins\n\tUserReposMaxPerUser int `json:\"userRepos.maxPerUser,omitempty\"`\n}\n```\n\nSiteConfiguration description: Configuration for a Sourcegraph site. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#SourcegraphExtensionManifest",
              "documentation": {
                "identifier": "SourcegraphExtensionManifest",
                "newPage": false,
                "searchKey": "schema.SourcegraphExtensionManifest",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SourcegraphExtensionManifest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SourcegraphExtensionManifest struct {\n\tActivationEvents []string                `json:\"activationEvents\"`\n\tArgs             *map[string]interface{} `json:\"args,omitempty\"`\n\tContributes      *Contributions          `json:\"contributes,omitempty\"`\n\tDescription      string                  `json:\"description,omitempty\"`\n\tIcon             string                  `json:\"icon,omitempty\"`\n\tReadme           string                  `json:\"readme,omitempty\"`\n\tRepository       *ExtensionRepository    `json:\"repository,omitempty\"`\n\tWip              bool                    `json:\"wip,omitempty\"`\n\tUrl              string                  `json:\"url\"`\n}\n```\n\nSourcegraphExtensionManifest description: The Sourcegraph extension manifest describes the extension and the features it provides. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Step",
              "documentation": {
                "identifier": "Step",
                "newPage": false,
                "searchKey": "schema.Step",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Step struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Step struct {\n\t// Container description: The Docker image used to launch the Docker container in which the shell command is run.\n\tContainer string `json:\"container\"`\n\t// Env description: Environment variables to set in the step environment.\n\tEnv interface{} `json:\"env,omitempty\"`\n\t// Files description: Files that should be mounted into or be created inside the Docker container.\n\tFiles map[string]string `json:\"files,omitempty\"`\n\t// If description: A condition to check before executing steps. Supports templating. The value 'true' is interpreted as true.\n\tIf interface{} `json:\"if,omitempty\"`\n\t// Outputs description: Output variables of this step that can be referenced in the changesetTemplate or other steps via outputs.<name-of-output>\n\tOutputs map[string]AdditionalProperties `json:\"outputs,omitempty\"`\n\t// Run description: The shell command to run in the container. It can also be a multi-line shell script. The working directory is the root directory of the repository checkout.\n\tRun string `json:\"run\"`\n}\n```\n\nStep description: A command to run (as part of a sequence) in a repository branch to produce the required changes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#TlsExternal",
              "documentation": {
                "identifier": "TlsExternal",
                "newPage": false,
                "searchKey": "schema.TlsExternal",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TlsExternal struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TlsExternal struct {\n\t// Certificates description: TLS certificates to accept. This is only necessary if you are using self-signed certificates or an internal CA. Can be an internal CA certificate or a self-signed certificate. To get the certificate of a webserver run `openssl s_client -connect HOST:443 -showcerts < /dev/null 2> /dev/null | openssl x509 -outform PEM`. To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.\n\tCertificates []string `json:\"certificates,omitempty\"`\n\t// InsecureSkipVerify description: insecureSkipVerify controls whether a client verifies the server's certificate chain and host name.\n\t// If InsecureSkipVerify is true, TLS accepts any certificate presented by the server and any host name in that certificate. In this mode, TLS is susceptible to man-in-the-middle attacks.\n\tInsecureSkipVerify bool `json:\"insecureSkipVerify,omitempty\"`\n}\n```\n\nTlsExternal description: Global TLS/SSL settings for Sourcegraph to use when communicating with code hosts. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#TransformChanges",
              "documentation": {
                "identifier": "TransformChanges",
                "newPage": false,
                "searchKey": "schema.TransformChanges",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TransformChanges struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TransformChanges struct {\n\t// Group description: A list of groups of changes in a repository that each create a separate, additional changeset for this repository, with all ungrouped changes being in the default changeset.\n\tGroup []interface{} `json:\"group,omitempty\"`\n}\n```\n\nTransformChanges description: Optional transformations to apply to the changes produced in each repository. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#UpdateIntervalRule",
              "documentation": {
                "identifier": "UpdateIntervalRule",
                "newPage": false,
                "searchKey": "schema.UpdateIntervalRule",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UpdateIntervalRule struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UpdateIntervalRule struct {\n\t// Interval description: An integer representing the number of minutes to wait until the next update\n\tInterval int `json:\"interval\"`\n\t// Pattern description: A regular expression matching a repo name\n\tPattern string `json:\"pattern\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#UsernameIdentity",
              "documentation": {
                "identifier": "UsernameIdentity",
                "newPage": false,
                "searchKey": "schema.UsernameIdentity",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UsernameIdentity struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UsernameIdentity struct {\n\tType string `json:\"type\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#VersionContext",
              "documentation": {
                "identifier": "VersionContext",
                "newPage": false,
                "searchKey": "schema.VersionContext",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type VersionContext struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype VersionContext struct {\n\t// Description description: Description of the version context\n\tDescription string `json:\"description,omitempty\"`\n\t// Name description: Name of the version context, it must be unique.\n\tName string `json:\"name\"`\n\t// Revisions description: List of repositories of the version context\n\tRevisions []*VersionContextRevision `json:\"revisions\"`\n}\n```\n\nVersionContext description: Configuration of the version context \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#VersionContextRevision",
              "documentation": {
                "identifier": "VersionContextRevision",
                "newPage": false,
                "searchKey": "schema.VersionContextRevision",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type VersionContextRevision struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype VersionContextRevision struct {\n\t// Repo description: Repository name\n\tRepo string `json:\"repo\"`\n\t// Rev description: Branch, tag, or commit hash. \"HEAD\" or \"\" can be used for the default branch.\n\tRev string `json:\"rev\"`\n}\n```\n\nVersionContextRevision description: Description of the chosen repository and revision \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#Webhooks",
              "documentation": {
                "identifier": "Webhooks",
                "newPage": false,
                "searchKey": "schema.Webhooks",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Webhooks struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Webhooks struct {\n\t// Secret description: Secret for authenticating incoming webhook payloads\n\tSecret string `json:\"secret,omitempty\"`\n}\n```\n\nWebhooks description: DEPRECATED: Switch to \"plugin.webhooks\" \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/schema#WorkspaceConfiguration",
              "documentation": {
                "identifier": "WorkspaceConfiguration",
                "newPage": false,
                "searchKey": "schema.WorkspaceConfiguration",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type WorkspaceConfiguration struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype WorkspaceConfiguration struct {\n\t// In description: The repositories in which to apply the workspace configuration. Supports globbing.\n\tIn string `json:\"in,omitempty\"`\n\t// OnlyFetchWorkspace description: If this is true only the files in the workspace (and additional .gitignore) are downloaded instead of an archive of the full repository.\n\tOnlyFetchWorkspace bool `json:\"onlyFetchWorkspace,omitempty\"`\n\t// RootAtLocationOf description: The name of the file that sits at the root of the desired workspace.\n\tRootAtLocationOf string `json:\"rootAtLocationOf\"`\n}\n```\n\nWorkspaceConfiguration description: Configuration for how to setup workspaces in repositories \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
