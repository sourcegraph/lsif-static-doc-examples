{
  "pathID": "/",
  "documentation": {
    "identifier": "mux",
    "newPage": true,
    "searchKey": "",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package mux"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package mux implements a request router and dispatcher. \n\nThe name mux stands for \"HTTP request multiplexer\". Like the standard http.ServeMux, mux.Router matches incoming requests against a list of registered routes and calls a handler for the route that matches the URL or other conditions. The main features are: \n\n```\n* Requests can be matched based on URL host, path, path prefix, schemes,\n  header and query values, HTTP methods or using custom matchers.\n* URL hosts, paths and query values can have variables with an optional\n  regular expression.\n* Registered URLs can be built, or \"reversed\", which helps maintaining\n  references to resources.\n* Routes can be used as subrouters: nested routes are only tested if the\n  parent route matches. This is useful to define groups of routes that\n  share common conditions like a host, a path prefix or other repeated\n  attributes. As a bonus, this optimizes request matching.\n* It implements the http.Handler interface so it is compatible with the\n  standard http.ServeMux.\n\n```\nLet's start registering a couple of URL paths and handlers: \n\n```\nfunc main() {\n\tr := mux.NewRouter()\n\tr.HandleFunc(\"/\", HomeHandler)\n\tr.HandleFunc(\"/products\", ProductsHandler)\n\tr.HandleFunc(\"/articles\", ArticlesHandler)\n\thttp.Handle(\"/\", r)\n}\n\n```\nHere we register three routes mapping URL paths to handlers. This is equivalent to how http.HandleFunc() works: if an incoming request URL matches one of the paths, the corresponding handler is called passing (http.ResponseWriter, *http.Request) as parameters. \n\nPaths can have variables. They are defined using the format {name} or {name:pattern}. If a regular expression pattern is not defined, the matched variable will be anything until the next slash. For example: \n\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/products/{key}\", ProductHandler)\nr.HandleFunc(\"/articles/{category}/\", ArticlesCategoryHandler)\nr.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler)\n\n```\nGroups can be used inside patterns, as long as they are non-capturing (?:re). For example: \n\n```\nr.HandleFunc(\"/articles/{category}/{sort:(?:asc|desc|new)}\", ArticlesCategoryHandler)\n\n```\nThe names are used to create a map of route variables which can be retrieved calling mux.Vars(): \n\n```\nvars := mux.Vars(request)\ncategory := vars[\"category\"]\n\n```\nNote that if any capturing groups are present, mux will panic() during parsing. To prevent this, convert any capturing groups to non-capturing, e.g. change \"/{sort:(asc|desc)}\" to \"/{sort:(?:asc|desc)}\". This is a change from prior versions which behaved unpredictably when capturing groups were present. \n\nAnd this is all you need to know about the basic usage. More advanced options are explained below. \n\nRoutes can also be restricted to a domain or subdomain. Just define a host pattern to be matched. They can also have variables: \n\n```\nr := mux.NewRouter()\n// Only matches if domain is \"www.example.com\".\nr.Host(\"www.example.com\")\n// Matches a dynamic subdomain.\nr.Host(\"{subdomain:[a-z]+}.domain.com\")\n\n```\nThere are several other matchers that can be added. To match path prefixes: \n\n```\nr.PathPrefix(\"/products/\")\n\n```\n...or HTTP methods: \n\n```\nr.Methods(\"GET\", \"POST\")\n\n```\n...or URL schemes: \n\n```\nr.Schemes(\"https\")\n\n```\n...or header values: \n\n```\nr.Headers(\"X-Requested-With\", \"XMLHttpRequest\")\n\n```\n...or query values: \n\n```\nr.Queries(\"key\", \"value\")\n\n```\n...or to use a custom matcher function: \n\n```\nr.MatcherFunc(func(r *http.Request, rm *RouteMatch) bool {\n\treturn r.ProtoMajor == 0\n})\n\n```\n...and finally, it is possible to combine several matchers in a single route: \n\n```\nr.HandleFunc(\"/products\", ProductsHandler).\n  Host(\"www.example.com\").\n  Methods(\"GET\").\n  Schemes(\"http\")\n\n```\nSetting the same matching conditions again and again can be boring, so we have a way to group several routes that share the same requirements. We call it \"subrouting\". \n\nFor example, let's say we have several URLs that should only match when the host is \"www.example.com\". Create a route for that host and get a \"subrouter\" from it: \n\n```\nr := mux.NewRouter()\ns := r.Host(\"www.example.com\").Subrouter()\n\n```\nThen register routes in the subrouter: \n\n```\ns.HandleFunc(\"/products/\", ProductsHandler)\ns.HandleFunc(\"/products/{key}\", ProductHandler)\ns.HandleFunc(\"/articles/{category}/{id:[0-9]+}\"), ArticleHandler)\n\n```\nThe three URL paths we registered above will only be tested if the domain is \"www.example.com\", because the subrouter is tested first. This is not only convenient, but also optimizes request matching. You can create subrouters combining any attribute matchers accepted by a route. \n\nSubrouters can be used to create domain or path \"namespaces\": you define subrouters in a central place and then parts of the app can register its paths relatively to a given subrouter. \n\nThere's one more thing about subroutes. When a subrouter has a path prefix, the inner routes use it as base for their paths: \n\n```\nr := mux.NewRouter()\ns := r.PathPrefix(\"/products\").Subrouter()\n// \"/products/\"\ns.HandleFunc(\"/\", ProductsHandler)\n// \"/products/{key}/\"\ns.HandleFunc(\"/{key}/\", ProductHandler)\n// \"/products/{key}/details\"\ns.HandleFunc(\"/{key}/details\", ProductDetailsHandler)\n\n```\nNote that the path provided to PathPrefix() represents a \"wildcard\": calling PathPrefix(\"/static/\").Handler(...) means that the handler will be passed any request that matches \"/static/*\". This makes it easy to serve static files with mux: \n\n```\nfunc main() {\n\tvar dir string\n\n\tflag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n\tflag.Parse()\n\tr := mux.NewRouter()\n\n\t// This will serve files under [http://localhost:8000/static/](http://localhost:8000/static/)<filename>\n\tr.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n\tsrv := &http.Server{\n\t\tHandler:      r,\n\t\tAddr:         \"127.0.0.1:8000\",\n\t\t// Good practice: enforce timeouts for servers you create!\n\t\tWriteTimeout: 15 * time.Second,\n\t\tReadTimeout:  15 * time.Second,\n\t}\n\n\tlog.Fatal(srv.ListenAndServe())\n}\n\n```\nNow let's see how to build registered URLs. \n\nRoutes can be named. All routes that define a name can have their URLs built, or \"reversed\". We define a name calling Name() on a route. For example: \n\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler).\n  Name(\"article\")\n\n```\nTo build a URL, get the route and call the URL() method, passing a sequence of key/value pairs for the route variables. For the previous route, we would do: \n\n```\nurl, err := r.Get(\"article\").URL(\"category\", \"technology\", \"id\", \"42\")\n\n```\n...and the result will be a url.URL with the following path: \n\n```\n\"/articles/technology/42\"\n\n```\nThis also works for host and query value variables: \n\n```\nr := mux.NewRouter()\nr.Host(\"{subdomain}.domain.com\").\n  Path(\"/articles/{category}/{id:[0-9]+}\").\n  Queries(\"filter\", \"{filter}\").\n  HandlerFunc(ArticleHandler).\n  Name(\"article\")\n\n// url.String() will be \"[http://news.domain.com/articles/technology/42?filter=gorilla](http://news.domain.com/articles/technology/42?filter=gorilla)\"\nurl, err := r.Get(\"article\").URL(\"subdomain\", \"news\",\n                                 \"category\", \"technology\",\n                                 \"id\", \"42\",\n                                 \"filter\", \"gorilla\")\n\n```\nAll variables defined in the route are required, and their values must conform to the corresponding patterns. These requirements guarantee that a generated URL will always match a registered route -- the only exception is for explicitly defined \"build-only\" routes which never match. \n\nRegex support also exists for matching Headers within a route. For example, we could do: \n\n```\nr.HeadersRegexp(\"Content-Type\", \"application/(text|json)\")\n\n```\n...and the route will match both requests with a Content-Type of `application/json` as well as `application/text` \n\nThere's also a way to build only the URL host or path for a route: use the methods URLHost() or URLPath() instead. For the previous route, we would do: \n\n```\n// \"[http://news.domain.com/](http://news.domain.com/)\"\nhost, err := r.Get(\"article\").URLHost(\"subdomain\", \"news\")\n\n// \"/articles/technology/42\"\npath, err := r.Get(\"article\").URLPath(\"category\", \"technology\", \"id\", \"42\")\n\n```\nAnd if you use subrouters, host and path defined separately can be built as well: \n\n```\nr := mux.NewRouter()\ns := r.Host(\"{subdomain}.domain.com\").Subrouter()\ns.Path(\"/articles/{category}/{id:[0-9]+}\").\n  HandlerFunc(ArticleHandler).\n  Name(\"article\")\n\n// \"[http://news.domain.com/articles/technology/42](http://news.domain.com/articles/technology/42)\"\nurl, err := r.Get(\"article\").URL(\"subdomain\", \"news\",\n                                 \"category\", \"technology\",\n                                 \"id\", \"42\")\n\n```\nMux supports the addition of middlewares to a Router, which are executed in the order they are added if a match is found, including its subrouters. Middlewares are (typically) small pieces of code which take one request, do something with it, and pass it down to another middleware or the final handler. Some common use cases for middleware are request logging, header manipulation, or ResponseWriter hijacking. \n\n```\ntype MiddlewareFunc func(http.Handler) http.Handler\n\n```\nTypically, the returned handler is a closure which does something with the http.ResponseWriter and http.Request passed to it, and then calls the handler passed as parameter to the MiddlewareFunc (closures can access variables from the context where they are created). \n\nA very basic middleware which logs the URI of the request being handled could be written as: \n\n```\nfunc simpleMw(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// Do stuff here\n\t\tlog.Println(r.RequestURI)\n\t\t// Call the next handler, which can be another middleware in the chain, or the final handler.\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n\n```\nMiddlewares can be added to a router using `Router.Use()`: \n\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/\", handler)\nr.Use(simpleMw)\n\n```\nA more complex authentication middleware, which maps session token to users, could be written as: \n\n```\n// Define our struct\ntype authenticationMiddleware struct {\n\ttokenUsers map[string]string\n}\n\n// Initialize it somewhere\nfunc (amw *authenticationMiddleware) Populate() {\n\tamw.tokenUsers[\"00000000\"] = \"user0\"\n\tamw.tokenUsers[\"aaaaaaaa\"] = \"userA\"\n\tamw.tokenUsers[\"05f717e5\"] = \"randomUser\"\n\tamw.tokenUsers[\"deadbeef\"] = \"user0\"\n}\n\n// Middleware function, which will be called for each request\nfunc (amw *authenticationMiddleware) Middleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\ttoken := r.Header.Get(\"X-Session-Token\")\n\n\t\tif user, found := amw.tokenUsers[token]; found {\n\t\t\t// We found the token in our map\n\t\t\tlog.Printf(\"Authenticated user %s\\n\", user)\n\t\t\tnext.ServeHTTP(w, r)\n\t\t} else {\n\t\t\thttp.Error(w, \"Forbidden\", http.StatusForbidden)\n\t\t}\n\t})\n}\n\nr := mux.NewRouter()\nr.HandleFunc(\"/\", handler)\n\namw := authenticationMiddleware{tokenUsers: make(map[string]string)}\namw.Populate()\n\nr.Use(amw.Middleware)\n\n```\nNote: The handler chain will be stopped if your middleware doesn't call `next.ServeHTTP()` with the corresponding parameters. This can be used to abort a request if the middleware writer wants to. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/#regexpTypeHost",
              "documentation": {
                "identifier": "regexpTypeHost",
                "newPage": false,
                "searchKey": "mux.regexpTypeHost",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const regexpTypeHost"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst regexpTypeHost regexpType = 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#regexpTypePath",
              "documentation": {
                "identifier": "regexpTypePath",
                "newPage": false,
                "searchKey": "mux.regexpTypePath",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const regexpTypePath"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst regexpTypePath regexpType = 0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#regexpTypePrefix",
              "documentation": {
                "identifier": "regexpTypePrefix",
                "newPage": false,
                "searchKey": "mux.regexpTypePrefix",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const regexpTypePrefix"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst regexpTypePrefix regexpType = 2\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#regexpTypeQuery",
              "documentation": {
                "identifier": "regexpTypeQuery",
                "newPage": false,
                "searchKey": "mux.regexpTypeQuery",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const regexpTypeQuery"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst regexpTypeQuery regexpType = 3\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#routeKey",
              "documentation": {
                "identifier": "routeKey",
                "newPage": false,
                "searchKey": "mux.routeKey",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const routeKey"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst routeKey\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#varsKey",
              "documentation": {
                "identifier": "varsKey",
                "newPage": false,
                "searchKey": "mux.varsKey",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const varsKey"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst varsKey contextKey = iota\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/#ErrMethodMismatch",
              "documentation": {
                "identifier": "ErrMethodMismatch",
                "newPage": false,
                "searchKey": "mux.ErrMethodMismatch",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrMethodMismatch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrMethodMismatch = errors.New(\"method is not allowed\")\n```\n\nErrMethodMismatch is returned when the method in the request does not match the method defined against the route. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#ErrNotFound",
              "documentation": {
                "identifier": "ErrNotFound",
                "newPage": false,
                "searchKey": "mux.ErrNotFound",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrNotFound"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrNotFound = errors.New(\"no matching route was found\")\n```\n\nErrNotFound is returned when no route match is found. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#SkipRouter",
              "documentation": {
                "identifier": "SkipRouter",
                "newPage": false,
                "searchKey": "mux.SkipRouter",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var SkipRouter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar SkipRouter = errors.New(\"skip this router\")\n```\n\nSkipRouter is used as a return value from WalkFuncs to indicate that the router that walk is about to descend down to should be skipped. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#headerMatcherTests",
              "documentation": {
                "identifier": "headerMatcherTests",
                "newPage": false,
                "searchKey": "mux.headerMatcherTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var headerMatcherTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar headerMatcherTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#hostMatcherTests",
              "documentation": {
                "identifier": "hostMatcherTests",
                "newPage": false,
                "searchKey": "mux.hostMatcherTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var hostMatcherTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hostMatcherTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#methodMatcherTests",
              "documentation": {
                "identifier": "methodMatcherTests",
                "newPage": false,
                "searchKey": "mux.methodMatcherTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var methodMatcherTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar methodMatcherTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#pathMatcherTests",
              "documentation": {
                "identifier": "pathMatcherTests",
                "newPage": false,
                "searchKey": "mux.pathMatcherTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var pathMatcherTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pathMatcherTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#schemeMatcherTests",
              "documentation": {
                "identifier": "schemeMatcherTests",
                "newPage": false,
                "searchKey": "mux.schemeMatcherTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var schemeMatcherTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar schemeMatcherTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#urlBuildingTests",
              "documentation": {
                "identifier": "urlBuildingTests",
                "newPage": false,
                "searchKey": "mux.urlBuildingTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var urlBuildingTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar urlBuildingTests = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/#BuildVarsFunc",
              "documentation": {
                "identifier": "BuildVarsFunc",
                "newPage": false,
                "searchKey": "mux.BuildVarsFunc",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BuildVarsFunc func(map[string]string) map[string]string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BuildVarsFunc func(map[string]string) map[string]string\n```\n\nBuildVarsFunc is the function signature used by custom build variable functions (which can modify route variables before a route's URL is built). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#MatcherFunc",
              "documentation": {
                "identifier": "MatcherFunc",
                "newPage": false,
                "searchKey": "mux.MatcherFunc",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MatcherFunc func(*net/http.Request, *github.com/gorilla/mux.RouteMatch) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MatcherFunc func(*http.Request, *RouteMatch) bool\n```\n\nMatcherFunc is the function signature used by custom matchers. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/#MatcherFunc.Match",
                    "documentation": {
                      "identifier": "MatcherFunc.Match",
                      "newPage": false,
                      "searchKey": "mux.MatcherFunc.Match",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m MatcherFunc) Match(r *http.Request, match *RouteMatch) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m MatcherFunc) Match(r *http.Request, match *RouteMatch) bool\n```\n\nMatch returns the match for a given request. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/#MiddlewareFunc",
              "documentation": {
                "identifier": "MiddlewareFunc",
                "newPage": false,
                "searchKey": "mux.MiddlewareFunc",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MiddlewareFunc func(net/http.Handler) net/http.Handler"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MiddlewareFunc func(http.Handler) http.Handler\n```\n\nMiddlewareFunc is a function which receives an http.Handler and returns another http.Handler. Typically, the returned handler is a closure which does something with the http.ResponseWriter and http.Request passed to it, and then calls the handler passed as parameter to the MiddlewareFunc. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/#CORSMethodMiddleware",
                    "documentation": {
                      "identifier": "CORSMethodMiddleware",
                      "newPage": false,
                      "searchKey": "mux.CORSMethodMiddleware",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func CORSMethodMiddleware(r *Router) MiddlewareFunc"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc CORSMethodMiddleware(r *Router) MiddlewareFunc\n```\n\nCORSMethodMiddleware automatically sets the Access-Control-Allow-Methods response header on requests for routes that have an OPTIONS method matcher to all the method matchers on the route. Routes that do not explicitly handle OPTIONS requests will not be processed by the middleware. See examples for usage. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#MiddlewareFunc.Middleware",
                    "documentation": {
                      "identifier": "MiddlewareFunc.Middleware",
                      "newPage": false,
                      "searchKey": "mux.MiddlewareFunc.Middleware",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (mw MiddlewareFunc) Middleware(handler http.Handler) http.Handler"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (mw MiddlewareFunc) Middleware(handler http.Handler) http.Handler\n```\n\nMiddleware allows MiddlewareFunc to implement the middleware interface. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/#ResponseRecorder",
              "documentation": {
                "identifier": "ResponseRecorder",
                "newPage": false,
                "searchKey": "mux.ResponseRecorder",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ResponseRecorder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ResponseRecorder struct {\n\tCode      int           // the HTTP response code from WriteHeader\n\tHeaderMap http.Header   // the HTTP response headers\n\tBody      *bytes.Buffer // if non-nil, the bytes.Buffer to append written data to\n\tFlushed   bool\n}\n```\n\nResponseRecorder is an implementation of http.ResponseWriter that records its mutations for later inspection in tests. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/#NewRecorder",
                    "documentation": {
                      "identifier": "NewRecorder",
                      "newPage": false,
                      "searchKey": "mux.NewRecorder",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewRecorder() *ResponseRecorder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewRecorder() *ResponseRecorder\n```\n\nNewRecorder returns an initialized ResponseRecorder. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#ResponseRecorder.Flush",
                    "documentation": {
                      "identifier": "ResponseRecorder.Flush",
                      "newPage": false,
                      "searchKey": "mux.ResponseRecorder.Flush",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rw *ResponseRecorder) Flush()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rw *ResponseRecorder) Flush()\n```\n\nFlush sets rw.Flushed to true. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#ResponseRecorder.Header",
                    "documentation": {
                      "identifier": "ResponseRecorder.Header",
                      "newPage": false,
                      "searchKey": "mux.ResponseRecorder.Header",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rw *ResponseRecorder) Header() http.Header"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rw *ResponseRecorder) Header() http.Header\n```\n\nHeader returns the response headers. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#ResponseRecorder.Write",
                    "documentation": {
                      "identifier": "ResponseRecorder.Write",
                      "newPage": false,
                      "searchKey": "mux.ResponseRecorder.Write",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rw *ResponseRecorder) Write(buf []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rw *ResponseRecorder) Write(buf []byte) (int, error)\n```\n\nWrite always succeeds and writes to rw.Body, if not nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#ResponseRecorder.WriteHeader",
                    "documentation": {
                      "identifier": "ResponseRecorder.WriteHeader",
                      "newPage": false,
                      "searchKey": "mux.ResponseRecorder.WriteHeader",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rw *ResponseRecorder) WriteHeader(code int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rw *ResponseRecorder) WriteHeader(code int)\n```\n\nWriteHeader sets rw.Code. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/#Route",
              "documentation": {
                "identifier": "Route",
                "newPage": false,
                "searchKey": "mux.Route",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Route struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Route struct {\n\t// Request handler for the route.\n\thandler http.Handler\n\t// If true, this route never matches: it is only used to build URLs.\n\tbuildOnly bool\n\t// The name used to build URLs.\n\tname string\n\t// Error resulted from building a route.\n\terr error\n\n\t// \"global\" reference to all named routes\n\tnamedRoutes map[string]*Route\n\n\t// config possibly passed in from `Router`\n\trouteConf\n}\n```\n\nRoute stores information to match a request and build URLs. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/#CurrentRoute",
                    "documentation": {
                      "identifier": "CurrentRoute",
                      "newPage": false,
                      "searchKey": "mux.CurrentRoute",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func CurrentRoute(r *http.Request) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc CurrentRoute(r *http.Request) *Route\n```\n\nCurrentRoute returns the matched route for the current request, if any. This only works when called inside the handler of the matched route because the matched route is stored in the request context which is cleared after the handler returns. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.BuildOnly",
                    "documentation": {
                      "identifier": "Route.BuildOnly",
                      "newPage": false,
                      "searchKey": "mux.Route.BuildOnly",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) BuildOnly() *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) BuildOnly() *Route\n```\n\nBuildOnly sets the route to never match: it is only used to build URLs. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.BuildVarsFunc",
                    "documentation": {
                      "identifier": "Route.BuildVarsFunc",
                      "newPage": false,
                      "searchKey": "mux.Route.BuildVarsFunc",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) BuildVarsFunc(f BuildVarsFunc) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) BuildVarsFunc(f BuildVarsFunc) *Route\n```\n\nBuildVarsFunc adds a custom function to be used to modify build variables before a route's URL is built. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.GetError",
                    "documentation": {
                      "identifier": "Route.GetError",
                      "newPage": false,
                      "searchKey": "mux.Route.GetError",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) GetError() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) GetError() error\n```\n\nGetError returns an error resulted from building the route, if any. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.GetHandler",
                    "documentation": {
                      "identifier": "Route.GetHandler",
                      "newPage": false,
                      "searchKey": "mux.Route.GetHandler",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) GetHandler() http.Handler"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) GetHandler() http.Handler\n```\n\nGetHandler returns the handler for the route, if any. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.GetHostTemplate",
                    "documentation": {
                      "identifier": "Route.GetHostTemplate",
                      "newPage": false,
                      "searchKey": "mux.Route.GetHostTemplate",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) GetHostTemplate() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) GetHostTemplate() (string, error)\n```\n\nGetHostTemplate returns the template used to build the route match. This is useful for building simple REST API documentation and for instrumentation against third-party services. An error will be returned if the route does not define a host. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.GetMethods",
                    "documentation": {
                      "identifier": "Route.GetMethods",
                      "newPage": false,
                      "searchKey": "mux.Route.GetMethods",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) GetMethods() ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) GetMethods() ([]string, error)\n```\n\nGetMethods returns the methods the route matches against This is useful for building simple REST API documentation and for instrumentation against third-party services. An error will be returned if route does not have methods. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.GetName",
                    "documentation": {
                      "identifier": "Route.GetName",
                      "newPage": false,
                      "searchKey": "mux.Route.GetName",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) GetName() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) GetName() string\n```\n\nGetName returns the name for the route, if any. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.GetPathRegexp",
                    "documentation": {
                      "identifier": "Route.GetPathRegexp",
                      "newPage": false,
                      "searchKey": "mux.Route.GetPathRegexp",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) GetPathRegexp() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) GetPathRegexp() (string, error)\n```\n\nGetPathRegexp returns the expanded regular expression used to match route path. This is useful for building simple REST API documentation and for instrumentation against third-party services. An error will be returned if the route does not define a path. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.GetPathTemplate",
                    "documentation": {
                      "identifier": "Route.GetPathTemplate",
                      "newPage": false,
                      "searchKey": "mux.Route.GetPathTemplate",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) GetPathTemplate() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) GetPathTemplate() (string, error)\n```\n\nGetPathTemplate returns the template used to build the route match. This is useful for building simple REST API documentation and for instrumentation against third-party services. An error will be returned if the route does not define a path. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.GetQueriesRegexp",
                    "documentation": {
                      "identifier": "Route.GetQueriesRegexp",
                      "newPage": false,
                      "searchKey": "mux.Route.GetQueriesRegexp",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) GetQueriesRegexp() ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) GetQueriesRegexp() ([]string, error)\n```\n\nGetQueriesRegexp returns the expanded regular expressions used to match the route queries. This is useful for building simple REST API documentation and for instrumentation against third-party services. An error will be returned if the route does not have queries. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.GetQueriesTemplates",
                    "documentation": {
                      "identifier": "Route.GetQueriesTemplates",
                      "newPage": false,
                      "searchKey": "mux.Route.GetQueriesTemplates",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) GetQueriesTemplates() ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) GetQueriesTemplates() ([]string, error)\n```\n\nGetQueriesTemplates returns the templates used to build the query matching. This is useful for building simple REST API documentation and for instrumentation against third-party services. An error will be returned if the route does not define queries. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.GoString",
                    "documentation": {
                      "identifier": "Route.GoString",
                      "newPage": false,
                      "searchKey": "mux.Route.GoString",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) GoString() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) GoString() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.Handler",
                    "documentation": {
                      "identifier": "Route.Handler",
                      "newPage": false,
                      "searchKey": "mux.Route.Handler",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) Handler(handler http.Handler) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) Handler(handler http.Handler) *Route\n```\n\nHandler sets a handler for the route. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.HandlerFunc",
                    "documentation": {
                      "identifier": "Route.HandlerFunc",
                      "newPage": false,
                      "searchKey": "mux.Route.HandlerFunc",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) HandlerFunc(f func(http.ResponseWriter, *http.Request)) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) HandlerFunc(f func(http.ResponseWriter, *http.Request)) *Route\n```\n\nHandlerFunc sets a handler function for the route. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.Headers",
                    "documentation": {
                      "identifier": "Route.Headers",
                      "newPage": false,
                      "searchKey": "mux.Route.Headers",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) Headers(pairs ...string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) Headers(pairs ...string) *Route\n```\n\nHeaders adds a matcher for request header values. It accepts a sequence of key/value pairs to be matched. For example: \n\n```\nr := mux.NewRouter()\nr.Headers(\"Content-Type\", \"application/json\",\n          \"X-Requested-With\", \"XMLHttpRequest\")\n\n```\nThe above route will only match if both request header values match. If the value is an empty string, it will match any value if the key is set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.HeadersRegexp",
                    "documentation": {
                      "identifier": "Route.HeadersRegexp",
                      "newPage": false,
                      "searchKey": "mux.Route.HeadersRegexp",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) HeadersRegexp(pairs ...string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) HeadersRegexp(pairs ...string) *Route\n```\n\nHeadersRegexp accepts a sequence of key/value pairs, where the value has regex support. For example: \n\n```\nr := mux.NewRouter()\nr.HeadersRegexp(\"Content-Type\", \"application/(text|json)\",\n          \"X-Requested-With\", \"XMLHttpRequest\")\n\n```\nThe above route will only match if both the request header matches both regular expressions. If the value is an empty string, it will match any value if the key is set. Use the start and end of string anchors (^ and $) to match an exact value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.Host",
                    "documentation": {
                      "identifier": "Route.Host",
                      "newPage": false,
                      "searchKey": "mux.Route.Host",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) Host(tpl string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) Host(tpl string) *Route\n```\n\nHost adds a matcher for the URL host. It accepts a template with zero or more URL variables enclosed by {}. Variables can define an optional regexp pattern to be matched: \n\n- {name} matches anything until the next dot. \n\n- {name:pattern} matches the given regexp pattern. \n\nFor example: \n\n```\nr := mux.NewRouter()\nr.Host(\"www.example.com\")\nr.Host(\"{subdomain}.domain.com\")\nr.Host(\"{subdomain:[a-z]+}.domain.com\")\n\n```\nVariable names must be unique in a given route. They can be retrieved calling mux.Vars(request). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.Match",
                    "documentation": {
                      "identifier": "Route.Match",
                      "newPage": false,
                      "searchKey": "mux.Route.Match",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) Match(req *http.Request, match *RouteMatch) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) Match(req *http.Request, match *RouteMatch) bool\n```\n\nMatch matches the route against the request. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.MatcherFunc",
                    "documentation": {
                      "identifier": "Route.MatcherFunc",
                      "newPage": false,
                      "searchKey": "mux.Route.MatcherFunc",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) MatcherFunc(f MatcherFunc) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) MatcherFunc(f MatcherFunc) *Route\n```\n\nMatcherFunc adds a custom function to be used as request matcher. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.Methods",
                    "documentation": {
                      "identifier": "Route.Methods",
                      "newPage": false,
                      "searchKey": "mux.Route.Methods",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) Methods(methods ...string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) Methods(methods ...string) *Route\n```\n\nMethods adds a matcher for HTTP methods. It accepts a sequence of one or more methods to be matched, e.g.: \"GET\", \"POST\", \"PUT\". \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.Name",
                    "documentation": {
                      "identifier": "Route.Name",
                      "newPage": false,
                      "searchKey": "mux.Route.Name",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) Name(name string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) Name(name string) *Route\n```\n\nName sets the name for the route, used to build URLs. It is an error to call Name more than once on a route. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.Path",
                    "documentation": {
                      "identifier": "Route.Path",
                      "newPage": false,
                      "searchKey": "mux.Route.Path",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) Path(tpl string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) Path(tpl string) *Route\n```\n\nPath adds a matcher for the URL path. It accepts a template with zero or more URL variables enclosed by {}. The template must start with a \"/\". Variables can define an optional regexp pattern to be matched: \n\n- {name} matches anything until the next slash. \n\n- {name:pattern} matches the given regexp pattern. \n\nFor example: \n\n```\nr := mux.NewRouter()\nr.Path(\"/products/\").Handler(ProductsHandler)\nr.Path(\"/products/{key}\").Handler(ProductsHandler)\nr.Path(\"/articles/{category}/{id:[0-9]+}\").\n  Handler(ArticleHandler)\n\n```\nVariable names must be unique in a given route. They can be retrieved calling mux.Vars(request). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.PathPrefix",
                    "documentation": {
                      "identifier": "Route.PathPrefix",
                      "newPage": false,
                      "searchKey": "mux.Route.PathPrefix",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) PathPrefix(tpl string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) PathPrefix(tpl string) *Route\n```\n\nPathPrefix adds a matcher for the URL path prefix. This matches if the given template is a prefix of the full URL path. See Route.Path() for details on the tpl argument. \n\nNote that it does not treat slashes specially (\"/foobar/\" will be matched by the prefix \"/foo\") so you may want to use a trailing slash here. \n\nAlso note that the setting of Router.StrictSlash() has no effect on routes with a PathPrefix matcher. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.Queries",
                    "documentation": {
                      "identifier": "Route.Queries",
                      "newPage": false,
                      "searchKey": "mux.Route.Queries",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) Queries(pairs ...string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) Queries(pairs ...string) *Route\n```\n\nQueries adds a matcher for URL query values. It accepts a sequence of key/value pairs. Values may define variables. For example: \n\n```\nr := mux.NewRouter()\nr.Queries(\"foo\", \"bar\", \"id\", \"{id:[0-9]+}\")\n\n```\nThe above route will only match if the URL contains the defined queries values, e.g.: ?foo=bar&id=42. \n\nIf the value is an empty string, it will match any value if the key is set. \n\nVariables can define an optional regexp pattern to be matched: \n\n- {name} matches anything until the next slash. \n\n- {name:pattern} matches the given regexp pattern. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.Schemes",
                    "documentation": {
                      "identifier": "Route.Schemes",
                      "newPage": false,
                      "searchKey": "mux.Route.Schemes",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) Schemes(schemes ...string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) Schemes(schemes ...string) *Route\n```\n\nSchemes adds a matcher for URL schemes. It accepts a sequence of schemes to be matched, e.g.: \"http\", \"https\". If the request's URL has a scheme set, it will be matched against. Generally, the URL scheme will only be set if a previous handler set it, such as the ProxyHeaders handler from gorilla/handlers. If unset, the scheme will be determined based on the request's TLS termination state. The first argument to Schemes will be used when constructing a route URL. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.SkipClean",
                    "documentation": {
                      "identifier": "Route.SkipClean",
                      "newPage": false,
                      "searchKey": "mux.Route.SkipClean",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) SkipClean() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) SkipClean() bool\n```\n\nSkipClean reports whether path cleaning is enabled for this route via Router.SkipClean. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.Subrouter",
                    "documentation": {
                      "identifier": "Route.Subrouter",
                      "newPage": false,
                      "searchKey": "mux.Route.Subrouter",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) Subrouter() *Router"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) Subrouter() *Router\n```\n\nSubrouter creates a subrouter for the route. \n\nIt will test the inner routes only if the parent route matched. For example: \n\n```\nr := mux.NewRouter()\ns := r.Host(\"www.example.com\").Subrouter()\ns.HandleFunc(\"/products/\", ProductsHandler)\ns.HandleFunc(\"/products/{key}\", ProductHandler)\ns.HandleFunc(\"/articles/{category}/{id:[0-9]+}\"), ArticleHandler)\n\n```\nHere, the routes registered in the subrouter won't be tested if the host doesn't match. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.URL",
                    "documentation": {
                      "identifier": "Route.URL",
                      "newPage": false,
                      "searchKey": "mux.Route.URL",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) URL(pairs ...string) (*url.URL, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) URL(pairs ...string) (*url.URL, error)\n```\n\nURL builds a URL for the route. \n\nIt accepts a sequence of key/value pairs for the route variables. For example, given this route: \n\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler).\n  Name(\"article\")\n\n```\n...a URL for it can be built using: \n\n```\nurl, err := r.Get(\"article\").URL(\"category\", \"technology\", \"id\", \"42\")\n\n```\n...which will return an url.URL with the following path: \n\n```\n\"/articles/technology/42\"\n\n```\nThis also works for host variables: \n\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler).\n  Host(\"{subdomain}.domain.com\").\n  Name(\"article\")\n\n// url.String() will be \"[http://news.domain.com/articles/technology/42](http://news.domain.com/articles/technology/42)\"\nurl, err := r.Get(\"article\").URL(\"subdomain\", \"news\",\n                                 \"category\", \"technology\",\n                                 \"id\", \"42\")\n\n```\nThe scheme of the resulting url will be the first argument that was passed to Schemes: \n\n```\n// url.String() will be \"[https://example.com](https://example.com)\"\nr := mux.NewRouter()\nurl, err := r.Host(\"example.com\")\n             .Schemes(\"https\", \"http\").URL()\n\n```\nAll variables defined in the route are required, and their values must conform to the corresponding patterns. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.URLHost",
                    "documentation": {
                      "identifier": "Route.URLHost",
                      "newPage": false,
                      "searchKey": "mux.Route.URLHost",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) URLHost(pairs ...string) (*url.URL, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) URLHost(pairs ...string) (*url.URL, error)\n```\n\nURLHost builds the host part of the URL for a route. See Route.URL(). \n\nThe route must have a host defined. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.URLPath",
                    "documentation": {
                      "identifier": "Route.URLPath",
                      "newPage": false,
                      "searchKey": "mux.Route.URLPath",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) URLPath(pairs ...string) (*url.URL, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) URLPath(pairs ...string) (*url.URL, error)\n```\n\nURLPath builds the path part of the URL for a route. See Route.URL(). \n\nThe route must have a path defined. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.addMatcher",
                    "documentation": {
                      "identifier": "Route.addMatcher",
                      "newPage": false,
                      "searchKey": "mux.Route.addMatcher",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) addMatcher(m matcher) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) addMatcher(m matcher) *Route\n```\n\naddMatcher adds a matcher to the route. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.addRegexpMatcher",
                    "documentation": {
                      "identifier": "Route.addRegexpMatcher",
                      "newPage": false,
                      "searchKey": "mux.Route.addRegexpMatcher",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) addRegexpMatcher(tpl string, typ regexpType) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) addRegexpMatcher(tpl string, typ regexpType) error\n```\n\naddRegexpMatcher adds a host or path matcher and builder to a route. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.buildVars",
                    "documentation": {
                      "identifier": "Route.buildVars",
                      "newPage": false,
                      "searchKey": "mux.Route.buildVars",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) buildVars(m map[string]string) map[string]string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) buildVars(m map[string]string) map[string]string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Route.prepareVars",
                    "documentation": {
                      "identifier": "Route.prepareVars",
                      "newPage": false,
                      "searchKey": "mux.Route.prepareVars",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Route) prepareVars(pairs ...string) (map[string]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Route) prepareVars(pairs ...string) (map[string]string, error)\n```\n\nprepareVars converts the route variable pairs into a map. If the route has a BuildVarsFunc, it is invoked. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/#RouteMatch",
              "documentation": {
                "identifier": "RouteMatch",
                "newPage": false,
                "searchKey": "mux.RouteMatch",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RouteMatch struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RouteMatch struct {\n\tRoute   *Route\n\tHandler http.Handler\n\tVars    map[string]string\n\n\t// MatchErr is set to appropriate matching error\n\t// It is set to ErrMethodMismatch if there is a mismatch in\n\t// the request method and route method\n\tMatchErr error\n}\n```\n\nRouteMatch stores information about a matched route. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#Router",
              "documentation": {
                "identifier": "Router",
                "newPage": false,
                "searchKey": "mux.Router",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Router struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Router struct {\n\t// Configurable Handler to be used when no route matches.\n\tNotFoundHandler http.Handler\n\n\t// Configurable Handler to be used when the request method does not match the route.\n\tMethodNotAllowedHandler http.Handler\n\n\t// Routes to be matched, in order.\n\troutes []*Route\n\n\t// Routes by name for URL building.\n\tnamedRoutes map[string]*Route\n\n\t// If true, do not clear the request context after handling the request.\n\t//\n\t// Deprecated: No effect, since the context is stored on the request itself.\n\tKeepContext bool\n\n\t// Slice of middlewares to be called after a match is found\n\tmiddlewares []middleware\n\n\t// configuration shared with `Route`\n\trouteConf\n}\n```\n\nRouter registers routes to be matched and dispatches a handler. \n\nIt implements the http.Handler interface, so it can be registered to serve requests: \n\n```\nvar router = mux.NewRouter()\n\nfunc main() {\n    http.Handle(\"/\", router)\n}\n\n```\nOr, for Google App Engine, register it in a init() function: \n\n```\nfunc init() {\n    http.Handle(\"/\", router)\n}\n\n```\nThis will send all incoming requests to the router. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/#NewRouter",
                    "documentation": {
                      "identifier": "NewRouter",
                      "newPage": false,
                      "searchKey": "mux.NewRouter",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewRouter() *Router"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewRouter() *Router\n```\n\nNewRouter returns a new router instance. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.BuildVarsFunc",
                    "documentation": {
                      "identifier": "Router.BuildVarsFunc",
                      "newPage": false,
                      "searchKey": "mux.Router.BuildVarsFunc",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) BuildVarsFunc(f BuildVarsFunc) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) BuildVarsFunc(f BuildVarsFunc) *Route\n```\n\nBuildVarsFunc registers a new route with a custom function for modifying route variables before building a URL. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.Get",
                    "documentation": {
                      "identifier": "Router.Get",
                      "newPage": false,
                      "searchKey": "mux.Router.Get",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) Get(name string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) Get(name string) *Route\n```\n\nGet returns a route registered with the given name. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.GetRoute",
                    "documentation": {
                      "identifier": "Router.GetRoute",
                      "newPage": false,
                      "searchKey": "mux.Router.GetRoute",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) GetRoute(name string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) GetRoute(name string) *Route\n```\n\nGetRoute returns a route registered with the given name. This method was renamed to Get() and remains here for backwards compatibility. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.Handle",
                    "documentation": {
                      "identifier": "Router.Handle",
                      "newPage": false,
                      "searchKey": "mux.Router.Handle",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) Handle(path string, handler http.Handler) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) Handle(path string, handler http.Handler) *Route\n```\n\nHandle registers a new route with a matcher for the URL path. See Route.Path() and Route.Handler(). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.HandleFunc",
                    "documentation": {
                      "identifier": "Router.HandleFunc",
                      "newPage": false,
                      "searchKey": "mux.Router.HandleFunc",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) HandleFunc(path string, f func(http.ResponseWriter,..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) HandleFunc(path string, f func(http.ResponseWriter,\n\t*http.Request)) *Route\n```\n\nHandleFunc registers a new route with a matcher for the URL path. See Route.Path() and Route.HandlerFunc(). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.Headers",
                    "documentation": {
                      "identifier": "Router.Headers",
                      "newPage": false,
                      "searchKey": "mux.Router.Headers",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) Headers(pairs ...string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) Headers(pairs ...string) *Route\n```\n\nHeaders registers a new route with a matcher for request header values. See Route.Headers(). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.Host",
                    "documentation": {
                      "identifier": "Router.Host",
                      "newPage": false,
                      "searchKey": "mux.Router.Host",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) Host(tpl string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) Host(tpl string) *Route\n```\n\nHost registers a new route with a matcher for the URL host. See Route.Host(). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.Match",
                    "documentation": {
                      "identifier": "Router.Match",
                      "newPage": false,
                      "searchKey": "mux.Router.Match",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) Match(req *http.Request, match *RouteMatch) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) Match(req *http.Request, match *RouteMatch) bool\n```\n\nMatch attempts to match the given request against the router's registered routes. \n\nIf the request matches a route of this router or one of its subrouters the Route, Handler, and Vars fields of the the match argument are filled and this function returns true. \n\nIf the request does not match any of this router's or its subrouters' routes then this function returns false. If available, a reason for the match failure will be filled in the match argument's MatchErr field. If the match failure type (eg: not found) has a registered handler, the handler is assigned to the Handler field of the match argument. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.MatcherFunc",
                    "documentation": {
                      "identifier": "Router.MatcherFunc",
                      "newPage": false,
                      "searchKey": "mux.Router.MatcherFunc",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) MatcherFunc(f MatcherFunc) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) MatcherFunc(f MatcherFunc) *Route\n```\n\nMatcherFunc registers a new route with a custom matcher function. See Route.MatcherFunc(). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.Methods",
                    "documentation": {
                      "identifier": "Router.Methods",
                      "newPage": false,
                      "searchKey": "mux.Router.Methods",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) Methods(methods ...string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) Methods(methods ...string) *Route\n```\n\nMethods registers a new route with a matcher for HTTP methods. See Route.Methods(). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.Name",
                    "documentation": {
                      "identifier": "Router.Name",
                      "newPage": false,
                      "searchKey": "mux.Router.Name",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) Name(name string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) Name(name string) *Route\n```\n\nName registers a new route with a name. See Route.Name(). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.NewRoute",
                    "documentation": {
                      "identifier": "Router.NewRoute",
                      "newPage": false,
                      "searchKey": "mux.Router.NewRoute",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) NewRoute() *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) NewRoute() *Route\n```\n\nNewRoute registers an empty route. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.Path",
                    "documentation": {
                      "identifier": "Router.Path",
                      "newPage": false,
                      "searchKey": "mux.Router.Path",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) Path(tpl string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) Path(tpl string) *Route\n```\n\nPath registers a new route with a matcher for the URL path. See Route.Path(). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.PathPrefix",
                    "documentation": {
                      "identifier": "Router.PathPrefix",
                      "newPage": false,
                      "searchKey": "mux.Router.PathPrefix",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) PathPrefix(tpl string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) PathPrefix(tpl string) *Route\n```\n\nPathPrefix registers a new route with a matcher for the URL path prefix. See Route.PathPrefix(). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.Queries",
                    "documentation": {
                      "identifier": "Router.Queries",
                      "newPage": false,
                      "searchKey": "mux.Router.Queries",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) Queries(pairs ...string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) Queries(pairs ...string) *Route\n```\n\nQueries registers a new route with a matcher for URL query values. See Route.Queries(). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.Schemes",
                    "documentation": {
                      "identifier": "Router.Schemes",
                      "newPage": false,
                      "searchKey": "mux.Router.Schemes",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) Schemes(schemes ...string) *Route"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) Schemes(schemes ...string) *Route\n```\n\nSchemes registers a new route with a matcher for URL schemes. See Route.Schemes(). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.ServeHTTP",
                    "documentation": {
                      "identifier": "Router.ServeHTTP",
                      "newPage": false,
                      "searchKey": "mux.Router.ServeHTTP",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) ServeHTTP(w http.ResponseWriter, req *http.Request)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) ServeHTTP(w http.ResponseWriter, req *http.Request)\n```\n\nServeHTTP dispatches the handler registered in the matched route. \n\nWhen there is a match, the route variables can be retrieved calling mux.Vars(request). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.SkipClean",
                    "documentation": {
                      "identifier": "Router.SkipClean",
                      "newPage": false,
                      "searchKey": "mux.Router.SkipClean",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) SkipClean(value bool) *Router"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) SkipClean(value bool) *Router\n```\n\nSkipClean defines the path cleaning behaviour for new routes. The initial value is false. Users should be careful about which routes are not cleaned \n\nWhen true, if the route path is \"/path//to\", it will remain with the double slash. This is helpful if you have a route like: /fetch/[http://xkcd.com/534/](http://xkcd.com/534/) \n\nWhen false, the path will be cleaned, so /fetch/[http://xkcd.com/534/](http://xkcd.com/534/) will become /fetch/http/xkcd.com/534 \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.StrictSlash",
                    "documentation": {
                      "identifier": "Router.StrictSlash",
                      "newPage": false,
                      "searchKey": "mux.Router.StrictSlash",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) StrictSlash(value bool) *Router"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) StrictSlash(value bool) *Router\n```\n\nStrictSlash defines the trailing slash behavior for new routes. The initial value is false. \n\nWhen true, if the route path is \"/path/\", accessing \"/path\" will perform a redirect to the former and vice versa. In other words, your application will always see the path as specified in the route. \n\nWhen false, if the route path is \"/path\", accessing \"/path/\" will not match this route and vice versa. \n\nThe re-direct is a HTTP 301 (Moved Permanently). Note that when this is set for routes with a non-idempotent method (e.g. POST, PUT), the subsequent re-directed request will be made as a GET by most clients. Use middleware or client settings to modify this behaviour as needed. \n\nSpecial case: when a route sets a path prefix using the PathPrefix() method, strict slash is ignored for that route because the redirect behavior can't be determined from a prefix alone. However, any subrouters created from that route inherit the original StrictSlash setting. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.Use",
                    "documentation": {
                      "identifier": "Router.Use",
                      "newPage": false,
                      "searchKey": "mux.Router.Use",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) Use(mwf ...MiddlewareFunc)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) Use(mwf ...MiddlewareFunc)\n```\n\nUse appends a MiddlewareFunc to the chain. Middleware can be used to intercept or otherwise modify requests and/or responses, and are executed in the order that they are applied to the Router. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.UseEncodedPath",
                    "documentation": {
                      "identifier": "Router.UseEncodedPath",
                      "newPage": false,
                      "searchKey": "mux.Router.UseEncodedPath",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) UseEncodedPath() *Router"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) UseEncodedPath() *Router\n```\n\nUseEncodedPath tells the router to match the encoded original path to the routes. For eg. \"/path/foo%2Fbar/to\" will match the path \"/path/{var}/to\". \n\nIf not called, the router will match the unencoded path to the routes. For eg. \"/path/foo%2Fbar/to\" will match the path \"/path/foo/bar/to\" \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.Walk",
                    "documentation": {
                      "identifier": "Router.Walk",
                      "newPage": false,
                      "searchKey": "mux.Router.Walk",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) Walk(walkFn WalkFunc) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) Walk(walkFn WalkFunc) error\n```\n\nWalk walks the router and all its sub-routers, calling walkFn for each route in the tree. The routes are walked in the order they were added. Sub-routers are explored depth-first. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.useInterface",
                    "documentation": {
                      "identifier": "Router.useInterface",
                      "newPage": false,
                      "searchKey": "mux.Router.useInterface",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) useInterface(mw middleware)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) useInterface(mw middleware)\n```\n\nuseInterface appends a middleware to the chain. Middleware can be used to intercept or otherwise modify requests and/or responses, and are executed in the order that they are applied to the Router. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Router.walk",
                    "documentation": {
                      "identifier": "Router.walk",
                      "newPage": false,
                      "searchKey": "mux.Router.walk",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Router) walk(walkFn WalkFunc, ancestors []*Route) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Router) walk(walkFn WalkFunc, ancestors []*Route) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/#TestA301ResponseWriter",
              "documentation": {
                "identifier": "TestA301ResponseWriter",
                "newPage": false,
                "searchKey": "mux.TestA301ResponseWriter",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestA301ResponseWriter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestA301ResponseWriter struct {\n\thh     http.Header\n\tstatus int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/#TestA301ResponseWriter.Header",
                    "documentation": {
                      "identifier": "TestA301ResponseWriter.Header",
                      "newPage": false,
                      "searchKey": "mux.TestA301ResponseWriter.Header",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ho *TestA301ResponseWriter) Header() http.Header"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ho *TestA301ResponseWriter) Header() http.Header\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#TestA301ResponseWriter.Write",
                    "documentation": {
                      "identifier": "TestA301ResponseWriter.Write",
                      "newPage": false,
                      "searchKey": "mux.TestA301ResponseWriter.Write",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ho *TestA301ResponseWriter) Write(b []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ho *TestA301ResponseWriter) Write(b []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#TestA301ResponseWriter.WriteHeader",
                    "documentation": {
                      "identifier": "TestA301ResponseWriter.WriteHeader",
                      "newPage": false,
                      "searchKey": "mux.TestA301ResponseWriter.WriteHeader",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ho *TestA301ResponseWriter) WriteHeader(code int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ho *TestA301ResponseWriter) WriteHeader(code int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/#WalkFunc",
              "documentation": {
                "identifier": "WalkFunc",
                "newPage": false,
                "searchKey": "mux.WalkFunc",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type WalkFunc func(route *github.com/gorilla/mux.Route, router *github.com/gorilla/mux.Router, ancestors []*github.com/gorilla/mux.Route) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype WalkFunc func(route *Route, router *Router, ancestors []*Route) error\n```\n\nWalkFunc is the type of the function called for each route visited by Walk. At every invocation, it is given the current route, and the current router, and a list of ancestor routes that lead to the current route. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#contextKey",
              "documentation": {
                "identifier": "contextKey",
                "newPage": false,
                "searchKey": "mux.contextKey",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type contextKey int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype contextKey int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#customMethodNotAllowedHandler",
              "documentation": {
                "identifier": "customMethodNotAllowedHandler",
                "newPage": false,
                "searchKey": "mux.customMethodNotAllowedHandler",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type customMethodNotAllowedHandler struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype customMethodNotAllowedHandler struct {\n\tmsg string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/#customMethodNotAllowedHandler.ServeHTTP",
                    "documentation": {
                      "identifier": "customMethodNotAllowedHandler.ServeHTTP",
                      "newPage": false,
                      "searchKey": "mux.customMethodNotAllowedHandler.ServeHTTP",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h customMethodNotAllowedHandler) ServeHTTP(w http.ResponseWriter, r *http.Request)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h customMethodNotAllowedHandler) ServeHTTP(w http.ResponseWriter, r *http.Request)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/#headerMatcher",
              "documentation": {
                "identifier": "headerMatcher",
                "newPage": false,
                "searchKey": "mux.headerMatcher",
                "tags": [
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type headerMatcher map[string]string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype headerMatcher map[string]string\n```\n\nheaderMatcher matches the request against header values. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/#headerMatcher.Match",
                    "documentation": {
                      "identifier": "headerMatcher.Match",
                      "newPage": false,
                      "searchKey": "mux.headerMatcher.Match",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m headerMatcher) Match(r *http.Request, match *RouteMatch) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m headerMatcher) Match(r *http.Request, match *RouteMatch) bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/#headerMatcherTest",
              "documentation": {
                "identifier": "headerMatcherTest",
                "newPage": false,
                "searchKey": "mux.headerMatcherTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type headerMatcherTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype headerMatcherTest struct {\n\tmatcher headerMatcher\n\theaders map[string]string\n\tresult  bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#headerRegexMatcher",
              "documentation": {
                "identifier": "headerRegexMatcher",
                "newPage": false,
                "searchKey": "mux.headerRegexMatcher",
                "tags": [
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type headerRegexMatcher map[string]*regexp.Regexp"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype headerRegexMatcher map[string]*regexp.Regexp\n```\n\nheaderRegexMatcher matches the request against the route given a regex for the header \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/#headerRegexMatcher.Match",
                    "documentation": {
                      "identifier": "headerRegexMatcher.Match",
                      "newPage": false,
                      "searchKey": "mux.headerRegexMatcher.Match",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m headerRegexMatcher) Match(r *http.Request, match *RouteMatch) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m headerRegexMatcher) Match(r *http.Request, match *RouteMatch) bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/#hostMatcherTest",
              "documentation": {
                "identifier": "hostMatcherTest",
                "newPage": false,
                "searchKey": "mux.hostMatcherTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type hostMatcherTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype hostMatcherTest struct {\n\tmatcher *Route\n\turl     string\n\tvars    map[string]string\n\tresult  bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#matcher",
              "documentation": {
                "identifier": "matcher",
                "newPage": false,
                "searchKey": "mux.matcher",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type matcher interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype matcher interface {\n\tMatch(*http.Request, *RouteMatch) bool\n}\n```\n\nmatcher types try to match a request. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#methodMatcher",
              "documentation": {
                "identifier": "methodMatcher",
                "newPage": false,
                "searchKey": "mux.methodMatcher",
                "tags": [
                  "array",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type methodMatcher []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype methodMatcher []string\n```\n\nmethodMatcher matches the request against HTTP methods. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/#methodMatcher.Match",
                    "documentation": {
                      "identifier": "methodMatcher.Match",
                      "newPage": false,
                      "searchKey": "mux.methodMatcher.Match",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m methodMatcher) Match(r *http.Request, match *RouteMatch) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m methodMatcher) Match(r *http.Request, match *RouteMatch) bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/#methodMatcherTest",
              "documentation": {
                "identifier": "methodMatcherTest",
                "newPage": false,
                "searchKey": "mux.methodMatcherTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type methodMatcherTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype methodMatcherTest struct {\n\tmatcher methodMatcher\n\tmethod  string\n\tresult  bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#methodsSubrouterTest",
              "documentation": {
                "identifier": "methodsSubrouterTest",
                "newPage": false,
                "searchKey": "mux.methodsSubrouterTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type methodsSubrouterTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype methodsSubrouterTest struct {\n\ttitle    string\n\twantCode int\n\trouter   *Router\n\t// method is the input into the request and expected response\n\tmethod string\n\t// input request path\n\tpath string\n\t// redirectTo is the expected location path for strict-slash matches\n\tredirectTo string\n}\n```\n\nmethodsSubrouterTest models the data necessary for testing handler matching for subrouters created after HTTP methods matcher registration. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#middleware",
              "documentation": {
                "identifier": "middleware",
                "newPage": false,
                "searchKey": "mux.middleware",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type middleware interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype middleware interface {\n\tMiddleware(handler http.Handler) http.Handler\n}\n```\n\nmiddleware interface is anything which implements a MiddlewareFunc named Middleware. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#pathMatcherTest",
              "documentation": {
                "identifier": "pathMatcherTest",
                "newPage": false,
                "searchKey": "mux.pathMatcherTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type pathMatcherTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype pathMatcherTest struct {\n\tmatcher *Route\n\turl     string\n\tvars    map[string]string\n\tresult  bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#regexpType",
              "documentation": {
                "identifier": "regexpType",
                "newPage": false,
                "searchKey": "mux.regexpType",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type regexpType int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype regexpType int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#routeConf",
              "documentation": {
                "identifier": "routeConf",
                "newPage": false,
                "searchKey": "mux.routeConf",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type routeConf struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype routeConf struct {\n\t// If true, \"/path/foo%2Fbar/to\" will match the path \"/path/{var}/to\"\n\tuseEncodedPath bool\n\n\t// If true, when the path pattern is \"/path/\", accessing \"/path\" will\n\t// redirect to the former and vice versa.\n\tstrictSlash bool\n\n\t// If true, when the path pattern is \"/path//to\", accessing \"/path//to\"\n\t// will not redirect\n\tskipClean bool\n\n\t// Manager for the variables from host and path.\n\tregexp routeRegexpGroup\n\n\t// List of matchers.\n\tmatchers []matcher\n\n\t// The scheme used when building URLs.\n\tbuildScheme string\n\n\tbuildVarsFunc BuildVarsFunc\n}\n```\n\ncommon route configuration shared between `Router` and `Route` \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/#copyRouteConf",
                    "documentation": {
                      "identifier": "copyRouteConf",
                      "newPage": false,
                      "searchKey": "mux.copyRouteConf",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func copyRouteConf(r routeConf) routeConf"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc copyRouteConf(r routeConf) routeConf\n```\n\nreturns an effective deep copy of `routeConf` \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/#routeRegexp",
              "documentation": {
                "identifier": "routeRegexp",
                "newPage": false,
                "searchKey": "mux.routeRegexp",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type routeRegexp struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype routeRegexp struct {\n\t// The unmodified template.\n\ttemplate string\n\t// The type of match\n\tregexpType regexpType\n\t// Options for matching\n\toptions routeRegexpOptions\n\t// Expanded regexp.\n\tregexp *regexp.Regexp\n\t// Reverse template.\n\treverse string\n\t// Variable names.\n\tvarsN []string\n\t// Variable regexps (validators).\n\tvarsR []*regexp.Regexp\n\t// Wildcard host-port (no strict port match in hostname)\n\twildcardHostPort bool\n}\n```\n\nrouteRegexp stores a regexp to match a host or path and information to collect and validate route variables. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/#copyRouteRegexp",
                    "documentation": {
                      "identifier": "copyRouteRegexp",
                      "newPage": false,
                      "searchKey": "mux.copyRouteRegexp",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func copyRouteRegexp(r *routeRegexp) *routeRegexp"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc copyRouteRegexp(r *routeRegexp) *routeRegexp\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#newRouteRegexp",
                    "documentation": {
                      "identifier": "newRouteRegexp",
                      "newPage": false,
                      "searchKey": "mux.newRouteRegexp",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newRouteRegexp(tpl string, typ regexpType, options routeRegexpOptions) (*routeRegexp, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newRouteRegexp(tpl string, typ regexpType, options routeRegexpOptions) (*routeRegexp, error)\n```\n\nnewRouteRegexp parses a route template and returns a routeRegexp, used to match a host, a path or a query string. \n\nIt will extract named variables, assemble a regexp to be matched, create a \"reverse\" template to build URLs and compile regexps to validate variable values used in URL building. \n\nPreviously we accepted only Python-like identifiers for variable names ([a-zA-Z_][a-zA-Z0-9_]*), but currently the only restriction is that name and pattern can't be empty, and names can't contain a colon. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#routeRegexp.GoString",
                    "documentation": {
                      "identifier": "routeRegexp.GoString",
                      "newPage": false,
                      "searchKey": "mux.routeRegexp.GoString",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *routeRegexp) GoString() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *routeRegexp) GoString() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#routeRegexp.Match",
                    "documentation": {
                      "identifier": "routeRegexp.Match",
                      "newPage": false,
                      "searchKey": "mux.routeRegexp.Match",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *routeRegexp) Match(req *http.Request, match *RouteMatch) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *routeRegexp) Match(req *http.Request, match *RouteMatch) bool\n```\n\nMatch matches the regexp against the URL host or path. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#routeRegexp.getURLQuery",
                    "documentation": {
                      "identifier": "routeRegexp.getURLQuery",
                      "newPage": false,
                      "searchKey": "mux.routeRegexp.getURLQuery",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *routeRegexp) getURLQuery(req *http.Request) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *routeRegexp) getURLQuery(req *http.Request) string\n```\n\ngetURLQuery returns a single query parameter from a request URL. For a URL with foo=bar&baz=ding, we return only the relevant key value pair for the routeRegexp. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#routeRegexp.matchQueryString",
                    "documentation": {
                      "identifier": "routeRegexp.matchQueryString",
                      "newPage": false,
                      "searchKey": "mux.routeRegexp.matchQueryString",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *routeRegexp) matchQueryString(req *http.Request) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *routeRegexp) matchQueryString(req *http.Request) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#routeRegexp.url",
                    "documentation": {
                      "identifier": "routeRegexp.url",
                      "newPage": false,
                      "searchKey": "mux.routeRegexp.url",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *routeRegexp) url(values map[string]string) (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *routeRegexp) url(values map[string]string) (string, error)\n```\n\nurl builds a URL part using the given values. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/#routeRegexpGroup",
              "documentation": {
                "identifier": "routeRegexpGroup",
                "newPage": false,
                "searchKey": "mux.routeRegexpGroup",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type routeRegexpGroup struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype routeRegexpGroup struct {\n\thost    *routeRegexp\n\tpath    *routeRegexp\n\tqueries []*routeRegexp\n}\n```\n\nrouteRegexpGroup groups the route matchers that carry variables. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/#routeRegexpGroup.setMatch",
                    "documentation": {
                      "identifier": "routeRegexpGroup.setMatch",
                      "newPage": false,
                      "searchKey": "mux.routeRegexpGroup.setMatch",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v routeRegexpGroup) setMatch(req *http.Request, m *RouteMatch, r *Route)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v routeRegexpGroup) setMatch(req *http.Request, m *RouteMatch, r *Route)\n```\n\nsetMatch extracts the variables from the URL once a route matches. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/#routeRegexpOptions",
              "documentation": {
                "identifier": "routeRegexpOptions",
                "newPage": false,
                "searchKey": "mux.routeRegexpOptions",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type routeRegexpOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype routeRegexpOptions struct {\n\tstrictSlash    bool\n\tuseEncodedPath bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#routeTest",
              "documentation": {
                "identifier": "routeTest",
                "newPage": false,
                "searchKey": "mux.routeTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type routeTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype routeTest struct {\n\ttitle           string            // title of the test\n\troute           *Route            // the route being tested\n\trequest         *http.Request     // a request to test the route\n\tvars            map[string]string // the expected vars of the match\n\tscheme          string            // the expected scheme of the built URL\n\thost            string            // the expected host of the built URL\n\tpath            string            // the expected path of the built URL\n\tquery           string            // the expected query string of the built URL\n\tpathTemplate    string            // the expected path template of the route\n\thostTemplate    string            // the expected host template of the route\n\tqueriesTemplate string            // the expected query template of the route\n\tmethods         []string          // the expected route methods\n\tpathRegexp      string            // the expected path regexp\n\tqueriesRegexp   string            // the expected query regexp\n\tshouldMatch     bool              // whether the request is expected to match the route at all\n\tshouldRedirect  bool              // whether the request should result in a redirect\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#schemeMatcher",
              "documentation": {
                "identifier": "schemeMatcher",
                "newPage": false,
                "searchKey": "mux.schemeMatcher",
                "tags": [
                  "array",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type schemeMatcher []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype schemeMatcher []string\n```\n\nschemeMatcher matches the request against URL schemes. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/#schemeMatcher.Match",
                    "documentation": {
                      "identifier": "schemeMatcher.Match",
                      "newPage": false,
                      "searchKey": "mux.schemeMatcher.Match",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m schemeMatcher) Match(r *http.Request, match *RouteMatch) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m schemeMatcher) Match(r *http.Request, match *RouteMatch) bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/#schemeMatcherTest",
              "documentation": {
                "identifier": "schemeMatcherTest",
                "newPage": false,
                "searchKey": "mux.schemeMatcherTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type schemeMatcherTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype schemeMatcherTest struct {\n\tmatcher schemeMatcher\n\turl     string\n\tresult  bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#testMiddleware",
              "documentation": {
                "identifier": "testMiddleware",
                "newPage": false,
                "searchKey": "mux.testMiddleware",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type testMiddleware struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype testMiddleware struct {\n\ttimesCalled uint\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/#testMiddleware.Middleware",
                    "documentation": {
                      "identifier": "testMiddleware.Middleware",
                      "newPage": false,
                      "searchKey": "mux.testMiddleware.Middleware",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tm *testMiddleware) Middleware(h http.Handler) http.Handler"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tm *testMiddleware) Middleware(h http.Handler) http.Handler\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/#urlBuildingTest",
              "documentation": {
                "identifier": "urlBuildingTest",
                "newPage": false,
                "searchKey": "mux.urlBuildingTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type urlBuildingTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype urlBuildingTest struct {\n\troute *Route\n\tvars  []string\n\turl   string\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/#BenchmarkManyPathVariables",
              "documentation": {
                "identifier": "BenchmarkManyPathVariables",
                "newPage": false,
                "searchKey": "mux.BenchmarkManyPathVariables",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkManyPathVariables(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkManyPathVariables(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#BenchmarkMux",
              "documentation": {
                "identifier": "BenchmarkMux",
                "newPage": false,
                "searchKey": "mux.BenchmarkMux",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMux(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMux(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#BenchmarkMuxAlternativeInRegexp",
              "documentation": {
                "identifier": "BenchmarkMuxAlternativeInRegexp",
                "newPage": false,
                "searchKey": "mux.BenchmarkMuxAlternativeInRegexp",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMuxAlternativeInRegexp(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMuxAlternativeInRegexp(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#Benchmark_findQueryKey",
              "documentation": {
                "identifier": "Benchmark_findQueryKey",
                "newPage": false,
                "searchKey": "mux.Benchmark_findQueryKey",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Benchmark_findQueryKey(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Benchmark_findQueryKey(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#Benchmark_findQueryKeyGoLib",
              "documentation": {
                "identifier": "Benchmark_findQueryKeyGoLib",
                "newPage": false,
                "searchKey": "mux.Benchmark_findQueryKeyGoLib",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Benchmark_findQueryKeyGoLib(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Benchmark_findQueryKeyGoLib(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#ExampleSetURLVars",
              "documentation": {
                "identifier": "ExampleSetURLVars",
                "newPage": false,
                "searchKey": "mux.ExampleSetURLVars",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleSetURLVars()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleSetURLVars()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#SetURLVars",
              "documentation": {
                "identifier": "SetURLVars",
                "newPage": false,
                "searchKey": "mux.SetURLVars",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func SetURLVars(r *http.Request, val map[string]string) *http.Request"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SetURLVars(r *http.Request, val map[string]string) *http.Request\n```\n\nSetURLVars sets the URL variables for the given request, to be accessed via mux.Vars for testing route behaviour. Arguments are not modified, a shallow copy is returned. \n\nThis API should only be used for testing purposes; it provides a way to inject variables into the request context. Alternatively, URL variables can be set by making a route that captures the required variables, starting a server and sending the request to that server. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#Test301Redirect",
              "documentation": {
                "identifier": "Test301Redirect",
                "newPage": false,
                "searchKey": "mux.Test301Redirect",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test301Redirect(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test301Redirect(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestBuildVarsFunc",
              "documentation": {
                "identifier": "TestBuildVarsFunc",
                "newPage": false,
                "searchKey": "mux.TestBuildVarsFunc",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBuildVarsFunc(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBuildVarsFunc(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestCORSMethodMiddleware",
              "documentation": {
                "identifier": "TestCORSMethodMiddleware",
                "newPage": false,
                "searchKey": "mux.TestCORSMethodMiddleware",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCORSMethodMiddleware(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCORSMethodMiddleware(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestCORSMethodMiddlewareSubrouter",
              "documentation": {
                "identifier": "TestCORSMethodMiddlewareSubrouter",
                "newPage": false,
                "searchKey": "mux.TestCORSMethodMiddlewareSubrouter",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCORSMethodMiddlewareSubrouter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCORSMethodMiddlewareSubrouter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestContextMiddleware",
              "documentation": {
                "identifier": "TestContextMiddleware",
                "newPage": false,
                "searchKey": "mux.TestContextMiddleware",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestContextMiddleware(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestContextMiddleware(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestErrMatchNotFound",
              "documentation": {
                "identifier": "TestErrMatchNotFound",
                "newPage": false,
                "searchKey": "mux.TestErrMatchNotFound",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestErrMatchNotFound(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestErrMatchNotFound(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestHeaderMatcher",
              "documentation": {
                "identifier": "TestHeaderMatcher",
                "newPage": false,
                "searchKey": "mux.TestHeaderMatcher",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHeaderMatcher(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHeaderMatcher(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestHeaders",
              "documentation": {
                "identifier": "TestHeaders",
                "newPage": false,
                "searchKey": "mux.TestHeaders",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHeaders(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHeaders(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestHost",
              "documentation": {
                "identifier": "TestHost",
                "newPage": false,
                "searchKey": "mux.TestHost",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHost(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHost(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestHostMatcher",
              "documentation": {
                "identifier": "TestHostMatcher",
                "newPage": false,
                "searchKey": "mux.TestHostMatcher",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHostMatcher(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHostMatcher(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMatchedRouteName",
              "documentation": {
                "identifier": "TestMatchedRouteName",
                "newPage": false,
                "searchKey": "mux.TestMatchedRouteName",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMatchedRouteName(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMatchedRouteName(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMatcherFunc",
              "documentation": {
                "identifier": "TestMatcherFunc",
                "newPage": false,
                "searchKey": "mux.TestMatcherFunc",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMatcherFunc(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMatcherFunc(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMethodMatcher",
              "documentation": {
                "identifier": "TestMethodMatcher",
                "newPage": false,
                "searchKey": "mux.TestMethodMatcher",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMethodMatcher(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMethodMatcher(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMethodNotAllowed",
              "documentation": {
                "identifier": "TestMethodNotAllowed",
                "newPage": false,
                "searchKey": "mux.TestMethodNotAllowed",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMethodNotAllowed(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMethodNotAllowed(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMethods",
              "documentation": {
                "identifier": "TestMethods",
                "newPage": false,
                "searchKey": "mux.TestMethods",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMethods(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMethods(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMethodsSubrouterCatchall",
              "documentation": {
                "identifier": "TestMethodsSubrouterCatchall",
                "newPage": false,
                "searchKey": "mux.TestMethodsSubrouterCatchall",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMethodsSubrouterCatchall(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMethodsSubrouterCatchall(t *testing.T)\n```\n\nTestMethodsSubrouterCatchall matches handlers for subrouters where a catchall handler is set for a mis-matching method. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMethodsSubrouterPathPrefix",
              "documentation": {
                "identifier": "TestMethodsSubrouterPathPrefix",
                "newPage": false,
                "searchKey": "mux.TestMethodsSubrouterPathPrefix",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMethodsSubrouterPathPrefix(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMethodsSubrouterPathPrefix(t *testing.T)\n```\n\nTestMethodsSubrouterPathPrefix matches handlers on subrouters created on a router with a path prefix matcher and method matcher. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMethodsSubrouterPathVariable",
              "documentation": {
                "identifier": "TestMethodsSubrouterPathVariable",
                "newPage": false,
                "searchKey": "mux.TestMethodsSubrouterPathVariable",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMethodsSubrouterPathVariable(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMethodsSubrouterPathVariable(t *testing.T)\n```\n\nTestMethodsSubrouterPathVariable matches handlers on matching paths with path variables in them. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMethodsSubrouterStrictSlash",
              "documentation": {
                "identifier": "TestMethodsSubrouterStrictSlash",
                "newPage": false,
                "searchKey": "mux.TestMethodsSubrouterStrictSlash",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMethodsSubrouterStrictSlash(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMethodsSubrouterStrictSlash(t *testing.T)\n```\n\nTestMethodsSubrouterStrictSlash matches handlers on subrouters with strict-slash matchers. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMethodsSubrouterSubrouter",
              "documentation": {
                "identifier": "TestMethodsSubrouterSubrouter",
                "newPage": false,
                "searchKey": "mux.TestMethodsSubrouterSubrouter",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMethodsSubrouterSubrouter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMethodsSubrouterSubrouter(t *testing.T)\n```\n\nTestMethodsSubrouterSubrouter matches handlers on subrouters produced from method matchers registered on a root subrouter. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMiddleware",
              "documentation": {
                "identifier": "TestMiddleware",
                "newPage": false,
                "searchKey": "mux.TestMiddleware",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMiddleware(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMiddleware(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMiddlewareAdd",
              "documentation": {
                "identifier": "TestMiddlewareAdd",
                "newPage": false,
                "searchKey": "mux.TestMiddlewareAdd",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMiddlewareAdd(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMiddlewareAdd(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMiddlewareExecution",
              "documentation": {
                "identifier": "TestMiddlewareExecution",
                "newPage": false,
                "searchKey": "mux.TestMiddlewareExecution",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMiddlewareExecution(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMiddlewareExecution(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMiddlewareMethodMismatch",
              "documentation": {
                "identifier": "TestMiddlewareMethodMismatch",
                "newPage": false,
                "searchKey": "mux.TestMiddlewareMethodMismatch",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMiddlewareMethodMismatch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMiddlewareMethodMismatch(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMiddlewareMethodMismatchSubrouter",
              "documentation": {
                "identifier": "TestMiddlewareMethodMismatchSubrouter",
                "newPage": false,
                "searchKey": "mux.TestMiddlewareMethodMismatchSubrouter",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMiddlewareMethodMismatchSubrouter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMiddlewareMethodMismatchSubrouter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMiddlewareNotFound",
              "documentation": {
                "identifier": "TestMiddlewareNotFound",
                "newPage": false,
                "searchKey": "mux.TestMiddlewareNotFound",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMiddlewareNotFound(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMiddlewareNotFound(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMiddlewareNotFoundSubrouter",
              "documentation": {
                "identifier": "TestMiddlewareNotFoundSubrouter",
                "newPage": false,
                "searchKey": "mux.TestMiddlewareNotFoundSubrouter",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMiddlewareNotFoundSubrouter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMiddlewareNotFoundSubrouter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMiddlewareOnMultiSubrouter",
              "documentation": {
                "identifier": "TestMiddlewareOnMultiSubrouter",
                "newPage": false,
                "searchKey": "mux.TestMiddlewareOnMultiSubrouter",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMiddlewareOnMultiSubrouter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMiddlewareOnMultiSubrouter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestMiddlewareSubrouter",
              "documentation": {
                "identifier": "TestMiddlewareSubrouter",
                "newPage": false,
                "searchKey": "mux.TestMiddlewareSubrouter",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMiddlewareSubrouter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMiddlewareSubrouter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestNameMultipleCalls",
              "documentation": {
                "identifier": "TestNameMultipleCalls",
                "newPage": false,
                "searchKey": "mux.TestNameMultipleCalls",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNameMultipleCalls(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNameMultipleCalls(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestNamedRoutes",
              "documentation": {
                "identifier": "TestNamedRoutes",
                "newPage": false,
                "searchKey": "mux.TestNamedRoutes",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNamedRoutes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNamedRoutes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestNewRegexp",
              "documentation": {
                "identifier": "TestNewRegexp",
                "newPage": false,
                "searchKey": "mux.TestNewRegexp",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewRegexp(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewRegexp(t *testing.T)\n```\n\nTest for the new regexp library, still not available in stable Go. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestNoMatchMethodErrorHandler",
              "documentation": {
                "identifier": "TestNoMatchMethodErrorHandler",
                "newPage": false,
                "searchKey": "mux.TestNoMatchMethodErrorHandler",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNoMatchMethodErrorHandler(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNoMatchMethodErrorHandler(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestPanicOnCapturingGroups",
              "documentation": {
                "identifier": "TestPanicOnCapturingGroups",
                "newPage": false,
                "searchKey": "mux.TestPanicOnCapturingGroups",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPanicOnCapturingGroups(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPanicOnCapturingGroups(t *testing.T)\n```\n\nSee: [https://github.com/gorilla/mux/issues/200](https://github.com/gorilla/mux/issues/200) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestPath",
              "documentation": {
                "identifier": "TestPath",
                "newPage": false,
                "searchKey": "mux.TestPath",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPath(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPath(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestPathMatcher",
              "documentation": {
                "identifier": "TestPathMatcher",
                "newPage": false,
                "searchKey": "mux.TestPathMatcher",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPathMatcher(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPathMatcher(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestPathPrefix",
              "documentation": {
                "identifier": "TestPathPrefix",
                "newPage": false,
                "searchKey": "mux.TestPathPrefix",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPathPrefix(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPathPrefix(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestQueries",
              "documentation": {
                "identifier": "TestQueries",
                "newPage": false,
                "searchKey": "mux.TestQueries",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQueries(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQueries(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestRedirectSlash",
              "documentation": {
                "identifier": "TestRedirectSlash",
                "newPage": false,
                "searchKey": "mux.TestRedirectSlash",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRedirectSlash(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRedirectSlash(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestRouteMatchers",
              "documentation": {
                "identifier": "TestRouteMatchers",
                "newPage": false,
                "searchKey": "mux.TestRouteMatchers",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRouteMatchers(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRouteMatchers(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestSchemeHostPath",
              "documentation": {
                "identifier": "TestSchemeHostPath",
                "newPage": false,
                "searchKey": "mux.TestSchemeHostPath",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSchemeHostPath(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSchemeHostPath(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestSchemeMatcher",
              "documentation": {
                "identifier": "TestSchemeMatcher",
                "newPage": false,
                "searchKey": "mux.TestSchemeMatcher",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSchemeMatcher(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSchemeMatcher(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestSchemeMatchers",
              "documentation": {
                "identifier": "TestSchemeMatchers",
                "newPage": false,
                "searchKey": "mux.TestSchemeMatchers",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSchemeMatchers(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSchemeMatchers(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestSchemes",
              "documentation": {
                "identifier": "TestSchemes",
                "newPage": false,
                "searchKey": "mux.TestSchemes",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSchemes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSchemes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestSkipClean",
              "documentation": {
                "identifier": "TestSkipClean",
                "newPage": false,
                "searchKey": "mux.TestSkipClean",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSkipClean(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSkipClean(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestStrictSlash",
              "documentation": {
                "identifier": "TestStrictSlash",
                "newPage": false,
                "searchKey": "mux.TestStrictSlash",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStrictSlash(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStrictSlash(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestSubRouter",
              "documentation": {
                "identifier": "TestSubRouter",
                "newPage": false,
                "searchKey": "mux.TestSubRouter",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSubRouter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSubRouter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestSubRouting",
              "documentation": {
                "identifier": "TestSubRouting",
                "newPage": false,
                "searchKey": "mux.TestSubRouting",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSubRouting(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSubRouting(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestSubrouterCustomMethodNotAllowed",
              "documentation": {
                "identifier": "TestSubrouterCustomMethodNotAllowed",
                "newPage": false,
                "searchKey": "mux.TestSubrouterCustomMethodNotAllowed",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSubrouterCustomMethodNotAllowed(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSubrouterCustomMethodNotAllowed(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestSubrouterErrorHandling",
              "documentation": {
                "identifier": "TestSubrouterErrorHandling",
                "newPage": false,
                "searchKey": "mux.TestSubrouterErrorHandling",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSubrouterErrorHandling(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSubrouterErrorHandling(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestSubrouterHeader",
              "documentation": {
                "identifier": "TestSubrouterHeader",
                "newPage": false,
                "searchKey": "mux.TestSubrouterHeader",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSubrouterHeader(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSubrouterHeader(t *testing.T)\n```\n\n[https://plus.google.com/101022900381697718949/posts/eWy6DjFJ6uW](https://plus.google.com/101022900381697718949/posts/eWy6DjFJ6uW) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestSubrouterMatching",
              "documentation": {
                "identifier": "TestSubrouterMatching",
                "newPage": false,
                "searchKey": "mux.TestSubrouterMatching",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSubrouterMatching(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSubrouterMatching(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestSubrouterNotFound",
              "documentation": {
                "identifier": "TestSubrouterNotFound",
                "newPage": false,
                "searchKey": "mux.TestSubrouterNotFound",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSubrouterNotFound(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSubrouterNotFound(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestUrlBuilding",
              "documentation": {
                "identifier": "TestUrlBuilding",
                "newPage": false,
                "searchKey": "mux.TestUrlBuilding",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUrlBuilding(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUrlBuilding(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestUseEncodedPath",
              "documentation": {
                "identifier": "TestUseEncodedPath",
                "newPage": false,
                "searchKey": "mux.TestUseEncodedPath",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUseEncodedPath(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUseEncodedPath(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestVariableNames",
              "documentation": {
                "identifier": "TestVariableNames",
                "newPage": false,
                "searchKey": "mux.TestVariableNames",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestVariableNames(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestVariableNames(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestWalkErrorHandler",
              "documentation": {
                "identifier": "TestWalkErrorHandler",
                "newPage": false,
                "searchKey": "mux.TestWalkErrorHandler",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWalkErrorHandler(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWalkErrorHandler(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestWalkErrorMatcher",
              "documentation": {
                "identifier": "TestWalkErrorMatcher",
                "newPage": false,
                "searchKey": "mux.TestWalkErrorMatcher",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWalkErrorMatcher(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWalkErrorMatcher(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestWalkErrorRoute",
              "documentation": {
                "identifier": "TestWalkErrorRoute",
                "newPage": false,
                "searchKey": "mux.TestWalkErrorRoute",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWalkErrorRoute(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWalkErrorRoute(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestWalkNested",
              "documentation": {
                "identifier": "TestWalkNested",
                "newPage": false,
                "searchKey": "mux.TestWalkNested",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWalkNested(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWalkNested(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestWalkSingleDepth",
              "documentation": {
                "identifier": "TestWalkSingleDepth",
                "newPage": false,
                "searchKey": "mux.TestWalkSingleDepth",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWalkSingleDepth(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWalkSingleDepth(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestWalkSubrouters",
              "documentation": {
                "identifier": "TestWalkSubrouters",
                "newPage": false,
                "searchKey": "mux.TestWalkSubrouters",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWalkSubrouters(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWalkSubrouters(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#Test_copyRouteConf",
              "documentation": {
                "identifier": "Test_copyRouteConf",
                "newPage": false,
                "searchKey": "mux.Test_copyRouteConf",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test_copyRouteConf(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test_copyRouteConf(t *testing.T)\n```\n\nverify that copyRouteConf copies fields as expected. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#Test_findFirstQueryKey",
              "documentation": {
                "identifier": "Test_findFirstQueryKey",
                "newPage": false,
                "searchKey": "mux.Test_findFirstQueryKey",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test_findFirstQueryKey(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test_findFirstQueryKey(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#Vars",
              "documentation": {
                "identifier": "Vars",
                "newPage": false,
                "searchKey": "mux.Vars",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Vars(r *http.Request) map[string]string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Vars(r *http.Request) map[string]string\n```\n\nVars returns the route variables for the current request, if any. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#braceIndices",
              "documentation": {
                "identifier": "braceIndices",
                "newPage": false,
                "searchKey": "mux.braceIndices",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func braceIndices(s string) ([]int, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc braceIndices(s string) ([]int, error)\n```\n\nbraceIndices returns the first level curly brace indices from a string. It returns an error in case of unbalanced braces. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#checkPairs",
              "documentation": {
                "identifier": "checkPairs",
                "newPage": false,
                "searchKey": "mux.checkPairs",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkPairs(pairs ...string) (int, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkPairs(pairs ...string) (int, error)\n```\n\ncheckPairs returns the count of strings passed in, and an error if the count is not an even number. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#cleanPath",
              "documentation": {
                "identifier": "cleanPath",
                "newPage": false,
                "searchKey": "mux.cleanPath",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func cleanPath(p string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc cleanPath(p string) string\n```\n\ncleanPath returns the canonical path for p, eliminating . and .. elements. Borrowed from the net/http package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#dummyHandler",
              "documentation": {
                "identifier": "dummyHandler",
                "newPage": false,
                "searchKey": "mux.dummyHandler",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func dummyHandler(w http.ResponseWriter, r *http.Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc dummyHandler(w http.ResponseWriter, r *http.Request)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#extractVars",
              "documentation": {
                "identifier": "extractVars",
                "newPage": false,
                "searchKey": "mux.extractVars",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func extractVars(input string, matches []int, names []string, output map[string]string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc extractVars(input string, matches []int, names []string, output map[string]string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#findFirstQueryKey",
              "documentation": {
                "identifier": "findFirstQueryKey",
                "newPage": false,
                "searchKey": "mux.findFirstQueryKey",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func findFirstQueryKey(rawQuery, key string) (value string, ok bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc findFirstQueryKey(rawQuery, key string) (value string, ok bool)\n```\n\nfindFirstQueryKey returns the same result as (*url.URL).Query()[key][0]. If key was not found, empty string and false is returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#getAllMethodsForRoute",
              "documentation": {
                "identifier": "getAllMethodsForRoute",
                "newPage": false,
                "searchKey": "mux.getAllMethodsForRoute",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getAllMethodsForRoute(r *Router, req *http.Request) ([]string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getAllMethodsForRoute(r *Router, req *http.Request) ([]string, error)\n```\n\ngetAllMethodsForRoute returns all the methods from method matchers matching a given request. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#getHost",
              "documentation": {
                "identifier": "getHost",
                "newPage": false,
                "searchKey": "mux.getHost",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getHost(r *http.Request) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getHost(r *http.Request) string\n```\n\ngetHost tries its best to return the request host. According to section 14.23 of RFC 2616 the Host header can include the port number if the default value of 80 is not used. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#getRouteTemplate",
              "documentation": {
                "identifier": "getRouteTemplate",
                "newPage": false,
                "searchKey": "mux.getRouteTemplate",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getRouteTemplate(route *Route) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getRouteTemplate(route *Route) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#mapFromPairsToRegex",
              "documentation": {
                "identifier": "mapFromPairsToRegex",
                "newPage": false,
                "searchKey": "mux.mapFromPairsToRegex",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func mapFromPairsToRegex(pairs ...string) (map[string]*regexp.Regexp, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mapFromPairsToRegex(pairs ...string) (map[string]*regexp.Regexp, error)\n```\n\nmapFromPairsToRegex converts variadic string parameters to a string to regex map. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#mapFromPairsToString",
              "documentation": {
                "identifier": "mapFromPairsToString",
                "newPage": false,
                "searchKey": "mux.mapFromPairsToString",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func mapFromPairsToString(pairs ...string) (map[string]string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mapFromPairsToString(pairs ...string) (map[string]string, error)\n```\n\nmapFromPairsToString converts variadic string parameters to a string to string map. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#mapToPairs",
              "documentation": {
                "identifier": "mapToPairs",
                "newPage": false,
                "searchKey": "mux.mapToPairs",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func mapToPairs(m map[string]string) []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mapToPairs(m map[string]string) []string\n```\n\nmapToPairs converts a string map to a slice of string pairs \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#matchInArray",
              "documentation": {
                "identifier": "matchInArray",
                "newPage": false,
                "searchKey": "mux.matchInArray",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func matchInArray(arr []string, value string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc matchInArray(arr []string, value string) bool\n```\n\nmatchInArray returns true if the given string value is in the array. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#matchMapWithRegex",
              "documentation": {
                "identifier": "matchMapWithRegex",
                "newPage": false,
                "searchKey": "mux.matchMapWithRegex",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func matchMapWithRegex(toCheck map[string]*regexp.Regexp, toMatch map[string][]string, canonicalKey bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc matchMapWithRegex(toCheck map[string]*regexp.Regexp, toMatch map[string][]string, canonicalKey bool) bool\n```\n\nmatchMapWithRegex returns true if the given key/value pairs exist in a given map compiled against the given regex \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#matchMapWithString",
              "documentation": {
                "identifier": "matchMapWithString",
                "newPage": false,
                "searchKey": "mux.matchMapWithString",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func matchMapWithString(toCheck map[string]string, toMatch map[string][]string, canonicalKey bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc matchMapWithString(toCheck map[string]string, toMatch map[string][]string, canonicalKey bool) bool\n```\n\nmatchMapWithString returns true if the given key/value pairs exist in a given map. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#methodHandler",
              "documentation": {
                "identifier": "methodHandler",
                "newPage": false,
                "searchKey": "mux.methodHandler",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func methodHandler(method string) http.HandlerFunc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc methodHandler(method string) http.HandlerFunc\n```\n\nmethodHandler writes the method string in response. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#methodNotAllowed",
              "documentation": {
                "identifier": "methodNotAllowed",
                "newPage": false,
                "searchKey": "mux.methodNotAllowed",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func methodNotAllowed(w http.ResponseWriter, r *http.Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc methodNotAllowed(w http.ResponseWriter, r *http.Request)\n```\n\nmethodNotAllowed replies to the request with an HTTP status code 405. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#methodNotAllowedHandler",
              "documentation": {
                "identifier": "methodNotAllowedHandler",
                "newPage": false,
                "searchKey": "mux.methodNotAllowedHandler",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func methodNotAllowedHandler() http.Handler"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc methodNotAllowedHandler() http.Handler\n```\n\nmethodNotAllowedHandler returns a simple request handler that replies to each request with a status code 405. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#newRequest",
              "documentation": {
                "identifier": "newRequest",
                "newPage": false,
                "searchKey": "mux.newRequest",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newRequest(method, url string) *http.Request"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newRequest(method, url string) *http.Request\n```\n\nnewRequest is a helper function to create a new request with a method and url. The request returned is a 'server' request as opposed to a 'client' one through simulated write onto the wire and read off of the wire. The differences between requests are detailed in the net/http package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#newRequestHost",
              "documentation": {
                "identifier": "newRequestHost",
                "newPage": false,
                "searchKey": "mux.newRequestHost",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newRequestHost(method, url, host string) *http.Request"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newRequestHost(method, url, host string) *http.Request\n```\n\nnewRequestHost a new request with a method, url, and host header \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#newRequestWithHeaders",
              "documentation": {
                "identifier": "newRequestWithHeaders",
                "newPage": false,
                "searchKey": "mux.newRequestWithHeaders",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newRequestWithHeaders(method, url string, headers ...string) *http.Request"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newRequestWithHeaders(method, url string, headers ...string) *http.Request\n```\n\ncreate a new request with the provided headers \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#requestWithRoute",
              "documentation": {
                "identifier": "requestWithRoute",
                "newPage": false,
                "searchKey": "mux.requestWithRoute",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func requestWithRoute(r *http.Request, route *Route) *http.Request"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc requestWithRoute(r *http.Request, route *Route) *http.Request\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#requestWithVars",
              "documentation": {
                "identifier": "requestWithVars",
                "newPage": false,
                "searchKey": "mux.requestWithVars",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func requestWithVars(r *http.Request, vars map[string]string) *http.Request"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc requestWithVars(r *http.Request, vars map[string]string) *http.Request\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#stringHandler",
              "documentation": {
                "identifier": "stringHandler",
                "newPage": false,
                "searchKey": "mux.stringHandler",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func stringHandler(s string) http.HandlerFunc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stringHandler(s string) http.HandlerFunc\n```\n\nstringHandler returns a handler func that writes a message 's' to the http.ResponseWriter. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#stringMapEqual",
              "documentation": {
                "identifier": "stringMapEqual",
                "newPage": false,
                "searchKey": "mux.stringMapEqual",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func stringMapEqual(m1, m2 map[string]string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stringMapEqual(m1, m2 map[string]string) bool\n```\n\nstringMapEqual checks the equality of two string maps \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#testMethods",
              "documentation": {
                "identifier": "testMethods",
                "newPage": false,
                "searchKey": "mux.testMethods",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testMethods(t *testing.T, test routeTest)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testMethods(t *testing.T, test routeTest)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#testMethodsSubrouter",
              "documentation": {
                "identifier": "testMethodsSubrouter",
                "newPage": false,
                "searchKey": "mux.testMethodsSubrouter",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testMethodsSubrouter(t *testing.T, test methodsSubrouterTest)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testMethodsSubrouter(t *testing.T, test methodsSubrouterTest)\n```\n\ntestMethodsSubrouter runs an individual methodsSubrouterTest. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#testQueriesRegexp",
              "documentation": {
                "identifier": "testQueriesRegexp",
                "newPage": false,
                "searchKey": "mux.testQueriesRegexp",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testQueriesRegexp(t *testing.T, test routeTest)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testQueriesRegexp(t *testing.T, test routeTest)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#testQueriesTemplates",
              "documentation": {
                "identifier": "testQueriesTemplates",
                "newPage": false,
                "searchKey": "mux.testQueriesTemplates",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testQueriesTemplates(t *testing.T, test routeTest)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testQueriesTemplates(t *testing.T, test routeTest)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#testRegexp",
              "documentation": {
                "identifier": "testRegexp",
                "newPage": false,
                "searchKey": "mux.testRegexp",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testRegexp(t *testing.T, test routeTest)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testRegexp(t *testing.T, test routeTest)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#testRoute",
              "documentation": {
                "identifier": "testRoute",
                "newPage": false,
                "searchKey": "mux.testRoute",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testRoute(t *testing.T, test routeTest)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testRoute(t *testing.T, test routeTest)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#testTemplate",
              "documentation": {
                "identifier": "testTemplate",
                "newPage": false,
                "searchKey": "mux.testTemplate",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTemplate(t *testing.T, test routeTest)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTemplate(t *testing.T, test routeTest)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#testUseEscapedRoute",
              "documentation": {
                "identifier": "testUseEscapedRoute",
                "newPage": false,
                "searchKey": "mux.testUseEscapedRoute",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testUseEscapedRoute(t *testing.T, test routeTest)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testUseEscapedRoute(t *testing.T, test routeTest)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#uniqueVars",
              "documentation": {
                "identifier": "uniqueVars",
                "newPage": false,
                "searchKey": "mux.uniqueVars",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func uniqueVars(s1, s2 []string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc uniqueVars(s1, s2 []string) error\n```\n\nuniqueVars returns an error if two slices contain duplicated strings. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#varGroupName",
              "documentation": {
                "identifier": "varGroupName",
                "newPage": false,
                "searchKey": "mux.varGroupName",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func varGroupName(idx int) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc varGroupName(idx int) string\n```\n\nvarGroupName builds a capturing group name for the indexed variable. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/mux_test"
    }
  ]
}
