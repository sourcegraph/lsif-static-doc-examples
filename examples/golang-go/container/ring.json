{
  "pathID": "/container/ring",
  "documentation": {
    "identifier": "ring",
    "newPage": true,
    "searchKey": "container/ring",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package ring"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package ring implements operations on circular lists. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/container/ring#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/container/ring#Ring",
              "documentation": {
                "identifier": "Ring",
                "newPage": false,
                "searchKey": "ring.Ring",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Ring struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Ring struct {\n\tnext, prev *Ring\n\tValue      interface{} // for use by client; untouched by this library\n}\n```\n\nA Ring is an element of a circular list, or ring. Rings do not have a beginning or end; a pointer to any ring element serves as reference to the entire ring. Empty rings are represented as nil Ring pointers. The zero value for a Ring is a one-element ring with a nil Value. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/container/ring#New",
                    "documentation": {
                      "identifier": "New",
                      "newPage": false,
                      "searchKey": "ring.New",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func New(n int) *Ring"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc New(n int) *Ring\n```\n\nNew creates a ring of n elements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/ring#makeN",
                    "documentation": {
                      "identifier": "makeN",
                      "newPage": false,
                      "searchKey": "ring.makeN",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makeN(n int) *Ring"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makeN(n int) *Ring\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/ring#Ring.init",
                    "documentation": {
                      "identifier": "Ring.init",
                      "newPage": false,
                      "searchKey": "ring.Ring.init",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Ring) init() *Ring"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Ring) init() *Ring\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/ring#Ring.Next",
                    "documentation": {
                      "identifier": "Ring.Next",
                      "newPage": false,
                      "searchKey": "ring.Ring.Next",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Ring) Next() *Ring"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Ring) Next() *Ring\n```\n\nNext returns the next ring element. r must not be empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/ring#Ring.Prev",
                    "documentation": {
                      "identifier": "Ring.Prev",
                      "newPage": false,
                      "searchKey": "ring.Ring.Prev",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Ring) Prev() *Ring"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Ring) Prev() *Ring\n```\n\nPrev returns the previous ring element. r must not be empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/ring#Ring.Move",
                    "documentation": {
                      "identifier": "Ring.Move",
                      "newPage": false,
                      "searchKey": "ring.Ring.Move",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Ring) Move(n int) *Ring"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Ring) Move(n int) *Ring\n```\n\nMove moves n % r.Len() elements backward (n < 0) or forward (n >= 0) in the ring and returns that ring element. r must not be empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/ring#Ring.Link",
                    "documentation": {
                      "identifier": "Ring.Link",
                      "newPage": false,
                      "searchKey": "ring.Ring.Link",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Ring) Link(s *Ring) *Ring"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Ring) Link(s *Ring) *Ring\n```\n\nLink connects ring r with ring s such that r.Next() becomes s and returns the original value for r.Next(). r must not be empty. \n\nIf r and s point to the same ring, linking them removes the elements between r and s from the ring. The removed elements form a subring and the result is a reference to that subring (if no elements were removed, the result is still the original value for r.Next(), and not nil). \n\nIf r and s point to different rings, linking them creates a single ring with the elements of s inserted after r. The result points to the element following the last element of s after insertion. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/ring#Ring.Unlink",
                    "documentation": {
                      "identifier": "Ring.Unlink",
                      "newPage": false,
                      "searchKey": "ring.Ring.Unlink",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Ring) Unlink(n int) *Ring"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Ring) Unlink(n int) *Ring\n```\n\nUnlink removes n % r.Len() elements from the ring r, starting at r.Next(). If n % r.Len() == 0, r remains unchanged. The result is the removed subring. r must not be empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/ring#Ring.Len",
                    "documentation": {
                      "identifier": "Ring.Len",
                      "newPage": false,
                      "searchKey": "ring.Ring.Len",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Ring) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Ring) Len() int\n```\n\nLen computes the number of elements in ring r. It executes in time proportional to the number of elements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/ring#Ring.Do",
                    "documentation": {
                      "identifier": "Ring.Do",
                      "newPage": false,
                      "searchKey": "ring.Ring.Do",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Ring) Do(f func(interface{}))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Ring) Do(f func(interface{}))\n```\n\nDo calls function f on each element of the ring, in forward order. The behavior of Do is undefined if f changes *r. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/container/ring#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/container/ring#dump",
              "documentation": {
                "identifier": "dump",
                "newPage": false,
                "searchKey": "ring.dump",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func dump(r *Ring)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc dump(r *Ring)\n```\n\nFor debugging - keep around. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/ring#verify",
              "documentation": {
                "identifier": "verify",
                "newPage": false,
                "searchKey": "ring.verify",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func verify(t *testing.T, r *Ring, N int, sum int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc verify(t *testing.T, r *Ring, N int, sum int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/ring#TestCornerCases",
              "documentation": {
                "identifier": "TestCornerCases",
                "newPage": false,
                "searchKey": "ring.TestCornerCases",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCornerCases(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCornerCases(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/ring#sumN",
              "documentation": {
                "identifier": "sumN",
                "newPage": false,
                "searchKey": "ring.sumN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func sumN(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sumN(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/ring#TestNew",
              "documentation": {
                "identifier": "TestNew",
                "newPage": false,
                "searchKey": "ring.TestNew",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNew(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNew(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/ring#TestLink1",
              "documentation": {
                "identifier": "TestLink1",
                "newPage": false,
                "searchKey": "ring.TestLink1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLink1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLink1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/ring#TestLink2",
              "documentation": {
                "identifier": "TestLink2",
                "newPage": false,
                "searchKey": "ring.TestLink2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLink2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLink2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/ring#TestLink3",
              "documentation": {
                "identifier": "TestLink3",
                "newPage": false,
                "searchKey": "ring.TestLink3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLink3(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLink3(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/ring#TestUnlink",
              "documentation": {
                "identifier": "TestUnlink",
                "newPage": false,
                "searchKey": "ring.TestUnlink",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnlink(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnlink(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/ring#TestLinkUnlink",
              "documentation": {
                "identifier": "TestLinkUnlink",
                "newPage": false,
                "searchKey": "ring.TestLinkUnlink",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLinkUnlink(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLinkUnlink(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/ring#TestMoveEmptyRing",
              "documentation": {
                "identifier": "TestMoveEmptyRing",
                "newPage": false,
                "searchKey": "ring.TestMoveEmptyRing",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMoveEmptyRing(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMoveEmptyRing(t *testing.T)\n```\n\nTest that calling Move() on an empty Ring initializes it. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
