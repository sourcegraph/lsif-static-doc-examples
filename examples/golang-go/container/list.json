{
  "pathID": "/container/list",
  "documentation": {
    "identifier": "list",
    "newPage": true,
    "searchKey": "container/list",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package list"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package list implements a doubly linked list. \n\nTo iterate over a list (where l is a *List): \n\n```\nfor e := l.Front(); e != nil; e = e.Next() {\n\t// do something with e.Value\n}\n\n```\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/container/list#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/container/list#Element",
              "documentation": {
                "identifier": "Element",
                "newPage": false,
                "searchKey": "list.Element",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Element struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Element struct {\n\t// Next and previous pointers in the doubly-linked list of elements.\n\t// To simplify the implementation, internally a list l is implemented\n\t// as a ring, such that &l.root is both the next element of the last\n\t// list element (l.Back()) and the previous element of the first list\n\t// element (l.Front()).\n\tnext, prev *Element\n\n\t// The list to which this element belongs.\n\tlist *List\n\n\t// The value stored with this element.\n\tValue interface{}\n}\n```\n\nElement is an element of a linked list. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/container/list#Element.Next",
                    "documentation": {
                      "identifier": "Element.Next",
                      "newPage": false,
                      "searchKey": "list.Element.Next",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *Element) Next() *Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *Element) Next() *Element\n```\n\nNext returns the next list element or nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#Element.Prev",
                    "documentation": {
                      "identifier": "Element.Prev",
                      "newPage": false,
                      "searchKey": "list.Element.Prev",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *Element) Prev() *Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *Element) Prev() *Element\n```\n\nPrev returns the previous list element or nil. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/container/list#List",
              "documentation": {
                "identifier": "List",
                "newPage": false,
                "searchKey": "list.List",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type List struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype List struct {\n\troot Element // sentinel list element, only &root, root.prev, and root.next are used\n\tlen  int     // current list length excluding (this) sentinel element\n}\n```\n\nList represents a doubly linked list. The zero value for List is an empty list ready to use. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/container/list#New",
                    "documentation": {
                      "identifier": "New",
                      "newPage": false,
                      "searchKey": "list.New",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func New() *List"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc New() *List\n```\n\nNew returns an initialized list. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.Back",
                    "documentation": {
                      "identifier": "List.Back",
                      "newPage": false,
                      "searchKey": "list.List.Back",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) Back() *Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) Back() *Element\n```\n\nBack returns the last element of list l or nil if the list is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.Front",
                    "documentation": {
                      "identifier": "List.Front",
                      "newPage": false,
                      "searchKey": "list.List.Front",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) Front() *Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) Front() *Element\n```\n\nFront returns the first element of list l or nil if the list is empty. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.Init",
                    "documentation": {
                      "identifier": "List.Init",
                      "newPage": false,
                      "searchKey": "list.List.Init",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) Init() *List"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) Init() *List\n```\n\nInit initializes or clears list l. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.InsertAfter",
                    "documentation": {
                      "identifier": "List.InsertAfter",
                      "newPage": false,
                      "searchKey": "list.List.InsertAfter",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) InsertAfter(v interface{}, mark *Element) *Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) InsertAfter(v interface{}, mark *Element) *Element\n```\n\nInsertAfter inserts a new element e with value v immediately after mark and returns e. If mark is not an element of l, the list is not modified. The mark must not be nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.InsertBefore",
                    "documentation": {
                      "identifier": "List.InsertBefore",
                      "newPage": false,
                      "searchKey": "list.List.InsertBefore",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) InsertBefore(v interface{}, mark *Element) *Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) InsertBefore(v interface{}, mark *Element) *Element\n```\n\nInsertBefore inserts a new element e with value v immediately before mark and returns e. If mark is not an element of l, the list is not modified. The mark must not be nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.Len",
                    "documentation": {
                      "identifier": "List.Len",
                      "newPage": false,
                      "searchKey": "list.List.Len",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) Len() int\n```\n\nLen returns the number of elements of list l. The complexity is O(1). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.MoveAfter",
                    "documentation": {
                      "identifier": "List.MoveAfter",
                      "newPage": false,
                      "searchKey": "list.List.MoveAfter",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) MoveAfter(e, mark *Element)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) MoveAfter(e, mark *Element)\n```\n\nMoveAfter moves element e to its new position after mark. If e or mark is not an element of l, or e == mark, the list is not modified. The element and mark must not be nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.MoveBefore",
                    "documentation": {
                      "identifier": "List.MoveBefore",
                      "newPage": false,
                      "searchKey": "list.List.MoveBefore",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) MoveBefore(e, mark *Element)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) MoveBefore(e, mark *Element)\n```\n\nMoveBefore moves element e to its new position before mark. If e or mark is not an element of l, or e == mark, the list is not modified. The element and mark must not be nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.MoveToBack",
                    "documentation": {
                      "identifier": "List.MoveToBack",
                      "newPage": false,
                      "searchKey": "list.List.MoveToBack",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) MoveToBack(e *Element)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) MoveToBack(e *Element)\n```\n\nMoveToBack moves element e to the back of list l. If e is not an element of l, the list is not modified. The element must not be nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.MoveToFront",
                    "documentation": {
                      "identifier": "List.MoveToFront",
                      "newPage": false,
                      "searchKey": "list.List.MoveToFront",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) MoveToFront(e *Element)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) MoveToFront(e *Element)\n```\n\nMoveToFront moves element e to the front of list l. If e is not an element of l, the list is not modified. The element must not be nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.PushBack",
                    "documentation": {
                      "identifier": "List.PushBack",
                      "newPage": false,
                      "searchKey": "list.List.PushBack",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) PushBack(v interface{}) *Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) PushBack(v interface{}) *Element\n```\n\nPushBack inserts a new element e with value v at the back of list l and returns e. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.PushBackList",
                    "documentation": {
                      "identifier": "List.PushBackList",
                      "newPage": false,
                      "searchKey": "list.List.PushBackList",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) PushBackList(other *List)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) PushBackList(other *List)\n```\n\nPushBackList inserts a copy of another list at the back of list l. The lists l and other may be the same. They must not be nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.PushFront",
                    "documentation": {
                      "identifier": "List.PushFront",
                      "newPage": false,
                      "searchKey": "list.List.PushFront",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) PushFront(v interface{}) *Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) PushFront(v interface{}) *Element\n```\n\nPushFront inserts a new element e with value v at the front of list l and returns e. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.PushFrontList",
                    "documentation": {
                      "identifier": "List.PushFrontList",
                      "newPage": false,
                      "searchKey": "list.List.PushFrontList",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) PushFrontList(other *List)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) PushFrontList(other *List)\n```\n\nPushFrontList inserts a copy of another list at the front of list l. The lists l and other may be the same. They must not be nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.Remove",
                    "documentation": {
                      "identifier": "List.Remove",
                      "newPage": false,
                      "searchKey": "list.List.Remove",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) Remove(e *Element) interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) Remove(e *Element) interface{}\n```\n\nRemove removes e from l if e is an element of list l. It returns the element value e.Value. The element must not be nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.insert",
                    "documentation": {
                      "identifier": "List.insert",
                      "newPage": false,
                      "searchKey": "list.List.insert",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) insert(e, at *Element) *Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) insert(e, at *Element) *Element\n```\n\ninsert inserts e after at, increments l.len, and returns e. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.insertValue",
                    "documentation": {
                      "identifier": "List.insertValue",
                      "newPage": false,
                      "searchKey": "list.List.insertValue",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) insertValue(v interface{}, at *Element) *Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) insertValue(v interface{}, at *Element) *Element\n```\n\ninsertValue is a convenience wrapper for insert(&Element{Value: v}, at). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.lazyInit",
                    "documentation": {
                      "identifier": "List.lazyInit",
                      "newPage": false,
                      "searchKey": "list.List.lazyInit",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) lazyInit()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) lazyInit()\n```\n\nlazyInit lazily initializes a zero List value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.move",
                    "documentation": {
                      "identifier": "List.move",
                      "newPage": false,
                      "searchKey": "list.List.move",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) move(e, at *Element) *Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) move(e, at *Element) *Element\n```\n\nmove moves e to next to at and returns e. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/container/list#List.remove",
                    "documentation": {
                      "identifier": "List.remove",
                      "newPage": false,
                      "searchKey": "list.List.remove",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *List) remove(e *Element) *Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *List) remove(e *Element) *Element\n```\n\nremove removes e from its list, decrements l.len, and returns e. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/container/list#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/container/list#TestExtending",
              "documentation": {
                "identifier": "TestExtending",
                "newPage": false,
                "searchKey": "list.TestExtending",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExtending(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExtending(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/list#TestInsertAfterUnknownMark",
              "documentation": {
                "identifier": "TestInsertAfterUnknownMark",
                "newPage": false,
                "searchKey": "list.TestInsertAfterUnknownMark",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInsertAfterUnknownMark(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInsertAfterUnknownMark(t *testing.T)\n```\n\nTest that a list l is not modified when calling InsertAfter with a mark that is not an element of l. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/list#TestInsertBeforeUnknownMark",
              "documentation": {
                "identifier": "TestInsertBeforeUnknownMark",
                "newPage": false,
                "searchKey": "list.TestInsertBeforeUnknownMark",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInsertBeforeUnknownMark(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInsertBeforeUnknownMark(t *testing.T)\n```\n\nTest that a list l is not modified when calling InsertBefore with a mark that is not an element of l. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/list#TestIssue4103",
              "documentation": {
                "identifier": "TestIssue4103",
                "newPage": false,
                "searchKey": "list.TestIssue4103",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue4103(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue4103(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/list#TestIssue6349",
              "documentation": {
                "identifier": "TestIssue6349",
                "newPage": false,
                "searchKey": "list.TestIssue6349",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue6349(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue6349(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/list#TestList",
              "documentation": {
                "identifier": "TestList",
                "newPage": false,
                "searchKey": "list.TestList",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestList(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestList(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/list#TestMove",
              "documentation": {
                "identifier": "TestMove",
                "newPage": false,
                "searchKey": "list.TestMove",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMove(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMove(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/list#TestMoveUnknownMark",
              "documentation": {
                "identifier": "TestMoveUnknownMark",
                "newPage": false,
                "searchKey": "list.TestMoveUnknownMark",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMoveUnknownMark(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMoveUnknownMark(t *testing.T)\n```\n\nTest that a list l is not modified when calling MoveAfter or MoveBefore with a mark that is not an element of l. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/list#TestRemove",
              "documentation": {
                "identifier": "TestRemove",
                "newPage": false,
                "searchKey": "list.TestRemove",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRemove(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRemove(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/list#TestZeroList",
              "documentation": {
                "identifier": "TestZeroList",
                "newPage": false,
                "searchKey": "list.TestZeroList",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestZeroList(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestZeroList(t *testing.T)\n```\n\nTest PushFront, PushBack, PushFrontList, PushBackList with uninitialized List \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/list#checkList",
              "documentation": {
                "identifier": "checkList",
                "newPage": false,
                "searchKey": "list.checkList",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkList(t *testing.T, l *List, es []interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkList(t *testing.T, l *List, es []interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/list#checkListLen",
              "documentation": {
                "identifier": "checkListLen",
                "newPage": false,
                "searchKey": "list.checkListLen",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkListLen(t *testing.T, l *List, len int) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkListLen(t *testing.T, l *List, len int) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/container/list#checkListPointers",
              "documentation": {
                "identifier": "checkListPointers",
                "newPage": false,
                "searchKey": "list.checkListPointers",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkListPointers(t *testing.T, l *List, es []*Element)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkListPointers(t *testing.T, l *List, es []*Element)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
