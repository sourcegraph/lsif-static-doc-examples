{
  "pathID": "/runtime/cgo",
  "documentation": {
    "identifier": "cgo",
    "newPage": true,
    "searchKey": "runtime/cgo",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package cgo"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package cgo contains runtime support for code generated by the cgo tool.  See the documentation for the cgo command for details on using cgo. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/runtime/cgo#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/runtime/cgo#handleIdx",
              "documentation": {
                "identifier": "handleIdx",
                "newPage": false,
                "searchKey": "cgo.handleIdx",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var handleIdx"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar handleIdx uintptr // atomic\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#handles",
              "documentation": {
                "identifier": "handles",
                "newPage": false,
                "searchKey": "cgo.handles",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var handles"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar handles = sync.Map{} // map[Handle]interface{}\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#x_cgo_callers",
              "documentation": {
                "identifier": "x_cgo_callers",
                "newPage": false,
                "searchKey": "cgo.x_cgo_callers",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var x_cgo_callers"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar x_cgo_callers byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#x_cgo_init",
              "documentation": {
                "identifier": "x_cgo_init",
                "newPage": false,
                "searchKey": "cgo.x_cgo_init",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var x_cgo_init"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar x_cgo_init byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#x_cgo_notify_runtime_init_done",
              "documentation": {
                "identifier": "x_cgo_notify_runtime_init_done",
                "newPage": false,
                "searchKey": "cgo.x_cgo_notify_runtime_init_done",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var x_cgo_notify_runtime_init_done"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar x_cgo_notify_runtime_init_done byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#x_cgo_set_context_function",
              "documentation": {
                "identifier": "x_cgo_set_context_function",
                "newPage": false,
                "searchKey": "cgo.x_cgo_set_context_function",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var x_cgo_set_context_function"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar x_cgo_set_context_function byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#x_cgo_setenv",
              "documentation": {
                "identifier": "x_cgo_setenv",
                "newPage": false,
                "searchKey": "cgo.x_cgo_setenv",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var x_cgo_setenv"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar x_cgo_setenv byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#x_cgo_sys_thread_create",
              "documentation": {
                "identifier": "x_cgo_sys_thread_create",
                "newPage": false,
                "searchKey": "cgo.x_cgo_sys_thread_create",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var x_cgo_sys_thread_create"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar x_cgo_sys_thread_create byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#x_cgo_thread_start",
              "documentation": {
                "identifier": "x_cgo_thread_start",
                "newPage": false,
                "searchKey": "cgo.x_cgo_thread_start",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var x_cgo_thread_start"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar x_cgo_thread_start byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#x_cgo_unsetenv",
              "documentation": {
                "identifier": "x_cgo_unsetenv",
                "newPage": false,
                "searchKey": "cgo.x_cgo_unsetenv",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var x_cgo_unsetenv"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar x_cgo_unsetenv byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#_cgo_callers",
              "documentation": {
                "identifier": "_cgo_callers",
                "newPage": false,
                "searchKey": "cgo._cgo_callers",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var _cgo_callers"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _cgo_callers = &x_cgo_callers\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#_cgo_init",
              "documentation": {
                "identifier": "_cgo_init",
                "newPage": false,
                "searchKey": "cgo._cgo_init",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var _cgo_init"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _cgo_init = &x_cgo_init\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#_cgo_notify_runtime_init_done",
              "documentation": {
                "identifier": "_cgo_notify_runtime_init_done",
                "newPage": false,
                "searchKey": "cgo._cgo_notify_runtime_init_done",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var _cgo_notify_runtime_init_done"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _cgo_notify_runtime_init_done = &x_cgo_notify_runtime_init_done\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#_cgo_set_context_function",
              "documentation": {
                "identifier": "_cgo_set_context_function",
                "newPage": false,
                "searchKey": "cgo._cgo_set_context_function",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var _cgo_set_context_function"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _cgo_set_context_function = &x_cgo_set_context_function\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#_cgo_setenv",
              "documentation": {
                "identifier": "_cgo_setenv",
                "newPage": false,
                "searchKey": "cgo._cgo_setenv",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var _cgo_setenv"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _cgo_setenv = &x_cgo_setenv\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#_cgo_sys_thread_create",
              "documentation": {
                "identifier": "_cgo_sys_thread_create",
                "newPage": false,
                "searchKey": "cgo._cgo_sys_thread_create",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var _cgo_sys_thread_create"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _cgo_sys_thread_create = &x_cgo_sys_thread_create\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#_cgo_thread_start",
              "documentation": {
                "identifier": "_cgo_thread_start",
                "newPage": false,
                "searchKey": "cgo._cgo_thread_start",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var _cgo_thread_start"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _cgo_thread_start = &x_cgo_thread_start\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#_cgo_unsetenv",
              "documentation": {
                "identifier": "_cgo_unsetenv",
                "newPage": false,
                "searchKey": "cgo._cgo_unsetenv",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var _cgo_unsetenv"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _cgo_unsetenv = &x_cgo_unsetenv\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#_cgo_yield",
              "documentation": {
                "identifier": "_cgo_yield",
                "newPage": false,
                "searchKey": "cgo._cgo_yield",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var _cgo_yield"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _cgo_yield unsafe.Pointer\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#_iscgo",
              "documentation": {
                "identifier": "_iscgo",
                "newPage": false,
                "searchKey": "cgo._iscgo",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var _iscgo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _iscgo bool = true\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/runtime/cgo#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/runtime/cgo#Handle",
              "documentation": {
                "identifier": "Handle",
                "newPage": false,
                "searchKey": "cgo.Handle",
                "tags": [
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Handle uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Handle uintptr\n```\n\nHandle provides a way to pass values that contain Go pointers (pointers to memory allocated by Go) between Go and C without breaking the cgo pointer passing rules. A Handle is an integer value that can represent any Go value. A Handle can be passed through C and back to Go, and Go code can use the Handle to retrieve the original Go value. \n\nThe underlying type of Handle is guaranteed to fit in an integer type that is large enough to hold the bit pattern of any pointer. The zero value of a Handle is not valid, and thus is safe to use as a sentinel in C APIs. \n\nFor instance, on the Go side: \n\n```\npackage main\n\n/*\n#include <stdint.h> // for uintptr_t\n\nextern void MyGoPrint(uintptr_t handle);\nvoid myprint(uintptr_t handle);\n*/\nimport \"C\"\nimport \"runtime/cgo\"\n\n//export MyGoPrint\nfunc MyGoPrint(handle C.uintptr_t) {\n\th := cgo.Handle(handle)\n\tval := h.Value().(string)\n\tprintln(val)\n\th.Delete()\n}\n\nfunc main() {\n\tval := \"hello Go\"\n\tC.myprint(C.uintptr_t(cgo.NewHandle(val)))\n\t// Output: hello Go\n}\n\n```\nand on the C side: \n\n```\n#include <stdint.h> // for uintptr_t\n\n// A Go function\nextern void MyGoPrint(uintptr_t handle);\n\n// A C function\nvoid myprint(uintptr_t handle) {\n    MyGoPrint(handle);\n}\n\n```\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime/cgo#NewHandle",
                    "documentation": {
                      "identifier": "NewHandle",
                      "newPage": false,
                      "searchKey": "cgo.NewHandle",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewHandle(v interface{}) Handle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewHandle(v interface{}) Handle\n```\n\nNewHandle returns a handle for a given value. \n\nThe handle is valid until the program calls Delete on it. The handle uses resources, and this package assumes that C code may hold on to the handle, so a program must explicitly call Delete when the handle is no longer needed. \n\nThe intended use is to pass the returned handle to C code, which passes it back to Go, which calls Value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/cgo#Handle.Delete",
                    "documentation": {
                      "identifier": "Handle.Delete",
                      "newPage": false,
                      "searchKey": "cgo.Handle.Delete",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h Handle) Delete()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h Handle) Delete()\n```\n\nDelete invalidates a handle. This method should only be called once the program no longer needs to pass the handle to C and the C code no longer has a copy of the handle value. \n\nThe method panics if the handle is invalid. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/cgo#Handle.Value",
                    "documentation": {
                      "identifier": "Handle.Value",
                      "newPage": false,
                      "searchKey": "cgo.Handle.Value",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h Handle) Value() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h Handle) Value() interface{}\n```\n\nValue returns the associated Go value for a valid handle. \n\nThe method panics if the handle is invalid. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/runtime/cgo#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/runtime/cgo#BenchmarkHandle",
              "documentation": {
                "identifier": "BenchmarkHandle",
                "newPage": false,
                "searchKey": "cgo.BenchmarkHandle",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkHandle(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkHandle(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#TestHandle",
              "documentation": {
                "identifier": "TestHandle",
                "newPage": false,
                "searchKey": "cgo.TestHandle",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHandle(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHandle(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#TestInvalidHandle",
              "documentation": {
                "identifier": "TestInvalidHandle",
                "newPage": false,
                "searchKey": "cgo.TestInvalidHandle",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInvalidHandle(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInvalidHandle(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#_cgo_panic",
              "documentation": {
                "identifier": "_cgo_panic",
                "newPage": false,
                "searchKey": "cgo._cgo_panic",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func _cgo_panic(a *struct{ cstr *byte })"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc _cgo_panic(a *struct{ cstr *byte })\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/cgo#_runtime_cgo_panic_internal",
              "documentation": {
                "identifier": "_runtime_cgo_panic_internal",
                "newPage": false,
                "searchKey": "cgo._runtime_cgo_panic_internal",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func _runtime_cgo_panic_internal(p *byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc _runtime_cgo_panic_internal(p *byte)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
