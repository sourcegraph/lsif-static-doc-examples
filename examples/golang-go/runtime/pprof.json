{
  "pathID": "/runtime/pprof",
  "documentation": {
    "identifier": "pprof",
    "newPage": true,
    "searchKey": "runtime/pprof",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package pprof"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package pprof writes runtime profiling data in the format expected by the pprof visualization tool. \n\n### hdr-Profiling_a_Go_programProfiling a Go program\nThe first step to profiling a Go program is to enable profiling. Support for profiling benchmarks built with the standard testing package is built into go test. For example, the following command runs benchmarks in the current directory and writes the CPU and memory profiles to cpu.prof and mem.prof: \n\n```\ngo test -cpuprofile cpu.prof -memprofile mem.prof -bench .\n\n```\nTo add equivalent profiling support to a standalone program, add code like the following to your main function: \n\n```\nvar cpuprofile = flag.String(\"cpuprofile\", \"\", \"write cpu profile to `file`\")\nvar memprofile = flag.String(\"memprofile\", \"\", \"write memory profile to `file`\")\n\nfunc main() {\n    flag.Parse()\n    if *cpuprofile != \"\" {\n        f, err := os.Create(*cpuprofile)\n        if err != nil {\n            log.Fatal(\"could not create CPU profile: \", err)\n        }\n        defer f.Close() // error handling omitted for example\n        if err := pprof.StartCPUProfile(f); err != nil {\n            log.Fatal(\"could not start CPU profile: \", err)\n        }\n        defer pprof.StopCPUProfile()\n    }\n\n    // ... rest of the program ...\n\n    if *memprofile != \"\" {\n        f, err := os.Create(*memprofile)\n        if err != nil {\n            log.Fatal(\"could not create memory profile: \", err)\n        }\n        defer f.Close() // error handling omitted for example\n        runtime.GC() // get up-to-date statistics\n        if err := pprof.WriteHeapProfile(f); err != nil {\n            log.Fatal(\"could not write memory profile: \", err)\n        }\n    }\n}\n\n```\nThere is also a standard HTTP interface to profiling data. Adding the following line will install handlers under the /debug/pprof/ URL to download live profiles: \n\n```\nimport _ \"net/http/pprof\"\n\n```\nSee the net/http/pprof package for more details. \n\nProfiles can then be visualized with the pprof tool: \n\n```\ngo tool pprof cpu.prof\n\n```\nThere are many commands available from the pprof command line. Commonly used commands include \"top\", which prints a summary of the top program hot-spots, and \"web\", which opens an interactive graph of hot-spots and their call graphs. Use \"help\" for information on all pprof commands. \n\nFor more information about pprof, see [https://github.com/google/pprof/blob/master/doc/README.md](https://github.com/google/pprof/blob/master/doc/README.md). \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/runtime/pprof#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/runtime/pprof#lookupTried",
              "documentation": {
                "identifier": "lookupTried",
                "newPage": false,
                "searchKey": "pprof.lookupTried",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lookupTried"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lookupTried symbolizeFlag = 1 << iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#lookupFailed",
              "documentation": {
                "identifier": "lookupFailed",
                "newPage": false,
                "searchKey": "pprof.lookupFailed",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lookupFailed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lookupFailed symbolizeFlag = 1 << iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagProfile_SampleType",
              "documentation": {
                "identifier": "tagProfile_SampleType",
                "newPage": false,
                "searchKey": "pprof.tagProfile_SampleType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagProfile_SampleType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagProfile_SampleType = 1 // repeated ValueType\n\n```\n\nmessage Profile \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagProfile_Sample",
              "documentation": {
                "identifier": "tagProfile_Sample",
                "newPage": false,
                "searchKey": "pprof.tagProfile_Sample",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagProfile_Sample"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagProfile_Sample = 2 // repeated Sample\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagProfile_Mapping",
              "documentation": {
                "identifier": "tagProfile_Mapping",
                "newPage": false,
                "searchKey": "pprof.tagProfile_Mapping",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagProfile_Mapping"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagProfile_Mapping = 3 // repeated Mapping\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagProfile_Location",
              "documentation": {
                "identifier": "tagProfile_Location",
                "newPage": false,
                "searchKey": "pprof.tagProfile_Location",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagProfile_Location"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagProfile_Location = 4 // repeated Location\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagProfile_Function",
              "documentation": {
                "identifier": "tagProfile_Function",
                "newPage": false,
                "searchKey": "pprof.tagProfile_Function",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagProfile_Function"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagProfile_Function = 5 // repeated Function\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagProfile_StringTable",
              "documentation": {
                "identifier": "tagProfile_StringTable",
                "newPage": false,
                "searchKey": "pprof.tagProfile_StringTable",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagProfile_StringTable"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagProfile_StringTable = 6 // repeated string\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagProfile_DropFrames",
              "documentation": {
                "identifier": "tagProfile_DropFrames",
                "newPage": false,
                "searchKey": "pprof.tagProfile_DropFrames",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagProfile_DropFrames"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagProfile_DropFrames = 7 // int64 (string table index)\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagProfile_KeepFrames",
              "documentation": {
                "identifier": "tagProfile_KeepFrames",
                "newPage": false,
                "searchKey": "pprof.tagProfile_KeepFrames",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagProfile_KeepFrames"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagProfile_KeepFrames = 8 // int64 (string table index)\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagProfile_TimeNanos",
              "documentation": {
                "identifier": "tagProfile_TimeNanos",
                "newPage": false,
                "searchKey": "pprof.tagProfile_TimeNanos",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagProfile_TimeNanos"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagProfile_TimeNanos = 9 // int64\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagProfile_DurationNanos",
              "documentation": {
                "identifier": "tagProfile_DurationNanos",
                "newPage": false,
                "searchKey": "pprof.tagProfile_DurationNanos",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagProfile_DurationNanos"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagProfile_DurationNanos = 10 // int64\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagProfile_PeriodType",
              "documentation": {
                "identifier": "tagProfile_PeriodType",
                "newPage": false,
                "searchKey": "pprof.tagProfile_PeriodType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagProfile_PeriodType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagProfile_PeriodType = 11 // ValueType (really optional string???)\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagProfile_Period",
              "documentation": {
                "identifier": "tagProfile_Period",
                "newPage": false,
                "searchKey": "pprof.tagProfile_Period",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagProfile_Period"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagProfile_Period = 12 // int64\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagProfile_Comment",
              "documentation": {
                "identifier": "tagProfile_Comment",
                "newPage": false,
                "searchKey": "pprof.tagProfile_Comment",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagProfile_Comment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagProfile_Comment = 13 // repeated int64\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagProfile_DefaultSampleType",
              "documentation": {
                "identifier": "tagProfile_DefaultSampleType",
                "newPage": false,
                "searchKey": "pprof.tagProfile_DefaultSampleType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagProfile_DefaultSampleType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagProfile_DefaultSampleType = 14 // int64\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagValueType_Type",
              "documentation": {
                "identifier": "tagValueType_Type",
                "newPage": false,
                "searchKey": "pprof.tagValueType_Type",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagValueType_Type"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagValueType_Type = 1 // int64 (string table index)\n\n```\n\nmessage ValueType \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagValueType_Unit",
              "documentation": {
                "identifier": "tagValueType_Unit",
                "newPage": false,
                "searchKey": "pprof.tagValueType_Unit",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagValueType_Unit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagValueType_Unit = 2 // int64 (string table index)\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagSample_Location",
              "documentation": {
                "identifier": "tagSample_Location",
                "newPage": false,
                "searchKey": "pprof.tagSample_Location",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagSample_Location"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagSample_Location = 1 // repeated uint64\n\n```\n\nmessage Sample \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagSample_Value",
              "documentation": {
                "identifier": "tagSample_Value",
                "newPage": false,
                "searchKey": "pprof.tagSample_Value",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagSample_Value"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagSample_Value = 2 // repeated int64\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagSample_Label",
              "documentation": {
                "identifier": "tagSample_Label",
                "newPage": false,
                "searchKey": "pprof.tagSample_Label",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagSample_Label"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagSample_Label = 3 // repeated Label\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagLabel_Key",
              "documentation": {
                "identifier": "tagLabel_Key",
                "newPage": false,
                "searchKey": "pprof.tagLabel_Key",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagLabel_Key"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagLabel_Key = 1 // int64 (string table index)\n\n```\n\nmessage Label \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagLabel_Str",
              "documentation": {
                "identifier": "tagLabel_Str",
                "newPage": false,
                "searchKey": "pprof.tagLabel_Str",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagLabel_Str"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagLabel_Str = 2 // int64 (string table index)\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagLabel_Num",
              "documentation": {
                "identifier": "tagLabel_Num",
                "newPage": false,
                "searchKey": "pprof.tagLabel_Num",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagLabel_Num"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagLabel_Num = 3 // int64\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagMapping_ID",
              "documentation": {
                "identifier": "tagMapping_ID",
                "newPage": false,
                "searchKey": "pprof.tagMapping_ID",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagMapping_ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagMapping_ID = 1 // uint64\n\n```\n\nmessage Mapping \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagMapping_Start",
              "documentation": {
                "identifier": "tagMapping_Start",
                "newPage": false,
                "searchKey": "pprof.tagMapping_Start",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagMapping_Start"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagMapping_Start = 2 // uint64\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagMapping_Limit",
              "documentation": {
                "identifier": "tagMapping_Limit",
                "newPage": false,
                "searchKey": "pprof.tagMapping_Limit",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagMapping_Limit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagMapping_Limit = 3 // uint64\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagMapping_Offset",
              "documentation": {
                "identifier": "tagMapping_Offset",
                "newPage": false,
                "searchKey": "pprof.tagMapping_Offset",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagMapping_Offset"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagMapping_Offset = 4 // uint64\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagMapping_Filename",
              "documentation": {
                "identifier": "tagMapping_Filename",
                "newPage": false,
                "searchKey": "pprof.tagMapping_Filename",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagMapping_Filename"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagMapping_Filename = 5 // int64 (string table index)\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagMapping_BuildID",
              "documentation": {
                "identifier": "tagMapping_BuildID",
                "newPage": false,
                "searchKey": "pprof.tagMapping_BuildID",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagMapping_BuildID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagMapping_BuildID = 6 // int64 (string table index)\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagMapping_HasFunctions",
              "documentation": {
                "identifier": "tagMapping_HasFunctions",
                "newPage": false,
                "searchKey": "pprof.tagMapping_HasFunctions",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagMapping_HasFunctions"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagMapping_HasFunctions = 7 // bool\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagMapping_HasFilenames",
              "documentation": {
                "identifier": "tagMapping_HasFilenames",
                "newPage": false,
                "searchKey": "pprof.tagMapping_HasFilenames",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagMapping_HasFilenames"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagMapping_HasFilenames = 8 // bool\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagMapping_HasLineNumbers",
              "documentation": {
                "identifier": "tagMapping_HasLineNumbers",
                "newPage": false,
                "searchKey": "pprof.tagMapping_HasLineNumbers",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagMapping_HasLineNumbers"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagMapping_HasLineNumbers = 9 // bool\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagMapping_HasInlineFrames",
              "documentation": {
                "identifier": "tagMapping_HasInlineFrames",
                "newPage": false,
                "searchKey": "pprof.tagMapping_HasInlineFrames",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagMapping_HasInlineFrames"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagMapping_HasInlineFrames = 10 // bool\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagLocation_ID",
              "documentation": {
                "identifier": "tagLocation_ID",
                "newPage": false,
                "searchKey": "pprof.tagLocation_ID",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagLocation_ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagLocation_ID = 1 // uint64\n\n```\n\nmessage Location \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagLocation_MappingID",
              "documentation": {
                "identifier": "tagLocation_MappingID",
                "newPage": false,
                "searchKey": "pprof.tagLocation_MappingID",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagLocation_MappingID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagLocation_MappingID = 2 // uint64\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagLocation_Address",
              "documentation": {
                "identifier": "tagLocation_Address",
                "newPage": false,
                "searchKey": "pprof.tagLocation_Address",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagLocation_Address"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagLocation_Address = 3 // uint64\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagLocation_Line",
              "documentation": {
                "identifier": "tagLocation_Line",
                "newPage": false,
                "searchKey": "pprof.tagLocation_Line",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagLocation_Line"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagLocation_Line = 4 // repeated Line\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagLine_FunctionID",
              "documentation": {
                "identifier": "tagLine_FunctionID",
                "newPage": false,
                "searchKey": "pprof.tagLine_FunctionID",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagLine_FunctionID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagLine_FunctionID = 1 // uint64\n\n```\n\nmessage Line \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagLine_Line",
              "documentation": {
                "identifier": "tagLine_Line",
                "newPage": false,
                "searchKey": "pprof.tagLine_Line",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagLine_Line"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagLine_Line = 2 // int64\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagFunction_ID",
              "documentation": {
                "identifier": "tagFunction_ID",
                "newPage": false,
                "searchKey": "pprof.tagFunction_ID",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagFunction_ID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagFunction_ID = 1 // uint64\n\n```\n\nmessage Function \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagFunction_Name",
              "documentation": {
                "identifier": "tagFunction_Name",
                "newPage": false,
                "searchKey": "pprof.tagFunction_Name",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagFunction_Name"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagFunction_Name = 2 // int64 (string table index)\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagFunction_SystemName",
              "documentation": {
                "identifier": "tagFunction_SystemName",
                "newPage": false,
                "searchKey": "pprof.tagFunction_SystemName",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagFunction_SystemName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagFunction_SystemName = 3 // int64 (string table index)\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagFunction_Filename",
              "documentation": {
                "identifier": "tagFunction_Filename",
                "newPage": false,
                "searchKey": "pprof.tagFunction_Filename",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagFunction_Filename"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagFunction_Filename = 4 // int64 (string table index)\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#tagFunction_StartLine",
              "documentation": {
                "identifier": "tagFunction_StartLine",
                "newPage": false,
                "searchKey": "pprof.tagFunction_StartLine",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tagFunction_StartLine"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tagFunction_StartLine = 5 // int64\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#blockDelay",
              "documentation": {
                "identifier": "blockDelay",
                "newPage": false,
                "searchKey": "pprof.blockDelay",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const blockDelay"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst blockDelay = 10 * time.Millisecond\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/runtime/pprof#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/runtime/pprof#errBadELF",
              "documentation": {
                "identifier": "errBadELF",
                "newPage": false,
                "searchKey": "pprof.errBadELF",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errBadELF"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errBadELF = errors.New(\"malformed ELF binary\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#errNoBuildID",
              "documentation": {
                "identifier": "errNoBuildID",
                "newPage": false,
                "searchKey": "pprof.errNoBuildID",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errNoBuildID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errNoBuildID = errors.New(\"no NT_GNU_BUILD_ID found in ELF binary\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#profiles",
              "documentation": {
                "identifier": "profiles",
                "newPage": false,
                "searchKey": "pprof.profiles",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var profiles"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar profiles struct {\n\tmu sync.Mutex\n\tm  map[string]*Profile\n}\n```\n\nprofiles records all registered profiles. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#goroutineProfile",
              "documentation": {
                "identifier": "goroutineProfile",
                "newPage": false,
                "searchKey": "pprof.goroutineProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var goroutineProfile"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar goroutineProfile = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#threadcreateProfile",
              "documentation": {
                "identifier": "threadcreateProfile",
                "newPage": false,
                "searchKey": "pprof.threadcreateProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var threadcreateProfile"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar threadcreateProfile = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#heapProfile",
              "documentation": {
                "identifier": "heapProfile",
                "newPage": false,
                "searchKey": "pprof.heapProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var heapProfile"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar heapProfile = &Profile{\n\tname:  \"heap\",\n\tcount: countHeap,\n\twrite: writeHeap,\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#allocsProfile",
              "documentation": {
                "identifier": "allocsProfile",
                "newPage": false,
                "searchKey": "pprof.allocsProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var allocsProfile"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar allocsProfile = &Profile{\n\tname:  \"allocs\",\n\tcount: countHeap,\n\twrite: writeAlloc,\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#blockProfile",
              "documentation": {
                "identifier": "blockProfile",
                "newPage": false,
                "searchKey": "pprof.blockProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var blockProfile"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar blockProfile = &Profile{\n\tname:  \"block\",\n\tcount: countBlock,\n\twrite: writeBlock,\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#mutexProfile",
              "documentation": {
                "identifier": "mutexProfile",
                "newPage": false,
                "searchKey": "pprof.mutexProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var mutexProfile"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mutexProfile = &Profile{\n\tname:  \"mutex\",\n\tcount: countMutex,\n\twrite: writeMutex,\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#cpu",
              "documentation": {
                "identifier": "cpu",
                "newPage": false,
                "searchKey": "pprof.cpu",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var cpu"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar cpu struct {\n\tsync.Mutex\n\tprofiling bool\n\tdone      chan bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#memSink",
              "documentation": {
                "identifier": "memSink",
                "newPage": false,
                "searchKey": "pprof.memSink",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var memSink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar memSink interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#persistentMemSink",
              "documentation": {
                "identifier": "persistentMemSink",
                "newPage": false,
                "searchKey": "pprof.persistentMemSink",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var persistentMemSink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar persistentMemSink *Obj32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#memoryProfilerRun",
              "documentation": {
                "identifier": "memoryProfilerRun",
                "newPage": false,
                "searchKey": "pprof.memoryProfilerRun",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var memoryProfilerRun"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar memoryProfilerRun = 0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#salt1",
              "documentation": {
                "identifier": "salt1",
                "newPage": false,
                "searchKey": "pprof.salt1",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var salt1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar salt1 = 0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#salt2",
              "documentation": {
                "identifier": "salt2",
                "newPage": false,
                "searchKey": "pprof.salt2",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var salt2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar salt2 = 0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#emptyCallStackTestRun",
              "documentation": {
                "identifier": "emptyCallStackTestRun",
                "newPage": false,
                "searchKey": "pprof.emptyCallStackTestRun",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var emptyCallStackTestRun"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar emptyCallStackTestRun int64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#profSelfMapsTests",
              "documentation": {
                "identifier": "profSelfMapsTests",
                "newPage": false,
                "searchKey": "pprof.profSelfMapsTests",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var profSelfMapsTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar profSelfMapsTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#profSelfMapsTestsWithDeleted",
              "documentation": {
                "identifier": "profSelfMapsTestsWithDeleted",
                "newPage": false,
                "searchKey": "pprof.profSelfMapsTestsWithDeleted",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var profSelfMapsTestsWithDeleted"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar profSelfMapsTestsWithDeleted = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/runtime/pprof#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/runtime/pprof#label",
              "documentation": {
                "identifier": "label",
                "newPage": false,
                "searchKey": "pprof.label",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type label struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype label struct {\n\tkey   string\n\tvalue string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#LabelSet",
              "documentation": {
                "identifier": "LabelSet",
                "newPage": false,
                "searchKey": "pprof.LabelSet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type LabelSet struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LabelSet struct {\n\tlist []label\n}\n```\n\nLabelSet is a set of labels. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime/pprof#Labels",
                    "documentation": {
                      "identifier": "Labels",
                      "newPage": false,
                      "searchKey": "pprof.Labels",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Labels(args ...string) LabelSet"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Labels(args ...string) LabelSet\n```\n\nLabels takes an even number of strings representing key-value pairs and makes a LabelSet containing them. A label overwrites a prior label with the same key. Currently only the CPU and goroutine profiles utilize any labels information. See [https://golang.org/issue/23458](https://golang.org/issue/23458) for details. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#labelContextKey",
              "documentation": {
                "identifier": "labelContextKey",
                "newPage": false,
                "searchKey": "pprof.labelContextKey",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type labelContextKey struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype labelContextKey struct{}\n```\n\nlabelContextKey is the type of contextKeys used for profiler labels. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#labelMap",
              "documentation": {
                "identifier": "labelMap",
                "newPage": false,
                "searchKey": "pprof.labelMap",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type labelMap map[string]string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype labelMap map[string]string\n```\n\nlabelMap is the representation of the label set held in the context type. This is an initial implementation, but it will be replaced with something that admits incremental immutable modification more efficiently. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime/pprof#labelValue",
                    "documentation": {
                      "identifier": "labelValue",
                      "newPage": false,
                      "searchKey": "pprof.labelValue",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func labelValue(ctx context.Context) labelMap"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc labelValue(ctx context.Context) labelMap\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#labelMap.String",
                    "documentation": {
                      "identifier": "labelMap.String",
                      "newPage": false,
                      "searchKey": "pprof.labelMap.String",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *labelMap) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *labelMap) String() string\n```\n\nString statisfies Stringer and returns key, value pairs in a consistent order. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#profMap",
              "documentation": {
                "identifier": "profMap",
                "newPage": false,
                "searchKey": "pprof.profMap",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type profMap struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype profMap struct {\n\thash    map[uintptr]*profMapEntry\n\tall     *profMapEntry\n\tlast    *profMapEntry\n\tfree    []profMapEntry\n\tfreeStk []uintptr\n}\n```\n\nA profMap is a map from (stack, tag) to mapEntry. It grows without bound, but that's assumed to be OK. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime/pprof#profMap.lookup",
                    "documentation": {
                      "identifier": "profMap.lookup",
                      "newPage": false,
                      "searchKey": "pprof.profMap.lookup",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *profMap) lookup(stk []uint64, tag unsafe.Pointer) *profMapEntry"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *profMap) lookup(stk []uint64, tag unsafe.Pointer) *profMapEntry\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#profMapEntry",
              "documentation": {
                "identifier": "profMapEntry",
                "newPage": false,
                "searchKey": "pprof.profMapEntry",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type profMapEntry struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype profMapEntry struct {\n\tnextHash *profMapEntry // next in hash list\n\tnextAll  *profMapEntry // next in list of all entries\n\tstk      []uintptr\n\ttag      unsafe.Pointer\n\tcount    int64\n}\n```\n\nA profMapEntry is a single entry in the profMap. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#Profile",
              "documentation": {
                "identifier": "Profile",
                "newPage": false,
                "searchKey": "pprof.Profile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Profile struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Profile struct {\n\tname  string\n\tmu    sync.Mutex\n\tm     map[interface{}][]uintptr\n\tcount func() int\n\twrite func(io.Writer, int) error\n}\n```\n\nA Profile is a collection of stack traces showing the call sequences that led to instances of a particular event, such as allocation. Packages can create and maintain their own profiles; the most common use is for tracking resources that must be explicitly closed, such as files or network connections. \n\nA Profile's methods can be called from multiple goroutines simultaneously. \n\nEach Profile has a unique name. A few profiles are predefined: \n\n```\ngoroutine    - stack traces of all current goroutines\nheap         - a sampling of memory allocations of live objects\nallocs       - a sampling of all past memory allocations\nthreadcreate - stack traces that led to the creation of new OS threads\nblock        - stack traces that led to blocking on synchronization primitives\nmutex        - stack traces of holders of contended mutexes\n\n```\nThese predefined profiles maintain themselves and panic on an explicit Add or Remove method call. \n\nThe heap profile reports statistics as of the most recently completed garbage collection; it elides more recent allocation to avoid skewing the profile away from live data and toward garbage. If there has been no garbage collection at all, the heap profile reports all known allocations. This exception helps mainly in programs running without garbage collection enabled, usually for debugging purposes. \n\nThe heap profile tracks both the allocation sites for all live objects in the application memory and for all objects allocated since the program start. Pprof's -inuse_space, -inuse_objects, -alloc_space, and -alloc_objects flags select which to display, defaulting to -inuse_space (live objects, scaled by size). \n\nThe allocs profile is the same as the heap profile but changes the default pprof display to -alloc_space, the total number of bytes allocated since the program began (including garbage-collected bytes). \n\nThe CPU profile is not available as a Profile. It has a special API, the StartCPUProfile and StopCPUProfile functions, because it streams output to a writer during profiling. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime/pprof#NewProfile",
                    "documentation": {
                      "identifier": "NewProfile",
                      "newPage": false,
                      "searchKey": "pprof.NewProfile",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewProfile(name string) *Profile"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewProfile(name string) *Profile\n```\n\nNewProfile creates a new profile with the given name. If a profile with that name already exists, NewProfile panics. The convention is to use a 'import/path.' prefix to create separate name spaces for each package. For compatibility with various tools that read pprof data, profile names should not contain spaces. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#Lookup",
                    "documentation": {
                      "identifier": "Lookup",
                      "newPage": false,
                      "searchKey": "pprof.Lookup",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Lookup(name string) *Profile"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Lookup(name string) *Profile\n```\n\nLookup returns the profile with the given name, or nil if no such profile exists. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#Profile.Name",
                    "documentation": {
                      "identifier": "Profile.Name",
                      "newPage": false,
                      "searchKey": "pprof.Profile.Name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) Name() string\n```\n\nName returns this profile's name, which can be passed to Lookup to reobtain the profile. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#Profile.Count",
                    "documentation": {
                      "identifier": "Profile.Count",
                      "newPage": false,
                      "searchKey": "pprof.Profile.Count",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) Count() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) Count() int\n```\n\nCount returns the number of execution stacks currently in the profile. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#Profile.Add",
                    "documentation": {
                      "identifier": "Profile.Add",
                      "newPage": false,
                      "searchKey": "pprof.Profile.Add",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) Add(value interface{}, skip int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) Add(value interface{}, skip int)\n```\n\nAdd adds the current execution stack to the profile, associated with value. Add stores value in an internal map, so value must be suitable for use as a map key and will not be garbage collected until the corresponding call to Remove. Add panics if the profile already contains a stack for value. \n\nThe skip parameter has the same meaning as runtime.Caller's skip and controls where the stack trace begins. Passing skip=0 begins the trace in the function calling Add. For example, given this execution stack: \n\n```\nAdd\ncalled from rpc.NewClient\ncalled from mypkg.Run\ncalled from main.main\n\n```\nPassing skip=0 begins the stack trace at the call to Add inside rpc.NewClient. Passing skip=1 begins the stack trace at the call to NewClient inside mypkg.Run. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#Profile.Remove",
                    "documentation": {
                      "identifier": "Profile.Remove",
                      "newPage": false,
                      "searchKey": "pprof.Profile.Remove",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) Remove(value interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) Remove(value interface{})\n```\n\nRemove removes the execution stack associated with value from the profile. It is a no-op if the value is not in the profile. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#Profile.WriteTo",
                    "documentation": {
                      "identifier": "Profile.WriteTo",
                      "newPage": false,
                      "searchKey": "pprof.Profile.WriteTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) WriteTo(w io.Writer, debug int) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) WriteTo(w io.Writer, debug int) error\n```\n\nWriteTo writes a pprof-formatted snapshot of the profile to w. If a write to w returns an error, WriteTo returns that error. Otherwise, WriteTo returns nil. \n\nThe debug parameter enables additional output. Passing debug=0 writes the gzip-compressed protocol buffer described in [https://github.com/google/pprof/tree/master/proto#overview](https://github.com/google/pprof/tree/master/proto#overview). Passing debug=1 writes the legacy text format with comments translating addresses to function names and line numbers, so that a programmer can read the profile without tools. \n\nThe predefined profiles may assign meaning to other debug values; for example, when printing the \"goroutine\" profile, debug=2 means to print the goroutine stacks in the same form that a Go program uses when dying due to an unrecovered panic. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#stackProfile",
              "documentation": {
                "identifier": "stackProfile",
                "newPage": false,
                "searchKey": "pprof.stackProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type stackProfile [][]uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype stackProfile [][]uintptr\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime/pprof#stackProfile.Len",
                    "documentation": {
                      "identifier": "stackProfile.Len",
                      "newPage": false,
                      "searchKey": "pprof.stackProfile.Len",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x stackProfile) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x stackProfile) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#stackProfile.Stack",
                    "documentation": {
                      "identifier": "stackProfile.Stack",
                      "newPage": false,
                      "searchKey": "pprof.stackProfile.Stack",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x stackProfile) Stack(i int) []uintptr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x stackProfile) Stack(i int) []uintptr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#stackProfile.Label",
                    "documentation": {
                      "identifier": "stackProfile.Label",
                      "newPage": false,
                      "searchKey": "pprof.stackProfile.Label",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x stackProfile) Label(i int) *labelMap"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x stackProfile) Label(i int) *labelMap\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#countProfile",
              "documentation": {
                "identifier": "countProfile",
                "newPage": false,
                "searchKey": "pprof.countProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type countProfile interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype countProfile interface {\n\tLen() int\n\tStack(i int) []uintptr\n\tLabel(i int) *labelMap\n}\n```\n\nA countProfile is a set of stack traces to be printed as counts grouped by stack trace. There are multiple implementations: all that matters is that we can find out how many traces there are and obtain each trace in turn. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#keysByCount",
              "documentation": {
                "identifier": "keysByCount",
                "newPage": false,
                "searchKey": "pprof.keysByCount",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type keysByCount struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype keysByCount struct {\n\tkeys  []string\n\tcount map[string]int\n}\n```\n\nkeysByCount sorts keys with higher counts first, breaking ties by key string order. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime/pprof#keysByCount.Len",
                    "documentation": {
                      "identifier": "keysByCount.Len",
                      "newPage": false,
                      "searchKey": "pprof.keysByCount.Len",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *keysByCount) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *keysByCount) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#keysByCount.Swap",
                    "documentation": {
                      "identifier": "keysByCount.Swap",
                      "newPage": false,
                      "searchKey": "pprof.keysByCount.Swap",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *keysByCount) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *keysByCount) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#keysByCount.Less",
                    "documentation": {
                      "identifier": "keysByCount.Less",
                      "newPage": false,
                      "searchKey": "pprof.keysByCount.Less",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *keysByCount) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *keysByCount) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#runtimeProfile",
              "documentation": {
                "identifier": "runtimeProfile",
                "newPage": false,
                "searchKey": "pprof.runtimeProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type runtimeProfile struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype runtimeProfile struct {\n\tstk    []runtime.StackRecord\n\tlabels []unsafe.Pointer\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime/pprof#runtimeProfile.Len",
                    "documentation": {
                      "identifier": "runtimeProfile.Len",
                      "newPage": false,
                      "searchKey": "pprof.runtimeProfile.Len",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *runtimeProfile) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *runtimeProfile) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#runtimeProfile.Stack",
                    "documentation": {
                      "identifier": "runtimeProfile.Stack",
                      "newPage": false,
                      "searchKey": "pprof.runtimeProfile.Stack",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *runtimeProfile) Stack(i int) []uintptr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *runtimeProfile) Stack(i int) []uintptr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#runtimeProfile.Label",
                    "documentation": {
                      "identifier": "runtimeProfile.Label",
                      "newPage": false,
                      "searchKey": "pprof.runtimeProfile.Label",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *runtimeProfile) Label(i int) *labelMap"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *runtimeProfile) Label(i int) *labelMap\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#profileBuilder",
              "documentation": {
                "identifier": "profileBuilder",
                "newPage": false,
                "searchKey": "pprof.profileBuilder",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type profileBuilder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype profileBuilder struct {\n\tstart      time.Time\n\tend        time.Time\n\thavePeriod bool\n\tperiod     int64\n\tm          profMap\n\n\t// encoding state\n\tw         io.Writer\n\tzw        *gzip.Writer\n\tpb        protobuf\n\tstrings   []string\n\tstringMap map[string]int\n\tlocs      map[uintptr]locInfo // list of locInfo starting with the given PC.\n\tfuncs     map[string]int      // Package path-qualified function name to Function.ID\n\tmem       []memMap\n\tdeck      pcDeck\n}\n```\n\nA profileBuilder writes a profile incrementally from a stream of profile samples delivered by the runtime. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime/pprof#newProfileBuilder",
                    "documentation": {
                      "identifier": "newProfileBuilder",
                      "newPage": false,
                      "searchKey": "pprof.newProfileBuilder",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newProfileBuilder(w io.Writer) *profileBuilder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newProfileBuilder(w io.Writer) *profileBuilder\n```\n\nnewProfileBuilder returns a new profileBuilder. CPU profiling data obtained from the runtime can be added by calling b.addCPUData, and then the eventual profile can be obtained by calling b.finish. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#profileBuilder.stringIndex",
                    "documentation": {
                      "identifier": "profileBuilder.stringIndex",
                      "newPage": false,
                      "searchKey": "pprof.profileBuilder.stringIndex",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *profileBuilder) stringIndex(s string) int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *profileBuilder) stringIndex(s string) int64\n```\n\nstringIndex adds s to the string table if not already present and returns the index of s in the string table. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#profileBuilder.flush",
                    "documentation": {
                      "identifier": "profileBuilder.flush",
                      "newPage": false,
                      "searchKey": "pprof.profileBuilder.flush",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *profileBuilder) flush()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *profileBuilder) flush()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#profileBuilder.pbValueType",
                    "documentation": {
                      "identifier": "profileBuilder.pbValueType",
                      "newPage": false,
                      "searchKey": "pprof.profileBuilder.pbValueType",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *profileBuilder) pbValueType(tag int, typ, unit string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *profileBuilder) pbValueType(tag int, typ, unit string)\n```\n\npbValueType encodes a ValueType message to b.pb. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#profileBuilder.pbSample",
                    "documentation": {
                      "identifier": "profileBuilder.pbSample",
                      "newPage": false,
                      "searchKey": "pprof.profileBuilder.pbSample",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *profileBuilder) pbSample(values []int64, locs []uint64, labels func())"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *profileBuilder) pbSample(values []int64, locs []uint64, labels func())\n```\n\npbSample encodes a Sample message to b.pb. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#profileBuilder.pbLabel",
                    "documentation": {
                      "identifier": "profileBuilder.pbLabel",
                      "newPage": false,
                      "searchKey": "pprof.profileBuilder.pbLabel",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *profileBuilder) pbLabel(tag int, key, str string, num int64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *profileBuilder) pbLabel(tag int, key, str string, num int64)\n```\n\npbLabel encodes a Label message to b.pb. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#profileBuilder.pbLine",
                    "documentation": {
                      "identifier": "profileBuilder.pbLine",
                      "newPage": false,
                      "searchKey": "pprof.profileBuilder.pbLine",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *profileBuilder) pbLine(tag int, funcID uint64, line int64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *profileBuilder) pbLine(tag int, funcID uint64, line int64)\n```\n\npbLine encodes a Line message to b.pb. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#profileBuilder.pbMapping",
                    "documentation": {
                      "identifier": "profileBuilder.pbMapping",
                      "newPage": false,
                      "searchKey": "pprof.profileBuilder.pbMapping",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *profileBuilder) pbMapping(tag int, id, base, limit, offset uint64, file, buildID string, hasFuncs bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *profileBuilder) pbMapping(tag int, id, base, limit, offset uint64, file, buildID string, hasFuncs bool)\n```\n\npbMapping encodes a Mapping message to b.pb. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#profileBuilder.addCPUData",
                    "documentation": {
                      "identifier": "profileBuilder.addCPUData",
                      "newPage": false,
                      "searchKey": "pprof.profileBuilder.addCPUData",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *profileBuilder) addCPUData(data []uint64, tags []unsafe.Pointer) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *profileBuilder) addCPUData(data []uint64, tags []unsafe.Pointer) error\n```\n\naddCPUData adds the CPU profiling data to the profile. The data must be a whole number of records, as delivered by the runtime. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#profileBuilder.build",
                    "documentation": {
                      "identifier": "profileBuilder.build",
                      "newPage": false,
                      "searchKey": "pprof.profileBuilder.build",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *profileBuilder) build()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *profileBuilder) build()\n```\n\nbuild completes and returns the constructed profile. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#profileBuilder.appendLocsForStack",
                    "documentation": {
                      "identifier": "profileBuilder.appendLocsForStack",
                      "newPage": false,
                      "searchKey": "pprof.profileBuilder.appendLocsForStack",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *profileBuilder) appendLocsForStack(locs []uint64, stk []uintptr) (newLocs []uint64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *profileBuilder) appendLocsForStack(locs []uint64, stk []uintptr) (newLocs []uint64)\n```\n\nappendLocsForStack appends the location IDs for the given stack trace to the given location ID slice, locs. The addresses in the stack are return PCs or 1 + the PC of an inline marker as the runtime traceback function returns. \n\nIt may emit to b.pb, so there must be no message encoding in progress. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#profileBuilder.emitLocation",
                    "documentation": {
                      "identifier": "profileBuilder.emitLocation",
                      "newPage": false,
                      "searchKey": "pprof.profileBuilder.emitLocation",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *profileBuilder) emitLocation() uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *profileBuilder) emitLocation() uint64\n```\n\nemitLocation emits the new location and function information recorded in the deck and returns the location ID encoded in the profile protobuf. It emits to b.pb, so there must be no message encoding in progress. It resets the deck. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#profileBuilder.readMapping",
                    "documentation": {
                      "identifier": "profileBuilder.readMapping",
                      "newPage": false,
                      "searchKey": "pprof.profileBuilder.readMapping",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *profileBuilder) readMapping()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *profileBuilder) readMapping()\n```\n\nreadMapping reads /proc/self/maps and writes mappings to b.pb. It saves the address ranges of the mappings in b.mem for use when emitting locations. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#profileBuilder.addMapping",
                    "documentation": {
                      "identifier": "profileBuilder.addMapping",
                      "newPage": false,
                      "searchKey": "pprof.profileBuilder.addMapping",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *profileBuilder) addMapping(lo, hi, offset uint64, file, buildID string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *profileBuilder) addMapping(lo, hi, offset uint64, file, buildID string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#profileBuilder.addMappingEntry",
                    "documentation": {
                      "identifier": "profileBuilder.addMappingEntry",
                      "newPage": false,
                      "searchKey": "pprof.profileBuilder.addMappingEntry",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *profileBuilder) addMappingEntry(lo, hi, offset uint64, file, buildID string, fake bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *profileBuilder) addMappingEntry(lo, hi, offset uint64, file, buildID string, fake bool)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#memMap",
              "documentation": {
                "identifier": "memMap",
                "newPage": false,
                "searchKey": "pprof.memMap",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type memMap struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype memMap struct {\n\t// initialized as reading mapping\n\tstart         uintptr\n\tend           uintptr\n\toffset        uint64\n\tfile, buildID string\n\n\tfuncs symbolizeFlag\n\tfake  bool // map entry was faked; /proc/self/maps wasn't available\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#symbolizeFlag",
              "documentation": {
                "identifier": "symbolizeFlag",
                "newPage": false,
                "searchKey": "pprof.symbolizeFlag",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type symbolizeFlag uint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype symbolizeFlag uint8\n```\n\nsymbolizeFlag keeps track of symbolization result. \n\n```\n0                  : no symbol lookup was performed\n1<<0 (lookupTried) : symbol lookup was performed\n1<<1 (lookupFailed): symbol lookup was performed but failed\n\n```\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime/pprof#allFrames",
                    "documentation": {
                      "identifier": "allFrames",
                      "newPage": false,
                      "searchKey": "pprof.allFrames",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func allFrames(addr uintptr) ([]runtime.Frame, symbolizeFlag)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc allFrames(addr uintptr) ([]runtime.Frame, symbolizeFlag)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#locInfo",
              "documentation": {
                "identifier": "locInfo",
                "newPage": false,
                "searchKey": "pprof.locInfo",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type locInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype locInfo struct {\n\t// location id assigned by the profileBuilder\n\tid uint64\n\n\t// sequence of PCs, including the fake PCs returned by the traceback\n\t// to represent inlined functions\n\t// https://github.com/golang/go/blob/d6f2f833c93a41ec1c68e49804b8387a06b131c5/src/runtime/traceback.go#L347-L368\n\tpcs []uintptr\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#pcDeck",
              "documentation": {
                "identifier": "pcDeck",
                "newPage": false,
                "searchKey": "pprof.pcDeck",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type pcDeck struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype pcDeck struct {\n\tpcs             []uintptr\n\tframes          []runtime.Frame\n\tsymbolizeResult symbolizeFlag\n}\n```\n\npcDeck is a helper to detect a sequence of inlined functions from a stack trace returned by the runtime. \n\nThe stack traces returned by runtime's trackback functions are fully expanded (at least for Go functions) and include the fake pcs representing inlined functions. The profile proto expects the inlined functions to be encoded in one Location message. [https://github.com/google/pprof/blob/5e965273ee43930341d897407202dd5e10e952cb/proto/profile.proto#L177-L184](https://github.com/google/pprof/blob/5e965273ee43930341d897407202dd5e10e952cb/proto/profile.proto#L177-L184) \n\nRuntime does not directly expose whether a frame is for an inlined function and looking up debug info is not ideal, so we use a heuristic to filter the fake pcs and restore the inlined and entry functions. Inlined functions have the following properties: \n\n```\nFrame's Func is nil (note: also true for non-Go functions), and\nFrame's Entry matches its entry function frame's Entry (note: could also be true for recursive calls and non-Go functions), and\nFrame's Name does not match its entry function frame's name (note: inlined functions cannot be directly recursive).\n\n```\nAs reading and processing the pcs in a stack trace one by one (from leaf to the root), we use pcDeck to temporarily hold the observed pcs and their expanded frames until we observe the entry function frame. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime/pprof#pcDeck.reset",
                    "documentation": {
                      "identifier": "pcDeck.reset",
                      "newPage": false,
                      "searchKey": "pprof.pcDeck.reset",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *pcDeck) reset()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *pcDeck) reset()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#pcDeck.tryAdd",
                    "documentation": {
                      "identifier": "pcDeck.tryAdd",
                      "newPage": false,
                      "searchKey": "pprof.pcDeck.tryAdd",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *pcDeck) tryAdd(pc uintptr, frames []runtime.Frame, symbolizeResult symbolizeFlag) (success bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *pcDeck) tryAdd(pc uintptr, frames []runtime.Frame, symbolizeResult symbolizeFlag) (success bool)\n```\n\ntryAdd tries to add the pc and Frames expanded from it (most likely one, since the stack trace is already fully expanded) and the symbolizeResult to the deck. If it fails the caller needs to flush the deck and retry. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#protobuf",
              "documentation": {
                "identifier": "protobuf",
                "newPage": false,
                "searchKey": "pprof.protobuf",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type protobuf struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype protobuf struct {\n\tdata []byte\n\ttmp  [16]byte\n\tnest int\n}\n```\n\nA protobuf is a simple protocol buffer encoder. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime/pprof#protobuf.varint",
                    "documentation": {
                      "identifier": "protobuf.varint",
                      "newPage": false,
                      "searchKey": "pprof.protobuf.varint",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *protobuf) varint(x uint64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *protobuf) varint(x uint64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#protobuf.length",
                    "documentation": {
                      "identifier": "protobuf.length",
                      "newPage": false,
                      "searchKey": "pprof.protobuf.length",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *protobuf) length(tag int, len int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *protobuf) length(tag int, len int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#protobuf.uint64",
                    "documentation": {
                      "identifier": "protobuf.uint64",
                      "newPage": false,
                      "searchKey": "pprof.protobuf.uint64",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *protobuf) uint64(tag int, x uint64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *protobuf) uint64(tag int, x uint64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#protobuf.uint64s",
                    "documentation": {
                      "identifier": "protobuf.uint64s",
                      "newPage": false,
                      "searchKey": "pprof.protobuf.uint64s",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *protobuf) uint64s(tag int, x []uint64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *protobuf) uint64s(tag int, x []uint64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#protobuf.uint64Opt",
                    "documentation": {
                      "identifier": "protobuf.uint64Opt",
                      "newPage": false,
                      "searchKey": "pprof.protobuf.uint64Opt",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *protobuf) uint64Opt(tag int, x uint64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *protobuf) uint64Opt(tag int, x uint64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#protobuf.int64",
                    "documentation": {
                      "identifier": "protobuf.int64",
                      "newPage": false,
                      "searchKey": "pprof.protobuf.int64",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *protobuf) int64(tag int, x int64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *protobuf) int64(tag int, x int64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#protobuf.int64Opt",
                    "documentation": {
                      "identifier": "protobuf.int64Opt",
                      "newPage": false,
                      "searchKey": "pprof.protobuf.int64Opt",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *protobuf) int64Opt(tag int, x int64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *protobuf) int64Opt(tag int, x int64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#protobuf.int64s",
                    "documentation": {
                      "identifier": "protobuf.int64s",
                      "newPage": false,
                      "searchKey": "pprof.protobuf.int64s",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *protobuf) int64s(tag int, x []int64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *protobuf) int64s(tag int, x []int64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#protobuf.string",
                    "documentation": {
                      "identifier": "protobuf.string",
                      "newPage": false,
                      "searchKey": "pprof.protobuf.string",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *protobuf) string(tag int, x string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *protobuf) string(tag int, x string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#protobuf.strings",
                    "documentation": {
                      "identifier": "protobuf.strings",
                      "newPage": false,
                      "searchKey": "pprof.protobuf.strings",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *protobuf) strings(tag int, x []string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *protobuf) strings(tag int, x []string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#protobuf.stringOpt",
                    "documentation": {
                      "identifier": "protobuf.stringOpt",
                      "newPage": false,
                      "searchKey": "pprof.protobuf.stringOpt",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *protobuf) stringOpt(tag int, x string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *protobuf) stringOpt(tag int, x string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#protobuf.bool",
                    "documentation": {
                      "identifier": "protobuf.bool",
                      "newPage": false,
                      "searchKey": "pprof.protobuf.bool",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *protobuf) bool(tag int, x bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *protobuf) bool(tag int, x bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#protobuf.boolOpt",
                    "documentation": {
                      "identifier": "protobuf.boolOpt",
                      "newPage": false,
                      "searchKey": "pprof.protobuf.boolOpt",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *protobuf) boolOpt(tag int, x bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *protobuf) boolOpt(tag int, x bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#protobuf.startMessage",
                    "documentation": {
                      "identifier": "protobuf.startMessage",
                      "newPage": false,
                      "searchKey": "pprof.protobuf.startMessage",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *protobuf) startMessage() msgOffset"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *protobuf) startMessage() msgOffset\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#protobuf.endMessage",
                    "documentation": {
                      "identifier": "protobuf.endMessage",
                      "newPage": false,
                      "searchKey": "pprof.protobuf.endMessage",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *protobuf) endMessage(tag int, start msgOffset)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *protobuf) endMessage(tag int, start msgOffset)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#msgOffset",
              "documentation": {
                "identifier": "msgOffset",
                "newPage": false,
                "searchKey": "pprof.msgOffset",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type msgOffset int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype msgOffset int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#labelSorter",
              "documentation": {
                "identifier": "labelSorter",
                "newPage": false,
                "searchKey": "pprof.labelSorter",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type labelSorter []pprof.label"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype labelSorter []label\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime/pprof#labelSorter.Len",
                    "documentation": {
                      "identifier": "labelSorter.Len",
                      "newPage": false,
                      "searchKey": "pprof.labelSorter.Len",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s labelSorter) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s labelSorter) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#labelSorter.Swap",
                    "documentation": {
                      "identifier": "labelSorter.Swap",
                      "newPage": false,
                      "searchKey": "pprof.labelSorter.Swap",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s labelSorter) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s labelSorter) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/pprof#labelSorter.Less",
                    "documentation": {
                      "identifier": "labelSorter.Less",
                      "newPage": false,
                      "searchKey": "pprof.labelSorter.Less",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s labelSorter) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s labelSorter) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#Obj32",
              "documentation": {
                "identifier": "Obj32",
                "newPage": false,
                "searchKey": "pprof.Obj32",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Obj32 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Obj32 struct {\n\tlink *Obj32\n\tpad  [32 - unsafe.Sizeof(uintptr(0))]byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#matchFunc",
              "documentation": {
                "identifier": "matchFunc",
                "newPage": false,
                "searchKey": "pprof.matchFunc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type matchFunc func(spec string, count uintptr, stk []*internal/profile.Location, labels map[string][]string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype matchFunc func(spec string, count uintptr, stk []*profile.Location, labels map[string][]string) bool\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/runtime/pprof#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/runtime/pprof#elfBuildID",
              "documentation": {
                "identifier": "elfBuildID",
                "newPage": false,
                "searchKey": "pprof.elfBuildID",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func elfBuildID(file string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc elfBuildID(file string) (string, error)\n```\n\nelfBuildID returns the GNU build ID of the named ELF binary, without introducing a dependency on debug/elf and its dependencies. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#WithLabels",
              "documentation": {
                "identifier": "WithLabels",
                "newPage": false,
                "searchKey": "pprof.WithLabels",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func WithLabels(ctx context.Context, labels LabelSet) context.Context"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc WithLabels(ctx context.Context, labels LabelSet) context.Context\n```\n\nWithLabels returns a new context.Context with the given labels added. A label overwrites a prior label with the same key. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#Label",
              "documentation": {
                "identifier": "Label",
                "newPage": false,
                "searchKey": "pprof.Label",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Label(ctx context.Context, key string) (string, bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Label(ctx context.Context, key string) (string, bool)\n```\n\nLabel returns the value of the label with the given key on ctx, and a boolean indicating whether that label exists. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#ForLabels",
              "documentation": {
                "identifier": "ForLabels",
                "newPage": false,
                "searchKey": "pprof.ForLabels",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ForLabels(ctx context.Context, f func(key, value string) bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ForLabels(ctx context.Context, f func(key, value string) bool)\n```\n\nForLabels invokes f with each label set on the context. The function f should return true to continue iteration or false to stop iteration early. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#lockProfiles",
              "documentation": {
                "identifier": "lockProfiles",
                "newPage": false,
                "searchKey": "pprof.lockProfiles",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func lockProfiles()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc lockProfiles()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#unlockProfiles",
              "documentation": {
                "identifier": "unlockProfiles",
                "newPage": false,
                "searchKey": "pprof.unlockProfiles",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func unlockProfiles()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unlockProfiles()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#Profiles",
              "documentation": {
                "identifier": "Profiles",
                "newPage": false,
                "searchKey": "pprof.Profiles",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Profiles() []*Profile"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Profiles() []*Profile\n```\n\nProfiles returns a slice of all the known profiles, sorted by name. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#printCountCycleProfile",
              "documentation": {
                "identifier": "printCountCycleProfile",
                "newPage": false,
                "searchKey": "pprof.printCountCycleProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func printCountCycleProfile(w io.Writer, countName, cycleName string, scaler func(int64, float64) (int64, float64), records []runtime.BlockProfileRecord) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc printCountCycleProfile(w io.Writer, countName, cycleName string, scaler func(int64, float64) (int64, float64), records []runtime.BlockProfileRecord) error\n```\n\nprintCountCycleProfile outputs block profile records (for block or mutex profiles) as the pprof-proto format output. Translations from cycle count to time duration are done because The proto expects count and time (nanoseconds) instead of count and the number of cycles for block, contention profiles. Possible 'scaler' functions are scaleBlockProfile and scaleMutexProfile. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#printCountProfile",
              "documentation": {
                "identifier": "printCountProfile",
                "newPage": false,
                "searchKey": "pprof.printCountProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func printCountProfile(w io.Writer, debug int, name string, p countProfile) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc printCountProfile(w io.Writer, debug int, name string, p countProfile) error\n```\n\nprintCountProfile prints a countProfile at the specified debug level. The profile will be in compressed proto format unless debug is nonzero. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#printStackRecord",
              "documentation": {
                "identifier": "printStackRecord",
                "newPage": false,
                "searchKey": "pprof.printStackRecord",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func printStackRecord(w io.Writer, stk []uintptr, allFrames bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc printStackRecord(w io.Writer, stk []uintptr, allFrames bool)\n```\n\nprintStackRecord prints the function + source line information for a single stack trace. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#WriteHeapProfile",
              "documentation": {
                "identifier": "WriteHeapProfile",
                "newPage": false,
                "searchKey": "pprof.WriteHeapProfile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func WriteHeapProfile(w io.Writer) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc WriteHeapProfile(w io.Writer) error\n```\n\nWriteHeapProfile is shorthand for Lookup(\"heap\").WriteTo(w, 0). It is preserved for backwards compatibility. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#countHeap",
              "documentation": {
                "identifier": "countHeap",
                "newPage": false,
                "searchKey": "pprof.countHeap",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func countHeap() int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc countHeap() int\n```\n\ncountHeap returns the number of records in the heap profile. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#writeHeap",
              "documentation": {
                "identifier": "writeHeap",
                "newPage": false,
                "searchKey": "pprof.writeHeap",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func writeHeap(w io.Writer, debug int) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc writeHeap(w io.Writer, debug int) error\n```\n\nwriteHeap writes the current runtime heap profile to w. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#writeAlloc",
              "documentation": {
                "identifier": "writeAlloc",
                "newPage": false,
                "searchKey": "pprof.writeAlloc",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func writeAlloc(w io.Writer, debug int) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc writeAlloc(w io.Writer, debug int) error\n```\n\nwriteAlloc writes the current runtime heap profile to w with the total allocation space as the default sample type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#writeHeapInternal",
              "documentation": {
                "identifier": "writeHeapInternal",
                "newPage": false,
                "searchKey": "pprof.writeHeapInternal",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func writeHeapInternal(w io.Writer, debug int, defaultSampleType string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc writeHeapInternal(w io.Writer, debug int, defaultSampleType string) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#countThreadCreate",
              "documentation": {
                "identifier": "countThreadCreate",
                "newPage": false,
                "searchKey": "pprof.countThreadCreate",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func countThreadCreate() int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc countThreadCreate() int\n```\n\ncountThreadCreate returns the size of the current ThreadCreateProfile. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#writeThreadCreate",
              "documentation": {
                "identifier": "writeThreadCreate",
                "newPage": false,
                "searchKey": "pprof.writeThreadCreate",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func writeThreadCreate(w io.Writer, debug int) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc writeThreadCreate(w io.Writer, debug int) error\n```\n\nwriteThreadCreate writes the current runtime ThreadCreateProfile to w. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#countGoroutine",
              "documentation": {
                "identifier": "countGoroutine",
                "newPage": false,
                "searchKey": "pprof.countGoroutine",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func countGoroutine() int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc countGoroutine() int\n```\n\ncountGoroutine returns the number of goroutines. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#runtime_goroutineProfileWithLabels",
              "documentation": {
                "identifier": "runtime_goroutineProfileWithLabels",
                "newPage": false,
                "searchKey": "pprof.runtime_goroutineProfileWithLabels",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func runtime_goroutineProfileWithLabels(p []runtime.StackRecord, labels []unsafe.Pointer) (n int, ok bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runtime_goroutineProfileWithLabels(p []runtime.StackRecord, labels []unsafe.Pointer) (n int, ok bool)\n```\n\nruntime_goroutineProfileWithLabels is defined in runtime/mprof.go \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#writeGoroutine",
              "documentation": {
                "identifier": "writeGoroutine",
                "newPage": false,
                "searchKey": "pprof.writeGoroutine",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func writeGoroutine(w io.Writer, debug int) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc writeGoroutine(w io.Writer, debug int) error\n```\n\nwriteGoroutine writes the current runtime GoroutineProfile to w. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#writeGoroutineStacks",
              "documentation": {
                "identifier": "writeGoroutineStacks",
                "newPage": false,
                "searchKey": "pprof.writeGoroutineStacks",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func writeGoroutineStacks(w io.Writer) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc writeGoroutineStacks(w io.Writer) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#writeRuntimeProfile",
              "documentation": {
                "identifier": "writeRuntimeProfile",
                "newPage": false,
                "searchKey": "pprof.writeRuntimeProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func writeRuntimeProfile(w io.Writer, debug int, name string, fetch func([]runtime.StackRecord, []unsafe.Pointer) (int, bool)) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc writeRuntimeProfile(w io.Writer, debug int, name string, fetch func([]runtime.StackRecord, []unsafe.Pointer) (int, bool)) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#StartCPUProfile",
              "documentation": {
                "identifier": "StartCPUProfile",
                "newPage": false,
                "searchKey": "pprof.StartCPUProfile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func StartCPUProfile(w io.Writer) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc StartCPUProfile(w io.Writer) error\n```\n\nStartCPUProfile enables CPU profiling for the current process. While profiling, the profile will be buffered and written to w. StartCPUProfile returns an error if profiling is already enabled. \n\nOn Unix-like systems, StartCPUProfile does not work by default for Go code built with -buildmode=c-archive or -buildmode=c-shared. StartCPUProfile relies on the SIGPROF signal, but that signal will be delivered to the main program's SIGPROF signal handler (if any) not to the one used by Go. To make it work, call os/signal.Notify for syscall.SIGPROF, but note that doing so may break any profiling being done by the main program. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#readProfile",
              "documentation": {
                "identifier": "readProfile",
                "newPage": false,
                "searchKey": "pprof.readProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readProfile() (data []uint64, tags []unsafe.Pointer, eof bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readProfile() (data []uint64, tags []unsafe.Pointer, eof bool)\n```\n\nreadProfile, provided by the runtime, returns the next chunk of binary CPU profiling stack trace data, blocking until data is available. If profiling is turned off and all the profile data accumulated while it was on has been returned, readProfile returns eof=true. The caller must save the returned data and tags before calling readProfile again. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#profileWriter",
              "documentation": {
                "identifier": "profileWriter",
                "newPage": false,
                "searchKey": "pprof.profileWriter",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func profileWriter(w io.Writer)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc profileWriter(w io.Writer)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#StopCPUProfile",
              "documentation": {
                "identifier": "StopCPUProfile",
                "newPage": false,
                "searchKey": "pprof.StopCPUProfile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func StopCPUProfile()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc StopCPUProfile()\n```\n\nStopCPUProfile stops the current CPU profile, if any. StopCPUProfile only returns after all the writes for the profile have completed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#countBlock",
              "documentation": {
                "identifier": "countBlock",
                "newPage": false,
                "searchKey": "pprof.countBlock",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func countBlock() int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc countBlock() int\n```\n\ncountBlock returns the number of records in the blocking profile. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#countMutex",
              "documentation": {
                "identifier": "countMutex",
                "newPage": false,
                "searchKey": "pprof.countMutex",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func countMutex() int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc countMutex() int\n```\n\ncountMutex returns the number of records in the mutex profile. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#writeBlock",
              "documentation": {
                "identifier": "writeBlock",
                "newPage": false,
                "searchKey": "pprof.writeBlock",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func writeBlock(w io.Writer, debug int) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc writeBlock(w io.Writer, debug int) error\n```\n\nwriteBlock writes the current blocking profile to w. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#scaleBlockProfile",
              "documentation": {
                "identifier": "scaleBlockProfile",
                "newPage": false,
                "searchKey": "pprof.scaleBlockProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scaleBlockProfile(cnt int64, ns float64) (int64, float64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scaleBlockProfile(cnt int64, ns float64) (int64, float64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#writeMutex",
              "documentation": {
                "identifier": "writeMutex",
                "newPage": false,
                "searchKey": "pprof.writeMutex",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func writeMutex(w io.Writer, debug int) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc writeMutex(w io.Writer, debug int) error\n```\n\nwriteMutex writes the current mutex profile to w. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#writeProfileInternal",
              "documentation": {
                "identifier": "writeProfileInternal",
                "newPage": false,
                "searchKey": "pprof.writeProfileInternal",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func writeProfileInternal(w io.Writer, debug int, name string, runtimeProfile func([]runtime.BlockProfileRecord) (int, bool), scaleProfile func(int64, float64) (int64, float64)) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc writeProfileInternal(w io.Writer, debug int, name string, runtimeProfile func([]runtime.BlockProfileRecord) (int, bool), scaleProfile func(int64, float64) (int64, float64)) error\n```\n\nwriteProfileInternal writes the current blocking or mutex profile depending on the passed parameters \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#scaleMutexProfile",
              "documentation": {
                "identifier": "scaleMutexProfile",
                "newPage": false,
                "searchKey": "pprof.scaleMutexProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scaleMutexProfile(cnt int64, ns float64) (int64, float64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scaleMutexProfile(cnt int64, ns float64) (int64, float64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#runtime_cyclesPerSecond",
              "documentation": {
                "identifier": "runtime_cyclesPerSecond",
                "newPage": false,
                "searchKey": "pprof.runtime_cyclesPerSecond",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func runtime_cyclesPerSecond() int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runtime_cyclesPerSecond() int64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#addMaxRSS",
              "documentation": {
                "identifier": "addMaxRSS",
                "newPage": false,
                "searchKey": "pprof.addMaxRSS",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addMaxRSS(w io.Writer)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addMaxRSS(w io.Writer)\n```\n\nAdds MaxRSS to platforms that are supported. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#lostProfileEvent",
              "documentation": {
                "identifier": "lostProfileEvent",
                "newPage": false,
                "searchKey": "pprof.lostProfileEvent",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func lostProfileEvent()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc lostProfileEvent()\n```\n\nlostProfileEvent is the function to which lost profiling events are attributed. (The name shows up in the pprof graphs.) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#funcPC",
              "documentation": {
                "identifier": "funcPC",
                "newPage": false,
                "searchKey": "pprof.funcPC",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func funcPC(f interface{}) uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc funcPC(f interface{}) uintptr\n```\n\nfuncPC returns the PC for the func value f. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#parseProcSelfMaps",
              "documentation": {
                "identifier": "parseProcSelfMaps",
                "newPage": false,
                "searchKey": "pprof.parseProcSelfMaps",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseProcSelfMaps(data []byte, addMapping func(lo, hi, offset uint64, file, buildID string))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseProcSelfMaps(data []byte, addMapping func(lo, hi, offset uint64, file, buildID string))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#writeHeapProto",
              "documentation": {
                "identifier": "writeHeapProto",
                "newPage": false,
                "searchKey": "pprof.writeHeapProto",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func writeHeapProto(w io.Writer, p []runtime.MemProfileRecord, rate int64, defaultSampleType string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc writeHeapProto(w io.Writer, p []runtime.MemProfileRecord, rate int64, defaultSampleType string) error\n```\n\nwriteHeapProto writes the current heap profile in protobuf format to w. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#scaleHeapSample",
              "documentation": {
                "identifier": "scaleHeapSample",
                "newPage": false,
                "searchKey": "pprof.scaleHeapSample",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scaleHeapSample(count, size, rate int64) (int64, int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scaleHeapSample(count, size, rate int64) (int64, int64)\n```\n\nscaleHeapSample adjusts the data from a heap Sample to account for its probability of appearing in the collected data. heap profiles are a sampling of the memory allocations requests in a program. We estimate the unsampled value by dividing each collected sample by its probability of appearing in the profile. heap profiles rely on a poisson process to determine which samples to collect, based on the desired average collection rate R. The probability of a sample of size S to appear in that profile is 1-exp(-S/R). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#runtime_expandFinalInlineFrame",
              "documentation": {
                "identifier": "runtime_expandFinalInlineFrame",
                "newPage": false,
                "searchKey": "pprof.runtime_expandFinalInlineFrame",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func runtime_expandFinalInlineFrame(stk []uintptr) []uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runtime_expandFinalInlineFrame(stk []uintptr) []uintptr\n```\n\nruntime_expandFinalInlineFrame is defined in runtime/symtab.go. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#runtime_setProfLabel",
              "documentation": {
                "identifier": "runtime_setProfLabel",
                "newPage": false,
                "searchKey": "pprof.runtime_setProfLabel",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func runtime_setProfLabel(labels unsafe.Pointer)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runtime_setProfLabel(labels unsafe.Pointer)\n```\n\nruntime_setProfLabel is defined in runtime/proflabel.go. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#runtime_getProfLabel",
              "documentation": {
                "identifier": "runtime_getProfLabel",
                "newPage": false,
                "searchKey": "pprof.runtime_getProfLabel",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func runtime_getProfLabel() unsafe.Pointer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runtime_getProfLabel() unsafe.Pointer\n```\n\nruntime_getProfLabel is defined in runtime/proflabel.go. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#SetGoroutineLabels",
              "documentation": {
                "identifier": "SetGoroutineLabels",
                "newPage": false,
                "searchKey": "pprof.SetGoroutineLabels",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func SetGoroutineLabels(ctx context.Context)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SetGoroutineLabels(ctx context.Context)\n```\n\nSetGoroutineLabels sets the current goroutine's labels to match ctx. A new goroutine inherits the labels of the goroutine that created it. This is a lower-level API than Do, which should be used instead when possible. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#Do",
              "documentation": {
                "identifier": "Do",
                "newPage": false,
                "searchKey": "pprof.Do",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Do(ctx context.Context, labels LabelSet, f func(context.Context))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Do(ctx context.Context, labels LabelSet, f func(context.Context))\n```\n\nDo calls f with a copy of the parent context with the given labels added to the parent's label map. Goroutines spawned while executing f will inherit the augmented label-set. Each key/value pair in labels is inserted into the label map in the order provided, overriding any previous value for the same key. The augmented label map will be set for the duration of the call to f and restored once f returns. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#labelsSorted",
              "documentation": {
                "identifier": "labelsSorted",
                "newPage": false,
                "searchKey": "pprof.labelsSorted",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func labelsSorted(ctx context.Context) []label"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc labelsSorted(ctx context.Context) []label\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestContextLabels",
              "documentation": {
                "identifier": "TestContextLabels",
                "newPage": false,
                "searchKey": "pprof.TestContextLabels",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestContextLabels(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestContextLabels(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestLabelMapStringer",
              "documentation": {
                "identifier": "TestLabelMapStringer",
                "newPage": false,
                "searchKey": "pprof.TestLabelMapStringer",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLabelMapStringer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLabelMapStringer(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#allocateTransient1M",
              "documentation": {
                "identifier": "allocateTransient1M",
                "newPage": false,
                "searchKey": "pprof.allocateTransient1M",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func allocateTransient1M()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc allocateTransient1M()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#allocateTransient2M",
              "documentation": {
                "identifier": "allocateTransient2M",
                "newPage": false,
                "searchKey": "pprof.allocateTransient2M",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func allocateTransient2M()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc allocateTransient2M()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#allocateTransient2MInline",
              "documentation": {
                "identifier": "allocateTransient2MInline",
                "newPage": false,
                "searchKey": "pprof.allocateTransient2MInline",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func allocateTransient2MInline()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc allocateTransient2MInline()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#allocatePersistent1K",
              "documentation": {
                "identifier": "allocatePersistent1K",
                "newPage": false,
                "searchKey": "pprof.allocatePersistent1K",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func allocatePersistent1K()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc allocatePersistent1K()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#allocateReflectTransient",
              "documentation": {
                "identifier": "allocateReflectTransient",
                "newPage": false,
                "searchKey": "pprof.allocateReflectTransient",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func allocateReflectTransient()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc allocateReflectTransient()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#allocateReflect",
              "documentation": {
                "identifier": "allocateReflect",
                "newPage": false,
                "searchKey": "pprof.allocateReflect",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func allocateReflect()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc allocateReflect()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestMemoryProfiler",
              "documentation": {
                "identifier": "TestMemoryProfiler",
                "newPage": false,
                "searchKey": "pprof.TestMemoryProfiler",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMemoryProfiler(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMemoryProfiler(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#cpuHogger",
              "documentation": {
                "identifier": "cpuHogger",
                "newPage": false,
                "searchKey": "pprof.cpuHogger",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func cpuHogger(f func(x int) int, y *int, dur time.Duration)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc cpuHogger(f func(x int) int, y *int, dur time.Duration)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#cpuHog1",
              "documentation": {
                "identifier": "cpuHog1",
                "newPage": false,
                "searchKey": "pprof.cpuHog1",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func cpuHog1(x int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc cpuHog1(x int) int\n```\n\nThe actual CPU hogging function. Must not call other functions nor access heap/globals in the loop, otherwise under race detector the samples will be in the race runtime. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#cpuHog0",
              "documentation": {
                "identifier": "cpuHog0",
                "newPage": false,
                "searchKey": "pprof.cpuHog0",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func cpuHog0(x, n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc cpuHog0(x, n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#cpuHog2",
              "documentation": {
                "identifier": "cpuHog2",
                "newPage": false,
                "searchKey": "pprof.cpuHog2",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func cpuHog2(x int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc cpuHog2(x int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#avoidFunctions",
              "documentation": {
                "identifier": "avoidFunctions",
                "newPage": false,
                "searchKey": "pprof.avoidFunctions",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func avoidFunctions() []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc avoidFunctions() []string\n```\n\nReturn a list of functions that we don't want to ever appear in CPU profiles. For gccgo, that list includes the sigprof handler itself. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestCPUProfile",
              "documentation": {
                "identifier": "TestCPUProfile",
                "newPage": false,
                "searchKey": "pprof.TestCPUProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCPUProfile(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCPUProfile(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestCPUProfileMultithreaded",
              "documentation": {
                "identifier": "TestCPUProfileMultithreaded",
                "newPage": false,
                "searchKey": "pprof.TestCPUProfileMultithreaded",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCPUProfileMultithreaded(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCPUProfileMultithreaded(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#containsInlinedCall",
              "documentation": {
                "identifier": "containsInlinedCall",
                "newPage": false,
                "searchKey": "pprof.containsInlinedCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func containsInlinedCall(f interface{}, maxBytes int) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc containsInlinedCall(f interface{}, maxBytes int) bool\n```\n\ncontainsInlinedCall reports whether the function body for the function f is known to contain an inlined function call within the first maxBytes bytes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#findInlinedCall",
              "documentation": {
                "identifier": "findInlinedCall",
                "newPage": false,
                "searchKey": "pprof.findInlinedCall",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func findInlinedCall(f interface{}, maxBytes int) (pc uint64, found bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc findInlinedCall(f interface{}, maxBytes int) (pc uint64, found bool)\n```\n\nfindInlinedCall returns the PC of an inlined function call within the function body for the function f if any. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestCPUProfileInlining",
              "documentation": {
                "identifier": "TestCPUProfileInlining",
                "newPage": false,
                "searchKey": "pprof.TestCPUProfileInlining",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCPUProfileInlining(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCPUProfileInlining(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#inlinedCaller",
              "documentation": {
                "identifier": "inlinedCaller",
                "newPage": false,
                "searchKey": "pprof.inlinedCaller",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func inlinedCaller(x int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc inlinedCaller(x int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#inlinedCallee",
              "documentation": {
                "identifier": "inlinedCallee",
                "newPage": false,
                "searchKey": "pprof.inlinedCallee",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func inlinedCallee(x, n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc inlinedCallee(x, n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#dumpCallers",
              "documentation": {
                "identifier": "dumpCallers",
                "newPage": false,
                "searchKey": "pprof.dumpCallers",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func dumpCallers(pcs []uintptr)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc dumpCallers(pcs []uintptr)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#inlinedCallerDump",
              "documentation": {
                "identifier": "inlinedCallerDump",
                "newPage": false,
                "searchKey": "pprof.inlinedCallerDump",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func inlinedCallerDump(pcs []uintptr)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc inlinedCallerDump(pcs []uintptr)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#inlinedCalleeDump",
              "documentation": {
                "identifier": "inlinedCalleeDump",
                "newPage": false,
                "searchKey": "pprof.inlinedCalleeDump",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func inlinedCalleeDump(pcs []uintptr)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc inlinedCalleeDump(pcs []uintptr)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestCPUProfileRecursion",
              "documentation": {
                "identifier": "TestCPUProfileRecursion",
                "newPage": false,
                "searchKey": "pprof.TestCPUProfileRecursion",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCPUProfileRecursion(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCPUProfileRecursion(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#recursionCaller",
              "documentation": {
                "identifier": "recursionCaller",
                "newPage": false,
                "searchKey": "pprof.recursionCaller",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func recursionCaller(x int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc recursionCaller(x int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#recursionCallee",
              "documentation": {
                "identifier": "recursionCallee",
                "newPage": false,
                "searchKey": "pprof.recursionCallee",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func recursionCallee(n, x int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc recursionCallee(n, x int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#recursionChainTop",
              "documentation": {
                "identifier": "recursionChainTop",
                "newPage": false,
                "searchKey": "pprof.recursionChainTop",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func recursionChainTop(x int, pcs []uintptr)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc recursionChainTop(x int, pcs []uintptr)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#recursionChainMiddle",
              "documentation": {
                "identifier": "recursionChainMiddle",
                "newPage": false,
                "searchKey": "pprof.recursionChainMiddle",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func recursionChainMiddle(x int, pcs []uintptr)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc recursionChainMiddle(x int, pcs []uintptr)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#recursionChainBottom",
              "documentation": {
                "identifier": "recursionChainBottom",
                "newPage": false,
                "searchKey": "pprof.recursionChainBottom",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func recursionChainBottom(x int, pcs []uintptr)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc recursionChainBottom(x int, pcs []uintptr)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#parseProfile",
              "documentation": {
                "identifier": "parseProfile",
                "newPage": false,
                "searchKey": "pprof.parseProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseProfile(t *testing.T, valBytes []byte, f func(uintptr, []*profile.Location, map[string][]string)) *profile.Profile"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseProfile(t *testing.T, valBytes []byte, f func(uintptr, []*profile.Location, map[string][]string)) *profile.Profile\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#cpuProfilingBroken",
              "documentation": {
                "identifier": "cpuProfilingBroken",
                "newPage": false,
                "searchKey": "pprof.cpuProfilingBroken",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func cpuProfilingBroken() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc cpuProfilingBroken() bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#testCPUProfile",
              "documentation": {
                "identifier": "testCPUProfile",
                "newPage": false,
                "searchKey": "pprof.testCPUProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testCPUProfile(t *testing.T, matches matchFunc, need []string, avoid []string, f func(dur time.Duration)) *profile.Profile"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testCPUProfile(t *testing.T, matches matchFunc, need []string, avoid []string, f func(dur time.Duration)) *profile.Profile\n```\n\ntestCPUProfile runs f under the CPU profiler, checking for some conditions specified by need, as interpreted by matches, and returns the parsed profile. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#contains",
              "documentation": {
                "identifier": "contains",
                "newPage": false,
                "searchKey": "pprof.contains",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func contains(slice []string, s string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc contains(slice []string, s string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#stackContains",
              "documentation": {
                "identifier": "stackContains",
                "newPage": false,
                "searchKey": "pprof.stackContains",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func stackContains(spec string, count uintptr, stk []*profile.Location, labels map[string][]string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stackContains(spec string, count uintptr, stk []*profile.Location, labels map[string][]string) bool\n```\n\nstackContains matches if a function named spec appears anywhere in the stack trace. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#profileOk",
              "documentation": {
                "identifier": "profileOk",
                "newPage": false,
                "searchKey": "pprof.profileOk",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func profileOk(t *testing.T, matches matchFunc, need []string, avoid []string, prof bytes.Buffer, duration time.Duration) (_ *profile.Profile, ok bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc profileOk(t *testing.T, matches matchFunc, need []string, avoid []string, prof bytes.Buffer, duration time.Duration) (_ *profile.Profile, ok bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestCPUProfileWithFork",
              "documentation": {
                "identifier": "TestCPUProfileWithFork",
                "newPage": false,
                "searchKey": "pprof.TestCPUProfileWithFork",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCPUProfileWithFork(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCPUProfileWithFork(t *testing.T)\n```\n\nFork can hang if preempted with signals frequently enough (see issue 5517). Ensure that we do not do this. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestGoroutineSwitch",
              "documentation": {
                "identifier": "TestGoroutineSwitch",
                "newPage": false,
                "searchKey": "pprof.TestGoroutineSwitch",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGoroutineSwitch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGoroutineSwitch(t *testing.T)\n```\n\nTest that profiler does not observe runtime.gogo as \"user\" goroutine execution. If it did, it would see inconsistent state and would either record an incorrect stack or crash because the stack was malformed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#fprintStack",
              "documentation": {
                "identifier": "fprintStack",
                "newPage": false,
                "searchKey": "pprof.fprintStack",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fprintStack(w io.Writer, stk []*profile.Location)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fprintStack(w io.Writer, stk []*profile.Location)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestMathBigDivide",
              "documentation": {
                "identifier": "TestMathBigDivide",
                "newPage": false,
                "searchKey": "pprof.TestMathBigDivide",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMathBigDivide(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMathBigDivide(t *testing.T)\n```\n\nTest that profiling of division operations is okay, especially on ARM. See issue 6681. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#stackContainsAll",
              "documentation": {
                "identifier": "stackContainsAll",
                "newPage": false,
                "searchKey": "pprof.stackContainsAll",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func stackContainsAll(spec string, count uintptr, stk []*profile.Location, labels map[string][]string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stackContainsAll(spec string, count uintptr, stk []*profile.Location, labels map[string][]string) bool\n```\n\nstackContainsAll matches if all functions in spec (comma-separated) appear somewhere in the stack trace. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestMorestack",
              "documentation": {
                "identifier": "TestMorestack",
                "newPage": false,
                "searchKey": "pprof.TestMorestack",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMorestack(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMorestack(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#growstack1",
              "documentation": {
                "identifier": "growstack1",
                "newPage": false,
                "searchKey": "pprof.growstack1",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func growstack1()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc growstack1()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#growstack",
              "documentation": {
                "identifier": "growstack",
                "newPage": false,
                "searchKey": "pprof.growstack",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func growstack(n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc growstack(n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#use",
              "documentation": {
                "identifier": "use",
                "newPage": false,
                "searchKey": "pprof.use",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func use(x [8 << 16]byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc use(x [8 << 16]byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestBlockProfile",
              "documentation": {
                "identifier": "TestBlockProfile",
                "newPage": false,
                "searchKey": "pprof.TestBlockProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBlockProfile(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBlockProfile(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#stacks",
              "documentation": {
                "identifier": "stacks",
                "newPage": false,
                "searchKey": "pprof.stacks",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func stacks(p *profile.Profile) (res [][]string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stacks(p *profile.Profile) (res [][]string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#containsStack",
              "documentation": {
                "identifier": "containsStack",
                "newPage": false,
                "searchKey": "pprof.containsStack",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func containsStack(got [][]string, want []string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc containsStack(got [][]string, want []string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#blockChanRecv",
              "documentation": {
                "identifier": "blockChanRecv",
                "newPage": false,
                "searchKey": "pprof.blockChanRecv",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func blockChanRecv()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc blockChanRecv()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#blockChanSend",
              "documentation": {
                "identifier": "blockChanSend",
                "newPage": false,
                "searchKey": "pprof.blockChanSend",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func blockChanSend()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc blockChanSend()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#blockChanClose",
              "documentation": {
                "identifier": "blockChanClose",
                "newPage": false,
                "searchKey": "pprof.blockChanClose",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func blockChanClose()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc blockChanClose()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#blockSelectRecvAsync",
              "documentation": {
                "identifier": "blockSelectRecvAsync",
                "newPage": false,
                "searchKey": "pprof.blockSelectRecvAsync",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func blockSelectRecvAsync()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc blockSelectRecvAsync()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#blockSelectSendSync",
              "documentation": {
                "identifier": "blockSelectSendSync",
                "newPage": false,
                "searchKey": "pprof.blockSelectSendSync",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func blockSelectSendSync()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc blockSelectSendSync()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#blockMutex",
              "documentation": {
                "identifier": "blockMutex",
                "newPage": false,
                "searchKey": "pprof.blockMutex",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func blockMutex()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc blockMutex()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#blockCond",
              "documentation": {
                "identifier": "blockCond",
                "newPage": false,
                "searchKey": "pprof.blockCond",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func blockCond()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc blockCond()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestBlockProfileBias",
              "documentation": {
                "identifier": "TestBlockProfileBias",
                "newPage": false,
                "searchKey": "pprof.TestBlockProfileBias",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBlockProfileBias(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBlockProfileBias(t *testing.T)\n```\n\nSee [http://golang.org/cl/299991](http://golang.org/cl/299991). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#blockFrequentShort",
              "documentation": {
                "identifier": "blockFrequentShort",
                "newPage": false,
                "searchKey": "pprof.blockFrequentShort",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func blockFrequentShort(rate int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc blockFrequentShort(rate int)\n```\n\nblockFrequentShort produces 100000 block events with an average duration of rate / 10. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#blockInfrequentLong",
              "documentation": {
                "identifier": "blockInfrequentLong",
                "newPage": false,
                "searchKey": "pprof.blockInfrequentLong",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func blockInfrequentLong(rate int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc blockInfrequentLong(rate int)\n```\n\nblockFrequentShort produces 10000 block events with an average duration of rate. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#blockevent",
              "documentation": {
                "identifier": "blockevent",
                "newPage": false,
                "searchKey": "pprof.blockevent",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func blockevent(cycles int64, skip int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc blockevent(cycles int64, skip int)\n```\n\nUsed by TestBlockProfileBias. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestMutexProfile",
              "documentation": {
                "identifier": "TestMutexProfile",
                "newPage": false,
                "searchKey": "pprof.TestMutexProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMutexProfile(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMutexProfile(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#func1",
              "documentation": {
                "identifier": "func1",
                "newPage": false,
                "searchKey": "pprof.func1",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func func1(c chan int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc func1(c chan int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#func2",
              "documentation": {
                "identifier": "func2",
                "newPage": false,
                "searchKey": "pprof.func2",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func func2(c chan int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc func2(c chan int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#func3",
              "documentation": {
                "identifier": "func3",
                "newPage": false,
                "searchKey": "pprof.func3",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func func3(c chan int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc func3(c chan int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#func4",
              "documentation": {
                "identifier": "func4",
                "newPage": false,
                "searchKey": "pprof.func4",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func func4(c chan int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc func4(c chan int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestGoroutineCounts",
              "documentation": {
                "identifier": "TestGoroutineCounts",
                "newPage": false,
                "searchKey": "pprof.TestGoroutineCounts",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGoroutineCounts(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGoroutineCounts(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#containsInOrder",
              "documentation": {
                "identifier": "containsInOrder",
                "newPage": false,
                "searchKey": "pprof.containsInOrder",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func containsInOrder(s string, all ...string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc containsInOrder(s string, all ...string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#containsCountsLabels",
              "documentation": {
                "identifier": "containsCountsLabels",
                "newPage": false,
                "searchKey": "pprof.containsCountsLabels",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func containsCountsLabels(prof *profile.Profile, countLabels map[int64]map[string]string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc containsCountsLabels(prof *profile.Profile, countLabels map[int64]map[string]string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestEmptyCallStack",
              "documentation": {
                "identifier": "TestEmptyCallStack",
                "newPage": false,
                "searchKey": "pprof.TestEmptyCallStack",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEmptyCallStack(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEmptyCallStack(t *testing.T)\n```\n\nIssue 18836. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#stackContainsLabeled",
              "documentation": {
                "identifier": "stackContainsLabeled",
                "newPage": false,
                "searchKey": "pprof.stackContainsLabeled",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func stackContainsLabeled(spec string, count uintptr, stk []*profile.Location, labels map[string][]string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stackContainsLabeled(spec string, count uintptr, stk []*profile.Location, labels map[string][]string) bool\n```\n\nstackContainsLabeled takes a spec like funcname;key=value and matches if the stack has that key and value and has funcname somewhere in the stack. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestCPUProfileLabel",
              "documentation": {
                "identifier": "TestCPUProfileLabel",
                "newPage": false,
                "searchKey": "pprof.TestCPUProfileLabel",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCPUProfileLabel(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCPUProfileLabel(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestLabelRace",
              "documentation": {
                "identifier": "TestLabelRace",
                "newPage": false,
                "searchKey": "pprof.TestLabelRace",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLabelRace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLabelRace(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestAtomicLoadStore64",
              "documentation": {
                "identifier": "TestAtomicLoadStore64",
                "newPage": false,
                "searchKey": "pprof.TestAtomicLoadStore64",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAtomicLoadStore64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAtomicLoadStore64(t *testing.T)\n```\n\nCheck that there is no deadlock when the program receives SIGPROF while in 64bit atomics' critical section. Used to happen on mips{,le}. See #20146. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestTracebackAll",
              "documentation": {
                "identifier": "TestTracebackAll",
                "newPage": false,
                "searchKey": "pprof.TestTracebackAll",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTracebackAll(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTracebackAll(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestTryAdd",
              "documentation": {
                "identifier": "TestTryAdd",
                "newPage": false,
                "searchKey": "pprof.TestTryAdd",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTryAdd(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTryAdd(t *testing.T)\n```\n\nTestTryAdd tests the cases that are hard to test with real program execution. \n\nFor example, the current go compilers may not always inline functions involved in recursion but that may not be true in the future compilers. This tests such cases by using fake call sequences and forcing the profile build utilizing translateCPUProfile defined in proto_test.go \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#translateCPUProfile",
              "documentation": {
                "identifier": "translateCPUProfile",
                "newPage": false,
                "searchKey": "pprof.translateCPUProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func translateCPUProfile(data []uint64) (*profile.Profile, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc translateCPUProfile(data []uint64) (*profile.Profile, error)\n```\n\ntranslateCPUProfile parses binary CPU profiling stack trace data generated by runtime.CPUProfile() into a profile struct. This is only used for testing. Real conversions stream the data into the profileBuilder as it becomes available. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#fmtJSON",
              "documentation": {
                "identifier": "fmtJSON",
                "newPage": false,
                "searchKey": "pprof.fmtJSON",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fmtJSON(x interface{}) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fmtJSON(x interface{}) string\n```\n\nfmtJSON returns a pretty-printed JSON form for x. It works reasonbly well for printing protocol-buffer data structures like profile.Profile. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestConvertCPUProfileEmpty",
              "documentation": {
                "identifier": "TestConvertCPUProfileEmpty",
                "newPage": false,
                "searchKey": "pprof.TestConvertCPUProfileEmpty",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConvertCPUProfileEmpty(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConvertCPUProfileEmpty(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#f1",
              "documentation": {
                "identifier": "f1",
                "newPage": false,
                "searchKey": "pprof.f1",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func f1()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc f1()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#f2",
              "documentation": {
                "identifier": "f2",
                "newPage": false,
                "searchKey": "pprof.f2",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func f2()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc f2()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#testPCs",
              "documentation": {
                "identifier": "testPCs",
                "newPage": false,
                "searchKey": "pprof.testPCs",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testPCs(t *testing.T) (addr1, addr2 uint64, map1, map2 *profile.Mapping)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testPCs(t *testing.T) (addr1, addr2 uint64, map1, map2 *profile.Mapping)\n```\n\ntestPCs returns two PCs and two corresponding memory mappings to use in test profiles. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestConvertCPUProfile",
              "documentation": {
                "identifier": "TestConvertCPUProfile",
                "newPage": false,
                "searchKey": "pprof.TestConvertCPUProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConvertCPUProfile(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConvertCPUProfile(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#checkProfile",
              "documentation": {
                "identifier": "checkProfile",
                "newPage": false,
                "searchKey": "pprof.checkProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkProfile(t *testing.T, p *profile.Profile, period int64, periodType *profile.ValueType, sampleType []*profile.ValueType, samples []*profile.Sample, defaultSampleType string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkProfile(t *testing.T, p *profile.Profile, period int64, periodType *profile.ValueType, sampleType []*profile.ValueType, samples []*profile.Sample, defaultSampleType string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestProcSelfMaps",
              "documentation": {
                "identifier": "TestProcSelfMaps",
                "newPage": false,
                "searchKey": "pprof.TestProcSelfMaps",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestProcSelfMaps(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestProcSelfMaps(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestMapping",
              "documentation": {
                "identifier": "TestMapping",
                "newPage": false,
                "searchKey": "pprof.TestMapping",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapping(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapping(t *testing.T)\n```\n\nTestMapping checks the mapping section of CPU profiles has the HasFunctions field set correctly. If all PCs included in the samples are successfully symbolized, the corresponding mapping entry (in this test case, only one entry) should have its HasFunctions field set true. The test generates a CPU profile that includes PCs from C side that the runtime can't symbolize. See ./testdata/mappingtest. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#symbolized",
              "documentation": {
                "identifier": "symbolized",
                "newPage": false,
                "searchKey": "pprof.symbolized",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func symbolized(loc *profile.Location) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc symbolized(loc *profile.Location) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestFakeMapping",
              "documentation": {
                "identifier": "TestFakeMapping",
                "newPage": false,
                "searchKey": "pprof.TestFakeMapping",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFakeMapping(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFakeMapping(t *testing.T)\n```\n\nTestFakeMapping tests if at least one mapping exists (including a fake mapping), and their HasFunctions bits are set correctly. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestEmptyStack",
              "documentation": {
                "identifier": "TestEmptyStack",
                "newPage": false,
                "searchKey": "pprof.TestEmptyStack",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEmptyStack(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEmptyStack(t *testing.T)\n```\n\nMake sure the profiler can handle an empty stack trace. See issue 37967. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestConvertMemProfile",
              "documentation": {
                "identifier": "TestConvertMemProfile",
                "newPage": false,
                "searchKey": "pprof.TestConvertMemProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConvertMemProfile(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConvertMemProfile(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestSetGoroutineLabels",
              "documentation": {
                "identifier": "TestSetGoroutineLabels",
                "newPage": false,
                "searchKey": "pprof.TestSetGoroutineLabels",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSetGoroutineLabels(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSetGoroutineLabels(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#TestDo",
              "documentation": {
                "identifier": "TestDo",
                "newPage": false,
                "searchKey": "pprof.TestDo",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/pprof#getProfLabel",
              "documentation": {
                "identifier": "getProfLabel",
                "newPage": false,
                "searchKey": "pprof.getProfLabel",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getProfLabel() map[string]string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getProfLabel() map[string]string\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
