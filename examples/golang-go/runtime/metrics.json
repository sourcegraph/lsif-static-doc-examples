{
  "pathID": "/runtime/metrics",
  "documentation": {
    "identifier": "metrics",
    "newPage": true,
    "searchKey": "runtime/metrics",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package metrics"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package metrics provides a stable interface to access implementation-defined metrics exported by the Go runtime. This package is similar to existing functions like runtime.ReadMemStats and debug.ReadGCStats, but significantly more general. \n\nThe set of metrics defined by this package may evolve as the runtime itself evolves, and also enables variation across Go implementations, whose relevant metric sets may not intersect. \n\n### hdr-InterfaceInterface\nMetrics are designated by a string key, rather than, for example, a field name in a struct. The full list of supported metrics is always available in the slice of Descriptions returned by All. Each Description also includes useful information about the metric. \n\nThus, users of this API are encouraged to sample supported metrics defined by the slice returned by All to remain compatible across Go versions. Of course, situations arise where reading specific metrics is critical. For these cases, users are encouraged to use build tags, and although metrics may be deprecated and removed, users should consider this to be an exceptional and rare event, coinciding with a very large change in a particular Go implementation. \n\nEach metric key also has a \"kind\" that describes the format of the metric's value. In the interest of not breaking users of this package, the \"kind\" for a given metric is guaranteed not to change. If it must change, then a new metric will be introduced with a new key and a new \"kind.\" \n\n### hdr-Metric_key_formatMetric key format\nAs mentioned earlier, metric keys are strings. Their format is simple and well-defined, designed to be both human and machine readable. It is split into two components, separated by a colon: a rooted path and a unit. The choice to include the unit in the key is motivated by compatibility: if a metric's unit changes, its semantics likely did also, and a new key should be introduced. \n\nFor more details on the precise definition of the metric key's path and unit formats, see the documentation of the Name field of the Description struct. \n\n### hdr-A_note_about_floatsA note about floats\nThis package supports metrics whose values have a floating-point representation. In order to improve ease-of-use, this package promises to never produce the following classes of floating-point values: NaN, infinity. \n\n### hdr-Supported_metricsSupported metrics\nBelow is the full list of supported metrics, ordered lexicographically. \n\n```\n/gc/cycles/automatic:gc-cycles\n\tCount of completed GC cycles generated by the Go runtime.\n\n/gc/cycles/forced:gc-cycles\n\tCount of completed GC cycles forced by the application.\n\n/gc/cycles/total:gc-cycles\n\tCount of all completed GC cycles.\n\n/gc/heap/allocs-by-size:bytes\n\tDistribution of heap allocations by approximate size.\n\tNote that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects,\n\tonly tiny blocks.\n\n/gc/heap/allocs:bytes\n\tCumulative sum of memory allocated to the heap by the application.\n\n/gc/heap/allocs:objects\n\tCumulative count of heap allocations triggered by the application.\n\tNote that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects,\n\tonly tiny blocks.\n\n/gc/heap/frees-by-size:bytes\n\tDistribution of freed heap allocations by approximate size.\n\tNote that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects,\n\tonly tiny blocks.\n\n/gc/heap/frees:bytes\n\tCumulative sum of heap memory freed by the garbage collector.\n\n/gc/heap/frees:objects\n\tCumulative count of heap allocations whose storage was freed by the garbage collector.\n\tNote that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects,\n\tonly tiny blocks.\n\n/gc/heap/goal:bytes\n\tHeap size target for the end of the GC cycle.\n\n/gc/heap/objects:objects\n\tNumber of objects, live or unswept, occupying heap memory.\n\n/gc/heap/tiny/allocs:objects\n\tCount of small allocations that are packed together into blocks.\n\tThese allocations are counted separately from other allocations\n\tbecause each individual allocation is not tracked by the runtime,\n\tonly their block. Each block is already accounted for in\n\tallocs-by-size and frees-by-size.\n\n/gc/pauses:seconds\n\tDistribution individual GC-related stop-the-world pause latencies.\n\n/memory/classes/heap/free:bytes\n\tMemory that is completely free and eligible to be returned to\n\tthe underlying system, but has not been. This metric is the\n\truntime's estimate of free address space that is backed by\n\tphysical memory.\n\n/memory/classes/heap/objects:bytes\n\tMemory occupied by live objects and dead objects that have\n\tnot yet been marked free by the garbage collector.\n\n/memory/classes/heap/released:bytes\n\tMemory that is completely free and has been returned to\n\tthe underlying system. This metric is the runtime's estimate of\n\tfree address space that is still mapped into the process, but\n\tis not backed by physical memory.\n\n/memory/classes/heap/stacks:bytes\n\tMemory allocated from the heap that is reserved for stack\n\tspace, whether or not it is currently in-use.\n\n/memory/classes/heap/unused:bytes\n\tMemory that is reserved for heap objects but is not currently\n\tused to hold heap objects.\n\n/memory/classes/metadata/mcache/free:bytes\n\tMemory that is reserved for runtime mcache structures, but\n\tnot in-use.\n\n/memory/classes/metadata/mcache/inuse:bytes\n\tMemory that is occupied by runtime mcache structures that\n\tare currently being used.\n\n/memory/classes/metadata/mspan/free:bytes\n\tMemory that is reserved for runtime mspan structures, but\n\tnot in-use.\n\n/memory/classes/metadata/mspan/inuse:bytes\n\tMemory that is occupied by runtime mspan structures that are\n\tcurrently being used.\n\n/memory/classes/metadata/other:bytes\n\tMemory that is reserved for or used to hold runtime\n\tmetadata.\n\n/memory/classes/os-stacks:bytes\n\tStack memory allocated by the underlying operating system.\n\n/memory/classes/other:bytes\n\tMemory used by execution trace buffers, structures for\n\tdebugging the runtime, finalizer and profiler specials, and\n\tmore.\n\n/memory/classes/profiling/buckets:bytes\n\tMemory that is used by the stack trace hash map used for\n\tprofiling.\n\n/memory/classes/total:bytes\n\tAll memory mapped by the Go runtime into the current process\n\tas read-write. Note that this does not include memory mapped\n\tby code called via cgo or via the syscall package.\n\tSum of all metrics in /memory/classes.\n\n/sched/goroutines:goroutines\n\tCount of live goroutines.\n\n/sched/latencies:seconds\n\tDistribution of the time goroutines have spent in the scheduler\n\tin a runnable state before actually running.\n\n```\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/runtime/metrics#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/runtime/metrics#KindBad",
              "documentation": {
                "identifier": "KindBad",
                "newPage": false,
                "searchKey": "metrics.KindBad",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const KindBad"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst KindBad ValueKind = iota\n```\n\nKindBad indicates that the Value has no type and should not be used. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/metrics#KindFloat64",
              "documentation": {
                "identifier": "KindFloat64",
                "newPage": false,
                "searchKey": "metrics.KindFloat64",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const KindFloat64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst KindFloat64\n```\n\nKindFloat64 indicates that the type of the Value is a float64. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/metrics#KindFloat64Histogram",
              "documentation": {
                "identifier": "KindFloat64Histogram",
                "newPage": false,
                "searchKey": "metrics.KindFloat64Histogram",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const KindFloat64Histogram"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst KindFloat64Histogram\n```\n\nKindFloat64Histogram indicates that the type of the Value is a *Float64Histogram. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/metrics#KindUint64",
              "documentation": {
                "identifier": "KindUint64",
                "newPage": false,
                "searchKey": "metrics.KindUint64",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const KindUint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst KindUint64\n```\n\nKindUint64 indicates that the type of the Value is a uint64. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/runtime/metrics#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/runtime/metrics#allDesc",
              "documentation": {
                "identifier": "allDesc",
                "newPage": false,
                "searchKey": "metrics.allDesc",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var allDesc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar allDesc = ...\n```\n\nThe English language descriptions below must be kept in sync with the descriptions of each metric in doc.go. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/runtime/metrics#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/runtime/metrics#Description",
              "documentation": {
                "identifier": "Description",
                "newPage": false,
                "searchKey": "metrics.Description",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Description struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Description struct {\n\t// Name is the full name of the metric which includes the unit.\n\t//\n\t// The format of the metric may be described by the following regular expression.\n\t//\n\t// \t^(?P<name>/[^:]+):(?P<unit>[^:*/]+(?:[*/][^:*/]+)*)$\n\t//\n\t// The format splits the name into two components, separated by a colon: a path which always\n\t// starts with a /, and a machine-parseable unit. The name may contain any valid Unicode\n\t// codepoint in between / characters, but by convention will try to stick to lowercase\n\t// characters and hyphens. An example of such a path might be \"/memory/heap/free\".\n\t//\n\t// The unit is by convention a series of lowercase English unit names (singular or plural)\n\t// without prefixes delimited by '*' or '/'. The unit names may contain any valid Unicode\n\t// codepoint that is not a delimiter.\n\t// Examples of units might be \"seconds\", \"bytes\", \"bytes/second\", \"cpu-seconds\",\n\t// \"byte*cpu-seconds\", and \"bytes/second/second\".\n\t//\n\t// For histograms, multiple units may apply. For instance, the units of the buckets and\n\t// the count. By convention, for histograms, the units of the count are always \"samples\"\n\t// with the type of sample evident by the metric's name, while the unit in the name\n\t// specifies the buckets' unit.\n\t//\n\t// A complete name might look like \"/memory/heap/free:bytes\".\n\tName string\n\n\t// Description is an English language sentence describing the metric.\n\tDescription string\n\n\t// Kind is the kind of value for this metric.\n\t//\n\t// The purpose of this field is to allow users to filter out metrics whose values are\n\t// types which their application may not understand.\n\tKind ValueKind\n\n\t// Cumulative is whether or not the metric is cumulative. If a cumulative metric is just\n\t// a single number, then it increases monotonically. If the metric is a distribution,\n\t// then each bucket count increases monotonically.\n\t//\n\t// This flag thus indicates whether or not it's useful to compute a rate from this value.\n\tCumulative bool\n}\n```\n\nDescription describes a runtime metric. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/metrics#Float64Histogram",
              "documentation": {
                "identifier": "Float64Histogram",
                "newPage": false,
                "searchKey": "metrics.Float64Histogram",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Float64Histogram struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Float64Histogram struct {\n\t// Counts contains the weights for each histogram bucket.\n\t//\n\t// Given N buckets, Count[n] is the weight of the range\n\t// [bucket[n], bucket[n+1]), for 0 <= n < N.\n\tCounts []uint64\n\n\t// Buckets contains the boundaries of the histogram buckets, in increasing order.\n\t//\n\t// Buckets[0] is the inclusive lower bound of the minimum bucket while\n\t// Buckets[len(Buckets)-1] is the exclusive upper bound of the maximum bucket.\n\t// Hence, there are len(Buckets)-1 counts. Furthermore, len(Buckets) != 1, always,\n\t// since at least two boundaries are required to describe one bucket (and 0\n\t// boundaries are used to describe 0 buckets).\n\t//\n\t// Buckets[0] is permitted to have value -Inf and Buckets[len(Buckets)-1] is\n\t// permitted to have value Inf.\n\t//\n\t// For a given metric name, the value of Buckets is guaranteed not to change\n\t// between calls until program exit.\n\t//\n\t// This slice value is permitted to alias with other Float64Histograms' Buckets\n\t// fields, so the values within should only ever be read. If they need to be\n\t// modified, the user must make a copy.\n\tBuckets []float64\n}\n```\n\nFloat64Histogram represents a distribution of float64 values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/metrics#Sample",
              "documentation": {
                "identifier": "Sample",
                "newPage": false,
                "searchKey": "metrics.Sample",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Sample struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Sample struct {\n\t// Name is the name of the metric sampled.\n\t//\n\t// It must correspond to a name in one of the metric descriptions\n\t// returned by All.\n\tName string\n\n\t// Value is the value of the metric sample.\n\tValue Value\n}\n```\n\nSample captures a single metric sample. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/metrics#Value",
              "documentation": {
                "identifier": "Value",
                "newPage": false,
                "searchKey": "metrics.Value",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Value struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Value struct {\n\tkind    ValueKind\n\tscalar  uint64         // contains scalar values for scalar Kinds.\n\tpointer unsafe.Pointer // contains non-scalar values.\n}\n```\n\nValue represents a metric value returned by the runtime. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime/metrics#Value.Float64",
                    "documentation": {
                      "identifier": "Value.Float64",
                      "newPage": false,
                      "searchKey": "metrics.Value.Float64",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Value) Float64() float64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Value) Float64() float64\n```\n\nFloat64 returns the internal float64 value for the metric. \n\nIf v.Kind() != KindFloat64, this method panics. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/metrics#Value.Float64Histogram",
                    "documentation": {
                      "identifier": "Value.Float64Histogram",
                      "newPage": false,
                      "searchKey": "metrics.Value.Float64Histogram",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Value) Float64Histogram() *Float64Histogram"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Value) Float64Histogram() *Float64Histogram\n```\n\nFloat64Histogram returns the internal *Float64Histogram value for the metric. \n\nIf v.Kind() != KindFloat64Histogram, this method panics. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/metrics#Value.Kind",
                    "documentation": {
                      "identifier": "Value.Kind",
                      "newPage": false,
                      "searchKey": "metrics.Value.Kind",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Value) Kind() ValueKind"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Value) Kind() ValueKind\n```\n\nKind returns the tag representing the kind of value this is. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime/metrics#Value.Uint64",
                    "documentation": {
                      "identifier": "Value.Uint64",
                      "newPage": false,
                      "searchKey": "metrics.Value.Uint64",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Value) Uint64() uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Value) Uint64() uint64\n```\n\nUint64 returns the internal uint64 value for the metric. \n\nIf v.Kind() != KindUint64, this method panics. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime/metrics#ValueKind",
              "documentation": {
                "identifier": "ValueKind",
                "newPage": false,
                "searchKey": "metrics.ValueKind",
                "tags": [
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ValueKind int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ValueKind int\n```\n\nValueKind is a tag for a metric Value which indicates its type. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/runtime/metrics#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/runtime/metrics#All",
              "documentation": {
                "identifier": "All",
                "newPage": false,
                "searchKey": "metrics.All",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func All() []Description"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc All() []Description\n```\n\nAll returns a slice of containing metric descriptions for all supported metrics. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/metrics#Read",
              "documentation": {
                "identifier": "Read",
                "newPage": false,
                "searchKey": "metrics.Read",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Read(m []Sample)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Read(m []Sample)\n```\n\nRead populates each Value field in the given slice of metric samples. \n\nDesired metrics should be present in the slice with the appropriate name. The user of this API is encouraged to re-use the same slice between calls for efficiency, but is not required to do so. \n\nNote that re-use has some caveats. Notably, Values should not be read or manipulated while a Read with that value is outstanding; that is a data race. This property includes pointer-typed Values (for example, Float64Histogram) whose underlying storage will be reused by Read when possible. To safely use such values in a concurrent setting, all data must be deep-copied. \n\nIt is safe to execute multiple Read calls concurrently, but their arguments must share no underlying memory. When in doubt, create a new []Sample from scratch, which is always safe, though may be inefficient. \n\nSample values with names not appearing in All will have their Value populated as KindBad to indicate that the name is unknown. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/metrics#runtime_readMetrics",
              "documentation": {
                "identifier": "runtime_readMetrics",
                "newPage": false,
                "searchKey": "metrics.runtime_readMetrics",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func runtime_readMetrics(unsafe.Pointer, int, int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runtime_readMetrics(unsafe.Pointer, int, int)\n```\n\nImplemented in the runtime. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
