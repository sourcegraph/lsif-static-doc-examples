{
  "pathID": "/runtime/trace_test",
  "documentation": {
    "identifier": "trace_test",
    "newPage": true,
    "searchKey": "runtime/trace_test",
    "tags": [
      "package",
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package trace_test"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/runtime/trace_test#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/runtime/trace_test#saveTraces",
              "documentation": {
                "identifier": "saveTraces",
                "newPage": false,
                "searchKey": "trace_test.saveTraces",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var saveTraces"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar saveTraces = flag.Bool(\"savetraces\", false, \"save traces collected by tests\")\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/runtime/trace_test#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/runtime/trace_test#frame",
              "documentation": {
                "identifier": "frame",
                "newPage": false,
                "searchKey": "trace_test.frame",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type frame struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype frame struct {\n\tFn   string\n\tLine int\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/runtime/trace_test#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/runtime/trace_test#BenchmarkNewTask",
              "documentation": {
                "identifier": "BenchmarkNewTask",
                "newPage": false,
                "searchKey": "trace_test.BenchmarkNewTask",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkNewTask(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkNewTask(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#BenchmarkStartRegion",
              "documentation": {
                "identifier": "BenchmarkStartRegion",
                "newPage": false,
                "searchKey": "trace_test.BenchmarkStartRegion",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkStartRegion(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkStartRegion(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#Example",
              "documentation": {
                "identifier": "Example",
                "newPage": false,
                "searchKey": "trace_test.Example",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Example()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Example()\n```\n\nExample demonstrates the use of the trace package to trace the execution of a Go program. The trace output will be written to the file trace.out \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#RunMyProgram",
              "documentation": {
                "identifier": "RunMyProgram",
                "newPage": false,
                "searchKey": "trace_test.RunMyProgram",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RunMyProgram()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RunMyProgram()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#TestEventBatch",
              "documentation": {
                "identifier": "TestEventBatch",
                "newPage": false,
                "searchKey": "trace_test.TestEventBatch",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEventBatch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEventBatch(t *testing.T)\n```\n\nTestEventBatch tests Flush calls that happen during Start don't produce corrupted traces. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#TestTrace",
              "documentation": {
                "identifier": "TestTrace",
                "newPage": false,
                "searchKey": "trace_test.TestTrace",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTrace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTrace(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#TestTraceDoubleStart",
              "documentation": {
                "identifier": "TestTraceDoubleStart",
                "newPage": false,
                "searchKey": "trace_test.TestTraceDoubleStart",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTraceDoubleStart(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTraceDoubleStart(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#TestTraceFutileWakeup",
              "documentation": {
                "identifier": "TestTraceFutileWakeup",
                "newPage": false,
                "searchKey": "trace_test.TestTraceFutileWakeup",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTraceFutileWakeup(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTraceFutileWakeup(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#TestTraceStartStop",
              "documentation": {
                "identifier": "TestTraceStartStop",
                "newPage": false,
                "searchKey": "trace_test.TestTraceStartStop",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTraceStartStop(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTraceStartStop(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#TestTraceStress",
              "documentation": {
                "identifier": "TestTraceStress",
                "newPage": false,
                "searchKey": "trace_test.TestTraceStress",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTraceStress(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTraceStress(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#TestTraceStressStartStop",
              "documentation": {
                "identifier": "TestTraceStressStartStop",
                "newPage": false,
                "searchKey": "trace_test.TestTraceStressStartStop",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTraceStressStartStop(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTraceStressStartStop(t *testing.T)\n```\n\nDo a bunch of various stuff (timers, GC, network, etc) in a separate goroutine. And concurrently with all that start/stop trace 3 times. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#TestTraceSymbolize",
              "documentation": {
                "identifier": "TestTraceSymbolize",
                "newPage": false,
                "searchKey": "trace_test.TestTraceSymbolize",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTraceSymbolize(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTraceSymbolize(t *testing.T)\n```\n\nTestTraceSymbolize tests symbolization and that events has proper stacks. In particular that we strip bottom uninteresting frames like goexit, top uninteresting frames (runtime guts). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#TestUserTaskRegion",
              "documentation": {
                "identifier": "TestUserTaskRegion",
                "newPage": false,
                "searchKey": "trace_test.TestUserTaskRegion",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserTaskRegion(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserTaskRegion(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#dumpEventStacks",
              "documentation": {
                "identifier": "dumpEventStacks",
                "newPage": false,
                "searchKey": "trace_test.dumpEventStacks",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func dumpEventStacks(typ byte, events []*trace.Event) ([]byte, int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc dumpEventStacks(typ byte, events []*trace.Event) ([]byte, int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#dumpFrames",
              "documentation": {
                "identifier": "dumpFrames",
                "newPage": false,
                "searchKey": "trace_test.dumpFrames",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func dumpFrames(frames []frame) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc dumpFrames(frames []frame) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#isMemoryConstrained",
              "documentation": {
                "identifier": "isMemoryConstrained",
                "newPage": false,
                "searchKey": "trace_test.isMemoryConstrained",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isMemoryConstrained() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isMemoryConstrained() bool\n```\n\nisMemoryConstrained reports whether the current machine is likely to be memory constrained. This was originally for the openbsd/arm builder (Issue 12032). TODO: move this to testenv? Make this look at memory? Look at GO_BUILDER_NAME? \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#parseTrace",
              "documentation": {
                "identifier": "parseTrace",
                "newPage": false,
                "searchKey": "trace_test.parseTrace",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseTrace(t *testing.T, r io.Reader) ([]*trace.Event, map[uint64]*trace.GDesc)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseTrace(t *testing.T, r io.Reader) ([]*trace.Event, map[uint64]*trace.GDesc)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#saveTrace",
              "documentation": {
                "identifier": "saveTrace",
                "newPage": false,
                "searchKey": "trace_test.saveTrace",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func saveTrace(t *testing.T, buf *bytes.Buffer, name string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc saveTrace(t *testing.T, buf *bytes.Buffer, name string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#skipTraceSymbolizeTestIfNecessary",
              "documentation": {
                "identifier": "skipTraceSymbolizeTestIfNecessary",
                "newPage": false,
                "searchKey": "trace_test.skipTraceSymbolizeTestIfNecessary",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func skipTraceSymbolizeTestIfNecessary(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc skipTraceSymbolizeTestIfNecessary(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime/trace_test#testBrokenTimestamps",
              "documentation": {
                "identifier": "testBrokenTimestamps",
                "newPage": false,
                "searchKey": "trace_test.testBrokenTimestamps",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testBrokenTimestamps(t *testing.T, data []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testBrokenTimestamps(t *testing.T, data []byte)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
