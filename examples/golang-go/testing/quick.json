{
  "pathID": "/testing/quick",
  "documentation": {
    "identifier": "quick",
    "newPage": true,
    "searchKey": "testing/quick",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package quick"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package quick implements utility functions to help with black box testing. \n\nThe testing/quick package is frozen and is not accepting new features. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/testing/quick#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/testing/quick#complexSize",
              "documentation": {
                "identifier": "complexSize",
                "newPage": false,
                "searchKey": "quick.complexSize",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const complexSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst complexSize = 50\n```\n\ncomplexSize is the maximum length of arbitrary values that contain other values. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/testing/quick#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/testing/quick#defaultConfig",
              "documentation": {
                "identifier": "defaultConfig",
                "newPage": false,
                "searchKey": "quick.defaultConfig",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var defaultConfig"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar defaultConfig Config\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#defaultMaxCount",
              "documentation": {
                "identifier": "defaultMaxCount",
                "newPage": false,
                "searchKey": "quick.defaultMaxCount",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var defaultMaxCount"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar defaultMaxCount *int = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/testing/quick#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/testing/quick#A",
              "documentation": {
                "identifier": "A",
                "newPage": false,
                "searchKey": "quick.A",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type A struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype A struct{ B *B }\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#B",
              "documentation": {
                "identifier": "B",
                "newPage": false,
                "searchKey": "quick.B",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type B struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype B struct{ A *A }\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#CheckEqualError",
              "documentation": {
                "identifier": "CheckEqualError",
                "newPage": false,
                "searchKey": "quick.CheckEqualError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CheckEqualError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CheckEqualError struct {\n\tCheckError\n\tOut1 []interface{}\n\tOut2 []interface{}\n}\n```\n\nA CheckEqualError is the result CheckEqual finding an error. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#CheckEqualError.Error",
                    "documentation": {
                      "identifier": "CheckEqualError.Error",
                      "newPage": false,
                      "searchKey": "quick.CheckEqualError.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *CheckEqualError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *CheckEqualError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#CheckError",
              "documentation": {
                "identifier": "CheckError",
                "newPage": false,
                "searchKey": "quick.CheckError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CheckError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CheckError struct {\n\tCount int\n\tIn    []interface{}\n}\n```\n\nA CheckError is the result of Check finding an error. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#CheckError.Error",
                    "documentation": {
                      "identifier": "CheckError.Error",
                      "newPage": false,
                      "searchKey": "quick.CheckError.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *CheckError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *CheckError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#Config",
              "documentation": {
                "identifier": "Config",
                "newPage": false,
                "searchKey": "quick.Config",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Config struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Config struct {\n\t// MaxCount sets the maximum number of iterations.\n\t// If zero, MaxCountScale is used.\n\tMaxCount int\n\t// MaxCountScale is a non-negative scale factor applied to the\n\t// default maximum.\n\t// A count of zero implies the default, which is usually 100\n\t// but can be set by the -quickchecks flag.\n\tMaxCountScale float64\n\t// Rand specifies a source of random numbers.\n\t// If nil, a default pseudo-random source will be used.\n\tRand *rand.Rand\n\t// Values specifies a function to generate a slice of\n\t// arbitrary reflect.Values that are congruent with the\n\t// arguments to the function being tested.\n\t// If nil, the top-level Value function is used to generate them.\n\tValues func([]reflect.Value, *rand.Rand)\n}\n```\n\nA Config structure contains options for running a test. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#Config.getMaxCount",
                    "documentation": {
                      "identifier": "Config.getMaxCount",
                      "newPage": false,
                      "searchKey": "quick.Config.getMaxCount",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Config) getMaxCount() (maxCount int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Config) getMaxCount() (maxCount int)\n```\n\ngetMaxCount returns the maximum number of iterations to run for a given Config. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/testing/quick#Config.getRand",
                    "documentation": {
                      "identifier": "Config.getRand",
                      "newPage": false,
                      "searchKey": "quick.Config.getRand",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Config) getRand() *rand.Rand"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Config) getRand() *rand.Rand\n```\n\ngetRand returns the *rand.Rand to use for a given Config. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#Generator",
              "documentation": {
                "identifier": "Generator",
                "newPage": false,
                "searchKey": "quick.Generator",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Generator interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Generator interface {\n\t// Generate returns a random instance of the type on which it is a\n\t// method using the size as a size hint.\n\tGenerate(rand *rand.Rand, size int) reflect.Value\n}\n```\n\nA Generator can generate random values of its own type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#SetupError",
              "documentation": {
                "identifier": "SetupError",
                "newPage": false,
                "searchKey": "quick.SetupError",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SetupError string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SetupError string\n```\n\nA SetupError is the result of an error in the way that check is being used, independent of the functions being tested. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#SetupError.Error",
                    "documentation": {
                      "identifier": "SetupError.Error",
                      "newPage": false,
                      "searchKey": "quick.SetupError.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s SetupError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s SetupError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestArrayAlias",
              "documentation": {
                "identifier": "TestArrayAlias",
                "newPage": false,
                "searchKey": "quick.TestArrayAlias",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestArrayAlias [4]byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestArrayAlias [4]byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fArrayAlias",
                    "documentation": {
                      "identifier": "fArrayAlias",
                      "newPage": false,
                      "searchKey": "quick.fArrayAlias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fArrayAlias(a TestArrayAlias) TestArrayAlias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fArrayAlias(a TestArrayAlias) TestArrayAlias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestBoolAlias",
              "documentation": {
                "identifier": "TestBoolAlias",
                "newPage": false,
                "searchKey": "quick.TestBoolAlias",
                "tags": [
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestBoolAlias bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestBoolAlias bool\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fBoolAlias",
                    "documentation": {
                      "identifier": "fBoolAlias",
                      "newPage": false,
                      "searchKey": "quick.fBoolAlias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fBoolAlias(a TestBoolAlias) TestBoolAlias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fBoolAlias(a TestBoolAlias) TestBoolAlias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestComplex128Alias",
              "documentation": {
                "identifier": "TestComplex128Alias",
                "newPage": false,
                "searchKey": "quick.TestComplex128Alias",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestComplex128Alias complex128"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestComplex128Alias complex128\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fComplex128Alias",
                    "documentation": {
                      "identifier": "fComplex128Alias",
                      "newPage": false,
                      "searchKey": "quick.fComplex128Alias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fComplex128Alias(a TestComplex128Alias) TestComplex128Alias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fComplex128Alias(a TestComplex128Alias) TestComplex128Alias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestComplex64Alias",
              "documentation": {
                "identifier": "TestComplex64Alias",
                "newPage": false,
                "searchKey": "quick.TestComplex64Alias",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestComplex64Alias complex64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestComplex64Alias complex64\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fComplex64Alias",
                    "documentation": {
                      "identifier": "fComplex64Alias",
                      "newPage": false,
                      "searchKey": "quick.fComplex64Alias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fComplex64Alias(a TestComplex64Alias) TestComplex64Alias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fComplex64Alias(a TestComplex64Alias) TestComplex64Alias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestFloat32Alias",
              "documentation": {
                "identifier": "TestFloat32Alias",
                "newPage": false,
                "searchKey": "quick.TestFloat32Alias",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestFloat32Alias float32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestFloat32Alias float32\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fFloat32Alias",
                    "documentation": {
                      "identifier": "fFloat32Alias",
                      "newPage": false,
                      "searchKey": "quick.fFloat32Alias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fFloat32Alias(a TestFloat32Alias) TestFloat32Alias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fFloat32Alias(a TestFloat32Alias) TestFloat32Alias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestFloat64Alias",
              "documentation": {
                "identifier": "TestFloat64Alias",
                "newPage": false,
                "searchKey": "quick.TestFloat64Alias",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestFloat64Alias float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestFloat64Alias float64\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fFloat64Alias",
                    "documentation": {
                      "identifier": "fFloat64Alias",
                      "newPage": false,
                      "searchKey": "quick.fFloat64Alias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fFloat64Alias(a TestFloat64Alias) TestFloat64Alias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fFloat64Alias(a TestFloat64Alias) TestFloat64Alias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestInt16Alias",
              "documentation": {
                "identifier": "TestInt16Alias",
                "newPage": false,
                "searchKey": "quick.TestInt16Alias",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestInt16Alias int16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestInt16Alias int16\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fInt16Alias",
                    "documentation": {
                      "identifier": "fInt16Alias",
                      "newPage": false,
                      "searchKey": "quick.fInt16Alias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fInt16Alias(a TestInt16Alias) TestInt16Alias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fInt16Alias(a TestInt16Alias) TestInt16Alias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestInt32Alias",
              "documentation": {
                "identifier": "TestInt32Alias",
                "newPage": false,
                "searchKey": "quick.TestInt32Alias",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestInt32Alias int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestInt32Alias int32\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fInt32Alias",
                    "documentation": {
                      "identifier": "fInt32Alias",
                      "newPage": false,
                      "searchKey": "quick.fInt32Alias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fInt32Alias(a TestInt32Alias) TestInt32Alias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fInt32Alias(a TestInt32Alias) TestInt32Alias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestInt64Alias",
              "documentation": {
                "identifier": "TestInt64Alias",
                "newPage": false,
                "searchKey": "quick.TestInt64Alias",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestInt64Alias int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestInt64Alias int64\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fInt64Alias",
                    "documentation": {
                      "identifier": "fInt64Alias",
                      "newPage": false,
                      "searchKey": "quick.fInt64Alias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fInt64Alias(a TestInt64Alias) TestInt64Alias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fInt64Alias(a TestInt64Alias) TestInt64Alias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestInt8Alias",
              "documentation": {
                "identifier": "TestInt8Alias",
                "newPage": false,
                "searchKey": "quick.TestInt8Alias",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestInt8Alias int8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestInt8Alias int8\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fInt8Alias",
                    "documentation": {
                      "identifier": "fInt8Alias",
                      "newPage": false,
                      "searchKey": "quick.fInt8Alias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fInt8Alias(a TestInt8Alias) TestInt8Alias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fInt8Alias(a TestInt8Alias) TestInt8Alias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestIntAlias",
              "documentation": {
                "identifier": "TestIntAlias",
                "newPage": false,
                "searchKey": "quick.TestIntAlias",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestIntAlias int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestIntAlias int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fIntAlias",
                    "documentation": {
                      "identifier": "fIntAlias",
                      "newPage": false,
                      "searchKey": "quick.fIntAlias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fIntAlias(a TestIntAlias) TestIntAlias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fIntAlias(a TestIntAlias) TestIntAlias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestMapAlias",
              "documentation": {
                "identifier": "TestMapAlias",
                "newPage": false,
                "searchKey": "quick.TestMapAlias",
                "tags": [
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestMapAlias map[int]int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestMapAlias map[int]int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fMapAlias",
                    "documentation": {
                      "identifier": "fMapAlias",
                      "newPage": false,
                      "searchKey": "quick.fMapAlias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fMapAlias(a TestMapAlias) TestMapAlias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fMapAlias(a TestMapAlias) TestMapAlias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestPtrAlias",
              "documentation": {
                "identifier": "TestPtrAlias",
                "newPage": false,
                "searchKey": "quick.TestPtrAlias",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestPtrAlias *int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestPtrAlias *int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fPtrAlias",
                    "documentation": {
                      "identifier": "fPtrAlias",
                      "newPage": false,
                      "searchKey": "quick.fPtrAlias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fPtrAlias(a TestPtrAlias) TestPtrAlias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fPtrAlias(a TestPtrAlias) TestPtrAlias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestSliceAlias",
              "documentation": {
                "identifier": "TestSliceAlias",
                "newPage": false,
                "searchKey": "quick.TestSliceAlias",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestSliceAlias []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestSliceAlias []byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fSliceAlias",
                    "documentation": {
                      "identifier": "fSliceAlias",
                      "newPage": false,
                      "searchKey": "quick.fSliceAlias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fSliceAlias(a TestSliceAlias) TestSliceAlias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fSliceAlias(a TestSliceAlias) TestSliceAlias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestStringAlias",
              "documentation": {
                "identifier": "TestStringAlias",
                "newPage": false,
                "searchKey": "quick.TestStringAlias",
                "tags": [
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestStringAlias string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestStringAlias string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fStringAlias",
                    "documentation": {
                      "identifier": "fStringAlias",
                      "newPage": false,
                      "searchKey": "quick.fStringAlias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fStringAlias(a TestStringAlias) TestStringAlias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fStringAlias(a TestStringAlias) TestStringAlias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestStruct",
              "documentation": {
                "identifier": "TestStruct",
                "newPage": false,
                "searchKey": "quick.TestStruct",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestStruct struct {\n\tA int\n\tB string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fStruct",
                    "documentation": {
                      "identifier": "fStruct",
                      "newPage": false,
                      "searchKey": "quick.fStruct",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fStruct(a TestStruct) TestStruct"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fStruct(a TestStruct) TestStruct\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestStructAlias",
              "documentation": {
                "identifier": "TestStructAlias",
                "newPage": false,
                "searchKey": "quick.TestStructAlias",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestStructAlias quick.TestStruct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestStructAlias TestStruct\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fStructAlias",
                    "documentation": {
                      "identifier": "fStructAlias",
                      "newPage": false,
                      "searchKey": "quick.fStructAlias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fStructAlias(a TestStructAlias) TestStructAlias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fStructAlias(a TestStructAlias) TestStructAlias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestUint16Alias",
              "documentation": {
                "identifier": "TestUint16Alias",
                "newPage": false,
                "searchKey": "quick.TestUint16Alias",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestUint16Alias uint16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestUint16Alias uint16\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fUint16Alias",
                    "documentation": {
                      "identifier": "fUint16Alias",
                      "newPage": false,
                      "searchKey": "quick.fUint16Alias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fUint16Alias(a TestUint16Alias) TestUint16Alias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fUint16Alias(a TestUint16Alias) TestUint16Alias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestUint32Alias",
              "documentation": {
                "identifier": "TestUint32Alias",
                "newPage": false,
                "searchKey": "quick.TestUint32Alias",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestUint32Alias uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestUint32Alias uint32\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fUint32Alias",
                    "documentation": {
                      "identifier": "fUint32Alias",
                      "newPage": false,
                      "searchKey": "quick.fUint32Alias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fUint32Alias(a TestUint32Alias) TestUint32Alias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fUint32Alias(a TestUint32Alias) TestUint32Alias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestUint64Alias",
              "documentation": {
                "identifier": "TestUint64Alias",
                "newPage": false,
                "searchKey": "quick.TestUint64Alias",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestUint64Alias uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestUint64Alias uint64\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fUint64Alias",
                    "documentation": {
                      "identifier": "fUint64Alias",
                      "newPage": false,
                      "searchKey": "quick.fUint64Alias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fUint64Alias(a TestUint64Alias) TestUint64Alias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fUint64Alias(a TestUint64Alias) TestUint64Alias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestUint8Alias",
              "documentation": {
                "identifier": "TestUint8Alias",
                "newPage": false,
                "searchKey": "quick.TestUint8Alias",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestUint8Alias uint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestUint8Alias uint8\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fUint8Alias",
                    "documentation": {
                      "identifier": "fUint8Alias",
                      "newPage": false,
                      "searchKey": "quick.fUint8Alias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fUint8Alias(a TestUint8Alias) TestUint8Alias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fUint8Alias(a TestUint8Alias) TestUint8Alias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestUintAlias",
              "documentation": {
                "identifier": "TestUintAlias",
                "newPage": false,
                "searchKey": "quick.TestUintAlias",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestUintAlias uint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestUintAlias uint\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fUintAlias",
                    "documentation": {
                      "identifier": "fUintAlias",
                      "newPage": false,
                      "searchKey": "quick.fUintAlias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fUintAlias(a TestUintAlias) TestUintAlias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fUintAlias(a TestUintAlias) TestUintAlias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestUintptrAlias",
              "documentation": {
                "identifier": "TestUintptrAlias",
                "newPage": false,
                "searchKey": "quick.TestUintptrAlias",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestUintptrAlias uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestUintptrAlias uintptr\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#fUintptrAlias",
                    "documentation": {
                      "identifier": "fUintptrAlias",
                      "newPage": false,
                      "searchKey": "quick.fUintptrAlias",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fUintptrAlias(a TestUintptrAlias) TestUintptrAlias"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fUintptrAlias(a TestUintptrAlias) TestUintptrAlias\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#myStruct",
              "documentation": {
                "identifier": "myStruct",
                "newPage": false,
                "searchKey": "quick.myStruct",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type myStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype myStruct struct {\n\tx int\n}\n```\n\nThis tests that ArbitraryValue is working by checking that all the arbitrary values of type MyStruct have x = 42. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/testing/quick#myStruct.Generate",
                    "documentation": {
                      "identifier": "myStruct.Generate",
                      "newPage": false,
                      "searchKey": "quick.myStruct.Generate",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m myStruct) Generate(r *rand.Rand, _ int) reflect.Value"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m myStruct) Generate(r *rand.Rand, _ int) reflect.Value\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/testing/quick#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/testing/quick#Check",
              "documentation": {
                "identifier": "Check",
                "newPage": false,
                "searchKey": "quick.Check",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Check(f interface{}, config *Config) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Check(f interface{}, config *Config) error\n```\n\nCheck looks for an input to f, any function that returns bool, such that f returns false. It calls f repeatedly, with arbitrary values for each argument. If f returns false on a given input, Check returns that input as a *CheckError. For example: \n\n```\nfunc TestOddMultipleOfThree(t *testing.T) {\n\tf := func(x int) bool {\n\t\ty := OddMultipleOfThree(x)\n\t\treturn y%2 == 1 && y%3 == 0\n\t}\n\tif err := quick.Check(f, nil); err != nil {\n\t\tt.Error(err)\n\t}\n}\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#CheckEqual",
              "documentation": {
                "identifier": "CheckEqual",
                "newPage": false,
                "searchKey": "quick.CheckEqual",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func CheckEqual(f, g interface{}, config *Config) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CheckEqual(f, g interface{}, config *Config) error\n```\n\nCheckEqual looks for an input on which f and g return different results. It calls f and g repeatedly with arbitrary values for each argument. If f and g return different answers, CheckEqual returns a *CheckEqualError describing the input and the outputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestCheckEqual",
              "documentation": {
                "identifier": "TestCheckEqual",
                "newPage": false,
                "searchKey": "quick.TestCheckEqual",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCheckEqual(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCheckEqual(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestCheckProperty",
              "documentation": {
                "identifier": "TestCheckProperty",
                "newPage": false,
                "searchKey": "quick.TestCheckProperty",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCheckProperty(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCheckProperty(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestEmptyStruct",
              "documentation": {
                "identifier": "TestEmptyStruct",
                "newPage": false,
                "searchKey": "quick.TestEmptyStruct",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEmptyStruct(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEmptyStruct(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestFailure",
              "documentation": {
                "identifier": "TestFailure",
                "newPage": false,
                "searchKey": "quick.TestFailure",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFailure(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFailure(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestInt64",
              "documentation": {
                "identifier": "TestInt64",
                "newPage": false,
                "searchKey": "quick.TestInt64",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInt64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInt64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestMutuallyRecursive",
              "documentation": {
                "identifier": "TestMutuallyRecursive",
                "newPage": false,
                "searchKey": "quick.TestMutuallyRecursive",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMutuallyRecursive(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMutuallyRecursive(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestNonZeroSliceAndMap",
              "documentation": {
                "identifier": "TestNonZeroSliceAndMap",
                "newPage": false,
                "searchKey": "quick.TestNonZeroSliceAndMap",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNonZeroSliceAndMap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNonZeroSliceAndMap(t *testing.T)\n```\n\nSome serialization formats (e.g. encoding/pem) cannot distinguish between a nil and an empty map or slice, so avoid generating the zero value for these. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#TestRecursive",
              "documentation": {
                "identifier": "TestRecursive",
                "newPage": false,
                "searchKey": "quick.TestRecursive",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRecursive(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRecursive(t *testing.T)\n```\n\nRecursive data structures didn't terminate. Issues 8818 and 11148. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#Value",
              "documentation": {
                "identifier": "Value",
                "newPage": false,
                "searchKey": "quick.Value",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Value(t reflect.Type, rand *rand.Rand) (value reflect.Value, ok bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Value(t reflect.Type, rand *rand.Rand) (value reflect.Value, ok bool)\n```\n\nValue returns an arbitrary value of the given type. If the type implements the Generator interface, that will be used. Note: To create arbitrary values for structs, all the fields must be exported. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#arbitraryValues",
              "documentation": {
                "identifier": "arbitraryValues",
                "newPage": false,
                "searchKey": "quick.arbitraryValues",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func arbitraryValues(args []reflect.Value, f reflect.Type, config *Config, rand *rand.Rand) (err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc arbitraryValues(args []reflect.Value, f reflect.Type, config *Config, rand *rand.Rand) (err error)\n```\n\narbitraryValues writes Values to args such that args contains Values suitable for calling f. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fArray",
              "documentation": {
                "identifier": "fArray",
                "newPage": false,
                "searchKey": "quick.fArray",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fArray(a [4]byte) [4]byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fArray(a [4]byte) [4]byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fBool",
              "documentation": {
                "identifier": "fBool",
                "newPage": false,
                "searchKey": "quick.fBool",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fBool(a bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fBool(a bool) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fComplex128",
              "documentation": {
                "identifier": "fComplex128",
                "newPage": false,
                "searchKey": "quick.fComplex128",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fComplex128(a complex128) complex128"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fComplex128(a complex128) complex128\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fComplex64",
              "documentation": {
                "identifier": "fComplex64",
                "newPage": false,
                "searchKey": "quick.fComplex64",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fComplex64(a complex64) complex64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fComplex64(a complex64) complex64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fFloat32",
              "documentation": {
                "identifier": "fFloat32",
                "newPage": false,
                "searchKey": "quick.fFloat32",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fFloat32(a float32) float32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fFloat32(a float32) float32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fFloat64",
              "documentation": {
                "identifier": "fFloat64",
                "newPage": false,
                "searchKey": "quick.fFloat64",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fFloat64(a float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fFloat64(a float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fInt",
              "documentation": {
                "identifier": "fInt",
                "newPage": false,
                "searchKey": "quick.fInt",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fInt(a int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fInt(a int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fInt16",
              "documentation": {
                "identifier": "fInt16",
                "newPage": false,
                "searchKey": "quick.fInt16",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fInt16(a int16) int16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fInt16(a int16) int16\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fInt32",
              "documentation": {
                "identifier": "fInt32",
                "newPage": false,
                "searchKey": "quick.fInt32",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fInt32(a int32) int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fInt32(a int32) int32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fInt64",
              "documentation": {
                "identifier": "fInt64",
                "newPage": false,
                "searchKey": "quick.fInt64",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fInt64(a int64) int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fInt64(a int64) int64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fInt8",
              "documentation": {
                "identifier": "fInt8",
                "newPage": false,
                "searchKey": "quick.fInt8",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fInt8(a int8) int8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fInt8(a int8) int8\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fMap",
              "documentation": {
                "identifier": "fMap",
                "newPage": false,
                "searchKey": "quick.fMap",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fMap(a map[int]int) map[int]int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fMap(a map[int]int) map[int]int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fPtr",
              "documentation": {
                "identifier": "fPtr",
                "newPage": false,
                "searchKey": "quick.fPtr",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fPtr(a *int) *int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fPtr(a *int) *int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fSlice",
              "documentation": {
                "identifier": "fSlice",
                "newPage": false,
                "searchKey": "quick.fSlice",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fSlice(a []byte) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fSlice(a []byte) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fString",
              "documentation": {
                "identifier": "fString",
                "newPage": false,
                "searchKey": "quick.fString",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fString(a string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fString(a string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fUint",
              "documentation": {
                "identifier": "fUint",
                "newPage": false,
                "searchKey": "quick.fUint",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fUint(a uint) uint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fUint(a uint) uint\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fUint16",
              "documentation": {
                "identifier": "fUint16",
                "newPage": false,
                "searchKey": "quick.fUint16",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fUint16(a uint16) uint16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fUint16(a uint16) uint16\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fUint32",
              "documentation": {
                "identifier": "fUint32",
                "newPage": false,
                "searchKey": "quick.fUint32",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fUint32(a uint32) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fUint32(a uint32) uint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fUint64",
              "documentation": {
                "identifier": "fUint64",
                "newPage": false,
                "searchKey": "quick.fUint64",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fUint64(a uint64) uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fUint64(a uint64) uint64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fUint8",
              "documentation": {
                "identifier": "fUint8",
                "newPage": false,
                "searchKey": "quick.fUint8",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fUint8(a uint8) uint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fUint8(a uint8) uint8\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#fUintptr",
              "documentation": {
                "identifier": "fUintptr",
                "newPage": false,
                "searchKey": "quick.fUintptr",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fUintptr(a uintptr) uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fUintptr(a uintptr) uintptr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#functionAndType",
              "documentation": {
                "identifier": "functionAndType",
                "newPage": false,
                "searchKey": "quick.functionAndType",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func functionAndType(f interface{}) (v reflect.Value, t reflect.Type, ok bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc functionAndType(f interface{}) (v reflect.Value, t reflect.Type, ok bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#myStructProperty",
              "documentation": {
                "identifier": "myStructProperty",
                "newPage": false,
                "searchKey": "quick.myStructProperty",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func myStructProperty(in myStruct) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc myStructProperty(in myStruct) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#randFloat32",
              "documentation": {
                "identifier": "randFloat32",
                "newPage": false,
                "searchKey": "quick.randFloat32",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func randFloat32(rand *rand.Rand) float32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc randFloat32(rand *rand.Rand) float32\n```\n\nrandFloat32 generates a random float taking the full range of a float32. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#randFloat64",
              "documentation": {
                "identifier": "randFloat64",
                "newPage": false,
                "searchKey": "quick.randFloat64",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func randFloat64(rand *rand.Rand) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc randFloat64(rand *rand.Rand) float64\n```\n\nrandFloat64 generates a random float taking the full range of a float64. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#randInt64",
              "documentation": {
                "identifier": "randInt64",
                "newPage": false,
                "searchKey": "quick.randInt64",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func randInt64(rand *rand.Rand) int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc randInt64(rand *rand.Rand) int64\n```\n\nrandInt64 returns a random int64. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#reportError",
              "documentation": {
                "identifier": "reportError",
                "newPage": false,
                "searchKey": "quick.reportError",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func reportError(property string, err error, t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc reportError(property string, err error, t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#sizedValue",
              "documentation": {
                "identifier": "sizedValue",
                "newPage": false,
                "searchKey": "quick.sizedValue",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sizedValue(t reflect.Type, rand *rand.Rand, size int) (value reflect.Value, ok bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sizedValue(t reflect.Type, rand *rand.Rand, size int) (value reflect.Value, ok bool)\n```\n\nsizedValue returns an arbitrary value of the given type. The size hint is used for shrinking as a function of indirection level so that recursive data structures will terminate. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#toInterfaces",
              "documentation": {
                "identifier": "toInterfaces",
                "newPage": false,
                "searchKey": "quick.toInterfaces",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func toInterfaces(values []reflect.Value) []interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc toInterfaces(values []reflect.Value) []interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/testing/quick#toString",
              "documentation": {
                "identifier": "toString",
                "newPage": false,
                "searchKey": "quick.toString",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func toString(interfaces []interface{}) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc toString(interfaces []interface{}) string\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
