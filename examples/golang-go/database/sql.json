{
  "pathID": "/database/sql",
  "documentation": {
    "identifier": "sql",
    "newPage": true,
    "searchKey": "database/sql",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package sql"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package sql provides a generic interface around SQL (or SQL-like) databases. \n\nThe sql package must be used in conjunction with a database driver. See [https://golang.org/s/sqldrivers](https://golang.org/s/sqldrivers) for a list of drivers. \n\nDrivers that do not support context cancellation will not return until after the query is completed. \n\nFor usage examples, see the wiki page at [https://golang.org/s/sqlwiki](https://golang.org/s/sqlwiki). \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/database/sql#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/database/sql#LevelDefault",
              "documentation": {
                "identifier": "LevelDefault",
                "newPage": false,
                "searchKey": "sql.LevelDefault",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const LevelDefault"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst LevelDefault IsolationLevel = iota\n```\n\nVarious isolation levels that drivers may support in BeginTx. If a driver does not support a given isolation level an error may be returned. \n\nSee [https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels](https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#LevelLinearizable",
              "documentation": {
                "identifier": "LevelLinearizable",
                "newPage": false,
                "searchKey": "sql.LevelLinearizable",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const LevelLinearizable"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst LevelLinearizable\n```\n\nVarious isolation levels that drivers may support in BeginTx. If a driver does not support a given isolation level an error may be returned. \n\nSee [https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels](https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#LevelReadCommitted",
              "documentation": {
                "identifier": "LevelReadCommitted",
                "newPage": false,
                "searchKey": "sql.LevelReadCommitted",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const LevelReadCommitted"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst LevelReadCommitted\n```\n\nVarious isolation levels that drivers may support in BeginTx. If a driver does not support a given isolation level an error may be returned. \n\nSee [https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels](https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#LevelReadUncommitted",
              "documentation": {
                "identifier": "LevelReadUncommitted",
                "newPage": false,
                "searchKey": "sql.LevelReadUncommitted",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const LevelReadUncommitted"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst LevelReadUncommitted\n```\n\nVarious isolation levels that drivers may support in BeginTx. If a driver does not support a given isolation level an error may be returned. \n\nSee [https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels](https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#LevelRepeatableRead",
              "documentation": {
                "identifier": "LevelRepeatableRead",
                "newPage": false,
                "searchKey": "sql.LevelRepeatableRead",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const LevelRepeatableRead"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst LevelRepeatableRead\n```\n\nVarious isolation levels that drivers may support in BeginTx. If a driver does not support a given isolation level an error may be returned. \n\nSee [https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels](https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#LevelSerializable",
              "documentation": {
                "identifier": "LevelSerializable",
                "newPage": false,
                "searchKey": "sql.LevelSerializable",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const LevelSerializable"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst LevelSerializable\n```\n\nVarious isolation levels that drivers may support in BeginTx. If a driver does not support a given isolation level an error may be returned. \n\nSee [https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels](https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#LevelSnapshot",
              "documentation": {
                "identifier": "LevelSnapshot",
                "newPage": false,
                "searchKey": "sql.LevelSnapshot",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const LevelSnapshot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst LevelSnapshot\n```\n\nVarious isolation levels that drivers may support in BeginTx. If a driver does not support a given isolation level an error may be returned. \n\nSee [https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels](https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#LevelWriteCommitted",
              "documentation": {
                "identifier": "LevelWriteCommitted",
                "newPage": false,
                "searchKey": "sql.LevelWriteCommitted",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const LevelWriteCommitted"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst LevelWriteCommitted\n```\n\nVarious isolation levels that drivers may support in BeginTx. If a driver does not support a given isolation level an error may be returned. \n\nSee [https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels](https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#alwaysNewConn",
              "documentation": {
                "identifier": "alwaysNewConn",
                "newPage": false,
                "searchKey": "sql.alwaysNewConn",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const alwaysNewConn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst alwaysNewConn connReuseStrategy = iota\n```\n\nalwaysNewConn forces a new connection to the database. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#cachedOrNewConn",
              "documentation": {
                "identifier": "cachedOrNewConn",
                "newPage": false,
                "searchKey": "sql.cachedOrNewConn",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const cachedOrNewConn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst cachedOrNewConn\n```\n\ncachedOrNewConn returns a cached connection, if available, else waits for one to become available (if MaxOpenConns has been reached) or creates a new database connection. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#debugGetPut",
              "documentation": {
                "identifier": "debugGetPut",
                "newPage": false,
                "searchKey": "sql.debugGetPut",
                "tags": [
                  "constant",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const debugGetPut"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst debugGetPut = false\n```\n\ndebugGetPut determines whether getConn & putConn calls' stack traces are returned for more verbose crashes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#defaultMaxIdleConns",
              "documentation": {
                "identifier": "defaultMaxIdleConns",
                "newPage": false,
                "searchKey": "sql.defaultMaxIdleConns",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const defaultMaxIdleConns"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst defaultMaxIdleConns = 2\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#fakeDBName",
              "documentation": {
                "identifier": "fakeDBName",
                "newPage": false,
                "searchKey": "sql.fakeDBName",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const fakeDBName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst fakeDBName = \"foo\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#maxBadConnRetries",
              "documentation": {
                "identifier": "maxBadConnRetries",
                "newPage": false,
                "searchKey": "sql.maxBadConnRetries",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const maxBadConnRetries"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst maxBadConnRetries = 2\n```\n\nmaxBadConnRetries is the number of maximum retries if the driver returns driver.ErrBadConn to signal a broken connection before forcing a new connection to be opened. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/database/sql#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/database/sql#ErrConnDone",
              "documentation": {
                "identifier": "ErrConnDone",
                "newPage": false,
                "searchKey": "sql.ErrConnDone",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrConnDone"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrConnDone = errors.New(\"sql: connection is already closed\")\n```\n\nErrConnDone is returned by any operation that is performed on a connection that has already been returned to the connection pool. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#ErrNoRows",
              "documentation": {
                "identifier": "ErrNoRows",
                "newPage": false,
                "searchKey": "sql.ErrNoRows",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrNoRows"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrNoRows = errors.New(\"sql: no rows in result set\")\n```\n\nErrNoRows is returned by Scan when QueryRow doesn't return a row. In such a case, QueryRow returns a placeholder *Row value that defers this error until a Scan. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#ErrTxDone",
              "documentation": {
                "identifier": "ErrTxDone",
                "newPage": false,
                "searchKey": "sql.ErrTxDone",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrTxDone"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrTxDone = errors.New(\"sql: transaction has already been committed or rolled back\")\n```\n\nErrTxDone is returned by any operation that is performed on a transaction that has already been committed or rolled back. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#answer",
              "documentation": {
                "identifier": "answer",
                "newPage": false,
                "searchKey": "sql.answer",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var answer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar answer int64 = 42\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#atomicRowsCloseHook",
              "documentation": {
                "identifier": "atomicRowsCloseHook",
                "newPage": false,
                "searchKey": "sql.atomicRowsCloseHook",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var atomicRowsCloseHook"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar atomicRowsCloseHook atomic.Value // of func(*Rows, *error)\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#bypassRowsAwaitDone",
              "documentation": {
                "identifier": "bypassRowsAwaitDone",
                "newPage": false,
                "searchKey": "sql.bypassRowsAwaitDone",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bypassRowsAwaitDone"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bypassRowsAwaitDone = false\n```\n\nbypassRowsAwaitDone is only used for testing. If true, it will not close the Rows automatically from the context. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#chrisBirthday",
              "documentation": {
                "identifier": "chrisBirthday",
                "newPage": false,
                "searchKey": "sql.chrisBirthday",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var chrisBirthday"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar chrisBirthday = time.Unix(123456789, 0)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#connectionRequestQueueSize",
              "documentation": {
                "identifier": "connectionRequestQueueSize",
                "newPage": false,
                "searchKey": "sql.connectionRequestQueueSize",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var connectionRequestQueueSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar connectionRequestQueueSize = 1000000\n```\n\nThis is the size of the connectionOpener request chan (DB.openerCh). This value should be larger than the maximum typical value used for db.maxOpen. If maxOpen is significantly larger than connectionRequestQueueSize then it is possible for ALL calls into the *DB to block until the connectionOpener can satisfy the backlog of requests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#drivers",
              "documentation": {
                "identifier": "drivers",
                "newPage": false,
                "searchKey": "sql.drivers",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var drivers"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar drivers = make(map[string]driver.Driver)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#driversMu",
              "documentation": {
                "identifier": "driversMu",
                "newPage": false,
                "searchKey": "sql.driversMu",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var driversMu"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar driversMu sync.RWMutex\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#errClosed",
              "documentation": {
                "identifier": "errClosed",
                "newPage": false,
                "searchKey": "sql.errClosed",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errClosed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errClosed = errors.New(\"fakedb: statement has been closed\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#errDBClosed",
              "documentation": {
                "identifier": "errDBClosed",
                "newPage": false,
                "searchKey": "sql.errDBClosed",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errDBClosed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errDBClosed = errors.New(\"sql: database is closed\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#errFakeConnSessionDirty",
              "documentation": {
                "identifier": "errFakeConnSessionDirty",
                "newPage": false,
                "searchKey": "sql.errFakeConnSessionDirty",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errFakeConnSessionDirty"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errFakeConnSessionDirty = errors.New(\"fakedb: session is dirty\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#errNilPtr",
              "documentation": {
                "identifier": "errNilPtr",
                "newPage": false,
                "searchKey": "sql.errNilPtr",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errNilPtr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errNilPtr = errors.New(\"destination pointer is nil\") // embedded in descriptive error\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#errNoRows",
              "documentation": {
                "identifier": "errNoRows",
                "newPage": false,
                "searchKey": "sql.errNoRows",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errNoRows"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errNoRows = errors.New(\"sql: no Rows available\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#errRowsClosed",
              "documentation": {
                "identifier": "errRowsClosed",
                "newPage": false,
                "searchKey": "sql.errRowsClosed",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errRowsClosed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errRowsClosed = errors.New(\"sql: Rows are closed\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#errTestScanWrap",
              "documentation": {
                "identifier": "errTestScanWrap",
                "newPage": false,
                "searchKey": "sql.errTestScanWrap",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errTestScanWrap"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errTestScanWrap = errors.New(\"errTestScanWrap\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#fdriver",
              "documentation": {
                "identifier": "fdriver",
                "newPage": false,
                "searchKey": "sql.fdriver",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var fdriver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fdriver driver.Driver = &fakeDriver{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#hookCommitBadConn",
              "documentation": {
                "identifier": "hookCommitBadConn",
                "newPage": false,
                "searchKey": "sql.hookCommitBadConn",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var hookCommitBadConn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hookCommitBadConn func() bool\n```\n\nhook to simulate broken connections \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#hookExecBadConn",
              "documentation": {
                "identifier": "hookExecBadConn",
                "newPage": false,
                "searchKey": "sql.hookExecBadConn",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var hookExecBadConn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hookExecBadConn func() bool\n```\n\nhook to simulate broken connections \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#hookOpenErr",
              "documentation": {
                "identifier": "hookOpenErr",
                "newPage": false,
                "searchKey": "sql.hookOpenErr",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var hookOpenErr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hookOpenErr struct {\n\tsync.Mutex\n\tfn func() error\n}\n```\n\nhook to simulate connection failures \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#hookPostCloseConn",
              "documentation": {
                "identifier": "hookPostCloseConn",
                "newPage": false,
                "searchKey": "sql.hookPostCloseConn",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var hookPostCloseConn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hookPostCloseConn struct {\n\tsync.Mutex\n\tfn func(*fakeConn, error)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#hookPrepareBadConn",
              "documentation": {
                "identifier": "hookPrepareBadConn",
                "newPage": false,
                "searchKey": "sql.hookPrepareBadConn",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var hookPrepareBadConn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hookPrepareBadConn func() bool\n```\n\nhook to simulate broken connections \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#hookQueryBadConn",
              "documentation": {
                "identifier": "hookQueryBadConn",
                "newPage": false,
                "searchKey": "sql.hookQueryBadConn",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var hookQueryBadConn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hookQueryBadConn func() bool\n```\n\nhook to simulate broken connections \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#hookRollbackBadConn",
              "documentation": {
                "identifier": "hookRollbackBadConn",
                "newPage": false,
                "searchKey": "sql.hookRollbackBadConn",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var hookRollbackBadConn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hookRollbackBadConn func() bool\n```\n\nhook to simulate broken connections \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#hookTxGrabConn",
              "documentation": {
                "identifier": "hookTxGrabConn",
                "newPage": false,
                "searchKey": "sql.hookTxGrabConn",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var hookTxGrabConn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hookTxGrabConn func()\n```\n\nhookTxGrabConn specifies an optional hook to be called on a successful call to (*Tx).grabConn. For tests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#nowFunc",
              "documentation": {
                "identifier": "nowFunc",
                "newPage": false,
                "searchKey": "sql.nowFunc",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var nowFunc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nowFunc = time.Now\n```\n\nnowFunc returns the current time; it's overridden in tests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#pingError",
              "documentation": {
                "identifier": "pingError",
                "newPage": false,
                "searchKey": "sql.pingError",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var pingError"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pingError = errors.New(\"Ping failed\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#putConnHook",
              "documentation": {
                "identifier": "putConnHook",
                "newPage": false,
                "searchKey": "sql.putConnHook",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var putConnHook"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar putConnHook func(*DB, *driverConn)\n```\n\nputConnHook is a hook for testing. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#rollbackHook",
              "documentation": {
                "identifier": "rollbackHook",
                "newPage": false,
                "searchKey": "sql.rollbackHook",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var rollbackHook"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar rollbackHook func()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#rowsCloseHook",
              "documentation": {
                "identifier": "rowsCloseHook",
                "newPage": false,
                "searchKey": "sql.rowsCloseHook",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var rowsCloseHook"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar rowsCloseHook = func() func(*Rows, *error) { return nil }\n```\n\nrowsCloseHook returns a function so tests may install the hook through a test only mutex. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#rowsCursorNextHook",
              "documentation": {
                "identifier": "rowsCursorNextHook",
                "newPage": false,
                "searchKey": "sql.rowsCursorNextHook",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var rowsCursorNextHook"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar rowsCursorNextHook func(dest []driver.Value) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#scanbool",
              "documentation": {
                "identifier": "scanbool",
                "newPage": false,
                "searchKey": "sql.scanbool",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var scanbool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scanbool bool\n```\n\nTarget variables for scanning into. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#scanbytes",
              "documentation": {
                "identifier": "scanbytes",
                "newPage": false,
                "searchKey": "sql.scanbytes",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var scanbytes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scanbytes []byte\n```\n\nTarget variables for scanning into. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#scanf32",
              "documentation": {
                "identifier": "scanf32",
                "newPage": false,
                "searchKey": "sql.scanf32",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var scanf32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scanf32 float32\n```\n\nTarget variables for scanning into. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#scanf64",
              "documentation": {
                "identifier": "scanf64",
                "newPage": false,
                "searchKey": "sql.scanf64",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var scanf64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scanf64 float64\n```\n\nTarget variables for scanning into. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#scaniface",
              "documentation": {
                "identifier": "scaniface",
                "newPage": false,
                "searchKey": "sql.scaniface",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var scaniface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scaniface interface{}\n```\n\nTarget variables for scanning into. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#scanint",
              "documentation": {
                "identifier": "scanint",
                "newPage": false,
                "searchKey": "sql.scanint",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var scanint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scanint int\n```\n\nTarget variables for scanning into. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#scanint16",
              "documentation": {
                "identifier": "scanint16",
                "newPage": false,
                "searchKey": "sql.scanint16",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var scanint16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scanint16 int16\n```\n\nTarget variables for scanning into. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#scanint32",
              "documentation": {
                "identifier": "scanint32",
                "newPage": false,
                "searchKey": "sql.scanint32",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var scanint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scanint32 int32\n```\n\nTarget variables for scanning into. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#scanint8",
              "documentation": {
                "identifier": "scanint8",
                "newPage": false,
                "searchKey": "sql.scanint8",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var scanint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scanint8 int8\n```\n\nTarget variables for scanning into. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#scanptr",
              "documentation": {
                "identifier": "scanptr",
                "newPage": false,
                "searchKey": "sql.scanptr",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var scanptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scanptr *int64\n```\n\nTarget variables for scanning into. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#scanraw",
              "documentation": {
                "identifier": "scanraw",
                "newPage": false,
                "searchKey": "sql.scanraw",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var scanraw"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scanraw RawBytes\n```\n\nTarget variables for scanning into. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#scanstr",
              "documentation": {
                "identifier": "scanstr",
                "newPage": false,
                "searchKey": "sql.scanstr",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var scanstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scanstr string\n```\n\nTarget variables for scanning into. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#scantime",
              "documentation": {
                "identifier": "scantime",
                "newPage": false,
                "searchKey": "sql.scantime",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var scantime"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scantime time.Time\n```\n\nTarget variables for scanning into. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#scanuint16",
              "documentation": {
                "identifier": "scanuint16",
                "newPage": false,
                "searchKey": "sql.scanuint16",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var scanuint16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scanuint16 uint16\n```\n\nTarget variables for scanning into. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#scanuint8",
              "documentation": {
                "identifier": "scanuint8",
                "newPage": false,
                "searchKey": "sql.scanuint8",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var scanuint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scanuint8 uint8\n```\n\nTarget variables for scanning into. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#someTime",
              "documentation": {
                "identifier": "someTime",
                "newPage": false,
                "searchKey": "sql.someTime",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var someTime"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar someTime = time.Unix(123, 0)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#testStrictClose",
              "documentation": {
                "identifier": "testStrictClose",
                "newPage": false,
                "searchKey": "sql.testStrictClose",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var testStrictClose"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testStrictClose *testing.T\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#valueConverterTests",
              "documentation": {
                "identifier": "valueConverterTests",
                "newPage": false,
                "searchKey": "sql.valueConverterTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var valueConverterTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar valueConverterTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#valuerReflectType",
              "documentation": {
                "identifier": "valuerReflectType",
                "newPage": false,
                "searchKey": "sql.valuerReflectType",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var valuerReflectType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar valuerReflectType = reflect.TypeOf((*driver.Valuer)(nil)).Elem()\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/database/sql#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/database/sql#ColumnType",
              "documentation": {
                "identifier": "ColumnType",
                "newPage": false,
                "searchKey": "sql.ColumnType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ColumnType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ColumnType struct {\n\tname string\n\n\thasNullable       bool\n\thasLength         bool\n\thasPrecisionScale bool\n\n\tnullable     bool\n\tlength       int64\n\tdatabaseType string\n\tprecision    int64\n\tscale        int64\n\tscanType     reflect.Type\n}\n```\n\nColumnType contains the name and type of a column. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#ColumnType.DatabaseTypeName",
                    "documentation": {
                      "identifier": "ColumnType.DatabaseTypeName",
                      "newPage": false,
                      "searchKey": "sql.ColumnType.DatabaseTypeName",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ci *ColumnType) DatabaseTypeName() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ci *ColumnType) DatabaseTypeName() string\n```\n\nDatabaseTypeName returns the database system name of the column type. If an empty string is returned, then the driver type name is not supported. Consult your driver documentation for a list of driver data types. Length specifiers are not included. Common type names include \"VARCHAR\", \"TEXT\", \"NVARCHAR\", \"DECIMAL\", \"BOOL\", \"INT\", and \"BIGINT\". \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#ColumnType.DecimalSize",
                    "documentation": {
                      "identifier": "ColumnType.DecimalSize",
                      "newPage": false,
                      "searchKey": "sql.ColumnType.DecimalSize",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ci *ColumnType) DecimalSize() (precision, scale int64, ok bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ci *ColumnType) DecimalSize() (precision, scale int64, ok bool)\n```\n\nDecimalSize returns the scale and precision of a decimal type. If not applicable or if not supported ok is false. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#ColumnType.Length",
                    "documentation": {
                      "identifier": "ColumnType.Length",
                      "newPage": false,
                      "searchKey": "sql.ColumnType.Length",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ci *ColumnType) Length() (length int64, ok bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ci *ColumnType) Length() (length int64, ok bool)\n```\n\nLength returns the column type length for variable length column types such as text and binary field types. If the type length is unbounded the value will be math.MaxInt64 (any database limits will still apply). If the column type is not variable length, such as an int, or if not supported by the driver ok is false. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#ColumnType.Name",
                    "documentation": {
                      "identifier": "ColumnType.Name",
                      "newPage": false,
                      "searchKey": "sql.ColumnType.Name",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ci *ColumnType) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ci *ColumnType) Name() string\n```\n\nName returns the name or alias of the column. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#ColumnType.Nullable",
                    "documentation": {
                      "identifier": "ColumnType.Nullable",
                      "newPage": false,
                      "searchKey": "sql.ColumnType.Nullable",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ci *ColumnType) Nullable() (nullable, ok bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ci *ColumnType) Nullable() (nullable, ok bool)\n```\n\nNullable reports whether the column may be null. If a driver does not support this property ok will be false. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#ColumnType.ScanType",
                    "documentation": {
                      "identifier": "ColumnType.ScanType",
                      "newPage": false,
                      "searchKey": "sql.ColumnType.ScanType",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ci *ColumnType) ScanType() reflect.Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ci *ColumnType) ScanType() reflect.Type\n```\n\nScanType returns a Go type suitable for scanning into using Rows.Scan. If a driver does not support this property ScanType will return the type of an empty interface. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#Conn",
              "documentation": {
                "identifier": "Conn",
                "newPage": false,
                "searchKey": "sql.Conn",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Conn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Conn struct {\n\tdb *DB\n\n\t// closemu prevents the connection from closing while there\n\t// is an active query. It is held for read during queries\n\t// and exclusively during close.\n\tclosemu sync.RWMutex\n\n\t// dc is owned until close, at which point\n\t// it's returned to the connection pool.\n\tdc *driverConn\n\n\t// done transitions from 0 to 1 exactly once, on close.\n\t// Once done, all operations fail with ErrConnDone.\n\t// Use atomic operations on value when checking value.\n\tdone int32\n}\n```\n\nConn represents a single database connection rather than a pool of database connections. Prefer running queries from DB unless there is a specific need for a continuous single database connection. \n\nA Conn must call Close to return the connection to the database pool and may do so concurrently with a running query. \n\nAfter a call to Close, all operations on the connection fail with ErrConnDone. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#Conn.BeginTx",
                    "documentation": {
                      "identifier": "Conn.BeginTx",
                      "newPage": false,
                      "searchKey": "sql.Conn.BeginTx",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Conn) BeginTx(ctx context.Context, opts *TxOptions) (*Tx, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Conn) BeginTx(ctx context.Context, opts *TxOptions) (*Tx, error)\n```\n\nBeginTx starts a transaction. \n\nThe provided context is used until the transaction is committed or rolled back. If the context is canceled, the sql package will roll back the transaction. Tx.Commit will return an error if the context provided to BeginTx is canceled. \n\nThe provided TxOptions is optional and may be nil if defaults should be used. If a non-default isolation level is used that the driver doesn't support, an error will be returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Conn.Close",
                    "documentation": {
                      "identifier": "Conn.Close",
                      "newPage": false,
                      "searchKey": "sql.Conn.Close",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Conn) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Conn) Close() error\n```\n\nClose returns the connection to the connection pool. All operations after a Close will return with ErrConnDone. Close is safe to call concurrently with other operations and will block until all other operations finish. It may be useful to first cancel any used context and then call close directly after. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Conn.ExecContext",
                    "documentation": {
                      "identifier": "Conn.ExecContext",
                      "newPage": false,
                      "searchKey": "sql.Conn.ExecContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Conn) ExecContext(ctx context.Context, query string, args ...interface{}) (Result, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Conn) ExecContext(ctx context.Context, query string, args ...interface{}) (Result, error)\n```\n\nExecContext executes a query without returning any rows. The args are for any placeholder parameters in the query. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Conn.PingContext",
                    "documentation": {
                      "identifier": "Conn.PingContext",
                      "newPage": false,
                      "searchKey": "sql.Conn.PingContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Conn) PingContext(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Conn) PingContext(ctx context.Context) error\n```\n\nPingContext verifies the connection to the database is still alive. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Conn.PrepareContext",
                    "documentation": {
                      "identifier": "Conn.PrepareContext",
                      "newPage": false,
                      "searchKey": "sql.Conn.PrepareContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Conn) PrepareContext(ctx context.Context, query string) (*Stmt, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Conn) PrepareContext(ctx context.Context, query string) (*Stmt, error)\n```\n\nPrepareContext creates a prepared statement for later queries or executions. Multiple queries or executions may be run concurrently from the returned statement. The caller must call the statement's Close method when the statement is no longer needed. \n\nThe provided context is used for the preparation of the statement, not for the execution of the statement. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Conn.QueryContext",
                    "documentation": {
                      "identifier": "Conn.QueryContext",
                      "newPage": false,
                      "searchKey": "sql.Conn.QueryContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Conn) QueryContext(ctx context.Context, query string, args ...interface{}) (*Rows, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Conn) QueryContext(ctx context.Context, query string, args ...interface{}) (*Rows, error)\n```\n\nQueryContext executes a query that returns rows, typically a SELECT. The args are for any placeholder parameters in the query. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Conn.QueryRowContext",
                    "documentation": {
                      "identifier": "Conn.QueryRowContext",
                      "newPage": false,
                      "searchKey": "sql.Conn.QueryRowContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Conn) QueryRowContext(ctx context.Context, query string, args ...interface{}) *Row"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Conn) QueryRowContext(ctx context.Context, query string, args ...interface{}) *Row\n```\n\nQueryRowContext executes a query that is expected to return at most one row. QueryRowContext always returns a non-nil value. Errors are deferred until Row's Scan method is called. If the query selects no rows, the *Row's Scan will return ErrNoRows. Otherwise, the *Row's Scan scans the first selected row and discards the rest. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Conn.Raw",
                    "documentation": {
                      "identifier": "Conn.Raw",
                      "newPage": false,
                      "searchKey": "sql.Conn.Raw",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Conn) Raw(f func(driverConn interface{}) error) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Conn) Raw(f func(driverConn interface{}) error) (err error)\n```\n\nRaw executes f exposing the underlying driver connection for the duration of f. The driverConn must not be used outside of f. \n\nOnce f returns and err is nil, the Conn will continue to be usable until Conn.Close is called. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Conn.close",
                    "documentation": {
                      "identifier": "Conn.close",
                      "newPage": false,
                      "searchKey": "sql.Conn.close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Conn) close(err error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Conn) close(err error) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Conn.closemuRUnlockCondReleaseConn",
                    "documentation": {
                      "identifier": "Conn.closemuRUnlockCondReleaseConn",
                      "newPage": false,
                      "searchKey": "sql.Conn.closemuRUnlockCondReleaseConn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Conn) closemuRUnlockCondReleaseConn(err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Conn) closemuRUnlockCondReleaseConn(err error)\n```\n\nclosemuRUnlockCondReleaseConn read unlocks closemu as the sql operation is done with the dc. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Conn.grabConn",
                    "documentation": {
                      "identifier": "Conn.grabConn",
                      "newPage": false,
                      "searchKey": "sql.Conn.grabConn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Conn) grabConn(context.Context) (*driverConn, releaseConn, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Conn) grabConn(context.Context) (*driverConn, releaseConn, error)\n```\n\ngrabConn takes a context to implement stmtConnGrabber but the context is not used. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Conn.txCtx",
                    "documentation": {
                      "identifier": "Conn.txCtx",
                      "newPage": false,
                      "searchKey": "sql.Conn.txCtx",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Conn) txCtx() context.Context"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Conn) txCtx() context.Context\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#DB",
              "documentation": {
                "identifier": "DB",
                "newPage": false,
                "searchKey": "sql.DB",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DB struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DB struct {\n\t// Atomic access only. At top of struct to prevent mis-alignment\n\t// on 32-bit platforms. Of type time.Duration.\n\twaitDuration int64 // Total time waited for new connections.\n\n\tconnector driver.Connector\n\t// numClosed is an atomic counter which represents a total number of\n\t// closed connections. Stmt.openStmt checks it before cleaning closed\n\t// connections in Stmt.css.\n\tnumClosed uint64\n\n\tmu           sync.Mutex // protects following fields\n\tfreeConn     []*driverConn\n\tconnRequests map[uint64]chan connRequest\n\tnextRequest  uint64 // Next key to use in connRequests.\n\tnumOpen      int    // number of opened and pending open connections\n\t// Used to signal the need for new connections\n\t// a goroutine running connectionOpener() reads on this chan and\n\t// maybeOpenNewConnections sends on the chan (one send per needed connection)\n\t// It is closed during db.Close(). The close tells the connectionOpener\n\t// goroutine to exit.\n\topenerCh          chan struct{}\n\tclosed            bool\n\tdep               map[finalCloser]depSet\n\tlastPut           map[*driverConn]string // stacktrace of last conn's put; debug only\n\tmaxIdleCount      int                    // zero means defaultMaxIdleConns; negative means 0\n\tmaxOpen           int                    // <= 0 means unlimited\n\tmaxLifetime       time.Duration          // maximum amount of time a connection may be reused\n\tmaxIdleTime       time.Duration          // maximum amount of time a connection may be idle before being closed\n\tcleanerCh         chan struct{}\n\twaitCount         int64 // Total number of connections waited for.\n\tmaxIdleClosed     int64 // Total number of connections closed due to idle count.\n\tmaxIdleTimeClosed int64 // Total number of connections closed due to idle time.\n\tmaxLifetimeClosed int64 // Total number of connections closed due to max connection lifetime limit.\n\n\tstop func() // stop cancels the connection opener.\n}\n```\n\nDB is a database handle representing a pool of zero or more underlying connections. It's safe for concurrent use by multiple goroutines. \n\nThe sql package creates and frees connections automatically; it also maintains a free pool of idle connections. If the database has a concept of per-connection state, such state can be reliably observed within a transaction (Tx) or connection (Conn). Once DB.Begin is called, the returned Tx is bound to a single connection. Once Commit or Rollback is called on the transaction, that transaction's connection is returned to DB's idle connection pool. The pool size can be controlled with SetMaxIdleConns. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#Open",
                    "documentation": {
                      "identifier": "Open",
                      "newPage": false,
                      "searchKey": "sql.Open",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Open(driverName, dataSourceName string) (*DB, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Open(driverName, dataSourceName string) (*DB, error)\n```\n\nOpen opens a database specified by its database driver name and a driver-specific data source name, usually consisting of at least a database name and connection information. \n\nMost users will open a database via a driver-specific connection helper function that returns a *DB. No database drivers are included in the Go standard library. See [https://golang.org/s/sqldrivers](https://golang.org/s/sqldrivers) for a list of third-party drivers. \n\nOpen may just validate its arguments without creating a connection to the database. To verify that the data source name is valid, call Ping. \n\nThe returned DB is safe for concurrent use by multiple goroutines and maintains its own pool of idle connections. Thus, the Open function should be called just once. It is rarely necessary to close a DB. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#OpenDB",
                    "documentation": {
                      "identifier": "OpenDB",
                      "newPage": false,
                      "searchKey": "sql.OpenDB",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func OpenDB(c driver.Connector) *DB"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc OpenDB(c driver.Connector) *DB\n```\n\nOpenDB opens a database using a Connector, allowing drivers to bypass a string based data source name. \n\nMost users will open a database via a driver-specific connection helper function that returns a *DB. No database drivers are included in the Go standard library. See [https://golang.org/s/sqldrivers](https://golang.org/s/sqldrivers) for a list of third-party drivers. \n\nOpenDB may just validate its arguments without creating a connection to the database. To verify that the data source name is valid, call Ping. \n\nThe returned DB is safe for concurrent use by multiple goroutines and maintains its own pool of idle connections. Thus, the OpenDB function should be called just once. It is rarely necessary to close a DB. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#newTestDB",
                    "documentation": {
                      "identifier": "newTestDB",
                      "newPage": false,
                      "searchKey": "sql.newTestDB",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newTestDB(t testing.TB, name string) *DB"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newTestDB(t testing.TB, name string) *DB\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#newTestDBConnector",
                    "documentation": {
                      "identifier": "newTestDBConnector",
                      "newPage": false,
                      "searchKey": "sql.newTestDBConnector",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newTestDBConnector(t testing.TB, fc *fakeConnector, name string) *DB"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newTestDBConnector(t testing.TB, fc *fakeConnector, name string) *DB\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.Begin",
                    "documentation": {
                      "identifier": "DB.Begin",
                      "newPage": false,
                      "searchKey": "sql.DB.Begin",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) Begin() (*Tx, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) Begin() (*Tx, error)\n```\n\nBegin starts a transaction. The default isolation level is dependent on the driver. \n\nBegin uses context.Background internally; to specify the context, use BeginTx. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.BeginTx",
                    "documentation": {
                      "identifier": "DB.BeginTx",
                      "newPage": false,
                      "searchKey": "sql.DB.BeginTx",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) BeginTx(ctx context.Context, opts *TxOptions) (*Tx, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) BeginTx(ctx context.Context, opts *TxOptions) (*Tx, error)\n```\n\nBeginTx starts a transaction. \n\nThe provided context is used until the transaction is committed or rolled back. If the context is canceled, the sql package will roll back the transaction. Tx.Commit will return an error if the context provided to BeginTx is canceled. \n\nThe provided TxOptions is optional and may be nil if defaults should be used. If a non-default isolation level is used that the driver doesn't support, an error will be returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.Close",
                    "documentation": {
                      "identifier": "DB.Close",
                      "newPage": false,
                      "searchKey": "sql.DB.Close",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) Close() error\n```\n\nClose closes the database and prevents new queries from starting. Close then waits for all queries that have started processing on the server to finish. \n\nIt is rare to Close a DB, as the DB handle is meant to be long-lived and shared between many goroutines. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.Conn",
                    "documentation": {
                      "identifier": "DB.Conn",
                      "newPage": false,
                      "searchKey": "sql.DB.Conn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) Conn(ctx context.Context) (*Conn, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) Conn(ctx context.Context) (*Conn, error)\n```\n\nConn returns a single connection by either opening a new connection or returning an existing connection from the connection pool. Conn will block until either a connection is returned or ctx is canceled. Queries run on the same Conn will be run in the same database session. \n\nEvery Conn must be returned to the database pool after use by calling Conn.Close. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.Driver",
                    "documentation": {
                      "identifier": "DB.Driver",
                      "newPage": false,
                      "searchKey": "sql.DB.Driver",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) Driver() driver.Driver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) Driver() driver.Driver\n```\n\nDriver returns the database's underlying driver. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.Exec",
                    "documentation": {
                      "identifier": "DB.Exec",
                      "newPage": false,
                      "searchKey": "sql.DB.Exec",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) Exec(query string, args ...interface{}) (Result, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) Exec(query string, args ...interface{}) (Result, error)\n```\n\nExec executes a query without returning any rows. The args are for any placeholder parameters in the query. \n\nExec uses context.Background internally; to specify the context, use ExecContext. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.ExecContext",
                    "documentation": {
                      "identifier": "DB.ExecContext",
                      "newPage": false,
                      "searchKey": "sql.DB.ExecContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) ExecContext(ctx context.Context, query string, args ...interface{}) (Result, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) ExecContext(ctx context.Context, query string, args ...interface{}) (Result, error)\n```\n\nExecContext executes a query without returning any rows. The args are for any placeholder parameters in the query. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.Ping",
                    "documentation": {
                      "identifier": "DB.Ping",
                      "newPage": false,
                      "searchKey": "sql.DB.Ping",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) Ping() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) Ping() error\n```\n\nPing verifies a connection to the database is still alive, establishing a connection if necessary. \n\nPing uses context.Background internally; to specify the context, use PingContext. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.PingContext",
                    "documentation": {
                      "identifier": "DB.PingContext",
                      "newPage": false,
                      "searchKey": "sql.DB.PingContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) PingContext(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) PingContext(ctx context.Context) error\n```\n\nPingContext verifies a connection to the database is still alive, establishing a connection if necessary. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.Prepare",
                    "documentation": {
                      "identifier": "DB.Prepare",
                      "newPage": false,
                      "searchKey": "sql.DB.Prepare",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) Prepare(query string) (*Stmt, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) Prepare(query string) (*Stmt, error)\n```\n\nPrepare creates a prepared statement for later queries or executions. Multiple queries or executions may be run concurrently from the returned statement. The caller must call the statement's Close method when the statement is no longer needed. \n\nPrepare uses context.Background internally; to specify the context, use PrepareContext. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.PrepareContext",
                    "documentation": {
                      "identifier": "DB.PrepareContext",
                      "newPage": false,
                      "searchKey": "sql.DB.PrepareContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) PrepareContext(ctx context.Context, query string) (*Stmt, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) PrepareContext(ctx context.Context, query string) (*Stmt, error)\n```\n\nPrepareContext creates a prepared statement for later queries or executions. Multiple queries or executions may be run concurrently from the returned statement. The caller must call the statement's Close method when the statement is no longer needed. \n\nThe provided context is used for the preparation of the statement, not for the execution of the statement. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.Query",
                    "documentation": {
                      "identifier": "DB.Query",
                      "newPage": false,
                      "searchKey": "sql.DB.Query",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) Query(query string, args ...interface{}) (*Rows, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) Query(query string, args ...interface{}) (*Rows, error)\n```\n\nQuery executes a query that returns rows, typically a SELECT. The args are for any placeholder parameters in the query. \n\nQuery uses context.Background internally; to specify the context, use QueryContext. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.QueryContext",
                    "documentation": {
                      "identifier": "DB.QueryContext",
                      "newPage": false,
                      "searchKey": "sql.DB.QueryContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) QueryContext(ctx context.Context, query string, args ...interface{}) (*Rows, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) QueryContext(ctx context.Context, query string, args ...interface{}) (*Rows, error)\n```\n\nQueryContext executes a query that returns rows, typically a SELECT. The args are for any placeholder parameters in the query. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.QueryRow",
                    "documentation": {
                      "identifier": "DB.QueryRow",
                      "newPage": false,
                      "searchKey": "sql.DB.QueryRow",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) QueryRow(query string, args ...interface{}) *Row"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) QueryRow(query string, args ...interface{}) *Row\n```\n\nQueryRow executes a query that is expected to return at most one row. QueryRow always returns a non-nil value. Errors are deferred until Row's Scan method is called. If the query selects no rows, the *Row's Scan will return ErrNoRows. Otherwise, the *Row's Scan scans the first selected row and discards the rest. \n\nQueryRow uses context.Background internally; to specify the context, use QueryRowContext. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.QueryRowContext",
                    "documentation": {
                      "identifier": "DB.QueryRowContext",
                      "newPage": false,
                      "searchKey": "sql.DB.QueryRowContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) QueryRowContext(ctx context.Context, query string, args ...interface{}) *Row"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) QueryRowContext(ctx context.Context, query string, args ...interface{}) *Row\n```\n\nQueryRowContext executes a query that is expected to return at most one row. QueryRowContext always returns a non-nil value. Errors are deferred until Row's Scan method is called. If the query selects no rows, the *Row's Scan will return ErrNoRows. Otherwise, the *Row's Scan scans the first selected row and discards the rest. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.SetConnMaxIdleTime",
                    "documentation": {
                      "identifier": "DB.SetConnMaxIdleTime",
                      "newPage": false,
                      "searchKey": "sql.DB.SetConnMaxIdleTime",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) SetConnMaxIdleTime(d time.Duration)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) SetConnMaxIdleTime(d time.Duration)\n```\n\nSetConnMaxIdleTime sets the maximum amount of time a connection may be idle. \n\nExpired connections may be closed lazily before reuse. \n\nIf d <= 0, connections are not closed due to a connection's idle time. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.SetConnMaxLifetime",
                    "documentation": {
                      "identifier": "DB.SetConnMaxLifetime",
                      "newPage": false,
                      "searchKey": "sql.DB.SetConnMaxLifetime",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) SetConnMaxLifetime(d time.Duration)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) SetConnMaxLifetime(d time.Duration)\n```\n\nSetConnMaxLifetime sets the maximum amount of time a connection may be reused. \n\nExpired connections may be closed lazily before reuse. \n\nIf d <= 0, connections are not closed due to a connection's age. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.SetMaxIdleConns",
                    "documentation": {
                      "identifier": "DB.SetMaxIdleConns",
                      "newPage": false,
                      "searchKey": "sql.DB.SetMaxIdleConns",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) SetMaxIdleConns(n int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) SetMaxIdleConns(n int)\n```\n\nSetMaxIdleConns sets the maximum number of connections in the idle connection pool. \n\nIf MaxOpenConns is greater than 0 but less than the new MaxIdleConns, then the new MaxIdleConns will be reduced to match the MaxOpenConns limit. \n\nIf n <= 0, no idle connections are retained. \n\nThe default max idle connections is currently 2. This may change in a future release. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.SetMaxOpenConns",
                    "documentation": {
                      "identifier": "DB.SetMaxOpenConns",
                      "newPage": false,
                      "searchKey": "sql.DB.SetMaxOpenConns",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) SetMaxOpenConns(n int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) SetMaxOpenConns(n int)\n```\n\nSetMaxOpenConns sets the maximum number of open connections to the database. \n\nIf MaxIdleConns is greater than 0 and the new MaxOpenConns is less than MaxIdleConns, then MaxIdleConns will be reduced to match the new MaxOpenConns limit. \n\nIf n <= 0, then there is no limit on the number of open connections. The default is 0 (unlimited). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.Stats",
                    "documentation": {
                      "identifier": "DB.Stats",
                      "newPage": false,
                      "searchKey": "sql.DB.Stats",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) Stats() DBStats"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) Stats() DBStats\n```\n\nStats returns database statistics. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.addDep",
                    "documentation": {
                      "identifier": "DB.addDep",
                      "newPage": false,
                      "searchKey": "sql.DB.addDep",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) addDep(x finalCloser, dep interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) addDep(x finalCloser, dep interface{})\n```\n\naddDep notes that x now depends on dep, and x's finalClose won't be called until all of x's dependencies are removed with removeDep. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.addDepLocked",
                    "documentation": {
                      "identifier": "DB.addDepLocked",
                      "newPage": false,
                      "searchKey": "sql.DB.addDepLocked",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) addDepLocked(x finalCloser, dep interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) addDepLocked(x finalCloser, dep interface{})\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.begin",
                    "documentation": {
                      "identifier": "DB.begin",
                      "newPage": false,
                      "searchKey": "sql.DB.begin",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) begin(ctx context.Context, opts *TxOptions, strategy connReuseStrategy) (tx *Tx, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) begin(ctx context.Context, opts *TxOptions, strategy connReuseStrategy) (tx *Tx, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.beginDC",
                    "documentation": {
                      "identifier": "DB.beginDC",
                      "newPage": false,
                      "searchKey": "sql.DB.beginDC",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) beginDC(ctx context.Context, dc *driverConn, release func(error), opts *TxOptions) (tx *Tx, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) beginDC(ctx context.Context, dc *driverConn, release func(error), opts *TxOptions) (tx *Tx, err error)\n```\n\nbeginDC starts a transaction. The provided dc must be valid and ready to use. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.clearAllConns",
                    "documentation": {
                      "identifier": "DB.clearAllConns",
                      "newPage": false,
                      "searchKey": "sql.DB.clearAllConns",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) clearAllConns(t *testing.T)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) clearAllConns(t *testing.T)\n```\n\nclearAllConns closes all connections in db. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.conn",
                    "documentation": {
                      "identifier": "DB.conn",
                      "newPage": false,
                      "searchKey": "sql.DB.conn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) conn(ctx context.Context, strategy connReuseStrategy) (*driverConn, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) conn(ctx context.Context, strategy connReuseStrategy) (*driverConn, error)\n```\n\nconn returns a newly-opened or cached *driverConn. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.connectionCleaner",
                    "documentation": {
                      "identifier": "DB.connectionCleaner",
                      "newPage": false,
                      "searchKey": "sql.DB.connectionCleaner",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) connectionCleaner(d time.Duration)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) connectionCleaner(d time.Duration)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.connectionCleanerRunLocked",
                    "documentation": {
                      "identifier": "DB.connectionCleanerRunLocked",
                      "newPage": false,
                      "searchKey": "sql.DB.connectionCleanerRunLocked",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) connectionCleanerRunLocked() (closing []*driverConn)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) connectionCleanerRunLocked() (closing []*driverConn)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.connectionOpener",
                    "documentation": {
                      "identifier": "DB.connectionOpener",
                      "newPage": false,
                      "searchKey": "sql.DB.connectionOpener",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) connectionOpener(ctx context.Context)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) connectionOpener(ctx context.Context)\n```\n\nRuns in a separate goroutine, opens new connections when requested. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.dumpDep",
                    "documentation": {
                      "identifier": "DB.dumpDep",
                      "newPage": false,
                      "searchKey": "sql.DB.dumpDep",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) dumpDep(t *testing.T, depth int, dep finalCloser, seen map[finalCloser]bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) dumpDep(t *testing.T, depth int, dep finalCloser, seen map[finalCloser]bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.dumpDeps",
                    "documentation": {
                      "identifier": "DB.dumpDeps",
                      "newPage": false,
                      "searchKey": "sql.DB.dumpDeps",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) dumpDeps(t *testing.T)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) dumpDeps(t *testing.T)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.exec",
                    "documentation": {
                      "identifier": "DB.exec",
                      "newPage": false,
                      "searchKey": "sql.DB.exec",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) exec(ctx context.Context, query string, args []interface{}, strategy connReuseStrategy) (Result, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) exec(ctx context.Context, query string, args []interface{}, strategy connReuseStrategy) (Result, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.execDC",
                    "documentation": {
                      "identifier": "DB.execDC",
                      "newPage": false,
                      "searchKey": "sql.DB.execDC",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) execDC(ctx context.Context, dc *driverConn, release func(error), query string, args []interface{}) (res Result, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) execDC(ctx context.Context, dc *driverConn, release func(error), query string, args []interface{}) (res Result, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.maxIdleConnsLocked",
                    "documentation": {
                      "identifier": "DB.maxIdleConnsLocked",
                      "newPage": false,
                      "searchKey": "sql.DB.maxIdleConnsLocked",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) maxIdleConnsLocked() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) maxIdleConnsLocked() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.maybeOpenNewConnections",
                    "documentation": {
                      "identifier": "DB.maybeOpenNewConnections",
                      "newPage": false,
                      "searchKey": "sql.DB.maybeOpenNewConnections",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) maybeOpenNewConnections()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) maybeOpenNewConnections()\n```\n\nAssumes db.mu is locked. If there are connRequests and the connection limit hasn't been reached, then tell the connectionOpener to open new connections. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.nextRequestKeyLocked",
                    "documentation": {
                      "identifier": "DB.nextRequestKeyLocked",
                      "newPage": false,
                      "searchKey": "sql.DB.nextRequestKeyLocked",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) nextRequestKeyLocked() uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) nextRequestKeyLocked() uint64\n```\n\nnextRequestKeyLocked returns the next connection request key. It is assumed that nextRequest will not overflow. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.noteUnusedDriverStatement",
                    "documentation": {
                      "identifier": "DB.noteUnusedDriverStatement",
                      "newPage": false,
                      "searchKey": "sql.DB.noteUnusedDriverStatement",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) noteUnusedDriverStatement(c *driverConn, ds *driverStmt)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) noteUnusedDriverStatement(c *driverConn, ds *driverStmt)\n```\n\nnoteUnusedDriverStatement notes that ds is no longer used and should be closed whenever possible (when c is next not in use), unless c is already closed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.numDeps",
                    "documentation": {
                      "identifier": "DB.numDeps",
                      "newPage": false,
                      "searchKey": "sql.DB.numDeps",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) numDeps() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) numDeps() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.numDepsPollUntil",
                    "documentation": {
                      "identifier": "DB.numDepsPollUntil",
                      "newPage": false,
                      "searchKey": "sql.DB.numDepsPollUntil",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) numDepsPollUntil(want int, d time.Duration) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) numDepsPollUntil(want int, d time.Duration) int\n```\n\nDependencies are closed via a goroutine, so this polls waiting for numDeps to fall to want, waiting up to d. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.numFreeConns",
                    "documentation": {
                      "identifier": "DB.numFreeConns",
                      "newPage": false,
                      "searchKey": "sql.DB.numFreeConns",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) numFreeConns() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) numFreeConns() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.numOpenConns",
                    "documentation": {
                      "identifier": "DB.numOpenConns",
                      "newPage": false,
                      "searchKey": "sql.DB.numOpenConns",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) numOpenConns() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) numOpenConns() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.openNewConnection",
                    "documentation": {
                      "identifier": "DB.openNewConnection",
                      "newPage": false,
                      "searchKey": "sql.DB.openNewConnection",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) openNewConnection(ctx context.Context)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) openNewConnection(ctx context.Context)\n```\n\nOpen one new connection \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.pingDC",
                    "documentation": {
                      "identifier": "DB.pingDC",
                      "newPage": false,
                      "searchKey": "sql.DB.pingDC",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) pingDC(ctx context.Context, dc *driverConn, release func(error)) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) pingDC(ctx context.Context, dc *driverConn, release func(error)) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.prepare",
                    "documentation": {
                      "identifier": "DB.prepare",
                      "newPage": false,
                      "searchKey": "sql.DB.prepare",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) prepare(ctx context.Context, query string, strategy connReuseStrategy) (*Stmt, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) prepare(ctx context.Context, query string, strategy connReuseStrategy) (*Stmt, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.prepareDC",
                    "documentation": {
                      "identifier": "DB.prepareDC",
                      "newPage": false,
                      "searchKey": "sql.DB.prepareDC",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) prepareDC(ctx context.Context, dc *driverConn, release func(error), cg stmtConnGrabber, query string) (*Stmt, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) prepareDC(ctx context.Context, dc *driverConn, release func(error), cg stmtConnGrabber, query string) (*Stmt, error)\n```\n\nprepareDC prepares a query on the driverConn and calls release before returning. When cg == nil it implies that a connection pool is used, and when cg != nil only a single driver connection is used. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.putConn",
                    "documentation": {
                      "identifier": "DB.putConn",
                      "newPage": false,
                      "searchKey": "sql.DB.putConn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) putConn(dc *driverConn, err error, resetSession bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) putConn(dc *driverConn, err error, resetSession bool)\n```\n\nputConn adds a connection to the db's free pool. err is optionally the last error that occurred on this connection. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.putConnDBLocked",
                    "documentation": {
                      "identifier": "DB.putConnDBLocked",
                      "newPage": false,
                      "searchKey": "sql.DB.putConnDBLocked",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) putConnDBLocked(dc *driverConn, err error) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) putConnDBLocked(dc *driverConn, err error) bool\n```\n\nSatisfy a connRequest or put the driverConn in the idle pool and return true or return false. putConnDBLocked will satisfy a connRequest if there is one, or it will return the *driverConn to the freeConn list if err == nil and the idle connection limit will not be exceeded. If err != nil, the value of dc is ignored. If err == nil, then dc must not equal nil. If a connRequest was fulfilled or the *driverConn was placed in the freeConn list, then true is returned, otherwise false is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.query",
                    "documentation": {
                      "identifier": "DB.query",
                      "newPage": false,
                      "searchKey": "sql.DB.query",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) query(ctx context.Context, query string, args []interface{}, strategy connReuseStrategy) (*Rows, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) query(ctx context.Context, query string, args []interface{}, strategy connReuseStrategy) (*Rows, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.queryDC",
                    "documentation": {
                      "identifier": "DB.queryDC",
                      "newPage": false,
                      "searchKey": "sql.DB.queryDC",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) queryDC(ctx, txctx context.Context, dc *driverConn, releaseConn func(error), query string, args []interface{}) (*Rows, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) queryDC(ctx, txctx context.Context, dc *driverConn, releaseConn func(error), query string, args []interface{}) (*Rows, error)\n```\n\nqueryDC executes a query on the given connection. The connection gets released by the releaseConn function. The ctx context is from a query method and the txctx context is from an optional transaction context. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.removeDep",
                    "documentation": {
                      "identifier": "DB.removeDep",
                      "newPage": false,
                      "searchKey": "sql.DB.removeDep",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) removeDep(x finalCloser, dep interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) removeDep(x finalCloser, dep interface{}) error\n```\n\nremoveDep notes that x no longer depends on dep. If x still has dependencies, nil is returned. If x no longer has any dependencies, its finalClose method will be called and its error value will be returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.removeDepLocked",
                    "documentation": {
                      "identifier": "DB.removeDepLocked",
                      "newPage": false,
                      "searchKey": "sql.DB.removeDepLocked",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) removeDepLocked(x finalCloser, dep interface{}) func() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) removeDepLocked(x finalCloser, dep interface{}) func() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.shortestIdleTimeLocked",
                    "documentation": {
                      "identifier": "DB.shortestIdleTimeLocked",
                      "newPage": false,
                      "searchKey": "sql.DB.shortestIdleTimeLocked",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) shortestIdleTimeLocked() time.Duration"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) shortestIdleTimeLocked() time.Duration\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#DB.startCleanerLocked",
                    "documentation": {
                      "identifier": "DB.startCleanerLocked",
                      "newPage": false,
                      "searchKey": "sql.DB.startCleanerLocked",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *DB) startCleanerLocked()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *DB) startCleanerLocked()\n```\n\nstartCleanerLocked starts connectionCleaner if needed. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#DBStats",
              "documentation": {
                "identifier": "DBStats",
                "newPage": false,
                "searchKey": "sql.DBStats",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DBStats struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DBStats struct {\n\tMaxOpenConnections int // Maximum number of open connections to the database.\n\n\t// Pool Status\n\tOpenConnections int // The number of established connections both in use and idle.\n\tInUse           int // The number of connections currently in use.\n\tIdle            int // The number of idle connections.\n\n\t// Counters\n\tWaitCount         int64         // The total number of connections waited for.\n\tWaitDuration      time.Duration // The total time blocked waiting for a new connection.\n\tMaxIdleClosed     int64         // The total number of connections closed due to SetMaxIdleConns.\n\tMaxIdleTimeClosed int64         // The total number of connections closed due to SetConnMaxIdleTime.\n\tMaxLifetimeClosed int64         // The total number of connections closed due to SetConnMaxLifetime.\n}\n```\n\nDBStats contains database statistics. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#Dummy",
              "documentation": {
                "identifier": "Dummy",
                "newPage": false,
                "searchKey": "sql.Dummy",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Dummy struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Dummy struct {\n\tdriver.Driver\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#IsolationLevel",
              "documentation": {
                "identifier": "IsolationLevel",
                "newPage": false,
                "searchKey": "sql.IsolationLevel",
                "tags": [
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IsolationLevel int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IsolationLevel int\n```\n\nIsolationLevel is the transaction isolation level used in TxOptions. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#IsolationLevel.String",
                    "documentation": {
                      "identifier": "IsolationLevel.String",
                      "newPage": false,
                      "searchKey": "sql.IsolationLevel.String",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i IsolationLevel) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i IsolationLevel) String() string\n```\n\nString returns the name of the transaction isolation level. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#NamedArg",
              "documentation": {
                "identifier": "NamedArg",
                "newPage": false,
                "searchKey": "sql.NamedArg",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NamedArg struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NamedArg struct {\n\t_Named_Fields_Required struct{}\n\n\t// Name is the name of the parameter placeholder.\n\t//\n\t// If empty, the ordinal position in the argument list will be\n\t// used.\n\t//\n\t// Name must omit any symbol prefix.\n\tName string\n\n\t// Value is the value of the parameter.\n\t// It may be assigned the same value types as the query\n\t// arguments.\n\tValue interface{}\n}\n```\n\nA NamedArg is a named argument. NamedArg values may be used as arguments to Query or Exec and bind to the corresponding named parameter in the SQL statement. \n\nFor a more concise way to create NamedArg values, see the Named function. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#Named",
                    "documentation": {
                      "identifier": "Named",
                      "newPage": false,
                      "searchKey": "sql.Named",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Named(name string, value interface{}) NamedArg"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Named(name string, value interface{}) NamedArg\n```\n\nNamed provides a more concise way to create NamedArg values. \n\nExample usage: \n\n```\ndb.ExecContext(ctx, `\n    delete from Invoice\n    where\n        TimeCreated < @end\n        and TimeCreated >= @start;`,\n    sql.Named(\"start\", startTime),\n    sql.Named(\"end\", endTime),\n)\n\n```\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#NullBool",
              "documentation": {
                "identifier": "NullBool",
                "newPage": false,
                "searchKey": "sql.NullBool",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NullBool struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NullBool struct {\n\tBool  bool\n\tValid bool // Valid is true if Bool is not NULL\n}\n```\n\nNullBool represents a bool that may be null. NullBool implements the Scanner interface so it can be used as a scan destination, similar to NullString. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#NullBool.Scan",
                    "documentation": {
                      "identifier": "NullBool.Scan",
                      "newPage": false,
                      "searchKey": "sql.NullBool.Scan",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *NullBool) Scan(value interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *NullBool) Scan(value interface{}) error\n```\n\nScan implements the Scanner interface. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#NullBool.Value",
                    "documentation": {
                      "identifier": "NullBool.Value",
                      "newPage": false,
                      "searchKey": "sql.NullBool.Value",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n NullBool) Value() (driver.Value, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n NullBool) Value() (driver.Value, error)\n```\n\nValue implements the driver Valuer interface. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#NullByte",
              "documentation": {
                "identifier": "NullByte",
                "newPage": false,
                "searchKey": "sql.NullByte",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NullByte struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NullByte struct {\n\tByte  byte\n\tValid bool // Valid is true if Byte is not NULL\n}\n```\n\nNullByte represents a byte that may be null. NullByte implements the Scanner interface so it can be used as a scan destination, similar to NullString. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#NullByte.Scan",
                    "documentation": {
                      "identifier": "NullByte.Scan",
                      "newPage": false,
                      "searchKey": "sql.NullByte.Scan",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *NullByte) Scan(value interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *NullByte) Scan(value interface{}) error\n```\n\nScan implements the Scanner interface. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#NullByte.Value",
                    "documentation": {
                      "identifier": "NullByte.Value",
                      "newPage": false,
                      "searchKey": "sql.NullByte.Value",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n NullByte) Value() (driver.Value, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n NullByte) Value() (driver.Value, error)\n```\n\nValue implements the driver Valuer interface. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#NullFloat64",
              "documentation": {
                "identifier": "NullFloat64",
                "newPage": false,
                "searchKey": "sql.NullFloat64",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NullFloat64 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NullFloat64 struct {\n\tFloat64 float64\n\tValid   bool // Valid is true if Float64 is not NULL\n}\n```\n\nNullFloat64 represents a float64 that may be null. NullFloat64 implements the Scanner interface so it can be used as a scan destination, similar to NullString. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#NullFloat64.Scan",
                    "documentation": {
                      "identifier": "NullFloat64.Scan",
                      "newPage": false,
                      "searchKey": "sql.NullFloat64.Scan",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *NullFloat64) Scan(value interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *NullFloat64) Scan(value interface{}) error\n```\n\nScan implements the Scanner interface. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#NullFloat64.Value",
                    "documentation": {
                      "identifier": "NullFloat64.Value",
                      "newPage": false,
                      "searchKey": "sql.NullFloat64.Value",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n NullFloat64) Value() (driver.Value, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n NullFloat64) Value() (driver.Value, error)\n```\n\nValue implements the driver Valuer interface. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#NullInt16",
              "documentation": {
                "identifier": "NullInt16",
                "newPage": false,
                "searchKey": "sql.NullInt16",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NullInt16 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NullInt16 struct {\n\tInt16 int16\n\tValid bool // Valid is true if Int16 is not NULL\n}\n```\n\nNullInt16 represents an int16 that may be null. NullInt16 implements the Scanner interface so it can be used as a scan destination, similar to NullString. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#NullInt16.Scan",
                    "documentation": {
                      "identifier": "NullInt16.Scan",
                      "newPage": false,
                      "searchKey": "sql.NullInt16.Scan",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *NullInt16) Scan(value interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *NullInt16) Scan(value interface{}) error\n```\n\nScan implements the Scanner interface. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#NullInt16.Value",
                    "documentation": {
                      "identifier": "NullInt16.Value",
                      "newPage": false,
                      "searchKey": "sql.NullInt16.Value",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n NullInt16) Value() (driver.Value, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n NullInt16) Value() (driver.Value, error)\n```\n\nValue implements the driver Valuer interface. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#NullInt32",
              "documentation": {
                "identifier": "NullInt32",
                "newPage": false,
                "searchKey": "sql.NullInt32",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NullInt32 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NullInt32 struct {\n\tInt32 int32\n\tValid bool // Valid is true if Int32 is not NULL\n}\n```\n\nNullInt32 represents an int32 that may be null. NullInt32 implements the Scanner interface so it can be used as a scan destination, similar to NullString. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#NullInt32.Scan",
                    "documentation": {
                      "identifier": "NullInt32.Scan",
                      "newPage": false,
                      "searchKey": "sql.NullInt32.Scan",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *NullInt32) Scan(value interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *NullInt32) Scan(value interface{}) error\n```\n\nScan implements the Scanner interface. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#NullInt32.Value",
                    "documentation": {
                      "identifier": "NullInt32.Value",
                      "newPage": false,
                      "searchKey": "sql.NullInt32.Value",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n NullInt32) Value() (driver.Value, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n NullInt32) Value() (driver.Value, error)\n```\n\nValue implements the driver Valuer interface. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#NullInt64",
              "documentation": {
                "identifier": "NullInt64",
                "newPage": false,
                "searchKey": "sql.NullInt64",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NullInt64 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NullInt64 struct {\n\tInt64 int64\n\tValid bool // Valid is true if Int64 is not NULL\n}\n```\n\nNullInt64 represents an int64 that may be null. NullInt64 implements the Scanner interface so it can be used as a scan destination, similar to NullString. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#NullInt64.Scan",
                    "documentation": {
                      "identifier": "NullInt64.Scan",
                      "newPage": false,
                      "searchKey": "sql.NullInt64.Scan",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *NullInt64) Scan(value interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *NullInt64) Scan(value interface{}) error\n```\n\nScan implements the Scanner interface. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#NullInt64.Value",
                    "documentation": {
                      "identifier": "NullInt64.Value",
                      "newPage": false,
                      "searchKey": "sql.NullInt64.Value",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n NullInt64) Value() (driver.Value, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n NullInt64) Value() (driver.Value, error)\n```\n\nValue implements the driver Valuer interface. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#NullString",
              "documentation": {
                "identifier": "NullString",
                "newPage": false,
                "searchKey": "sql.NullString",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NullString struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NullString struct {\n\tString string\n\tValid  bool // Valid is true if String is not NULL\n}\n```\n\nNullString represents a string that may be null. NullString implements the Scanner interface so it can be used as a scan destination: \n\n```\nvar s NullString\nerr := db.QueryRow(\"SELECT name FROM foo WHERE id=?\", id).Scan(&s)\n...\nif s.Valid {\n   // use s.String\n} else {\n   // NULL value\n}\n\n```\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#NullString.Scan",
                    "documentation": {
                      "identifier": "NullString.Scan",
                      "newPage": false,
                      "searchKey": "sql.NullString.Scan",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ns *NullString) Scan(value interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ns *NullString) Scan(value interface{}) error\n```\n\nScan implements the Scanner interface. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#NullString.Value",
                    "documentation": {
                      "identifier": "NullString.Value",
                      "newPage": false,
                      "searchKey": "sql.NullString.Value",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ns NullString) Value() (driver.Value, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ns NullString) Value() (driver.Value, error)\n```\n\nValue implements the driver Valuer interface. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#NullTime",
              "documentation": {
                "identifier": "NullTime",
                "newPage": false,
                "searchKey": "sql.NullTime",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NullTime struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NullTime struct {\n\tTime  time.Time\n\tValid bool // Valid is true if Time is not NULL\n}\n```\n\nNullTime represents a time.Time that may be null. NullTime implements the Scanner interface so it can be used as a scan destination, similar to NullString. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#NullTime.Scan",
                    "documentation": {
                      "identifier": "NullTime.Scan",
                      "newPage": false,
                      "searchKey": "sql.NullTime.Scan",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *NullTime) Scan(value interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *NullTime) Scan(value interface{}) error\n```\n\nScan implements the Scanner interface. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#NullTime.Value",
                    "documentation": {
                      "identifier": "NullTime.Value",
                      "newPage": false,
                      "searchKey": "sql.NullTime.Value",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n NullTime) Value() (driver.Value, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n NullTime) Value() (driver.Value, error)\n```\n\nValue implements the driver Valuer interface. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#Out",
              "documentation": {
                "identifier": "Out",
                "newPage": false,
                "searchKey": "sql.Out",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Out struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Out struct {\n\t_Named_Fields_Required struct{}\n\n\t// Dest is a pointer to the value that will be set to the result of the\n\t// stored procedure's OUTPUT parameter.\n\tDest interface{}\n\n\t// In is whether the parameter is an INOUT parameter. If so, the input value to the stored\n\t// procedure is the dereferenced value of Dest's pointer, which is then replaced with\n\t// the output value.\n\tIn bool\n}\n```\n\nOut may be used to retrieve OUTPUT value parameters from stored procedures. \n\nNot all drivers and databases support OUTPUT value parameters. \n\nExample usage: \n\n```\nvar outArg string\n_, err := db.ExecContext(ctx, \"ProcName\", sql.Named(\"Arg1\", sql.Out{Dest: &outArg}))\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#RawBytes",
              "documentation": {
                "identifier": "RawBytes",
                "newPage": false,
                "searchKey": "sql.RawBytes",
                "tags": [
                  "array",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RawBytes []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RawBytes []byte\n```\n\nRawBytes is a byte slice that holds a reference to memory owned by the database itself. After a Scan into a RawBytes, the slice is only valid until the next call to Next, Scan, or Close. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#Result",
              "documentation": {
                "identifier": "Result",
                "newPage": false,
                "searchKey": "sql.Result",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Result interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Result interface {\n\t// LastInsertId returns the integer generated by the database\n\t// in response to a command. Typically this will be from an\n\t// \"auto increment\" column when inserting a new row. Not all\n\t// databases support this feature, and the syntax of such\n\t// statements varies.\n\tLastInsertId() (int64, error)\n\n\t// RowsAffected returns the number of rows affected by an\n\t// update, insert, or delete. Not every database or database\n\t// driver may support this.\n\tRowsAffected() (int64, error)\n}\n```\n\nA Result summarizes an executed SQL command. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#resultFromStatement",
                    "documentation": {
                      "identifier": "resultFromStatement",
                      "newPage": false,
                      "searchKey": "sql.resultFromStatement",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func resultFromStatement(ctx context.Context, ci driver.Conn, ds *driverStmt, args ...interface{}) (Result, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc resultFromStatement(ctx context.Context, ci driver.Conn, ds *driverStmt, args ...interface{}) (Result, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#Row",
              "documentation": {
                "identifier": "Row",
                "newPage": false,
                "searchKey": "sql.Row",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Row struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Row struct {\n\t// One of these two will be non-nil:\n\terr  error // deferred error for easy chaining\n\trows *Rows\n}\n```\n\nRow is the result of calling QueryRow to select a single row. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#Row.Err",
                    "documentation": {
                      "identifier": "Row.Err",
                      "newPage": false,
                      "searchKey": "sql.Row.Err",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Row) Err() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Row) Err() error\n```\n\nErr provides a way for wrapping packages to check for query errors without calling Scan. Err returns the error, if any, that was encountered while running the query. If this error is not nil, this error will also be returned from Scan. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Row.Scan",
                    "documentation": {
                      "identifier": "Row.Scan",
                      "newPage": false,
                      "searchKey": "sql.Row.Scan",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Row) Scan(dest ...interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Row) Scan(dest ...interface{}) error\n```\n\nScan copies the columns from the matched row into the values pointed at by dest. See the documentation on Rows.Scan for details. If more than one row matches the query, Scan uses the first row and discards the rest. If no row matches the query, Scan returns ErrNoRows. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#Rows",
              "documentation": {
                "identifier": "Rows",
                "newPage": false,
                "searchKey": "sql.Rows",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Rows struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Rows struct {\n\tdc          *driverConn // owned; must call releaseConn when closed to release\n\treleaseConn func(error)\n\trowsi       driver.Rows\n\tcancel      func()      // called when Rows is closed, may be nil.\n\tcloseStmt   *driverStmt // if non-nil, statement to Close on close\n\n\t// closemu prevents Rows from closing while there\n\t// is an active streaming result. It is held for read during non-close operations\n\t// and exclusively during close.\n\t//\n\t// closemu guards lasterr and closed.\n\tclosemu sync.RWMutex\n\tclosed  bool\n\tlasterr error // non-nil only if closed is true\n\n\t// lastcols is only used in Scan, Next, and NextResultSet which are expected\n\t// not to be called concurrently.\n\tlastcols []driver.Value\n}\n```\n\nRows is the result of a query. Its cursor starts before the first row of the result set. Use Next to advance from row to row. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#Rows.Close",
                    "documentation": {
                      "identifier": "Rows.Close",
                      "newPage": false,
                      "searchKey": "sql.Rows.Close",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs *Rows) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs *Rows) Close() error\n```\n\nClose closes the Rows, preventing further enumeration. If Next is called and returns false and there are no further result sets, the Rows are closed automatically and it will suffice to check the result of Err. Close is idempotent and does not affect the result of Err. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Rows.ColumnTypes",
                    "documentation": {
                      "identifier": "Rows.ColumnTypes",
                      "newPage": false,
                      "searchKey": "sql.Rows.ColumnTypes",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs *Rows) ColumnTypes() ([]*ColumnType, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs *Rows) ColumnTypes() ([]*ColumnType, error)\n```\n\nColumnTypes returns column information such as column type, length, and nullable. Some information may not be available from some drivers. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Rows.Columns",
                    "documentation": {
                      "identifier": "Rows.Columns",
                      "newPage": false,
                      "searchKey": "sql.Rows.Columns",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs *Rows) Columns() ([]string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs *Rows) Columns() ([]string, error)\n```\n\nColumns returns the column names. Columns returns an error if the rows are closed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Rows.Err",
                    "documentation": {
                      "identifier": "Rows.Err",
                      "newPage": false,
                      "searchKey": "sql.Rows.Err",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs *Rows) Err() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs *Rows) Err() error\n```\n\nErr returns the error, if any, that was encountered during iteration. Err may be called after an explicit or implicit Close. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Rows.Next",
                    "documentation": {
                      "identifier": "Rows.Next",
                      "newPage": false,
                      "searchKey": "sql.Rows.Next",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs *Rows) Next() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs *Rows) Next() bool\n```\n\nNext prepares the next result row for reading with the Scan method. It returns true on success, or false if there is no next result row or an error happened while preparing it. Err should be consulted to distinguish between the two cases. \n\nEvery call to Scan, even the first one, must be preceded by a call to Next. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Rows.NextResultSet",
                    "documentation": {
                      "identifier": "Rows.NextResultSet",
                      "newPage": false,
                      "searchKey": "sql.Rows.NextResultSet",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs *Rows) NextResultSet() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs *Rows) NextResultSet() bool\n```\n\nNextResultSet prepares the next result set for reading. It reports whether there is further result sets, or false if there is no further result set or if there is an error advancing to it. The Err method should be consulted to distinguish between the two cases. \n\nAfter calling NextResultSet, the Next method should always be called before scanning. If there are further result sets they may not have rows in the result set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Rows.Scan",
                    "documentation": {
                      "identifier": "Rows.Scan",
                      "newPage": false,
                      "searchKey": "sql.Rows.Scan",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs *Rows) Scan(dest ...interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs *Rows) Scan(dest ...interface{}) error\n```\n\nScan copies the columns in the current row into the values pointed at by dest. The number of values in dest must be the same as the number of columns in Rows. \n\nScan converts columns read from the database into the following common Go types and special types provided by the sql package: \n\n```\n*string\n*[]byte\n*int, *int8, *int16, *int32, *int64\n*uint, *uint8, *uint16, *uint32, *uint64\n*bool\n*float32, *float64\n*interface{}\n*RawBytes\n*Rows (cursor value)\nany type implementing Scanner (see Scanner docs)\n\n```\nIn the most simple case, if the type of the value from the source column is an integer, bool or string type T and dest is of type *T, Scan simply assigns the value through the pointer. \n\nScan also converts between string and numeric types, as long as no information would be lost. While Scan stringifies all numbers scanned from numeric database columns into *string, scans into numeric types are checked for overflow. For example, a float64 with value 300 or a string with value \"300\" can scan into a uint16, but not into a uint8, though float64(255) or \"255\" can scan into a uint8. One exception is that scans of some float64 numbers to strings may lose information when stringifying. In general, scan floating point columns into *float64. \n\nIf a dest argument has type *[]byte, Scan saves in that argument a copy of the corresponding data. The copy is owned by the caller and can be modified and held indefinitely. The copy can be avoided by using an argument of type *RawBytes instead; see the documentation for RawBytes for restrictions on its use. \n\nIf an argument has type *interface{}, Scan copies the value provided by the underlying driver without conversion. When scanning from a source value of type []byte to *interface{}, a copy of the slice is made and the caller owns the result. \n\nSource values of type time.Time may be scanned into values of type *time.Time, *interface{}, *string, or *[]byte. When converting to the latter two, time.RFC3339Nano is used. \n\nSource values of type bool may be scanned into types *bool, *interface{}, *string, *[]byte, or *RawBytes. \n\nFor scanning into *bool, the source may be true, false, 1, 0, or string inputs parseable by strconv.ParseBool. \n\nScan can also convert a cursor returned from a query, such as \"select cursor(select * from my_table) from dual\", into a *Rows value that can itself be scanned from. The parent select query will close any cursor *Rows if the parent *Rows is closed. \n\nIf any of the first arguments implementing Scanner returns an error, that error will be wrapped in the returned error \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Rows.awaitDone",
                    "documentation": {
                      "identifier": "Rows.awaitDone",
                      "newPage": false,
                      "searchKey": "sql.Rows.awaitDone",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs *Rows) awaitDone(ctx, txctx context.Context)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs *Rows) awaitDone(ctx, txctx context.Context)\n```\n\nawaitDone blocks until either ctx or txctx is canceled. The ctx is provided from the query context and is canceled when the query Rows is closed. If the query was issued in a transaction, the transaction's context is also provided in txctx to ensure Rows is closed if the Tx is closed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Rows.close",
                    "documentation": {
                      "identifier": "Rows.close",
                      "newPage": false,
                      "searchKey": "sql.Rows.close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs *Rows) close(err error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs *Rows) close(err error) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Rows.initContextClose",
                    "documentation": {
                      "identifier": "Rows.initContextClose",
                      "newPage": false,
                      "searchKey": "sql.Rows.initContextClose",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs *Rows) initContextClose(ctx, txctx context.Context)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs *Rows) initContextClose(ctx, txctx context.Context)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Rows.lasterrOrErrLocked",
                    "documentation": {
                      "identifier": "Rows.lasterrOrErrLocked",
                      "newPage": false,
                      "searchKey": "sql.Rows.lasterrOrErrLocked",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs *Rows) lasterrOrErrLocked(err error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs *Rows) lasterrOrErrLocked(err error) error\n```\n\nlasterrOrErrLocked returns either lasterr or the provided err. rs.closemu must be read-locked. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Rows.nextLocked",
                    "documentation": {
                      "identifier": "Rows.nextLocked",
                      "newPage": false,
                      "searchKey": "sql.Rows.nextLocked",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs *Rows) nextLocked() (doClose, ok bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs *Rows) nextLocked() (doClose, ok bool)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#Scanner",
              "documentation": {
                "identifier": "Scanner",
                "newPage": false,
                "searchKey": "sql.Scanner",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Scanner interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Scanner interface {\n\t// Scan assigns a value from a database driver.\n\t//\n\t// The src value will be of one of the following types:\n\t//\n\t//    int64\n\t//    float64\n\t//    bool\n\t//    []byte\n\t//    string\n\t//    time.Time\n\t//    nil - for NULL values\n\t//\n\t// An error should be returned if the value cannot be stored\n\t// without loss of information.\n\t//\n\t// Reference types such as []byte are only valid until the next call to Scan\n\t// and should not be retained. Their underlying memory is owned by the driver.\n\t// If retention is necessary, copy their values before the next call to Scan.\n\tScan(src interface{}) error\n}\n```\n\nScanner is an interface used by Scan. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#Stmt",
              "documentation": {
                "identifier": "Stmt",
                "newPage": false,
                "searchKey": "sql.Stmt",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Stmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Stmt struct {\n\t// Immutable:\n\tdb        *DB    // where we came from\n\tquery     string // that created the Stmt\n\tstickyErr error  // if non-nil, this error is returned for all operations\n\n\tclosemu sync.RWMutex // held exclusively during close, for read otherwise.\n\n\t// If Stmt is prepared on a Tx or Conn then cg is present and will\n\t// only ever grab a connection from cg.\n\t// If cg is nil then the Stmt must grab an arbitrary connection\n\t// from db and determine if it must prepare the stmt again by\n\t// inspecting css.\n\tcg   stmtConnGrabber\n\tcgds *driverStmt\n\n\t// parentStmt is set when a transaction-specific statement\n\t// is requested from an identical statement prepared on the same\n\t// conn. parentStmt is used to track the dependency of this statement\n\t// on its originating (\"parent\") statement so that parentStmt may\n\t// be closed by the user without them having to know whether or not\n\t// any transactions are still using it.\n\tparentStmt *Stmt\n\n\tmu     sync.Mutex // protects the rest of the fields\n\tclosed bool\n\n\t// css is a list of underlying driver statement interfaces\n\t// that are valid on particular connections. This is only\n\t// used if cg == nil and one is found that has idle\n\t// connections. If cg != nil, cgds is always used.\n\tcss []connStmt\n\n\t// lastNumClosed is copied from db.numClosed when Stmt is created\n\t// without tx and closed connections in css are removed.\n\tlastNumClosed uint64\n}\n```\n\nStmt is a prepared statement. A Stmt is safe for concurrent use by multiple goroutines. \n\nIf a Stmt is prepared on a Tx or Conn, it will be bound to a single underlying connection forever. If the Tx or Conn closes, the Stmt will become unusable and all operations will return an error. If a Stmt is prepared on a DB, it will remain usable for the lifetime of the DB. When the Stmt needs to execute on a new underlying connection, it will prepare itself on the new connection automatically. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#Stmt.Close",
                    "documentation": {
                      "identifier": "Stmt.Close",
                      "newPage": false,
                      "searchKey": "sql.Stmt.Close",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Stmt) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Stmt) Close() error\n```\n\nClose closes the statement. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Stmt.Exec",
                    "documentation": {
                      "identifier": "Stmt.Exec",
                      "newPage": false,
                      "searchKey": "sql.Stmt.Exec",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Stmt) Exec(args ...interface{}) (Result, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Stmt) Exec(args ...interface{}) (Result, error)\n```\n\nExec executes a prepared statement with the given arguments and returns a Result summarizing the effect of the statement. \n\nExec uses context.Background internally; to specify the context, use ExecContext. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Stmt.ExecContext",
                    "documentation": {
                      "identifier": "Stmt.ExecContext",
                      "newPage": false,
                      "searchKey": "sql.Stmt.ExecContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Stmt) ExecContext(ctx context.Context, args ...interface{}) (Result, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Stmt) ExecContext(ctx context.Context, args ...interface{}) (Result, error)\n```\n\nExecContext executes a prepared statement with the given arguments and returns a Result summarizing the effect of the statement. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Stmt.Query",
                    "documentation": {
                      "identifier": "Stmt.Query",
                      "newPage": false,
                      "searchKey": "sql.Stmt.Query",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Stmt) Query(args ...interface{}) (*Rows, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Stmt) Query(args ...interface{}) (*Rows, error)\n```\n\nQuery executes a prepared query statement with the given arguments and returns the query results as a *Rows. \n\nQuery uses context.Background internally; to specify the context, use QueryContext. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Stmt.QueryContext",
                    "documentation": {
                      "identifier": "Stmt.QueryContext",
                      "newPage": false,
                      "searchKey": "sql.Stmt.QueryContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Stmt) QueryContext(ctx context.Context, args ...interface{}) (*Rows, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Stmt) QueryContext(ctx context.Context, args ...interface{}) (*Rows, error)\n```\n\nQueryContext executes a prepared query statement with the given arguments and returns the query results as a *Rows. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Stmt.QueryRow",
                    "documentation": {
                      "identifier": "Stmt.QueryRow",
                      "newPage": false,
                      "searchKey": "sql.Stmt.QueryRow",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Stmt) QueryRow(args ...interface{}) *Row"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Stmt) QueryRow(args ...interface{}) *Row\n```\n\nQueryRow executes a prepared query statement with the given arguments. If an error occurs during the execution of the statement, that error will be returned by a call to Scan on the returned *Row, which is always non-nil. If the query selects no rows, the *Row's Scan will return ErrNoRows. Otherwise, the *Row's Scan scans the first selected row and discards the rest. \n\nExample usage: \n\n```\nvar name string\nerr := nameByUseridStmt.QueryRow(id).Scan(&name)\n\n```\nQueryRow uses context.Background internally; to specify the context, use QueryRowContext. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Stmt.QueryRowContext",
                    "documentation": {
                      "identifier": "Stmt.QueryRowContext",
                      "newPage": false,
                      "searchKey": "sql.Stmt.QueryRowContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Stmt) QueryRowContext(ctx context.Context, args ...interface{}) *Row"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Stmt) QueryRowContext(ctx context.Context, args ...interface{}) *Row\n```\n\nQueryRowContext executes a prepared query statement with the given arguments. If an error occurs during the execution of the statement, that error will be returned by a call to Scan on the returned *Row, which is always non-nil. If the query selects no rows, the *Row's Scan will return ErrNoRows. Otherwise, the *Row's Scan scans the first selected row and discards the rest. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Stmt.connStmt",
                    "documentation": {
                      "identifier": "Stmt.connStmt",
                      "newPage": false,
                      "searchKey": "sql.Stmt.connStmt",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Stmt) connStmt(ctx context.Context, strategy connReuseStrategy) (dc *driverConn, releaseConn func(error), ds *driverStmt, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Stmt) connStmt(ctx context.Context, strategy connReuseStrategy) (dc *driverConn, releaseConn func(error), ds *driverStmt, err error)\n```\n\nconnStmt returns a free driver connection on which to execute the statement, a function to call to release the connection, and a statement bound to that connection. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Stmt.finalClose",
                    "documentation": {
                      "identifier": "Stmt.finalClose",
                      "newPage": false,
                      "searchKey": "sql.Stmt.finalClose",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Stmt) finalClose() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Stmt) finalClose() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Stmt.prepareOnConnLocked",
                    "documentation": {
                      "identifier": "Stmt.prepareOnConnLocked",
                      "newPage": false,
                      "searchKey": "sql.Stmt.prepareOnConnLocked",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Stmt) prepareOnConnLocked(ctx context.Context, dc *driverConn) (*driverStmt, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Stmt) prepareOnConnLocked(ctx context.Context, dc *driverConn) (*driverStmt, error)\n```\n\nprepareOnConnLocked prepares the query in Stmt s on dc and adds it to the list of open connStmt on the statement. It assumes the caller is holding the lock on dc. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Stmt.removeClosedStmtLocked",
                    "documentation": {
                      "identifier": "Stmt.removeClosedStmtLocked",
                      "newPage": false,
                      "searchKey": "sql.Stmt.removeClosedStmtLocked",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Stmt) removeClosedStmtLocked()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Stmt) removeClosedStmtLocked()\n```\n\nremoveClosedStmtLocked removes closed conns in s.css. \n\nTo avoid lock contention on DB.mu, we do it only when s.db.numClosed - s.lastNum is large enough. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#Tx",
              "documentation": {
                "identifier": "Tx",
                "newPage": false,
                "searchKey": "sql.Tx",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tx struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tx struct {\n\tdb *DB\n\n\t// closemu prevents the transaction from closing while there\n\t// is an active query. It is held for read during queries\n\t// and exclusively during close.\n\tclosemu sync.RWMutex\n\n\t// dc is owned exclusively until Commit or Rollback, at which point\n\t// it's returned with putConn.\n\tdc  *driverConn\n\ttxi driver.Tx\n\n\t// releaseConn is called once the Tx is closed to release\n\t// any held driverConn back to the pool.\n\treleaseConn func(error)\n\n\t// done transitions from 0 to 1 exactly once, on Commit\n\t// or Rollback. once done, all operations fail with\n\t// ErrTxDone.\n\t// Use atomic operations on value when checking value.\n\tdone int32\n\n\t// keepConnOnRollback is true if the driver knows\n\t// how to reset the connection's session and if need be discard\n\t// the connection.\n\tkeepConnOnRollback bool\n\n\t// All Stmts prepared for this transaction. These will be closed after the\n\t// transaction has been committed or rolled back.\n\tstmts struct {\n\t\tsync.Mutex\n\t\tv []*Stmt\n\t}\n\n\t// cancel is called after done transitions from 0 to 1.\n\tcancel func()\n\n\t// ctx lives for the life of the transaction.\n\tctx context.Context\n}\n```\n\nTx is an in-progress database transaction. \n\nA transaction must end with a call to Commit or Rollback. \n\nAfter a call to Commit or Rollback, all operations on the transaction fail with ErrTxDone. \n\nThe statements prepared for a transaction by calling the transaction's Prepare or Stmt methods are closed by the call to Commit or Rollback. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#Tx.Commit",
                    "documentation": {
                      "identifier": "Tx.Commit",
                      "newPage": false,
                      "searchKey": "sql.Tx.Commit",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) Commit() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) Commit() error\n```\n\nCommit commits the transaction. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.Exec",
                    "documentation": {
                      "identifier": "Tx.Exec",
                      "newPage": false,
                      "searchKey": "sql.Tx.Exec",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) Exec(query string, args ...interface{}) (Result, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) Exec(query string, args ...interface{}) (Result, error)\n```\n\nExec executes a query that doesn't return rows. For example: an INSERT and UPDATE. \n\nExec uses context.Background internally; to specify the context, use ExecContext. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.ExecContext",
                    "documentation": {
                      "identifier": "Tx.ExecContext",
                      "newPage": false,
                      "searchKey": "sql.Tx.ExecContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) ExecContext(ctx context.Context, query string, args ...interface{}) (Result, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) ExecContext(ctx context.Context, query string, args ...interface{}) (Result, error)\n```\n\nExecContext executes a query that doesn't return rows. For example: an INSERT and UPDATE. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.Prepare",
                    "documentation": {
                      "identifier": "Tx.Prepare",
                      "newPage": false,
                      "searchKey": "sql.Tx.Prepare",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) Prepare(query string) (*Stmt, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) Prepare(query string) (*Stmt, error)\n```\n\nPrepare creates a prepared statement for use within a transaction. \n\nThe returned statement operates within the transaction and can no longer be used once the transaction has been committed or rolled back. \n\nTo use an existing prepared statement on this transaction, see Tx.Stmt. \n\nPrepare uses context.Background internally; to specify the context, use PrepareContext. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.PrepareContext",
                    "documentation": {
                      "identifier": "Tx.PrepareContext",
                      "newPage": false,
                      "searchKey": "sql.Tx.PrepareContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) PrepareContext(ctx context.Context, query string) (*Stmt, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) PrepareContext(ctx context.Context, query string) (*Stmt, error)\n```\n\nPrepareContext creates a prepared statement for use within a transaction. \n\nThe returned statement operates within the transaction and will be closed when the transaction has been committed or rolled back. \n\nTo use an existing prepared statement on this transaction, see Tx.Stmt. \n\nThe provided context will be used for the preparation of the context, not for the execution of the returned statement. The returned statement will run in the transaction context. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.Query",
                    "documentation": {
                      "identifier": "Tx.Query",
                      "newPage": false,
                      "searchKey": "sql.Tx.Query",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) Query(query string, args ...interface{}) (*Rows, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) Query(query string, args ...interface{}) (*Rows, error)\n```\n\nQuery executes a query that returns rows, typically a SELECT. \n\nQuery uses context.Background internally; to specify the context, use QueryContext. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.QueryContext",
                    "documentation": {
                      "identifier": "Tx.QueryContext",
                      "newPage": false,
                      "searchKey": "sql.Tx.QueryContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) QueryContext(ctx context.Context, query string, args ...interface{}) (*Rows, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) QueryContext(ctx context.Context, query string, args ...interface{}) (*Rows, error)\n```\n\nQueryContext executes a query that returns rows, typically a SELECT. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.QueryRow",
                    "documentation": {
                      "identifier": "Tx.QueryRow",
                      "newPage": false,
                      "searchKey": "sql.Tx.QueryRow",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) QueryRow(query string, args ...interface{}) *Row"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) QueryRow(query string, args ...interface{}) *Row\n```\n\nQueryRow executes a query that is expected to return at most one row. QueryRow always returns a non-nil value. Errors are deferred until Row's Scan method is called. If the query selects no rows, the *Row's Scan will return ErrNoRows. Otherwise, the *Row's Scan scans the first selected row and discards the rest. \n\nQueryRow uses context.Background internally; to specify the context, use QueryRowContext. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.QueryRowContext",
                    "documentation": {
                      "identifier": "Tx.QueryRowContext",
                      "newPage": false,
                      "searchKey": "sql.Tx.QueryRowContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) QueryRowContext(ctx context.Context, query string, args ...interface{}) *Row"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) QueryRowContext(ctx context.Context, query string, args ...interface{}) *Row\n```\n\nQueryRowContext executes a query that is expected to return at most one row. QueryRowContext always returns a non-nil value. Errors are deferred until Row's Scan method is called. If the query selects no rows, the *Row's Scan will return ErrNoRows. Otherwise, the *Row's Scan scans the first selected row and discards the rest. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.Rollback",
                    "documentation": {
                      "identifier": "Tx.Rollback",
                      "newPage": false,
                      "searchKey": "sql.Tx.Rollback",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) Rollback() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) Rollback() error\n```\n\nRollback aborts the transaction. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.Stmt",
                    "documentation": {
                      "identifier": "Tx.Stmt",
                      "newPage": false,
                      "searchKey": "sql.Tx.Stmt",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) Stmt(stmt *Stmt) *Stmt"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) Stmt(stmt *Stmt) *Stmt\n```\n\nStmt returns a transaction-specific prepared statement from an existing statement. \n\nExample: \n\n```\nupdateMoney, err := db.Prepare(\"UPDATE balance SET money=money+? WHERE id=?\")\n...\ntx, err := db.Begin()\n...\nres, err := tx.Stmt(updateMoney).Exec(123.45, 98293203)\n\n```\nThe returned statement operates within the transaction and will be closed when the transaction has been committed or rolled back. \n\nStmt uses context.Background internally; to specify the context, use StmtContext. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.StmtContext",
                    "documentation": {
                      "identifier": "Tx.StmtContext",
                      "newPage": false,
                      "searchKey": "sql.Tx.StmtContext",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) StmtContext(ctx context.Context, stmt *Stmt) *Stmt"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) StmtContext(ctx context.Context, stmt *Stmt) *Stmt\n```\n\nStmtContext returns a transaction-specific prepared statement from an existing statement. \n\nExample: \n\n```\nupdateMoney, err := db.Prepare(\"UPDATE balance SET money=money+? WHERE id=?\")\n...\ntx, err := db.Begin()\n...\nres, err := tx.StmtContext(ctx, updateMoney).Exec(123.45, 98293203)\n\n```\nThe provided context is used for the preparation of the statement, not for the execution of the statement. \n\nThe returned statement operates within the transaction and will be closed when the transaction has been committed or rolled back. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.awaitDone",
                    "documentation": {
                      "identifier": "Tx.awaitDone",
                      "newPage": false,
                      "searchKey": "sql.Tx.awaitDone",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) awaitDone()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) awaitDone()\n```\n\nawaitDone blocks until the context in Tx is canceled and rolls back the transaction if it's not already done. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.close",
                    "documentation": {
                      "identifier": "Tx.close",
                      "newPage": false,
                      "searchKey": "sql.Tx.close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) close(err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) close(err error)\n```\n\nclose returns the connection to the pool and must only be called by Tx.rollback or Tx.Commit while tx is already canceled and won't be executed concurrently. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.closePrepared",
                    "documentation": {
                      "identifier": "Tx.closePrepared",
                      "newPage": false,
                      "searchKey": "sql.Tx.closePrepared",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) closePrepared()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) closePrepared()\n```\n\nCloses all Stmts prepared for this transaction. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.closemuRUnlockRelease",
                    "documentation": {
                      "identifier": "Tx.closemuRUnlockRelease",
                      "newPage": false,
                      "searchKey": "sql.Tx.closemuRUnlockRelease",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) closemuRUnlockRelease(error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) closemuRUnlockRelease(error)\n```\n\nclosemuRUnlockRelease is used as a func(error) method value in ExecContext and QueryContext. Unlocking in the releaseConn keeps the driver conn from being returned to the connection pool until the Rows has been closed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.grabConn",
                    "documentation": {
                      "identifier": "Tx.grabConn",
                      "newPage": false,
                      "searchKey": "sql.Tx.grabConn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) grabConn(ctx context.Context) (*driverConn, releaseConn, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) grabConn(ctx context.Context) (*driverConn, releaseConn, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.isDone",
                    "documentation": {
                      "identifier": "Tx.isDone",
                      "newPage": false,
                      "searchKey": "sql.Tx.isDone",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) isDone() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) isDone() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.rollback",
                    "documentation": {
                      "identifier": "Tx.rollback",
                      "newPage": false,
                      "searchKey": "sql.Tx.rollback",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) rollback(discardConn bool) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) rollback(discardConn bool) error\n```\n\nrollback aborts the transaction and optionally forces the pool to discard the connection. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#Tx.txCtx",
                    "documentation": {
                      "identifier": "Tx.txCtx",
                      "newPage": false,
                      "searchKey": "sql.Tx.txCtx",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *Tx) txCtx() context.Context"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *Tx) txCtx() context.Context\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TxOptions",
              "documentation": {
                "identifier": "TxOptions",
                "newPage": false,
                "searchKey": "sql.TxOptions",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TxOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TxOptions struct {\n\t// Isolation is the transaction isolation level.\n\t// If zero, the driver or database's default level is used.\n\tIsolation IsolationLevel\n\tReadOnly  bool\n}\n```\n\nTxOptions holds the transaction options to be used in DB.BeginTx. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#Valuer_P",
              "documentation": {
                "identifier": "Valuer_P",
                "newPage": false,
                "searchKey": "sql.Valuer_P",
                "tags": [
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Valuer_P string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Valuer_P string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#Valuer_P.Value",
                    "documentation": {
                      "identifier": "Valuer_P.Value",
                      "newPage": false,
                      "searchKey": "sql.Valuer_P.Value",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Valuer_P) Value() (driver.Value, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Valuer_P) Value() (driver.Value, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#Valuer_V",
              "documentation": {
                "identifier": "Valuer_V",
                "newPage": false,
                "searchKey": "sql.Valuer_V",
                "tags": [
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Valuer_V string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Valuer_V string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#Valuer_V.Value",
                    "documentation": {
                      "identifier": "Valuer_V.Value",
                      "newPage": false,
                      "searchKey": "sql.Valuer_V.Value",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Valuer_V) Value() (driver.Value, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Valuer_V) Value() (driver.Value, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#alwaysErrScanner",
              "documentation": {
                "identifier": "alwaysErrScanner",
                "newPage": false,
                "searchKey": "sql.alwaysErrScanner",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type alwaysErrScanner struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype alwaysErrScanner struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#alwaysErrScanner.Scan",
                    "documentation": {
                      "identifier": "alwaysErrScanner.Scan",
                      "newPage": false,
                      "searchKey": "sql.alwaysErrScanner.Scan",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (alwaysErrScanner) Scan(interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (alwaysErrScanner) Scan(interface{}) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#anyTypeConverter",
              "documentation": {
                "identifier": "anyTypeConverter",
                "newPage": false,
                "searchKey": "sql.anyTypeConverter",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type anyTypeConverter struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype anyTypeConverter struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#anyTypeConverter.ConvertValue",
                    "documentation": {
                      "identifier": "anyTypeConverter.ConvertValue",
                      "newPage": false,
                      "searchKey": "sql.anyTypeConverter.ConvertValue",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (anyTypeConverter) ConvertValue(v interface{}) (driver.Value, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (anyTypeConverter) ConvertValue(v interface{}) (driver.Value, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#badConn",
              "documentation": {
                "identifier": "badConn",
                "newPage": false,
                "searchKey": "sql.badConn",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type badConn struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype badConn struct{}\n```\n\nbadConn implements a bad driver.Conn, for TestBadDriver. The Exec method panics. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#badConn.Begin",
                    "documentation": {
                      "identifier": "badConn.Begin",
                      "newPage": false,
                      "searchKey": "sql.badConn.Begin",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (bc badConn) Begin() (driver.Tx, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (bc badConn) Begin() (driver.Tx, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#badConn.Close",
                    "documentation": {
                      "identifier": "badConn.Close",
                      "newPage": false,
                      "searchKey": "sql.badConn.Close",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (bc badConn) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (bc badConn) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#badConn.Exec",
                    "documentation": {
                      "identifier": "badConn.Exec",
                      "newPage": false,
                      "searchKey": "sql.badConn.Exec",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (bc badConn) Exec(query string, args []driver.Value) (driver.Result, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (bc badConn) Exec(query string, args []driver.Value) (driver.Result, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#badConn.Prepare",
                    "documentation": {
                      "identifier": "badConn.Prepare",
                      "newPage": false,
                      "searchKey": "sql.badConn.Prepare",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (bc badConn) Prepare(query string) (driver.Stmt, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (bc badConn) Prepare(query string) (driver.Stmt, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#badDriver",
              "documentation": {
                "identifier": "badDriver",
                "newPage": false,
                "searchKey": "sql.badDriver",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type badDriver struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype badDriver struct{}\n```\n\nbadDriver is a driver.Driver that uses badConn. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#badDriver.Open",
                    "documentation": {
                      "identifier": "badDriver.Open",
                      "newPage": false,
                      "searchKey": "sql.badDriver.Open",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (bd badDriver) Open(name string) (driver.Conn, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (bd badDriver) Open(name string) (driver.Conn, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#boundCol",
              "documentation": {
                "identifier": "boundCol",
                "newPage": false,
                "searchKey": "sql.boundCol",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type boundCol struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype boundCol struct {\n\tColumn      string\n\tPlaceholder string\n\tOrdinal     int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#ccChecker",
              "documentation": {
                "identifier": "ccChecker",
                "newPage": false,
                "searchKey": "sql.ccChecker",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ccChecker struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ccChecker struct {\n\tcci  driver.ColumnConverter\n\twant int\n}\n```\n\nccChecker wraps the driver.ColumnConverter and allows it to be used as if it were a NamedValueChecker. If the driver ColumnConverter is not present then the NamedValueChecker will return driver.ErrSkip. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#ccChecker.CheckNamedValue",
                    "documentation": {
                      "identifier": "ccChecker.CheckNamedValue",
                      "newPage": false,
                      "searchKey": "sql.ccChecker.CheckNamedValue",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c ccChecker) CheckNamedValue(nv *driver.NamedValue) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c ccChecker) CheckNamedValue(nv *driver.NamedValue) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#concurrentDBExecTest",
              "documentation": {
                "identifier": "concurrentDBExecTest",
                "newPage": false,
                "searchKey": "sql.concurrentDBExecTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type concurrentDBExecTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype concurrentDBExecTest struct {\n\tdb *DB\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#concurrentDBExecTest.finish",
                    "documentation": {
                      "identifier": "concurrentDBExecTest.finish",
                      "newPage": false,
                      "searchKey": "sql.concurrentDBExecTest.finish",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentDBExecTest) finish(t testing.TB)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentDBExecTest) finish(t testing.TB)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#concurrentDBExecTest.init.sql_test.go.0xc0291c8ae8",
                    "documentation": {
                      "identifier": "concurrentDBExecTest.init.sql_test.go.0xc0291c8ae8",
                      "newPage": false,
                      "searchKey": "sql.concurrentDBExecTest.init",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentDBExecTest) init(t testing.TB, db *DB)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentDBExecTest) init(t testing.TB, db *DB)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#concurrentDBExecTest.test",
                    "documentation": {
                      "identifier": "concurrentDBExecTest.test",
                      "newPage": false,
                      "searchKey": "sql.concurrentDBExecTest.test",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentDBExecTest) test(t testing.TB) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentDBExecTest) test(t testing.TB) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#concurrentDBQueryTest",
              "documentation": {
                "identifier": "concurrentDBQueryTest",
                "newPage": false,
                "searchKey": "sql.concurrentDBQueryTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type concurrentDBQueryTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype concurrentDBQueryTest struct {\n\tdb *DB\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#concurrentDBQueryTest.finish",
                    "documentation": {
                      "identifier": "concurrentDBQueryTest.finish",
                      "newPage": false,
                      "searchKey": "sql.concurrentDBQueryTest.finish",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentDBQueryTest) finish(t testing.TB)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentDBQueryTest) finish(t testing.TB)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#concurrentDBQueryTest.init.sql_test.go.0xc0291c8ae8",
                    "documentation": {
                      "identifier": "concurrentDBQueryTest.init.sql_test.go.0xc0291c8ae8",
                      "newPage": false,
                      "searchKey": "sql.concurrentDBQueryTest.init",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentDBQueryTest) init(t testing.TB, db *DB)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentDBQueryTest) init(t testing.TB, db *DB)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#concurrentDBQueryTest.test",
                    "documentation": {
                      "identifier": "concurrentDBQueryTest.test",
                      "newPage": false,
                      "searchKey": "sql.concurrentDBQueryTest.test",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentDBQueryTest) test(t testing.TB) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentDBQueryTest) test(t testing.TB) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#concurrentRandomTest",
              "documentation": {
                "identifier": "concurrentRandomTest",
                "newPage": false,
                "searchKey": "sql.concurrentRandomTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type concurrentRandomTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype concurrentRandomTest struct {\n\ttests []concurrentTest\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#concurrentRandomTest.finish",
                    "documentation": {
                      "identifier": "concurrentRandomTest.finish",
                      "newPage": false,
                      "searchKey": "sql.concurrentRandomTest.finish",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentRandomTest) finish(t testing.TB)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentRandomTest) finish(t testing.TB)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#concurrentRandomTest.init.sql_test.go.0xc0291c8ae8",
                    "documentation": {
                      "identifier": "concurrentRandomTest.init.sql_test.go.0xc0291c8ae8",
                      "newPage": false,
                      "searchKey": "sql.concurrentRandomTest.init",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentRandomTest) init(t testing.TB, db *DB)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentRandomTest) init(t testing.TB, db *DB)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#concurrentRandomTest.test",
                    "documentation": {
                      "identifier": "concurrentRandomTest.test",
                      "newPage": false,
                      "searchKey": "sql.concurrentRandomTest.test",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentRandomTest) test(t testing.TB) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentRandomTest) test(t testing.TB) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#concurrentStmtExecTest",
              "documentation": {
                "identifier": "concurrentStmtExecTest",
                "newPage": false,
                "searchKey": "sql.concurrentStmtExecTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type concurrentStmtExecTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype concurrentStmtExecTest struct {\n\tdb   *DB\n\tstmt *Stmt\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#concurrentStmtExecTest.finish",
                    "documentation": {
                      "identifier": "concurrentStmtExecTest.finish",
                      "newPage": false,
                      "searchKey": "sql.concurrentStmtExecTest.finish",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentStmtExecTest) finish(t testing.TB)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentStmtExecTest) finish(t testing.TB)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#concurrentStmtExecTest.init.sql_test.go.0xc0291c8ae8",
                    "documentation": {
                      "identifier": "concurrentStmtExecTest.init.sql_test.go.0xc0291c8ae8",
                      "newPage": false,
                      "searchKey": "sql.concurrentStmtExecTest.init",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentStmtExecTest) init(t testing.TB, db *DB)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentStmtExecTest) init(t testing.TB, db *DB)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#concurrentStmtExecTest.test",
                    "documentation": {
                      "identifier": "concurrentStmtExecTest.test",
                      "newPage": false,
                      "searchKey": "sql.concurrentStmtExecTest.test",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentStmtExecTest) test(t testing.TB) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentStmtExecTest) test(t testing.TB) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#concurrentStmtQueryTest",
              "documentation": {
                "identifier": "concurrentStmtQueryTest",
                "newPage": false,
                "searchKey": "sql.concurrentStmtQueryTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type concurrentStmtQueryTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype concurrentStmtQueryTest struct {\n\tdb   *DB\n\tstmt *Stmt\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#concurrentStmtQueryTest.finish",
                    "documentation": {
                      "identifier": "concurrentStmtQueryTest.finish",
                      "newPage": false,
                      "searchKey": "sql.concurrentStmtQueryTest.finish",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentStmtQueryTest) finish(t testing.TB)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentStmtQueryTest) finish(t testing.TB)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#concurrentStmtQueryTest.init.sql_test.go.0xc0291c8ae8",
                    "documentation": {
                      "identifier": "concurrentStmtQueryTest.init.sql_test.go.0xc0291c8ae8",
                      "newPage": false,
                      "searchKey": "sql.concurrentStmtQueryTest.init",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentStmtQueryTest) init(t testing.TB, db *DB)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentStmtQueryTest) init(t testing.TB, db *DB)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#concurrentStmtQueryTest.test",
                    "documentation": {
                      "identifier": "concurrentStmtQueryTest.test",
                      "newPage": false,
                      "searchKey": "sql.concurrentStmtQueryTest.test",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentStmtQueryTest) test(t testing.TB) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentStmtQueryTest) test(t testing.TB) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#concurrentTest",
              "documentation": {
                "identifier": "concurrentTest",
                "newPage": false,
                "searchKey": "sql.concurrentTest",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type concurrentTest interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype concurrentTest interface {\n\tinit(t testing.TB, db *DB)\n\tfinish(t testing.TB)\n\ttest(t testing.TB) error\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#concurrentTxExecTest",
              "documentation": {
                "identifier": "concurrentTxExecTest",
                "newPage": false,
                "searchKey": "sql.concurrentTxExecTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type concurrentTxExecTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype concurrentTxExecTest struct {\n\tdb *DB\n\ttx *Tx\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#concurrentTxExecTest.finish",
                    "documentation": {
                      "identifier": "concurrentTxExecTest.finish",
                      "newPage": false,
                      "searchKey": "sql.concurrentTxExecTest.finish",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentTxExecTest) finish(t testing.TB)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentTxExecTest) finish(t testing.TB)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#concurrentTxExecTest.init.sql_test.go.0xc0291c8ae8",
                    "documentation": {
                      "identifier": "concurrentTxExecTest.init.sql_test.go.0xc0291c8ae8",
                      "newPage": false,
                      "searchKey": "sql.concurrentTxExecTest.init",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentTxExecTest) init(t testing.TB, db *DB)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentTxExecTest) init(t testing.TB, db *DB)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#concurrentTxExecTest.test",
                    "documentation": {
                      "identifier": "concurrentTxExecTest.test",
                      "newPage": false,
                      "searchKey": "sql.concurrentTxExecTest.test",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentTxExecTest) test(t testing.TB) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentTxExecTest) test(t testing.TB) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#concurrentTxQueryTest",
              "documentation": {
                "identifier": "concurrentTxQueryTest",
                "newPage": false,
                "searchKey": "sql.concurrentTxQueryTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type concurrentTxQueryTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype concurrentTxQueryTest struct {\n\tdb *DB\n\ttx *Tx\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#concurrentTxQueryTest.finish",
                    "documentation": {
                      "identifier": "concurrentTxQueryTest.finish",
                      "newPage": false,
                      "searchKey": "sql.concurrentTxQueryTest.finish",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentTxQueryTest) finish(t testing.TB)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentTxQueryTest) finish(t testing.TB)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#concurrentTxQueryTest.init.sql_test.go.0xc0291c8ae8",
                    "documentation": {
                      "identifier": "concurrentTxQueryTest.init.sql_test.go.0xc0291c8ae8",
                      "newPage": false,
                      "searchKey": "sql.concurrentTxQueryTest.init",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentTxQueryTest) init(t testing.TB, db *DB)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentTxQueryTest) init(t testing.TB, db *DB)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#concurrentTxQueryTest.test",
                    "documentation": {
                      "identifier": "concurrentTxQueryTest.test",
                      "newPage": false,
                      "searchKey": "sql.concurrentTxQueryTest.test",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentTxQueryTest) test(t testing.TB) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentTxQueryTest) test(t testing.TB) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#concurrentTxStmtExecTest",
              "documentation": {
                "identifier": "concurrentTxStmtExecTest",
                "newPage": false,
                "searchKey": "sql.concurrentTxStmtExecTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type concurrentTxStmtExecTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype concurrentTxStmtExecTest struct {\n\tdb   *DB\n\ttx   *Tx\n\tstmt *Stmt\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#concurrentTxStmtExecTest.finish",
                    "documentation": {
                      "identifier": "concurrentTxStmtExecTest.finish",
                      "newPage": false,
                      "searchKey": "sql.concurrentTxStmtExecTest.finish",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentTxStmtExecTest) finish(t testing.TB)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentTxStmtExecTest) finish(t testing.TB)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#concurrentTxStmtExecTest.init.sql_test.go.0xc0291c8ae8",
                    "documentation": {
                      "identifier": "concurrentTxStmtExecTest.init.sql_test.go.0xc0291c8ae8",
                      "newPage": false,
                      "searchKey": "sql.concurrentTxStmtExecTest.init",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentTxStmtExecTest) init(t testing.TB, db *DB)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentTxStmtExecTest) init(t testing.TB, db *DB)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#concurrentTxStmtExecTest.test",
                    "documentation": {
                      "identifier": "concurrentTxStmtExecTest.test",
                      "newPage": false,
                      "searchKey": "sql.concurrentTxStmtExecTest.test",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentTxStmtExecTest) test(t testing.TB) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentTxStmtExecTest) test(t testing.TB) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#concurrentTxStmtQueryTest",
              "documentation": {
                "identifier": "concurrentTxStmtQueryTest",
                "newPage": false,
                "searchKey": "sql.concurrentTxStmtQueryTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type concurrentTxStmtQueryTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype concurrentTxStmtQueryTest struct {\n\tdb   *DB\n\ttx   *Tx\n\tstmt *Stmt\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#concurrentTxStmtQueryTest.finish",
                    "documentation": {
                      "identifier": "concurrentTxStmtQueryTest.finish",
                      "newPage": false,
                      "searchKey": "sql.concurrentTxStmtQueryTest.finish",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentTxStmtQueryTest) finish(t testing.TB)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentTxStmtQueryTest) finish(t testing.TB)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#concurrentTxStmtQueryTest.init.sql_test.go.0xc0291c8ae8",
                    "documentation": {
                      "identifier": "concurrentTxStmtQueryTest.init.sql_test.go.0xc0291c8ae8",
                      "newPage": false,
                      "searchKey": "sql.concurrentTxStmtQueryTest.init",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentTxStmtQueryTest) init(t testing.TB, db *DB)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentTxStmtQueryTest) init(t testing.TB, db *DB)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#concurrentTxStmtQueryTest.test",
                    "documentation": {
                      "identifier": "concurrentTxStmtQueryTest.test",
                      "newPage": false,
                      "searchKey": "sql.concurrentTxStmtQueryTest.test",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *concurrentTxStmtQueryTest) test(t testing.TB) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *concurrentTxStmtQueryTest) test(t testing.TB) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#connRequest",
              "documentation": {
                "identifier": "connRequest",
                "newPage": false,
                "searchKey": "sql.connRequest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type connRequest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype connRequest struct {\n\tconn *driverConn\n\terr  error\n}\n```\n\nconnRequest represents one request for a new connection When there are no idle connections available, DB.conn will create a new connRequest and put it on the db.connRequests list. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#connReuseStrategy",
              "documentation": {
                "identifier": "connReuseStrategy",
                "newPage": false,
                "searchKey": "sql.connReuseStrategy",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type connReuseStrategy uint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype connReuseStrategy uint8\n```\n\nconnReuseStrategy determines how (*DB).conn returns database connections. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#connStmt",
              "documentation": {
                "identifier": "connStmt",
                "newPage": false,
                "searchKey": "sql.connStmt",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type connStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype connStmt struct {\n\tdc *driverConn\n\tds *driverStmt\n}\n```\n\nconnStmt is a prepared statement on a particular connection. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#conversionTest",
              "documentation": {
                "identifier": "conversionTest",
                "newPage": false,
                "searchKey": "sql.conversionTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type conversionTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype conversionTest struct {\n\ts, d interface{} // source and destination\n\n\t// following are used if they're non-zero\n\twantint    int64\n\twantuint   uint64\n\twantstr    string\n\twantbytes  []byte\n\twantraw    RawBytes\n\twantf32    float32\n\twantf64    float64\n\twanttime   time.Time\n\twantbool   bool // used if d is of type *bool\n\twanterr    string\n\twantiface  interface{}\n\twantptr    *int64 // if non-nil, *d's pointed value must be equal to *wantptr\n\twantnil    bool   // if true, *d must be *int64(nil)\n\twantusrdef userDefined\n\twantusrstr userDefinedString\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#ctxOnlyConn",
              "documentation": {
                "identifier": "ctxOnlyConn",
                "newPage": false,
                "searchKey": "sql.ctxOnlyConn",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ctxOnlyConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ctxOnlyConn struct {\n\tfc *fakeConn\n\n\tqueryCtxCalled bool\n\texecCtxCalled  bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#ctxOnlyConn.Begin",
                    "documentation": {
                      "identifier": "ctxOnlyConn.Begin",
                      "newPage": false,
                      "searchKey": "sql.ctxOnlyConn.Begin",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *ctxOnlyConn) Begin() (driver.Tx, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *ctxOnlyConn) Begin() (driver.Tx, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#ctxOnlyConn.Close",
                    "documentation": {
                      "identifier": "ctxOnlyConn.Close",
                      "newPage": false,
                      "searchKey": "sql.ctxOnlyConn.Close",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *ctxOnlyConn) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *ctxOnlyConn) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#ctxOnlyConn.ExecContext",
                    "documentation": {
                      "identifier": "ctxOnlyConn.ExecContext",
                      "newPage": false,
                      "searchKey": "sql.ctxOnlyConn.ExecContext",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *ctxOnlyConn) ExecContext(ctx context.Context, q string, args []driver.NamedValue) (driver.Result, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *ctxOnlyConn) ExecContext(ctx context.Context, q string, args []driver.NamedValue) (driver.Result, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#ctxOnlyConn.Prepare",
                    "documentation": {
                      "identifier": "ctxOnlyConn.Prepare",
                      "newPage": false,
                      "searchKey": "sql.ctxOnlyConn.Prepare",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *ctxOnlyConn) Prepare(q string) (driver.Stmt, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *ctxOnlyConn) Prepare(q string) (driver.Stmt, error)\n```\n\nPrepare is still part of the Conn interface, so while it isn't used must be defined for compatibility. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#ctxOnlyConn.PrepareContext",
                    "documentation": {
                      "identifier": "ctxOnlyConn.PrepareContext",
                      "newPage": false,
                      "searchKey": "sql.ctxOnlyConn.PrepareContext",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *ctxOnlyConn) PrepareContext(ctx context.Context, q string) (driver.Stmt, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *ctxOnlyConn) PrepareContext(ctx context.Context, q string) (driver.Stmt, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#ctxOnlyConn.QueryContext",
                    "documentation": {
                      "identifier": "ctxOnlyConn.QueryContext",
                      "newPage": false,
                      "searchKey": "sql.ctxOnlyConn.QueryContext",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *ctxOnlyConn) QueryContext(ctx context.Context, q string, args []driver.NamedValue) (driver.Rows, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *ctxOnlyConn) QueryContext(ctx context.Context, q string, args []driver.NamedValue) (driver.Rows, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#ctxOnlyDriver",
              "documentation": {
                "identifier": "ctxOnlyDriver",
                "newPage": false,
                "searchKey": "sql.ctxOnlyDriver",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ctxOnlyDriver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ctxOnlyDriver struct {\n\tfakeDriver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#ctxOnlyDriver.Open",
                    "documentation": {
                      "identifier": "ctxOnlyDriver.Open",
                      "newPage": false,
                      "searchKey": "sql.ctxOnlyDriver.Open",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *ctxOnlyDriver) Open(dsn string) (driver.Conn, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *ctxOnlyDriver) Open(dsn string) (driver.Conn, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#dec",
              "documentation": {
                "identifier": "dec",
                "newPage": false,
                "searchKey": "sql.dec",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type dec struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dec struct {\n\tform        byte\n\tneg         bool\n\tcoefficient [16]byte\n\texponent    int32\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#dec.Compose",
                    "documentation": {
                      "identifier": "dec.Compose",
                      "newPage": false,
                      "searchKey": "sql.dec.Compose",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *dec) Compose(form byte, negative bool, coefficient []byte, exponent int32) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *dec) Compose(form byte, negative bool, coefficient []byte, exponent int32) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#dec.Decompose",
                    "documentation": {
                      "identifier": "dec.Decompose",
                      "newPage": false,
                      "searchKey": "sql.dec.Decompose",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d dec) Decompose(buf []byte) (form byte, negative bool, coefficient []byte, exponent int32)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d dec) Decompose(buf []byte) (form byte, negative bool, coefficient []byte, exponent int32)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#decFinite",
              "documentation": {
                "identifier": "decFinite",
                "newPage": false,
                "searchKey": "sql.decFinite",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type decFinite struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype decFinite struct {\n\tneg         bool\n\tcoefficient [16]byte\n\texponent    int32\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#decFinite.Compose",
                    "documentation": {
                      "identifier": "decFinite.Compose",
                      "newPage": false,
                      "searchKey": "sql.decFinite.Compose",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decFinite) Compose(form byte, negative bool, coefficient []byte, exponent int32) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decFinite) Compose(form byte, negative bool, coefficient []byte, exponent int32) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#decFinite.Decompose",
                    "documentation": {
                      "identifier": "decFinite.Decompose",
                      "newPage": false,
                      "searchKey": "sql.decFinite.Decompose",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d decFinite) Decompose(buf []byte) (form byte, negative bool, coefficient []byte, exponent int32)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d decFinite) Decompose(buf []byte) (form byte, negative bool, coefficient []byte, exponent int32)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#decimal",
              "documentation": {
                "identifier": "decimal",
                "newPage": false,
                "searchKey": "sql.decimal",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type decimal interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype decimal interface {\n\tdecimalDecompose\n\tdecimalCompose\n}\n```\n\ndecimal composes or decomposes a decimal value to and from individual parts. There are four parts: a boolean negative flag, a form byte with three possible states (finite=0, infinite=1, NaN=2), a base-2 big-endian integer coefficient (also known as a significand) as a []byte, and an int32 exponent. These are composed into a final value as \"decimal = (neg) (form=finite) coefficient * 10 ^ exponent\". A zero length coefficient is a zero value. The big-endian integer coefficient stores the most significant byte first (at coefficient[0]). If the form is not finite the coefficient and exponent should be ignored. The negative parameter may be set to true for any form, although implementations are not required to respect the negative parameter in the non-finite form. \n\nImplementations may choose to set the negative parameter to true on a zero or NaN value, but implementations that do not differentiate between negative and positive zero or NaN values should ignore the negative parameter without error. If an implementation does not support Infinity it may be converted into a NaN without error. If a value is set that is larger than what is supported by an implementation, an error must be returned. Implementations must return an error if a NaN or Infinity is attempted to be set while neither are supported. \n\nNOTE(kardianos): This is an experimental interface. See [https://golang.org/issue/30870](https://golang.org/issue/30870) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#decimalCompose",
              "documentation": {
                "identifier": "decimalCompose",
                "newPage": false,
                "searchKey": "sql.decimalCompose",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type decimalCompose interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype decimalCompose interface {\n\t// Compose sets the internal decimal value from parts. If the value cannot be\n\t// represented then an error should be returned.\n\tCompose(form byte, negative bool, coefficient []byte, exponent int32) error\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#decimalDecompose",
              "documentation": {
                "identifier": "decimalDecompose",
                "newPage": false,
                "searchKey": "sql.decimalDecompose",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type decimalDecompose interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype decimalDecompose interface {\n\t// Decompose returns the internal decimal state in parts.\n\t// If the provided buf has sufficient capacity, buf may be returned as the coefficient with\n\t// the value set and length set as appropriate.\n\tDecompose(buf []byte) (form byte, negative bool, coefficient []byte, exponent int32)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#decimalInt",
              "documentation": {
                "identifier": "decimalInt",
                "newPage": false,
                "searchKey": "sql.decimalInt",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type decimalInt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype decimalInt struct {\n\tvalue int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#depSet",
              "documentation": {
                "identifier": "depSet",
                "newPage": false,
                "searchKey": "sql.depSet",
                "tags": [
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type depSet map[interface{}]bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype depSet map[interface{}]bool // set of true bools\n\n```\n\ndepSet is a finalCloser's outstanding dependencies \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#doNotInclude",
              "documentation": {
                "identifier": "doNotInclude",
                "newPage": false,
                "searchKey": "sql.doNotInclude",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type doNotInclude struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype doNotInclude struct{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#driverConn",
              "documentation": {
                "identifier": "driverConn",
                "newPage": false,
                "searchKey": "sql.driverConn",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type driverConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype driverConn struct {\n\tdb        *DB\n\tcreatedAt time.Time\n\n\tsync.Mutex  // guards following\n\tci          driver.Conn\n\tneedReset   bool // The connection session should be reset before use if true.\n\tclosed      bool\n\tfinalClosed bool // ci.Close has been called\n\topenStmt    map[*driverStmt]bool\n\n\t// guarded by db.mu\n\tinUse      bool\n\treturnedAt time.Time // Time the connection was created or returned.\n\tonPut      []func()  // code (with db.mu held) run when conn is next returned\n\tdbmuClosed bool      // same as closed, but guarded by db.mu, for removeClosedStmtLocked\n}\n```\n\ndriverConn wraps a driver.Conn with a mutex, to be held during all calls into the Conn. (including any calls onto interfaces returned via that Conn, such as calls on Tx, Stmt, Result, Rows) \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#driverConn.Close",
                    "documentation": {
                      "identifier": "driverConn.Close",
                      "newPage": false,
                      "searchKey": "sql.driverConn.Close",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dc *driverConn) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dc *driverConn) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#driverConn.closeDBLocked",
                    "documentation": {
                      "identifier": "driverConn.closeDBLocked",
                      "newPage": false,
                      "searchKey": "sql.driverConn.closeDBLocked",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dc *driverConn) closeDBLocked() func() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dc *driverConn) closeDBLocked() func() error\n```\n\nthe dc.db's Mutex is held. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#driverConn.expired",
                    "documentation": {
                      "identifier": "driverConn.expired",
                      "newPage": false,
                      "searchKey": "sql.driverConn.expired",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dc *driverConn) expired(timeout time.Duration) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dc *driverConn) expired(timeout time.Duration) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#driverConn.finalClose",
                    "documentation": {
                      "identifier": "driverConn.finalClose",
                      "newPage": false,
                      "searchKey": "sql.driverConn.finalClose",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dc *driverConn) finalClose() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dc *driverConn) finalClose() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#driverConn.prepareLocked",
                    "documentation": {
                      "identifier": "driverConn.prepareLocked",
                      "newPage": false,
                      "searchKey": "sql.driverConn.prepareLocked",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dc *driverConn) prepareLocked(ctx context.Context, cg stmtConnGrabber, query string) (*driverStmt, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dc *driverConn) prepareLocked(ctx context.Context, cg stmtConnGrabber, query string) (*driverStmt, error)\n```\n\nprepareLocked prepares the query on dc. When cg == nil the dc must keep track of the prepared statements in a pool. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#driverConn.releaseConn",
                    "documentation": {
                      "identifier": "driverConn.releaseConn",
                      "newPage": false,
                      "searchKey": "sql.driverConn.releaseConn",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dc *driverConn) releaseConn(err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dc *driverConn) releaseConn(err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#driverConn.removeOpenStmt",
                    "documentation": {
                      "identifier": "driverConn.removeOpenStmt",
                      "newPage": false,
                      "searchKey": "sql.driverConn.removeOpenStmt",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dc *driverConn) removeOpenStmt(ds *driverStmt)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dc *driverConn) removeOpenStmt(ds *driverStmt)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#driverConn.resetSession",
                    "documentation": {
                      "identifier": "driverConn.resetSession",
                      "newPage": false,
                      "searchKey": "sql.driverConn.resetSession",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dc *driverConn) resetSession(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dc *driverConn) resetSession(ctx context.Context) error\n```\n\nresetSession checks if the driver connection needs the session to be reset and if required, resets it. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#driverConn.validateConnection",
                    "documentation": {
                      "identifier": "driverConn.validateConnection",
                      "newPage": false,
                      "searchKey": "sql.driverConn.validateConnection",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dc *driverConn) validateConnection(needsReset bool) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dc *driverConn) validateConnection(needsReset bool) bool\n```\n\nvalidateConnection checks if the connection is valid and can still be used. It also marks the session for reset if required. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#driverResult",
              "documentation": {
                "identifier": "driverResult",
                "newPage": false,
                "searchKey": "sql.driverResult",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type driverResult struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype driverResult struct {\n\tsync.Locker // the *driverConn\n\tresi        driver.Result\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#driverResult.LastInsertId",
                    "documentation": {
                      "identifier": "driverResult.LastInsertId",
                      "newPage": false,
                      "searchKey": "sql.driverResult.LastInsertId",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dr driverResult) LastInsertId() (int64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dr driverResult) LastInsertId() (int64, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#driverResult.RowsAffected",
                    "documentation": {
                      "identifier": "driverResult.RowsAffected",
                      "newPage": false,
                      "searchKey": "sql.driverResult.RowsAffected",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dr driverResult) RowsAffected() (int64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dr driverResult) RowsAffected() (int64, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#driverStmt",
              "documentation": {
                "identifier": "driverStmt",
                "newPage": false,
                "searchKey": "sql.driverStmt",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type driverStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype driverStmt struct {\n\tsync.Locker // the *driverConn\n\tsi          driver.Stmt\n\tclosed      bool\n\tcloseErr    error // return value of previous Close call\n}\n```\n\ndriverStmt associates a driver.Stmt with the *driverConn from which it came, so the driverConn's lock can be held during calls. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#driverStmt.Close",
                    "documentation": {
                      "identifier": "driverStmt.Close",
                      "newPage": false,
                      "searchKey": "sql.driverStmt.Close",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ds *driverStmt) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ds *driverStmt) Close() error\n```\n\nClose ensures driver.Stmt is only closed once and always returns the same result. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#dsnConnector",
              "documentation": {
                "identifier": "dsnConnector",
                "newPage": false,
                "searchKey": "sql.dsnConnector",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type dsnConnector struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dsnConnector struct {\n\tdsn    string\n\tdriver driver.Driver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#dsnConnector.Connect",
                    "documentation": {
                      "identifier": "dsnConnector.Connect",
                      "newPage": false,
                      "searchKey": "sql.dsnConnector.Connect",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t dsnConnector) Connect(_ context.Context) (driver.Conn, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t dsnConnector) Connect(_ context.Context) (driver.Conn, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#dsnConnector.Driver",
                    "documentation": {
                      "identifier": "dsnConnector.Driver",
                      "newPage": false,
                      "searchKey": "sql.dsnConnector.Driver",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t dsnConnector) Driver() driver.Driver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t dsnConnector) Driver() driver.Driver\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#fakeConn",
              "documentation": {
                "identifier": "fakeConn",
                "newPage": false,
                "searchKey": "sql.fakeConn",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type fakeConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fakeConn struct {\n\tdb *fakeDB // where to return ourselves to\n\n\tcurrTx *fakeTx\n\n\t// Every operation writes to line to enable the race detector\n\t// check for data races.\n\tline int64\n\n\t// Stats for tests:\n\tmu          sync.Mutex\n\tstmtsMade   int\n\tstmtsClosed int\n\tnumPrepare  int\n\n\t// bad connection tests; see isBad()\n\tbad       bool\n\tstickyBad bool\n\n\tskipDirtySession bool // tests that use Conn should set this to true.\n\n\t// dirtySession tests ResetSession, true if a query has executed\n\t// until ResetSession is called.\n\tdirtySession bool\n\n\t// The waiter is called before each query. May be used in place of the \"WAIT\"\n\t// directive.\n\twaiter func(context.Context)\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#fakeConn.Begin",
                    "documentation": {
                      "identifier": "fakeConn.Begin",
                      "newPage": false,
                      "searchKey": "sql.fakeConn.Begin",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConn) Begin() (driver.Tx, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConn) Begin() (driver.Tx, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeConn.Close",
                    "documentation": {
                      "identifier": "fakeConn.Close",
                      "newPage": false,
                      "searchKey": "sql.fakeConn.Close",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConn) Close() (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConn) Close() (err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeConn.Exec",
                    "documentation": {
                      "identifier": "fakeConn.Exec",
                      "newPage": false,
                      "searchKey": "sql.fakeConn.Exec",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConn) Exec(query string, args []driver.Value) (driver.Result, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConn) Exec(query string, args []driver.Value) (driver.Result, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeConn.ExecContext",
                    "documentation": {
                      "identifier": "fakeConn.ExecContext",
                      "newPage": false,
                      "searchKey": "sql.fakeConn.ExecContext",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConn) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConn) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeConn.IsValid",
                    "documentation": {
                      "identifier": "fakeConn.IsValid",
                      "newPage": false,
                      "searchKey": "sql.fakeConn.IsValid",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConn) IsValid() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConn) IsValid() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeConn.Prepare",
                    "documentation": {
                      "identifier": "fakeConn.Prepare",
                      "newPage": false,
                      "searchKey": "sql.fakeConn.Prepare",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConn) Prepare(query string) (driver.Stmt, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConn) Prepare(query string) (driver.Stmt, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeConn.PrepareContext",
                    "documentation": {
                      "identifier": "fakeConn.PrepareContext",
                      "newPage": false,
                      "searchKey": "sql.fakeConn.PrepareContext",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConn) PrepareContext(ctx context.Context, query string) (driver.Stmt, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConn) PrepareContext(ctx context.Context, query string) (driver.Stmt, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeConn.Query",
                    "documentation": {
                      "identifier": "fakeConn.Query",
                      "newPage": false,
                      "searchKey": "sql.fakeConn.Query",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConn) Query(query string, args []driver.Value) (driver.Rows, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConn) Query(query string, args []driver.Value) (driver.Rows, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeConn.QueryContext",
                    "documentation": {
                      "identifier": "fakeConn.QueryContext",
                      "newPage": false,
                      "searchKey": "sql.fakeConn.QueryContext",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConn) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConn) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeConn.ResetSession",
                    "documentation": {
                      "identifier": "fakeConn.ResetSession",
                      "newPage": false,
                      "searchKey": "sql.fakeConn.ResetSession",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConn) ResetSession(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConn) ResetSession(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeConn.incrStat",
                    "documentation": {
                      "identifier": "fakeConn.incrStat",
                      "newPage": false,
                      "searchKey": "sql.fakeConn.incrStat",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConn) incrStat(v *int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConn) incrStat(v *int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeConn.isBad",
                    "documentation": {
                      "identifier": "fakeConn.isBad",
                      "newPage": false,
                      "searchKey": "sql.fakeConn.isBad",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConn) isBad() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConn) isBad() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeConn.isDirtyAndMark",
                    "documentation": {
                      "identifier": "fakeConn.isDirtyAndMark",
                      "newPage": false,
                      "searchKey": "sql.fakeConn.isDirtyAndMark",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConn) isDirtyAndMark() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConn) isDirtyAndMark() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeConn.prepareCreate",
                    "documentation": {
                      "identifier": "fakeConn.prepareCreate",
                      "newPage": false,
                      "searchKey": "sql.fakeConn.prepareCreate",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConn) prepareCreate(stmt *fakeStmt, parts []string) (*fakeStmt, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConn) prepareCreate(stmt *fakeStmt, parts []string) (*fakeStmt, error)\n```\n\nparts are table|col=type,col2=type2 \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeConn.prepareInsert",
                    "documentation": {
                      "identifier": "fakeConn.prepareInsert",
                      "newPage": false,
                      "searchKey": "sql.fakeConn.prepareInsert",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConn) prepareInsert(ctx context.Context, stmt *fakeStmt, parts []string) (*fakeStmt, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConn) prepareInsert(ctx context.Context, stmt *fakeStmt, parts []string) (*fakeStmt, error)\n```\n\nparts are table|col=?,col2=val \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeConn.prepareSelect",
                    "documentation": {
                      "identifier": "fakeConn.prepareSelect",
                      "newPage": false,
                      "searchKey": "sql.fakeConn.prepareSelect",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConn) prepareSelect(stmt *fakeStmt, parts []string) (*fakeStmt, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConn) prepareSelect(stmt *fakeStmt, parts []string) (*fakeStmt, error)\n```\n\nparts are table|selectCol1,selectCol2|whereCol=?,whereCol2=? (note that where columns must always contain ? marks, \n\n```\njust a limitation for fakedb)\n\n```\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeConn.touchMem",
                    "documentation": {
                      "identifier": "fakeConn.touchMem",
                      "newPage": false,
                      "searchKey": "sql.fakeConn.touchMem",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConn) touchMem()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConn) touchMem()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#fakeConnector",
              "documentation": {
                "identifier": "fakeConnector",
                "newPage": false,
                "searchKey": "sql.fakeConnector",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type fakeConnector struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fakeConnector struct {\n\tname string\n\n\twaiter func(context.Context)\n\tclosed bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#fakeConnector.Close",
                    "documentation": {
                      "identifier": "fakeConnector.Close",
                      "newPage": false,
                      "searchKey": "sql.fakeConnector.Close",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConnector) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConnector) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeConnector.Connect",
                    "documentation": {
                      "identifier": "fakeConnector.Connect",
                      "newPage": false,
                      "searchKey": "sql.fakeConnector.Connect",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConnector) Connect(context.Context) (driver.Conn, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConnector) Connect(context.Context) (driver.Conn, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeConnector.Driver",
                    "documentation": {
                      "identifier": "fakeConnector.Driver",
                      "newPage": false,
                      "searchKey": "sql.fakeConnector.Driver",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *fakeConnector) Driver() driver.Driver"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *fakeConnector) Driver() driver.Driver\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#fakeDB",
              "documentation": {
                "identifier": "fakeDB",
                "newPage": false,
                "searchKey": "sql.fakeDB",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type fakeDB struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fakeDB struct {\n\tname string\n\n\tmu       sync.Mutex\n\ttables   map[string]*table\n\tbadConn  bool\n\tallowAny bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#fakeDB.columnType",
                    "documentation": {
                      "identifier": "fakeDB.columnType",
                      "newPage": false,
                      "searchKey": "sql.fakeDB.columnType",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *fakeDB) columnType(table, column string) (typ string, ok bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *fakeDB) columnType(table, column string) (typ string, ok bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeDB.createTable",
                    "documentation": {
                      "identifier": "fakeDB.createTable",
                      "newPage": false,
                      "searchKey": "sql.fakeDB.createTable",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *fakeDB) createTable(name string, columnNames, columnTypes []string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *fakeDB) createTable(name string, columnNames, columnTypes []string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeDB.table",
                    "documentation": {
                      "identifier": "fakeDB.table",
                      "newPage": false,
                      "searchKey": "sql.fakeDB.table",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *fakeDB) table(table string) (*table, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *fakeDB) table(table string) (*table, bool)\n```\n\nmust be called with db.mu lock held \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeDB.wipe",
                    "documentation": {
                      "identifier": "fakeDB.wipe",
                      "newPage": false,
                      "searchKey": "sql.fakeDB.wipe",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (db *fakeDB) wipe()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (db *fakeDB) wipe()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#fakeDriver",
              "documentation": {
                "identifier": "fakeDriver",
                "newPage": false,
                "searchKey": "sql.fakeDriver",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type fakeDriver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fakeDriver struct {\n\tmu         sync.Mutex // guards 3 following fields\n\topenCount  int        // conn opens\n\tcloseCount int        // conn closes\n\twaitCh     chan struct{}\n\twaitingCh  chan struct{}\n\tdbs        map[string]*fakeDB\n}\n```\n\nfakeDriver is a fake database that implements Go's driver.Driver interface, just for testing. \n\nIt speaks a query language that's semantically similar to but syntactically different and simpler than SQL.  The syntax is as follows: \n\n```\nWIPE\nCREATE|<tablename>|<col>=<type>,<col>=<type>,...\n  where types are: \"string\", [u]int{8,16,32,64}, \"bool\"\nINSERT|<tablename>|col=val,col2=val2,col3=?\nSELECT|<tablename>|projectcol1,projectcol2|filtercol=?,filtercol2=?\nSELECT|<tablename>|projectcol1,projectcol2|filtercol=?param1,filtercol2=?param2\n\n```\nAny of these can be preceded by PANIC|<method>|, to cause the named method on fakeStmt to panic. \n\nAny of these can be proceeded by WAIT|<duration>|, to cause the named method on fakeStmt to sleep for the specified duration. \n\nMultiple of these can be combined when separated with a semicolon. \n\nWhen opening a fakeDriver's database, it starts empty with no tables. All tables and data are stored in memory only. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#fakeDriver.Open",
                    "documentation": {
                      "identifier": "fakeDriver.Open",
                      "newPage": false,
                      "searchKey": "sql.fakeDriver.Open",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *fakeDriver) Open(dsn string) (driver.Conn, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *fakeDriver) Open(dsn string) (driver.Conn, error)\n```\n\nSupports dsn forms: \n\n```\n<dbname>\n<dbname>;<opts>  (only currently supported option is `badConn`,\n                  which causes driver.ErrBadConn to be returned on\n                  every other conn.Begin())\n\n```\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeDriver.getDB",
                    "documentation": {
                      "identifier": "fakeDriver.getDB",
                      "newPage": false,
                      "searchKey": "sql.fakeDriver.getDB",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *fakeDriver) getDB(name string) *fakeDB"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *fakeDriver) getDB(name string) *fakeDB\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#fakeDriverCtx",
              "documentation": {
                "identifier": "fakeDriverCtx",
                "newPage": false,
                "searchKey": "sql.fakeDriverCtx",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type fakeDriverCtx struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fakeDriverCtx struct {\n\tfakeDriver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#fakeDriverCtx.OpenConnector",
                    "documentation": {
                      "identifier": "fakeDriverCtx.OpenConnector",
                      "newPage": false,
                      "searchKey": "sql.fakeDriverCtx.OpenConnector",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cc *fakeDriverCtx) OpenConnector(name string) (driver.Connector, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cc *fakeDriverCtx) OpenConnector(name string) (driver.Connector, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#fakeDriverString",
              "documentation": {
                "identifier": "fakeDriverString",
                "newPage": false,
                "searchKey": "sql.fakeDriverString",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type fakeDriverString struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fakeDriverString struct{}\n```\n\nfakeDriverString is like driver.String, but indirects pointers like DefaultValueConverter. \n\nThis could be surprising behavior to retroactively apply to driver.String now that Go1 is out, but this is convenient for our TestPointerParamsAndScans. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#fakeDriverString.ConvertValue",
                    "documentation": {
                      "identifier": "fakeDriverString.ConvertValue",
                      "newPage": false,
                      "searchKey": "sql.fakeDriverString.ConvertValue",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fakeDriverString) ConvertValue(v interface{}) (driver.Value, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fakeDriverString) ConvertValue(v interface{}) (driver.Value, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#fakeStmt",
              "documentation": {
                "identifier": "fakeStmt",
                "newPage": false,
                "searchKey": "sql.fakeStmt",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type fakeStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fakeStmt struct {\n\tmemToucher\n\tc *fakeConn\n\tq string // just for debugging\n\n\tcmd   string\n\ttable string\n\tpanic string\n\twait  time.Duration\n\n\tnext *fakeStmt // used for returning multiple results.\n\n\tclosed bool\n\n\tcolName      []string      // used by CREATE, INSERT, SELECT (selected columns)\n\tcolType      []string      // used by CREATE\n\tcolValue     []interface{} // used by INSERT (mix of strings and \"?\" for bound params)\n\tplaceholders int           // used by INSERT/SELECT: number of ? params\n\n\twhereCol []boundCol // used by SELECT (all placeholders)\n\n\tplaceholderConverter []driver.ValueConverter // used by INSERT\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#fakeStmt.Close",
                    "documentation": {
                      "identifier": "fakeStmt.Close",
                      "newPage": false,
                      "searchKey": "sql.fakeStmt.Close",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *fakeStmt) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *fakeStmt) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeStmt.ColumnConverter",
                    "documentation": {
                      "identifier": "fakeStmt.ColumnConverter",
                      "newPage": false,
                      "searchKey": "sql.fakeStmt.ColumnConverter",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *fakeStmt) ColumnConverter(idx int) driver.ValueConverter"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *fakeStmt) ColumnConverter(idx int) driver.ValueConverter\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeStmt.Exec",
                    "documentation": {
                      "identifier": "fakeStmt.Exec",
                      "newPage": false,
                      "searchKey": "sql.fakeStmt.Exec",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *fakeStmt) Exec(args []driver.Value) (driver.Result, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *fakeStmt) Exec(args []driver.Value) (driver.Result, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeStmt.ExecContext",
                    "documentation": {
                      "identifier": "fakeStmt.ExecContext",
                      "newPage": false,
                      "searchKey": "sql.fakeStmt.ExecContext",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *fakeStmt) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *fakeStmt) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeStmt.NumInput",
                    "documentation": {
                      "identifier": "fakeStmt.NumInput",
                      "newPage": false,
                      "searchKey": "sql.fakeStmt.NumInput",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *fakeStmt) NumInput() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *fakeStmt) NumInput() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeStmt.Query",
                    "documentation": {
                      "identifier": "fakeStmt.Query",
                      "newPage": false,
                      "searchKey": "sql.fakeStmt.Query",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *fakeStmt) Query(args []driver.Value) (driver.Rows, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *fakeStmt) Query(args []driver.Value) (driver.Rows, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeStmt.QueryContext",
                    "documentation": {
                      "identifier": "fakeStmt.QueryContext",
                      "newPage": false,
                      "searchKey": "sql.fakeStmt.QueryContext",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *fakeStmt) QueryContext(ctx context.Context, args []driver.NamedValue) (driver.Rows, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *fakeStmt) QueryContext(ctx context.Context, args []driver.NamedValue) (driver.Rows, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeStmt.execInsert",
                    "documentation": {
                      "identifier": "fakeStmt.execInsert",
                      "newPage": false,
                      "searchKey": "sql.fakeStmt.execInsert",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *fakeStmt) execInsert(args []driver.NamedValue, doInsert bool) (driver.Result, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *fakeStmt) execInsert(args []driver.NamedValue, doInsert bool) (driver.Result, error)\n```\n\nWhen doInsert is true, add the row to the table. When doInsert is false do prep-work and error checking, but don't actually add the row to the table. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#fakeTx",
              "documentation": {
                "identifier": "fakeTx",
                "newPage": false,
                "searchKey": "sql.fakeTx",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type fakeTx struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fakeTx struct {\n\tc *fakeConn\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#fakeTx.Commit",
                    "documentation": {
                      "identifier": "fakeTx.Commit",
                      "newPage": false,
                      "searchKey": "sql.fakeTx.Commit",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *fakeTx) Commit() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *fakeTx) Commit() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#fakeTx.Rollback",
                    "documentation": {
                      "identifier": "fakeTx.Rollback",
                      "newPage": false,
                      "searchKey": "sql.fakeTx.Rollback",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tx *fakeTx) Rollback() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tx *fakeTx) Rollback() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#finalCloser",
              "documentation": {
                "identifier": "finalCloser",
                "newPage": false,
                "searchKey": "sql.finalCloser",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type finalCloser interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype finalCloser interface {\n\t// finalClose is called when the reference count of an object\n\t// goes to zero. (*DB).mu is not held while calling it.\n\tfinalClose() error\n}\n```\n\nThe finalCloser interface is used by (*DB).addDep and related dependency reference counting. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#memToucher",
              "documentation": {
                "identifier": "memToucher",
                "newPage": false,
                "searchKey": "sql.memToucher",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type memToucher interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype memToucher interface {\n\t// touchMem reads & writes some memory, to help find data races.\n\ttouchMem()\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#nullTestRow",
              "documentation": {
                "identifier": "nullTestRow",
                "newPage": false,
                "searchKey": "sql.nullTestRow",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type nullTestRow struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype nullTestRow struct {\n\tnullParam    interface{}\n\tnotNullParam interface{}\n\tscanNullVal  interface{}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#nullTestSpec",
              "documentation": {
                "identifier": "nullTestSpec",
                "newPage": false,
                "searchKey": "sql.nullTestSpec",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type nullTestSpec struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype nullTestSpec struct {\n\tnullType    string\n\tnotNullType string\n\trows        [6]nullTestRow\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#nvcConn",
              "documentation": {
                "identifier": "nvcConn",
                "newPage": false,
                "searchKey": "sql.nvcConn",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type nvcConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype nvcConn struct {\n\t*fakeConn\n\tskipNamedValueCheck bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#nvcConn.CheckNamedValue",
                    "documentation": {
                      "identifier": "nvcConn.CheckNamedValue",
                      "newPage": false,
                      "searchKey": "sql.nvcConn.CheckNamedValue",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *nvcConn) CheckNamedValue(nv *driver.NamedValue) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *nvcConn) CheckNamedValue(nv *driver.NamedValue) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#nvcDriver",
              "documentation": {
                "identifier": "nvcDriver",
                "newPage": false,
                "searchKey": "sql.nvcDriver",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type nvcDriver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype nvcDriver struct {\n\tfakeDriver\n\tskipNamedValueCheck bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#nvcDriver.Open",
                    "documentation": {
                      "identifier": "nvcDriver.Open",
                      "newPage": false,
                      "searchKey": "sql.nvcDriver.Open",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *nvcDriver) Open(dsn string) (driver.Conn, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *nvcDriver) Open(dsn string) (driver.Conn, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#pingConn",
              "documentation": {
                "identifier": "pingConn",
                "newPage": false,
                "searchKey": "sql.pingConn",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type pingConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype pingConn struct {\n\tbadConn\n\tdriver *pingDriver\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#pingConn.Ping",
                    "documentation": {
                      "identifier": "pingConn.Ping",
                      "newPage": false,
                      "searchKey": "sql.pingConn.Ping",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (pc pingConn) Ping(ctx context.Context) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (pc pingConn) Ping(ctx context.Context) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#pingDriver",
              "documentation": {
                "identifier": "pingDriver",
                "newPage": false,
                "searchKey": "sql.pingDriver",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type pingDriver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype pingDriver struct {\n\tfails bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#pingDriver.Open",
                    "documentation": {
                      "identifier": "pingDriver.Open",
                      "newPage": false,
                      "searchKey": "sql.pingDriver.Open",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (pd *pingDriver) Open(name string) (driver.Conn, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (pd *pingDriver) Open(name string) (driver.Conn, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#releaseConn",
              "documentation": {
                "identifier": "releaseConn",
                "newPage": false,
                "searchKey": "sql.releaseConn",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type releaseConn func(error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype releaseConn func(error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#row",
              "documentation": {
                "identifier": "row",
                "newPage": false,
                "searchKey": "sql.row",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type row struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype row struct {\n\tcols []interface{} // must be same size as its table colname + coltype\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#rowsCursor",
              "documentation": {
                "identifier": "rowsCursor",
                "newPage": false,
                "searchKey": "sql.rowsCursor",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type rowsCursor struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype rowsCursor struct {\n\tparentMem memToucher\n\tcols      [][]string\n\tcolType   [][]string\n\tposSet    int\n\tposRow    int\n\trows      [][]*row\n\tclosed    bool\n\n\t// errPos and err are for making Next return early with error.\n\terrPos int\n\terr    error\n\n\t// a clone of slices to give out to clients, indexed by the\n\t// original slice's first byte address.  we clone them\n\t// just so we're able to corrupt them on close.\n\tbytesClone map[*byte][]byte\n\n\t// Every operation writes to line to enable the race detector\n\t// check for data races.\n\t// This is separate from the fakeConn.line to allow for drivers that\n\t// can start multiple queries on the same transaction at the same time.\n\tline int64\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#rowsCursor.Close",
                    "documentation": {
                      "identifier": "rowsCursor.Close",
                      "newPage": false,
                      "searchKey": "sql.rowsCursor.Close",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rc *rowsCursor) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rc *rowsCursor) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#rowsCursor.ColumnTypeScanType",
                    "documentation": {
                      "identifier": "rowsCursor.ColumnTypeScanType",
                      "newPage": false,
                      "searchKey": "sql.rowsCursor.ColumnTypeScanType",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rc *rowsCursor) ColumnTypeScanType(index int) reflect.Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rc *rowsCursor) ColumnTypeScanType(index int) reflect.Type\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#rowsCursor.Columns",
                    "documentation": {
                      "identifier": "rowsCursor.Columns",
                      "newPage": false,
                      "searchKey": "sql.rowsCursor.Columns",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rc *rowsCursor) Columns() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rc *rowsCursor) Columns() []string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#rowsCursor.HasNextResultSet",
                    "documentation": {
                      "identifier": "rowsCursor.HasNextResultSet",
                      "newPage": false,
                      "searchKey": "sql.rowsCursor.HasNextResultSet",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rc *rowsCursor) HasNextResultSet() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rc *rowsCursor) HasNextResultSet() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#rowsCursor.Next",
                    "documentation": {
                      "identifier": "rowsCursor.Next",
                      "newPage": false,
                      "searchKey": "sql.rowsCursor.Next",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rc *rowsCursor) Next(dest []driver.Value) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rc *rowsCursor) Next(dest []driver.Value) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#rowsCursor.NextResultSet",
                    "documentation": {
                      "identifier": "rowsCursor.NextResultSet",
                      "newPage": false,
                      "searchKey": "sql.rowsCursor.NextResultSet",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rc *rowsCursor) NextResultSet() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rc *rowsCursor) NextResultSet() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#rowsCursor.touchMem",
                    "documentation": {
                      "identifier": "rowsCursor.touchMem",
                      "newPage": false,
                      "searchKey": "sql.rowsCursor.touchMem",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rc *rowsCursor) touchMem()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rc *rowsCursor) touchMem()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#stmtConnGrabber",
              "documentation": {
                "identifier": "stmtConnGrabber",
                "newPage": false,
                "searchKey": "sql.stmtConnGrabber",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type stmtConnGrabber interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype stmtConnGrabber interface {\n\t// grabConn returns the driverConn and the associated release function\n\t// that must be called when the operation completes.\n\tgrabConn(context.Context) (*driverConn, releaseConn, error)\n\n\t// txCtx returns the transaction context if available.\n\t// The returned context should be selected on along with\n\t// any query context when awaiting a cancel.\n\ttxCtx() context.Context\n}\n```\n\nstmtConnGrabber represents a Tx or Conn that will return the underlying driverConn and release function. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#stubDriverStmt",
              "documentation": {
                "identifier": "stubDriverStmt",
                "newPage": false,
                "searchKey": "sql.stubDriverStmt",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type stubDriverStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype stubDriverStmt struct {\n\terr error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#stubDriverStmt.Close",
                    "documentation": {
                      "identifier": "stubDriverStmt.Close",
                      "newPage": false,
                      "searchKey": "sql.stubDriverStmt.Close",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s stubDriverStmt) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s stubDriverStmt) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#stubDriverStmt.Exec",
                    "documentation": {
                      "identifier": "stubDriverStmt.Exec",
                      "newPage": false,
                      "searchKey": "sql.stubDriverStmt.Exec",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s stubDriverStmt) Exec(args []driver.Value) (driver.Result, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s stubDriverStmt) Exec(args []driver.Value) (driver.Result, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#stubDriverStmt.NumInput",
                    "documentation": {
                      "identifier": "stubDriverStmt.NumInput",
                      "newPage": false,
                      "searchKey": "sql.stubDriverStmt.NumInput",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s stubDriverStmt) NumInput() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s stubDriverStmt) NumInput() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/database/sql#stubDriverStmt.Query",
                    "documentation": {
                      "identifier": "stubDriverStmt.Query",
                      "newPage": false,
                      "searchKey": "sql.stubDriverStmt.Query",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s stubDriverStmt) Query(args []driver.Value) (driver.Rows, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s stubDriverStmt) Query(args []driver.Value) (driver.Rows, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#table",
              "documentation": {
                "identifier": "table",
                "newPage": false,
                "searchKey": "sql.table",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type table struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype table struct {\n\tmu      sync.Mutex\n\tcolname []string\n\tcoltype []string\n\trows    []*row\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/database/sql#table.columnIndex",
                    "documentation": {
                      "identifier": "table.columnIndex",
                      "newPage": false,
                      "searchKey": "sql.table.columnIndex",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *table) columnIndex(name string) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *table) columnIndex(name string) int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/database/sql#userDefined",
              "documentation": {
                "identifier": "userDefined",
                "newPage": false,
                "searchKey": "sql.userDefined",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type userDefined float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype userDefined float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#userDefinedSlice",
              "documentation": {
                "identifier": "userDefinedSlice",
                "newPage": false,
                "searchKey": "sql.userDefinedSlice",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type userDefinedSlice []int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype userDefinedSlice []int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#userDefinedString",
              "documentation": {
                "identifier": "userDefinedString",
                "newPage": false,
                "searchKey": "sql.userDefinedString",
                "tags": [
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type userDefinedString string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype userDefinedString string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#valueConverterTest",
              "documentation": {
                "identifier": "valueConverterTest",
                "newPage": false,
                "searchKey": "sql.valueConverterTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type valueConverterTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype valueConverterTest struct {\n\tc       driver.ValueConverter\n\tin, out interface{}\n\terr     string\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/database/sql#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/database/sql#BenchmarkConcurrentDBExec",
              "documentation": {
                "identifier": "BenchmarkConcurrentDBExec",
                "newPage": false,
                "searchKey": "sql.BenchmarkConcurrentDBExec",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConcurrentDBExec(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConcurrentDBExec(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#BenchmarkConcurrentRandom",
              "documentation": {
                "identifier": "BenchmarkConcurrentRandom",
                "newPage": false,
                "searchKey": "sql.BenchmarkConcurrentRandom",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConcurrentRandom(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConcurrentRandom(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#BenchmarkConcurrentStmtExec",
              "documentation": {
                "identifier": "BenchmarkConcurrentStmtExec",
                "newPage": false,
                "searchKey": "sql.BenchmarkConcurrentStmtExec",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConcurrentStmtExec(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConcurrentStmtExec(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#BenchmarkConcurrentStmtQuery",
              "documentation": {
                "identifier": "BenchmarkConcurrentStmtQuery",
                "newPage": false,
                "searchKey": "sql.BenchmarkConcurrentStmtQuery",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConcurrentStmtQuery(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConcurrentStmtQuery(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#BenchmarkConcurrentTxExec",
              "documentation": {
                "identifier": "BenchmarkConcurrentTxExec",
                "newPage": false,
                "searchKey": "sql.BenchmarkConcurrentTxExec",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConcurrentTxExec(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConcurrentTxExec(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#BenchmarkConcurrentTxQuery",
              "documentation": {
                "identifier": "BenchmarkConcurrentTxQuery",
                "newPage": false,
                "searchKey": "sql.BenchmarkConcurrentTxQuery",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConcurrentTxQuery(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConcurrentTxQuery(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#BenchmarkConcurrentTxStmtExec",
              "documentation": {
                "identifier": "BenchmarkConcurrentTxStmtExec",
                "newPage": false,
                "searchKey": "sql.BenchmarkConcurrentTxStmtExec",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConcurrentTxStmtExec(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConcurrentTxStmtExec(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#BenchmarkConcurrentTxStmtQuery",
              "documentation": {
                "identifier": "BenchmarkConcurrentTxStmtQuery",
                "newPage": false,
                "searchKey": "sql.BenchmarkConcurrentTxStmtQuery",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConcurrentTxStmtQuery(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConcurrentTxStmtQuery(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#BenchmarkManyConcurrentQueries",
              "documentation": {
                "identifier": "BenchmarkManyConcurrentQueries",
                "newPage": false,
                "searchKey": "sql.BenchmarkManyConcurrentQueries",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkManyConcurrentQueries(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkManyConcurrentQueries(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#Drivers",
              "documentation": {
                "identifier": "Drivers",
                "newPage": false,
                "searchKey": "sql.Drivers",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Drivers() []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Drivers() []string\n```\n\nDrivers returns a sorted list of the names of the registered drivers. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#Register",
              "documentation": {
                "identifier": "Register",
                "newPage": false,
                "searchKey": "sql.Register",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Register(name string, driver driver.Driver)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Register(name string, driver driver.Driver)\n```\n\nRegister makes a database driver available by the provided name. If Register is called twice with the same name or if driver is nil, it panics. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestBadDriver",
              "documentation": {
                "identifier": "TestBadDriver",
                "newPage": false,
                "searchKey": "sql.TestBadDriver",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBadDriver(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBadDriver(t *testing.T)\n```\n\nIssue 15901. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestBogusPreboundParameters",
              "documentation": {
                "identifier": "TestBogusPreboundParameters",
                "newPage": false,
                "searchKey": "sql.TestBogusPreboundParameters",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBogusPreboundParameters(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBogusPreboundParameters(t *testing.T)\n```\n\njust a test of fakedb itself \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestCloseConnBeforeStmts",
              "documentation": {
                "identifier": "TestCloseConnBeforeStmts",
                "newPage": false,
                "searchKey": "sql.TestCloseConnBeforeStmts",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCloseConnBeforeStmts(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCloseConnBeforeStmts(t *testing.T)\n```\n\ngolang.org/issue/5046 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestCloseStmtBeforeRows",
              "documentation": {
                "identifier": "TestCloseStmtBeforeRows",
                "newPage": false,
                "searchKey": "sql.TestCloseStmtBeforeRows",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCloseStmtBeforeRows(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCloseStmtBeforeRows(t *testing.T)\n```\n\nFrom golang.org/issue/3865 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestConcurrency",
              "documentation": {
                "identifier": "TestConcurrency",
                "newPage": false,
                "searchKey": "sql.TestConcurrency",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConcurrency(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConcurrency(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestConnExpiresFreshOutOfPool",
              "documentation": {
                "identifier": "TestConnExpiresFreshOutOfPool",
                "newPage": false,
                "searchKey": "sql.TestConnExpiresFreshOutOfPool",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConnExpiresFreshOutOfPool(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConnExpiresFreshOutOfPool(t *testing.T)\n```\n\nIssue32530 encounters an issue where a connection may expire right after it comes out of a used connection pool even when a new connection is requested. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestConnIsValid",
              "documentation": {
                "identifier": "TestConnIsValid",
                "newPage": false,
                "searchKey": "sql.TestConnIsValid",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConnIsValid(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConnIsValid(t *testing.T)\n```\n\nTestConnIsValid verifies that a database connection that should be discarded, is actually discarded and does not re-enter the connection pool. If the IsValid method from *fakeConn is removed, this test will fail. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestConnMaxLifetime",
              "documentation": {
                "identifier": "TestConnMaxLifetime",
                "newPage": false,
                "searchKey": "sql.TestConnMaxLifetime",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConnMaxLifetime(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConnMaxLifetime(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestConnQuery",
              "documentation": {
                "identifier": "TestConnQuery",
                "newPage": false,
                "searchKey": "sql.TestConnQuery",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConnQuery(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConnQuery(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestConnRaw",
              "documentation": {
                "identifier": "TestConnRaw",
                "newPage": false,
                "searchKey": "sql.TestConnRaw",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConnRaw(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConnRaw(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestConnTx",
              "documentation": {
                "identifier": "TestConnTx",
                "newPage": false,
                "searchKey": "sql.TestConnTx",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConnTx(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConnTx(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestConnectionLeak",
              "documentation": {
                "identifier": "TestConnectionLeak",
                "newPage": false,
                "searchKey": "sql.TestConnectionLeak",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConnectionLeak(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConnectionLeak(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestConversions",
              "documentation": {
                "identifier": "TestConversions",
                "newPage": false,
                "searchKey": "sql.TestConversions",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConversions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConversions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestCursorFake",
              "documentation": {
                "identifier": "TestCursorFake",
                "newPage": false,
                "searchKey": "sql.TestCursorFake",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCursorFake(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCursorFake(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestDecimal",
              "documentation": {
                "identifier": "TestDecimal",
                "newPage": false,
                "searchKey": "sql.TestDecimal",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecimal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecimal(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestDriverArgs",
              "documentation": {
                "identifier": "TestDriverArgs",
                "newPage": false,
                "searchKey": "sql.TestDriverArgs",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDriverArgs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDriverArgs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestDriverPanic",
              "documentation": {
                "identifier": "TestDriverPanic",
                "newPage": false,
                "searchKey": "sql.TestDriverPanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDriverPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDriverPanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestDrivers",
              "documentation": {
                "identifier": "TestDrivers",
                "newPage": false,
                "searchKey": "sql.TestDrivers",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDrivers(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDrivers(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestErrBadConnReconnect",
              "documentation": {
                "identifier": "TestErrBadConnReconnect",
                "newPage": false,
                "searchKey": "sql.TestErrBadConnReconnect",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestErrBadConnReconnect(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestErrBadConnReconnect(t *testing.T)\n```\n\ngolang.org/issue/5718 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestExec",
              "documentation": {
                "identifier": "TestExec",
                "newPage": false,
                "searchKey": "sql.TestExec",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExec(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExec(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestInvalidNilValues",
              "documentation": {
                "identifier": "TestInvalidNilValues",
                "newPage": false,
                "searchKey": "sql.TestInvalidNilValues",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInvalidNilValues(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInvalidNilValues(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestIssue18429",
              "documentation": {
                "identifier": "TestIssue18429",
                "newPage": false,
                "searchKey": "sql.TestIssue18429",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue18429(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue18429(t *testing.T)\n```\n\nTestIssue18429 attempts to stress rolling back the transaction from a context cancel while simultaneously calling Tx.Rollback. Rolling back from a context happens concurrently so tx.rollback and tx.Commit must guard against double entry. \n\nIn the test, a context is canceled while the query is in process so the internal rollback will run concurrently with the explicitly called Tx.Rollback. \n\nThe addition of calling rows.Next also tests Issue 21117. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestIssue18719",
              "documentation": {
                "identifier": "TestIssue18719",
                "newPage": false,
                "searchKey": "sql.TestIssue18719",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue18719(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue18719(t *testing.T)\n```\n\nTestIssue18719 closes the context right before use. The sql.driverConn will nil out the ci on close in a lock, but if another process uses it right after it will panic with on the nil ref. \n\nSee [https://golang.org/cl/35550](https://golang.org/cl/35550) . \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestIssue20160",
              "documentation": {
                "identifier": "TestIssue20160",
                "newPage": false,
                "searchKey": "sql.TestIssue20160",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue20160(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue20160(t *testing.T)\n```\n\nTestIssue20160 attempts to test a short context life on a stmt Query. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestIssue20575",
              "documentation": {
                "identifier": "TestIssue20575",
                "newPage": false,
                "searchKey": "sql.TestIssue20575",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue20575(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue20575(t *testing.T)\n```\n\nTestIssue20575 ensures the Rows from query does not block closing a transaction. Ensure Rows is closed while closing a trasaction. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestIssue20622",
              "documentation": {
                "identifier": "TestIssue20622",
                "newPage": false,
                "searchKey": "sql.TestIssue20622",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue20622(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue20622(t *testing.T)\n```\n\nTestIssue20622 tests closing the transaction before rows is closed, requires the race detector to fail. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestIssue20647",
              "documentation": {
                "identifier": "TestIssue20647",
                "newPage": false,
                "searchKey": "sql.TestIssue20647",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue20647(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue20647(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestIssue2542Deadlock",
              "documentation": {
                "identifier": "TestIssue2542Deadlock",
                "newPage": false,
                "searchKey": "sql.TestIssue2542Deadlock",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue2542Deadlock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue2542Deadlock(t *testing.T)\n```\n\nTests fix for issue 2542, that we release a lock when querying on a closed connection. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestIssue4902",
              "documentation": {
                "identifier": "TestIssue4902",
                "newPage": false,
                "searchKey": "sql.TestIssue4902",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue4902(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue4902(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestIssue6081",
              "documentation": {
                "identifier": "TestIssue6081",
                "newPage": false,
                "searchKey": "sql.TestIssue6081",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue6081(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue6081(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestIssue6651",
              "documentation": {
                "identifier": "TestIssue6651",
                "newPage": false,
                "searchKey": "sql.TestIssue6651",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue6651(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue6651(t *testing.T)\n```\n\nTest issue 6651 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestManyErrBadConn",
              "documentation": {
                "identifier": "TestManyErrBadConn",
                "newPage": false,
                "searchKey": "sql.TestManyErrBadConn",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestManyErrBadConn(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestManyErrBadConn(t *testing.T)\n```\n\nTest cases where there's more than maxBadConnRetries bad connections in the pool (issue 8834) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestMaxIdleConns",
              "documentation": {
                "identifier": "TestMaxIdleConns",
                "newPage": false,
                "searchKey": "sql.TestMaxIdleConns",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMaxIdleConns(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMaxIdleConns(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestMaxIdleTime",
              "documentation": {
                "identifier": "TestMaxIdleTime",
                "newPage": false,
                "searchKey": "sql.TestMaxIdleTime",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMaxIdleTime(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMaxIdleTime(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestMaxOpenConns",
              "documentation": {
                "identifier": "TestMaxOpenConns",
                "newPage": false,
                "searchKey": "sql.TestMaxOpenConns",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMaxOpenConns(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMaxOpenConns(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestMaxOpenConnsOnBusy",
              "documentation": {
                "identifier": "TestMaxOpenConnsOnBusy",
                "newPage": false,
                "searchKey": "sql.TestMaxOpenConnsOnBusy",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMaxOpenConnsOnBusy(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMaxOpenConnsOnBusy(t *testing.T)\n```\n\nIssue 9453: tests that SetMaxOpenConns can be lowered at runtime and affects the subsequent release of connections. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestMultiResultSetQuery",
              "documentation": {
                "identifier": "TestMultiResultSetQuery",
                "newPage": false,
                "searchKey": "sql.TestMultiResultSetQuery",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMultiResultSetQuery(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMultiResultSetQuery(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestNamedValueChecker",
              "documentation": {
                "identifier": "TestNamedValueChecker",
                "newPage": false,
                "searchKey": "sql.TestNamedValueChecker",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNamedValueChecker(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNamedValueChecker(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestNamedValueCheckerSkip",
              "documentation": {
                "identifier": "TestNamedValueCheckerSkip",
                "newPage": false,
                "searchKey": "sql.TestNamedValueCheckerSkip",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNamedValueCheckerSkip(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNamedValueCheckerSkip(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestNullBoolParam",
              "documentation": {
                "identifier": "TestNullBoolParam",
                "newPage": false,
                "searchKey": "sql.TestNullBoolParam",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNullBoolParam(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNullBoolParam(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestNullByteParam",
              "documentation": {
                "identifier": "TestNullByteParam",
                "newPage": false,
                "searchKey": "sql.TestNullByteParam",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNullByteParam(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNullByteParam(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestNullByteSlice",
              "documentation": {
                "identifier": "TestNullByteSlice",
                "newPage": false,
                "searchKey": "sql.TestNullByteSlice",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNullByteSlice(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNullByteSlice(t *testing.T)\n```\n\nTests fix for issue 2788, that we bind nil to a []byte if the value in the column is sql null \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestNullFloat64Param",
              "documentation": {
                "identifier": "TestNullFloat64Param",
                "newPage": false,
                "searchKey": "sql.TestNullFloat64Param",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNullFloat64Param(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNullFloat64Param(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestNullInt16Param",
              "documentation": {
                "identifier": "TestNullInt16Param",
                "newPage": false,
                "searchKey": "sql.TestNullInt16Param",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNullInt16Param(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNullInt16Param(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestNullInt32Param",
              "documentation": {
                "identifier": "TestNullInt32Param",
                "newPage": false,
                "searchKey": "sql.TestNullInt32Param",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNullInt32Param(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNullInt32Param(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestNullInt64Param",
              "documentation": {
                "identifier": "TestNullInt64Param",
                "newPage": false,
                "searchKey": "sql.TestNullInt64Param",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNullInt64Param(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNullInt64Param(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestNullString",
              "documentation": {
                "identifier": "TestNullString",
                "newPage": false,
                "searchKey": "sql.TestNullString",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNullString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNullString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestNullStringParam",
              "documentation": {
                "identifier": "TestNullStringParam",
                "newPage": false,
                "searchKey": "sql.TestNullStringParam",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNullStringParam(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNullStringParam(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestNullTimeParam",
              "documentation": {
                "identifier": "TestNullTimeParam",
                "newPage": false,
                "searchKey": "sql.TestNullTimeParam",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNullTimeParam(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNullTimeParam(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestOpenConnector",
              "documentation": {
                "identifier": "TestOpenConnector",
                "newPage": false,
                "searchKey": "sql.TestOpenConnector",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOpenConnector(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOpenConnector(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestOpenDB",
              "documentation": {
                "identifier": "TestOpenDB",
                "newPage": false,
                "searchKey": "sql.TestOpenDB",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOpenDB(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOpenDB(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestParentStmtOutlivesTxStmt",
              "documentation": {
                "identifier": "TestParentStmtOutlivesTxStmt",
                "newPage": false,
                "searchKey": "sql.TestParentStmtOutlivesTxStmt",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParentStmtOutlivesTxStmt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParentStmtOutlivesTxStmt(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestPendingConnsAfterErr",
              "documentation": {
                "identifier": "TestPendingConnsAfterErr",
                "newPage": false,
                "searchKey": "sql.TestPendingConnsAfterErr",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPendingConnsAfterErr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPendingConnsAfterErr(t *testing.T)\n```\n\nIssue 10886: tests that all connection attempts return when more than DB.maxOpen connections are in flight and the first DB.maxOpen fail. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestPing",
              "documentation": {
                "identifier": "TestPing",
                "newPage": false,
                "searchKey": "sql.TestPing",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPing(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPing(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestPointerParamsAndScans",
              "documentation": {
                "identifier": "TestPointerParamsAndScans",
                "newPage": false,
                "searchKey": "sql.TestPointerParamsAndScans",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPointerParamsAndScans(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPointerParamsAndScans(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestPoolExhaustOnCancel",
              "documentation": {
                "identifier": "TestPoolExhaustOnCancel",
                "newPage": false,
                "searchKey": "sql.TestPoolExhaustOnCancel",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPoolExhaustOnCancel(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPoolExhaustOnCancel(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestQuery",
              "documentation": {
                "identifier": "TestQuery",
                "newPage": false,
                "searchKey": "sql.TestQuery",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQuery(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQuery(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestQueryContext",
              "documentation": {
                "identifier": "TestQueryContext",
                "newPage": false,
                "searchKey": "sql.TestQueryContext",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQueryContext(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQueryContext(t *testing.T)\n```\n\nTestQueryContext tests canceling the context while scanning the rows. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestQueryContextWait",
              "documentation": {
                "identifier": "TestQueryContextWait",
                "newPage": false,
                "searchKey": "sql.TestQueryContextWait",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQueryContextWait(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQueryContextWait(t *testing.T)\n```\n\nTestQueryContextWait ensures that rows and all internal statements are closed when a query context is closed during execution. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestQueryExecContextOnly",
              "documentation": {
                "identifier": "TestQueryExecContextOnly",
                "newPage": false,
                "searchKey": "sql.TestQueryExecContextOnly",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQueryExecContextOnly(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQueryExecContextOnly(t *testing.T)\n```\n\nTestQueryExecContextOnly ensures drivers only need to implement QueryContext and ExecContext methods. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestQueryNamedArg",
              "documentation": {
                "identifier": "TestQueryNamedArg",
                "newPage": false,
                "searchKey": "sql.TestQueryNamedArg",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQueryNamedArg(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQueryNamedArg(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestQueryRow",
              "documentation": {
                "identifier": "TestQueryRow",
                "newPage": false,
                "searchKey": "sql.TestQueryRow",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQueryRow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQueryRow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestQueryRowClosingStmt",
              "documentation": {
                "identifier": "TestQueryRowClosingStmt",
                "newPage": false,
                "searchKey": "sql.TestQueryRowClosingStmt",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQueryRowClosingStmt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQueryRowClosingStmt(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestQueryRowNilScanDest",
              "documentation": {
                "identifier": "TestQueryRowNilScanDest",
                "newPage": false,
                "searchKey": "sql.TestQueryRowNilScanDest",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQueryRowNilScanDest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQueryRowNilScanDest(t *testing.T)\n```\n\ngolang.org/issue/4859 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestRawBytesAllocs",
              "documentation": {
                "identifier": "TestRawBytesAllocs",
                "newPage": false,
                "searchKey": "sql.TestRawBytesAllocs",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRawBytesAllocs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRawBytesAllocs(t *testing.T)\n```\n\nTests that assigning to RawBytes doesn't allocate (and also works). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestRowErr",
              "documentation": {
                "identifier": "TestRowErr",
                "newPage": false,
                "searchKey": "sql.TestRowErr",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRowErr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRowErr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestRowsCloseOrder",
              "documentation": {
                "identifier": "TestRowsCloseOrder",
                "newPage": false,
                "searchKey": "sql.TestRowsCloseOrder",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRowsCloseOrder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRowsCloseOrder(t *testing.T)\n```\n\ngolang.org/issue/5283: don't release the Rows' connection in Close before calling Stmt.Close. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestRowsColumnTypes",
              "documentation": {
                "identifier": "TestRowsColumnTypes",
                "newPage": false,
                "searchKey": "sql.TestRowsColumnTypes",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRowsColumnTypes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRowsColumnTypes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestRowsColumns",
              "documentation": {
                "identifier": "TestRowsColumns",
                "newPage": false,
                "searchKey": "sql.TestRowsColumns",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRowsColumns(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRowsColumns(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestRowsImplicitClose",
              "documentation": {
                "identifier": "TestRowsImplicitClose",
                "newPage": false,
                "searchKey": "sql.TestRowsImplicitClose",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRowsImplicitClose(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRowsImplicitClose(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestRowsScanProperlyWrapsErrors",
              "documentation": {
                "identifier": "TestRowsScanProperlyWrapsErrors",
                "newPage": false,
                "searchKey": "sql.TestRowsScanProperlyWrapsErrors",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRowsScanProperlyWrapsErrors(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRowsScanProperlyWrapsErrors(t *testing.T)\n```\n\nIssue 38099: Ensure that Rows.Scan properly wraps underlying errors. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestSimultaneousQueries",
              "documentation": {
                "identifier": "TestSimultaneousQueries",
                "newPage": false,
                "searchKey": "sql.TestSimultaneousQueries",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSimultaneousQueries(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSimultaneousQueries(t *testing.T)\n```\n\nIssue 3857 This used to deadlock. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestSingleOpenConn",
              "documentation": {
                "identifier": "TestSingleOpenConn",
                "newPage": false,
                "searchKey": "sql.TestSingleOpenConn",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSingleOpenConn(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSingleOpenConn(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestStatementClose",
              "documentation": {
                "identifier": "TestStatementClose",
                "newPage": false,
                "searchKey": "sql.TestStatementClose",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStatementClose(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStatementClose(t *testing.T)\n```\n\ngolang.org/issue/12798 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestStatementErrorAfterClose",
              "documentation": {
                "identifier": "TestStatementErrorAfterClose",
                "newPage": false,
                "searchKey": "sql.TestStatementErrorAfterClose",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStatementErrorAfterClose(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStatementErrorAfterClose(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestStatementQueryRow",
              "documentation": {
                "identifier": "TestStatementQueryRow",
                "newPage": false,
                "searchKey": "sql.TestStatementQueryRow",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStatementQueryRow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStatementQueryRow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestStatementQueryRowConcurrent",
              "documentation": {
                "identifier": "TestStatementQueryRowConcurrent",
                "newPage": false,
                "searchKey": "sql.TestStatementQueryRowConcurrent",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStatementQueryRowConcurrent(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStatementQueryRowConcurrent(t *testing.T)\n```\n\ngolang.org/issue/3734 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestStats",
              "documentation": {
                "identifier": "TestStats",
                "newPage": false,
                "searchKey": "sql.TestStats",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStats(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStats(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestStatsMaxIdleClosedTen",
              "documentation": {
                "identifier": "TestStatsMaxIdleClosedTen",
                "newPage": false,
                "searchKey": "sql.TestStatsMaxIdleClosedTen",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStatsMaxIdleClosedTen(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStatsMaxIdleClosedTen(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestStatsMaxIdleClosedZero",
              "documentation": {
                "identifier": "TestStatsMaxIdleClosedZero",
                "newPage": false,
                "searchKey": "sql.TestStatsMaxIdleClosedZero",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStatsMaxIdleClosedZero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStatsMaxIdleClosedZero(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestStmtCloseDeps",
              "documentation": {
                "identifier": "TestStmtCloseDeps",
                "newPage": false,
                "searchKey": "sql.TestStmtCloseDeps",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStmtCloseDeps(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStmtCloseDeps(t *testing.T)\n```\n\ngolang.org/issue/5323 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestStmtCloseOrder",
              "documentation": {
                "identifier": "TestStmtCloseOrder",
                "newPage": false,
                "searchKey": "sql.TestStmtCloseOrder",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStmtCloseOrder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStmtCloseOrder(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestTxCannotCommitAfterRollback",
              "documentation": {
                "identifier": "TestTxCannotCommitAfterRollback",
                "newPage": false,
                "searchKey": "sql.TestTxCannotCommitAfterRollback",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTxCannotCommitAfterRollback(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTxCannotCommitAfterRollback(t *testing.T)\n```\n\nIssue 34775: Ensure that a Tx cannot commit after a rollback. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestTxContextWait",
              "documentation": {
                "identifier": "TestTxContextWait",
                "newPage": false,
                "searchKey": "sql.TestTxContextWait",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTxContextWait(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTxContextWait(t *testing.T)\n```\n\nTestTxContextWait tests the transaction behavior when the tx context is canceled during execution of the query. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestTxContextWaitNoDiscard",
              "documentation": {
                "identifier": "TestTxContextWaitNoDiscard",
                "newPage": false,
                "searchKey": "sql.TestTxContextWaitNoDiscard",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTxContextWaitNoDiscard(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTxContextWaitNoDiscard(t *testing.T)\n```\n\nTestTxContextWaitNoDiscard is the same as TestTxContextWait, but should not discard the final connection. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestTxEndBadConn",
              "documentation": {
                "identifier": "TestTxEndBadConn",
                "newPage": false,
                "searchKey": "sql.TestTxEndBadConn",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTxEndBadConn(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTxEndBadConn(t *testing.T)\n```\n\ngolang.org/issue/11264 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestTxErrBadConn",
              "documentation": {
                "identifier": "TestTxErrBadConn",
                "newPage": false,
                "searchKey": "sql.TestTxErrBadConn",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTxErrBadConn(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTxErrBadConn(t *testing.T)\n```\n\nTests fix for issue 4433, that retries in Begin happen when conn.Begin() returns ErrBadConn \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestTxPrepare",
              "documentation": {
                "identifier": "TestTxPrepare",
                "newPage": false,
                "searchKey": "sql.TestTxPrepare",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTxPrepare(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTxPrepare(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestTxQuery",
              "documentation": {
                "identifier": "TestTxQuery",
                "newPage": false,
                "searchKey": "sql.TestTxQuery",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTxQuery(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTxQuery(t *testing.T)\n```\n\nIssue: [https://golang.org/issue/2784](https://golang.org/issue/2784) This test didn't fail before because we got lucky with the fakedb driver. It was failing, and now not, in github.com/bradfitz/go-sql-test \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestTxQueryInvalid",
              "documentation": {
                "identifier": "TestTxQueryInvalid",
                "newPage": false,
                "searchKey": "sql.TestTxQueryInvalid",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTxQueryInvalid(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTxQueryInvalid(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestTxRollbackCommitErr",
              "documentation": {
                "identifier": "TestTxRollbackCommitErr",
                "newPage": false,
                "searchKey": "sql.TestTxRollbackCommitErr",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTxRollbackCommitErr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTxRollbackCommitErr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestTxStmt",
              "documentation": {
                "identifier": "TestTxStmt",
                "newPage": false,
                "searchKey": "sql.TestTxStmt",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTxStmt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTxStmt(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestTxStmtClosedRePrepares",
              "documentation": {
                "identifier": "TestTxStmtClosedRePrepares",
                "newPage": false,
                "searchKey": "sql.TestTxStmtClosedRePrepares",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTxStmtClosedRePrepares(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTxStmtClosedRePrepares(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestTxStmtDeadlock",
              "documentation": {
                "identifier": "TestTxStmtDeadlock",
                "newPage": false,
                "searchKey": "sql.TestTxStmtDeadlock",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTxStmtDeadlock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTxStmtDeadlock(t *testing.T)\n```\n\nIssue 40985 transaction statement deadlock while context cancel. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestTxStmtFromTxStmtRePrepares",
              "documentation": {
                "identifier": "TestTxStmtFromTxStmtRePrepares",
                "newPage": false,
                "searchKey": "sql.TestTxStmtFromTxStmtRePrepares",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTxStmtFromTxStmtRePrepares(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTxStmtFromTxStmtRePrepares(t *testing.T)\n```\n\nTest that tx.Stmt called with a statement already associated with tx as argument re-prepares the same statement again. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestTxStmtPreparedOnce",
              "documentation": {
                "identifier": "TestTxStmtPreparedOnce",
                "newPage": false,
                "searchKey": "sql.TestTxStmtPreparedOnce",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTxStmtPreparedOnce(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTxStmtPreparedOnce(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestTypedString",
              "documentation": {
                "identifier": "TestTypedString",
                "newPage": false,
                "searchKey": "sql.TestTypedString",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTypedString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTypedString(t *testing.T)\n```\n\nIssue 18101. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestUnsupportedOptions",
              "documentation": {
                "identifier": "TestUnsupportedOptions",
                "newPage": false,
                "searchKey": "sql.TestUnsupportedOptions",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnsupportedOptions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnsupportedOptions(t *testing.T)\n```\n\nTestUnsupportedOptions checks that the database fails when a driver that doesn't implement ConnBeginTx is used with non-default options and an un-cancellable context. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestUserDefinedBytes",
              "documentation": {
                "identifier": "TestUserDefinedBytes",
                "newPage": false,
                "searchKey": "sql.TestUserDefinedBytes",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserDefinedBytes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserDefinedBytes(t *testing.T)\n```\n\n[https://golang.org/issues/13905](https://golang.org/issues/13905) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#TestValueConverters",
              "documentation": {
                "identifier": "TestValueConverters",
                "newPage": false,
                "searchKey": "sql.TestValueConverters",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValueConverters(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValueConverters(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#asBytes",
              "documentation": {
                "identifier": "asBytes",
                "newPage": false,
                "searchKey": "sql.asBytes",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func asBytes(buf []byte, rv reflect.Value) (b []byte, ok bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc asBytes(buf []byte, rv reflect.Value) (b []byte, ok bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#asString",
              "documentation": {
                "identifier": "asString",
                "newPage": false,
                "searchKey": "sql.asString",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func asString(src interface{}) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc asString(src interface{}) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#callValuerValue",
              "documentation": {
                "identifier": "callValuerValue",
                "newPage": false,
                "searchKey": "sql.callValuerValue",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func callValuerValue(vr driver.Valuer) (v driver.Value, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc callValuerValue(vr driver.Valuer) (v driver.Value, err error)\n```\n\ncallValuerValue returns vr.Value(), with one exception: If vr.Value is an auto-generated method on a pointer type and the pointer is nil, it would panic at runtime in the panicwrap method. Treat it like nil instead. Issue 8415. \n\nThis is so people can implement driver.Value on value types and still use nil pointers to those types to mean nil/NULL, just like string/*string. \n\nThis function is mirrored in the database/sql/driver package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#checkSubsetTypes",
              "documentation": {
                "identifier": "checkSubsetTypes",
                "newPage": false,
                "searchKey": "sql.checkSubsetTypes",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkSubsetTypes(allowAny bool, args []driver.NamedValue) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkSubsetTypes(allowAny bool, args []driver.NamedValue) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#cloneBytes",
              "documentation": {
                "identifier": "cloneBytes",
                "newPage": false,
                "searchKey": "sql.cloneBytes",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func cloneBytes(b []byte) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc cloneBytes(b []byte) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#closeDB",
              "documentation": {
                "identifier": "closeDB",
                "newPage": false,
                "searchKey": "sql.closeDB",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func closeDB(t testing.TB, db *DB)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc closeDB(t testing.TB, db *DB)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#colTypeToReflectType",
              "documentation": {
                "identifier": "colTypeToReflectType",
                "newPage": false,
                "searchKey": "sql.colTypeToReflectType",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func colTypeToReflectType(typ string) reflect.Type"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc colTypeToReflectType(typ string) reflect.Type\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#contains",
              "documentation": {
                "identifier": "contains",
                "newPage": false,
                "searchKey": "sql.contains",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func contains(list []string, y string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc contains(list []string, y string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#conversionTests",
              "documentation": {
                "identifier": "conversionTests",
                "newPage": false,
                "searchKey": "sql.conversionTests",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func conversionTests() []conversionTest"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc conversionTests() []conversionTest\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#convertAssign",
              "documentation": {
                "identifier": "convertAssign",
                "newPage": false,
                "searchKey": "sql.convertAssign",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func convertAssign(dest, src interface{}) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc convertAssign(dest, src interface{}) error\n```\n\nconvertAssign is the same as convertAssignRows, but without the optional rows argument. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#convertAssignRows",
              "documentation": {
                "identifier": "convertAssignRows",
                "newPage": false,
                "searchKey": "sql.convertAssignRows",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func convertAssignRows(dest, src interface{}, rows *Rows) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc convertAssignRows(dest, src interface{}, rows *Rows) error\n```\n\nconvertAssignRows copies to dest the value in src, converting it if possible. An error is returned if the copy would result in loss of information. dest should be a pointer type. If rows is passed in, the rows will be used as the parent for any cursor values converted from a driver.Rows to a *Rows. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#converterForType",
              "documentation": {
                "identifier": "converterForType",
                "newPage": false,
                "searchKey": "sql.converterForType",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func converterForType(typ string) driver.ValueConverter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc converterForType(typ string) driver.ValueConverter\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#ctxDriverBegin",
              "documentation": {
                "identifier": "ctxDriverBegin",
                "newPage": false,
                "searchKey": "sql.ctxDriverBegin",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ctxDriverBegin(ctx context.Context, opts *TxOptions, ci driver.Conn) (driver.Tx, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ctxDriverBegin(ctx context.Context, opts *TxOptions, ci driver.Conn) (driver.Tx, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#ctxDriverExec",
              "documentation": {
                "identifier": "ctxDriverExec",
                "newPage": false,
                "searchKey": "sql.ctxDriverExec",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ctxDriverExec(ctx context.Context, execerCtx driver.ExecerContext, execer driver.Execer, query string, nvdargs []driver.NamedValue) (driver.Result, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ctxDriverExec(ctx context.Context, execerCtx driver.ExecerContext, execer driver.Execer, query string, nvdargs []driver.NamedValue) (driver.Result, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#ctxDriverPrepare",
              "documentation": {
                "identifier": "ctxDriverPrepare",
                "newPage": false,
                "searchKey": "sql.ctxDriverPrepare",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ctxDriverPrepare(ctx context.Context, ci driver.Conn, query string) (driver.Stmt, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ctxDriverPrepare(ctx context.Context, ci driver.Conn, query string) (driver.Stmt, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#ctxDriverQuery",
              "documentation": {
                "identifier": "ctxDriverQuery",
                "newPage": false,
                "searchKey": "sql.ctxDriverQuery",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ctxDriverQuery(ctx context.Context, queryerCtx driver.QueryerContext, queryer driver.Queryer, query string, nvdargs []driver.NamedValue) (driver.Rows, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ctxDriverQuery(ctx context.Context, queryerCtx driver.QueryerContext, queryer driver.Queryer, query string, nvdargs []driver.NamedValue) (driver.Rows, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#ctxDriverStmtExec",
              "documentation": {
                "identifier": "ctxDriverStmtExec",
                "newPage": false,
                "searchKey": "sql.ctxDriverStmtExec",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ctxDriverStmtExec(ctx context.Context, si driver.Stmt, nvdargs []driver.NamedValue) (driver.Result, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ctxDriverStmtExec(ctx context.Context, si driver.Stmt, nvdargs []driver.NamedValue) (driver.Result, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#ctxDriverStmtQuery",
              "documentation": {
                "identifier": "ctxDriverStmtQuery",
                "newPage": false,
                "searchKey": "sql.ctxDriverStmtQuery",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ctxDriverStmtQuery(ctx context.Context, si driver.Stmt, nvdargs []driver.NamedValue) (driver.Rows, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ctxDriverStmtQuery(ctx context.Context, si driver.Stmt, nvdargs []driver.NamedValue) (driver.Rows, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#defaultCheckNamedValue",
              "documentation": {
                "identifier": "defaultCheckNamedValue",
                "newPage": false,
                "searchKey": "sql.defaultCheckNamedValue",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func defaultCheckNamedValue(nv *driver.NamedValue) (err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc defaultCheckNamedValue(nv *driver.NamedValue) (err error)\n```\n\ndefaultCheckNamedValue wraps the default ColumnConverter to have the same function signature as the CheckNamedValue in the driver.NamedValueChecker interface. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#describeNamedValue",
              "documentation": {
                "identifier": "describeNamedValue",
                "newPage": false,
                "searchKey": "sql.describeNamedValue",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func describeNamedValue(nv *driver.NamedValue) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc describeNamedValue(nv *driver.NamedValue) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#doConcurrentTest",
              "documentation": {
                "identifier": "doConcurrentTest",
                "newPage": false,
                "searchKey": "sql.doConcurrentTest",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func doConcurrentTest(t testing.TB, ct concurrentTest)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc doConcurrentTest(t testing.TB, ct concurrentTest)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#driverArgsConnLocked",
              "documentation": {
                "identifier": "driverArgsConnLocked",
                "newPage": false,
                "searchKey": "sql.driverArgsConnLocked",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func driverArgsConnLocked(ci driver.Conn, ds *driverStmt, args []interface{}) ([]driver.NamedValue, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc driverArgsConnLocked(ci driver.Conn, ds *driverStmt, args []interface{}) ([]driver.NamedValue, error)\n```\n\ndriverArgsConnLocked converts arguments from callers of Stmt.Exec and Stmt.Query into driver Values. \n\nThe statement ds may be nil, if no statement is available. \n\nci must be locked. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#errf",
              "documentation": {
                "identifier": "errf",
                "newPage": false,
                "searchKey": "sql.errf",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func errf(msg string, args ...interface{}) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc errf(msg string, args ...interface{}) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#exec",
              "documentation": {
                "identifier": "exec",
                "newPage": false,
                "searchKey": "sql.exec",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func exec(t testing.TB, db *DB, query string, args ...interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc exec(t testing.TB, db *DB, query string, args ...interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#float32Value",
              "documentation": {
                "identifier": "float32Value",
                "newPage": false,
                "searchKey": "sql.float32Value",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func float32Value(ptr interface{}) float32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc float32Value(ptr interface{}) float32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#float64Value",
              "documentation": {
                "identifier": "float64Value",
                "newPage": false,
                "searchKey": "sql.float64Value",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func float64Value(ptr interface{}) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc float64Value(ptr interface{}) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#init.fakedb_test.go",
              "documentation": {
                "identifier": "init.fakedb_test.go",
                "newPage": false,
                "searchKey": "sql.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#init.sql_test.go",
              "documentation": {
                "identifier": "init.sql_test.go",
                "newPage": false,
                "searchKey": "sql.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#init.sql_test.go.0xc0291c8ae8",
              "documentation": {
                "identifier": "init.sql_test.go.0xc0291c8ae8",
                "newPage": false,
                "searchKey": "sql.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#intPtrValue",
              "documentation": {
                "identifier": "intPtrValue",
                "newPage": false,
                "searchKey": "sql.intPtrValue",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func intPtrValue(intptr interface{}) interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc intPtrValue(intptr interface{}) interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#intValue",
              "documentation": {
                "identifier": "intValue",
                "newPage": false,
                "searchKey": "sql.intValue",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func intValue(intptr interface{}) int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc intValue(intptr interface{}) int64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#namedValueToValue",
              "documentation": {
                "identifier": "namedValueToValue",
                "newPage": false,
                "searchKey": "sql.namedValueToValue",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func namedValueToValue(named []driver.NamedValue) ([]driver.Value, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc namedValueToValue(named []driver.NamedValue) ([]driver.Value, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#nullTestRun",
              "documentation": {
                "identifier": "nullTestRun",
                "newPage": false,
                "searchKey": "sql.nullTestRun",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func nullTestRun(t *testing.T, spec nullTestSpec)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nullTestRun(t *testing.T, spec nullTestSpec)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#numPrepares",
              "documentation": {
                "identifier": "numPrepares",
                "newPage": false,
                "searchKey": "sql.numPrepares",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func numPrepares(t *testing.T, db *DB) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc numPrepares(t *testing.T, db *DB) int\n```\n\nnumPrepares assumes that db has exactly 1 idle conn and returns its count of calls to Prepare \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#rowsColumnInfoSetupConnLocked",
              "documentation": {
                "identifier": "rowsColumnInfoSetupConnLocked",
                "newPage": false,
                "searchKey": "sql.rowsColumnInfoSetupConnLocked",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func rowsColumnInfoSetupConnLocked(rowsi driver.Rows) []*ColumnType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc rowsColumnInfoSetupConnLocked(rowsi driver.Rows) []*ColumnType\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#rowsiFromStatement",
              "documentation": {
                "identifier": "rowsiFromStatement",
                "newPage": false,
                "searchKey": "sql.rowsiFromStatement",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func rowsiFromStatement(ctx context.Context, ci driver.Conn, ds *driverStmt, args ...interface{}) (driver.Rows, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc rowsiFromStatement(ctx context.Context, ci driver.Conn, ds *driverStmt, args ...interface{}) (driver.Rows, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#setHookOpenErr",
              "documentation": {
                "identifier": "setHookOpenErr",
                "newPage": false,
                "searchKey": "sql.setHookOpenErr",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func setHookOpenErr(fn func() error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc setHookOpenErr(fn func() error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#setHookpostCloseConn",
              "documentation": {
                "identifier": "setHookpostCloseConn",
                "newPage": false,
                "searchKey": "sql.setHookpostCloseConn",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func setHookpostCloseConn(fn func(*fakeConn, error))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc setHookpostCloseConn(fn func(*fakeConn, error))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#setRowsCloseHook",
              "documentation": {
                "identifier": "setRowsCloseHook",
                "newPage": false,
                "searchKey": "sql.setRowsCloseHook",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func setRowsCloseHook(fn func(*Rows, *error))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc setRowsCloseHook(fn func(*Rows, *error))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#setStrictFakeConnClose",
              "documentation": {
                "identifier": "setStrictFakeConnClose",
                "newPage": false,
                "searchKey": "sql.setStrictFakeConnClose",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func setStrictFakeConnClose(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc setStrictFakeConnClose(t *testing.T)\n```\n\nsetStrictFakeConnClose sets the t to Errorf on when fakeConn.Close fails to close. If nil, the check is disabled. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#stack",
              "documentation": {
                "identifier": "stack",
                "newPage": false,
                "searchKey": "sql.stack",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func stack() string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stack() string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#strconvErr",
              "documentation": {
                "identifier": "strconvErr",
                "newPage": false,
                "searchKey": "sql.strconvErr",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func strconvErr(err error) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc strconvErr(err error) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#timeValue",
              "documentation": {
                "identifier": "timeValue",
                "newPage": false,
                "searchKey": "sql.timeValue",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func timeValue(ptr interface{}) time.Time"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc timeValue(ptr interface{}) time.Time\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#uintValue",
              "documentation": {
                "identifier": "uintValue",
                "newPage": false,
                "searchKey": "sql.uintValue",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func uintValue(intptr interface{}) uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc uintValue(intptr interface{}) uint64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#unregisterAllDrivers",
              "documentation": {
                "identifier": "unregisterAllDrivers",
                "newPage": false,
                "searchKey": "sql.unregisterAllDrivers",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func unregisterAllDrivers()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unregisterAllDrivers()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#validateNamedValueName",
              "documentation": {
                "identifier": "validateNamedValueName",
                "newPage": false,
                "searchKey": "sql.validateNamedValueName",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func validateNamedValueName(name string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc validateNamedValueName(name string) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#waitCondition",
              "documentation": {
                "identifier": "waitCondition",
                "newPage": false,
                "searchKey": "sql.waitCondition",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func waitCondition(waitFor, checkEvery time.Duration, fn func() bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc waitCondition(waitFor, checkEvery time.Duration, fn func() bool) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#waitForFree",
              "documentation": {
                "identifier": "waitForFree",
                "newPage": false,
                "searchKey": "sql.waitForFree",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func waitForFree(t *testing.T, db *DB, maxWait time.Duration, want int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc waitForFree(t *testing.T, db *DB, maxWait time.Duration, want int)\n```\n\nwaitForFree checks db.numFreeConns until either it equals want or the maxWait time elapses. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#waitForRowsClose",
              "documentation": {
                "identifier": "waitForRowsClose",
                "newPage": false,
                "searchKey": "sql.waitForRowsClose",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func waitForRowsClose(t *testing.T, rows *Rows, maxWait time.Duration)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc waitForRowsClose(t *testing.T, rows *Rows, maxWait time.Duration)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/database/sql#withLock",
              "documentation": {
                "identifier": "withLock",
                "newPage": false,
                "searchKey": "sql.withLock",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func withLock(lk sync.Locker, fn func())"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc withLock(lk sync.Locker, fn func())\n```\n\nwithLock runs while holding lk. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/database/sql/driver"
    }
  ]
}
