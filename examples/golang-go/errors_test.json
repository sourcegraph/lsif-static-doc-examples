{
  "pathID": "/errors_test",
  "documentation": {
    "identifier": "errors_test",
    "newPage": true,
    "searchKey": "errors_test",
    "tags": [
      "package",
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package errors_test"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/errors_test#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/errors_test#poserPathErr",
              "documentation": {
                "identifier": "poserPathErr",
                "newPage": false,
                "searchKey": "errors_test.poserPathErr",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var poserPathErr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar poserPathErr = &fs.PathError{Op: \"poser\"}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/errors_test#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/errors_test#MyError",
              "documentation": {
                "identifier": "MyError",
                "newPage": false,
                "searchKey": "errors_test.MyError",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyError struct {\n\tWhen time.Time\n\tWhat string\n}\n```\n\nMyError is an error implementation that includes a time and message. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/errors_test#MyError.Error",
                    "documentation": {
                      "identifier": "MyError.Error",
                      "newPage": false,
                      "searchKey": "errors_test.MyError.Error",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e MyError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e MyError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/errors_test#errorT",
              "documentation": {
                "identifier": "errorT",
                "newPage": false,
                "searchKey": "errors_test.errorT",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type errorT struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype errorT struct{ s string }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/errors_test#errorT.Error",
                    "documentation": {
                      "identifier": "errorT.Error",
                      "newPage": false,
                      "searchKey": "errors_test.errorT.Error",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e errorT) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e errorT) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/errors_test#errorUncomparable",
              "documentation": {
                "identifier": "errorUncomparable",
                "newPage": false,
                "searchKey": "errors_test.errorUncomparable",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type errorUncomparable struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype errorUncomparable struct {\n\tf []string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/errors_test#errorUncomparable.Error",
                    "documentation": {
                      "identifier": "errorUncomparable.Error",
                      "newPage": false,
                      "searchKey": "errors_test.errorUncomparable.Error",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (errorUncomparable) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (errorUncomparable) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/errors_test#errorUncomparable.Is",
                    "documentation": {
                      "identifier": "errorUncomparable.Is",
                      "newPage": false,
                      "searchKey": "errors_test.errorUncomparable.Is",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (errorUncomparable) Is(target error) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (errorUncomparable) Is(target error) bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/errors_test#poser",
              "documentation": {
                "identifier": "poser",
                "newPage": false,
                "searchKey": "errors_test.poser",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type poser struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype poser struct {\n\tmsg string\n\tf   func(error) bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/errors_test#poser.As",
                    "documentation": {
                      "identifier": "poser.As",
                      "newPage": false,
                      "searchKey": "errors_test.poser.As",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *poser) As(err interface{}) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *poser) As(err interface{}) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/errors_test#poser.Error",
                    "documentation": {
                      "identifier": "poser.Error",
                      "newPage": false,
                      "searchKey": "errors_test.poser.Error",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *poser) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *poser) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/errors_test#poser.Is",
                    "documentation": {
                      "identifier": "poser.Is",
                      "newPage": false,
                      "searchKey": "errors_test.poser.Is",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *poser) Is(err error) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *poser) Is(err error) bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/errors_test#wrapped",
              "documentation": {
                "identifier": "wrapped",
                "newPage": false,
                "searchKey": "errors_test.wrapped",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type wrapped struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype wrapped struct {\n\tmsg string\n\terr error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/errors_test#wrapped.Error",
                    "documentation": {
                      "identifier": "wrapped.Error",
                      "newPage": false,
                      "searchKey": "errors_test.wrapped.Error",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e wrapped) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e wrapped) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/errors_test#wrapped.Unwrap",
                    "documentation": {
                      "identifier": "wrapped.Unwrap",
                      "newPage": false,
                      "searchKey": "errors_test.wrapped.Unwrap",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e wrapped) Unwrap() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e wrapped) Unwrap() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/errors_test#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/errors_test#Example",
              "documentation": {
                "identifier": "Example",
                "newPage": false,
                "searchKey": "errors_test.Example",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Example()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Example()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/errors_test#ExampleAs",
              "documentation": {
                "identifier": "ExampleAs",
                "newPage": false,
                "searchKey": "errors_test.ExampleAs",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleAs()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleAs()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/errors_test#ExampleIs",
              "documentation": {
                "identifier": "ExampleIs",
                "newPage": false,
                "searchKey": "errors_test.ExampleIs",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleIs()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleIs()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/errors_test#ExampleNew",
              "documentation": {
                "identifier": "ExampleNew",
                "newPage": false,
                "searchKey": "errors_test.ExampleNew",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleNew()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleNew()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/errors_test#ExampleNew_errorf",
              "documentation": {
                "identifier": "ExampleNew_errorf",
                "newPage": false,
                "searchKey": "errors_test.ExampleNew_errorf",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleNew_errorf()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleNew_errorf()\n```\n\nThe fmt package's Errorf function lets us use the package's formatting features to create descriptive error messages. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/errors_test#TestAs",
              "documentation": {
                "identifier": "TestAs",
                "newPage": false,
                "searchKey": "errors_test.TestAs",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/errors_test#TestAsValidation",
              "documentation": {
                "identifier": "TestAsValidation",
                "newPage": false,
                "searchKey": "errors_test.TestAsValidation",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAsValidation(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAsValidation(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/errors_test#TestErrorMethod",
              "documentation": {
                "identifier": "TestErrorMethod",
                "newPage": false,
                "searchKey": "errors_test.TestErrorMethod",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestErrorMethod(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestErrorMethod(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/errors_test#TestIs",
              "documentation": {
                "identifier": "TestIs",
                "newPage": false,
                "searchKey": "errors_test.TestIs",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/errors_test#TestNewEqual",
              "documentation": {
                "identifier": "TestNewEqual",
                "newPage": false,
                "searchKey": "errors_test.TestNewEqual",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewEqual(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewEqual(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/errors_test#TestUnwrap",
              "documentation": {
                "identifier": "TestUnwrap",
                "newPage": false,
                "searchKey": "errors_test.TestUnwrap",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnwrap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnwrap(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/errors_test#oops",
              "documentation": {
                "identifier": "oops",
                "newPage": false,
                "searchKey": "errors_test.oops",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func oops() error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc oops() error\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
