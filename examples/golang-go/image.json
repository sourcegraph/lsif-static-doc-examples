{
  "pathID": "/image",
  "documentation": {
    "identifier": "image",
    "newPage": true,
    "searchKey": "image",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package image"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package image implements a basic 2-D image library. \n\nThe fundamental interface is called Image. An Image contains colors, which are described in the image/color package. \n\nValues of the Image interface are created either by calling functions such as NewRGBA and NewPaletted, or by calling Decode on an io.Reader containing image data in a format such as GIF, JPEG or PNG. Decoding any particular image format requires the prior registration of a decoder function. Registration is typically automatic as a side effect of initializing that format's package so that, to decode a PNG image, it suffices to have \n\n```\nimport _ \"image/png\"\n\n```\nin a program's main package. The _ means to import a package purely for its initialization side effects. \n\nSee \"The Go image package\" for more details: [https://golang.org/doc/articles/image_package.html](https://golang.org/doc/articles/image_package.html) \n\n"
  },
  "children": [
    {
      "pathID": "/image/internal"
    },
    {
      "node": {
        "pathID": "/image#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/image#YCbCrSubsampleRatio444",
              "documentation": {
                "identifier": "YCbCrSubsampleRatio444",
                "newPage": false,
                "searchKey": "image.YCbCrSubsampleRatio444",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const YCbCrSubsampleRatio444"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst YCbCrSubsampleRatio444 YCbCrSubsampleRatio = iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#YCbCrSubsampleRatio422",
              "documentation": {
                "identifier": "YCbCrSubsampleRatio422",
                "newPage": false,
                "searchKey": "image.YCbCrSubsampleRatio422",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const YCbCrSubsampleRatio422"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst YCbCrSubsampleRatio422\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#YCbCrSubsampleRatio420",
              "documentation": {
                "identifier": "YCbCrSubsampleRatio420",
                "newPage": false,
                "searchKey": "image.YCbCrSubsampleRatio420",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const YCbCrSubsampleRatio420"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst YCbCrSubsampleRatio420\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#YCbCrSubsampleRatio440",
              "documentation": {
                "identifier": "YCbCrSubsampleRatio440",
                "newPage": false,
                "searchKey": "image.YCbCrSubsampleRatio440",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const YCbCrSubsampleRatio440"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst YCbCrSubsampleRatio440\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#YCbCrSubsampleRatio411",
              "documentation": {
                "identifier": "YCbCrSubsampleRatio411",
                "newPage": false,
                "searchKey": "image.YCbCrSubsampleRatio411",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const YCbCrSubsampleRatio411"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst YCbCrSubsampleRatio411\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#YCbCrSubsampleRatio410",
              "documentation": {
                "identifier": "YCbCrSubsampleRatio410",
                "newPage": false,
                "searchKey": "image.YCbCrSubsampleRatio410",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const YCbCrSubsampleRatio410"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst YCbCrSubsampleRatio410\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/image#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/image#ErrFormat",
              "documentation": {
                "identifier": "ErrFormat",
                "newPage": false,
                "searchKey": "image.ErrFormat",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrFormat"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrFormat = errors.New(\"image: unknown format\")\n```\n\nErrFormat indicates that decoding encountered an unknown format. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#formatsMu",
              "documentation": {
                "identifier": "formatsMu",
                "newPage": false,
                "searchKey": "image.formatsMu",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var formatsMu"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar formatsMu sync.Mutex\n```\n\nFormats is the list of registered formats. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#atomicFormats",
              "documentation": {
                "identifier": "atomicFormats",
                "newPage": false,
                "searchKey": "image.atomicFormats",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var atomicFormats"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar atomicFormats atomic.Value\n```\n\nFormats is the list of registered formats. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#ZP",
              "documentation": {
                "identifier": "ZP",
                "newPage": false,
                "searchKey": "image.ZP",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ZP"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ZP Point\n```\n\nZP is the zero Point. \n\nDeprecated: Use a literal image.Point{} instead. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#ZR",
              "documentation": {
                "identifier": "ZR",
                "newPage": false,
                "searchKey": "image.ZR",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ZR"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ZR Rectangle\n```\n\nZR is the zero Rectangle. \n\nDeprecated: Use a literal image.Rectangle{} instead. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#Black",
              "documentation": {
                "identifier": "Black",
                "newPage": false,
                "searchKey": "image.Black",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var Black"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Black = NewUniform(color.Black)\n```\n\nBlack is an opaque black uniform image. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#White",
              "documentation": {
                "identifier": "White",
                "newPage": false,
                "searchKey": "image.White",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var White"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar White = NewUniform(color.White)\n```\n\nWhite is an opaque white uniform image. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#Transparent",
              "documentation": {
                "identifier": "Transparent",
                "newPage": false,
                "searchKey": "image.Transparent",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var Transparent"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Transparent = NewUniform(color.Transparent)\n```\n\nTransparent is a fully transparent uniform image. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#Opaque",
              "documentation": {
                "identifier": "Opaque",
                "newPage": false,
                "searchKey": "image.Opaque",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var Opaque"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Opaque = NewUniform(color.Opaque)\n```\n\nOpaque is a fully opaque uniform image. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#testImages",
              "documentation": {
                "identifier": "testImages",
                "newPage": false,
                "searchKey": "image.testImages",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var testImages"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testImages = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/image#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/image#format",
              "documentation": {
                "identifier": "format",
                "newPage": false,
                "searchKey": "image.format",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type format struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype format struct {\n\tname, magic  string\n\tdecode       func(io.Reader) (Image, error)\n\tdecodeConfig func(io.Reader) (Config, error)\n}\n```\n\nA format holds an image format's name, magic header and how to decode it. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#sniff",
                    "documentation": {
                      "identifier": "sniff",
                      "newPage": false,
                      "searchKey": "image.sniff",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func sniff(r reader) format"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc sniff(r reader) format\n```\n\nSniff determines the format of r's data. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#reader",
              "documentation": {
                "identifier": "reader",
                "newPage": false,
                "searchKey": "image.reader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type reader interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype reader interface {\n\tio.Reader\n\tPeek(int) ([]byte, error)\n}\n```\n\nA reader is an io.Reader that can also peek ahead. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#asReader",
                    "documentation": {
                      "identifier": "asReader",
                      "newPage": false,
                      "searchKey": "image.asReader",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func asReader(r io.Reader) reader"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc asReader(r io.Reader) reader\n```\n\nasReader converts an io.Reader to a reader. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#Point",
              "documentation": {
                "identifier": "Point",
                "newPage": false,
                "searchKey": "image.Point",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Point struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Point struct {\n\tX, Y int\n}\n```\n\nA Point is an X, Y coordinate pair. The axes increase right and down. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#Pt",
                    "documentation": {
                      "identifier": "Pt",
                      "newPage": false,
                      "searchKey": "image.Pt",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Pt(X, Y int) Point"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Pt(X, Y int) Point\n```\n\nPt is shorthand for Point{X, Y}. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Point.String",
                    "documentation": {
                      "identifier": "Point.String",
                      "newPage": false,
                      "searchKey": "image.Point.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Point) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Point) String() string\n```\n\nString returns a string representation of p like \"(3,4)\". \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Point.Add",
                    "documentation": {
                      "identifier": "Point.Add",
                      "newPage": false,
                      "searchKey": "image.Point.Add",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Point) Add(q Point) Point"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Point) Add(q Point) Point\n```\n\nAdd returns the vector p+q. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Point.Sub",
                    "documentation": {
                      "identifier": "Point.Sub",
                      "newPage": false,
                      "searchKey": "image.Point.Sub",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Point) Sub(q Point) Point"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Point) Sub(q Point) Point\n```\n\nSub returns the vector p-q. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Point.Mul",
                    "documentation": {
                      "identifier": "Point.Mul",
                      "newPage": false,
                      "searchKey": "image.Point.Mul",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Point) Mul(k int) Point"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Point) Mul(k int) Point\n```\n\nMul returns the vector p*k. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Point.Div",
                    "documentation": {
                      "identifier": "Point.Div",
                      "newPage": false,
                      "searchKey": "image.Point.Div",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Point) Div(k int) Point"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Point) Div(k int) Point\n```\n\nDiv returns the vector p/k. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Point.In",
                    "documentation": {
                      "identifier": "Point.In",
                      "newPage": false,
                      "searchKey": "image.Point.In",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Point) In(r Rectangle) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Point) In(r Rectangle) bool\n```\n\nIn reports whether p is in r. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Point.Mod",
                    "documentation": {
                      "identifier": "Point.Mod",
                      "newPage": false,
                      "searchKey": "image.Point.Mod",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Point) Mod(r Rectangle) Point"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Point) Mod(r Rectangle) Point\n```\n\nMod returns the point q in r such that p.X-q.X is a multiple of r's width and p.Y-q.Y is a multiple of r's height. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Point.Eq",
                    "documentation": {
                      "identifier": "Point.Eq",
                      "newPage": false,
                      "searchKey": "image.Point.Eq",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Point) Eq(q Point) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Point) Eq(q Point) bool\n```\n\nEq reports whether p and q are equal. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#Rectangle",
              "documentation": {
                "identifier": "Rectangle",
                "newPage": false,
                "searchKey": "image.Rectangle",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Rectangle struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Rectangle struct {\n\tMin, Max Point\n}\n```\n\nA Rectangle contains the points with Min.X <= X < Max.X, Min.Y <= Y < Max.Y. It is well-formed if Min.X <= Max.X and likewise for Y. Points are always well-formed. A rectangle's methods always return well-formed outputs for well-formed inputs. \n\nA Rectangle is also an Image whose bounds are the rectangle itself. At returns color.Opaque for points in the rectangle and color.Transparent otherwise. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#Rect",
                    "documentation": {
                      "identifier": "Rect",
                      "newPage": false,
                      "searchKey": "image.Rect",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Rect(x0, y0, x1, y1 int) Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Rect(x0, y0, x1, y1 int) Rectangle\n```\n\nRect is shorthand for Rectangle{Pt(x0, y0), Pt(x1, y1)}. The returned rectangle has minimum and maximum coordinates swapped if necessary so that it is well-formed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Rectangle.String",
                    "documentation": {
                      "identifier": "Rectangle.String",
                      "newPage": false,
                      "searchKey": "image.Rectangle.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r Rectangle) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r Rectangle) String() string\n```\n\nString returns a string representation of r like \"(3,4)-(6,5)\". \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Rectangle.Dx",
                    "documentation": {
                      "identifier": "Rectangle.Dx",
                      "newPage": false,
                      "searchKey": "image.Rectangle.Dx",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r Rectangle) Dx() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r Rectangle) Dx() int\n```\n\nDx returns r's width. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Rectangle.Dy",
                    "documentation": {
                      "identifier": "Rectangle.Dy",
                      "newPage": false,
                      "searchKey": "image.Rectangle.Dy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r Rectangle) Dy() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r Rectangle) Dy() int\n```\n\nDy returns r's height. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Rectangle.Size",
                    "documentation": {
                      "identifier": "Rectangle.Size",
                      "newPage": false,
                      "searchKey": "image.Rectangle.Size",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r Rectangle) Size() Point"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r Rectangle) Size() Point\n```\n\nSize returns r's width and height. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Rectangle.Add",
                    "documentation": {
                      "identifier": "Rectangle.Add",
                      "newPage": false,
                      "searchKey": "image.Rectangle.Add",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r Rectangle) Add(p Point) Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r Rectangle) Add(p Point) Rectangle\n```\n\nAdd returns the rectangle r translated by p. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Rectangle.Sub",
                    "documentation": {
                      "identifier": "Rectangle.Sub",
                      "newPage": false,
                      "searchKey": "image.Rectangle.Sub",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r Rectangle) Sub(p Point) Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r Rectangle) Sub(p Point) Rectangle\n```\n\nSub returns the rectangle r translated by -p. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Rectangle.Inset",
                    "documentation": {
                      "identifier": "Rectangle.Inset",
                      "newPage": false,
                      "searchKey": "image.Rectangle.Inset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r Rectangle) Inset(n int) Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r Rectangle) Inset(n int) Rectangle\n```\n\nInset returns the rectangle r inset by n, which may be negative. If either of r's dimensions is less than 2*n then an empty rectangle near the center of r will be returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Rectangle.Intersect",
                    "documentation": {
                      "identifier": "Rectangle.Intersect",
                      "newPage": false,
                      "searchKey": "image.Rectangle.Intersect",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r Rectangle) Intersect(s Rectangle) Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r Rectangle) Intersect(s Rectangle) Rectangle\n```\n\nIntersect returns the largest rectangle contained by both r and s. If the two rectangles do not overlap then the zero rectangle will be returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Rectangle.Union",
                    "documentation": {
                      "identifier": "Rectangle.Union",
                      "newPage": false,
                      "searchKey": "image.Rectangle.Union",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r Rectangle) Union(s Rectangle) Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r Rectangle) Union(s Rectangle) Rectangle\n```\n\nUnion returns the smallest rectangle that contains both r and s. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Rectangle.Empty",
                    "documentation": {
                      "identifier": "Rectangle.Empty",
                      "newPage": false,
                      "searchKey": "image.Rectangle.Empty",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r Rectangle) Empty() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r Rectangle) Empty() bool\n```\n\nEmpty reports whether the rectangle contains no points. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Rectangle.Eq",
                    "documentation": {
                      "identifier": "Rectangle.Eq",
                      "newPage": false,
                      "searchKey": "image.Rectangle.Eq",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r Rectangle) Eq(s Rectangle) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r Rectangle) Eq(s Rectangle) bool\n```\n\nEq reports whether r and s contain the same set of points. All empty rectangles are considered equal. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Rectangle.Overlaps",
                    "documentation": {
                      "identifier": "Rectangle.Overlaps",
                      "newPage": false,
                      "searchKey": "image.Rectangle.Overlaps",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r Rectangle) Overlaps(s Rectangle) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r Rectangle) Overlaps(s Rectangle) bool\n```\n\nOverlaps reports whether r and s have a non-empty intersection. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Rectangle.In",
                    "documentation": {
                      "identifier": "Rectangle.In",
                      "newPage": false,
                      "searchKey": "image.Rectangle.In",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r Rectangle) In(s Rectangle) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r Rectangle) In(s Rectangle) bool\n```\n\nIn reports whether every point in r is in s. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Rectangle.Canon",
                    "documentation": {
                      "identifier": "Rectangle.Canon",
                      "newPage": false,
                      "searchKey": "image.Rectangle.Canon",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r Rectangle) Canon() Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r Rectangle) Canon() Rectangle\n```\n\nCanon returns the canonical version of r. The returned rectangle has minimum and maximum coordinates swapped if necessary so that it is well-formed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Rectangle.At",
                    "documentation": {
                      "identifier": "Rectangle.At",
                      "newPage": false,
                      "searchKey": "image.Rectangle.At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r Rectangle) At(x, y int) color.Color"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r Rectangle) At(x, y int) color.Color\n```\n\nAt implements the Image interface. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Rectangle.Bounds",
                    "documentation": {
                      "identifier": "Rectangle.Bounds",
                      "newPage": false,
                      "searchKey": "image.Rectangle.Bounds",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r Rectangle) Bounds() Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r Rectangle) Bounds() Rectangle\n```\n\nBounds implements the Image interface. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Rectangle.ColorModel",
                    "documentation": {
                      "identifier": "Rectangle.ColorModel",
                      "newPage": false,
                      "searchKey": "image.Rectangle.ColorModel",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r Rectangle) ColorModel() color.Model"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r Rectangle) ColorModel() color.Model\n```\n\nColorModel implements the Image interface. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#Config",
              "documentation": {
                "identifier": "Config",
                "newPage": false,
                "searchKey": "image.Config",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Config struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Config struct {\n\tColorModel    color.Model\n\tWidth, Height int\n}\n```\n\nConfig holds an image's color model and dimensions. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#DecodeConfig",
                    "documentation": {
                      "identifier": "DecodeConfig",
                      "newPage": false,
                      "searchKey": "image.DecodeConfig",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func DecodeConfig(r io.Reader) (Config, string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc DecodeConfig(r io.Reader) (Config, string, error)\n```\n\nDecodeConfig decodes the color model and dimensions of an image that has been encoded in a registered format. The string returned is the format name used during format registration. Format registration is typically done by an init function in the codec-specific package. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#Image",
              "documentation": {
                "identifier": "Image",
                "newPage": false,
                "searchKey": "image.Image",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Image interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Image interface {\n\t// ColorModel returns the Image's color model.\n\tColorModel() color.Model\n\t// Bounds returns the domain for which At can return non-zero color.\n\t// The bounds do not necessarily contain the point (0, 0).\n\tBounds() Rectangle\n\t// At returns the color of the pixel at (x, y).\n\t// At(Bounds().Min.X, Bounds().Min.Y) returns the upper-left pixel of the grid.\n\t// At(Bounds().Max.X-1, Bounds().Max.Y-1) returns the lower-right one.\n\tAt(x, y int) color.Color\n}\n```\n\nImage is a finite rectangular grid of color.Color values taken from a color model. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#Decode",
                    "documentation": {
                      "identifier": "Decode",
                      "newPage": false,
                      "searchKey": "image.Decode",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Decode(r io.Reader) (Image, string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Decode(r io.Reader) (Image, string, error)\n```\n\nDecode decodes an image that has been encoded in a registered format. The string returned is the format name used during format registration. Format registration is typically done by an init function in the codec- specific package. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#RGBA64Image",
              "documentation": {
                "identifier": "RGBA64Image",
                "newPage": false,
                "searchKey": "image.RGBA64Image",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RGBA64Image interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RGBA64Image interface {\n\t// RGBA64At returns the RGBA64 color of the pixel at (x, y). It is\n\t// equivalent to calling At(x, y).RGBA() and converting the resulting\n\t// 32-bit return values to a color.RGBA64, but it can avoid allocations\n\t// from converting concrete color types to the color.Color interface type.\n\tRGBA64At(x, y int) color.RGBA64\n\tImage\n}\n```\n\nRGBA64Image is an Image whose pixels can be converted directly to a color.RGBA64. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#PalettedImage",
              "documentation": {
                "identifier": "PalettedImage",
                "newPage": false,
                "searchKey": "image.PalettedImage",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PalettedImage interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PalettedImage interface {\n\t// ColorIndexAt returns the palette index of the pixel at (x, y).\n\tColorIndexAt(x, y int) uint8\n\tImage\n}\n```\n\nPalettedImage is an image whose colors may come from a limited palette. If m is a PalettedImage and m.ColorModel() returns a color.Palette p, then m.At(x, y) should be equivalent to p[m.ColorIndexAt(x, y)]. If m's color model is not a color.Palette, then ColorIndexAt's behavior is undefined. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#RGBA",
              "documentation": {
                "identifier": "RGBA",
                "newPage": false,
                "searchKey": "image.RGBA",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RGBA struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RGBA struct {\n\t// Pix holds the image's pixels, in R, G, B, A order. The pixel at\n\t// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*4].\n\tPix []uint8\n\t// Stride is the Pix stride (in bytes) between vertically adjacent pixels.\n\tStride int\n\t// Rect is the image's bounds.\n\tRect Rectangle\n}\n```\n\nRGBA is an in-memory image whose At method returns color.RGBA values. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#NewRGBA",
                    "documentation": {
                      "identifier": "NewRGBA",
                      "newPage": false,
                      "searchKey": "image.NewRGBA",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewRGBA(r Rectangle) *RGBA"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewRGBA(r Rectangle) *RGBA\n```\n\nNewRGBA returns a new RGBA image with the given bounds. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA.ColorModel",
                    "documentation": {
                      "identifier": "RGBA.ColorModel",
                      "newPage": false,
                      "searchKey": "image.RGBA.ColorModel",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA) ColorModel() color.Model"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA) ColorModel() color.Model\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA.Bounds",
                    "documentation": {
                      "identifier": "RGBA.Bounds",
                      "newPage": false,
                      "searchKey": "image.RGBA.Bounds",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA) Bounds() Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA) Bounds() Rectangle\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA.At",
                    "documentation": {
                      "identifier": "RGBA.At",
                      "newPage": false,
                      "searchKey": "image.RGBA.At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA) At(x, y int) color.Color"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA) At(x, y int) color.Color\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA.RGBA64At",
                    "documentation": {
                      "identifier": "RGBA.RGBA64At",
                      "newPage": false,
                      "searchKey": "image.RGBA.RGBA64At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA) RGBA64At(x, y int) color.RGBA64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA) RGBA64At(x, y int) color.RGBA64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA.RGBAAt",
                    "documentation": {
                      "identifier": "RGBA.RGBAAt",
                      "newPage": false,
                      "searchKey": "image.RGBA.RGBAAt",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA) RGBAAt(x, y int) color.RGBA"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA) RGBAAt(x, y int) color.RGBA\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA.PixOffset",
                    "documentation": {
                      "identifier": "RGBA.PixOffset",
                      "newPage": false,
                      "searchKey": "image.RGBA.PixOffset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA) PixOffset(x, y int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA) PixOffset(x, y int) int\n```\n\nPixOffset returns the index of the first element of Pix that corresponds to the pixel at (x, y). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA.Set",
                    "documentation": {
                      "identifier": "RGBA.Set",
                      "newPage": false,
                      "searchKey": "image.RGBA.Set",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA) Set(x, y int, c color.Color)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA) Set(x, y int, c color.Color)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA.SetRGBA64",
                    "documentation": {
                      "identifier": "RGBA.SetRGBA64",
                      "newPage": false,
                      "searchKey": "image.RGBA.SetRGBA64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA) SetRGBA64(x, y int, c color.RGBA64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA) SetRGBA64(x, y int, c color.RGBA64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA.SetRGBA",
                    "documentation": {
                      "identifier": "RGBA.SetRGBA",
                      "newPage": false,
                      "searchKey": "image.RGBA.SetRGBA",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA) SetRGBA(x, y int, c color.RGBA)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA) SetRGBA(x, y int, c color.RGBA)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA.SubImage",
                    "documentation": {
                      "identifier": "RGBA.SubImage",
                      "newPage": false,
                      "searchKey": "image.RGBA.SubImage",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA) SubImage(r Rectangle) Image"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA) SubImage(r Rectangle) Image\n```\n\nSubImage returns an image representing the portion of the image p visible through r. The returned value shares pixels with the original image. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA.Opaque",
                    "documentation": {
                      "identifier": "RGBA.Opaque",
                      "newPage": false,
                      "searchKey": "image.RGBA.Opaque",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA) Opaque() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA) Opaque() bool\n```\n\nOpaque scans the entire image and reports whether it is fully opaque. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#RGBA64",
              "documentation": {
                "identifier": "RGBA64",
                "newPage": false,
                "searchKey": "image.RGBA64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RGBA64 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RGBA64 struct {\n\t// Pix holds the image's pixels, in R, G, B, A order and big-endian format. The pixel at\n\t// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*8].\n\tPix []uint8\n\t// Stride is the Pix stride (in bytes) between vertically adjacent pixels.\n\tStride int\n\t// Rect is the image's bounds.\n\tRect Rectangle\n}\n```\n\nRGBA64 is an in-memory image whose At method returns color.RGBA64 values. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#NewRGBA64",
                    "documentation": {
                      "identifier": "NewRGBA64",
                      "newPage": false,
                      "searchKey": "image.NewRGBA64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewRGBA64(r Rectangle) *RGBA64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewRGBA64(r Rectangle) *RGBA64\n```\n\nNewRGBA64 returns a new RGBA64 image with the given bounds. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA64.ColorModel",
                    "documentation": {
                      "identifier": "RGBA64.ColorModel",
                      "newPage": false,
                      "searchKey": "image.RGBA64.ColorModel",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA64) ColorModel() color.Model"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA64) ColorModel() color.Model\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA64.Bounds",
                    "documentation": {
                      "identifier": "RGBA64.Bounds",
                      "newPage": false,
                      "searchKey": "image.RGBA64.Bounds",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA64) Bounds() Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA64) Bounds() Rectangle\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA64.At",
                    "documentation": {
                      "identifier": "RGBA64.At",
                      "newPage": false,
                      "searchKey": "image.RGBA64.At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA64) At(x, y int) color.Color"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA64) At(x, y int) color.Color\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA64.RGBA64At",
                    "documentation": {
                      "identifier": "RGBA64.RGBA64At",
                      "newPage": false,
                      "searchKey": "image.RGBA64.RGBA64At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA64) RGBA64At(x, y int) color.RGBA64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA64) RGBA64At(x, y int) color.RGBA64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA64.PixOffset",
                    "documentation": {
                      "identifier": "RGBA64.PixOffset",
                      "newPage": false,
                      "searchKey": "image.RGBA64.PixOffset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA64) PixOffset(x, y int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA64) PixOffset(x, y int) int\n```\n\nPixOffset returns the index of the first element of Pix that corresponds to the pixel at (x, y). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA64.Set",
                    "documentation": {
                      "identifier": "RGBA64.Set",
                      "newPage": false,
                      "searchKey": "image.RGBA64.Set",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA64) Set(x, y int, c color.Color)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA64) Set(x, y int, c color.Color)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA64.SetRGBA64",
                    "documentation": {
                      "identifier": "RGBA64.SetRGBA64",
                      "newPage": false,
                      "searchKey": "image.RGBA64.SetRGBA64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA64) SetRGBA64(x, y int, c color.RGBA64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA64) SetRGBA64(x, y int, c color.RGBA64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA64.SubImage",
                    "documentation": {
                      "identifier": "RGBA64.SubImage",
                      "newPage": false,
                      "searchKey": "image.RGBA64.SubImage",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA64) SubImage(r Rectangle) Image"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA64) SubImage(r Rectangle) Image\n```\n\nSubImage returns an image representing the portion of the image p visible through r. The returned value shares pixels with the original image. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#RGBA64.Opaque",
                    "documentation": {
                      "identifier": "RGBA64.Opaque",
                      "newPage": false,
                      "searchKey": "image.RGBA64.Opaque",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *RGBA64) Opaque() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *RGBA64) Opaque() bool\n```\n\nOpaque scans the entire image and reports whether it is fully opaque. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#NRGBA",
              "documentation": {
                "identifier": "NRGBA",
                "newPage": false,
                "searchKey": "image.NRGBA",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NRGBA struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NRGBA struct {\n\t// Pix holds the image's pixels, in R, G, B, A order. The pixel at\n\t// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*4].\n\tPix []uint8\n\t// Stride is the Pix stride (in bytes) between vertically adjacent pixels.\n\tStride int\n\t// Rect is the image's bounds.\n\tRect Rectangle\n}\n```\n\nNRGBA is an in-memory image whose At method returns color.NRGBA values. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#NewNRGBA",
                    "documentation": {
                      "identifier": "NewNRGBA",
                      "newPage": false,
                      "searchKey": "image.NewNRGBA",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewNRGBA(r Rectangle) *NRGBA"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewNRGBA(r Rectangle) *NRGBA\n```\n\nNewNRGBA returns a new NRGBA image with the given bounds. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA.ColorModel",
                    "documentation": {
                      "identifier": "NRGBA.ColorModel",
                      "newPage": false,
                      "searchKey": "image.NRGBA.ColorModel",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA) ColorModel() color.Model"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA) ColorModel() color.Model\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA.Bounds",
                    "documentation": {
                      "identifier": "NRGBA.Bounds",
                      "newPage": false,
                      "searchKey": "image.NRGBA.Bounds",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA) Bounds() Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA) Bounds() Rectangle\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA.At",
                    "documentation": {
                      "identifier": "NRGBA.At",
                      "newPage": false,
                      "searchKey": "image.NRGBA.At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA) At(x, y int) color.Color"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA) At(x, y int) color.Color\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA.RGBA64At",
                    "documentation": {
                      "identifier": "NRGBA.RGBA64At",
                      "newPage": false,
                      "searchKey": "image.NRGBA.RGBA64At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA) RGBA64At(x, y int) color.RGBA64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA) RGBA64At(x, y int) color.RGBA64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA.NRGBAAt",
                    "documentation": {
                      "identifier": "NRGBA.NRGBAAt",
                      "newPage": false,
                      "searchKey": "image.NRGBA.NRGBAAt",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA) NRGBAAt(x, y int) color.NRGBA"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA) NRGBAAt(x, y int) color.NRGBA\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA.PixOffset",
                    "documentation": {
                      "identifier": "NRGBA.PixOffset",
                      "newPage": false,
                      "searchKey": "image.NRGBA.PixOffset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA) PixOffset(x, y int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA) PixOffset(x, y int) int\n```\n\nPixOffset returns the index of the first element of Pix that corresponds to the pixel at (x, y). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA.Set",
                    "documentation": {
                      "identifier": "NRGBA.Set",
                      "newPage": false,
                      "searchKey": "image.NRGBA.Set",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA) Set(x, y int, c color.Color)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA) Set(x, y int, c color.Color)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA.SetRGBA64",
                    "documentation": {
                      "identifier": "NRGBA.SetRGBA64",
                      "newPage": false,
                      "searchKey": "image.NRGBA.SetRGBA64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA) SetRGBA64(x, y int, c color.RGBA64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA) SetRGBA64(x, y int, c color.RGBA64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA.SetNRGBA",
                    "documentation": {
                      "identifier": "NRGBA.SetNRGBA",
                      "newPage": false,
                      "searchKey": "image.NRGBA.SetNRGBA",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA) SetNRGBA(x, y int, c color.NRGBA)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA) SetNRGBA(x, y int, c color.NRGBA)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA.SubImage",
                    "documentation": {
                      "identifier": "NRGBA.SubImage",
                      "newPage": false,
                      "searchKey": "image.NRGBA.SubImage",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA) SubImage(r Rectangle) Image"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA) SubImage(r Rectangle) Image\n```\n\nSubImage returns an image representing the portion of the image p visible through r. The returned value shares pixels with the original image. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA.Opaque",
                    "documentation": {
                      "identifier": "NRGBA.Opaque",
                      "newPage": false,
                      "searchKey": "image.NRGBA.Opaque",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA) Opaque() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA) Opaque() bool\n```\n\nOpaque scans the entire image and reports whether it is fully opaque. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#NRGBA64",
              "documentation": {
                "identifier": "NRGBA64",
                "newPage": false,
                "searchKey": "image.NRGBA64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NRGBA64 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NRGBA64 struct {\n\t// Pix holds the image's pixels, in R, G, B, A order and big-endian format. The pixel at\n\t// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*8].\n\tPix []uint8\n\t// Stride is the Pix stride (in bytes) between vertically adjacent pixels.\n\tStride int\n\t// Rect is the image's bounds.\n\tRect Rectangle\n}\n```\n\nNRGBA64 is an in-memory image whose At method returns color.NRGBA64 values. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#NewNRGBA64",
                    "documentation": {
                      "identifier": "NewNRGBA64",
                      "newPage": false,
                      "searchKey": "image.NewNRGBA64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewNRGBA64(r Rectangle) *NRGBA64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewNRGBA64(r Rectangle) *NRGBA64\n```\n\nNewNRGBA64 returns a new NRGBA64 image with the given bounds. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA64.ColorModel",
                    "documentation": {
                      "identifier": "NRGBA64.ColorModel",
                      "newPage": false,
                      "searchKey": "image.NRGBA64.ColorModel",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA64) ColorModel() color.Model"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA64) ColorModel() color.Model\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA64.Bounds",
                    "documentation": {
                      "identifier": "NRGBA64.Bounds",
                      "newPage": false,
                      "searchKey": "image.NRGBA64.Bounds",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA64) Bounds() Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA64) Bounds() Rectangle\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA64.At",
                    "documentation": {
                      "identifier": "NRGBA64.At",
                      "newPage": false,
                      "searchKey": "image.NRGBA64.At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA64) At(x, y int) color.Color"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA64) At(x, y int) color.Color\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA64.RGBA64At",
                    "documentation": {
                      "identifier": "NRGBA64.RGBA64At",
                      "newPage": false,
                      "searchKey": "image.NRGBA64.RGBA64At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA64) RGBA64At(x, y int) color.RGBA64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA64) RGBA64At(x, y int) color.RGBA64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA64.NRGBA64At",
                    "documentation": {
                      "identifier": "NRGBA64.NRGBA64At",
                      "newPage": false,
                      "searchKey": "image.NRGBA64.NRGBA64At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA64) NRGBA64At(x, y int) color.NRGBA64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA64) NRGBA64At(x, y int) color.NRGBA64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA64.PixOffset",
                    "documentation": {
                      "identifier": "NRGBA64.PixOffset",
                      "newPage": false,
                      "searchKey": "image.NRGBA64.PixOffset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA64) PixOffset(x, y int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA64) PixOffset(x, y int) int\n```\n\nPixOffset returns the index of the first element of Pix that corresponds to the pixel at (x, y). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA64.Set",
                    "documentation": {
                      "identifier": "NRGBA64.Set",
                      "newPage": false,
                      "searchKey": "image.NRGBA64.Set",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA64) Set(x, y int, c color.Color)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA64) Set(x, y int, c color.Color)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA64.SetRGBA64",
                    "documentation": {
                      "identifier": "NRGBA64.SetRGBA64",
                      "newPage": false,
                      "searchKey": "image.NRGBA64.SetRGBA64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA64) SetRGBA64(x, y int, c color.RGBA64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA64) SetRGBA64(x, y int, c color.RGBA64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA64.SetNRGBA64",
                    "documentation": {
                      "identifier": "NRGBA64.SetNRGBA64",
                      "newPage": false,
                      "searchKey": "image.NRGBA64.SetNRGBA64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA64) SetNRGBA64(x, y int, c color.NRGBA64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA64) SetNRGBA64(x, y int, c color.NRGBA64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA64.SubImage",
                    "documentation": {
                      "identifier": "NRGBA64.SubImage",
                      "newPage": false,
                      "searchKey": "image.NRGBA64.SubImage",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA64) SubImage(r Rectangle) Image"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA64) SubImage(r Rectangle) Image\n```\n\nSubImage returns an image representing the portion of the image p visible through r. The returned value shares pixels with the original image. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NRGBA64.Opaque",
                    "documentation": {
                      "identifier": "NRGBA64.Opaque",
                      "newPage": false,
                      "searchKey": "image.NRGBA64.Opaque",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NRGBA64) Opaque() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NRGBA64) Opaque() bool\n```\n\nOpaque scans the entire image and reports whether it is fully opaque. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#Alpha",
              "documentation": {
                "identifier": "Alpha",
                "newPage": false,
                "searchKey": "image.Alpha",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Alpha struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Alpha struct {\n\t// Pix holds the image's pixels, as alpha values. The pixel at\n\t// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*1].\n\tPix []uint8\n\t// Stride is the Pix stride (in bytes) between vertically adjacent pixels.\n\tStride int\n\t// Rect is the image's bounds.\n\tRect Rectangle\n}\n```\n\nAlpha is an in-memory image whose At method returns color.Alpha values. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#NewAlpha",
                    "documentation": {
                      "identifier": "NewAlpha",
                      "newPage": false,
                      "searchKey": "image.NewAlpha",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewAlpha(r Rectangle) *Alpha"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewAlpha(r Rectangle) *Alpha\n```\n\nNewAlpha returns a new Alpha image with the given bounds. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha.ColorModel",
                    "documentation": {
                      "identifier": "Alpha.ColorModel",
                      "newPage": false,
                      "searchKey": "image.Alpha.ColorModel",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha) ColorModel() color.Model"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha) ColorModel() color.Model\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha.Bounds",
                    "documentation": {
                      "identifier": "Alpha.Bounds",
                      "newPage": false,
                      "searchKey": "image.Alpha.Bounds",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha) Bounds() Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha) Bounds() Rectangle\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha.At",
                    "documentation": {
                      "identifier": "Alpha.At",
                      "newPage": false,
                      "searchKey": "image.Alpha.At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha) At(x, y int) color.Color"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha) At(x, y int) color.Color\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha.RGBA64At",
                    "documentation": {
                      "identifier": "Alpha.RGBA64At",
                      "newPage": false,
                      "searchKey": "image.Alpha.RGBA64At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha) RGBA64At(x, y int) color.RGBA64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha) RGBA64At(x, y int) color.RGBA64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha.AlphaAt",
                    "documentation": {
                      "identifier": "Alpha.AlphaAt",
                      "newPage": false,
                      "searchKey": "image.Alpha.AlphaAt",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha) AlphaAt(x, y int) color.Alpha"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha) AlphaAt(x, y int) color.Alpha\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha.PixOffset",
                    "documentation": {
                      "identifier": "Alpha.PixOffset",
                      "newPage": false,
                      "searchKey": "image.Alpha.PixOffset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha) PixOffset(x, y int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha) PixOffset(x, y int) int\n```\n\nPixOffset returns the index of the first element of Pix that corresponds to the pixel at (x, y). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha.Set",
                    "documentation": {
                      "identifier": "Alpha.Set",
                      "newPage": false,
                      "searchKey": "image.Alpha.Set",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha) Set(x, y int, c color.Color)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha) Set(x, y int, c color.Color)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha.SetRGBA64",
                    "documentation": {
                      "identifier": "Alpha.SetRGBA64",
                      "newPage": false,
                      "searchKey": "image.Alpha.SetRGBA64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha) SetRGBA64(x, y int, c color.RGBA64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha) SetRGBA64(x, y int, c color.RGBA64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha.SetAlpha",
                    "documentation": {
                      "identifier": "Alpha.SetAlpha",
                      "newPage": false,
                      "searchKey": "image.Alpha.SetAlpha",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha) SetAlpha(x, y int, c color.Alpha)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha) SetAlpha(x, y int, c color.Alpha)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha.SubImage",
                    "documentation": {
                      "identifier": "Alpha.SubImage",
                      "newPage": false,
                      "searchKey": "image.Alpha.SubImage",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha) SubImage(r Rectangle) Image"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha) SubImage(r Rectangle) Image\n```\n\nSubImage returns an image representing the portion of the image p visible through r. The returned value shares pixels with the original image. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha.Opaque",
                    "documentation": {
                      "identifier": "Alpha.Opaque",
                      "newPage": false,
                      "searchKey": "image.Alpha.Opaque",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha) Opaque() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha) Opaque() bool\n```\n\nOpaque scans the entire image and reports whether it is fully opaque. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#Alpha16",
              "documentation": {
                "identifier": "Alpha16",
                "newPage": false,
                "searchKey": "image.Alpha16",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Alpha16 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Alpha16 struct {\n\t// Pix holds the image's pixels, as alpha values in big-endian format. The pixel at\n\t// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*2].\n\tPix []uint8\n\t// Stride is the Pix stride (in bytes) between vertically adjacent pixels.\n\tStride int\n\t// Rect is the image's bounds.\n\tRect Rectangle\n}\n```\n\nAlpha16 is an in-memory image whose At method returns color.Alpha16 values. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#NewAlpha16",
                    "documentation": {
                      "identifier": "NewAlpha16",
                      "newPage": false,
                      "searchKey": "image.NewAlpha16",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewAlpha16(r Rectangle) *Alpha16"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewAlpha16(r Rectangle) *Alpha16\n```\n\nNewAlpha16 returns a new Alpha16 image with the given bounds. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha16.ColorModel",
                    "documentation": {
                      "identifier": "Alpha16.ColorModel",
                      "newPage": false,
                      "searchKey": "image.Alpha16.ColorModel",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha16) ColorModel() color.Model"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha16) ColorModel() color.Model\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha16.Bounds",
                    "documentation": {
                      "identifier": "Alpha16.Bounds",
                      "newPage": false,
                      "searchKey": "image.Alpha16.Bounds",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha16) Bounds() Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha16) Bounds() Rectangle\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha16.At",
                    "documentation": {
                      "identifier": "Alpha16.At",
                      "newPage": false,
                      "searchKey": "image.Alpha16.At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha16) At(x, y int) color.Color"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha16) At(x, y int) color.Color\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha16.RGBA64At",
                    "documentation": {
                      "identifier": "Alpha16.RGBA64At",
                      "newPage": false,
                      "searchKey": "image.Alpha16.RGBA64At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha16) RGBA64At(x, y int) color.RGBA64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha16) RGBA64At(x, y int) color.RGBA64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha16.Alpha16At",
                    "documentation": {
                      "identifier": "Alpha16.Alpha16At",
                      "newPage": false,
                      "searchKey": "image.Alpha16.Alpha16At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha16) Alpha16At(x, y int) color.Alpha16"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha16) Alpha16At(x, y int) color.Alpha16\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha16.PixOffset",
                    "documentation": {
                      "identifier": "Alpha16.PixOffset",
                      "newPage": false,
                      "searchKey": "image.Alpha16.PixOffset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha16) PixOffset(x, y int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha16) PixOffset(x, y int) int\n```\n\nPixOffset returns the index of the first element of Pix that corresponds to the pixel at (x, y). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha16.Set",
                    "documentation": {
                      "identifier": "Alpha16.Set",
                      "newPage": false,
                      "searchKey": "image.Alpha16.Set",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha16) Set(x, y int, c color.Color)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha16) Set(x, y int, c color.Color)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha16.SetRGBA64",
                    "documentation": {
                      "identifier": "Alpha16.SetRGBA64",
                      "newPage": false,
                      "searchKey": "image.Alpha16.SetRGBA64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha16) SetRGBA64(x, y int, c color.RGBA64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha16) SetRGBA64(x, y int, c color.RGBA64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha16.SetAlpha16",
                    "documentation": {
                      "identifier": "Alpha16.SetAlpha16",
                      "newPage": false,
                      "searchKey": "image.Alpha16.SetAlpha16",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha16) SetAlpha16(x, y int, c color.Alpha16)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha16) SetAlpha16(x, y int, c color.Alpha16)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha16.SubImage",
                    "documentation": {
                      "identifier": "Alpha16.SubImage",
                      "newPage": false,
                      "searchKey": "image.Alpha16.SubImage",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha16) SubImage(r Rectangle) Image"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha16) SubImage(r Rectangle) Image\n```\n\nSubImage returns an image representing the portion of the image p visible through r. The returned value shares pixels with the original image. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Alpha16.Opaque",
                    "documentation": {
                      "identifier": "Alpha16.Opaque",
                      "newPage": false,
                      "searchKey": "image.Alpha16.Opaque",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Alpha16) Opaque() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Alpha16) Opaque() bool\n```\n\nOpaque scans the entire image and reports whether it is fully opaque. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#Gray",
              "documentation": {
                "identifier": "Gray",
                "newPage": false,
                "searchKey": "image.Gray",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Gray struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Gray struct {\n\t// Pix holds the image's pixels, as gray values. The pixel at\n\t// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*1].\n\tPix []uint8\n\t// Stride is the Pix stride (in bytes) between vertically adjacent pixels.\n\tStride int\n\t// Rect is the image's bounds.\n\tRect Rectangle\n}\n```\n\nGray is an in-memory image whose At method returns color.Gray values. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#NewGray",
                    "documentation": {
                      "identifier": "NewGray",
                      "newPage": false,
                      "searchKey": "image.NewGray",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewGray(r Rectangle) *Gray"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewGray(r Rectangle) *Gray\n```\n\nNewGray returns a new Gray image with the given bounds. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray.ColorModel",
                    "documentation": {
                      "identifier": "Gray.ColorModel",
                      "newPage": false,
                      "searchKey": "image.Gray.ColorModel",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray) ColorModel() color.Model"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray) ColorModel() color.Model\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray.Bounds",
                    "documentation": {
                      "identifier": "Gray.Bounds",
                      "newPage": false,
                      "searchKey": "image.Gray.Bounds",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray) Bounds() Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray) Bounds() Rectangle\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray.At",
                    "documentation": {
                      "identifier": "Gray.At",
                      "newPage": false,
                      "searchKey": "image.Gray.At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray) At(x, y int) color.Color"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray) At(x, y int) color.Color\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray.RGBA64At",
                    "documentation": {
                      "identifier": "Gray.RGBA64At",
                      "newPage": false,
                      "searchKey": "image.Gray.RGBA64At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray) RGBA64At(x, y int) color.RGBA64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray) RGBA64At(x, y int) color.RGBA64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray.GrayAt",
                    "documentation": {
                      "identifier": "Gray.GrayAt",
                      "newPage": false,
                      "searchKey": "image.Gray.GrayAt",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray) GrayAt(x, y int) color.Gray"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray) GrayAt(x, y int) color.Gray\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray.PixOffset",
                    "documentation": {
                      "identifier": "Gray.PixOffset",
                      "newPage": false,
                      "searchKey": "image.Gray.PixOffset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray) PixOffset(x, y int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray) PixOffset(x, y int) int\n```\n\nPixOffset returns the index of the first element of Pix that corresponds to the pixel at (x, y). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray.Set",
                    "documentation": {
                      "identifier": "Gray.Set",
                      "newPage": false,
                      "searchKey": "image.Gray.Set",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray) Set(x, y int, c color.Color)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray) Set(x, y int, c color.Color)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray.SetRGBA64",
                    "documentation": {
                      "identifier": "Gray.SetRGBA64",
                      "newPage": false,
                      "searchKey": "image.Gray.SetRGBA64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray) SetRGBA64(x, y int, c color.RGBA64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray) SetRGBA64(x, y int, c color.RGBA64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray.SetGray",
                    "documentation": {
                      "identifier": "Gray.SetGray",
                      "newPage": false,
                      "searchKey": "image.Gray.SetGray",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray) SetGray(x, y int, c color.Gray)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray) SetGray(x, y int, c color.Gray)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray.SubImage",
                    "documentation": {
                      "identifier": "Gray.SubImage",
                      "newPage": false,
                      "searchKey": "image.Gray.SubImage",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray) SubImage(r Rectangle) Image"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray) SubImage(r Rectangle) Image\n```\n\nSubImage returns an image representing the portion of the image p visible through r. The returned value shares pixels with the original image. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray.Opaque",
                    "documentation": {
                      "identifier": "Gray.Opaque",
                      "newPage": false,
                      "searchKey": "image.Gray.Opaque",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray) Opaque() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray) Opaque() bool\n```\n\nOpaque scans the entire image and reports whether it is fully opaque. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#Gray16",
              "documentation": {
                "identifier": "Gray16",
                "newPage": false,
                "searchKey": "image.Gray16",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Gray16 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Gray16 struct {\n\t// Pix holds the image's pixels, as gray values in big-endian format. The pixel at\n\t// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*2].\n\tPix []uint8\n\t// Stride is the Pix stride (in bytes) between vertically adjacent pixels.\n\tStride int\n\t// Rect is the image's bounds.\n\tRect Rectangle\n}\n```\n\nGray16 is an in-memory image whose At method returns color.Gray16 values. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#NewGray16",
                    "documentation": {
                      "identifier": "NewGray16",
                      "newPage": false,
                      "searchKey": "image.NewGray16",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewGray16(r Rectangle) *Gray16"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewGray16(r Rectangle) *Gray16\n```\n\nNewGray16 returns a new Gray16 image with the given bounds. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray16.ColorModel",
                    "documentation": {
                      "identifier": "Gray16.ColorModel",
                      "newPage": false,
                      "searchKey": "image.Gray16.ColorModel",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray16) ColorModel() color.Model"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray16) ColorModel() color.Model\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray16.Bounds",
                    "documentation": {
                      "identifier": "Gray16.Bounds",
                      "newPage": false,
                      "searchKey": "image.Gray16.Bounds",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray16) Bounds() Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray16) Bounds() Rectangle\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray16.At",
                    "documentation": {
                      "identifier": "Gray16.At",
                      "newPage": false,
                      "searchKey": "image.Gray16.At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray16) At(x, y int) color.Color"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray16) At(x, y int) color.Color\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray16.RGBA64At",
                    "documentation": {
                      "identifier": "Gray16.RGBA64At",
                      "newPage": false,
                      "searchKey": "image.Gray16.RGBA64At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray16) RGBA64At(x, y int) color.RGBA64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray16) RGBA64At(x, y int) color.RGBA64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray16.Gray16At",
                    "documentation": {
                      "identifier": "Gray16.Gray16At",
                      "newPage": false,
                      "searchKey": "image.Gray16.Gray16At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray16) Gray16At(x, y int) color.Gray16"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray16) Gray16At(x, y int) color.Gray16\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray16.PixOffset",
                    "documentation": {
                      "identifier": "Gray16.PixOffset",
                      "newPage": false,
                      "searchKey": "image.Gray16.PixOffset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray16) PixOffset(x, y int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray16) PixOffset(x, y int) int\n```\n\nPixOffset returns the index of the first element of Pix that corresponds to the pixel at (x, y). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray16.Set",
                    "documentation": {
                      "identifier": "Gray16.Set",
                      "newPage": false,
                      "searchKey": "image.Gray16.Set",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray16) Set(x, y int, c color.Color)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray16) Set(x, y int, c color.Color)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray16.SetRGBA64",
                    "documentation": {
                      "identifier": "Gray16.SetRGBA64",
                      "newPage": false,
                      "searchKey": "image.Gray16.SetRGBA64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray16) SetRGBA64(x, y int, c color.RGBA64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray16) SetRGBA64(x, y int, c color.RGBA64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray16.SetGray16",
                    "documentation": {
                      "identifier": "Gray16.SetGray16",
                      "newPage": false,
                      "searchKey": "image.Gray16.SetGray16",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray16) SetGray16(x, y int, c color.Gray16)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray16) SetGray16(x, y int, c color.Gray16)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray16.SubImage",
                    "documentation": {
                      "identifier": "Gray16.SubImage",
                      "newPage": false,
                      "searchKey": "image.Gray16.SubImage",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray16) SubImage(r Rectangle) Image"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray16) SubImage(r Rectangle) Image\n```\n\nSubImage returns an image representing the portion of the image p visible through r. The returned value shares pixels with the original image. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Gray16.Opaque",
                    "documentation": {
                      "identifier": "Gray16.Opaque",
                      "newPage": false,
                      "searchKey": "image.Gray16.Opaque",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Gray16) Opaque() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Gray16) Opaque() bool\n```\n\nOpaque scans the entire image and reports whether it is fully opaque. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#CMYK",
              "documentation": {
                "identifier": "CMYK",
                "newPage": false,
                "searchKey": "image.CMYK",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CMYK struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CMYK struct {\n\t// Pix holds the image's pixels, in C, M, Y, K order. The pixel at\n\t// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*4].\n\tPix []uint8\n\t// Stride is the Pix stride (in bytes) between vertically adjacent pixels.\n\tStride int\n\t// Rect is the image's bounds.\n\tRect Rectangle\n}\n```\n\nCMYK is an in-memory image whose At method returns color.CMYK values. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#NewCMYK",
                    "documentation": {
                      "identifier": "NewCMYK",
                      "newPage": false,
                      "searchKey": "image.NewCMYK",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewCMYK(r Rectangle) *CMYK"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewCMYK(r Rectangle) *CMYK\n```\n\nNewCMYK returns a new CMYK image with the given bounds. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#CMYK.ColorModel",
                    "documentation": {
                      "identifier": "CMYK.ColorModel",
                      "newPage": false,
                      "searchKey": "image.CMYK.ColorModel",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *CMYK) ColorModel() color.Model"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *CMYK) ColorModel() color.Model\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#CMYK.Bounds",
                    "documentation": {
                      "identifier": "CMYK.Bounds",
                      "newPage": false,
                      "searchKey": "image.CMYK.Bounds",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *CMYK) Bounds() Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *CMYK) Bounds() Rectangle\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#CMYK.At",
                    "documentation": {
                      "identifier": "CMYK.At",
                      "newPage": false,
                      "searchKey": "image.CMYK.At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *CMYK) At(x, y int) color.Color"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *CMYK) At(x, y int) color.Color\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#CMYK.RGBA64At",
                    "documentation": {
                      "identifier": "CMYK.RGBA64At",
                      "newPage": false,
                      "searchKey": "image.CMYK.RGBA64At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *CMYK) RGBA64At(x, y int) color.RGBA64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *CMYK) RGBA64At(x, y int) color.RGBA64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#CMYK.CMYKAt",
                    "documentation": {
                      "identifier": "CMYK.CMYKAt",
                      "newPage": false,
                      "searchKey": "image.CMYK.CMYKAt",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *CMYK) CMYKAt(x, y int) color.CMYK"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *CMYK) CMYKAt(x, y int) color.CMYK\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#CMYK.PixOffset",
                    "documentation": {
                      "identifier": "CMYK.PixOffset",
                      "newPage": false,
                      "searchKey": "image.CMYK.PixOffset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *CMYK) PixOffset(x, y int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *CMYK) PixOffset(x, y int) int\n```\n\nPixOffset returns the index of the first element of Pix that corresponds to the pixel at (x, y). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#CMYK.Set",
                    "documentation": {
                      "identifier": "CMYK.Set",
                      "newPage": false,
                      "searchKey": "image.CMYK.Set",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *CMYK) Set(x, y int, c color.Color)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *CMYK) Set(x, y int, c color.Color)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#CMYK.SetRGBA64",
                    "documentation": {
                      "identifier": "CMYK.SetRGBA64",
                      "newPage": false,
                      "searchKey": "image.CMYK.SetRGBA64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *CMYK) SetRGBA64(x, y int, c color.RGBA64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *CMYK) SetRGBA64(x, y int, c color.RGBA64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#CMYK.SetCMYK",
                    "documentation": {
                      "identifier": "CMYK.SetCMYK",
                      "newPage": false,
                      "searchKey": "image.CMYK.SetCMYK",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *CMYK) SetCMYK(x, y int, c color.CMYK)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *CMYK) SetCMYK(x, y int, c color.CMYK)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#CMYK.SubImage",
                    "documentation": {
                      "identifier": "CMYK.SubImage",
                      "newPage": false,
                      "searchKey": "image.CMYK.SubImage",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *CMYK) SubImage(r Rectangle) Image"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *CMYK) SubImage(r Rectangle) Image\n```\n\nSubImage returns an image representing the portion of the image p visible through r. The returned value shares pixels with the original image. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#CMYK.Opaque",
                    "documentation": {
                      "identifier": "CMYK.Opaque",
                      "newPage": false,
                      "searchKey": "image.CMYK.Opaque",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *CMYK) Opaque() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *CMYK) Opaque() bool\n```\n\nOpaque scans the entire image and reports whether it is fully opaque. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#Paletted",
              "documentation": {
                "identifier": "Paletted",
                "newPage": false,
                "searchKey": "image.Paletted",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Paletted struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Paletted struct {\n\t// Pix holds the image's pixels, as palette indices. The pixel at\n\t// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*1].\n\tPix []uint8\n\t// Stride is the Pix stride (in bytes) between vertically adjacent pixels.\n\tStride int\n\t// Rect is the image's bounds.\n\tRect Rectangle\n\t// Palette is the image's palette.\n\tPalette color.Palette\n}\n```\n\nPaletted is an in-memory image of uint8 indices into a given palette. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#NewPaletted",
                    "documentation": {
                      "identifier": "NewPaletted",
                      "newPage": false,
                      "searchKey": "image.NewPaletted",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewPaletted(r Rectangle, p color.Palette) *Paletted"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewPaletted(r Rectangle, p color.Palette) *Paletted\n```\n\nNewPaletted returns a new Paletted image with the given width, height and palette. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Paletted.ColorModel",
                    "documentation": {
                      "identifier": "Paletted.ColorModel",
                      "newPage": false,
                      "searchKey": "image.Paletted.ColorModel",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Paletted) ColorModel() color.Model"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Paletted) ColorModel() color.Model\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Paletted.Bounds",
                    "documentation": {
                      "identifier": "Paletted.Bounds",
                      "newPage": false,
                      "searchKey": "image.Paletted.Bounds",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Paletted) Bounds() Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Paletted) Bounds() Rectangle\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Paletted.At",
                    "documentation": {
                      "identifier": "Paletted.At",
                      "newPage": false,
                      "searchKey": "image.Paletted.At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Paletted) At(x, y int) color.Color"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Paletted) At(x, y int) color.Color\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Paletted.RGBA64At",
                    "documentation": {
                      "identifier": "Paletted.RGBA64At",
                      "newPage": false,
                      "searchKey": "image.Paletted.RGBA64At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Paletted) RGBA64At(x, y int) color.RGBA64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Paletted) RGBA64At(x, y int) color.RGBA64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Paletted.PixOffset",
                    "documentation": {
                      "identifier": "Paletted.PixOffset",
                      "newPage": false,
                      "searchKey": "image.Paletted.PixOffset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Paletted) PixOffset(x, y int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Paletted) PixOffset(x, y int) int\n```\n\nPixOffset returns the index of the first element of Pix that corresponds to the pixel at (x, y). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Paletted.Set",
                    "documentation": {
                      "identifier": "Paletted.Set",
                      "newPage": false,
                      "searchKey": "image.Paletted.Set",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Paletted) Set(x, y int, c color.Color)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Paletted) Set(x, y int, c color.Color)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Paletted.SetRGBA64",
                    "documentation": {
                      "identifier": "Paletted.SetRGBA64",
                      "newPage": false,
                      "searchKey": "image.Paletted.SetRGBA64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Paletted) SetRGBA64(x, y int, c color.RGBA64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Paletted) SetRGBA64(x, y int, c color.RGBA64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Paletted.ColorIndexAt",
                    "documentation": {
                      "identifier": "Paletted.ColorIndexAt",
                      "newPage": false,
                      "searchKey": "image.Paletted.ColorIndexAt",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Paletted) ColorIndexAt(x, y int) uint8"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Paletted) ColorIndexAt(x, y int) uint8\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Paletted.SetColorIndex",
                    "documentation": {
                      "identifier": "Paletted.SetColorIndex",
                      "newPage": false,
                      "searchKey": "image.Paletted.SetColorIndex",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Paletted) SetColorIndex(x, y int, index uint8)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Paletted) SetColorIndex(x, y int, index uint8)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Paletted.SubImage",
                    "documentation": {
                      "identifier": "Paletted.SubImage",
                      "newPage": false,
                      "searchKey": "image.Paletted.SubImage",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Paletted) SubImage(r Rectangle) Image"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Paletted) SubImage(r Rectangle) Image\n```\n\nSubImage returns an image representing the portion of the image p visible through r. The returned value shares pixels with the original image. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Paletted.Opaque",
                    "documentation": {
                      "identifier": "Paletted.Opaque",
                      "newPage": false,
                      "searchKey": "image.Paletted.Opaque",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Paletted) Opaque() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Paletted) Opaque() bool\n```\n\nOpaque scans the entire image and reports whether it is fully opaque. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#Uniform",
              "documentation": {
                "identifier": "Uniform",
                "newPage": false,
                "searchKey": "image.Uniform",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Uniform struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Uniform struct {\n\tC color.Color\n}\n```\n\nUniform is an infinite-sized Image of uniform color. It implements the color.Color, color.Model, and Image interfaces. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#NewUniform",
                    "documentation": {
                      "identifier": "NewUniform",
                      "newPage": false,
                      "searchKey": "image.NewUniform",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewUniform(c color.Color) *Uniform"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewUniform(c color.Color) *Uniform\n```\n\nNewUniform returns a new Uniform image of the given color. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Uniform.RGBA",
                    "documentation": {
                      "identifier": "Uniform.RGBA",
                      "newPage": false,
                      "searchKey": "image.Uniform.RGBA",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Uniform) RGBA() (r, g, b, a uint32)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Uniform) RGBA() (r, g, b, a uint32)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Uniform.ColorModel",
                    "documentation": {
                      "identifier": "Uniform.ColorModel",
                      "newPage": false,
                      "searchKey": "image.Uniform.ColorModel",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Uniform) ColorModel() color.Model"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Uniform) ColorModel() color.Model\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Uniform.Convert",
                    "documentation": {
                      "identifier": "Uniform.Convert",
                      "newPage": false,
                      "searchKey": "image.Uniform.Convert",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Uniform) Convert(color.Color) color.Color"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Uniform) Convert(color.Color) color.Color\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Uniform.Bounds",
                    "documentation": {
                      "identifier": "Uniform.Bounds",
                      "newPage": false,
                      "searchKey": "image.Uniform.Bounds",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Uniform) Bounds() Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Uniform) Bounds() Rectangle\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Uniform.At",
                    "documentation": {
                      "identifier": "Uniform.At",
                      "newPage": false,
                      "searchKey": "image.Uniform.At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Uniform) At(x, y int) color.Color"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Uniform) At(x, y int) color.Color\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#Uniform.Opaque",
                    "documentation": {
                      "identifier": "Uniform.Opaque",
                      "newPage": false,
                      "searchKey": "image.Uniform.Opaque",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Uniform) Opaque() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Uniform) Opaque() bool\n```\n\nOpaque scans the entire image and reports whether it is fully opaque. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#YCbCrSubsampleRatio",
              "documentation": {
                "identifier": "YCbCrSubsampleRatio",
                "newPage": false,
                "searchKey": "image.YCbCrSubsampleRatio",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type YCbCrSubsampleRatio int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype YCbCrSubsampleRatio int\n```\n\nYCbCrSubsampleRatio is the chroma subsample ratio used in a YCbCr image. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#YCbCrSubsampleRatio.String",
                    "documentation": {
                      "identifier": "YCbCrSubsampleRatio.String",
                      "newPage": false,
                      "searchKey": "image.YCbCrSubsampleRatio.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s YCbCrSubsampleRatio) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s YCbCrSubsampleRatio) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#YCbCr",
              "documentation": {
                "identifier": "YCbCr",
                "newPage": false,
                "searchKey": "image.YCbCr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type YCbCr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype YCbCr struct {\n\tY, Cb, Cr      []uint8\n\tYStride        int\n\tCStride        int\n\tSubsampleRatio YCbCrSubsampleRatio\n\tRect           Rectangle\n}\n```\n\nYCbCr is an in-memory image of Y'CbCr colors. There is one Y sample per pixel, but each Cb and Cr sample can span one or more pixels. YStride is the Y slice index delta between vertically adjacent pixels. CStride is the Cb and Cr slice index delta between vertically adjacent pixels that map to separate chroma samples. It is not an absolute requirement, but YStride and len(Y) are typically multiples of 8, and: \n\n```\nFor 4:4:4, CStride == YStride/1 && len(Cb) == len(Cr) == len(Y)/1.\nFor 4:2:2, CStride == YStride/2 && len(Cb) == len(Cr) == len(Y)/2.\nFor 4:2:0, CStride == YStride/2 && len(Cb) == len(Cr) == len(Y)/4.\nFor 4:4:0, CStride == YStride/1 && len(Cb) == len(Cr) == len(Y)/2.\nFor 4:1:1, CStride == YStride/4 && len(Cb) == len(Cr) == len(Y)/4.\nFor 4:1:0, CStride == YStride/4 && len(Cb) == len(Cr) == len(Y)/8.\n\n```\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#NewYCbCr",
                    "documentation": {
                      "identifier": "NewYCbCr",
                      "newPage": false,
                      "searchKey": "image.NewYCbCr",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewYCbCr(r Rectangle, subsampleRatio YCbCrSubsampleRatio) *YCbCr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewYCbCr(r Rectangle, subsampleRatio YCbCrSubsampleRatio) *YCbCr\n```\n\nNewYCbCr returns a new YCbCr image with the given bounds and subsample ratio. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#YCbCr.ColorModel",
                    "documentation": {
                      "identifier": "YCbCr.ColorModel",
                      "newPage": false,
                      "searchKey": "image.YCbCr.ColorModel",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *YCbCr) ColorModel() color.Model"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *YCbCr) ColorModel() color.Model\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#YCbCr.Bounds",
                    "documentation": {
                      "identifier": "YCbCr.Bounds",
                      "newPage": false,
                      "searchKey": "image.YCbCr.Bounds",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *YCbCr) Bounds() Rectangle"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *YCbCr) Bounds() Rectangle\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#YCbCr.At",
                    "documentation": {
                      "identifier": "YCbCr.At",
                      "newPage": false,
                      "searchKey": "image.YCbCr.At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *YCbCr) At(x, y int) color.Color"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *YCbCr) At(x, y int) color.Color\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#YCbCr.RGBA64At",
                    "documentation": {
                      "identifier": "YCbCr.RGBA64At",
                      "newPage": false,
                      "searchKey": "image.YCbCr.RGBA64At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *YCbCr) RGBA64At(x, y int) color.RGBA64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *YCbCr) RGBA64At(x, y int) color.RGBA64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#YCbCr.YCbCrAt",
                    "documentation": {
                      "identifier": "YCbCr.YCbCrAt",
                      "newPage": false,
                      "searchKey": "image.YCbCr.YCbCrAt",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *YCbCr) YCbCrAt(x, y int) color.YCbCr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *YCbCr) YCbCrAt(x, y int) color.YCbCr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#YCbCr.YOffset",
                    "documentation": {
                      "identifier": "YCbCr.YOffset",
                      "newPage": false,
                      "searchKey": "image.YCbCr.YOffset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *YCbCr) YOffset(x, y int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *YCbCr) YOffset(x, y int) int\n```\n\nYOffset returns the index of the first element of Y that corresponds to the pixel at (x, y). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#YCbCr.COffset",
                    "documentation": {
                      "identifier": "YCbCr.COffset",
                      "newPage": false,
                      "searchKey": "image.YCbCr.COffset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *YCbCr) COffset(x, y int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *YCbCr) COffset(x, y int) int\n```\n\nCOffset returns the index of the first element of Cb or Cr that corresponds to the pixel at (x, y). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#YCbCr.SubImage",
                    "documentation": {
                      "identifier": "YCbCr.SubImage",
                      "newPage": false,
                      "searchKey": "image.YCbCr.SubImage",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *YCbCr) SubImage(r Rectangle) Image"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *YCbCr) SubImage(r Rectangle) Image\n```\n\nSubImage returns an image representing the portion of the image p visible through r. The returned value shares pixels with the original image. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#YCbCr.Opaque",
                    "documentation": {
                      "identifier": "YCbCr.Opaque",
                      "newPage": false,
                      "searchKey": "image.YCbCr.Opaque",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *YCbCr) Opaque() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *YCbCr) Opaque() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#NYCbCrA",
              "documentation": {
                "identifier": "NYCbCrA",
                "newPage": false,
                "searchKey": "image.NYCbCrA",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NYCbCrA struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NYCbCrA struct {\n\tYCbCr\n\tA       []uint8\n\tAStride int\n}\n```\n\nNYCbCrA is an in-memory image of non-alpha-premultiplied Y'CbCr-with-alpha colors. A and AStride are analogous to the Y and YStride fields of the embedded YCbCr. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/image#NewNYCbCrA",
                    "documentation": {
                      "identifier": "NewNYCbCrA",
                      "newPage": false,
                      "searchKey": "image.NewNYCbCrA",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewNYCbCrA(r Rectangle, subsampleRatio YCbCrSubsampleRatio) *NYCbCrA"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewNYCbCrA(r Rectangle, subsampleRatio YCbCrSubsampleRatio) *NYCbCrA\n```\n\nNewNYCbCrA returns a new NYCbCrA image with the given bounds and subsample ratio. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NYCbCrA.ColorModel",
                    "documentation": {
                      "identifier": "NYCbCrA.ColorModel",
                      "newPage": false,
                      "searchKey": "image.NYCbCrA.ColorModel",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NYCbCrA) ColorModel() color.Model"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NYCbCrA) ColorModel() color.Model\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NYCbCrA.At",
                    "documentation": {
                      "identifier": "NYCbCrA.At",
                      "newPage": false,
                      "searchKey": "image.NYCbCrA.At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NYCbCrA) At(x, y int) color.Color"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NYCbCrA) At(x, y int) color.Color\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NYCbCrA.RGBA64At",
                    "documentation": {
                      "identifier": "NYCbCrA.RGBA64At",
                      "newPage": false,
                      "searchKey": "image.NYCbCrA.RGBA64At",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NYCbCrA) RGBA64At(x, y int) color.RGBA64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NYCbCrA) RGBA64At(x, y int) color.RGBA64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NYCbCrA.NYCbCrAAt",
                    "documentation": {
                      "identifier": "NYCbCrA.NYCbCrAAt",
                      "newPage": false,
                      "searchKey": "image.NYCbCrA.NYCbCrAAt",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NYCbCrA) NYCbCrAAt(x, y int) color.NYCbCrA"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NYCbCrA) NYCbCrAAt(x, y int) color.NYCbCrA\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NYCbCrA.AOffset",
                    "documentation": {
                      "identifier": "NYCbCrA.AOffset",
                      "newPage": false,
                      "searchKey": "image.NYCbCrA.AOffset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NYCbCrA) AOffset(x, y int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NYCbCrA) AOffset(x, y int) int\n```\n\nAOffset returns the index of the first element of A that corresponds to the pixel at (x, y). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NYCbCrA.SubImage",
                    "documentation": {
                      "identifier": "NYCbCrA.SubImage",
                      "newPage": false,
                      "searchKey": "image.NYCbCrA.SubImage",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NYCbCrA) SubImage(r Rectangle) Image"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NYCbCrA) SubImage(r Rectangle) Image\n```\n\nSubImage returns an image representing the portion of the image p visible through r. The returned value shares pixels with the original image. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/image#NYCbCrA.Opaque",
                    "documentation": {
                      "identifier": "NYCbCrA.Opaque",
                      "newPage": false,
                      "searchKey": "image.NYCbCrA.Opaque",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *NYCbCrA) Opaque() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *NYCbCrA) Opaque() bool\n```\n\nOpaque scans the entire image and reports whether it is fully opaque. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/image#image",
              "documentation": {
                "identifier": "image",
                "newPage": false,
                "searchKey": "image.image",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type image interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype image interface {\n\tImage\n\tOpaque() bool\n\tSet(int, int, color.Color)\n\tSubImage(Rectangle) Image\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/image#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/image#RegisterFormat",
              "documentation": {
                "identifier": "RegisterFormat",
                "newPage": false,
                "searchKey": "image.RegisterFormat",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RegisterFormat(name, magic string, decode func(io.Reader) (Image, error), decodeConfig func(io.Reader) (Config, error))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RegisterFormat(name, magic string, decode func(io.Reader) (Image, error), decodeConfig func(io.Reader) (Config, error))\n```\n\nRegisterFormat registers an image format for use by Decode. Name is the name of the format, like \"jpeg\" or \"png\". Magic is the magic prefix that identifies the format's encoding. The magic string can contain \"?\" wildcards that each match any one byte. Decode is the function that decodes the encoded image. DecodeConfig is the function that decodes just its configuration. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#match",
              "documentation": {
                "identifier": "match",
                "newPage": false,
                "searchKey": "image.match",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func match(magic string, b []byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc match(magic string, b []byte) bool\n```\n\nMatch reports whether magic matches b. Magic may contain \"?\" wildcards. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#mul3NonNeg",
              "documentation": {
                "identifier": "mul3NonNeg",
                "newPage": false,
                "searchKey": "image.mul3NonNeg",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func mul3NonNeg(x int, y int, z int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mul3NonNeg(x int, y int, z int) int\n```\n\nmul3NonNeg returns (x * y * z), unless at least one argument is negative or if the computation overflows the int type, in which case it returns -1. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#add2NonNeg",
              "documentation": {
                "identifier": "add2NonNeg",
                "newPage": false,
                "searchKey": "image.add2NonNeg",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func add2NonNeg(x int, y int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc add2NonNeg(x int, y int) int\n```\n\nadd2NonNeg returns (x + y), unless at least one argument is negative or if the computation overflows the int type, in which case it returns -1. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#pixelBufferLength",
              "documentation": {
                "identifier": "pixelBufferLength",
                "newPage": false,
                "searchKey": "image.pixelBufferLength",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func pixelBufferLength(bytesPerPixel int, r Rectangle, imageTypeName string) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc pixelBufferLength(bytesPerPixel int, r Rectangle, imageTypeName string) int\n```\n\npixelBufferLength returns the length of the []uint8 typed Pix slice field for the NewXxx functions. Conceptually, this is just (bpp * width * height), but this function panics if at least one of those is negative or if the computation would overflow the int type. \n\nThis panics instead of returning an error because of backwards compatibility. The NewXxx functions do not return an error. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#yCbCrSize",
              "documentation": {
                "identifier": "yCbCrSize",
                "newPage": false,
                "searchKey": "image.yCbCrSize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func yCbCrSize(r Rectangle, subsampleRatio YCbCrSubsampleRatio) (w, h, cw, ch int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc yCbCrSize(r Rectangle, subsampleRatio YCbCrSubsampleRatio) (w, h, cw, ch int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#TestRectangle",
              "documentation": {
                "identifier": "TestRectangle",
                "newPage": false,
                "searchKey": "image.TestRectangle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRectangle(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRectangle(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#cmp",
              "documentation": {
                "identifier": "cmp",
                "newPage": false,
                "searchKey": "image.cmp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func cmp(cm color.Model, c0, c1 color.Color) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc cmp(cm color.Model, c0, c1 color.Color) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#TestImage",
              "documentation": {
                "identifier": "TestImage",
                "newPage": false,
                "searchKey": "image.TestImage",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestImage(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestImage(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#TestNewXxxBadRectangle",
              "documentation": {
                "identifier": "TestNewXxxBadRectangle",
                "newPage": false,
                "searchKey": "image.TestNewXxxBadRectangle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewXxxBadRectangle(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewXxxBadRectangle(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#Test16BitsPerColorChannel",
              "documentation": {
                "identifier": "Test16BitsPerColorChannel",
                "newPage": false,
                "searchKey": "image.Test16BitsPerColorChannel",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test16BitsPerColorChannel(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test16BitsPerColorChannel(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#TestRGBA64Image",
              "documentation": {
                "identifier": "TestRGBA64Image",
                "newPage": false,
                "searchKey": "image.TestRGBA64Image",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRGBA64Image(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRGBA64Image(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#BenchmarkAt",
              "documentation": {
                "identifier": "BenchmarkAt",
                "newPage": false,
                "searchKey": "image.BenchmarkAt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAt(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAt(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#BenchmarkSet",
              "documentation": {
                "identifier": "BenchmarkSet",
                "newPage": false,
                "searchKey": "image.BenchmarkSet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSet(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSet(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#BenchmarkRGBAAt",
              "documentation": {
                "identifier": "BenchmarkRGBAAt",
                "newPage": false,
                "searchKey": "image.BenchmarkRGBAAt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRGBAAt(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRGBAAt(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#BenchmarkRGBASetRGBA",
              "documentation": {
                "identifier": "BenchmarkRGBASetRGBA",
                "newPage": false,
                "searchKey": "image.BenchmarkRGBASetRGBA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRGBASetRGBA(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRGBASetRGBA(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#BenchmarkRGBA64At",
              "documentation": {
                "identifier": "BenchmarkRGBA64At",
                "newPage": false,
                "searchKey": "image.BenchmarkRGBA64At",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRGBA64At(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRGBA64At(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#BenchmarkRGBA64SetRGBA64",
              "documentation": {
                "identifier": "BenchmarkRGBA64SetRGBA64",
                "newPage": false,
                "searchKey": "image.BenchmarkRGBA64SetRGBA64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRGBA64SetRGBA64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRGBA64SetRGBA64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#BenchmarkNRGBAAt",
              "documentation": {
                "identifier": "BenchmarkNRGBAAt",
                "newPage": false,
                "searchKey": "image.BenchmarkNRGBAAt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkNRGBAAt(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkNRGBAAt(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#BenchmarkNRGBASetNRGBA",
              "documentation": {
                "identifier": "BenchmarkNRGBASetNRGBA",
                "newPage": false,
                "searchKey": "image.BenchmarkNRGBASetNRGBA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkNRGBASetNRGBA(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkNRGBASetNRGBA(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#BenchmarkNRGBA64At",
              "documentation": {
                "identifier": "BenchmarkNRGBA64At",
                "newPage": false,
                "searchKey": "image.BenchmarkNRGBA64At",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkNRGBA64At(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkNRGBA64At(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#BenchmarkNRGBA64SetNRGBA64",
              "documentation": {
                "identifier": "BenchmarkNRGBA64SetNRGBA64",
                "newPage": false,
                "searchKey": "image.BenchmarkNRGBA64SetNRGBA64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkNRGBA64SetNRGBA64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkNRGBA64SetNRGBA64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#BenchmarkAlphaAt",
              "documentation": {
                "identifier": "BenchmarkAlphaAt",
                "newPage": false,
                "searchKey": "image.BenchmarkAlphaAt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAlphaAt(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAlphaAt(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#BenchmarkAlphaSetAlpha",
              "documentation": {
                "identifier": "BenchmarkAlphaSetAlpha",
                "newPage": false,
                "searchKey": "image.BenchmarkAlphaSetAlpha",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAlphaSetAlpha(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAlphaSetAlpha(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#BenchmarkAlpha16At",
              "documentation": {
                "identifier": "BenchmarkAlpha16At",
                "newPage": false,
                "searchKey": "image.BenchmarkAlpha16At",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAlpha16At(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAlpha16At(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#BenchmarkAlphaSetAlpha16",
              "documentation": {
                "identifier": "BenchmarkAlphaSetAlpha16",
                "newPage": false,
                "searchKey": "image.BenchmarkAlphaSetAlpha16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAlphaSetAlpha16(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAlphaSetAlpha16(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#BenchmarkGrayAt",
              "documentation": {
                "identifier": "BenchmarkGrayAt",
                "newPage": false,
                "searchKey": "image.BenchmarkGrayAt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkGrayAt(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkGrayAt(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#BenchmarkGraySetGray",
              "documentation": {
                "identifier": "BenchmarkGraySetGray",
                "newPage": false,
                "searchKey": "image.BenchmarkGraySetGray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkGraySetGray(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkGraySetGray(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#BenchmarkGray16At",
              "documentation": {
                "identifier": "BenchmarkGray16At",
                "newPage": false,
                "searchKey": "image.BenchmarkGray16At",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkGray16At(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkGray16At(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#BenchmarkGraySetGray16",
              "documentation": {
                "identifier": "BenchmarkGraySetGray16",
                "newPage": false,
                "searchKey": "image.BenchmarkGraySetGray16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkGraySetGray16(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkGraySetGray16(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#TestYCbCr",
              "documentation": {
                "identifier": "TestYCbCr",
                "newPage": false,
                "searchKey": "image.TestYCbCr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestYCbCr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestYCbCr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#testYCbCr",
              "documentation": {
                "identifier": "testYCbCr",
                "newPage": false,
                "searchKey": "image.testYCbCr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testYCbCr(t *testing.T, r Rectangle, subsampleRatio YCbCrSubsampleRatio, delta Point)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testYCbCr(t *testing.T, r Rectangle, subsampleRatio YCbCrSubsampleRatio, delta Point)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/image#TestYCbCrSlicesDontOverlap",
              "documentation": {
                "identifier": "TestYCbCrSlicesDontOverlap",
                "newPage": false,
                "searchKey": "image.TestYCbCrSlicesDontOverlap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestYCbCrSlicesDontOverlap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestYCbCrSlicesDontOverlap(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/image/color"
    },
    {
      "pathID": "/image/draw"
    },
    {
      "pathID": "/image/draw_test"
    },
    {
      "pathID": "/image/gif"
    },
    {
      "pathID": "/image/jpeg"
    },
    {
      "pathID": "/image/png"
    },
    {
      "pathID": "/image/png_test"
    }
  ]
}
