{
  "pathID": "/io/fs_test",
  "documentation": {
    "identifier": "fs_test",
    "newPage": true,
    "searchKey": "io/fs_test",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package fs_test"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/io/fs_test#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/io/fs_test#isValidPathTests",
              "documentation": {
                "identifier": "isValidPathTests",
                "newPage": false,
                "searchKey": "fs_test.isValidPathTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var isValidPathTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar isValidPathTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#globTests",
              "documentation": {
                "identifier": "globTests",
                "newPage": false,
                "searchKey": "fs_test.globTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var globTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar globTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#testFsys",
              "documentation": {
                "identifier": "testFsys",
                "newPage": false,
                "searchKey": "fs_test.testFsys",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var testFsys"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testFsys = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#sysValue",
              "documentation": {
                "identifier": "sysValue",
                "newPage": false,
                "searchKey": "fs_test.sysValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var sysValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sysValue int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#tree",
              "documentation": {
                "identifier": "tree",
                "newPage": false,
                "searchKey": "fs_test.tree",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tree"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tree = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/io/fs_test#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/io/fs_test#globOnly",
              "documentation": {
                "identifier": "globOnly",
                "newPage": false,
                "searchKey": "fs_test.globOnly",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type globOnly struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype globOnly struct{ GlobFS }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/io/fs_test#globOnly.Open",
                    "documentation": {
                      "identifier": "globOnly.Open",
                      "newPage": false,
                      "searchKey": "fs_test.globOnly.Open",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (globOnly) Open(name string) (File, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (globOnly) Open(name string) (File, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#readDirOnly",
              "documentation": {
                "identifier": "readDirOnly",
                "newPage": false,
                "searchKey": "fs_test.readDirOnly",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type readDirOnly struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype readDirOnly struct{ ReadDirFS }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/io/fs_test#readDirOnly.Open",
                    "documentation": {
                      "identifier": "readDirOnly.Open",
                      "newPage": false,
                      "searchKey": "fs_test.readDirOnly.Open",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (readDirOnly) Open(name string) (File, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (readDirOnly) Open(name string) (File, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#readFileOnly",
              "documentation": {
                "identifier": "readFileOnly",
                "newPage": false,
                "searchKey": "fs_test.readFileOnly",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type readFileOnly struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype readFileOnly struct{ ReadFileFS }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/io/fs_test#readFileOnly.Open",
                    "documentation": {
                      "identifier": "readFileOnly.Open",
                      "newPage": false,
                      "searchKey": "fs_test.readFileOnly.Open",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (readFileOnly) Open(name string) (File, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (readFileOnly) Open(name string) (File, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#openOnly",
              "documentation": {
                "identifier": "openOnly",
                "newPage": false,
                "searchKey": "fs_test.openOnly",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type openOnly struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype openOnly struct{ FS }\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#statOnly",
              "documentation": {
                "identifier": "statOnly",
                "newPage": false,
                "searchKey": "fs_test.statOnly",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type statOnly struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype statOnly struct{ StatFS }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/io/fs_test#statOnly.Open",
                    "documentation": {
                      "identifier": "statOnly.Open",
                      "newPage": false,
                      "searchKey": "fs_test.statOnly.Open",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (statOnly) Open(name string) (File, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (statOnly) Open(name string) (File, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#subOnly",
              "documentation": {
                "identifier": "subOnly",
                "newPage": false,
                "searchKey": "fs_test.subOnly",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type subOnly struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype subOnly struct{ SubFS }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/io/fs_test#subOnly.Open",
                    "documentation": {
                      "identifier": "subOnly.Open",
                      "newPage": false,
                      "searchKey": "fs_test.subOnly.Open",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (subOnly) Open(name string) (File, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (subOnly) Open(name string) (File, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#Node",
              "documentation": {
                "identifier": "Node",
                "newPage": false,
                "searchKey": "fs_test.Node",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Node struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Node struct {\n\tname    string\n\tentries []*Node // nil if the entry is a file\n\tmark    int\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/io/fs_test#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/io/fs_test#ExampleWalkDir",
              "documentation": {
                "identifier": "ExampleWalkDir",
                "newPage": false,
                "searchKey": "fs_test.ExampleWalkDir",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleWalkDir()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleWalkDir()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#TestValidPath",
              "documentation": {
                "identifier": "TestValidPath",
                "newPage": false,
                "searchKey": "fs_test.TestValidPath",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValidPath(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValidPath(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#TestGlob",
              "documentation": {
                "identifier": "TestGlob",
                "newPage": false,
                "searchKey": "fs_test.TestGlob",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGlob(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGlob(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#TestGlobError",
              "documentation": {
                "identifier": "TestGlobError",
                "newPage": false,
                "searchKey": "fs_test.TestGlobError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGlobError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGlobError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#contains",
              "documentation": {
                "identifier": "contains",
                "newPage": false,
                "searchKey": "fs_test.contains",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func contains(vector []string, s string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc contains(vector []string, s string) bool\n```\n\ncontains reports whether vector contains the string s. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#TestGlobMethod",
              "documentation": {
                "identifier": "TestGlobMethod",
                "newPage": false,
                "searchKey": "fs_test.TestGlobMethod",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGlobMethod(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGlobMethod(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#TestReadDir",
              "documentation": {
                "identifier": "TestReadDir",
                "newPage": false,
                "searchKey": "fs_test.TestReadDir",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadDir(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadDir(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#TestFileInfoToDirEntry",
              "documentation": {
                "identifier": "TestFileInfoToDirEntry",
                "newPage": false,
                "searchKey": "fs_test.TestFileInfoToDirEntry",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFileInfoToDirEntry(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFileInfoToDirEntry(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#TestReadFile",
              "documentation": {
                "identifier": "TestReadFile",
                "newPage": false,
                "searchKey": "fs_test.TestReadFile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadFile(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadFile(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#TestStat",
              "documentation": {
                "identifier": "TestStat",
                "newPage": false,
                "searchKey": "fs_test.TestStat",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStat(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStat(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#TestSub",
              "documentation": {
                "identifier": "TestSub",
                "newPage": false,
                "searchKey": "fs_test.TestSub",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSub(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSub(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#walkTree",
              "documentation": {
                "identifier": "walkTree",
                "newPage": false,
                "searchKey": "fs_test.walkTree",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func walkTree(n *Node, path string, f func(path string, n *Node))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc walkTree(n *Node, path string, f func(path string, n *Node))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#makeTree",
              "documentation": {
                "identifier": "makeTree",
                "newPage": false,
                "searchKey": "fs_test.makeTree",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeTree(t *testing.T) FS"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeTree(t *testing.T) FS\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#markTree",
              "documentation": {
                "identifier": "markTree",
                "newPage": false,
                "searchKey": "fs_test.markTree",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func markTree(n *Node)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc markTree(n *Node)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#checkMarks",
              "documentation": {
                "identifier": "checkMarks",
                "newPage": false,
                "searchKey": "fs_test.checkMarks",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkMarks(t *testing.T, report bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkMarks(t *testing.T, report bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#mark",
              "documentation": {
                "identifier": "mark",
                "newPage": false,
                "searchKey": "fs_test.mark",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func mark(entry DirEntry, err error, errors *[]error, clear bool) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mark(entry DirEntry, err error, errors *[]error, clear bool) error\n```\n\nAssumes that each node name is unique. Good enough for a test. If clear is true, any incoming error is cleared before return. The errors are always accumulated, though. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/io/fs_test#TestWalkDir",
              "documentation": {
                "identifier": "TestWalkDir",
                "newPage": false,
                "searchKey": "fs_test.TestWalkDir",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWalkDir(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWalkDir(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
