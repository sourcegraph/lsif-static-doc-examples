{
  "pathID": "/std/flag_test",
  "documentation": {
    "identifier": "flag_test",
    "newPage": true,
    "searchKey": "std/flag_test",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package flag_test"
  },
  "detail": {
    "kind": "markdown",
    "value": "These examples demonstrate more intricate uses of the flag package. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/std/flag_test#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/flag_test#defaultOutput",
              "documentation": {
                "identifier": "defaultOutput",
                "newPage": false,
                "searchKey": "flag_test.defaultOutput",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const defaultOutput"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst defaultOutput = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/flag_test#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/flag_test#species",
              "documentation": {
                "identifier": "species",
                "newPage": false,
                "searchKey": "flag_test.species",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var species"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar species = flag.String(\"species\", \"gopher\", \"the species we are studying\")\n```\n\nExample 1: A single string flag called \"species\" with default value \"gopher\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#gopherType",
              "documentation": {
                "identifier": "gopherType",
                "newPage": false,
                "searchKey": "flag_test.gopherType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var gopherType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar gopherType string\n```\n\nExample 2: Two flags sharing a variable, so we can have a shorthand. The order of initialization is undefined, so make sure both use the same default value. They must be set up with an init function. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#intervalFlag",
              "documentation": {
                "identifier": "intervalFlag",
                "newPage": false,
                "searchKey": "flag_test.intervalFlag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var intervalFlag"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar intervalFlag interval\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#u",
              "documentation": {
                "identifier": "u",
                "newPage": false,
                "searchKey": "flag_test.u",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var u"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar u = &url.URL{}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/flag_test#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/flag_test#interval",
              "documentation": {
                "identifier": "interval",
                "newPage": false,
                "searchKey": "flag_test.interval",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type interval []time.Duration"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype interval []time.Duration\n```\n\nExample 3: A user-defined flag type, a slice of durations. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/flag_test#interval.String",
                    "documentation": {
                      "identifier": "interval.String",
                      "newPage": false,
                      "searchKey": "flag_test.interval.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *interval) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *interval) String() string\n```\n\nString is the method to format the flag's value, part of the flag.Value interface. The String method's output will be used in diagnostics. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/flag_test#interval.Set",
                    "documentation": {
                      "identifier": "interval.Set",
                      "newPage": false,
                      "searchKey": "flag_test.interval.Set",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *interval) Set(value string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *interval) Set(value string) error\n```\n\nSet is the method to set the flag value, part of the flag.Value interface. Set's argument is a string to be parsed to set the flag. It's a comma-separated list, so we split it. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#URLValue",
              "documentation": {
                "identifier": "URLValue",
                "newPage": false,
                "searchKey": "flag_test.URLValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type URLValue struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype URLValue struct {\n\tURL *url.URL\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/flag_test#URLValue.String",
                    "documentation": {
                      "identifier": "URLValue.String",
                      "newPage": false,
                      "searchKey": "flag_test.URLValue.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v URLValue) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v URLValue) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/flag_test#URLValue.Set",
                    "documentation": {
                      "identifier": "URLValue.Set",
                      "newPage": false,
                      "searchKey": "flag_test.URLValue.Set",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v URLValue) Set(s string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v URLValue) Set(s string) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#flagVar",
              "documentation": {
                "identifier": "flagVar",
                "newPage": false,
                "searchKey": "flag_test.flagVar",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type flagVar []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype flagVar []string\n```\n\nDeclare a user-defined flag type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/flag_test#flagVar.String",
                    "documentation": {
                      "identifier": "flagVar.String",
                      "newPage": false,
                      "searchKey": "flag_test.flagVar.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *flagVar) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *flagVar) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/flag_test#flagVar.Set",
                    "documentation": {
                      "identifier": "flagVar.Set",
                      "newPage": false,
                      "searchKey": "flag_test.flagVar.Set",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *flagVar) Set(value string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *flagVar) Set(value string) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#boolFlagVar",
              "documentation": {
                "identifier": "boolFlagVar",
                "newPage": false,
                "searchKey": "flag_test.boolFlagVar",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type boolFlagVar struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype boolFlagVar struct {\n\tcount int\n}\n```\n\nDeclare a user-defined boolean flag type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/flag_test#boolFlagVar.String",
                    "documentation": {
                      "identifier": "boolFlagVar.String",
                      "newPage": false,
                      "searchKey": "flag_test.boolFlagVar.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *boolFlagVar) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *boolFlagVar) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/flag_test#boolFlagVar.Set",
                    "documentation": {
                      "identifier": "boolFlagVar.Set",
                      "newPage": false,
                      "searchKey": "flag_test.boolFlagVar.Set",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *boolFlagVar) Set(value string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *boolFlagVar) Set(value string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/flag_test#boolFlagVar.IsBoolFlag",
                    "documentation": {
                      "identifier": "boolFlagVar.IsBoolFlag",
                      "newPage": false,
                      "searchKey": "flag_test.boolFlagVar.IsBoolFlag",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *boolFlagVar) IsBoolFlag() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *boolFlagVar) IsBoolFlag() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/flag_test#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/flag_test#ExampleFunc",
              "documentation": {
                "identifier": "ExampleFunc",
                "newPage": false,
                "searchKey": "flag_test.ExampleFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleFunc()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleFunc()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "flag_test.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "flag_test.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#Example",
              "documentation": {
                "identifier": "Example",
                "newPage": false,
                "searchKey": "flag_test.Example",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Example()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Example()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#ExampleValue",
              "documentation": {
                "identifier": "ExampleValue",
                "newPage": false,
                "searchKey": "flag_test.ExampleValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleValue()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleValue()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#boolString",
              "documentation": {
                "identifier": "boolString",
                "newPage": false,
                "searchKey": "flag_test.boolString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func boolString(s string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc boolString(s string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestEverything",
              "documentation": {
                "identifier": "TestEverything",
                "newPage": false,
                "searchKey": "flag_test.TestEverything",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEverything(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEverything(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestGet",
              "documentation": {
                "identifier": "TestGet",
                "newPage": false,
                "searchKey": "flag_test.TestGet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGet(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGet(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestUsage",
              "documentation": {
                "identifier": "TestUsage",
                "newPage": false,
                "searchKey": "flag_test.TestUsage",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsage(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsage(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#testParse",
              "documentation": {
                "identifier": "testParse",
                "newPage": false,
                "searchKey": "flag_test.testParse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testParse(f *FlagSet, t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testParse(f *FlagSet, t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestParse",
              "documentation": {
                "identifier": "TestParse",
                "newPage": false,
                "searchKey": "flag_test.TestParse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestFlagSetParse",
              "documentation": {
                "identifier": "TestFlagSetParse",
                "newPage": false,
                "searchKey": "flag_test.TestFlagSetParse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFlagSetParse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFlagSetParse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestUserDefined",
              "documentation": {
                "identifier": "TestUserDefined",
                "newPage": false,
                "searchKey": "flag_test.TestUserDefined",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserDefined(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserDefined(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestUserDefinedFunc",
              "documentation": {
                "identifier": "TestUserDefinedFunc",
                "newPage": false,
                "searchKey": "flag_test.TestUserDefinedFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserDefinedFunc(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserDefinedFunc(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestUserDefinedForCommandLine",
              "documentation": {
                "identifier": "TestUserDefinedForCommandLine",
                "newPage": false,
                "searchKey": "flag_test.TestUserDefinedForCommandLine",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserDefinedForCommandLine(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserDefinedForCommandLine(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestUserDefinedBool",
              "documentation": {
                "identifier": "TestUserDefinedBool",
                "newPage": false,
                "searchKey": "flag_test.TestUserDefinedBool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserDefinedBool(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserDefinedBool(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestSetOutput",
              "documentation": {
                "identifier": "TestSetOutput",
                "newPage": false,
                "searchKey": "flag_test.TestSetOutput",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSetOutput(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSetOutput(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestChangingArgs",
              "documentation": {
                "identifier": "TestChangingArgs",
                "newPage": false,
                "searchKey": "flag_test.TestChangingArgs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChangingArgs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChangingArgs(t *testing.T)\n```\n\nThis tests that one can reset the flags. This still works but not well, and is superseded by FlagSet. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestHelp",
              "documentation": {
                "identifier": "TestHelp",
                "newPage": false,
                "searchKey": "flag_test.TestHelp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHelp(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHelp(t *testing.T)\n```\n\nTest that -help invokes the usage message and returns ErrHelp. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestPrintDefaults",
              "documentation": {
                "identifier": "TestPrintDefaults",
                "newPage": false,
                "searchKey": "flag_test.TestPrintDefaults",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPrintDefaults(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPrintDefaults(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestIntFlagOverflow",
              "documentation": {
                "identifier": "TestIntFlagOverflow",
                "newPage": false,
                "searchKey": "flag_test.TestIntFlagOverflow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIntFlagOverflow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIntFlagOverflow(t *testing.T)\n```\n\nIssue 19230: validate range of Int and Uint flag values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestUsageOutput",
              "documentation": {
                "identifier": "TestUsageOutput",
                "newPage": false,
                "searchKey": "flag_test.TestUsageOutput",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUsageOutput(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUsageOutput(t *testing.T)\n```\n\nIssue 20998: Usage should respect CommandLine.output. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestGetters",
              "documentation": {
                "identifier": "TestGetters",
                "newPage": false,
                "searchKey": "flag_test.TestGetters",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetters(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetters(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestParseError",
              "documentation": {
                "identifier": "TestParseError",
                "newPage": false,
                "searchKey": "flag_test.TestParseError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestRangeError",
              "documentation": {
                "identifier": "TestRangeError",
                "newPage": false,
                "searchKey": "flag_test.TestRangeError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRangeError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRangeError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestExitCode",
              "documentation": {
                "identifier": "TestExitCode",
                "newPage": false,
                "searchKey": "flag_test.TestExitCode",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExitCode(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExitCode(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#mustPanic",
              "documentation": {
                "identifier": "mustPanic",
                "newPage": false,
                "searchKey": "flag_test.mustPanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func mustPanic(t *testing.T, testName string, expected string, f func())"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mustPanic(t *testing.T, testName string, expected string, f func())\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestInvalidFlags",
              "documentation": {
                "identifier": "TestInvalidFlags",
                "newPage": false,
                "searchKey": "flag_test.TestInvalidFlags",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInvalidFlags(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInvalidFlags(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/flag_test#TestRedefinedFlags",
              "documentation": {
                "identifier": "TestRedefinedFlags",
                "newPage": false,
                "searchKey": "flag_test.TestRedefinedFlags",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRedefinedFlags(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRedefinedFlags(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
